
Robochess_2021_mainboard_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa8  080140b8  080140b8  000240b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b60  08014b60  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08014b60  08014b60  00024b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b68  08014b68  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014b68  08014b68  00024b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014b6c  08014b6c  00024b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08014b70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b538  200001f0  08014d60  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b728  08014d60  0003b728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028c82  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005678  00000000  00000000  00058ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce0  00000000  00000000  0005e520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ad0  00000000  00000000  00060200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d449  00000000  00000000  00061cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000239c1  00000000  00000000  0007f119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a90fa  00000000  00000000  000a2ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014bbd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b38  00000000  00000000  0014bc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801409c 	.word	0x0801409c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0801409c 	.word	0x0801409c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <HAL_I2C_ErrorCallback>:
uint16_t data_AS5600_M1,data_AS5600_M2;

bool FLAG_AS5600_M1 = HAL_OK, FLAG_AS5600_M2 = HAL_OK;

// Handler I2C Error
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==AS5600_1_I2C){
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <HAL_I2C_ErrorCallback+0x34>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d102      	bne.n	8000f68 <HAL_I2C_ErrorCallback+0x18>
       FLAG_AS5600_M1 = HAL_ERROR;
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_I2C_ErrorCallback+0x38>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
	}
	if(hi2c->Instance==AS5600_2_I2C){
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_I2C_ErrorCallback+0x3c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d102      	bne.n	8000f78 <HAL_I2C_ErrorCallback+0x28>
		FLAG_AS5600_M2 = HAL_ERROR;
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <HAL_I2C_ErrorCallback+0x40>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
	}
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	40005400 	.word	0x40005400
 8000f88:	2000020c 	.word	0x2000020c
 8000f8c:	40005c00 	.word	0x40005c00
 8000f90:	2000020d 	.word	0x2000020d

08000f94 <AS5600_M1_getPOS>:

void AS5600_M1_getPOS(){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1,0x36<<1,_RAWANGLEAddressLSB,1,(uint8_t*)&data_AS5600_M1,2);
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <AS5600_M1_getPOS+0x20>)
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	220d      	movs	r2, #13
 8000fa6:	216c      	movs	r1, #108	; 0x6c
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <AS5600_M1_getPOS+0x24>)
 8000faa:	f005 ffd9 	bl	8006f60 <HAL_I2C_Mem_Read_DMA>
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000af36 	.word	0x2000af36
 8000fb8:	2000b1d8 	.word	0x2000b1d8

08000fbc <AS5600_M2_getPOS>:
void AS5600_M2_getPOS(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c3,0x36<<1,_RAWANGLEAddressLSB,1,(uint8_t *)&data_AS5600_M2,2);
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <AS5600_M2_getPOS+0x20>)
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	220d      	movs	r2, #13
 8000fce:	216c      	movs	r1, #108	; 0x6c
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <AS5600_M2_getPOS+0x24>)
 8000fd2:	f005 ffc5 	bl	8006f60 <HAL_I2C_Mem_Read_DMA>
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	2000af34 	.word	0x2000af34
 8000fe0:	2000b124 	.word	0x2000b124

08000fe4 <AS5600_Start_Update>:
		case 55: return 2;  //phat hien nam cham binh thuong
		case 23: return 3; //phat hien nam cham yeu
	}
	return data_status[0];
}
void AS5600_Start_Update(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	TIM_AS5600->ARR = 1000;         //for frequency = 100hz
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <AS5600_Start_Update+0x18>)
 8000fea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&TIM_AS5600_UPDATE);
 8000ff0:	4803      	ldr	r0, [pc, #12]	; (8001000 <AS5600_Start_Update+0x1c>)
 8000ff2:	f009 f8a3 	bl	800a13c <HAL_TIM_Base_Start_IT>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40014400 	.word	0x40014400
 8001000:	2000b4f0 	.word	0x2000b4f0

08001004 <AS5600_Start_Update_Low>:
void AS5600_Start_Update_Low(){
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	TIM_AS5600->ARR = 1000;         //for frequency = 100hz
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <AS5600_Start_Update_Low+0x18>)
 800100a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40014400 	.word	0x40014400

08001020 <AS5600_Start_Update_High>:
void AS5600_Start_Update_High(){
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	TIM_AS5600->ARR = 800;          //for frequency = 8khz
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <AS5600_Start_Update_High+0x18>)
 8001026:	f44f 7248 	mov.w	r2, #800	; 0x320
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40014400 	.word	0x40014400

0800103c <AccelStepper_init>:

#include "AccelStepper.h"
#include "config.h"

void AccelStepper_init(struct AccelStepperData * AccelMotor,TIM_HandleTypeDef htim,uint16_t startPosition, uint32_t maxSpeed,uint32_t maxAccel){
 800103c:	b084      	sub	sp, #16
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	f107 0014 	add.w	r0, r7, #20
 800104a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  //khoi tao thu vien
	AccelMotor->_currentPos = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	631a      	str	r2, [r3, #48]	; 0x30
	AccelMotor->_targetPos = 0;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
	AccelMotor->_speed = 0.0f;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
	AccelMotor->_maxSpeed = 1.0f;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001068:	609a      	str	r2, [r3, #8]
	AccelMotor->_acceleration = 0.0f;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
	AccelMotor->_sqrt_twoa = 1.0f;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001078:	611a      	str	r2, [r3, #16]
	AccelMotor->_stepInterval = 0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]
	AccelMotor->_lastStepTime = 0;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
	AccelMotor->_n = 0;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	61da      	str	r2, [r3, #28]
	AccelMotor->_c0 = 0.0f;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
	AccelMotor->_cn = 0.0f;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
	AccelMotor->_cmin = 1.0f;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
	AccelMotor->_direction = DIRECTION_CCW;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	setMaxSpeed(AccelMotor,maxSpeed);  
 80010ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f83e 	bl	800113c <setMaxSpeed>
	setAcceleration(AccelMotor,maxAccel);
 80010c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f882 	bl	80011d8 <setAcceleration>
	AccelMotor->_currentPos = startPosition;  //setup vi tri ban dau
 80010d4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	631a      	str	r2, [r3, #48]	; 0x30
	AccelMotor->_targetPos=AccelMotor->_currentPos;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	601a      	str	r2, [r3, #0]
	computeNewSpeed(AccelMotor);  //tinh toan buoc dau tien
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f8eb 	bl	80012c0 <computeNewSpeed>
	run(AccelMotor);          
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f9e2 	bl	80014b4 <run>
  if(AccelMotor->usingTimChanelN==ON) 	
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d108      	bne.n	800110c <AccelStepper_init+0xd0>
		HAL_TIMEx_PWMN_Start_IT(&htim,AccelMotor->TIM_CHANEL); 
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f009 ffff 	bl	800b108 <HAL_TIMEx_PWMN_Start_IT>
 800110a:	e007      	b.n	800111c <AccelStepper_init+0xe0>
	else
	HAL_TIM_PWM_Start_IT(&htim,AccelMotor->TIM_CHANEL);  //khoi dong TIMER tao xung STEP
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f009 f97c 	bl	800a414 <HAL_TIM_PWM_Start_IT>
	HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_SET);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001126:	2201      	movs	r2, #1
 8001128:	4619      	mov	r1, r3
 800112a:	f005 fda1 	bl	8006c70 <HAL_GPIO_WritePin>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001138:	b004      	add	sp, #16
 800113a:	4770      	bx	lr

0800113c <setMaxSpeed>:

void setMaxSpeed(struct AccelStepperData * AccelMotor,float speed)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	ed87 0a00 	vstr	s0, [r7]
    if (speed < 0.0f)
 8001148:	edd7 7a00 	vldr	s15, [r7]
 800114c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001154:	d505      	bpl.n	8001162 <setMaxSpeed+0x26>
       speed = -speed;
 8001156:	edd7 7a00 	vldr	s15, [r7]
 800115a:	eef1 7a67 	vneg.f32	s15, s15
 800115e:	edc7 7a00 	vstr	s15, [r7]
    if (AccelMotor->_maxSpeed != speed)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	edd3 7a02 	vldr	s15, [r3, #8]
 8001168:	ed97 7a00 	vldr	s14, [r7]
 800116c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001174:	d027      	beq.n	80011c6 <setMaxSpeed+0x8a>
    {
	AccelMotor->_maxSpeed = speed;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	609a      	str	r2, [r3, #8]
	AccelMotor->_cmin = 1000000.0f / speed;
 800117c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80011d0 <setMaxSpeed+0x94>
 8001180:	ed97 7a00 	vldr	s14, [r7]
 8001184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	// Recompute _n from current speed and adjust speed if accelerating or cruising
	if (AccelMotor->_n > 0)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	2b00      	cmp	r3, #0
 8001194:	dd17      	ble.n	80011c6 <setMaxSpeed+0x8a>
	{
	    AccelMotor->_n = (long)((AccelMotor->_speed * AccelMotor->_speed) / (2.0f * AccelMotor->_acceleration)); // Equation 16
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	ed93 7a01 	vldr	s14, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	edd3 7a01 	vldr	s15, [r3, #4]
 80011a2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80011ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 2a90 	vmov	r2, s15
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	61da      	str	r2, [r3, #28]
	    computeNewSpeed(AccelMotor);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f87d 	bl	80012c0 <computeNewSpeed>
	}
    }
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	49742400 	.word	0x49742400
 80011d4:	00000000 	.word	0x00000000

080011d8 <setAcceleration>:
void setAcceleration(struct AccelStepperData * AccelMotor,float acceleration)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	ed87 0a00 	vstr	s0, [r7]
    if (acceleration == 0.0f)
 80011e4:	edd7 7a00 	vldr	s15, [r7]
 80011e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	d058      	beq.n	80012a4 <setAcceleration+0xcc>
	return;
    if (acceleration < 0.0f)
 80011f2:	edd7 7a00 	vldr	s15, [r7]
 80011f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	d505      	bpl.n	800120c <setAcceleration+0x34>
      acceleration = -acceleration;
 8001200:	edd7 7a00 	vldr	s15, [r7]
 8001204:	eef1 7a67 	vneg.f32	s15, s15
 8001208:	edc7 7a00 	vstr	s15, [r7]
    if (AccelMotor->_acceleration != acceleration)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001212:	ed97 7a00 	vldr	s14, [r7]
 8001216:	eeb4 7a67 	vcmp.f32	s14, s15
 800121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121e:	d042      	beq.n	80012a6 <setAcceleration+0xce>
    {
	// Recompute _n per Equation 17
	AccelMotor->_n = AccelMotor->_n * (AccelMotor->_acceleration / acceleration);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	ed93 6a03 	vldr	s12, [r3, #12]
 8001232:	edd7 6a00 	vldr	s13, [r7]
 8001236:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800123a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001242:	ee17 2a90 	vmov	r2, s15
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	61da      	str	r2, [r3, #28]
	// New c0 per Equation 7, with correction per Equation 15
	AccelMotor->_c0 = 0.676f * sqrt(2.0f / acceleration) * 1000000.0f; // Equation 15
 800124a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800124e:	edd7 7a00 	vldr	s15, [r7]
 8001252:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001256:	ee16 0a90 	vmov	r0, s13
 800125a:	f7ff f97d 	bl	8000558 <__aeabi_f2d>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	ec43 2b10 	vmov	d0, r2, r3
 8001266:	f011 fbed 	bl	8012a44 <sqrt>
 800126a:	ec51 0b10 	vmov	r0, r1, d0
 800126e:	a310      	add	r3, pc, #64	; (adr r3, 80012b0 <setAcceleration+0xd8>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff f9c8 	bl	8000608 <__aeabi_dmul>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	a30d      	add	r3, pc, #52	; (adr r3, 80012b8 <setAcceleration+0xe0>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7ff f9bf 	bl	8000608 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fc91 	bl	8000bb8 <__aeabi_d2f>
 8001296:	4602      	mov	r2, r0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	621a      	str	r2, [r3, #32]
	AccelMotor->_acceleration = acceleration;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	e000      	b.n	80012a6 <setAcceleration+0xce>
	return;
 80012a4:	bf00      	nop
	//computeNewSpeed(AccelMotor);
    }
}
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	f3af 8000 	nop.w
 80012b0:	c0000000 	.word	0xc0000000
 80012b4:	3fe5a1ca 	.word	0x3fe5a1ca
 80012b8:	00000000 	.word	0x00000000
 80012bc:	412e8480 	.word	0x412e8480

080012c0 <computeNewSpeed>:

void computeNewSpeed(struct AccelStepperData * AccelMotor)  //tinh toan 1 toc do moi
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  long distanceTo = distanceToGo(AccelMotor); // +ve is clockwise from curent location - duong neu cung chieu kim dong ho tu vi tri hien tai
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 f8e3 	bl	8001494 <distanceToGo>
 80012ce:	60f8      	str	r0, [r7, #12]

  long stepsToStop = (long)((AccelMotor->_speed * AccelMotor->_speed) / (2.0f * AccelMotor->_acceleration)); // Equation 16 - phuong trinh 16 theo giai thuat By David Austin
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80012dc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80012e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f2:	ee17 3a90 	vmov	r3, s15
 80012f6:	60bb      	str	r3, [r7, #8]

  if (distanceTo == 0 && stepsToStop <= 1){
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10d      	bne.n	800131a <computeNewSpeed+0x5a>
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	2b01      	cmp	r3, #1
 8001302:	dc0a      	bgt.n	800131a <computeNewSpeed+0x5a>
	// We are at the target and its time to stop -  da den vi tri muc tieu va bay gio dung lai
	  AccelMotor->_stepInterval = 0;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
	  AccelMotor->_speed = 0.0f;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
	  AccelMotor->_n = 0;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	61da      	str	r2, [r3, #28]
	  return;
 8001318:	e0b7      	b.n	800148a <computeNewSpeed+0x1ca>
  }

  if (distanceTo > 0){
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	dd24      	ble.n	800136a <computeNewSpeed+0xaa>
	  // We are anticlockwise from the target  -  chung ta dang o vi tri nguoc chieu kim dong ho 
	  // Need to go clockwise from here, maybe decelerate now  -  can quay theo chieu kim dong ho, co th giam toc ngay
	  if (AccelMotor->_n > 0){
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	2b00      	cmp	r3, #0
 8001326:	dd0d      	ble.n	8001344 <computeNewSpeed+0x84>
	    // Currently accelerating, need to decel now? Or maybe going the wrong way?
			// hien tai dang tang toc,can giam toc bay ngay? hoac co the di sai huong
	    if ((stepsToStop >= distanceTo) || AccelMotor->_direction == DIRECTION_CCW)
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	429a      	cmp	r2, r3
 800132e:	da04      	bge.n	800133a <computeNewSpeed+0x7a>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001336:	2b00      	cmp	r3, #0
 8001338:	d140      	bne.n	80013bc <computeNewSpeed+0xfc>
		     AccelMotor->_n = -stepsToStop; // Start deceleration - bat dau giam toc
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	425a      	negs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	61da      	str	r2, [r3, #28]
 8001342:	e03b      	b.n	80013bc <computeNewSpeed+0xfc>
	  }
	  else if (AccelMotor->_n < 0){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	2b00      	cmp	r3, #0
 800134a:	da37      	bge.n	80013bc <computeNewSpeed+0xfc>
	    // Currently decelerating, need to accel again? - hien tai dang giam toc ,can tang toc lai
	    if ((stepsToStop < distanceTo) && AccelMotor->_direction == DIRECTION_CW)
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	429a      	cmp	r2, r3
 8001352:	da33      	bge.n	80013bc <computeNewSpeed+0xfc>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800135a:	2b01      	cmp	r3, #1
 800135c:	d12e      	bne.n	80013bc <computeNewSpeed+0xfc>
		     AccelMotor->_n = -AccelMotor->_n; // Start accceleration  //bat dau tang toc
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	425a      	negs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	61da      	str	r2, [r3, #28]
 8001368:	e028      	b.n	80013bc <computeNewSpeed+0xfc>
	  }
  }
  else if (distanceTo < 0){
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	da25      	bge.n	80013bc <computeNewSpeed+0xfc>
	// We are clockwise from the target - chung ta dang o vi tri cung chieu kim dong ho
	// Need to go anticlockwise from here, maybe decelerate - can quay theo chieu nguoc lai ,co the giam toc
	   if (AccelMotor->_n > 0){
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	2b00      	cmp	r3, #0
 8001376:	dd0e      	ble.n	8001396 <computeNewSpeed+0xd6>
	      // Currently accelerating, need to decel now? Or maybe going the wrong way?
			  // hien dang tang toc,can giam toc ngay? hoac dang di sai huong?
	      if ((stepsToStop >= -distanceTo) || AccelMotor->_direction == DIRECTION_CW)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	425b      	negs	r3, r3
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	429a      	cmp	r2, r3
 8001380:	da04      	bge.n	800138c <computeNewSpeed+0xcc>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001388:	2b01      	cmp	r3, #1
 800138a:	d117      	bne.n	80013bc <computeNewSpeed+0xfc>
		        AccelMotor->_n = -stepsToStop; // Start deceleration - bat dau giam toc
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	425a      	negs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	61da      	str	r2, [r3, #28]
 8001394:	e012      	b.n	80013bc <computeNewSpeed+0xfc>
	   }
	   else if (AccelMotor->_n < 0){
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	2b00      	cmp	r3, #0
 800139c:	da0e      	bge.n	80013bc <computeNewSpeed+0xfc>
	       // Currently decelerating, need to accel again?
			   // hien dang giam toc, can tang toc lai?
	       if ((stepsToStop < -distanceTo) && AccelMotor->_direction == DIRECTION_CCW)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	425b      	negs	r3, r3
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	da09      	bge.n	80013bc <computeNewSpeed+0xfc>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d104      	bne.n	80013bc <computeNewSpeed+0xfc>
		        AccelMotor->_n = -AccelMotor->_n; // Start accceleration  //bat dau tang toc
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	425a      	negs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	61da      	str	r2, [r3, #28]
	   }
  }
    // Need to accelerate or decelerate - can tang toc hoac giam toc
  if (AccelMotor->_n == 0){
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10e      	bne.n	80013e2 <computeNewSpeed+0x122>
	   // First step from stopped  -  buoc dau tien tu vi tri stop
	   AccelMotor->_cn = AccelMotor->_c0;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1a      	ldr	r2, [r3, #32]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24
	   AccelMotor->_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bfcc      	ite	gt
 80013d2:	2301      	movgt	r3, #1
 80013d4:	2300      	movle	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80013e0:	e02e      	b.n	8001440 <computeNewSpeed+0x180>
  }
	else{
	   // Subsequent step. Works for accel (n is +_ve) and decel (n is -ve).
		 //buoc tiep theo. hoat dong cho tang toc (n la duong) va giam toc (n la am)
	   AccelMotor->_cn = AccelMotor->_cn - ((2.0f * AccelMotor->_cn) / ((4.0f * AccelMotor->_n) + 1)); // Equation 13 - phuong trinh 13 
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80013ee:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013fe:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001402:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800140a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800140e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	   AccelMotor->_cn = max(AccelMotor->_cn, AccelMotor->_cmin);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001428:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800142c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001430:	dd02      	ble.n	8001438 <computeNewSpeed+0x178>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	e001      	b.n	800143c <computeNewSpeed+0x17c>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6253      	str	r3, [r2, #36]	; 0x24
  }
  AccelMotor->_n++;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	61da      	str	r2, [r3, #28]
  AccelMotor->_stepInterval = AccelMotor->_cn;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001454:	ee17 2a90 	vmov	r2, s15
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	615a      	str	r2, [r3, #20]
  AccelMotor->_speed = 1000000.0f / AccelMotor->_cn;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001462:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001490 <computeNewSpeed+0x1d0>
 8001466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	edc3 7a01 	vstr	s15, [r3, #4]
  if (AccelMotor->_direction == DIRECTION_CCW) AccelMotor->_speed = -AccelMotor->_speed;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001476:	2b00      	cmp	r3, #0
 8001478:	d107      	bne.n	800148a <computeNewSpeed+0x1ca>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001480:	eef1 7a67 	vneg.f32	s15, s15
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	49742400 	.word	0x49742400

08001494 <distanceToGo>:

long distanceToGo(struct AccelStepperData * AccelMotor)  //tra lai khoang cach giua vi tri muc tieu va hien tai
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
    return AccelMotor->_targetPos - AccelMotor->_currentPos;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	1ad3      	subs	r3, r2, r3
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <run>:

void run(struct AccelStepperData * AccelMotor)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	if(AccelMotor->isStop){
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d037      	beq.n	8001536 <run+0x82>
		switch(AccelMotor->TIM_CHANEL){
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	2b0c      	cmp	r3, #12
 80014cc:	f200 80cd 	bhi.w	800166a <run+0x1b6>
 80014d0:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <run+0x24>)
 80014d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d6:	bf00      	nop
 80014d8:	0800150d 	.word	0x0800150d
 80014dc:	0800166b 	.word	0x0800166b
 80014e0:	0800166b 	.word	0x0800166b
 80014e4:	0800166b 	.word	0x0800166b
 80014e8:	08001517 	.word	0x08001517
 80014ec:	0800166b 	.word	0x0800166b
 80014f0:	0800166b 	.word	0x0800166b
 80014f4:	0800166b 	.word	0x0800166b
 80014f8:	08001521 	.word	0x08001521
 80014fc:	0800166b 	.word	0x0800166b
 8001500:	0800166b 	.word	0x0800166b
 8001504:	0800166b 	.word	0x0800166b
 8001508:	0800152b 	.word	0x0800152b
			case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001510:	2200      	movs	r2, #0
 8001512:	635a      	str	r2, [r3, #52]	; 0x34
 8001514:	e00e      	b.n	8001534 <run+0x80>
			case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151a:	2200      	movs	r2, #0
 800151c:	639a      	str	r2, [r3, #56]	; 0x38
 800151e:	e009      	b.n	8001534 <run+0x80>
			case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001524:	2200      	movs	r2, #0
 8001526:	63da      	str	r2, [r3, #60]	; 0x3c
 8001528:	e004      	b.n	8001534 <run+0x80>
			case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152e:	2200      	movs	r2, #0
 8001530:	641a      	str	r2, [r3, #64]	; 0x40
 8001532:	bf00      	nop
		}
		return;
 8001534:	e099      	b.n	800166a <run+0x1b6>
	}
  if(runSpeed(AccelMotor)){
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f89c 	bl	8001674 <runSpeed>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d043      	beq.n	80015ca <run+0x116>
	computeNewSpeed(AccelMotor);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff febc 	bl	80012c0 <computeNewSpeed>
	if(AccelMotor->_stepInterval==0){
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d135      	bne.n	80015bc <run+0x108>
			switch(AccelMotor->TIM_CHANEL){
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001554:	2b0c      	cmp	r3, #12
 8001556:	f200 8089 	bhi.w	800166c <run+0x1b8>
 800155a:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <run+0xac>)
 800155c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001560:	08001595 	.word	0x08001595
 8001564:	0800166d 	.word	0x0800166d
 8001568:	0800166d 	.word	0x0800166d
 800156c:	0800166d 	.word	0x0800166d
 8001570:	0800159f 	.word	0x0800159f
 8001574:	0800166d 	.word	0x0800166d
 8001578:	0800166d 	.word	0x0800166d
 800157c:	0800166d 	.word	0x0800166d
 8001580:	080015a9 	.word	0x080015a9
 8001584:	0800166d 	.word	0x0800166d
 8001588:	0800166d 	.word	0x0800166d
 800158c:	0800166d 	.word	0x0800166d
 8001590:	080015b3 	.word	0x080015b3
				case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001598:	2200      	movs	r2, #0
 800159a:	635a      	str	r2, [r3, #52]	; 0x34
 800159c:	e066      	b.n	800166c <run+0x1b8>
				case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a2:	2200      	movs	r2, #0
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38
 80015a6:	e061      	b.n	800166c <run+0x1b8>
				case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ac:	2200      	movs	r2, #0
 80015ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80015b0:	e05c      	b.n	800166c <run+0x1b8>
				case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b6:	2200      	movs	r2, #0
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40
 80015ba:	e057      	b.n	800166c <run+0x1b8>
			}
//			AccelMotor->sumComplete++;
		}
  	else{		
	    AccelMotor->USER_TIMER->ARR=(uint16_t)AccelMotor->_stepInterval;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80015c8:	e050      	b.n	800166c <run+0x1b8>
//		if((distanceToGo(AccelMotor)>3) || (distanceToGo(AccelMotor)>-3)) AccelMotor->sumComplete =0;
		}
	}
	else if((distanceToGo(AccelMotor)>0) || (distanceToGo(AccelMotor)<0)){
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff62 	bl	8001494 <distanceToGo>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	dc05      	bgt.n	80015e2 <run+0x12e>
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ff5c 	bl	8001494 <distanceToGo>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	da44      	bge.n	800166c <run+0x1b8>
		computeNewSpeed(AccelMotor);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fe6c 	bl	80012c0 <computeNewSpeed>
		if(AccelMotor->_stepInterval==0){
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d135      	bne.n	800165c <run+0x1a8>
				switch(AccelMotor->TIM_CHANEL){
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f4:	2b0c      	cmp	r3, #12
 80015f6:	d839      	bhi.n	800166c <run+0x1b8>
 80015f8:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <run+0x14c>)
 80015fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fe:	bf00      	nop
 8001600:	08001635 	.word	0x08001635
 8001604:	0800166d 	.word	0x0800166d
 8001608:	0800166d 	.word	0x0800166d
 800160c:	0800166d 	.word	0x0800166d
 8001610:	0800163f 	.word	0x0800163f
 8001614:	0800166d 	.word	0x0800166d
 8001618:	0800166d 	.word	0x0800166d
 800161c:	0800166d 	.word	0x0800166d
 8001620:	08001649 	.word	0x08001649
 8001624:	0800166d 	.word	0x0800166d
 8001628:	0800166d 	.word	0x0800166d
 800162c:	0800166d 	.word	0x0800166d
 8001630:	08001653 	.word	0x08001653
				case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001638:	2200      	movs	r2, #0
 800163a:	635a      	str	r2, [r3, #52]	; 0x34
 800163c:	e016      	b.n	800166c <run+0x1b8>
				case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001642:	2200      	movs	r2, #0
 8001644:	639a      	str	r2, [r3, #56]	; 0x38
 8001646:	e011      	b.n	800166c <run+0x1b8>
				case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164c:	2200      	movs	r2, #0
 800164e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001650:	e00c      	b.n	800166c <run+0x1b8>
				case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001656:	2200      	movs	r2, #0
 8001658:	641a      	str	r2, [r3, #64]	; 0x40
 800165a:	e007      	b.n	800166c <run+0x1b8>
			}
//				AccelMotor->sumComplete++;
		}
	  else{
	      AccelMotor->USER_TIMER->ARR=(uint16_t)AccelMotor->_stepInterval;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	b29a      	uxth	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
 8001668:	e000      	b.n	800166c <run+0x1b8>
		return;
 800166a:	bf00      	nop
//			  if((distanceToGo(AccelMotor)>3) || (distanceToGo(AccelMotor)>-3)) AccelMotor->sumComplete =0;
		}
	}
//	if(AccelMotor->sumComplete>50) AccelMotor->isComplete=true;
}
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop

08001674 <runSpeed>:

char runSpeed(struct AccelStepperData * AccelMotor)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
    // Dont do anything unless we actually have a step interval
	  // khong lam gi neu nhu gia tri _stepInterval = 0
  if (!AccelMotor->_stepInterval){
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d137      	bne.n	80016f4 <runSpeed+0x80>
		switch(AccelMotor->TIM_CHANEL){
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001688:	2b0c      	cmp	r3, #12
 800168a:	d831      	bhi.n	80016f0 <runSpeed+0x7c>
 800168c:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <runSpeed+0x20>)
 800168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001692:	bf00      	nop
 8001694:	080016c9 	.word	0x080016c9
 8001698:	080016f1 	.word	0x080016f1
 800169c:	080016f1 	.word	0x080016f1
 80016a0:	080016f1 	.word	0x080016f1
 80016a4:	080016d3 	.word	0x080016d3
 80016a8:	080016f1 	.word	0x080016f1
 80016ac:	080016f1 	.word	0x080016f1
 80016b0:	080016f1 	.word	0x080016f1
 80016b4:	080016dd 	.word	0x080016dd
 80016b8:	080016f1 	.word	0x080016f1
 80016bc:	080016f1 	.word	0x080016f1
 80016c0:	080016f1 	.word	0x080016f1
 80016c4:	080016e7 	.word	0x080016e7
			case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016cc:	2200      	movs	r2, #0
 80016ce:	635a      	str	r2, [r3, #52]	; 0x34
 80016d0:	e00e      	b.n	80016f0 <runSpeed+0x7c>
			case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d6:	2200      	movs	r2, #0
 80016d8:	639a      	str	r2, [r3, #56]	; 0x38
 80016da:	e009      	b.n	80016f0 <runSpeed+0x7c>
			case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e0:	2200      	movs	r2, #0
 80016e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80016e4:	e004      	b.n	80016f0 <runSpeed+0x7c>
			case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ea:	2200      	movs	r2, #0
 80016ec:	641a      	str	r2, [r3, #64]	; 0x40
 80016ee:	bf00      	nop
		}
//		AccelMotor->isComplete = 1;
		return 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e013      	b.n	800171c <runSpeed+0xa8>
	}
	
	if (AccelMotor->_direction == DIRECTION_CW){ // Clockwise    
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d105      	bne.n	800170a <runSpeed+0x96>
	    AccelMotor->_currentPos += 1;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
 8001708:	e004      	b.n	8001714 <runSpeed+0xa0>
	  }
	else{
	    // Anticlockwise
	    AccelMotor->_currentPos -= 1;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	1e5a      	subs	r2, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	631a      	str	r2, [r3, #48]	; 0x30
	  }
	step(AccelMotor);  //tao 1 step pulse
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f805 	bl	8001724 <step>

	return 1;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <step>:

void step(struct AccelStepperData * AccelMotor)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	if(AccelMotor->_direction) 
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001732:	2b00      	cmp	r3, #0
 8001734:	d009      	beq.n	800174a <step+0x26>
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Dir,AccelMotor->GPIO_PIN_Dir,GPIO_PIN_RESET); 
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001740:	2200      	movs	r2, #0
 8001742:	4619      	mov	r1, r3
 8001744:	f005 fa94 	bl	8006c70 <HAL_GPIO_WritePin>
 8001748:	e008      	b.n	800175c <step+0x38>
	else 
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Dir,AccelMotor->GPIO_PIN_Dir,GPIO_PIN_SET);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001754:	2201      	movs	r2, #1
 8001756:	4619      	mov	r1, r3
 8001758:	f005 fa8a 	bl	8006c70 <HAL_GPIO_WritePin>
	if(AccelMotor->enable==1){
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001762:	2b01      	cmp	r3, #1
 8001764:	d108      	bne.n	8001778 <step+0x54>
			HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_SET);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001770:	2201      	movs	r2, #1
 8001772:	4619      	mov	r1, r3
 8001774:	f005 fa7c 	bl	8006c70 <HAL_GPIO_WritePin>
	}
	switch(AccelMotor->TIM_CHANEL){
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177c:	2b0c      	cmp	r3, #12
 800177e:	d831      	bhi.n	80017e4 <step+0xc0>
 8001780:	a201      	add	r2, pc, #4	; (adr r2, 8001788 <step+0x64>)
 8001782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001786:	bf00      	nop
 8001788:	080017bd 	.word	0x080017bd
 800178c:	080017e5 	.word	0x080017e5
 8001790:	080017e5 	.word	0x080017e5
 8001794:	080017e5 	.word	0x080017e5
 8001798:	080017c7 	.word	0x080017c7
 800179c:	080017e5 	.word	0x080017e5
 80017a0:	080017e5 	.word	0x080017e5
 80017a4:	080017e5 	.word	0x080017e5
 80017a8:	080017d1 	.word	0x080017d1
 80017ac:	080017e5 	.word	0x080017e5
 80017b0:	080017e5 	.word	0x080017e5
 80017b4:	080017e5 	.word	0x080017e5
 80017b8:	080017db 	.word	0x080017db
			case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=2; break;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c0:	2202      	movs	r2, #2
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34
 80017c4:	e00e      	b.n	80017e4 <step+0xc0>
			case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=2; break;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ca:	2202      	movs	r2, #2
 80017cc:	639a      	str	r2, [r3, #56]	; 0x38
 80017ce:	e009      	b.n	80017e4 <step+0xc0>
			case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=2; break;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d4:	2202      	movs	r2, #2
 80017d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80017d8:	e004      	b.n	80017e4 <step+0xc0>
			case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=2; break;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017de:	2202      	movs	r2, #2
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
 80017e2:	bf00      	nop
		}
//	AccelMotor->isComplete = 0;
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <isRunning>:

char isRunning(struct AccelStepperData * AccelMotor)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
    return !(AccelMotor->_speed == 0.0f && AccelMotor->_targetPos == AccelMotor->_currentPos);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80017fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	d105      	bne.n	8001810 <isRunning+0x24>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <isRunning+0x28>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <isRunning+0x2a>
 8001814:	2300      	movs	r3, #0
 8001816:	b2db      	uxtb	r3, r3
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <moveTo>:
void setCurentPos(struct AccelStepperData * AccelMotor,long position){
 AccelMotor->_currentPos=position;
}

void moveTo(struct AccelStepperData * AccelMotor,long absoluted)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
	AccelMotor->isStop = false;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	if(AccelMotor->_targetPos != absoluted){
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d005      	beq.n	800184c <moveTo+0x28>
	   AccelMotor->_targetPos = absoluted;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	601a      	str	r2, [r3, #0]
	   computeNewSpeed(AccelMotor);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fd3a 	bl	80012c0 <computeNewSpeed>
//		AccelMotor->USER_TIMER->CNT=0;
  }
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <enableStepper>:
	AccelMotor->_stepInterval = fabs(1000000.0f / speed);
	AccelMotor->_direction = (speed > 0.0f) ? DIRECTION_CW : DIRECTION_CCW;
    }
    AccelMotor->_speed = speed;
}
void enableStepper(struct AccelStepperData * AccelMotor,enum boolean onOff){
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	70fb      	strb	r3, [r7, #3]
	if(onOff==OFF) 
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <enableStepper+0x26>
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_SET);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001870:	2201      	movs	r2, #1
 8001872:	4619      	mov	r1, r3
 8001874:	f005 f9fc 	bl	8006c70 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_RESET);
}
 8001878:	e008      	b.n	800188c <enableStepper+0x38>
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_RESET);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001884:	2200      	movs	r2, #0
 8001886:	4619      	mov	r1, r3
 8001888:	f005 f9f2 	bl	8006c70 <HAL_GPIO_WritePin>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800189a:	463b      	mov	r3, r7
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018a8:	4a22      	ldr	r2, [pc, #136]	; (8001934 <MX_ADC1_Init+0xa0>)
 80018aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80018ac:	4b20      	ldr	r3, [pc, #128]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018c2:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018d8:	4a17      	ldr	r2, [pc, #92]	; (8001938 <MX_ADC1_Init+0xa4>)
 80018da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018f6:	480e      	ldr	r0, [pc, #56]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018f8:	f003 fbc8 	bl	800508c <HAL_ADC_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001902:	f002 fc75 	bl	80041f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001906:	2304      	movs	r3, #4
 8001908:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800190a:	2301      	movs	r3, #1
 800190c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800190e:	2307      	movs	r3, #7
 8001910:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001912:	463b      	mov	r3, r7
 8001914:	4619      	mov	r1, r3
 8001916:	4806      	ldr	r0, [pc, #24]	; (8001930 <MX_ADC1_Init+0x9c>)
 8001918:	f003 fe10 	bl	800553c <HAL_ADC_ConfigChannel>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001922:	f002 fc65 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2000af38 	.word	0x2000af38
 8001934:	40012000 	.word	0x40012000
 8001938:	0f000001 	.word	0x0f000001

0800193c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a32      	ldr	r2, [pc, #200]	; (8001a24 <HAL_ADC_MspInit+0xe8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d15e      	bne.n	8001a1c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <HAL_ADC_MspInit+0xec>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a30      	ldr	r2, [pc, #192]	; (8001a28 <HAL_ADC_MspInit+0xec>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <HAL_ADC_MspInit+0xec>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <HAL_ADC_MspInit+0xec>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a29      	ldr	r2, [pc, #164]	; (8001a28 <HAL_ADC_MspInit+0xec>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <HAL_ADC_MspInit+0xec>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_VOLT_SENSOR_Pin;
 8001996:	2310      	movs	r3, #16
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800199a:	2303      	movs	r3, #3
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VOLT_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	4820      	ldr	r0, [pc, #128]	; (8001a2c <HAL_ADC_MspInit+0xf0>)
 80019aa:	f004 ffc5 	bl	8006938 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019b0:	4a20      	ldr	r2, [pc, #128]	; (8001a34 <HAL_ADC_MspInit+0xf8>)
 80019b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019f0:	480f      	ldr	r0, [pc, #60]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019f2:	f004 f8ad 	bl	8005b50 <HAL_DMA_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80019fc:	f002 fbf8 	bl	80041f0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 8001a04:	639a      	str	r2, [r3, #56]	; 0x38
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	210f      	movs	r1, #15
 8001a10:	2012      	movs	r0, #18
 8001a12:	f004 f873 	bl	8005afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a16:	2012      	movs	r0, #18
 8001a18:	f004 f88c 	bl	8005b34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3728      	adds	r7, #40	; 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40012000 	.word	0x40012000
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	2000af80 	.word	0x2000af80
 8001a34:	40026410 	.word	0x40026410

08001a38 <HAL_ADC_ConvCpltCallback>:

uint32_t battery_sum;								// Variable for Calculator Battery
uint16_t battery,battery_tik;						// Variable Battery: ex. battery=1623 => 16.23v

/* Ham Callback khi chuyen doi ADC hoan tat */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	battery_sum += ADC1->DR;						// tinh gia tri ADC trung binh trong 65000 lan lay mau , de dat duoc ket qua chinh xac
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <HAL_ADC_ConvCpltCallback+0x70>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <HAL_ADC_ConvCpltCallback+0x70>)
 8001a4c:	6013      	str	r3, [r2, #0]
	battery_tik ++;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <HAL_ADC_ConvCpltCallback+0x74>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	3301      	adds	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_ADC_ConvCpltCallback+0x74>)
 8001a58:	801a      	strh	r2, [r3, #0]
	if(battery_tik==65000){
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_ADC_ConvCpltCallback+0x74>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d117      	bne.n	8001a96 <HAL_ADC_ConvCpltCallback+0x5e>
		battery = ((battery_sum/battery_tik)*510)/100;  	//  Ratio ADC = 16,3/1,04 => Vbattery = Val_ADC*(3,3/1024)*(16,3/1,04) with ADC is 10bit
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <HAL_ADC_ConvCpltCallback+0x70>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a10      	ldr	r2, [pc, #64]	; (8001aac <HAL_ADC_ConvCpltCallback+0x74>)
 8001a6c:	8812      	ldrh	r2, [r2, #0]
 8001a6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a72:	4613      	mov	r3, r2
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	1a9b      	subs	r3, r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_ADC_ConvCpltCallback+0x78>)
 8001a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001a88:	801a      	strh	r2, [r3, #0]
		battery_sum =0;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_ADC_ConvCpltCallback+0x70>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
		battery_tik=0;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_ADC_ConvCpltCallback+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	801a      	strh	r2, [r3, #0]
	}
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40012000 	.word	0x40012000
 8001aa8:	2000afe0 	.word	0x2000afe0
 8001aac:	2000afe6 	.word	0x2000afe6
 8001ab0:	51eb851f 	.word	0x51eb851f
 8001ab4:	2000afe4 	.word	0x2000afe4

08001ab8 <batteryVoltInit>:

void batteryVoltInit()
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);						// Start ADC to get Battery Votl
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <batteryVoltInit+0x10>)
 8001abe:	f003 fb29 	bl	8005114 <HAL_ADC_Start_IT>
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	2000af38 	.word	0x2000af38

08001acc <batteryGet>:
uint16_t batteryGet()
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	return battery;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <batteryGet+0x14>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	2000afe4 	.word	0x2000afe4

08001ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <MX_DMA_Init+0xb8>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a2a      	ldr	r2, [pc, #168]	; (8001b9c <MX_DMA_Init+0xb8>)
 8001af4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <MX_DMA_Init+0xb8>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <MX_DMA_Init+0xb8>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a23      	ldr	r2, [pc, #140]	; (8001b9c <MX_DMA_Init+0xb8>)
 8001b10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <MX_DMA_Init+0xb8>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2105      	movs	r1, #5
 8001b26:	200b      	movs	r0, #11
 8001b28:	f003 ffe8 	bl	8005afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b2c:	200b      	movs	r0, #11
 8001b2e:	f004 f801 	bl	8005b34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2105      	movs	r1, #5
 8001b36:	200c      	movs	r0, #12
 8001b38:	f003 ffe0 	bl	8005afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b3c:	200c      	movs	r0, #12
 8001b3e:	f003 fff9 	bl	8005b34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2105      	movs	r1, #5
 8001b46:	200d      	movs	r0, #13
 8001b48:	f003 ffd8 	bl	8005afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b4c:	200d      	movs	r0, #13
 8001b4e:	f003 fff1 	bl	8005b34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2105      	movs	r1, #5
 8001b56:	2010      	movs	r0, #16
 8001b58:	f003 ffd0 	bl	8005afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b5c:	2010      	movs	r0, #16
 8001b5e:	f003 ffe9 	bl	8005b34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2105      	movs	r1, #5
 8001b66:	202f      	movs	r0, #47	; 0x2f
 8001b68:	f003 ffc8 	bl	8005afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001b6c:	202f      	movs	r0, #47	; 0x2f
 8001b6e:	f003 ffe1 	bl	8005b34 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2105      	movs	r1, #5
 8001b76:	2038      	movs	r0, #56	; 0x38
 8001b78:	f003 ffc0 	bl	8005afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b7c:	2038      	movs	r0, #56	; 0x38
 8001b7e:	f003 ffd9 	bl	8005b34 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2105      	movs	r1, #5
 8001b86:	203a      	movs	r0, #58	; 0x3a
 8001b88:	f003 ffb8 	bl	8005afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b8c:	203a      	movs	r0, #58	; 0x3a
 8001b8e:	f003 ffd1 	bl	8005b34 <HAL_NVIC_EnableIRQ>

}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001ba6:	2306      	movs	r3, #6
 8001ba8:	847b      	strh	r3, [r7, #34]	; 0x22
 8001baa:	2306      	movs	r3, #6
 8001bac:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	83fb      	strh	r3, [r7, #30]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8001bba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bbe:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001bc4:	4ba1      	ldr	r3, [pc, #644]	; (8001e4c <EE_Init+0x2ac>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001bca:	4ba1      	ldr	r3, [pc, #644]	; (8001e50 <EE_Init+0x2b0>)
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8001be0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001be2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00b      	beq.n	8001c02 <EE_Init+0x62>
 8001bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bee:	f280 8196 	bge.w	8001f1e <EE_Init+0x37e>
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 80f8 	beq.w	8001de8 <EE_Init+0x248>
 8001bf8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d050      	beq.n	8001ca2 <EE_Init+0x102>
 8001c00:	e18d      	b.n	8001f1e <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8001c02:	8c3b      	ldrh	r3, [r7, #32]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d116      	bne.n	8001c36 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001c08:	4890      	ldr	r0, [pc, #576]	; (8001e4c <EE_Init+0x2ac>)
 8001c0a:	f000 f9a9 	bl	8001f60 <EE_VerifyPageFullyErased>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f040 818e 	bne.w	8001f32 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001c16:	f107 0214 	add.w	r2, r7, #20
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f004 fd68 	bl	80066f4 <HAL_FLASHEx_Erase>
 8001c24:	4603      	mov	r3, r0
 8001c26:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001c28:	7efb      	ldrb	r3, [r7, #27]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8181 	beq.w	8001f32 <EE_Init+0x392>
          {
            return FlashStatus;
 8001c30:	7efb      	ldrb	r3, [r7, #27]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	e185      	b.n	8001f42 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8001c36:	8c3b      	ldrh	r3, [r7, #32]
 8001c38:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d125      	bne.n	8001c8c <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001c40:	4882      	ldr	r0, [pc, #520]	; (8001e4c <EE_Init+0x2ac>)
 8001c42:	f000 f98d 	bl	8001f60 <EE_VerifyPageFullyErased>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10e      	bne.n	8001c6a <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001c4c:	f107 0214 	add.w	r2, r7, #20
 8001c50:	463b      	mov	r3, r7
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f004 fd4d 	bl	80066f4 <HAL_FLASHEx_Erase>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001c5e:	7efb      	ldrb	r3, [r7, #27]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <EE_Init+0xca>
          {
            return FlashStatus;
 8001c64:	7efb      	ldrb	r3, [r7, #27]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	e16b      	b.n	8001f42 <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	4977      	ldr	r1, [pc, #476]	; (8001e50 <EE_Init+0x2b0>)
 8001c74:	2001      	movs	r0, #1
 8001c76:	f004 fb87 	bl	8006388 <HAL_FLASH_Program>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001c7e:	7efb      	ldrb	r3, [r7, #27]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 8156 	beq.w	8001f32 <EE_Init+0x392>
        {
          return FlashStatus;
 8001c86:	7efb      	ldrb	r3, [r7, #27]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	e15a      	b.n	8001f42 <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001c8c:	f000 f9fa 	bl	8002084 <EE_Format>
 8001c90:	4603      	mov	r3, r0
 8001c92:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001c94:	7efb      	ldrb	r3, [r7, #27]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 814b 	beq.w	8001f32 <EE_Init+0x392>
        {
          return FlashStatus;
 8001c9c:	7efb      	ldrb	r3, [r7, #27]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	e14f      	b.n	8001f42 <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001ca2:	8c3b      	ldrh	r3, [r7, #32]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d163      	bne.n	8001d70 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001cac:	e030      	b.n	8001d10 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001cae:	4b69      	ldr	r3, [pc, #420]	; (8001e54 <EE_Init+0x2b4>)
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cb6:	4968      	ldr	r1, [pc, #416]	; (8001e58 <EE_Init+0x2b8>)
 8001cb8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d101      	bne.n	8001cc4 <EE_Init+0x124>
          {
            x = VarIdx;
 8001cc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cc2:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8001cc4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001cc6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d01d      	beq.n	8001d0a <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001cce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cd0:	4a61      	ldr	r2, [pc, #388]	; (8001e58 <EE_Init+0x2b8>)
 8001cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cd6:	4961      	ldr	r1, [pc, #388]	; (8001e5c <EE_Init+0x2bc>)
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 f967 	bl	8001fac <EE_ReadVariable>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001ce2:	8bbb      	ldrh	r3, [r7, #28]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d010      	beq.n	8001d0a <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001ce8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cea:	4a5b      	ldr	r2, [pc, #364]	; (8001e58 <EE_Init+0x2b8>)
 8001cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cf0:	4a5a      	ldr	r2, [pc, #360]	; (8001e5c <EE_Init+0x2bc>)
 8001cf2:	8812      	ldrh	r2, [r2, #0]
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fa5c 	bl	80021b4 <EE_VerifyPageFullWriteVariable>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001d00:	8bfb      	ldrh	r3, [r7, #30]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <EE_Init+0x16a>
              {
                return EepromStatus;
 8001d06:	8bfb      	ldrh	r3, [r7, #30]
 8001d08:	e11b      	b.n	8001f42 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001d10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d9cb      	bls.n	8001cae <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	494b      	ldr	r1, [pc, #300]	; (8001e4c <EE_Init+0x2ac>)
 8001d20:	2001      	movs	r0, #1
 8001d22:	f004 fb31 	bl	8006388 <HAL_FLASH_Program>
 8001d26:	4603      	mov	r3, r0
 8001d28:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001d2a:	7efb      	ldrb	r3, [r7, #27]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <EE_Init+0x196>
        {
          return FlashStatus;
 8001d30:	7efb      	ldrb	r3, [r7, #27]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	e105      	b.n	8001f42 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001d36:	2303      	movs	r3, #3
 8001d38:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001d42:	4843      	ldr	r0, [pc, #268]	; (8001e50 <EE_Init+0x2b0>)
 8001d44:	f000 f90c 	bl	8001f60 <EE_VerifyPageFullyErased>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 80f3 	bne.w	8001f36 <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001d50:	f107 0214 	add.w	r2, r7, #20
 8001d54:	463b      	mov	r3, r7
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f004 fccb 	bl	80066f4 <HAL_FLASHEx_Erase>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001d62:	7efb      	ldrb	r3, [r7, #27]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80e6 	beq.w	8001f36 <EE_Init+0x396>
          {
            return FlashStatus;
 8001d6a:	7efb      	ldrb	r3, [r7, #27]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	e0e8      	b.n	8001f42 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8001d70:	8c3b      	ldrh	r3, [r7, #32]
 8001d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d12b      	bne.n	8001dd2 <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001d82:	2302      	movs	r3, #2
 8001d84:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001d86:	4832      	ldr	r0, [pc, #200]	; (8001e50 <EE_Init+0x2b0>)
 8001d88:	f000 f8ea 	bl	8001f60 <EE_VerifyPageFullyErased>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10e      	bne.n	8001db0 <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001d92:	f107 0214 	add.w	r2, r7, #20
 8001d96:	463b      	mov	r3, r7
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 fcaa 	bl	80066f4 <HAL_FLASHEx_Erase>
 8001da0:	4603      	mov	r3, r0
 8001da2:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001da4:	7efb      	ldrb	r3, [r7, #27]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <EE_Init+0x210>
          {
            return FlashStatus;
 8001daa:	7efb      	ldrb	r3, [r7, #27]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	e0c8      	b.n	8001f42 <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	4924      	ldr	r1, [pc, #144]	; (8001e4c <EE_Init+0x2ac>)
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f004 fae4 	bl	8006388 <HAL_FLASH_Program>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001dc4:	7efb      	ldrb	r3, [r7, #27]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80b5 	beq.w	8001f36 <EE_Init+0x396>
        {
          return FlashStatus;
 8001dcc:	7efb      	ldrb	r3, [r7, #27]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	e0b7      	b.n	8001f42 <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001dd2:	f000 f957 	bl	8002084 <EE_Format>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001dda:	7efb      	ldrb	r3, [r7, #27]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80aa 	beq.w	8001f36 <EE_Init+0x396>
        {
          return FlashStatus;
 8001de2:	7efb      	ldrb	r3, [r7, #27]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	e0ac      	b.n	8001f42 <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8001de8:	8c3b      	ldrh	r3, [r7, #32]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10a      	bne.n	8001e04 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001dee:	f000 f949 	bl	8002084 <EE_Format>
 8001df2:	4603      	mov	r3, r0
 8001df4:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001df6:	7efb      	ldrb	r3, [r7, #27]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 809e 	beq.w	8001f3a <EE_Init+0x39a>
        {
          return FlashStatus;
 8001dfe:	7efb      	ldrb	r3, [r7, #27]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	e09e      	b.n	8001f42 <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8001e04:	8c3b      	ldrh	r3, [r7, #32]
 8001e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d11b      	bne.n	8001e46 <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001e12:	2301      	movs	r3, #1
 8001e14:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001e16:	2302      	movs	r3, #2
 8001e18:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <EE_Init+0x2b0>)
 8001e1c:	f000 f8a0 	bl	8001f60 <EE_VerifyPageFullyErased>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 8089 	bne.w	8001f3a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e28:	f107 0214 	add.w	r2, r7, #20
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f004 fc5f 	bl	80066f4 <HAL_FLASHEx_Erase>
 8001e36:	4603      	mov	r3, r0
 8001e38:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001e3a:	7efb      	ldrb	r3, [r7, #27]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d07c      	beq.n	8001f3a <EE_Init+0x39a>
          {
            return FlashStatus;
 8001e40:	7efb      	ldrb	r3, [r7, #27]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	e07d      	b.n	8001f42 <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001e4a:	e03a      	b.n	8001ec2 <EE_Init+0x322>
 8001e4c:	08030000 	.word	0x08030000
 8001e50:	08034000 	.word	0x08034000
 8001e54:	08030006 	.word	0x08030006
 8001e58:	20000004 	.word	0x20000004
 8001e5c:	2000020e 	.word	0x2000020e
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001e60:	4b3a      	ldr	r3, [pc, #232]	; (8001f4c <EE_Init+0x3ac>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e68:	4939      	ldr	r1, [pc, #228]	; (8001f50 <EE_Init+0x3b0>)
 8001e6a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d101      	bne.n	8001e76 <EE_Init+0x2d6>
          {
            x = VarIdx;
 8001e72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e74:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8001e76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001e78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d01d      	beq.n	8001ebc <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001e80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e82:	4a33      	ldr	r2, [pc, #204]	; (8001f50 <EE_Init+0x3b0>)
 8001e84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e88:	4932      	ldr	r1, [pc, #200]	; (8001f54 <EE_Init+0x3b4>)
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f88e 	bl	8001fac <EE_ReadVariable>
 8001e90:	4603      	mov	r3, r0
 8001e92:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001e94:	8bbb      	ldrh	r3, [r7, #28]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d010      	beq.n	8001ebc <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001e9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e9c:	4a2c      	ldr	r2, [pc, #176]	; (8001f50 <EE_Init+0x3b0>)
 8001e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ea2:	4a2c      	ldr	r2, [pc, #176]	; (8001f54 <EE_Init+0x3b4>)
 8001ea4:	8812      	ldrh	r2, [r2, #0]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 f983 	bl	80021b4 <EE_VerifyPageFullWriteVariable>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001eb2:	8bfb      	ldrh	r3, [r7, #30]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <EE_Init+0x31c>
              {
                return EepromStatus;
 8001eb8:	8bfb      	ldrh	r3, [r7, #30]
 8001eba:	e042      	b.n	8001f42 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001ebc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001ec2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d9cb      	bls.n	8001e60 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	4921      	ldr	r1, [pc, #132]	; (8001f58 <EE_Init+0x3b8>)
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f004 fa58 	bl	8006388 <HAL_FLASH_Program>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001edc:	7efb      	ldrb	r3, [r7, #27]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <EE_Init+0x348>
        {
          return FlashStatus;
 8001ee2:	7efb      	ldrb	r3, [r7, #27]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	e02c      	b.n	8001f42 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001ef4:	4819      	ldr	r0, [pc, #100]	; (8001f5c <EE_Init+0x3bc>)
 8001ef6:	f000 f833 	bl	8001f60 <EE_VerifyPageFullyErased>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d11c      	bne.n	8001f3a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001f00:	f107 0214 	add.w	r2, r7, #20
 8001f04:	463b      	mov	r3, r7
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f004 fbf3 	bl	80066f4 <HAL_FLASHEx_Erase>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001f12:	7efb      	ldrb	r3, [r7, #27]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d010      	beq.n	8001f3a <EE_Init+0x39a>
          {
            return FlashStatus;
 8001f18:	7efb      	ldrb	r3, [r7, #27]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	e011      	b.n	8001f42 <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001f1e:	f000 f8b1 	bl	8002084 <EE_Format>
 8001f22:	4603      	mov	r3, r0
 8001f24:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001f26:	7efb      	ldrb	r3, [r7, #27]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <EE_Init+0x39e>
      {
        return FlashStatus;
 8001f2c:	7efb      	ldrb	r3, [r7, #27]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	e007      	b.n	8001f42 <EE_Init+0x3a2>
      break;
 8001f32:	bf00      	nop
 8001f34:	e004      	b.n	8001f40 <EE_Init+0x3a0>
      break;
 8001f36:	bf00      	nop
 8001f38:	e002      	b.n	8001f40 <EE_Init+0x3a0>
      break;
 8001f3a:	bf00      	nop
 8001f3c:	e000      	b.n	8001f40 <EE_Init+0x3a0>
      }
      break;
 8001f3e:	bf00      	nop
  }

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3728      	adds	r7, #40	; 0x28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	08034006 	.word	0x08034006
 8001f50:	20000004 	.word	0x20000004
 8001f54:	2000020e 	.word	0x2000020e
 8001f58:	08034000 	.word	0x08034000
 8001f5c:	08030000 	.word	0x08030000

08001f60 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8001f6c:	f245 5355 	movw	r3, #21845	; 0x5555
 8001f70:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8001f72:	e00d      	b.n	8001f90 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8001f7a:	897b      	ldrh	r3, [r7, #10]
 8001f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d002      	beq.n	8001f8a <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]

      break;
 8001f88:	e006      	b.n	8001f98 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <EE_VerifyPageFullyErased+0x48>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d3ed      	bcc.n	8001f74 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	b29b      	uxth	r3, r3
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	08034000 	.word	0x08034000

08001fac <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001fbc:	f245 5355 	movw	r3, #21845	; 0x5555
 8001fc0:	81bb      	strh	r3, [r7, #12]
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <EE_ReadVariable+0x8c>)
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <EE_ReadVariable+0x8c>)
 8001fcc:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f000 f8aa 	bl	8002128 <EE_FindValidPage>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001fd8:	89fb      	ldrh	r3, [r7, #14]
 8001fda:	2bab      	cmp	r3, #171	; 0xab
 8001fdc:	d101      	bne.n	8001fe2 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8001fde:	23ab      	movs	r3, #171	; 0xab
 8001fe0:	e025      	b.n	800202e <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001fe2:	89fb      	ldrh	r3, [r7, #14]
 8001fe4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001fe8:	330c      	adds	r3, #12
 8001fea:	039b      	lsls	r3, r3, #14
 8001fec:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001fee:	89fb      	ldrh	r3, [r7, #14]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	039a      	lsls	r2, r3, #14
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <EE_ReadVariable+0x90>)
 8001ff6:	4413      	add	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8001ffa:	e012      	b.n	8002022 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8002002:	89ba      	ldrh	r2, [r7, #12]
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	429a      	cmp	r2, r3
 8002008:	d108      	bne.n	800201c <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	3b02      	subs	r3, #2
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	b29a      	uxth	r2, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	82fb      	strh	r3, [r7, #22]

      break;
 800201a:	e007      	b.n	800202c <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	3b04      	subs	r3, #4
 8002020:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3302      	adds	r3, #2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	429a      	cmp	r2, r3
 800202a:	d8e7      	bhi.n	8001ffc <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 800202c:	8afb      	ldrh	r3, [r7, #22]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	08030000 	.word	0x08030000
 800203c:	0802fffe 	.word	0x0802fffe

08002040 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	460a      	mov	r2, r1
 800204a:	80fb      	strh	r3, [r7, #6]
 800204c:	4613      	mov	r3, r2
 800204e:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8002054:	88ba      	ldrh	r2, [r7, #4]
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f8aa 	bl	80021b4 <EE_VerifyPageFullWriteVariable>
 8002060:	4603      	mov	r3, r0
 8002062:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8002064:	89fb      	ldrh	r3, [r7, #14]
 8002066:	2b80      	cmp	r3, #128	; 0x80
 8002068:	d107      	bne.n	800207a <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 800206a:	88ba      	ldrh	r2, [r7, #4]
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f000 f8f9 	bl	8002268 <EE_PageTransfer>
 8002076:	4603      	mov	r3, r0
 8002078:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 800207a:	89fb      	ldrh	r3, [r7, #14]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8002096:	2302      	movs	r3, #2
 8002098:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 800209a:	2301      	movs	r3, #1
 800209c:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800209e:	2302      	movs	r3, #2
 80020a0:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80020a2:	481f      	ldr	r0, [pc, #124]	; (8002120 <EE_Format+0x9c>)
 80020a4:	f7ff ff5c 	bl	8001f60 <EE_VerifyPageFullyErased>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10d      	bne.n	80020ca <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 80020ae:	f107 0218 	add.w	r2, r7, #24
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 fb1c 	bl	80066f4 <HAL_FLASHEx_Erase>
 80020bc:	4603      	mov	r3, r0
 80020be:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80020c0:	7ffb      	ldrb	r3, [r7, #31]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <EE_Format+0x46>
    {
      return FlashStatus;
 80020c6:	7ffb      	ldrb	r3, [r7, #31]
 80020c8:	e025      	b.n	8002116 <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	4913      	ldr	r1, [pc, #76]	; (8002120 <EE_Format+0x9c>)
 80020d4:	2001      	movs	r0, #1
 80020d6:	f004 f957 	bl	8006388 <HAL_FLASH_Program>
 80020da:	4603      	mov	r3, r0
 80020dc:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80020de:	7ffb      	ldrb	r3, [r7, #31]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <EE_Format+0x64>
  {
    return FlashStatus;
 80020e4:	7ffb      	ldrb	r3, [r7, #31]
 80020e6:	e016      	b.n	8002116 <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 80020e8:	2303      	movs	r3, #3
 80020ea:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80020ec:	480d      	ldr	r0, [pc, #52]	; (8002124 <EE_Format+0xa0>)
 80020ee:	f7ff ff37 	bl	8001f60 <EE_VerifyPageFullyErased>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10d      	bne.n	8002114 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 80020f8:	f107 0218 	add.w	r2, r7, #24
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f004 faf7 	bl	80066f4 <HAL_FLASHEx_Erase>
 8002106:	4603      	mov	r3, r0
 8002108:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 800210a:	7ffb      	ldrb	r3, [r7, #31]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <EE_Format+0x90>
    {
      return FlashStatus;
 8002110:	7ffb      	ldrb	r3, [r7, #31]
 8002112:	e000      	b.n	8002116 <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3720      	adds	r7, #32
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	08030000 	.word	0x08030000
 8002124:	08034000 	.word	0x08034000

08002128 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8002132:	2306      	movs	r3, #6
 8002134:	81fb      	strh	r3, [r7, #14]
 8002136:	2306      	movs	r3, #6
 8002138:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800213a:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <EE_FindValidPage+0x84>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <EE_FindValidPage+0x88>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01b      	beq.n	8002184 <EE_FindValidPage+0x5c>
 800214c:	2b01      	cmp	r3, #1
 800214e:	d125      	bne.n	800219c <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8002150:	89bb      	ldrh	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d108      	bne.n	8002168 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8002156:	89fb      	ldrh	r3, [r7, #14]
 8002158:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800215c:	4293      	cmp	r3, r2
 800215e:	d101      	bne.n	8002164 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8002160:	2300      	movs	r3, #0
 8002162:	e01c      	b.n	800219e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8002164:	2301      	movs	r3, #1
 8002166:	e01a      	b.n	800219e <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8002168:	89fb      	ldrh	r3, [r7, #14]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d108      	bne.n	8002180 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800216e:	89bb      	ldrh	r3, [r7, #12]
 8002170:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002174:	4293      	cmp	r3, r2
 8002176:	d101      	bne.n	800217c <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8002178:	2301      	movs	r3, #1
 800217a:	e010      	b.n	800219e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 800217c:	2300      	movs	r3, #0
 800217e:	e00e      	b.n	800219e <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8002180:	23ab      	movs	r3, #171	; 0xab
 8002182:	e00c      	b.n	800219e <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8002184:	89fb      	ldrh	r3, [r7, #14]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800218a:	2300      	movs	r3, #0
 800218c:	e007      	b.n	800219e <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800218e:	89bb      	ldrh	r3, [r7, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8002194:	2301      	movs	r3, #1
 8002196:	e002      	b.n	800219e <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8002198:	23ab      	movs	r3, #171	; 0xab
 800219a:	e000      	b.n	800219e <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 800219c:	2300      	movs	r3, #0
  }
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	08030000 	.word	0x08030000
 80021b0:	08034000 	.word	0x08034000

080021b4 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	460a      	mov	r2, r1
 80021be:	80fb      	strh	r3, [r7, #6]
 80021c0:	4613      	mov	r3, r2
 80021c2:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 80021cc:	4b23      	ldr	r3, [pc, #140]	; (800225c <EE_VerifyPageFullWriteVariable+0xa8>)
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	4b23      	ldr	r3, [pc, #140]	; (8002260 <EE_VerifyPageFullWriteVariable+0xac>)
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7ff ffa7 	bl	8002128 <EE_FindValidPage>
 80021da:	4603      	mov	r3, r0
 80021dc:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80021de:	8a3b      	ldrh	r3, [r7, #16]
 80021e0:	2bab      	cmp	r3, #171	; 0xab
 80021e2:	d101      	bne.n	80021e8 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 80021e4:	23ab      	movs	r3, #171	; 0xab
 80021e6:	e035      	b.n	8002254 <EE_VerifyPageFullWriteVariable+0xa0>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80021e8:	8a3b      	ldrh	r3, [r7, #16]
 80021ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80021ee:	330c      	adds	r3, #12
 80021f0:	039b      	lsls	r3, r3, #14
 80021f2:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 80021f4:	8a3b      	ldrh	r3, [r7, #16]
 80021f6:	3301      	adds	r3, #1
 80021f8:	039a      	lsls	r2, r3, #14
 80021fa:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <EE_VerifyPageFullWriteVariable+0xb0>)
 80021fc:	4413      	add	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8002200:	e023      	b.n	800224a <EE_VerifyPageFullWriteVariable+0x96>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220a:	d11b      	bne.n	8002244 <EE_VerifyPageFullWriteVariable+0x90>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 800220c:	88ba      	ldrh	r2, [r7, #4]
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	6979      	ldr	r1, [r7, #20]
 8002214:	2001      	movs	r0, #1
 8002216:	f004 f8b7 	bl	8006388 <HAL_FLASH_Program>
 800221a:	4603      	mov	r3, r0
 800221c:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <EE_VerifyPageFullWriteVariable+0x76>
      {
        return FlashStatus;
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	b29b      	uxth	r3, r3
 8002228:	e014      	b.n	8002254 <EE_VerifyPageFullWriteVariable+0xa0>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	1c99      	adds	r1, r3, #2
 800222e:	88fa      	ldrh	r2, [r7, #6]
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	2001      	movs	r0, #1
 8002236:	f004 f8a7 	bl	8006388 <HAL_FLASH_Program>
 800223a:	4603      	mov	r3, r0
 800223c:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 800223e:	7cfb      	ldrb	r3, [r7, #19]
 8002240:	b29b      	uxth	r3, r3
 8002242:	e007      	b.n	8002254 <EE_VerifyPageFullWriteVariable+0xa0>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	3304      	adds	r3, #4
 8002248:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	429a      	cmp	r2, r3
 8002250:	d3d7      	bcc.n	8002202 <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8002252:	2380      	movs	r3, #128	; 0x80
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	08030000 	.word	0x08030000
 8002260:	08034000 	.word	0x08034000
 8002264:	0802ffff 	.word	0x0802ffff

08002268 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	; 0x30
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	460a      	mov	r2, r1
 8002272:	80fb      	strh	r3, [r7, #6]
 8002274:	4613      	mov	r3, r2
 8002276:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 800227e:	4b54      	ldr	r3, [pc, #336]	; (80023d0 <EE_PageTransfer+0x168>)
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 8002282:	2300      	movs	r3, #0
 8002284:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	84bb      	strh	r3, [r7, #36]	; 0x24
 800228a:	2300      	movs	r3, #0
 800228c:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	847b      	strh	r3, [r7, #34]	; 0x22
 8002292:	2300      	movs	r3, #0
 8002294:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800229a:	2000      	movs	r0, #0
 800229c:	f7ff ff44 	bl	8002128 <EE_FindValidPage>
 80022a0:	4603      	mov	r3, r0
 80022a2:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 80022a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d104      	bne.n	80022b4 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 80022aa:	4b49      	ldr	r3, [pc, #292]	; (80023d0 <EE_PageTransfer+0x168>)
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 80022ae:	2303      	movs	r3, #3
 80022b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80022b2:	e009      	b.n	80022c8 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 80022b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d104      	bne.n	80022c4 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 80022ba:	4b46      	ldr	r3, [pc, #280]	; (80023d4 <EE_PageTransfer+0x16c>)
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 80022be:	2302      	movs	r3, #2
 80022c0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80022c2:	e001      	b.n	80022c8 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80022c4:	23ab      	movs	r3, #171	; 0xab
 80022c6:	e07e      	b.n	80023c6 <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 80022c8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022d2:	2001      	movs	r0, #1
 80022d4:	f004 f858 	bl	8006388 <HAL_FLASH_Program>
 80022d8:	4603      	mov	r3, r0
 80022da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80022de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 80022e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	e06b      	b.n	80023c6 <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80022ee:	88ba      	ldrh	r2, [r7, #4]
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff5d 	bl	80021b4 <EE_VerifyPageFullWriteVariable>
 80022fa:	4603      	mov	r3, r0
 80022fc:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 80022fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8002304:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002306:	e05e      	b.n	80023c6 <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002308:	2300      	movs	r3, #0
 800230a:	853b      	strh	r3, [r7, #40]	; 0x28
 800230c:	e027      	b.n	800235e <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800230e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002310:	4a31      	ldr	r2, [pc, #196]	; (80023d8 <EE_PageTransfer+0x170>)
 8002312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002316:	88fa      	ldrh	r2, [r7, #6]
 8002318:	429a      	cmp	r2, r3
 800231a:	d01d      	beq.n	8002358 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800231c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800231e:	4a2e      	ldr	r2, [pc, #184]	; (80023d8 <EE_PageTransfer+0x170>)
 8002320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002324:	492d      	ldr	r1, [pc, #180]	; (80023dc <EE_PageTransfer+0x174>)
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fe40 	bl	8001fac <EE_ReadVariable>
 800232c:	4603      	mov	r3, r0
 800232e:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8002330:	8c3b      	ldrh	r3, [r7, #32]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d010      	beq.n	8002358 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8002336:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002338:	4a27      	ldr	r2, [pc, #156]	; (80023d8 <EE_PageTransfer+0x170>)
 800233a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800233e:	4a27      	ldr	r2, [pc, #156]	; (80023dc <EE_PageTransfer+0x174>)
 8002340:	8812      	ldrh	r2, [r2, #0]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff35 	bl	80021b4 <EE_VerifyPageFullWriteVariable>
 800234a:	4603      	mov	r3, r0
 800234c:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 800234e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8002354:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002356:	e036      	b.n	80023c6 <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800235a:	3301      	adds	r3, #1
 800235c:	853b      	strh	r3, [r7, #40]	; 0x28
 800235e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002360:	2b02      	cmp	r3, #2
 8002362:	d9d4      	bls.n	800230e <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8002368:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800236a:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 800236c:	2301      	movs	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002370:	2302      	movs	r3, #2
 8002372:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8002374:	f107 021c 	add.w	r2, r7, #28
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f004 f9b8 	bl	80066f4 <HAL_FLASHEx_Erase>
 8002384:	4603      	mov	r3, r0
 8002386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800238a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8002392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002396:	b29b      	uxth	r3, r3
 8002398:	e015      	b.n	80023c6 <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023a4:	2001      	movs	r0, #1
 80023a6:	f003 ffef 	bl	8006388 <HAL_FLASH_Program>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80023b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 80023b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023bc:	b29b      	uxth	r3, r3
 80023be:	e002      	b.n	80023c6 <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 80023c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023c4:	b29b      	uxth	r3, r3
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3730      	adds	r7, #48	; 0x30
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	08030000 	.word	0x08030000
 80023d4:	08034000 	.word	0x08034000
 80023d8:	20000004 	.word	0x20000004
 80023dc:	2000020e 	.word	0x2000020e

080023e0 <HAL_TIM_PWM_PulseFinishedCallback>:
/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

// for Motor J1 J2
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)								// Stepper J1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a45      	ldr	r2, [pc, #276]	; (8002504 <HAL_TIM_PWM_PulseFinishedCallback+0x124>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d138      	bne.n	8002464 <HAL_TIM_PWM_PulseFinishedCallback+0x84>
	{
		if(user_calibase==false) motor_j1_data._currentPos = data_AS5600_M1;			// Set Current Position
 80023f2:	4b45      	ldr	r3, [pc, #276]	; (8002508 <HAL_TIM_PWM_PulseFinishedCallback+0x128>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	f083 0301 	eor.w	r3, r3, #1
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d004      	beq.n	800240a <HAL_TIM_PWM_PulseFinishedCallback+0x2a>
 8002400:	4b42      	ldr	r3, [pc, #264]	; (800250c <HAL_TIM_PWM_PulseFinishedCallback+0x12c>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	4b42      	ldr	r3, [pc, #264]	; (8002510 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
		osSemaphoreRelease(binarySem_motorJ1Handle);		// Release Semaphore for Calculator Stepper (run)
 800240a:	4b42      	ldr	r3, [pc, #264]	; (8002514 <HAL_TIM_PWM_PulseFinishedCallback+0x134>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f00a fa9c 	bl	800c94c <osSemaphoreRelease>
		if(user_calibase) return;
 8002414:	4b3c      	ldr	r3, [pc, #240]	; (8002508 <HAL_TIM_PWM_PulseFinishedCallback+0x128>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d16c      	bne.n	80024f6 <HAL_TIM_PWM_PulseFinishedCallback+0x116>
		accel_j1_tik++;
 800241c:	4b3e      	ldr	r3, [pc, #248]	; (8002518 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	4b3c      	ldr	r3, [pc, #240]	; (8002518 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 8002426:	801a      	strh	r2, [r3, #0]
		if(accel_j1_tik==1000)								// Changer Accel
 8002428:	4b3b      	ldr	r3, [pc, #236]	; (8002518 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002430:	d118      	bne.n	8002464 <HAL_TIM_PWM_PulseFinishedCallback+0x84>
		{
			accel_j1_tik=0;
 8002432:	4b39      	ldr	r3, [pc, #228]	; (8002518 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 8002434:	2200      	movs	r2, #0
 8002436:	801a      	strh	r2, [r3, #0]
			long distance = distanceToGo(&motor_j1_data);
 8002438:	4835      	ldr	r0, [pc, #212]	; (8002510 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 800243a:	f7ff f82b 	bl	8001494 <distanceToGo>
 800243e:	60f8      	str	r0, [r7, #12]
			if(labs(distance) < 100){
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002446:	db08      	blt.n	800245a <HAL_TIM_PWM_PulseFinishedCallback+0x7a>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b63      	cmp	r3, #99	; 0x63
 800244c:	dc05      	bgt.n	800245a <HAL_TIM_PWM_PulseFinishedCallback+0x7a>
				setAcceleration(&motor_j1_data, j1_ACCEL_MIN);
 800244e:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800251c <HAL_TIM_PWM_PulseFinishedCallback+0x13c>
 8002452:	482f      	ldr	r0, [pc, #188]	; (8002510 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 8002454:	f7fe fec0 	bl	80011d8 <setAcceleration>
 8002458:	e004      	b.n	8002464 <HAL_TIM_PWM_PulseFinishedCallback+0x84>
			}else{
				setAcceleration(&motor_j1_data, J1_ACCEL_MAX);
 800245a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8002520 <HAL_TIM_PWM_PulseFinishedCallback+0x140>
 800245e:	482c      	ldr	r0, [pc, #176]	; (8002510 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 8002460:	f7fe feba 	bl	80011d8 <setAcceleration>
			}
		}
	}
	if(htim->Instance==TIM2)								// Stepper J2
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246c:	d138      	bne.n	80024e0 <HAL_TIM_PWM_PulseFinishedCallback+0x100>
	{
		if(user_calibase == false) motor_j2_data._currentPos = data_AS5600_M2;		// Set Current Position
 800246e:	4b26      	ldr	r3, [pc, #152]	; (8002508 <HAL_TIM_PWM_PulseFinishedCallback+0x128>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	f083 0301 	eor.w	r3, r3, #1
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <HAL_TIM_PWM_PulseFinishedCallback+0xa6>
 800247c:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_TIM_PWM_PulseFinishedCallback+0x144>)
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4b29      	ldr	r3, [pc, #164]	; (8002528 <HAL_TIM_PWM_PulseFinishedCallback+0x148>)
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
		osSemaphoreRelease(binarySem_motorJ2Handle);	// Release Semaphore for Calculator Stepper (run)
 8002486:	4b29      	ldr	r3, [pc, #164]	; (800252c <HAL_TIM_PWM_PulseFinishedCallback+0x14c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f00a fa5e 	bl	800c94c <osSemaphoreRelease>
		if(user_calibase) return;
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <HAL_TIM_PWM_PulseFinishedCallback+0x128>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d130      	bne.n	80024fa <HAL_TIM_PWM_PulseFinishedCallback+0x11a>
		accel_j2_tik++;
 8002498:	4b25      	ldr	r3, [pc, #148]	; (8002530 <HAL_TIM_PWM_PulseFinishedCallback+0x150>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	3301      	adds	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	4b23      	ldr	r3, [pc, #140]	; (8002530 <HAL_TIM_PWM_PulseFinishedCallback+0x150>)
 80024a2:	801a      	strh	r2, [r3, #0]
		if(accel_j2_tik==500)
 80024a4:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_TIM_PWM_PulseFinishedCallback+0x150>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024ac:	d118      	bne.n	80024e0 <HAL_TIM_PWM_PulseFinishedCallback+0x100>
		{
			accel_j2_tik=0;
 80024ae:	4b20      	ldr	r3, [pc, #128]	; (8002530 <HAL_TIM_PWM_PulseFinishedCallback+0x150>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	801a      	strh	r2, [r3, #0]
			long distance = distanceToGo(&motor_j2_data);
 80024b4:	481c      	ldr	r0, [pc, #112]	; (8002528 <HAL_TIM_PWM_PulseFinishedCallback+0x148>)
 80024b6:	f7fe ffed 	bl	8001494 <distanceToGo>
 80024ba:	60b8      	str	r0, [r7, #8]
			if(labs(distance) < 100){
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80024c2:	db08      	blt.n	80024d6 <HAL_TIM_PWM_PulseFinishedCallback+0xf6>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b63      	cmp	r3, #99	; 0x63
 80024c8:	dc05      	bgt.n	80024d6 <HAL_TIM_PWM_PulseFinishedCallback+0xf6>
				setAcceleration(&motor_j2_data, J2_ACCEL_MIN);
 80024ca:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800251c <HAL_TIM_PWM_PulseFinishedCallback+0x13c>
 80024ce:	4816      	ldr	r0, [pc, #88]	; (8002528 <HAL_TIM_PWM_PulseFinishedCallback+0x148>)
 80024d0:	f7fe fe82 	bl	80011d8 <setAcceleration>
 80024d4:	e004      	b.n	80024e0 <HAL_TIM_PWM_PulseFinishedCallback+0x100>
			}else{
				setAcceleration(&motor_j2_data, J2_ACCEL_MAX);
 80024d6:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8002534 <HAL_TIM_PWM_PulseFinishedCallback+0x154>
 80024da:	4813      	ldr	r0, [pc, #76]	; (8002528 <HAL_TIM_PWM_PulseFinishedCallback+0x148>)
 80024dc:	f7fe fe7c 	bl	80011d8 <setAcceleration>
			}
		}
	}
	if(htim->Instance==TIM5)								// Stepper J2
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a14      	ldr	r2, [pc, #80]	; (8002538 <HAL_TIM_PWM_PulseFinishedCallback+0x158>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d108      	bne.n	80024fc <HAL_TIM_PWM_PulseFinishedCallback+0x11c>
	{
		osSemaphoreRelease(binarySem_motorJ3Handle);	// Release Semaphore for Calculator Stepper (run)
 80024ea:	4b14      	ldr	r3, [pc, #80]	; (800253c <HAL_TIM_PWM_PulseFinishedCallback+0x15c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f00a fa2c 	bl	800c94c <osSemaphoreRelease>
 80024f4:	e002      	b.n	80024fc <HAL_TIM_PWM_PulseFinishedCallback+0x11c>
		if(user_calibase) return;
 80024f6:	bf00      	nop
 80024f8:	e000      	b.n	80024fc <HAL_TIM_PWM_PulseFinishedCallback+0x11c>
		if(user_calibase) return;
 80024fa:	bf00      	nop
	}
}
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40000400 	.word	0x40000400
 8002508:	20000211 	.word	0x20000211
 800250c:	2000af36 	.word	0x2000af36
 8002510:	2000b068 	.word	0x2000b068
 8002514:	2000aff8 	.word	0x2000aff8
 8002518:	20000214 	.word	0x20000214
 800251c:	47c35000 	.word	0x47c35000
 8002520:	48f42400 	.word	0x48f42400
 8002524:	2000af34 	.word	0x2000af34
 8002528:	2000b008 	.word	0x2000b008
 800252c:	2000b064 	.word	0x2000b064
 8002530:	20000216 	.word	0x20000216
 8002534:	48c35000 	.word	0x48c35000
 8002538:	40000c00 	.word	0x40000c00
 800253c:	2000b000 	.word	0x2000b000

08002540 <HAL_I2C_AddrCallback>:

// I2C-Interface
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	70fb      	strb	r3, [r7, #3]
 800254c:	4613      	mov	r3, r2
 800254e:	803b      	strh	r3, [r7, #0]
	if(hi2c->Instance==I2C2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0c      	ldr	r2, [pc, #48]	; (8002588 <HAL_I2C_AddrCallback+0x48>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d112      	bne.n	8002580 <HAL_I2C_AddrCallback+0x40>
	{
		if(TransferDirection == I2C_DIRECTION_TRANSMIT)
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d106      	bne.n	800256e <HAL_I2C_AddrCallback+0x2e>
		{
			HAL_I2C_Slave_Seq_Receive_DMA(&hi2c2,data_rev_master,4,I2C_FIRST_AND_LAST_FRAME);
 8002560:	2308      	movs	r3, #8
 8002562:	2204      	movs	r2, #4
 8002564:	4909      	ldr	r1, [pc, #36]	; (800258c <HAL_I2C_AddrCallback+0x4c>)
 8002566:	480a      	ldr	r0, [pc, #40]	; (8002590 <HAL_I2C_AddrCallback+0x50>)
 8002568:	f004 ffc8 	bl	80074fc <HAL_I2C_Slave_Seq_Receive_DMA>
		}else if(TransferDirection == I2C_DIRECTION_RECEIVE)
		{
			HAL_I2C_Slave_Seq_Transmit_DMA(&hi2c2, data_trans_master, 7, I2C_LAST_FRAME);
		}
	}
}
 800256c:	e008      	b.n	8002580 <HAL_I2C_AddrCallback+0x40>
		}else if(TransferDirection == I2C_DIRECTION_RECEIVE)
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <HAL_I2C_AddrCallback+0x40>
			HAL_I2C_Slave_Seq_Transmit_DMA(&hi2c2, data_trans_master, 7, I2C_LAST_FRAME);
 8002574:	2320      	movs	r3, #32
 8002576:	2207      	movs	r2, #7
 8002578:	4906      	ldr	r1, [pc, #24]	; (8002594 <HAL_I2C_AddrCallback+0x54>)
 800257a:	4805      	ldr	r0, [pc, #20]	; (8002590 <HAL_I2C_AddrCallback+0x50>)
 800257c:	f004 fe84 	bl	8007288 <HAL_I2C_Slave_Seq_Transmit_DMA>
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40005800 	.word	0x40005800
 800258c:	2000aff0 	.word	0x2000aff0
 8002590:	2000b22c 	.word	0x2000b22c
 8002594:	2000b05c 	.word	0x2000b05c

08002598 <HAL_I2C_ListenCpltCallback>:
// 	I2C2 for interface
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(&hi2c2);
 80025a0:	4803      	ldr	r0, [pc, #12]	; (80025b0 <HAL_I2C_ListenCpltCallback+0x18>)
 80025a2:	f005 f8e5 	bl	8007770 <HAL_I2C_EnableListen_IT>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	2000b22c 	.word	0x2000b22c

080025b4 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==I2C2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a05      	ldr	r2, [pc, #20]	; (80025d8 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d104      	bne.n	80025d0 <HAL_I2C_SlaveRxCpltCallback+0x1c>
	{
		osSemaphoreRelease(binarySem_masterCmdHandle);// sau khi nhan duoc lenh tu master
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_I2C_SlaveRxCpltCallback+0x28>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f00a f9be 	bl	800c94c <osSemaphoreRelease>
	}
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40005800 	.word	0x40005800
 80025dc:	2000b0c4 	.word	0x2000b0c4

080025e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4a07      	ldr	r2, [pc, #28]	; (800260c <vApplicationGetIdleTaskMemory+0x2c>)
 80025f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	4a06      	ldr	r2, [pc, #24]	; (8002610 <vApplicationGetIdleTaskMemory+0x30>)
 80025f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2280      	movs	r2, #128	; 0x80
 80025fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	2000021c 	.word	0x2000021c
 8002610:	20000270 	.word	0x20000270

08002614 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4a07      	ldr	r2, [pc, #28]	; (8002640 <vApplicationGetTimerTaskMemory+0x2c>)
 8002624:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	4a06      	ldr	r2, [pc, #24]	; (8002644 <vApplicationGetTimerTaskMemory+0x30>)
 800262a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002632:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	20000470 	.word	0x20000470
 8002644:	200004c4 	.word	0x200004c4

08002648 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002648:	b5b0      	push	{r4, r5, r7, lr}
 800264a:	b0ac      	sub	sp, #176	; 0xb0
 800264c:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySem_motorJ1 */
  osSemaphoreDef(binarySem_motorJ1);
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002654:	2300      	movs	r3, #0
 8002656:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  binarySem_motorJ1Handle = osSemaphoreCreate(osSemaphore(binarySem_motorJ1), 1);
 800265a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800265e:	2101      	movs	r1, #1
 8002660:	4618      	mov	r0, r3
 8002662:	f00a f8f2 	bl	800c84a <osSemaphoreCreate>
 8002666:	4603      	mov	r3, r0
 8002668:	4a47      	ldr	r2, [pc, #284]	; (8002788 <MX_FREERTOS_Init+0x140>)
 800266a:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySem_motorJ2 */
  osSemaphoreDef(binarySem_motorJ2);
 800266c:	2300      	movs	r3, #0
 800266e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002672:	2300      	movs	r3, #0
 8002674:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  binarySem_motorJ2Handle = osSemaphoreCreate(osSemaphore(binarySem_motorJ2), 1);
 8002678:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800267c:	2101      	movs	r1, #1
 800267e:	4618      	mov	r0, r3
 8002680:	f00a f8e3 	bl	800c84a <osSemaphoreCreate>
 8002684:	4603      	mov	r3, r0
 8002686:	4a41      	ldr	r2, [pc, #260]	; (800278c <MX_FREERTOS_Init+0x144>)
 8002688:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySem_masterCmd */
  osSemaphoreDef(binarySem_masterCmd);
 800268a:	2300      	movs	r3, #0
 800268c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002690:	2300      	movs	r3, #0
 8002692:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  binarySem_masterCmdHandle = osSemaphoreCreate(osSemaphore(binarySem_masterCmd), 1);
 8002696:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800269a:	2101      	movs	r1, #1
 800269c:	4618      	mov	r0, r3
 800269e:	f00a f8d4 	bl	800c84a <osSemaphoreCreate>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4a3a      	ldr	r2, [pc, #232]	; (8002790 <MX_FREERTOS_Init+0x148>)
 80026a6:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySem_motorJ3 */
  osSemaphoreDef(binarySem_motorJ3);
 80026a8:	2300      	movs	r3, #0
 80026aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026ae:	2300      	movs	r3, #0
 80026b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  binarySem_motorJ3Handle = osSemaphoreCreate(osSemaphore(binarySem_motorJ3), 1);
 80026b4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80026b8:	2101      	movs	r1, #1
 80026ba:	4618      	mov	r0, r3
 80026bc:	f00a f8c5 	bl	800c84a <osSemaphoreCreate>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4a34      	ldr	r2, [pc, #208]	; (8002794 <MX_FREERTOS_Init+0x14c>)
 80026c4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 4096);
 80026c6:	4b34      	ldr	r3, [pc, #208]	; (8002798 <MX_FREERTOS_Init+0x150>)
 80026c8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80026cc:	461d      	mov	r5, r3
 80026ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80026da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f00a f852 	bl	800c78a <osThreadCreate>
 80026e6:	4603      	mov	r3, r0
 80026e8:	4a2c      	ldr	r2, [pc, #176]	; (800279c <MX_FREERTOS_Init+0x154>)
 80026ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorJ1Task */
  osThreadDef(motorJ1Task, StartTaskMotorJ1, osPriorityHigh, 0, 2048);
 80026ec:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <MX_FREERTOS_Init+0x158>)
 80026ee:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80026f2:	461d      	mov	r5, r3
 80026f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorJ1TaskHandle = osThreadCreate(osThread(motorJ1Task), NULL);
 8002700:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002704:	2100      	movs	r1, #0
 8002706:	4618      	mov	r0, r3
 8002708:	f00a f83f 	bl	800c78a <osThreadCreate>
 800270c:	4603      	mov	r3, r0
 800270e:	4a25      	ldr	r2, [pc, #148]	; (80027a4 <MX_FREERTOS_Init+0x15c>)
 8002710:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorJ2Task */
  osThreadDef(motorJ2Task, StartTaskMotorJ2, osPriorityHigh, 0, 2048);
 8002712:	4b25      	ldr	r3, [pc, #148]	; (80027a8 <MX_FREERTOS_Init+0x160>)
 8002714:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002718:	461d      	mov	r5, r3
 800271a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800271c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800271e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002722:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorJ2TaskHandle = osThreadCreate(osThread(motorJ2Task), NULL);
 8002726:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f00a f82c 	bl	800c78a <osThreadCreate>
 8002732:	4603      	mov	r3, r0
 8002734:	4a1d      	ldr	r2, [pc, #116]	; (80027ac <MX_FREERTOS_Init+0x164>)
 8002736:	6013      	str	r3, [r2, #0]

  /* definition and creation of moveTask */
  osThreadDef(moveTask, StartTaskMove, osPriorityRealtime, 0, 1024);
 8002738:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <MX_FREERTOS_Init+0x168>)
 800273a:	f107 0420 	add.w	r4, r7, #32
 800273e:	461d      	mov	r5, r3
 8002740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002744:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002748:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  moveTaskHandle = osThreadCreate(osThread(moveTask), NULL);
 800274c:	f107 0320 	add.w	r3, r7, #32
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f00a f819 	bl	800c78a <osThreadCreate>
 8002758:	4603      	mov	r3, r0
 800275a:	4a16      	ldr	r2, [pc, #88]	; (80027b4 <MX_FREERTOS_Init+0x16c>)
 800275c:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorJ3Task */
  osThreadDef(motorJ3Task, StartTaskMotorJ3, osPriorityHigh, 0, 1024);
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <MX_FREERTOS_Init+0x170>)
 8002760:	1d3c      	adds	r4, r7, #4
 8002762:	461d      	mov	r5, r3
 8002764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002768:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800276c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorJ3TaskHandle = osThreadCreate(osThread(motorJ3Task), NULL);
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f00a f808 	bl	800c78a <osThreadCreate>
 800277a:	4603      	mov	r3, r0
 800277c:	4a0f      	ldr	r2, [pc, #60]	; (80027bc <MX_FREERTOS_Init+0x174>)
 800277e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002780:	bf00      	nop
 8002782:	37b0      	adds	r7, #176	; 0xb0
 8002784:	46bd      	mov	sp, r7
 8002786:	bdb0      	pop	{r4, r5, r7, pc}
 8002788:	2000aff8 	.word	0x2000aff8
 800278c:	2000b064 	.word	0x2000b064
 8002790:	2000b0c4 	.word	0x2000b0c4
 8002794:	2000b000 	.word	0x2000b000
 8002798:	080140f4 	.word	0x080140f4
 800279c:	2000afec 	.word	0x2000afec
 80027a0:	08014110 	.word	0x08014110
 80027a4:	2000afe8 	.word	0x2000afe8
 80027a8:	0801412c 	.word	0x0801412c
 80027ac:	2000b0cc 	.word	0x2000b0cc
 80027b0:	08014148 	.word	0x08014148
 80027b4:	2000aff4 	.word	0x2000aff4
 80027b8:	08014164 	.word	0x08014164
 80027bc:	2000b0bc 	.word	0x2000b0bc

080027c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void const * argument)
{
 80027c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027c4:	b0a8      	sub	sp, #160	; 0xa0
 80027c6:	af04      	add	r7, sp, #16
 80027c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
#ifdef MDEBUG
	printf("Robochess 2021\r\n");
 80027ca:	48ae      	ldr	r0, [pc, #696]	; (8002a84 <StartDefaultTask+0x2c4>)
 80027cc:	f00d fdc2 	bl	8010354 <puts>
#endif
	HAL_I2C_EnableListen_IT(&hi2c2);	// I2C2 for interface
 80027d0:	48ad      	ldr	r0, [pc, #692]	; (8002a88 <StartDefaultTask+0x2c8>)
 80027d2:	f004 ffcd 	bl	8007770 <HAL_I2C_EnableListen_IT>
	AS5600_Start_Update();				// Start Tim10 & get data of AS5600
 80027d6:	f7fe fc05 	bl	8000fe4 <AS5600_Start_Update>
	batteryVoltInit();
 80027da:	f7ff f96d 	bl	8001ab8 <batteryVoltInit>
//	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);	// Start PWM for Servo
//	SERVO_DROP;
  /* Infinite loop */
  for(;;)
  {
	  updateInfo();
 80027de:	f000 fd69 	bl	80032b4 <updateInfo>

#ifdef MDEBUG
	  if(uart2_onData){
 80027e2:	4baa      	ldr	r3, [pc, #680]	; (8002a8c <StartDefaultTask+0x2cc>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 82d9 	beq.w	8002d9e <StartDefaultTask+0x5de>
		  uart2_onData=false; //realease
 80027ec:	4ba7      	ldr	r3, [pc, #668]	; (8002a8c <StartDefaultTask+0x2cc>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
		  printf("Rev %dBYTE: %s\r\n",uart2_data_length,uart2_main_buf);
 80027f2:	4ba7      	ldr	r3, [pc, #668]	; (8002a90 <StartDefaultTask+0x2d0>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	4aa7      	ldr	r2, [pc, #668]	; (8002a94 <StartDefaultTask+0x2d4>)
 80027f8:	4619      	mov	r1, r3
 80027fa:	48a7      	ldr	r0, [pc, #668]	; (8002a98 <StartDefaultTask+0x2d8>)
 80027fc:	f00d fd24 	bl	8010248 <iprintf>
		  // Gripper
		  if(uart2_main_buf[0]==CMD_GRIPPER){
 8002800:	4ba4      	ldr	r3, [pc, #656]	; (8002a94 <StartDefaultTask+0x2d4>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b47      	cmp	r3, #71	; 0x47
 8002806:	d120      	bne.n	800284a <StartDefaultTask+0x8a>
			  char sval[1];
			  sval[0]=uart2_main_buf[1];
 8002808:	4ba2      	ldr	r3, [pc, #648]	; (8002a94 <StartDefaultTask+0x2d4>)
 800280a:	785b      	ldrb	r3, [r3, #1]
 800280c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			  int val=atoi(sval);
 8002810:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002814:	4618      	mov	r0, r3
 8002816:	f00d f869 	bl	800f8ec <atoi>
 800281a:	64f8      	str	r0, [r7, #76]	; 0x4c
			  if(val==0){
 800281c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d107      	bne.n	8002832 <StartDefaultTask+0x72>
				  SERVO_DROP;
 8002822:	4b9e      	ldr	r3, [pc, #632]	; (8002a9c <StartDefaultTask+0x2dc>)
 8002824:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002828:	63da      	str	r2, [r3, #60]	; 0x3c
				  printf("Gripper open\r\n");
 800282a:	489d      	ldr	r0, [pc, #628]	; (8002aa0 <StartDefaultTask+0x2e0>)
 800282c:	f00d fd92 	bl	8010354 <puts>
 8002830:	e2b0      	b.n	8002d94 <StartDefaultTask+0x5d4>
			  }else if(val==1){
 8002832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002834:	2b01      	cmp	r3, #1
 8002836:	f040 82ad 	bne.w	8002d94 <StartDefaultTask+0x5d4>
				  SERVO_PICKUP;
 800283a:	4b98      	ldr	r3, [pc, #608]	; (8002a9c <StartDefaultTask+0x2dc>)
 800283c:	f240 6272 	movw	r2, #1650	; 0x672
 8002840:	63da      	str	r2, [r3, #60]	; 0x3c
				  printf("Gripper close\r\n");
 8002842:	4898      	ldr	r0, [pc, #608]	; (8002aa4 <StartDefaultTask+0x2e4>)
 8002844:	f00d fd86 	bl	8010354 <puts>
 8002848:	e2a4      	b.n	8002d94 <StartDefaultTask+0x5d4>
			  }
		// Info
		  }else if(uart2_main_buf[0]==CMD_INFO){
 800284a:	4b92      	ldr	r3, [pc, #584]	; (8002a94 <StartDefaultTask+0x2d4>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b49      	cmp	r3, #73	; 0x49
 8002850:	d12b      	bne.n	80028aa <StartDefaultTask+0xea>
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 8002852:	4b95      	ldr	r3, [pc, #596]	; (8002aa8 <StartDefaultTask+0x2e8>)
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	461d      	mov	r5, r3
 8002858:	4b94      	ldr	r3, [pc, #592]	; (8002aac <StartDefaultTask+0x2ec>)
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	461e      	mov	r6, r3
		 			  data_AS5600_M1,data_AS5600_M2,HAL_SENSOR_UP_GET,HAL_SENSOR_DOWN_GET,
 800285e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002862:	4893      	ldr	r0, [pc, #588]	; (8002ab0 <StartDefaultTask+0x2f0>)
 8002864:	f004 f9ec 	bl	8006c40 <HAL_GPIO_ReadPin>
 8002868:	4603      	mov	r3, r0
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 800286a:	4698      	mov	r8, r3
		 			  data_AS5600_M1,data_AS5600_M2,HAL_SENSOR_UP_GET,HAL_SENSOR_DOWN_GET,
 800286c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002870:	488f      	ldr	r0, [pc, #572]	; (8002ab0 <StartDefaultTask+0x2f0>)
 8002872:	f004 f9e5 	bl	8006c40 <HAL_GPIO_ReadPin>
 8002876:	4603      	mov	r3, r0
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 8002878:	461c      	mov	r4, r3
					  batteryGet(),data_trans_master[6]);
 800287a:	f7ff f927 	bl	8001acc <batteryGet>
 800287e:	4603      	mov	r3, r0
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 8002880:	461a      	mov	r2, r3
					  batteryGet(),data_trans_master[6]);
 8002882:	4b8c      	ldr	r3, [pc, #560]	; (8002ab4 <StartDefaultTask+0x2f4>)
 8002884:	799b      	ldrb	r3, [r3, #6]
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 8002886:	9302      	str	r3, [sp, #8]
 8002888:	9201      	str	r2, [sp, #4]
 800288a:	9400      	str	r4, [sp, #0]
 800288c:	4643      	mov	r3, r8
 800288e:	4632      	mov	r2, r6
 8002890:	4629      	mov	r1, r5
 8002892:	4889      	ldr	r0, [pc, #548]	; (8002ab8 <StartDefaultTask+0x2f8>)
 8002894:	f00d fcd8 	bl	8010248 <iprintf>
		 	 	enableStepper(&motor_j1_data, OFF);
 8002898:	2100      	movs	r1, #0
 800289a:	4888      	ldr	r0, [pc, #544]	; (8002abc <StartDefaultTask+0x2fc>)
 800289c:	f7fe ffda 	bl	8001854 <enableStepper>
		 	 	enableStepper(&motor_j2_data, OFF);
 80028a0:	2100      	movs	r1, #0
 80028a2:	4887      	ldr	r0, [pc, #540]	; (8002ac0 <StartDefaultTask+0x300>)
 80028a4:	f7fe ffd6 	bl	8001854 <enableStepper>
 80028a8:	e274      	b.n	8002d94 <StartDefaultTask+0x5d4>
		// PICK
		  }else if(uart2_main_buf[0]==CMD_PICK){
 80028aa:	4b7a      	ldr	r3, [pc, #488]	; (8002a94 <StartDefaultTask+0x2d4>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b70      	cmp	r3, #112	; 0x70
 80028b0:	d11c      	bne.n	80028ec <StartDefaultTask+0x12c>
			  char sval[1];
			  sval[0]=uart2_main_buf[1];
 80028b2:	4b78      	ldr	r3, [pc, #480]	; (8002a94 <StartDefaultTask+0x2d4>)
 80028b4:	785b      	ldrb	r3, [r3, #1]
 80028b6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			  int val=atoi(sval);
 80028ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028be:	4618      	mov	r0, r3
 80028c0:	f00d f814 	bl	800f8ec <atoi>
 80028c4:	6538      	str	r0, [r7, #80]	; 0x50
			  if(val==0){
 80028c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d105      	bne.n	80028d8 <StartDefaultTask+0x118>
				  printf("J3 MOVE UP\r\n");
 80028cc:	487d      	ldr	r0, [pc, #500]	; (8002ac4 <StartDefaultTask+0x304>)
 80028ce:	f00d fd41 	bl	8010354 <puts>
				  j3MoveUp();
 80028d2:	f000 ffd5 	bl	8003880 <j3MoveUp>
 80028d6:	e25d      	b.n	8002d94 <StartDefaultTask+0x5d4>
			  }else if(val==1){
 80028d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028da:	2b01      	cmp	r3, #1
 80028dc:	f040 825a 	bne.w	8002d94 <StartDefaultTask+0x5d4>
				  printf("J3 MOVE DOWN\r\n");
 80028e0:	4879      	ldr	r0, [pc, #484]	; (8002ac8 <StartDefaultTask+0x308>)
 80028e2:	f00d fd37 	bl	8010354 <puts>
				  j3MoveDown();
 80028e6:	f001 f807 	bl	80038f8 <j3MoveDown>
 80028ea:	e253      	b.n	8002d94 <StartDefaultTask+0x5d4>
			  }
		// PICK PIECE
		  }else if(uart2_main_buf[0]==CMD_PICKPIECE){
 80028ec:	4b69      	ldr	r3, [pc, #420]	; (8002a94 <StartDefaultTask+0x2d4>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b50      	cmp	r3, #80	; 0x50
 80028f2:	d11c      	bne.n	800292e <StartDefaultTask+0x16e>
			  char sval[1];
			  sval[0]=uart2_main_buf[1];
 80028f4:	4b67      	ldr	r3, [pc, #412]	; (8002a94 <StartDefaultTask+0x2d4>)
 80028f6:	785b      	ldrb	r3, [r3, #1]
 80028f8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			  int val=atoi(sval);
 80028fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002900:	4618      	mov	r0, r3
 8002902:	f00c fff3 	bl	800f8ec <atoi>
 8002906:	6578      	str	r0, [r7, #84]	; 0x54
			  if(val==0){
 8002908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290a:	2b00      	cmp	r3, #0
 800290c:	d105      	bne.n	800291a <StartDefaultTask+0x15a>
				  printf("DROP PIECE\r\n");
 800290e:	486f      	ldr	r0, [pc, #444]	; (8002acc <StartDefaultTask+0x30c>)
 8002910:	f00d fd20 	bl	8010354 <puts>
				  dropPiece();
 8002914:	f000 ffa2 	bl	800385c <dropPiece>
 8002918:	e23c      	b.n	8002d94 <StartDefaultTask+0x5d4>
			  }else if(val==1){
 800291a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291c:	2b01      	cmp	r3, #1
 800291e:	f040 8239 	bne.w	8002d94 <StartDefaultTask+0x5d4>
				  printf("PICKUP PIECE\r\n");
 8002922:	486b      	ldr	r0, [pc, #428]	; (8002ad0 <StartDefaultTask+0x310>)
 8002924:	f00d fd16 	bl	8010354 <puts>
				  pickupPiece();
 8002928:	f000 ff72 	bl	8003810 <pickupPiece>
 800292c:	e232      	b.n	8002d94 <StartDefaultTask+0x5d4>
			  }
		// MOVE
		  }else if(uart2_main_buf[0]==CMD_MOVE){
 800292e:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <StartDefaultTask+0x2d4>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b6d      	cmp	r3, #109	; 0x6d
 8002934:	d12f      	bne.n	8002996 <StartDefaultTask+0x1d6>
			  char sval[2];
			  if(uart2_data_length>2){
 8002936:	4b56      	ldr	r3, [pc, #344]	; (8002a90 <StartDefaultTask+0x2d0>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d908      	bls.n	8002950 <StartDefaultTask+0x190>
				  sval[0]=uart2_main_buf[1];
 800293e:	4b55      	ldr	r3, [pc, #340]	; (8002a94 <StartDefaultTask+0x2d4>)
 8002940:	785b      	ldrb	r3, [r3, #1]
 8002942:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				  sval[1]=uart2_main_buf[2];
 8002946:	4b53      	ldr	r3, [pc, #332]	; (8002a94 <StartDefaultTask+0x2d4>)
 8002948:	789b      	ldrb	r3, [r3, #2]
 800294a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800294e:	e006      	b.n	800295e <StartDefaultTask+0x19e>
			  }else{
				  sval[0]='0';
 8002950:	2330      	movs	r3, #48	; 0x30
 8002952:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				  sval[1]=uart2_main_buf[1];
 8002956:	4b4f      	ldr	r3, [pc, #316]	; (8002a94 <StartDefaultTask+0x2d4>)
 8002958:	785b      	ldrb	r3, [r3, #1]
 800295a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			  }
			  int val=atoi(sval);
 800295e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002962:	4618      	mov	r0, r3
 8002964:	f00c ffc2 	bl	800f8ec <atoi>
 8002968:	65b8      	str	r0, [r7, #88]	; 0x58
			  if(val>=0 && val<80){
 800296a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800296c:	2b00      	cmp	r3, #0
 800296e:	db0d      	blt.n	800298c <StartDefaultTask+0x1cc>
 8002970:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002972:	2b4f      	cmp	r3, #79	; 0x4f
 8002974:	dc0a      	bgt.n	800298c <StartDefaultTask+0x1cc>
				  printf("MOVE TO SQUARE:%d\r\n",val);
 8002976:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002978:	4856      	ldr	r0, [pc, #344]	; (8002ad4 <StartDefaultTask+0x314>)
 800297a:	f00d fc65 	bl	8010248 <iprintf>
				  moveToSquare(val, false);
 800297e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fb79 	bl	800307c <moveToSquare>
 800298a:	e203      	b.n	8002d94 <StartDefaultTask+0x5d4>
			  }else{
				  printf("ERROR! Cannot move to square %d\r\n",val);
 800298c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800298e:	4852      	ldr	r0, [pc, #328]	; (8002ad8 <StartDefaultTask+0x318>)
 8002990:	f00d fc5a 	bl	8010248 <iprintf>
 8002994:	e1fe      	b.n	8002d94 <StartDefaultTask+0x5d4>
			  }
		// MOVE PIECE
		  }else if(uart2_main_buf[0]==CMD_MOVEPIECE){
 8002996:	4b3f      	ldr	r3, [pc, #252]	; (8002a94 <StartDefaultTask+0x2d4>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b4d      	cmp	r3, #77	; 0x4d
 800299c:	d145      	bne.n	8002a2a <StartDefaultTask+0x26a>
			  char sFrom[2],sTo[2],sOption[1];
			  sFrom[0]=uart2_main_buf[1];
 800299e:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <StartDefaultTask+0x2d4>)
 80029a0:	785b      	ldrb	r3, [r3, #1]
 80029a2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			  sFrom[1]=uart2_main_buf[2];
 80029a6:	4b3b      	ldr	r3, [pc, #236]	; (8002a94 <StartDefaultTask+0x2d4>)
 80029a8:	789b      	ldrb	r3, [r3, #2]
 80029aa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			  sTo[0]=uart2_main_buf[3];
 80029ae:	4b39      	ldr	r3, [pc, #228]	; (8002a94 <StartDefaultTask+0x2d4>)
 80029b0:	78db      	ldrb	r3, [r3, #3]
 80029b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			  sTo[1]=uart2_main_buf[4];
 80029b6:	4b37      	ldr	r3, [pc, #220]	; (8002a94 <StartDefaultTask+0x2d4>)
 80029b8:	791b      	ldrb	r3, [r3, #4]
 80029ba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			  sOption[0]=uart2_main_buf[5];
 80029be:	4b35      	ldr	r3, [pc, #212]	; (8002a94 <StartDefaultTask+0x2d4>)
 80029c0:	795b      	ldrb	r3, [r3, #5]
 80029c2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			  int _from=atoi(sFrom);
 80029c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029ca:	4618      	mov	r0, r3
 80029cc:	f00c ff8e 	bl	800f8ec <atoi>
 80029d0:	6678      	str	r0, [r7, #100]	; 0x64
			  int _to =atoi(sTo);
 80029d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029d6:	4618      	mov	r0, r3
 80029d8:	f00c ff88 	bl	800f8ec <atoi>
 80029dc:	6638      	str	r0, [r7, #96]	; 0x60
			  int _option =atoi(sOption);
 80029de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029e2:	4618      	mov	r0, r3
 80029e4:	f00c ff82 	bl	800f8ec <atoi>
 80029e8:	65f8      	str	r0, [r7, #92]	; 0x5c
			  if((_from>=0 && _from<80) && (_to>=0 && _to<80)){
 80029ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	db18      	blt.n	8002a22 <StartDefaultTask+0x262>
 80029f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029f2:	2b4f      	cmp	r3, #79	; 0x4f
 80029f4:	dc15      	bgt.n	8002a22 <StartDefaultTask+0x262>
 80029f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	db12      	blt.n	8002a22 <StartDefaultTask+0x262>
 80029fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029fe:	2b4f      	cmp	r3, #79	; 0x4f
 8002a00:	dc0f      	bgt.n	8002a22 <StartDefaultTask+0x262>
				  printf("MOVEPIECE %d->%d Option:%d\r\n",_from,_to,_option);
 8002a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a06:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002a08:	4834      	ldr	r0, [pc, #208]	; (8002adc <StartDefaultTask+0x31c>)
 8002a0a:	f00d fc1d 	bl	8010248 <iprintf>
				  movePiece(_from, _to, _option);
 8002a0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a14:	b2d1      	uxtb	r1, r2
 8002a16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fbc2 	bl	80031a4 <movePiece>
 8002a20:	e1b8      	b.n	8002d94 <StartDefaultTask+0x5d4>
			  }else{
				  printf("ERROR! Out Range of square\r\n");
 8002a22:	482f      	ldr	r0, [pc, #188]	; (8002ae0 <StartDefaultTask+0x320>)
 8002a24:	f00d fc96 	bl	8010354 <puts>
 8002a28:	e1b4      	b.n	8002d94 <StartDefaultTask+0x5d4>
			  }
		  }else if(uart2_main_buf[0]==CMD_MOVEHOME){
 8002a2a:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <StartDefaultTask+0x2d4>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b48      	cmp	r3, #72	; 0x48
 8002a30:	d105      	bne.n	8002a3e <StartDefaultTask+0x27e>
			  printf("MOVE HOME\r\n");
 8002a32:	482c      	ldr	r0, [pc, #176]	; (8002ae4 <StartDefaultTask+0x324>)
 8002a34:	f00d fc8e 	bl	8010354 <puts>
			  moveToHome();
 8002a38:	f000 fb98 	bl	800316c <moveToHome>
 8002a3c:	e1aa      	b.n	8002d94 <StartDefaultTask+0x5d4>
		  }else if(uart2_main_buf[0]==CMD_MOVETEST){
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <StartDefaultTask+0x2d4>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b41      	cmp	r3, #65	; 0x41
 8002a44:	f040 8095 	bne.w	8002b72 <StartDefaultTask+0x3b2>
			  user_calibase = true;
 8002a48:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <StartDefaultTask+0x328>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
			  if(runfirts==false){
 8002a4e:	4b27      	ldr	r3, [pc, #156]	; (8002aec <StartDefaultTask+0x32c>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	f083 0301 	eor.w	r3, r3, #1
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <StartDefaultTask+0x2ae>
				  runfirts = true;
 8002a5c:	4b23      	ldr	r3, [pc, #140]	; (8002aec <StartDefaultTask+0x32c>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]
				  motor_j1_data._currentPos =0;
 8002a62:	4b16      	ldr	r3, [pc, #88]	; (8002abc <StartDefaultTask+0x2fc>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
				  motor_j1_data._targetPos =0;
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <StartDefaultTask+0x2fc>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
			  }

			  printf("MOVE:AS5600:%d\r\n",data_AS5600_M1);
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <StartDefaultTask+0x2e8>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	4619      	mov	r1, r3
 8002a74:	481e      	ldr	r0, [pc, #120]	; (8002af0 <StartDefaultTask+0x330>)
 8002a76:	f00d fbe7 	bl	8010248 <iprintf>
			  char sposJ1[4];
			  for(int i=0;i<4;i++){
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002a80:	e049      	b.n	8002b16 <StartDefaultTask+0x356>
 8002a82:	bf00      	nop
 8002a84:	08014180 	.word	0x08014180
 8002a88:	2000b22c 	.word	0x2000b22c
 8002a8c:	200008c4 	.word	0x200008c4
 8002a90:	2000b40c 	.word	0x2000b40c
 8002a94:	2000b400 	.word	0x2000b400
 8002a98:	08014190 	.word	0x08014190
 8002a9c:	40000800 	.word	0x40000800
 8002aa0:	080141a4 	.word	0x080141a4
 8002aa4:	080141b4 	.word	0x080141b4
 8002aa8:	2000af36 	.word	0x2000af36
 8002aac:	2000af34 	.word	0x2000af34
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	2000b05c 	.word	0x2000b05c
 8002ab8:	080141c4 	.word	0x080141c4
 8002abc:	2000b068 	.word	0x2000b068
 8002ac0:	2000b008 	.word	0x2000b008
 8002ac4:	08014200 	.word	0x08014200
 8002ac8:	0801420c 	.word	0x0801420c
 8002acc:	0801421c 	.word	0x0801421c
 8002ad0:	08014228 	.word	0x08014228
 8002ad4:	08014238 	.word	0x08014238
 8002ad8:	0801424c 	.word	0x0801424c
 8002adc:	08014270 	.word	0x08014270
 8002ae0:	08014290 	.word	0x08014290
 8002ae4:	080142ac 	.word	0x080142ac
 8002ae8:	20000211 	.word	0x20000211
 8002aec:	20000212 	.word	0x20000212
 8002af0:	080142b8 	.word	0x080142b8
				  sposJ1[i] = uart2_main_buf[i+1];
 8002af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002af8:	3301      	adds	r3, #1
 8002afa:	4aab      	ldr	r2, [pc, #684]	; (8002da8 <StartDefaultTask+0x5e8>)
 8002afc:	5cd1      	ldrb	r1, [r2, r3]
 8002afe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b06:	4413      	add	r3, r2
 8002b08:	460a      	mov	r2, r1
 8002b0a:	701a      	strb	r2, [r3, #0]
			  for(int i=0;i<4;i++){
 8002b0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b10:	3301      	adds	r3, #1
 8002b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	ddea      	ble.n	8002af4 <StartDefaultTask+0x334>
			  }
			  int posJ1 = atoi(sposJ1);
 8002b1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b22:	4618      	mov	r0, r3
 8002b24:	f00c fee2 	bl	800f8ec <atoi>
 8002b28:	66b8      	str	r0, [r7, #104]	; 0x68
			  enableStepper(&motor_j1_data, ON);
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	489f      	ldr	r0, [pc, #636]	; (8002dac <StartDefaultTask+0x5ec>)
 8002b2e:	f7fe fe91 	bl	8001854 <enableStepper>
			  moveTo(&motor_j1_data,posJ1);
 8002b32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b34:	489d      	ldr	r0, [pc, #628]	; (8002dac <StartDefaultTask+0x5ec>)
 8002b36:	f7fe fe75 	bl	8001824 <moveTo>
			  run(&motor_j1_data);
 8002b3a:	489c      	ldr	r0, [pc, #624]	; (8002dac <StartDefaultTask+0x5ec>)
 8002b3c:	f7fe fcba 	bl	80014b4 <run>
				while( isRunning(&motor_j1_data)){	// Waiting for move finish
 8002b40:	e002      	b.n	8002b48 <StartDefaultTask+0x388>
					osDelay(10);
 8002b42:	200a      	movs	r0, #10
 8002b44:	f009 fe6d 	bl	800c822 <osDelay>
				while( isRunning(&motor_j1_data)){	// Waiting for move finish
 8002b48:	4898      	ldr	r0, [pc, #608]	; (8002dac <StartDefaultTask+0x5ec>)
 8002b4a:	f7fe fe4f 	bl	80017ec <isRunning>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f6      	bne.n	8002b42 <StartDefaultTask+0x382>
				}
				osDelay(300);
 8002b54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002b58:	f009 fe63 	bl	800c822 <osDelay>
				printf("Finish:AS5600:%d\r\n",data_AS5600_M1);
 8002b5c:	4b94      	ldr	r3, [pc, #592]	; (8002db0 <StartDefaultTask+0x5f0>)
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	4619      	mov	r1, r3
 8002b62:	4894      	ldr	r0, [pc, #592]	; (8002db4 <StartDefaultTask+0x5f4>)
 8002b64:	f00d fb70 	bl	8010248 <iprintf>
				motor_j1_data.isStop = true;
 8002b68:	4b90      	ldr	r3, [pc, #576]	; (8002dac <StartDefaultTask+0x5ec>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8002b70:	e110      	b.n	8002d94 <StartDefaultTask+0x5d4>
//				enableStepper(&motor_j1_data, OFF);
		  }else if(uart2_main_buf[0]==CMD_MOVETESTJ2){
 8002b72:	4b8d      	ldr	r3, [pc, #564]	; (8002da8 <StartDefaultTask+0x5e8>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b42      	cmp	r3, #66	; 0x42
 8002b78:	d14c      	bne.n	8002c14 <StartDefaultTask+0x454>
			  enableStepper(&motor_j1_data, ON);
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	488b      	ldr	r0, [pc, #556]	; (8002dac <StartDefaultTask+0x5ec>)
 8002b7e:	f7fe fe69 	bl	8001854 <enableStepper>
			  printf("MOVE:AS56002:%d\r\n",data_AS5600_M2);
 8002b82:	4b8d      	ldr	r3, [pc, #564]	; (8002db8 <StartDefaultTask+0x5f8>)
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	4619      	mov	r1, r3
 8002b88:	488c      	ldr	r0, [pc, #560]	; (8002dbc <StartDefaultTask+0x5fc>)
 8002b8a:	f00d fb5d 	bl	8010248 <iprintf>
			  char sposJ2[4];
			  for(int i=0;i<4;i++){
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b94:	e010      	b.n	8002bb8 <StartDefaultTask+0x3f8>
				  sposJ2[i] = uart2_main_buf[i+1];
 8002b96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	4a82      	ldr	r2, [pc, #520]	; (8002da8 <StartDefaultTask+0x5e8>)
 8002b9e:	5cd1      	ldrb	r1, [r2, r3]
 8002ba0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ba8:	4413      	add	r3, r2
 8002baa:	460a      	mov	r2, r1
 8002bac:	701a      	strb	r2, [r3, #0]
			  for(int i=0;i<4;i++){
 8002bae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	ddea      	ble.n	8002b96 <StartDefaultTask+0x3d6>
			  }
			  int posJ2 = atoi(sposJ2);
 8002bc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f00c fe91 	bl	800f8ec <atoi>
 8002bca:	66f8      	str	r0, [r7, #108]	; 0x6c
			  enableStepper(&motor_j2_data, ON);
 8002bcc:	2101      	movs	r1, #1
 8002bce:	487c      	ldr	r0, [pc, #496]	; (8002dc0 <StartDefaultTask+0x600>)
 8002bd0:	f7fe fe40 	bl	8001854 <enableStepper>
			  moveTo(&motor_j2_data,posJ2);
 8002bd4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002bd6:	487a      	ldr	r0, [pc, #488]	; (8002dc0 <StartDefaultTask+0x600>)
 8002bd8:	f7fe fe24 	bl	8001824 <moveTo>
			  run(&motor_j2_data);
 8002bdc:	4878      	ldr	r0, [pc, #480]	; (8002dc0 <StartDefaultTask+0x600>)
 8002bde:	f7fe fc69 	bl	80014b4 <run>
				while( isRunning(&motor_j2_data)){	// Waiting for move finish
 8002be2:	e002      	b.n	8002bea <StartDefaultTask+0x42a>
					osDelay(10);
 8002be4:	200a      	movs	r0, #10
 8002be6:	f009 fe1c 	bl	800c822 <osDelay>
				while( isRunning(&motor_j2_data)){	// Waiting for move finish
 8002bea:	4875      	ldr	r0, [pc, #468]	; (8002dc0 <StartDefaultTask+0x600>)
 8002bec:	f7fe fdfe 	bl	80017ec <isRunning>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f6      	bne.n	8002be4 <StartDefaultTask+0x424>
				}
				osDelay(300);
 8002bf6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002bfa:	f009 fe12 	bl	800c822 <osDelay>
				printf("Finish:AS56002:%d\r\n",data_AS5600_M2);
 8002bfe:	4b6e      	ldr	r3, [pc, #440]	; (8002db8 <StartDefaultTask+0x5f8>)
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	4619      	mov	r1, r3
 8002c04:	486f      	ldr	r0, [pc, #444]	; (8002dc4 <StartDefaultTask+0x604>)
 8002c06:	f00d fb1f 	bl	8010248 <iprintf>
				motor_j2_data.isStop = true;
 8002c0a:	4b6d      	ldr	r3, [pc, #436]	; (8002dc0 <StartDefaultTask+0x600>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8002c12:	e0bf      	b.n	8002d94 <StartDefaultTask+0x5d4>
//				enableStepper(&motor_j2_data, OFF);
		  }else if(uart2_main_buf[0]==CMD_KINETIC){
 8002c14:	4b64      	ldr	r3, [pc, #400]	; (8002da8 <StartDefaultTask+0x5e8>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b4b      	cmp	r3, #75	; 0x4b
 8002c1a:	d141      	bne.n	8002ca0 <StartDefaultTask+0x4e0>
			  int dx,dy;
			  char sdx[5],sdy[5];
			  for(int i=0;i<4;i++){
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c22:	e01c      	b.n	8002c5e <StartDefaultTask+0x49e>
				  sdx[i]=uart2_main_buf[i+1];
 8002c24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c28:	3301      	adds	r3, #1
 8002c2a:	4a5f      	ldr	r2, [pc, #380]	; (8002da8 <StartDefaultTask+0x5e8>)
 8002c2c:	5cd1      	ldrb	r1, [r2, r3]
 8002c2e:	f107 0220 	add.w	r2, r7, #32
 8002c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c36:	4413      	add	r3, r2
 8002c38:	460a      	mov	r2, r1
 8002c3a:	701a      	strb	r2, [r3, #0]
				  sdy[i] = uart2_main_buf[i+6];
 8002c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c40:	3306      	adds	r3, #6
 8002c42:	4a59      	ldr	r2, [pc, #356]	; (8002da8 <StartDefaultTask+0x5e8>)
 8002c44:	5cd1      	ldrb	r1, [r2, r3]
 8002c46:	f107 0218 	add.w	r2, r7, #24
 8002c4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c4e:	4413      	add	r3, r2
 8002c50:	460a      	mov	r2, r1
 8002c52:	701a      	strb	r2, [r3, #0]
			  for(int i=0;i<4;i++){
 8002c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	ddde      	ble.n	8002c24 <StartDefaultTask+0x464>
			  }
			  dx = atoi(sdx);
 8002c66:	f107 0320 	add.w	r3, r7, #32
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f00c fe3e 	bl	800f8ec <atoi>
 8002c70:	6778      	str	r0, [r7, #116]	; 0x74
			  dy = atoi(sdy);
 8002c72:	f107 0318 	add.w	r3, r7, #24
 8002c76:	4618      	mov	r0, r3
 8002c78:	f00c fe38 	bl	800f8ec <atoi>
 8002c7c:	6738      	str	r0, [r7, #112]	; 0x70
			  inverseKinematics(dx, dy);
 8002c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c80:	ee07 3a90 	vmov	s15, r3
 8002c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c8a:	ee07 3a10 	vmov	s14, r3
 8002c8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002c92:	eef0 0a47 	vmov.f32	s1, s14
 8002c96:	eeb0 0a67 	vmov.f32	s0, s15
 8002c9a:	f000 fb89 	bl	80033b0 <inverseKinematics>
 8002c9e:	e079      	b.n	8002d94 <StartDefaultTask+0x5d4>
		  }else if(uart2_main_buf[0]=='f'){
 8002ca0:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <StartDefaultTask+0x5e8>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b66      	cmp	r3, #102	; 0x66
 8002ca6:	d12a      	bne.n	8002cfe <StartDefaultTask+0x53e>
//			  calibase();
			  char dat[5];
			  for(int i=0;i<4;i++){
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cae:	e010      	b.n	8002cd2 <StartDefaultTask+0x512>
				  dat[i] = uart2_main_buf[i+1];
 8002cb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	4a3c      	ldr	r2, [pc, #240]	; (8002da8 <StartDefaultTask+0x5e8>)
 8002cb8:	5cd1      	ldrb	r1, [r2, r3]
 8002cba:	f107 0210 	add.w	r2, r7, #16
 8002cbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cc2:	4413      	add	r3, r2
 8002cc4:	460a      	mov	r2, r1
 8002cc6:	701a      	strb	r2, [r3, #0]
			  for(int i=0;i<4;i++){
 8002cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ccc:	3301      	adds	r3, #1
 8002cce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	ddea      	ble.n	8002cb0 <StartDefaultTask+0x4f0>
			  }
			  int mdat = atoi(dat);
 8002cda:	f107 0310 	add.w	r3, r7, #16
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f00c fe04 	bl	800f8ec <atoi>
 8002ce4:	67b8      	str	r0, [r7, #120]	; 0x78
			  EE_WriteVariable(0x1111, mdat);
 8002ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	4619      	mov	r1, r3
 8002cec:	f241 1011 	movw	r0, #4369	; 0x1111
 8002cf0:	f7ff f9a6 	bl	8002040 <EE_WriteVariable>
			  printf("EE write:%d\r\n",mdat);
 8002cf4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002cf6:	4834      	ldr	r0, [pc, #208]	; (8002dc8 <StartDefaultTask+0x608>)
 8002cf8:	f00d faa6 	bl	8010248 <iprintf>
 8002cfc:	e04a      	b.n	8002d94 <StartDefaultTask+0x5d4>
		  }else if(uart2_main_buf[0]=='F'){
 8002cfe:	4b2a      	ldr	r3, [pc, #168]	; (8002da8 <StartDefaultTask+0x5e8>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b46      	cmp	r3, #70	; 0x46
 8002d04:	d10e      	bne.n	8002d24 <StartDefaultTask+0x564>
			  uint16_t dat=0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	81fb      	strh	r3, [r7, #14]
			  EE_ReadVariable(0x1111, &dat);
 8002d0a:	f107 030e 	add.w	r3, r7, #14
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f241 1011 	movw	r0, #4369	; 0x1111
 8002d14:	f7ff f94a 	bl	8001fac <EE_ReadVariable>
			  printf("EE read:%d\r\n",dat);
 8002d18:	89fb      	ldrh	r3, [r7, #14]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	482b      	ldr	r0, [pc, #172]	; (8002dcc <StartDefaultTask+0x60c>)
 8002d1e:	f00d fa93 	bl	8010248 <iprintf>
 8002d22:	e037      	b.n	8002d94 <StartDefaultTask+0x5d4>
		  }else if(uart2_main_buf[0]=='J'){
 8002d24:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <StartDefaultTask+0x5e8>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b4a      	cmp	r3, #74	; 0x4a
 8002d2a:	d105      	bne.n	8002d38 <StartDefaultTask+0x578>
			  printf("Pickup\r\n");
 8002d2c:	4828      	ldr	r0, [pc, #160]	; (8002dd0 <StartDefaultTask+0x610>)
 8002d2e:	f00d fb11 	bl	8010354 <puts>
			  pickupPiece();
 8002d32:	f000 fd6d 	bl	8003810 <pickupPiece>
 8002d36:	e02d      	b.n	8002d94 <StartDefaultTask+0x5d4>
//			  while( isRunning(&motor_j3_data) ){	// Waiting for move finish
//					osDelay(10);
//			 }
//			 motor_j3_data.isStop = true;
//			 enableStepper(&motor_j3_data, OFF);
		  }else if(uart2_main_buf[0]=='j'){
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <StartDefaultTask+0x5e8>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b6a      	cmp	r3, #106	; 0x6a
 8002d3e:	d105      	bne.n	8002d4c <StartDefaultTask+0x58c>
			  printf("pickDown\r\n");
 8002d40:	4824      	ldr	r0, [pc, #144]	; (8002dd4 <StartDefaultTask+0x614>)
 8002d42:	f00d fb07 	bl	8010354 <puts>
			  dropPiece();
 8002d46:	f000 fd89 	bl	800385c <dropPiece>
 8002d4a:	e023      	b.n	8002d94 <StartDefaultTask+0x5d4>
		  }else if(uart2_main_buf[0]=='y'){
 8002d4c:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <StartDefaultTask+0x5e8>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b79      	cmp	r3, #121	; 0x79
 8002d52:	d11f      	bne.n	8002d94 <StartDefaultTask+0x5d4>
			  printf("Test do ben:\r\n");
 8002d54:	4820      	ldr	r0, [pc, #128]	; (8002dd8 <StartDefaultTask+0x618>)
 8002d56:	f00d fafd 	bl	8010354 <puts>
			  for(int i=0;i<1000;i++){
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d5e:	e012      	b.n	8002d86 <StartDefaultTask+0x5c6>
				  pickupPiece();
 8002d60:	f000 fd56 	bl	8003810 <pickupPiece>
				  osDelay(500);
 8002d64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d68:	f009 fd5b 	bl	800c822 <osDelay>
				  dropPiece();
 8002d6c:	f000 fd76 	bl	800385c <dropPiece>
				  osDelay(500);
 8002d70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d74:	f009 fd55 	bl	800c822 <osDelay>
				  printf("picked: %d\r\n",i);
 8002d78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d7a:	4818      	ldr	r0, [pc, #96]	; (8002ddc <StartDefaultTask+0x61c>)
 8002d7c:	f00d fa64 	bl	8010248 <iprintf>
			  for(int i=0;i<1000;i++){
 8002d80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d82:	3301      	adds	r3, #1
 8002d84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d8c:	dbe8      	blt.n	8002d60 <StartDefaultTask+0x5a0>
			  }
			  printf("finish ok\r\n");
 8002d8e:	4814      	ldr	r0, [pc, #80]	; (8002de0 <StartDefaultTask+0x620>)
 8002d90:	f00d fae0 	bl	8010354 <puts>
			{
				square_getpos++;
				printf("Square:%d\r\n",square_getpos);
			}
#endif
		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002d94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d98:	4812      	ldr	r0, [pc, #72]	; (8002de4 <StartDefaultTask+0x624>)
 8002d9a:	f003 ff82 	bl	8006ca2 <HAL_GPIO_TogglePin>
	  }
#endif
	 	  osDelay(100);
 8002d9e:	2064      	movs	r0, #100	; 0x64
 8002da0:	f009 fd3f 	bl	800c822 <osDelay>
	  updateInfo();
 8002da4:	e51b      	b.n	80027de <StartDefaultTask+0x1e>
 8002da6:	bf00      	nop
 8002da8:	2000b400 	.word	0x2000b400
 8002dac:	2000b068 	.word	0x2000b068
 8002db0:	2000af36 	.word	0x2000af36
 8002db4:	080142cc 	.word	0x080142cc
 8002db8:	2000af34 	.word	0x2000af34
 8002dbc:	080142e0 	.word	0x080142e0
 8002dc0:	2000b008 	.word	0x2000b008
 8002dc4:	080142f4 	.word	0x080142f4
 8002dc8:	08014308 	.word	0x08014308
 8002dcc:	08014318 	.word	0x08014318
 8002dd0:	08014328 	.word	0x08014328
 8002dd4:	08014330 	.word	0x08014330
 8002dd8:	0801433c 	.word	0x0801433c
 8002ddc:	0801434c 	.word	0x0801434c
 8002de0:	0801435c 	.word	0x0801435c
 8002de4:	40020000 	.word	0x40020000

08002de8 <StartTaskMotorJ1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMotorJ1 */
__weak void StartTaskMotorJ1(void const * argument)
{
 8002de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dea:	b095      	sub	sp, #84	; 0x54
 8002dec:	af12      	add	r7, sp, #72	; 0x48
 8002dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMotorJ1 */
	printf("Robochess 2021 -taskJ1\r\n");
 8002df0:	4822      	ldr	r0, [pc, #136]	; (8002e7c <StartTaskMotorJ1+0x94>)
 8002df2:	f00d faaf 	bl	8010354 <puts>
		osDelay(2000);						// Wait for finish Init
 8002df6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002dfa:	f009 fd12 	bl	800c822 <osDelay>
		motor_j1_data.GPIO_PIN_Dir		= J1_DIR_Pin;
 8002dfe:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <StartTaskMotorJ1+0x98>)
 8002e00:	2202      	movs	r2, #2
 8002e02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		motor_j1_data.GPIO_PORT_Dir		= J1_DIR_GPIO_Port;
 8002e06:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <StartTaskMotorJ1+0x98>)
 8002e08:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <StartTaskMotorJ1+0x9c>)
 8002e0a:	63da      	str	r2, [r3, #60]	; 0x3c
		motor_j1_data.GPIO_PORT_Enable	= J1_EN_GPIO_Port;
 8002e0c:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <StartTaskMotorJ1+0x98>)
 8002e0e:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <StartTaskMotorJ1+0x9c>)
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
		motor_j1_data.GPIO_PIN_Enable	= J1_EN_Pin;
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <StartTaskMotorJ1+0x98>)
 8002e14:	2204      	movs	r2, #4
 8002e16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		motor_j1_data.USER_TIMER		= TIM3;
 8002e1a:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <StartTaskMotorJ1+0x98>)
 8002e1c:	4a1a      	ldr	r2, [pc, #104]	; (8002e88 <StartTaskMotorJ1+0xa0>)
 8002e1e:	649a      	str	r2, [r3, #72]	; 0x48
		motor_j1_data.TIM_CHANEL		= TIM_CHANNEL_3;
 8002e20:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <StartTaskMotorJ1+0x98>)
 8002e22:	2208      	movs	r2, #8
 8002e24:	64da      	str	r2, [r3, #76]	; 0x4c
		motor_j1_data.isStop			= false;
 8002e26:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <StartTaskMotorJ1+0x98>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		AccelStepper_init(&motor_j1_data, htim3, data_AS5600_M1, J1_SPEED, J1_ACCEL_MAX);
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <StartTaskMotorJ1+0xa4>)
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	4e17      	ldr	r6, [pc, #92]	; (8002e90 <StartTaskMotorJ1+0xa8>)
 8002e34:	4a17      	ldr	r2, [pc, #92]	; (8002e94 <StartTaskMotorJ1+0xac>)
 8002e36:	9211      	str	r2, [sp, #68]	; 0x44
 8002e38:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e3c:	9210      	str	r2, [sp, #64]	; 0x40
 8002e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8002e40:	466d      	mov	r5, sp
 8002e42:	f106 040c 	add.w	r4, r6, #12
 8002e46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e52:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002e56:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002e5a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002e5e:	4808      	ldr	r0, [pc, #32]	; (8002e80 <StartTaskMotorJ1+0x98>)
 8002e60:	f7fe f8ec 	bl	800103c <AccelStepper_init>
	}
#endif
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(binarySem_motorJ1Handle, osWaitForever);
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <StartTaskMotorJ1+0xb0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f04f 31ff 	mov.w	r1, #4294967295
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f009 fd1f 	bl	800c8b0 <osSemaphoreWait>
	  	  run(&motor_j1_data);
 8002e72:	4803      	ldr	r0, [pc, #12]	; (8002e80 <StartTaskMotorJ1+0x98>)
 8002e74:	f7fe fb1e 	bl	80014b4 <run>
	  osSemaphoreWait(binarySem_motorJ1Handle, osWaitForever);
 8002e78:	e7f4      	b.n	8002e64 <StartTaskMotorJ1+0x7c>
 8002e7a:	bf00      	nop
 8002e7c:	08014368 	.word	0x08014368
 8002e80:	2000b068 	.word	0x2000b068
 8002e84:	40020400 	.word	0x40020400
 8002e88:	40000400 	.word	0x40000400
 8002e8c:	2000af36 	.word	0x2000af36
 8002e90:	2000b580 	.word	0x2000b580
 8002e94:	0007a120 	.word	0x0007a120
 8002e98:	2000aff8 	.word	0x2000aff8

08002e9c <StartTaskMotorJ2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMotorJ2 */
__weak void StartTaskMotorJ2(void const * argument)
{
 8002e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9e:	b095      	sub	sp, #84	; 0x54
 8002ea0:	af12      	add	r7, sp, #72	; 0x48
 8002ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMotorJ2 */

		osDelay(2000);						// Wait for finish Init
 8002ea4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ea8:	f009 fcbb 	bl	800c822 <osDelay>
		motor_j2_data.GPIO_PIN_Dir		= J2_DIR_Pin;
 8002eac:	4b1f      	ldr	r3, [pc, #124]	; (8002f2c <StartTaskMotorJ2+0x90>)
 8002eae:	2240      	movs	r2, #64	; 0x40
 8002eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		motor_j2_data.GPIO_PORT_Dir		= J2_DIR_GPIO_Port;
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <StartTaskMotorJ2+0x90>)
 8002eb6:	4a1e      	ldr	r2, [pc, #120]	; (8002f30 <StartTaskMotorJ2+0x94>)
 8002eb8:	63da      	str	r2, [r3, #60]	; 0x3c
		motor_j2_data.GPIO_PORT_Enable	= J2_EN_GPIO_Port;
 8002eba:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <StartTaskMotorJ2+0x90>)
 8002ebc:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <StartTaskMotorJ2+0x94>)
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40
		motor_j2_data.GPIO_PIN_Enable	= J2_EN_Pin;
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <StartTaskMotorJ2+0x90>)
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		motor_j2_data.USER_TIMER		= TIM2;
 8002ec8:	4b18      	ldr	r3, [pc, #96]	; (8002f2c <StartTaskMotorJ2+0x90>)
 8002eca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ece:	649a      	str	r2, [r3, #72]	; 0x48
		motor_j2_data.TIM_CHANEL		= TIM_CHANNEL_1;
 8002ed0:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <StartTaskMotorJ2+0x90>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	64da      	str	r2, [r3, #76]	; 0x4c
		motor_j2_data.isStop			= false;
 8002ed6:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <StartTaskMotorJ2+0x90>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		AccelStepper_init(&motor_j2_data, htim2, data_AS5600_M2, J2_SPEED, J2_ACCEL_MAX);
 8002ede:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <StartTaskMotorJ2+0x98>)
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	4e15      	ldr	r6, [pc, #84]	; (8002f38 <StartTaskMotorJ2+0x9c>)
 8002ee4:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <StartTaskMotorJ2+0xa0>)
 8002ee6:	9211      	str	r2, [sp, #68]	; 0x44
 8002ee8:	f242 7210 	movw	r2, #10000	; 0x2710
 8002eec:	9210      	str	r2, [sp, #64]	; 0x40
 8002eee:	930f      	str	r3, [sp, #60]	; 0x3c
 8002ef0:	466d      	mov	r5, sp
 8002ef2:	f106 040c 	add.w	r4, r6, #12
 8002ef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f02:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002f06:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002f0a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002f0e:	4807      	ldr	r0, [pc, #28]	; (8002f2c <StartTaskMotorJ2+0x90>)
 8002f10:	f7fe f894 	bl	800103c <AccelStepper_init>
	}
#endif
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(binarySem_motorJ2Handle, osWaitForever);
 8002f14:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <StartTaskMotorJ2+0xa4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f04f 31ff 	mov.w	r1, #4294967295
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f009 fcc7 	bl	800c8b0 <osSemaphoreWait>
	  run(&motor_j2_data);
 8002f22:	4802      	ldr	r0, [pc, #8]	; (8002f2c <StartTaskMotorJ2+0x90>)
 8002f24:	f7fe fac6 	bl	80014b4 <run>
	  osSemaphoreWait(binarySem_motorJ2Handle, osWaitForever);
 8002f28:	e7f4      	b.n	8002f14 <StartTaskMotorJ2+0x78>
 8002f2a:	bf00      	nop
 8002f2c:	2000b008 	.word	0x2000b008
 8002f30:	40020000 	.word	0x40020000
 8002f34:	2000af34 	.word	0x2000af34
 8002f38:	2000b5c8 	.word	0x2000b5c8
 8002f3c:	00061a80 	.word	0x00061a80
 8002f40:	2000b064 	.word	0x2000b064

08002f44 <StartTaskMove>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMove */
__weak void StartTaskMove(void const * argument)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMove */
	osDelay(2500);
 8002f4c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002f50:	f009 fc67 	bl	800c822 <osDelay>
  /* Infinite loop */
	for (;;) {
		osSemaphoreWait(binarySem_masterCmdHandle, osWaitForever);
 8002f54:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <StartTaskMove+0x78>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f04f 31ff 	mov.w	r1, #4294967295
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f009 fca7 	bl	800c8b0 <osSemaphoreWait>
		moveIsFinish = false;
 8002f62:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <StartTaskMove+0x7c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
		if (data_rev_master[0] == CMD_I2C_MOVE_PIECE) {
 8002f68:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <StartTaskMove+0x80>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d114      	bne.n	8002f9a <StartTaskMove+0x56>
#ifdef MDEBUG
			printf("I2C-MOVE-%d->%d OP:%d\r\n",data_rev_master[1],data_rev_master[2],data_rev_master[3]);
 8002f70:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <StartTaskMove+0x80>)
 8002f72:	785b      	ldrb	r3, [r3, #1]
 8002f74:	4619      	mov	r1, r3
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <StartTaskMove+0x80>)
 8002f78:	789b      	ldrb	r3, [r3, #2]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <StartTaskMove+0x80>)
 8002f7e:	78db      	ldrb	r3, [r3, #3]
 8002f80:	4811      	ldr	r0, [pc, #68]	; (8002fc8 <StartTaskMove+0x84>)
 8002f82:	f00d f961 	bl	8010248 <iprintf>
#endif
			movePiece(data_rev_master[1], data_rev_master[2],data_rev_master[3]);
 8002f86:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <StartTaskMove+0x80>)
 8002f88:	785b      	ldrb	r3, [r3, #1]
 8002f8a:	4a0e      	ldr	r2, [pc, #56]	; (8002fc4 <StartTaskMove+0x80>)
 8002f8c:	7891      	ldrb	r1, [r2, #2]
 8002f8e:	4a0d      	ldr	r2, [pc, #52]	; (8002fc4 <StartTaskMove+0x80>)
 8002f90:	78d2      	ldrb	r2, [r2, #3]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f906 	bl	80031a4 <movePiece>
 8002f98:	e00b      	b.n	8002fb2 <StartTaskMove+0x6e>
		} else if (data_rev_master[0] == CMD_I2C_MOVE_HOME) {
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <StartTaskMove+0x80>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d107      	bne.n	8002fb2 <StartTaskMove+0x6e>
#ifdef MDEBUG
			printf("I2C-MOVEHOME\r\n");
 8002fa2:	480a      	ldr	r0, [pc, #40]	; (8002fcc <StartTaskMove+0x88>)
 8002fa4:	f00d f9d6 	bl	8010354 <puts>
#endif
			moveToHome();
 8002fa8:	f000 f8e0 	bl	800316c <moveToHome>
			moveIsFinish = true;
 8002fac:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <StartTaskMove+0x7c>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]
		}
		osDelay(10);
 8002fb2:	200a      	movs	r0, #10
 8002fb4:	f009 fc35 	bl	800c822 <osDelay>
		osSemaphoreWait(binarySem_masterCmdHandle, osWaitForever);
 8002fb8:	e7cc      	b.n	8002f54 <StartTaskMove+0x10>
 8002fba:	bf00      	nop
 8002fbc:	2000b0c4 	.word	0x2000b0c4
 8002fc0:	20000218 	.word	0x20000218
 8002fc4:	2000aff0 	.word	0x2000aff0
 8002fc8:	08014380 	.word	0x08014380
 8002fcc:	08014398 	.word	0x08014398

08002fd0 <StartTaskMotorJ3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMotorJ3 */
__weak void StartTaskMotorJ3(void const * argument)
{
 8002fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd2:	b095      	sub	sp, #84	; 0x54
 8002fd4:	af12      	add	r7, sp, #72	; 0x48
 8002fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMotorJ3 */
	osDelay(2000);						// Wait for finish Init
 8002fd8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002fdc:	f009 fc21 	bl	800c822 <osDelay>
	motor_j3_data.GPIO_PIN_Dir		= J3_DIR_Pin;
 8002fe0:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <StartTaskMotorJ3+0x90>)
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	motor_j3_data.GPIO_PORT_Dir		= J3_DIR_GPIO_Port;
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <StartTaskMotorJ3+0x90>)
 8002fea:	4a1e      	ldr	r2, [pc, #120]	; (8003064 <StartTaskMotorJ3+0x94>)
 8002fec:	63da      	str	r2, [r3, #60]	; 0x3c
	motor_j3_data.GPIO_PORT_Enable	= J3_EN_GPIO_Port;
 8002fee:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <StartTaskMotorJ3+0x90>)
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <StartTaskMotorJ3+0x98>)
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40
	motor_j3_data.GPIO_PIN_Enable	= J3_EN_Pin;
 8002ff4:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <StartTaskMotorJ3+0x90>)
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	motor_j3_data.USER_TIMER		= TIM5;
 8002ffc:	4b18      	ldr	r3, [pc, #96]	; (8003060 <StartTaskMotorJ3+0x90>)
 8002ffe:	4a1b      	ldr	r2, [pc, #108]	; (800306c <StartTaskMotorJ3+0x9c>)
 8003000:	649a      	str	r2, [r3, #72]	; 0x48
	motor_j3_data.TIM_CHANEL		= TIM_CHANNEL_1;
 8003002:	4b17      	ldr	r3, [pc, #92]	; (8003060 <StartTaskMotorJ3+0x90>)
 8003004:	2200      	movs	r2, #0
 8003006:	64da      	str	r2, [r3, #76]	; 0x4c
	motor_j3_data.isStop			= false;
 8003008:	4b15      	ldr	r3, [pc, #84]	; (8003060 <StartTaskMotorJ3+0x90>)
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	AccelStepper_init(&motor_j3_data, htim5, 0, J3_SPEED, J3_ACCEL_MAX);
 8003010:	4e17      	ldr	r6, [pc, #92]	; (8003070 <StartTaskMotorJ3+0xa0>)
 8003012:	4b18      	ldr	r3, [pc, #96]	; (8003074 <StartTaskMotorJ3+0xa4>)
 8003014:	9311      	str	r3, [sp, #68]	; 0x44
 8003016:	f243 23c8 	movw	r3, #13000	; 0x32c8
 800301a:	9310      	str	r3, [sp, #64]	; 0x40
 800301c:	2300      	movs	r3, #0
 800301e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003020:	466d      	mov	r5, sp
 8003022:	f106 040c 	add.w	r4, r6, #12
 8003026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800302a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800302c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800302e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003032:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003036:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800303a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800303e:	4808      	ldr	r0, [pc, #32]	; (8003060 <StartTaskMotorJ3+0x90>)
 8003040:	f7fd fffc 	bl	800103c <AccelStepper_init>
		enableStepper(&motor_j3_data, OFF);
		while(1){			// disable this task
			osDelay(1000);
		}
	#endif
		pickAndDropInit();
 8003044:	f000 fb9a 	bl	800377c <pickAndDropInit>
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(binarySem_motorJ3Handle, osWaitForever);
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <StartTaskMotorJ3+0xa8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f04f 31ff 	mov.w	r1, #4294967295
 8003050:	4618      	mov	r0, r3
 8003052:	f009 fc2d 	bl	800c8b0 <osSemaphoreWait>
	  run(&motor_j3_data);
 8003056:	4802      	ldr	r0, [pc, #8]	; (8003060 <StartTaskMotorJ3+0x90>)
 8003058:	f7fe fa2c 	bl	80014b4 <run>
	  osSemaphoreWait(binarySem_motorJ3Handle, osWaitForever);
 800305c:	e7f4      	b.n	8003048 <StartTaskMotorJ3+0x78>
 800305e:	bf00      	nop
 8003060:	2000b0d0 	.word	0x2000b0d0
 8003064:	40020000 	.word	0x40020000
 8003068:	40020400 	.word	0x40020400
 800306c:	40000c00 	.word	0x40000c00
 8003070:	2000b538 	.word	0x2000b538
 8003074:	000186a0 	.word	0x000186a0
 8003078:	2000b000 	.word	0x2000b000

0800307c <moveToSquare>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void moveToSquare(uint8_t point,bool continues)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	460a      	mov	r2, r1
 8003086:	71fb      	strb	r3, [r7, #7]
 8003088:	4613      	mov	r3, r2
 800308a:	71bb      	strb	r3, [r7, #6]
	AS5600_Start_Update_High();
 800308c:	f7fd ffc8 	bl	8001020 <AS5600_Start_Update_High>
	enableStepper(&motor_j1_data, ON);
 8003090:	2101      	movs	r1, #1
 8003092:	4833      	ldr	r0, [pc, #204]	; (8003160 <moveToSquare+0xe4>)
 8003094:	f7fe fbde 	bl	8001854 <enableStepper>
	enableStepper(&motor_j2_data, ON);
 8003098:	2101      	movs	r1, #1
 800309a:	4832      	ldr	r0, [pc, #200]	; (8003164 <moveToSquare+0xe8>)
 800309c:	f7fe fbda 	bl	8001854 <enableStepper>
	moveTo(&motor_j1_data,square[point].j1);
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	4a31      	ldr	r2, [pc, #196]	; (8003168 <moveToSquare+0xec>)
 80030a4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80030a8:	4619      	mov	r1, r3
 80030aa:	482d      	ldr	r0, [pc, #180]	; (8003160 <moveToSquare+0xe4>)
 80030ac:	f7fe fbba 	bl	8001824 <moveTo>
	run(&motor_j1_data);
 80030b0:	482b      	ldr	r0, [pc, #172]	; (8003160 <moveToSquare+0xe4>)
 80030b2:	f7fe f9ff 	bl	80014b4 <run>
	moveTo(&motor_j2_data,square[point].j2);
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	4a2b      	ldr	r2, [pc, #172]	; (8003168 <moveToSquare+0xec>)
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	885b      	ldrh	r3, [r3, #2]
 80030c0:	4619      	mov	r1, r3
 80030c2:	4828      	ldr	r0, [pc, #160]	; (8003164 <moveToSquare+0xe8>)
 80030c4:	f7fe fbae 	bl	8001824 <moveTo>
	run(&motor_j2_data);
 80030c8:	4826      	ldr	r0, [pc, #152]	; (8003164 <moveToSquare+0xe8>)
 80030ca:	f7fe f9f3 	bl	80014b4 <run>
	uint16_t check_time_out=0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	81fb      	strh	r3, [r7, #14]
	while( isRunning(&motor_j1_data) || isRunning(&motor_j2_data) ){	// Waiting for move finish
 80030d2:	e01a      	b.n	800310a <moveToSquare+0x8e>
		if( labs(distanceToGo(&motor_j1_data)) < 2  &&  labs(distanceToGo(&motor_j2_data)) < 2 ){		// neu dung sai la nho thi thoat trong khoang 500ms
 80030d4:	4822      	ldr	r0, [pc, #136]	; (8003160 <moveToSquare+0xe4>)
 80030d6:	f7fe f9dd 	bl	8001494 <distanceToGo>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bfb8      	it	lt
 80030e0:	425b      	neglt	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	dc0e      	bgt.n	8003104 <moveToSquare+0x88>
 80030e6:	481f      	ldr	r0, [pc, #124]	; (8003164 <moveToSquare+0xe8>)
 80030e8:	f7fe f9d4 	bl	8001494 <distanceToGo>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bfb8      	it	lt
 80030f2:	425b      	neglt	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	dc05      	bgt.n	8003104 <moveToSquare+0x88>
			check_time_out++;
 80030f8:	89fb      	ldrh	r3, [r7, #14]
 80030fa:	3301      	adds	r3, #1
 80030fc:	81fb      	strh	r3, [r7, #14]
			if(check_time_out > 100) break;
 80030fe:	89fb      	ldrh	r3, [r7, #14]
 8003100:	2b64      	cmp	r3, #100	; 0x64
 8003102:	d80f      	bhi.n	8003124 <moveToSquare+0xa8>
		}
		osDelay(10);
 8003104:	200a      	movs	r0, #10
 8003106:	f009 fb8c 	bl	800c822 <osDelay>
	while( isRunning(&motor_j1_data) || isRunning(&motor_j2_data) ){	// Waiting for move finish
 800310a:	4815      	ldr	r0, [pc, #84]	; (8003160 <moveToSquare+0xe4>)
 800310c:	f7fe fb6e 	bl	80017ec <isRunning>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1de      	bne.n	80030d4 <moveToSquare+0x58>
 8003116:	4813      	ldr	r0, [pc, #76]	; (8003164 <moveToSquare+0xe8>)
 8003118:	f7fe fb68 	bl	80017ec <isRunning>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1d8      	bne.n	80030d4 <moveToSquare+0x58>
 8003122:	e000      	b.n	8003126 <moveToSquare+0xaa>
			if(check_time_out > 100) break;
 8003124:	bf00      	nop
	}
	motor_j1_data.isStop = true;
 8003126:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <moveToSquare+0xe4>)
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	motor_j2_data.isStop = true;
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <moveToSquare+0xe8>)
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	if(continues==false)
 8003136:	79bb      	ldrb	r3, [r7, #6]
 8003138:	f083 0301 	eor.w	r3, r3, #1
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <moveToSquare+0xda>
	{
		enableStepper(&motor_j1_data, OFF);
 8003142:	2100      	movs	r1, #0
 8003144:	4806      	ldr	r0, [pc, #24]	; (8003160 <moveToSquare+0xe4>)
 8003146:	f7fe fb85 	bl	8001854 <enableStepper>
		enableStepper(&motor_j2_data, OFF);
 800314a:	2100      	movs	r1, #0
 800314c:	4805      	ldr	r0, [pc, #20]	; (8003164 <moveToSquare+0xe8>)
 800314e:	f7fe fb81 	bl	8001854 <enableStepper>
		AS5600_Start_Update_Low();
 8003152:	f7fd ff57 	bl	8001004 <AS5600_Start_Update_Low>
	}
}
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	2000b068 	.word	0x2000b068
 8003164:	2000b008 	.word	0x2000b008
 8003168:	08014400 	.word	0x08014400

0800316c <moveToHome>:

void moveToHome()
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
	moveToSquare(79, false);
 8003170:	2100      	movs	r1, #0
 8003172:	204f      	movs	r0, #79	; 0x4f
 8003174:	f7ff ff82 	bl	800307c <moveToSquare>
}
 8003178:	bf00      	nop
 800317a:	bd80      	pop	{r7, pc}

0800317c <moveToKill>:
void moveToKill()
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
	moveToSquare(square_kill_number + 64, true);
 8003180:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <moveToKill+0x24>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	3340      	adds	r3, #64	; 0x40
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2101      	movs	r1, #1
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff ff76 	bl	800307c <moveToSquare>
	square_kill_number++;
 8003190:	4b03      	ldr	r3, [pc, #12]	; (80031a0 <moveToKill+0x24>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	b2da      	uxtb	r2, r3
 8003198:	4b01      	ldr	r3, [pc, #4]	; (80031a0 <moveToKill+0x24>)
 800319a:	701a      	strb	r2, [r3, #0]
}
 800319c:	bf00      	nop
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20000210 	.word	0x20000210

080031a4 <movePiece>:
void movePiece(uint8_t qFrom,uint8_t qTo,uint8_t option)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
 80031ae:	460b      	mov	r3, r1
 80031b0:	71bb      	strb	r3, [r7, #6]
 80031b2:	4613      	mov	r3, r2
 80031b4:	717b      	strb	r3, [r7, #5]
	if(option == CMD_I2C_MOVE_KILL)										// Neu la nuoc di an quan thi gap piece ra khoi ban co
 80031b6:	797b      	ldrb	r3, [r7, #5]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d10b      	bne.n	80031d4 <movePiece+0x30>
	{
		moveToSquare(qTo, true);		// move to piece kill
 80031bc:	79bb      	ldrb	r3, [r7, #6]
 80031be:	2101      	movs	r1, #1
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff5b 	bl	800307c <moveToSquare>
		pickupPiece();					// pickup
 80031c6:	f000 fb23 	bl	8003810 <pickupPiece>
		moveToKill();		// move to square die
 80031ca:	f7ff ffd7 	bl	800317c <moveToKill>
		dropPiece();					// drop
 80031ce:	f000 fb45 	bl	800385c <dropPiece>
 80031d2:	e05c      	b.n	800328e <movePiece+0xea>
	}else if(option == CMD_I2C_MOVE_CASLLING_KING)
 80031d4:	797b      	ldrb	r3, [r7, #5]
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d11a      	bne.n	8003210 <movePiece+0x6c>
	{
		moveToSquare(4, true);
 80031da:	2101      	movs	r1, #1
 80031dc:	2004      	movs	r0, #4
 80031de:	f7ff ff4d 	bl	800307c <moveToSquare>
		pickupPiece();
 80031e2:	f000 fb15 	bl	8003810 <pickupPiece>
		moveToSquare(6, true);
 80031e6:	2101      	movs	r1, #1
 80031e8:	2006      	movs	r0, #6
 80031ea:	f7ff ff47 	bl	800307c <moveToSquare>
		dropPiece();
 80031ee:	f000 fb35 	bl	800385c <dropPiece>
		moveToSquare(7, true);
 80031f2:	2101      	movs	r1, #1
 80031f4:	2007      	movs	r0, #7
 80031f6:	f7ff ff41 	bl	800307c <moveToSquare>
		pickupPiece();
 80031fa:	f000 fb09 	bl	8003810 <pickupPiece>
		moveToSquare(5, true);
 80031fe:	2101      	movs	r1, #1
 8003200:	2005      	movs	r0, #5
 8003202:	f7ff ff3b 	bl	800307c <moveToSquare>
		dropPiece();
 8003206:	f000 fb29 	bl	800385c <dropPiece>
		moveToHome();
 800320a:	f7ff ffaf 	bl	800316c <moveToHome>
		return;
 800320e:	e04e      	b.n	80032ae <movePiece+0x10a>
	}else if(option == CMD_I2C_MOVE_CASLLINGG_QUEEN)
 8003210:	797b      	ldrb	r3, [r7, #5]
 8003212:	2b03      	cmp	r3, #3
 8003214:	d11a      	bne.n	800324c <movePiece+0xa8>
	{
		moveToSquare(4, true);
 8003216:	2101      	movs	r1, #1
 8003218:	2004      	movs	r0, #4
 800321a:	f7ff ff2f 	bl	800307c <moveToSquare>
		pickupPiece();
 800321e:	f000 faf7 	bl	8003810 <pickupPiece>
		moveToSquare(2, true);
 8003222:	2101      	movs	r1, #1
 8003224:	2002      	movs	r0, #2
 8003226:	f7ff ff29 	bl	800307c <moveToSquare>
		dropPiece();
 800322a:	f000 fb17 	bl	800385c <dropPiece>
		moveToSquare(0, true);
 800322e:	2101      	movs	r1, #1
 8003230:	2000      	movs	r0, #0
 8003232:	f7ff ff23 	bl	800307c <moveToSquare>
		pickupPiece();
 8003236:	f000 faeb 	bl	8003810 <pickupPiece>
		moveToSquare(3, true);
 800323a:	2101      	movs	r1, #1
 800323c:	2003      	movs	r0, #3
 800323e:	f7ff ff1d 	bl	800307c <moveToSquare>
		dropPiece();
 8003242:	f000 fb0b 	bl	800385c <dropPiece>
		moveToHome();
 8003246:	f7ff ff91 	bl	800316c <moveToHome>
		return;
 800324a:	e030      	b.n	80032ae <movePiece+0x10a>
	}else if(option == CMD_I2C_MOVE_PASSANT){
 800324c:	797b      	ldrb	r3, [r7, #5]
 800324e:	2b05      	cmp	r3, #5
 8003250:	d11d      	bne.n	800328e <movePiece+0xea>
		moveToSquare(qTo-8, true);
 8003252:	79bb      	ldrb	r3, [r7, #6]
 8003254:	3b08      	subs	r3, #8
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2101      	movs	r1, #1
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff ff0e 	bl	800307c <moveToSquare>
		pickupPiece();
 8003260:	f000 fad6 	bl	8003810 <pickupPiece>
		moveToKill();
 8003264:	f7ff ff8a 	bl	800317c <moveToKill>
		dropPiece();
 8003268:	f000 faf8 	bl	800385c <dropPiece>
		moveToSquare(qFrom, true);
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	2101      	movs	r1, #1
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff03 	bl	800307c <moveToSquare>
		pickupPiece();
 8003276:	f000 facb 	bl	8003810 <pickupPiece>
		moveToSquare(qTo, true);
 800327a:	79bb      	ldrb	r3, [r7, #6]
 800327c:	2101      	movs	r1, #1
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fefc 	bl	800307c <moveToSquare>
		dropPiece();
 8003284:	f000 faea 	bl	800385c <dropPiece>
		moveToHome();
 8003288:	f7ff ff70 	bl	800316c <moveToHome>
		return;
 800328c:	e00f      	b.n	80032ae <movePiece+0x10a>
	}
	moveToSquare(qFrom, true);
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	2101      	movs	r1, #1
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fef2 	bl	800307c <moveToSquare>
	pickupPiece();
 8003298:	f000 faba 	bl	8003810 <pickupPiece>
	moveToSquare(qTo, true);
 800329c:	79bb      	ldrb	r3, [r7, #6]
 800329e:	2101      	movs	r1, #1
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff feeb 	bl	800307c <moveToSquare>
	dropPiece();
 80032a6:	f000 fad9 	bl	800385c <dropPiece>
	moveToHome();
 80032aa:	f7ff ff5f 	bl	800316c <moveToHome>
}
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <updateInfo>:

void updateInfo(){
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
	  int bat_volt	= batteryGet();
 80032ba:	f7fe fc07 	bl	8001acc <batteryGet>
 80032be:	4603      	mov	r3, r0
 80032c0:	603b      	str	r3, [r7, #0]
	  uint8_t status=0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	71fb      	strb	r3, [r7, #7]
	  data_trans_master[0] = (uint8_t)(data_AS5600_M1 & 0xFF);
 80032c6:	4b34      	ldr	r3, [pc, #208]	; (8003398 <updateInfo+0xe4>)
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	4b33      	ldr	r3, [pc, #204]	; (800339c <updateInfo+0xe8>)
 80032ce:	701a      	strb	r2, [r3, #0]
	  data_trans_master[1] = (uint8_t)((data_AS5600_M1>>8) & 0xFF);
 80032d0:	4b31      	ldr	r3, [pc, #196]	; (8003398 <updateInfo+0xe4>)
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	0a1b      	lsrs	r3, r3, #8
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <updateInfo+0xe8>)
 80032dc:	705a      	strb	r2, [r3, #1]
	  data_trans_master[2] = (uint8_t)(data_AS5600_M2 & 0xFF);
 80032de:	4b30      	ldr	r3, [pc, #192]	; (80033a0 <updateInfo+0xec>)
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	4b2d      	ldr	r3, [pc, #180]	; (800339c <updateInfo+0xe8>)
 80032e6:	709a      	strb	r2, [r3, #2]
	  data_trans_master[3] = (uint8_t)((data_AS5600_M2>>8) & 0xFF);
 80032e8:	4b2d      	ldr	r3, [pc, #180]	; (80033a0 <updateInfo+0xec>)
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	4b2a      	ldr	r3, [pc, #168]	; (800339c <updateInfo+0xe8>)
 80032f4:	70da      	strb	r2, [r3, #3]
	  data_trans_master[4] = (uint8_t)(bat_volt & 0xFF);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4b28      	ldr	r3, [pc, #160]	; (800339c <updateInfo+0xe8>)
 80032fc:	711a      	strb	r2, [r3, #4]
	  data_trans_master[5] = (uint8_t)((bat_volt>>8) & 0xFF);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	121b      	asrs	r3, r3, #8
 8003302:	b2da      	uxtb	r2, r3
 8003304:	4b25      	ldr	r3, [pc, #148]	; (800339c <updateInfo+0xe8>)
 8003306:	715a      	strb	r2, [r3, #5]
	  if(HAL_SENSOR_UP_GET) status|=(1<<0); else status &=~(1<<0);																// Hal_sensor_up
 8003308:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800330c:	4825      	ldr	r0, [pc, #148]	; (80033a4 <updateInfo+0xf0>)
 800330e:	f003 fc97 	bl	8006c40 <HAL_GPIO_ReadPin>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <updateInfo+0x6e>
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	71fb      	strb	r3, [r7, #7]
 8003320:	e003      	b.n	800332a <updateInfo+0x76>
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	71fb      	strb	r3, [r7, #7]
	  if(HAL_SENSOR_DOWN_GET) status |= (1<<1); else status &=~(1<<1);															// Hal_sensor_down
 800332a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800332e:	481d      	ldr	r0, [pc, #116]	; (80033a4 <updateInfo+0xf0>)
 8003330:	f003 fc86 	bl	8006c40 <HAL_GPIO_ReadPin>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d004      	beq.n	8003344 <updateInfo+0x90>
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	f043 0302 	orr.w	r3, r3, #2
 8003340:	71fb      	strb	r3, [r7, #7]
 8003342:	e003      	b.n	800334c <updateInfo+0x98>
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	f023 0302 	bic.w	r3, r3, #2
 800334a:	71fb      	strb	r3, [r7, #7]
	  if(HAL_GPIO_ReadPin(BATTERY_CHANGER_GPIO_Port, BATTERY_CHANGER_Pin)==GPIO_PIN_RESET) status |=(1<<2); else status &=~(1<<2);  	// Battery Chnager
 800334c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003350:	4815      	ldr	r0, [pc, #84]	; (80033a8 <updateInfo+0xf4>)
 8003352:	f003 fc75 	bl	8006c40 <HAL_GPIO_ReadPin>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d104      	bne.n	8003366 <updateInfo+0xb2>
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	f043 0304 	orr.w	r3, r3, #4
 8003362:	71fb      	strb	r3, [r7, #7]
 8003364:	e003      	b.n	800336e <updateInfo+0xba>
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	f023 0304 	bic.w	r3, r3, #4
 800336c:	71fb      	strb	r3, [r7, #7]
	  if(moveIsFinish == true) status |=(1<<3); else status &=~(1<<3);
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <updateInfo+0xf8>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d004      	beq.n	8003380 <updateInfo+0xcc>
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	f043 0308 	orr.w	r3, r3, #8
 800337c:	71fb      	strb	r3, [r7, #7]
 800337e:	e003      	b.n	8003388 <updateInfo+0xd4>
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	f023 0308 	bic.w	r3, r3, #8
 8003386:	71fb      	strb	r3, [r7, #7]
	  data_trans_master[6] = status;
 8003388:	4a04      	ldr	r2, [pc, #16]	; (800339c <updateInfo+0xe8>)
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	7193      	strb	r3, [r2, #6]
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	2000af36 	.word	0x2000af36
 800339c:	2000b05c 	.word	0x2000b05c
 80033a0:	2000af34 	.word	0x2000af34
 80033a4:	40020800 	.word	0x40020800
 80033a8:	40020400 	.word	0x40020400
 80033ac:	20000218 	.word	0x20000218

080033b0 <inverseKinematics>:
// INVERSE KINEMATICS
void inverseKinematics(float x, float y) {
 80033b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b4:	ed2d 8b02 	vpush	{d8}
 80033b8:	b086      	sub	sp, #24
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	ed87 0a01 	vstr	s0, [r7, #4]
 80033c0:	edc7 0a00 	vstr	s1, [r7]
	  printf("x:%f  ",x);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7fd f8c7 	bl	8000558 <__aeabi_f2d>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	48cc      	ldr	r0, [pc, #816]	; (8003700 <inverseKinematics+0x350>)
 80033d0:	f00c ff3a 	bl	8010248 <iprintf>
	  printf("y:%f\r\n",y);
 80033d4:	6838      	ldr	r0, [r7, #0]
 80033d6:	f7fd f8bf 	bl	8000558 <__aeabi_f2d>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	48c9      	ldr	r0, [pc, #804]	; (8003704 <inverseKinematics+0x354>)
 80033e0:	f00c ff32 	bl	8010248 <iprintf>
  theta2 = acos((sq(x) + sq(y) - sq(L1) - sq(L2)) / (2 * L1 * L2));
 80033e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80033e8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80033ec:	edd7 7a00 	vldr	s15, [r7]
 80033f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80033f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033f8:	eddf 6ac3 	vldr	s13, [pc, #780]	; 8003708 <inverseKinematics+0x358>
 80033fc:	eddf 7ac2 	vldr	s15, [pc, #776]	; 8003708 <inverseKinematics+0x358>
 8003400:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003404:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003408:	eddf 6ac0 	vldr	s13, [pc, #768]	; 800370c <inverseKinematics+0x35c>
 800340c:	eddf 7abf 	vldr	s15, [pc, #764]	; 800370c <inverseKinematics+0x35c>
 8003410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003414:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003418:	eddf 7abb 	vldr	s15, [pc, #748]	; 8003708 <inverseKinematics+0x358>
 800341c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003420:	eddf 6aba 	vldr	s13, [pc, #744]	; 800370c <inverseKinematics+0x35c>
 8003424:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003428:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800342c:	ee16 0a90 	vmov	r0, s13
 8003430:	f7fd f892 	bl	8000558 <__aeabi_f2d>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	ec43 2b10 	vmov	d0, r2, r3
 800343c:	f00f fac8 	bl	80129d0 <acos>
 8003440:	ec53 2b10 	vmov	r2, r3, d0
 8003444:	4610      	mov	r0, r2
 8003446:	4619      	mov	r1, r3
 8003448:	f7fd fbb6 	bl	8000bb8 <__aeabi_d2f>
 800344c:	4603      	mov	r3, r0
 800344e:	4ab0      	ldr	r2, [pc, #704]	; (8003710 <inverseKinematics+0x360>)
 8003450:	6013      	str	r3, [r2, #0]
 if (x < 0 && y < 0) {
 8003452:	edd7 7a01 	vldr	s15, [r7, #4]
 8003456:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345e:	d50e      	bpl.n	800347e <inverseKinematics+0xce>
 8003460:	edd7 7a00 	vldr	s15, [r7]
 8003464:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346c:	d507      	bpl.n	800347e <inverseKinematics+0xce>
    theta2 = (-1) * theta2;
 800346e:	4ba8      	ldr	r3, [pc, #672]	; (8003710 <inverseKinematics+0x360>)
 8003470:	edd3 7a00 	vldr	s15, [r3]
 8003474:	eef1 7a67 	vneg.f32	s15, s15
 8003478:	4ba5      	ldr	r3, [pc, #660]	; (8003710 <inverseKinematics+0x360>)
 800347a:	edc3 7a00 	vstr	s15, [r3]
 }

  theta1 = atan(y/x) + atan((L2 * sin(theta2)) / (L1 + L2 * cos(theta2)));
 800347e:	ed97 7a00 	vldr	s14, [r7]
 8003482:	edd7 7a01 	vldr	s15, [r7, #4]
 8003486:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800348a:	ee16 0a90 	vmov	r0, s13
 800348e:	f7fd f863 	bl	8000558 <__aeabi_f2d>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	ec43 2b10 	vmov	d0, r2, r3
 800349a:	f00f f849 	bl	8012530 <atan>
 800349e:	eeb0 8a40 	vmov.f32	s16, s0
 80034a2:	eef0 8a60 	vmov.f32	s17, s1
 80034a6:	4b9b      	ldr	r3, [pc, #620]	; (8003714 <inverseKinematics+0x364>)
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fd f855 	bl	8000558 <__aeabi_f2d>
 80034ae:	4604      	mov	r4, r0
 80034b0:	460d      	mov	r5, r1
 80034b2:	4b97      	ldr	r3, [pc, #604]	; (8003710 <inverseKinematics+0x360>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd f84e 	bl	8000558 <__aeabi_f2d>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	ec43 2b10 	vmov	d0, r2, r3
 80034c4:	f00f fa30 	bl	8012928 <sin>
 80034c8:	ec53 2b10 	vmov	r2, r3, d0
 80034cc:	4620      	mov	r0, r4
 80034ce:	4629      	mov	r1, r5
 80034d0:	f7fd f89a 	bl	8000608 <__aeabi_dmul>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4692      	mov	sl, r2
 80034da:	469b      	mov	fp, r3
 80034dc:	4b8e      	ldr	r3, [pc, #568]	; (8003718 <inverseKinematics+0x368>)
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd f83a 	bl	8000558 <__aeabi_f2d>
 80034e4:	4604      	mov	r4, r0
 80034e6:	460d      	mov	r5, r1
 80034e8:	4b8a      	ldr	r3, [pc, #552]	; (8003714 <inverseKinematics+0x364>)
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd f834 	bl	8000558 <__aeabi_f2d>
 80034f0:	4680      	mov	r8, r0
 80034f2:	4689      	mov	r9, r1
 80034f4:	4b86      	ldr	r3, [pc, #536]	; (8003710 <inverseKinematics+0x360>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd f82d 	bl	8000558 <__aeabi_f2d>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	ec43 2b10 	vmov	d0, r2, r3
 8003506:	f00f f9b3 	bl	8012870 <cos>
 800350a:	ec53 2b10 	vmov	r2, r3, d0
 800350e:	4640      	mov	r0, r8
 8003510:	4649      	mov	r1, r9
 8003512:	f7fd f879 	bl	8000608 <__aeabi_dmul>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4620      	mov	r0, r4
 800351c:	4629      	mov	r1, r5
 800351e:	f7fc febd 	bl	800029c <__adddf3>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4650      	mov	r0, sl
 8003528:	4659      	mov	r1, fp
 800352a:	f7fd f997 	bl	800085c <__aeabi_ddiv>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	ec43 2b17 	vmov	d7, r2, r3
 8003536:	eeb0 0a47 	vmov.f32	s0, s14
 800353a:	eef0 0a67 	vmov.f32	s1, s15
 800353e:	f00e fff7 	bl	8012530 <atan>
 8003542:	ec53 2b10 	vmov	r2, r3, d0
 8003546:	ec51 0b18 	vmov	r0, r1, d8
 800354a:	f7fc fea7 	bl	800029c <__adddf3>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4610      	mov	r0, r2
 8003554:	4619      	mov	r1, r3
 8003556:	f7fd fb2f 	bl	8000bb8 <__aeabi_d2f>
 800355a:	4603      	mov	r3, r0
 800355c:	4a6f      	ldr	r2, [pc, #444]	; (800371c <inverseKinematics+0x36c>)
 800355e:	6013      	str	r3, [r2, #0]

  theta2 = theta2 * 180 / PI;
 8003560:	4b6b      	ldr	r3, [pc, #428]	; (8003710 <inverseKinematics+0x360>)
 8003562:	edd3 7a00 	vldr	s15, [r3]
 8003566:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003708 <inverseKinematics+0x358>
 800356a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800356e:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8003720 <inverseKinematics+0x370>
 8003572:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003576:	4b66      	ldr	r3, [pc, #408]	; (8003710 <inverseKinematics+0x360>)
 8003578:	edc3 7a00 	vstr	s15, [r3]
  theta1 = theta1 * 180 / PI;
 800357c:	4b67      	ldr	r3, [pc, #412]	; (800371c <inverseKinematics+0x36c>)
 800357e:	edd3 7a00 	vldr	s15, [r3]
 8003582:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003708 <inverseKinematics+0x358>
 8003586:	ee27 7a87 	vmul.f32	s14, s15, s14
 800358a:	eddf 6a65 	vldr	s13, [pc, #404]	; 8003720 <inverseKinematics+0x370>
 800358e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003592:	4b62      	ldr	r3, [pc, #392]	; (800371c <inverseKinematics+0x36c>)
 8003594:	edc3 7a00 	vstr	s15, [r3]
  if(theta1<0) theta1 =180 - (-1)*theta1;
 8003598:	4b60      	ldr	r3, [pc, #384]	; (800371c <inverseKinematics+0x36c>)
 800359a:	edd3 7a00 	vldr	s15, [r3]
 800359e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a6:	d509      	bpl.n	80035bc <inverseKinematics+0x20c>
 80035a8:	4b5c      	ldr	r3, [pc, #368]	; (800371c <inverseKinematics+0x36c>)
 80035aa:	edd3 7a00 	vldr	s15, [r3]
 80035ae:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8003708 <inverseKinematics+0x358>
 80035b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035b6:	4b59      	ldr	r3, [pc, #356]	; (800371c <inverseKinematics+0x36c>)
 80035b8:	edc3 7a00 	vstr	s15, [r3]

//  printf("theta1:%f\r\n",theta1);
//  printf("theta2:%f\r\n",theta2);

  theta1 = 90 - theta1;
 80035bc:	4b57      	ldr	r3, [pc, #348]	; (800371c <inverseKinematics+0x36c>)
 80035be:	edd3 7a00 	vldr	s15, [r3]
 80035c2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003724 <inverseKinematics+0x374>
 80035c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ca:	4b54      	ldr	r3, [pc, #336]	; (800371c <inverseKinematics+0x36c>)
 80035cc:	edc3 7a00 	vstr	s15, [r3]
  theta2 = 180 - theta2;
 80035d0:	4b4f      	ldr	r3, [pc, #316]	; (8003710 <inverseKinematics+0x360>)
 80035d2:	edd3 7a00 	vldr	s15, [r3]
 80035d6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003708 <inverseKinematics+0x358>
 80035da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035de:	4b4c      	ldr	r3, [pc, #304]	; (8003710 <inverseKinematics+0x360>)
 80035e0:	edc3 7a00 	vstr	s15, [r3]
//  printf("Q1:%f\r\n",theta1);
//  printf("Q2:%f\r\n",theta2);
  long int pul1,pul2;
  pul1 = J1ORIGIN + theta1*11.377;
 80035e4:	4b50      	ldr	r3, [pc, #320]	; (8003728 <inverseKinematics+0x378>)
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fc ffa3 	bl	8000534 <__aeabi_i2d>
 80035ee:	4604      	mov	r4, r0
 80035f0:	460d      	mov	r5, r1
 80035f2:	4b4a      	ldr	r3, [pc, #296]	; (800371c <inverseKinematics+0x36c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fc ffae 	bl	8000558 <__aeabi_f2d>
 80035fc:	a33e      	add	r3, pc, #248	; (adr r3, 80036f8 <inverseKinematics+0x348>)
 80035fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003602:	f7fd f801 	bl	8000608 <__aeabi_dmul>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4620      	mov	r0, r4
 800360c:	4629      	mov	r1, r5
 800360e:	f7fc fe45 	bl	800029c <__adddf3>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4610      	mov	r0, r2
 8003618:	4619      	mov	r1, r3
 800361a:	f7fd faa5 	bl	8000b68 <__aeabi_d2iz>
 800361e:	4603      	mov	r3, r0
 8003620:	613b      	str	r3, [r7, #16]
  pul2 = J2ORIGIN	-theta2*11.377;
 8003622:	4b42      	ldr	r3, [pc, #264]	; (800372c <inverseKinematics+0x37c>)
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fc ff84 	bl	8000534 <__aeabi_i2d>
 800362c:	4604      	mov	r4, r0
 800362e:	460d      	mov	r5, r1
 8003630:	4b37      	ldr	r3, [pc, #220]	; (8003710 <inverseKinematics+0x360>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fc ff8f 	bl	8000558 <__aeabi_f2d>
 800363a:	a32f      	add	r3, pc, #188	; (adr r3, 80036f8 <inverseKinematics+0x348>)
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	f7fc ffe2 	bl	8000608 <__aeabi_dmul>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4620      	mov	r0, r4
 800364a:	4629      	mov	r1, r5
 800364c:	f7fc fe24 	bl	8000298 <__aeabi_dsub>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4610      	mov	r0, r2
 8003656:	4619      	mov	r1, r3
 8003658:	f7fd fa86 	bl	8000b68 <__aeabi_d2iz>
 800365c:	4603      	mov	r3, r0
 800365e:	60fb      	str	r3, [r7, #12]
//  pul1 = round(pul1);
//  pul2 = round(pul2);
  printf("P1:%ld\r\n",pul1);
 8003660:	6939      	ldr	r1, [r7, #16]
 8003662:	4833      	ldr	r0, [pc, #204]	; (8003730 <inverseKinematics+0x380>)
 8003664:	f00c fdf0 	bl	8010248 <iprintf>
  printf("P2:%ld\r\n",pul2);
 8003668:	68f9      	ldr	r1, [r7, #12]
 800366a:	4832      	ldr	r0, [pc, #200]	; (8003734 <inverseKinematics+0x384>)
 800366c:	f00c fdec 	bl	8010248 <iprintf>

	AS5600_Start_Update_High();
 8003670:	f7fd fcd6 	bl	8001020 <AS5600_Start_Update_High>
	enableStepper(&motor_j1_data, ON);
 8003674:	2101      	movs	r1, #1
 8003676:	4830      	ldr	r0, [pc, #192]	; (8003738 <inverseKinematics+0x388>)
 8003678:	f7fe f8ec 	bl	8001854 <enableStepper>
	enableStepper(&motor_j2_data, ON);
 800367c:	2101      	movs	r1, #1
 800367e:	482f      	ldr	r0, [pc, #188]	; (800373c <inverseKinematics+0x38c>)
 8003680:	f7fe f8e8 	bl	8001854 <enableStepper>
	moveTo(&motor_j1_data,pul1);
 8003684:	6939      	ldr	r1, [r7, #16]
 8003686:	482c      	ldr	r0, [pc, #176]	; (8003738 <inverseKinematics+0x388>)
 8003688:	f7fe f8cc 	bl	8001824 <moveTo>
	run(&motor_j1_data);
 800368c:	482a      	ldr	r0, [pc, #168]	; (8003738 <inverseKinematics+0x388>)
 800368e:	f7fd ff11 	bl	80014b4 <run>
	moveTo(&motor_j2_data,pul2);
 8003692:	68f9      	ldr	r1, [r7, #12]
 8003694:	4829      	ldr	r0, [pc, #164]	; (800373c <inverseKinematics+0x38c>)
 8003696:	f7fe f8c5 	bl	8001824 <moveTo>
	run(&motor_j2_data);
 800369a:	4828      	ldr	r0, [pc, #160]	; (800373c <inverseKinematics+0x38c>)
 800369c:	f7fd ff0a 	bl	80014b4 <run>
	uint16_t check_time_out=0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	82fb      	strh	r3, [r7, #22]
	while( isRunning(&motor_j1_data) || isRunning(&motor_j2_data) ){	// Waiting for move finish
 80036a4:	e01a      	b.n	80036dc <inverseKinematics+0x32c>
		if( labs(distanceToGo(&motor_j1_data)) < 2  &&  labs(distanceToGo(&motor_j2_data)) < 2 ){		// neu dung sai la nho thi thoat trong khoang 500ms
 80036a6:	4824      	ldr	r0, [pc, #144]	; (8003738 <inverseKinematics+0x388>)
 80036a8:	f7fd fef4 	bl	8001494 <distanceToGo>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	bfb8      	it	lt
 80036b2:	425b      	neglt	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	dc0e      	bgt.n	80036d6 <inverseKinematics+0x326>
 80036b8:	4820      	ldr	r0, [pc, #128]	; (800373c <inverseKinematics+0x38c>)
 80036ba:	f7fd feeb 	bl	8001494 <distanceToGo>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bfb8      	it	lt
 80036c4:	425b      	neglt	r3, r3
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	dc05      	bgt.n	80036d6 <inverseKinematics+0x326>
			check_time_out++;
 80036ca:	8afb      	ldrh	r3, [r7, #22]
 80036cc:	3301      	adds	r3, #1
 80036ce:	82fb      	strh	r3, [r7, #22]
			if(check_time_out > 100) break;
 80036d0:	8afb      	ldrh	r3, [r7, #22]
 80036d2:	2b64      	cmp	r3, #100	; 0x64
 80036d4:	d834      	bhi.n	8003740 <inverseKinematics+0x390>
		}
		osDelay(10);
 80036d6:	200a      	movs	r0, #10
 80036d8:	f009 f8a3 	bl	800c822 <osDelay>
	while( isRunning(&motor_j1_data) || isRunning(&motor_j2_data) ){	// Waiting for move finish
 80036dc:	4816      	ldr	r0, [pc, #88]	; (8003738 <inverseKinematics+0x388>)
 80036de:	f7fe f885 	bl	80017ec <isRunning>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1de      	bne.n	80036a6 <inverseKinematics+0x2f6>
 80036e8:	4814      	ldr	r0, [pc, #80]	; (800373c <inverseKinematics+0x38c>)
 80036ea:	f7fe f87f 	bl	80017ec <isRunning>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1d8      	bne.n	80036a6 <inverseKinematics+0x2f6>
 80036f4:	e025      	b.n	8003742 <inverseKinematics+0x392>
 80036f6:	bf00      	nop
 80036f8:	24dd2f1b 	.word	0x24dd2f1b
 80036fc:	4026c106 	.word	0x4026c106
 8003700:	080143a8 	.word	0x080143a8
 8003704:	080143b0 	.word	0x080143b0
 8003708:	43340000 	.word	0x43340000
 800370c:	439d0000 	.word	0x439d0000
 8003710:	2000b004 	.word	0x2000b004
 8003714:	439d0000 	.word	0x439d0000
 8003718:	43340000 	.word	0x43340000
 800371c:	2000b0c0 	.word	0x2000b0c0
 8003720:	40490fd0 	.word	0x40490fd0
 8003724:	42b40000 	.word	0x42b40000
 8003728:	20000000 	.word	0x20000000
 800372c:	20000002 	.word	0x20000002
 8003730:	080143b8 	.word	0x080143b8
 8003734:	080143c4 	.word	0x080143c4
 8003738:	2000b068 	.word	0x2000b068
 800373c:	2000b008 	.word	0x2000b008
			if(check_time_out > 100) break;
 8003740:	bf00      	nop
	}
	motor_j1_data.isStop = true;
 8003742:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <inverseKinematics+0x3c4>)
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	motor_j2_data.isStop = true;
 800374a:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <inverseKinematics+0x3c8>)
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	enableStepper(&motor_j1_data, OFF);
 8003752:	2100      	movs	r1, #0
 8003754:	4807      	ldr	r0, [pc, #28]	; (8003774 <inverseKinematics+0x3c4>)
 8003756:	f7fe f87d 	bl	8001854 <enableStepper>
	enableStepper(&motor_j2_data, OFF);
 800375a:	2100      	movs	r1, #0
 800375c:	4806      	ldr	r0, [pc, #24]	; (8003778 <inverseKinematics+0x3c8>)
 800375e:	f7fe f879 	bl	8001854 <enableStepper>
	AS5600_Start_Update_Low();
 8003762:	f7fd fc4f 	bl	8001004 <AS5600_Start_Update_Low>
}
 8003766:	bf00      	nop
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	ecbd 8b02 	vpop	{d8}
 8003770:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003774:	2000b068 	.word	0x2000b068
 8003778:	2000b008 	.word	0x2000b008

0800377c <pickAndDropInit>:
//		printf("%d - %d  %f  %d\r\n",i,data_AS5600_M1,fAS5600, change);
		printf("%d\r\n",change);
	}

}
void pickAndDropInit(){
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);	// Start PWM for Servo
 8003780:	2108      	movs	r1, #8
 8003782:	481e      	ldr	r0, [pc, #120]	; (80037fc <pickAndDropInit+0x80>)
 8003784:	f006 fd96 	bl	800a2b4 <HAL_TIM_PWM_Start>
	SERVO_DROP;
 8003788:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <pickAndDropInit+0x84>)
 800378a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800378e:	63da      	str	r2, [r3, #60]	; 0x3c
	if(HAL_SENSOR_UP_GET==GPIO_PIN_SET){		// neu ko J3 ko phai o vi tri up
 8003790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003794:	481b      	ldr	r0, [pc, #108]	; (8003804 <pickAndDropInit+0x88>)
 8003796:	f003 fa53 	bl	8006c40 <HAL_GPIO_ReadPin>
 800379a:	4603      	mov	r3, r0
 800379c:	2b01      	cmp	r3, #1
 800379e:	d125      	bne.n	80037ec <pickAndDropInit+0x70>
		enableStepper(&motor_j3_data, ON);
 80037a0:	2101      	movs	r1, #1
 80037a2:	4819      	ldr	r0, [pc, #100]	; (8003808 <pickAndDropInit+0x8c>)
 80037a4:	f7fe f856 	bl	8001854 <enableStepper>
		moveTo(&motor_j3_data, J3_LIMIT_UP);
 80037a8:	4918      	ldr	r1, [pc, #96]	; (800380c <pickAndDropInit+0x90>)
 80037aa:	4817      	ldr	r0, [pc, #92]	; (8003808 <pickAndDropInit+0x8c>)
 80037ac:	f7fe f83a 	bl	8001824 <moveTo>
		run(&motor_j3_data);
 80037b0:	4815      	ldr	r0, [pc, #84]	; (8003808 <pickAndDropInit+0x8c>)
 80037b2:	f7fd fe7f 	bl	80014b4 <run>
		while( isRunning(&motor_j3_data) ){	// Waiting for move finish
 80037b6:	e00e      	b.n	80037d6 <pickAndDropInit+0x5a>
			if(HAL_SENSOR_UP_GET==GPIO_PIN_RESET)
 80037b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037bc:	4811      	ldr	r0, [pc, #68]	; (8003804 <pickAndDropInit+0x88>)
 80037be:	f003 fa3f 	bl	8006c40 <HAL_GPIO_ReadPin>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d103      	bne.n	80037d0 <pickAndDropInit+0x54>
				enableStepper(&motor_j3_data, OFF);
 80037c8:	2100      	movs	r1, #0
 80037ca:	480f      	ldr	r0, [pc, #60]	; (8003808 <pickAndDropInit+0x8c>)
 80037cc:	f7fe f842 	bl	8001854 <enableStepper>
			osDelay(10);
 80037d0:	200a      	movs	r0, #10
 80037d2:	f009 f826 	bl	800c822 <osDelay>
		while( isRunning(&motor_j3_data) ){	// Waiting for move finish
 80037d6:	480c      	ldr	r0, [pc, #48]	; (8003808 <pickAndDropInit+0x8c>)
 80037d8:	f7fe f808 	bl	80017ec <isRunning>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1ea      	bne.n	80037b8 <pickAndDropInit+0x3c>
		}
		enableStepper(&motor_j3_data, OFF);
 80037e2:	2100      	movs	r1, #0
 80037e4:	4808      	ldr	r0, [pc, #32]	; (8003808 <pickAndDropInit+0x8c>)
 80037e6:	f7fe f835 	bl	8001854 <enableStepper>
	}else{
		motor_j3_data._currentPos = J3_LIMIT_UP;
		motor_j3_data._targetPos = J3_LIMIT_UP;
	}
}
 80037ea:	e005      	b.n	80037f8 <pickAndDropInit+0x7c>
		motor_j3_data._currentPos = J3_LIMIT_UP;
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <pickAndDropInit+0x8c>)
 80037ee:	4a07      	ldr	r2, [pc, #28]	; (800380c <pickAndDropInit+0x90>)
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
		motor_j3_data._targetPos = J3_LIMIT_UP;
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <pickAndDropInit+0x8c>)
 80037f4:	4a05      	ldr	r2, [pc, #20]	; (800380c <pickAndDropInit+0x90>)
 80037f6:	601a      	str	r2, [r3, #0]
}
 80037f8:	bf00      	nop
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	2000b4a8 	.word	0x2000b4a8
 8003800:	40000800 	.word	0x40000800
 8003804:	40020800 	.word	0x40020800
 8003808:	2000b0d0 	.word	0x2000b0d0
 800380c:	fffff15a 	.word	0xfffff15a

08003810 <pickupPiece>:
void pickupPiece(){
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
	SERVO_DROP;
 8003814:	4b10      	ldr	r3, [pc, #64]	; (8003858 <pickupPiece+0x48>)
 8003816:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800381a:	63da      	str	r2, [r3, #60]	; 0x3c
	if(j3MoveDown()==-1){
 800381c:	f000 f86c 	bl	80038f8 <j3MoveDown>
 8003820:	4603      	mov	r3, r0
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003826:	d10a      	bne.n	800383e <pickupPiece+0x2e>
		j3MoveUp();
 8003828:	f000 f82a 	bl	8003880 <j3MoveUp>
		SERVO_EXTERN;
 800382c:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <pickupPiece+0x48>)
 800382e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003832:	63da      	str	r2, [r3, #60]	; 0x3c
		osDelay(200);
 8003834:	20c8      	movs	r0, #200	; 0xc8
 8003836:	f008 fff4 	bl	800c822 <osDelay>
		j3MoveDown();
 800383a:	f000 f85d 	bl	80038f8 <j3MoveDown>
	}
	SERVO_PICKUP;
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <pickupPiece+0x48>)
 8003840:	f240 6272 	movw	r2, #1650	; 0x672
 8003844:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(300);
 8003846:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800384a:	f008 ffea 	bl	800c822 <osDelay>
	j3MoveUp();
 800384e:	f000 f817 	bl	8003880 <j3MoveUp>
}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40000800 	.word	0x40000800

0800385c <dropPiece>:
void dropPiece(){
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
	j3MoveDown();
 8003860:	f000 f84a 	bl	80038f8 <j3MoveDown>
	SERVO_DROP;
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <dropPiece+0x20>)
 8003866:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800386a:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(300);
 800386c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003870:	f008 ffd7 	bl	800c822 <osDelay>
	j3MoveUp();
 8003874:	f000 f804 	bl	8003880 <j3MoveUp>
}
 8003878:	bf00      	nop
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40000800 	.word	0x40000800

08003880 <j3MoveUp>:
int j3MoveUp(){
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
	enableStepper(&motor_j3_data, ON);
 8003884:	2101      	movs	r1, #1
 8003886:	4819      	ldr	r0, [pc, #100]	; (80038ec <j3MoveUp+0x6c>)
 8003888:	f7fd ffe4 	bl	8001854 <enableStepper>
	moveTo(&motor_j3_data, J3_LIMIT_UP);
 800388c:	4918      	ldr	r1, [pc, #96]	; (80038f0 <j3MoveUp+0x70>)
 800388e:	4817      	ldr	r0, [pc, #92]	; (80038ec <j3MoveUp+0x6c>)
 8003890:	f7fd ffc8 	bl	8001824 <moveTo>
	run(&motor_j3_data);
 8003894:	4815      	ldr	r0, [pc, #84]	; (80038ec <j3MoveUp+0x6c>)
 8003896:	f7fd fe0d 	bl	80014b4 <run>
	osDelay(300);
 800389a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800389e:	f008 ffc0 	bl	800c822 <osDelay>
	while( isRunning(&motor_j3_data) && HAL_SENSOR_UP_GET == GPIO_PIN_SET ){	// Waiting for move finish
 80038a2:	e002      	b.n	80038aa <j3MoveUp+0x2a>
		osDelay(10);
 80038a4:	200a      	movs	r0, #10
 80038a6:	f008 ffbc 	bl	800c822 <osDelay>
	while( isRunning(&motor_j3_data) && HAL_SENSOR_UP_GET == GPIO_PIN_SET ){	// Waiting for move finish
 80038aa:	4810      	ldr	r0, [pc, #64]	; (80038ec <j3MoveUp+0x6c>)
 80038ac:	f7fd ff9e 	bl	80017ec <isRunning>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d007      	beq.n	80038c6 <j3MoveUp+0x46>
 80038b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038ba:	480e      	ldr	r0, [pc, #56]	; (80038f4 <j3MoveUp+0x74>)
 80038bc:	f003 f9c0 	bl	8006c40 <HAL_GPIO_ReadPin>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d0ee      	beq.n	80038a4 <j3MoveUp+0x24>
	}
	enableStepper(&motor_j3_data, OFF);
 80038c6:	2100      	movs	r1, #0
 80038c8:	4808      	ldr	r0, [pc, #32]	; (80038ec <j3MoveUp+0x6c>)
 80038ca:	f7fd ffc3 	bl	8001854 <enableStepper>
	if(HAL_SENSOR_UP_GET == GPIO_PIN_RESET)
 80038ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038d2:	4808      	ldr	r0, [pc, #32]	; (80038f4 <j3MoveUp+0x74>)
 80038d4:	f003 f9b4 	bl	8006c40 <HAL_GPIO_ReadPin>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <j3MoveUp+0x62>
		return 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	e001      	b.n	80038e6 <j3MoveUp+0x66>
	else
		return -1;
 80038e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	2000b0d0 	.word	0x2000b0d0
 80038f0:	fffff15a 	.word	0xfffff15a
 80038f4:	40020800 	.word	0x40020800

080038f8 <j3MoveDown>:
int j3MoveDown(){
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
	enableStepper(&motor_j3_data, ON);
 80038fc:	2101      	movs	r1, #1
 80038fe:	4819      	ldr	r0, [pc, #100]	; (8003964 <j3MoveDown+0x6c>)
 8003900:	f7fd ffa8 	bl	8001854 <enableStepper>
	moveTo(&motor_j3_data, J3_LIMIT_DOWN);
 8003904:	2100      	movs	r1, #0
 8003906:	4817      	ldr	r0, [pc, #92]	; (8003964 <j3MoveDown+0x6c>)
 8003908:	f7fd ff8c 	bl	8001824 <moveTo>
	run(&motor_j3_data);
 800390c:	4815      	ldr	r0, [pc, #84]	; (8003964 <j3MoveDown+0x6c>)
 800390e:	f7fd fdd1 	bl	80014b4 <run>
	osDelay(300);
 8003912:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003916:	f008 ff84 	bl	800c822 <osDelay>
	while( isRunning(&motor_j3_data) && HAL_SENSOR_DOWN_GET == GPIO_PIN_SET){	// Waiting for move finish
 800391a:	e002      	b.n	8003922 <j3MoveDown+0x2a>
		osDelay(10);
 800391c:	200a      	movs	r0, #10
 800391e:	f008 ff80 	bl	800c822 <osDelay>
	while( isRunning(&motor_j3_data) && HAL_SENSOR_DOWN_GET == GPIO_PIN_SET){	// Waiting for move finish
 8003922:	4810      	ldr	r0, [pc, #64]	; (8003964 <j3MoveDown+0x6c>)
 8003924:	f7fd ff62 	bl	80017ec <isRunning>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <j3MoveDown+0x46>
 800392e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003932:	480d      	ldr	r0, [pc, #52]	; (8003968 <j3MoveDown+0x70>)
 8003934:	f003 f984 	bl	8006c40 <HAL_GPIO_ReadPin>
 8003938:	4603      	mov	r3, r0
 800393a:	2b01      	cmp	r3, #1
 800393c:	d0ee      	beq.n	800391c <j3MoveDown+0x24>
	}
	enableStepper(&motor_j3_data, OFF);
 800393e:	2100      	movs	r1, #0
 8003940:	4808      	ldr	r0, [pc, #32]	; (8003964 <j3MoveDown+0x6c>)
 8003942:	f7fd ff87 	bl	8001854 <enableStepper>
	if(HAL_SENSOR_DOWN_GET == GPIO_PIN_RESET)
 8003946:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800394a:	4807      	ldr	r0, [pc, #28]	; (8003968 <j3MoveDown+0x70>)
 800394c:	f003 f978 	bl	8006c40 <HAL_GPIO_ReadPin>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <j3MoveDown+0x62>
		return 0;
 8003956:	2300      	movs	r3, #0
 8003958:	e001      	b.n	800395e <j3MoveDown+0x66>
	else
		return -1;
 800395a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800395e:	4618      	mov	r0, r3
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	2000b0d0 	.word	0x2000b0d0
 8003968:	40020800 	.word	0x40020800

0800396c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	; 0x28
 8003970:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003972:	f107 0314 	add.w	r3, r7, #20
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	605a      	str	r2, [r3, #4]
 800397c:	609a      	str	r2, [r3, #8]
 800397e:	60da      	str	r2, [r3, #12]
 8003980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <MX_GPIO_Init+0x144>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	4a49      	ldr	r2, [pc, #292]	; (8003ab0 <MX_GPIO_Init+0x144>)
 800398c:	f043 0304 	orr.w	r3, r3, #4
 8003990:	6313      	str	r3, [r2, #48]	; 0x30
 8003992:	4b47      	ldr	r3, [pc, #284]	; (8003ab0 <MX_GPIO_Init+0x144>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	4b43      	ldr	r3, [pc, #268]	; (8003ab0 <MX_GPIO_Init+0x144>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	4a42      	ldr	r2, [pc, #264]	; (8003ab0 <MX_GPIO_Init+0x144>)
 80039a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ac:	6313      	str	r3, [r2, #48]	; 0x30
 80039ae:	4b40      	ldr	r3, [pc, #256]	; (8003ab0 <MX_GPIO_Init+0x144>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	4b3c      	ldr	r3, [pc, #240]	; (8003ab0 <MX_GPIO_Init+0x144>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	4a3b      	ldr	r2, [pc, #236]	; (8003ab0 <MX_GPIO_Init+0x144>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ca:	4b39      	ldr	r3, [pc, #228]	; (8003ab0 <MX_GPIO_Init+0x144>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	607b      	str	r3, [r7, #4]
 80039da:	4b35      	ldr	r3, [pc, #212]	; (8003ab0 <MX_GPIO_Init+0x144>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	4a34      	ldr	r2, [pc, #208]	; (8003ab0 <MX_GPIO_Init+0x144>)
 80039e0:	f043 0302 	orr.w	r3, r3, #2
 80039e4:	6313      	str	r3, [r2, #48]	; 0x30
 80039e6:	4b32      	ldr	r3, [pc, #200]	; (8003ab0 <MX_GPIO_Init+0x144>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	607b      	str	r3, [r7, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, J3_DIR_Pin|J2_DIR_Pin|LED_Pin, GPIO_PIN_RESET);
 80039f2:	2200      	movs	r2, #0
 80039f4:	f248 0142 	movw	r1, #32834	; 0x8042
 80039f8:	482e      	ldr	r0, [pc, #184]	; (8003ab4 <MX_GPIO_Init+0x148>)
 80039fa:	f003 f939 	bl	8006c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(J2_EN_GPIO_Port, J2_EN_Pin, GPIO_PIN_SET);
 80039fe:	2201      	movs	r2, #1
 8003a00:	2180      	movs	r1, #128	; 0x80
 8003a02:	482c      	ldr	r0, [pc, #176]	; (8003ab4 <MX_GPIO_Init+0x148>)
 8003a04:	f003 f934 	bl	8006c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, J1_DIR_Pin|OUT_GND_Pin, GPIO_PIN_RESET);
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f248 0102 	movw	r1, #32770	; 0x8002
 8003a0e:	482a      	ldr	r0, [pc, #168]	; (8003ab8 <MX_GPIO_Init+0x14c>)
 8003a10:	f003 f92e 	bl	8006c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, J1_EN_Pin|J3_EN_Pin, GPIO_PIN_SET);
 8003a14:	2201      	movs	r2, #1
 8003a16:	2124      	movs	r1, #36	; 0x24
 8003a18:	4827      	ldr	r0, [pc, #156]	; (8003ab8 <MX_GPIO_Init+0x14c>)
 8003a1a:	f003 f929 	bl	8006c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8003a1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8003a2c:	f107 0314 	add.w	r3, r7, #20
 8003a30:	4619      	mov	r1, r3
 8003a32:	4822      	ldr	r0, [pc, #136]	; (8003abc <MX_GPIO_Init+0x150>)
 8003a34:	f002 ff80 	bl	8006938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = HAL_SENSOR_B_Pin|HAL_SENSOR_A_Pin;
 8003a38:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a46:	f107 0314 	add.w	r3, r7, #20
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	481b      	ldr	r0, [pc, #108]	; (8003abc <MX_GPIO_Init+0x150>)
 8003a4e:	f002 ff73 	bl	8006938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = J3_DIR_Pin|J2_DIR_Pin|J2_EN_Pin|LED_Pin;
 8003a52:	f248 03c2 	movw	r3, #32962	; 0x80c2
 8003a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a60:	2300      	movs	r3, #0
 8003a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4812      	ldr	r0, [pc, #72]	; (8003ab4 <MX_GPIO_Init+0x148>)
 8003a6c:	f002 ff64 	bl	8006938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = J1_DIR_Pin|J1_EN_Pin|OUT_GND_Pin|J3_EN_Pin;
 8003a70:	f248 0326 	movw	r3, #32806	; 0x8026
 8003a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a76:	2301      	movs	r3, #1
 8003a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a82:	f107 0314 	add.w	r3, r7, #20
 8003a86:	4619      	mov	r1, r3
 8003a88:	480b      	ldr	r0, [pc, #44]	; (8003ab8 <MX_GPIO_Init+0x14c>)
 8003a8a:	f002 ff55 	bl	8006938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BTN2_Pin|BATTERY_CHANGER_Pin;
 8003a8e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a9c:	f107 0314 	add.w	r3, r7, #20
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4805      	ldr	r0, [pc, #20]	; (8003ab8 <MX_GPIO_Init+0x14c>)
 8003aa4:	f002 ff48 	bl	8006938 <HAL_GPIO_Init>

}
 8003aa8:	bf00      	nop
 8003aaa:	3728      	adds	r7, #40	; 0x28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40020000 	.word	0x40020000
 8003ab8:	40020400 	.word	0x40020400
 8003abc:	40020800 	.word	0x40020800

08003ac0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_tx;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ac4:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <MX_I2C1_Init+0x50>)
 8003ac6:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <MX_I2C1_Init+0x54>)
 8003ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003aca:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <MX_I2C1_Init+0x50>)
 8003acc:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <MX_I2C1_Init+0x58>)
 8003ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <MX_I2C1_Init+0x50>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003ad6:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <MX_I2C1_Init+0x50>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <MX_I2C1_Init+0x50>)
 8003ade:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ae2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <MX_I2C1_Init+0x50>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003aea:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <MX_I2C1_Init+0x50>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003af0:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <MX_I2C1_Init+0x50>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <MX_I2C1_Init+0x50>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003afc:	4804      	ldr	r0, [pc, #16]	; (8003b10 <MX_I2C1_Init+0x50>)
 8003afe:	f003 f8eb 	bl	8006cd8 <HAL_I2C_Init>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003b08:	f000 fb72 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003b0c:	bf00      	nop
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	2000b1d8 	.word	0x2000b1d8
 8003b14:	40005400 	.word	0x40005400
 8003b18:	000186a0 	.word	0x000186a0

08003b1c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003b20:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <MX_I2C2_Init+0x50>)
 8003b22:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <MX_I2C2_Init+0x54>)
 8003b24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003b26:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <MX_I2C2_Init+0x50>)
 8003b28:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <MX_I2C2_Init+0x58>)
 8003b2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <MX_I2C2_Init+0x50>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 32;
 8003b32:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <MX_I2C2_Init+0x50>)
 8003b34:	2220      	movs	r2, #32
 8003b36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <MX_I2C2_Init+0x50>)
 8003b3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b3e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <MX_I2C2_Init+0x50>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003b46:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <MX_I2C2_Init+0x50>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b4c:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <MX_I2C2_Init+0x50>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b52:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <MX_I2C2_Init+0x50>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003b58:	4804      	ldr	r0, [pc, #16]	; (8003b6c <MX_I2C2_Init+0x50>)
 8003b5a:	f003 f8bd 	bl	8006cd8 <HAL_I2C_Init>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003b64:	f000 fb44 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003b68:	bf00      	nop
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	2000b22c 	.word	0x2000b22c
 8003b70:	40005800 	.word	0x40005800
 8003b74:	00061a80 	.word	0x00061a80

08003b78 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003b7c:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <MX_I2C3_Init+0x50>)
 8003b7e:	4a13      	ldr	r2, [pc, #76]	; (8003bcc <MX_I2C3_Init+0x54>)
 8003b80:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003b82:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <MX_I2C3_Init+0x50>)
 8003b84:	4a12      	ldr	r2, [pc, #72]	; (8003bd0 <MX_I2C3_Init+0x58>)
 8003b86:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <MX_I2C3_Init+0x50>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003b8e:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <MX_I2C3_Init+0x50>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <MX_I2C3_Init+0x50>)
 8003b96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b9a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <MX_I2C3_Init+0x50>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <MX_I2C3_Init+0x50>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ba8:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <MX_I2C3_Init+0x50>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <MX_I2C3_Init+0x50>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003bb4:	4804      	ldr	r0, [pc, #16]	; (8003bc8 <MX_I2C3_Init+0x50>)
 8003bb6:	f003 f88f 	bl	8006cd8 <HAL_I2C_Init>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003bc0:	f000 fb16 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003bc4:	bf00      	nop
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	2000b124 	.word	0x2000b124
 8003bcc:	40005c00 	.word	0x40005c00
 8003bd0:	000186a0 	.word	0x000186a0

08003bd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08e      	sub	sp, #56	; 0x38
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	609a      	str	r2, [r3, #8]
 8003be8:	60da      	str	r2, [r3, #12]
 8003bea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a90      	ldr	r2, [pc, #576]	; (8003e34 <HAL_I2C_MspInit+0x260>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d16b      	bne.n	8003cce <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	623b      	str	r3, [r7, #32]
 8003bfa:	4b8f      	ldr	r3, [pc, #572]	; (8003e38 <HAL_I2C_MspInit+0x264>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	4a8e      	ldr	r2, [pc, #568]	; (8003e38 <HAL_I2C_MspInit+0x264>)
 8003c00:	f043 0302 	orr.w	r3, r3, #2
 8003c04:	6313      	str	r3, [r2, #48]	; 0x30
 8003c06:	4b8c      	ldr	r3, [pc, #560]	; (8003e38 <HAL_I2C_MspInit+0x264>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	623b      	str	r3, [r7, #32]
 8003c10:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AS5600_1_SCL_Pin|AS5600_1_SDA_Pin;
 8003c12:	23c0      	movs	r3, #192	; 0xc0
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c16:	2312      	movs	r3, #18
 8003c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c22:	2304      	movs	r3, #4
 8003c24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4883      	ldr	r0, [pc, #524]	; (8003e3c <HAL_I2C_MspInit+0x268>)
 8003c2e:	f002 fe83 	bl	8006938 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	4b80      	ldr	r3, [pc, #512]	; (8003e38 <HAL_I2C_MspInit+0x264>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	4a7f      	ldr	r2, [pc, #508]	; (8003e38 <HAL_I2C_MspInit+0x264>)
 8003c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c40:	6413      	str	r3, [r2, #64]	; 0x40
 8003c42:	4b7d      	ldr	r3, [pc, #500]	; (8003e38 <HAL_I2C_MspInit+0x264>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003c4e:	4b7c      	ldr	r3, [pc, #496]	; (8003e40 <HAL_I2C_MspInit+0x26c>)
 8003c50:	4a7c      	ldr	r2, [pc, #496]	; (8003e44 <HAL_I2C_MspInit+0x270>)
 8003c52:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003c54:	4b7a      	ldr	r3, [pc, #488]	; (8003e40 <HAL_I2C_MspInit+0x26c>)
 8003c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c5a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c5c:	4b78      	ldr	r3, [pc, #480]	; (8003e40 <HAL_I2C_MspInit+0x26c>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c62:	4b77      	ldr	r3, [pc, #476]	; (8003e40 <HAL_I2C_MspInit+0x26c>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c68:	4b75      	ldr	r3, [pc, #468]	; (8003e40 <HAL_I2C_MspInit+0x26c>)
 8003c6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c6e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c70:	4b73      	ldr	r3, [pc, #460]	; (8003e40 <HAL_I2C_MspInit+0x26c>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c76:	4b72      	ldr	r3, [pc, #456]	; (8003e40 <HAL_I2C_MspInit+0x26c>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003c7c:	4b70      	ldr	r3, [pc, #448]	; (8003e40 <HAL_I2C_MspInit+0x26c>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c82:	4b6f      	ldr	r3, [pc, #444]	; (8003e40 <HAL_I2C_MspInit+0x26c>)
 8003c84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c88:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c8a:	4b6d      	ldr	r3, [pc, #436]	; (8003e40 <HAL_I2C_MspInit+0x26c>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003c90:	486b      	ldr	r0, [pc, #428]	; (8003e40 <HAL_I2C_MspInit+0x26c>)
 8003c92:	f001 ff5d 	bl	8005b50 <HAL_DMA_Init>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8003c9c:	f000 faa8 	bl	80041f0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a67      	ldr	r2, [pc, #412]	; (8003e40 <HAL_I2C_MspInit+0x26c>)
 8003ca4:	639a      	str	r2, [r3, #56]	; 0x38
 8003ca6:	4a66      	ldr	r2, [pc, #408]	; (8003e40 <HAL_I2C_MspInit+0x26c>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003cac:	2200      	movs	r2, #0
 8003cae:	2105      	movs	r1, #5
 8003cb0:	201f      	movs	r0, #31
 8003cb2:	f001 ff23 	bl	8005afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003cb6:	201f      	movs	r0, #31
 8003cb8:	f001 ff3c 	bl	8005b34 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 15, 0);
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	210f      	movs	r1, #15
 8003cc0:	2020      	movs	r0, #32
 8003cc2:	f001 ff1b 	bl	8005afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003cc6:	2020      	movs	r0, #32
 8003cc8:	f001 ff34 	bl	8005b34 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003ccc:	e156      	b.n	8003f7c <HAL_I2C_MspInit+0x3a8>
  else if(i2cHandle->Instance==I2C2)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a5d      	ldr	r2, [pc, #372]	; (8003e48 <HAL_I2C_MspInit+0x274>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	f040 80c1 	bne.w	8003e5c <HAL_I2C_MspInit+0x288>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	4b56      	ldr	r3, [pc, #344]	; (8003e38 <HAL_I2C_MspInit+0x264>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	4a55      	ldr	r2, [pc, #340]	; (8003e38 <HAL_I2C_MspInit+0x264>)
 8003ce4:	f043 0302 	orr.w	r3, r3, #2
 8003ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cea:	4b53      	ldr	r3, [pc, #332]	; (8003e38 <HAL_I2C_MspInit+0x264>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cfc:	2312      	movs	r3, #18
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d00:	2301      	movs	r3, #1
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d04:	2303      	movs	r3, #3
 8003d06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d08:	2304      	movs	r3, #4
 8003d0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d10:	4619      	mov	r1, r3
 8003d12:	484a      	ldr	r0, [pc, #296]	; (8003e3c <HAL_I2C_MspInit+0x268>)
 8003d14:	f002 fe10 	bl	8006938 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d18:	2308      	movs	r3, #8
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d1c:	2312      	movs	r3, #18
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d20:	2301      	movs	r3, #1
 8003d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d24:	2303      	movs	r3, #3
 8003d26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003d28:	2309      	movs	r3, #9
 8003d2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d30:	4619      	mov	r1, r3
 8003d32:	4842      	ldr	r0, [pc, #264]	; (8003e3c <HAL_I2C_MspInit+0x268>)
 8003d34:	f002 fe00 	bl	8006938 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	4b3e      	ldr	r3, [pc, #248]	; (8003e38 <HAL_I2C_MspInit+0x264>)
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	4a3d      	ldr	r2, [pc, #244]	; (8003e38 <HAL_I2C_MspInit+0x264>)
 8003d42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d46:	6413      	str	r3, [r2, #64]	; 0x40
 8003d48:	4b3b      	ldr	r3, [pc, #236]	; (8003e38 <HAL_I2C_MspInit+0x264>)
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	697b      	ldr	r3, [r7, #20]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8003d54:	4b3d      	ldr	r3, [pc, #244]	; (8003e4c <HAL_I2C_MspInit+0x278>)
 8003d56:	4a3e      	ldr	r2, [pc, #248]	; (8003e50 <HAL_I2C_MspInit+0x27c>)
 8003d58:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8003d5a:	4b3c      	ldr	r3, [pc, #240]	; (8003e4c <HAL_I2C_MspInit+0x278>)
 8003d5c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003d60:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d62:	4b3a      	ldr	r3, [pc, #232]	; (8003e4c <HAL_I2C_MspInit+0x278>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d68:	4b38      	ldr	r3, [pc, #224]	; (8003e4c <HAL_I2C_MspInit+0x278>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d6e:	4b37      	ldr	r3, [pc, #220]	; (8003e4c <HAL_I2C_MspInit+0x278>)
 8003d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d74:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d76:	4b35      	ldr	r3, [pc, #212]	; (8003e4c <HAL_I2C_MspInit+0x278>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d7c:	4b33      	ldr	r3, [pc, #204]	; (8003e4c <HAL_I2C_MspInit+0x278>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8003d82:	4b32      	ldr	r3, [pc, #200]	; (8003e4c <HAL_I2C_MspInit+0x278>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003d88:	4b30      	ldr	r3, [pc, #192]	; (8003e4c <HAL_I2C_MspInit+0x278>)
 8003d8a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003d8e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d90:	4b2e      	ldr	r3, [pc, #184]	; (8003e4c <HAL_I2C_MspInit+0x278>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8003d96:	482d      	ldr	r0, [pc, #180]	; (8003e4c <HAL_I2C_MspInit+0x278>)
 8003d98:	f001 feda 	bl	8005b50 <HAL_DMA_Init>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 8003da2:	f000 fa25 	bl	80041f0 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a28      	ldr	r2, [pc, #160]	; (8003e4c <HAL_I2C_MspInit+0x278>)
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38
 8003dac:	4a27      	ldr	r2, [pc, #156]	; (8003e4c <HAL_I2C_MspInit+0x278>)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8003db2:	4b28      	ldr	r3, [pc, #160]	; (8003e54 <HAL_I2C_MspInit+0x280>)
 8003db4:	4a28      	ldr	r2, [pc, #160]	; (8003e58 <HAL_I2C_MspInit+0x284>)
 8003db6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8003db8:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <HAL_I2C_MspInit+0x280>)
 8003dba:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003dbe:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dc0:	4b24      	ldr	r3, [pc, #144]	; (8003e54 <HAL_I2C_MspInit+0x280>)
 8003dc2:	2240      	movs	r2, #64	; 0x40
 8003dc4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dc6:	4b23      	ldr	r3, [pc, #140]	; (8003e54 <HAL_I2C_MspInit+0x280>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dcc:	4b21      	ldr	r3, [pc, #132]	; (8003e54 <HAL_I2C_MspInit+0x280>)
 8003dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dd2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dd4:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <HAL_I2C_MspInit+0x280>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dda:	4b1e      	ldr	r3, [pc, #120]	; (8003e54 <HAL_I2C_MspInit+0x280>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8003de0:	4b1c      	ldr	r3, [pc, #112]	; (8003e54 <HAL_I2C_MspInit+0x280>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003de6:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <HAL_I2C_MspInit+0x280>)
 8003de8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003dec:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dee:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <HAL_I2C_MspInit+0x280>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8003df4:	4817      	ldr	r0, [pc, #92]	; (8003e54 <HAL_I2C_MspInit+0x280>)
 8003df6:	f001 feab 	bl	8005b50 <HAL_DMA_Init>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_I2C_MspInit+0x230>
      Error_Handler();
 8003e00:	f000 f9f6 	bl	80041f0 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a13      	ldr	r2, [pc, #76]	; (8003e54 <HAL_I2C_MspInit+0x280>)
 8003e08:	635a      	str	r2, [r3, #52]	; 0x34
 8003e0a:	4a12      	ldr	r2, [pc, #72]	; (8003e54 <HAL_I2C_MspInit+0x280>)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8003e10:	2200      	movs	r2, #0
 8003e12:	2105      	movs	r1, #5
 8003e14:	2021      	movs	r0, #33	; 0x21
 8003e16:	f001 fe71 	bl	8005afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003e1a:	2021      	movs	r0, #33	; 0x21
 8003e1c:	f001 fe8a 	bl	8005b34 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 15, 0);
 8003e20:	2200      	movs	r2, #0
 8003e22:	210f      	movs	r1, #15
 8003e24:	2022      	movs	r0, #34	; 0x22
 8003e26:	f001 fe69 	bl	8005afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003e2a:	2022      	movs	r0, #34	; 0x22
 8003e2c:	f001 fe82 	bl	8005b34 <HAL_NVIC_EnableIRQ>
}
 8003e30:	e0a4      	b.n	8003f7c <HAL_I2C_MspInit+0x3a8>
 8003e32:	bf00      	nop
 8003e34:	40005400 	.word	0x40005400
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	40020400 	.word	0x40020400
 8003e40:	2000b340 	.word	0x2000b340
 8003e44:	40026010 	.word	0x40026010
 8003e48:	40005800 	.word	0x40005800
 8003e4c:	2000b280 	.word	0x2000b280
 8003e50:	40026040 	.word	0x40026040
 8003e54:	2000b2e0 	.word	0x2000b2e0
 8003e58:	400260b8 	.word	0x400260b8
  else if(i2cHandle->Instance==I2C3)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a48      	ldr	r2, [pc, #288]	; (8003f84 <HAL_I2C_MspInit+0x3b0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	f040 808a 	bne.w	8003f7c <HAL_I2C_MspInit+0x3a8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	4b46      	ldr	r3, [pc, #280]	; (8003f88 <HAL_I2C_MspInit+0x3b4>)
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	4a45      	ldr	r2, [pc, #276]	; (8003f88 <HAL_I2C_MspInit+0x3b4>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6313      	str	r3, [r2, #48]	; 0x30
 8003e78:	4b43      	ldr	r3, [pc, #268]	; (8003f88 <HAL_I2C_MspInit+0x3b4>)
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <HAL_I2C_MspInit+0x3b4>)
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	4a3e      	ldr	r2, [pc, #248]	; (8003f88 <HAL_I2C_MspInit+0x3b4>)
 8003e8e:	f043 0302 	orr.w	r3, r3, #2
 8003e92:	6313      	str	r3, [r2, #48]	; 0x30
 8003e94:	4b3c      	ldr	r3, [pc, #240]	; (8003f88 <HAL_I2C_MspInit+0x3b4>)
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AS5600_2_SCL_Pin;
 8003ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ea6:	2312      	movs	r3, #18
 8003ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AS5600_2_SCL_GPIO_Port, &GPIO_InitStruct);
 8003eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4833      	ldr	r0, [pc, #204]	; (8003f8c <HAL_I2C_MspInit+0x3b8>)
 8003ebe:	f002 fd3b 	bl	8006938 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AS5600_2_SDA_Pin;
 8003ec2:	2310      	movs	r3, #16
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ec6:	2312      	movs	r3, #18
 8003ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8003ed2:	2309      	movs	r3, #9
 8003ed4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AS5600_2_SDA_GPIO_Port, &GPIO_InitStruct);
 8003ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eda:	4619      	mov	r1, r3
 8003edc:	482c      	ldr	r0, [pc, #176]	; (8003f90 <HAL_I2C_MspInit+0x3bc>)
 8003ede:	f002 fd2b 	bl	8006938 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	4b28      	ldr	r3, [pc, #160]	; (8003f88 <HAL_I2C_MspInit+0x3b4>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	4a27      	ldr	r2, [pc, #156]	; (8003f88 <HAL_I2C_MspInit+0x3b4>)
 8003eec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ef2:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <HAL_I2C_MspInit+0x3b4>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003efa:	60bb      	str	r3, [r7, #8]
 8003efc:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 8003efe:	4b25      	ldr	r3, [pc, #148]	; (8003f94 <HAL_I2C_MspInit+0x3c0>)
 8003f00:	4a25      	ldr	r2, [pc, #148]	; (8003f98 <HAL_I2C_MspInit+0x3c4>)
 8003f02:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 8003f04:	4b23      	ldr	r3, [pc, #140]	; (8003f94 <HAL_I2C_MspInit+0x3c0>)
 8003f06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f0a:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f0c:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <HAL_I2C_MspInit+0x3c0>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f12:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <HAL_I2C_MspInit+0x3c0>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f18:	4b1e      	ldr	r3, [pc, #120]	; (8003f94 <HAL_I2C_MspInit+0x3c0>)
 8003f1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f1e:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f20:	4b1c      	ldr	r3, [pc, #112]	; (8003f94 <HAL_I2C_MspInit+0x3c0>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f26:	4b1b      	ldr	r3, [pc, #108]	; (8003f94 <HAL_I2C_MspInit+0x3c0>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8003f2c:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <HAL_I2C_MspInit+0x3c0>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f32:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <HAL_I2C_MspInit+0x3c0>)
 8003f34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f38:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f3a:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <HAL_I2C_MspInit+0x3c0>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8003f40:	4814      	ldr	r0, [pc, #80]	; (8003f94 <HAL_I2C_MspInit+0x3c0>)
 8003f42:	f001 fe05 	bl	8005b50 <HAL_DMA_Init>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_I2C_MspInit+0x37c>
      Error_Handler();
 8003f4c:	f000 f950 	bl	80041f0 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <HAL_I2C_MspInit+0x3c0>)
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
 8003f56:	4a0f      	ldr	r2, [pc, #60]	; (8003f94 <HAL_I2C_MspInit+0x3c0>)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2105      	movs	r1, #5
 8003f60:	2048      	movs	r0, #72	; 0x48
 8003f62:	f001 fdcb 	bl	8005afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003f66:	2048      	movs	r0, #72	; 0x48
 8003f68:	f001 fde4 	bl	8005b34 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 15, 0);
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	210f      	movs	r1, #15
 8003f70:	2049      	movs	r0, #73	; 0x49
 8003f72:	f001 fdc3 	bl	8005afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003f76:	2049      	movs	r0, #73	; 0x49
 8003f78:	f001 fddc 	bl	8005b34 <HAL_NVIC_EnableIRQ>
}
 8003f7c:	bf00      	nop
 8003f7e:	3738      	adds	r7, #56	; 0x38
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40005c00 	.word	0x40005c00
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	40020000 	.word	0x40020000
 8003f90:	40020400 	.word	0x40020400
 8003f94:	2000b178 	.word	0x2000b178
 8003f98:	40026028 	.word	0x40026028

08003f9c <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 1000);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fb0:	68b9      	ldr	r1, [r7, #8]
 8003fb2:	4804      	ldr	r0, [pc, #16]	; (8003fc4 <_write+0x28>)
 8003fb4:	f007 fa80 	bl	800b4b8 <HAL_UART_Transmit>
  return len;
 8003fb8:	687b      	ldr	r3, [r7, #4]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	2000b41c 	.word	0x2000b41c

08003fc8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART2){
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a0d      	ldr	r2, [pc, #52]	; (8004010 <HAL_UARTEx_RxEventCallback+0x48>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d113      	bne.n	8004006 <HAL_UARTEx_RxEventCallback+0x3e>
		memcpy(uart2_main_buf,uart2_rx_buf,UART2_BUFFER_LENGTH);
 8003fde:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <HAL_UARTEx_RxEventCallback+0x4c>)
 8003fe0:	4a0d      	ldr	r2, [pc, #52]	; (8004018 <HAL_UARTEx_RxEventCallback+0x50>)
 8003fe2:	6810      	ldr	r0, [r2, #0]
 8003fe4:	6851      	ldr	r1, [r2, #4]
 8003fe6:	6018      	str	r0, [r3, #0]
 8003fe8:	6059      	str	r1, [r3, #4]
 8003fea:	8912      	ldrh	r2, [r2, #8]
 8003fec:	811a      	strh	r2, [r3, #8]
		uart2_onData=true;
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_UARTEx_RxEventCallback+0x54>)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	701a      	strb	r2, [r3, #0]
		uart2_data_length=Size;
 8003ff4:	887b      	ldrh	r3, [r7, #2]
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	4b09      	ldr	r3, [pc, #36]	; (8004020 <HAL_UARTEx_RxEventCallback+0x58>)
 8003ffa:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart2_rx_buf, UART2_BUFFER_LENGTH);
 8003ffc:	220a      	movs	r2, #10
 8003ffe:	4906      	ldr	r1, [pc, #24]	; (8004018 <HAL_UARTEx_RxEventCallback+0x50>)
 8004000:	4808      	ldr	r0, [pc, #32]	; (8004024 <HAL_UARTEx_RxEventCallback+0x5c>)
 8004002:	f007 faeb 	bl	800b5dc <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40004400 	.word	0x40004400
 8004014:	2000b400 	.word	0x2000b400
 8004018:	2000b410 	.word	0x2000b410
 800401c:	200008c4 	.word	0x200008c4
 8004020:	2000b40c 	.word	0x2000b40c
 8004024:	2000b41c 	.word	0x2000b41c

08004028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800402c:	f000 ffc8 	bl	8004fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004030:	f000 f846 	bl	80040c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_FLASH_Unlock();
 8004034:	f002 f9fc 	bl	8006430 <HAL_FLASH_Unlock>
  if( EE_Init() != EE_OK)
 8004038:	f7fd fdb2 	bl	8001ba0 <EE_Init>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <main+0x1e>
  {
    Error_Handler();
 8004042:	f000 f8d5 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004046:	f7ff fc91 	bl	800396c <MX_GPIO_Init>
  MX_DMA_Init();
 800404a:	f7fd fd4b 	bl	8001ae4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800404e:	f000 fe47 	bl	8004ce0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8004052:	f7fd fc1f 	bl	8001894 <MX_ADC1_Init>
  MX_TIM2_Init();
 8004056:	f000 faf9 	bl	800464c <MX_TIM2_Init>
  MX_TIM3_Init();
 800405a:	f000 fb6d 	bl	8004738 <MX_TIM3_Init>
  MX_TIM4_Init();
 800405e:	f000 fbe1 	bl	8004824 <MX_TIM4_Init>
  MX_TIM10_Init();
 8004062:	f000 fcd7 	bl	8004a14 <MX_TIM10_Init>
  MX_I2C1_Init();
 8004066:	f7ff fd2b 	bl	8003ac0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800406a:	f7ff fd57 	bl	8003b1c <MX_I2C2_Init>
  MX_I2C3_Init();
 800406e:	f7ff fd83 	bl	8003b78 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8004072:	f000 fe5f 	bl	8004d34 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8004076:	f000 fc57 	bl	8004928 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */



  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart2_rx_buf, UART2_BUFFER_LENGTH);
 800407a:	220a      	movs	r2, #10
 800407c:	490c      	ldr	r1, [pc, #48]	; (80040b0 <main+0x88>)
 800407e:	480d      	ldr	r0, [pc, #52]	; (80040b4 <main+0x8c>)
 8004080:	f007 faac 	bl	800b5dc <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <main+0x90>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <main+0x90>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0208 	bic.w	r2, r2, #8
 8004092:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004094:	f7fe fad8 	bl	8002648 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8004098:	f008 fb70 	bl	800c77c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800409c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040a0:	4806      	ldr	r0, [pc, #24]	; (80040bc <main+0x94>)
 80040a2:	f002 fdfe 	bl	8006ca2 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80040a6:	2064      	movs	r0, #100	; 0x64
 80040a8:	f000 ffcc 	bl	8005044 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80040ac:	e7f6      	b.n	800409c <main+0x74>
 80040ae:	bf00      	nop
 80040b0:	2000b410 	.word	0x2000b410
 80040b4:	2000b41c 	.word	0x2000b41c
 80040b8:	2000b3a0 	.word	0x2000b3a0
 80040bc:	40020000 	.word	0x40020000

080040c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b094      	sub	sp, #80	; 0x50
 80040c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040c6:	f107 0320 	add.w	r3, r7, #32
 80040ca:	2230      	movs	r2, #48	; 0x30
 80040cc:	2100      	movs	r1, #0
 80040ce:	4618      	mov	r0, r3
 80040d0:	f00b fc48 	bl	800f964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040d4:	f107 030c 	add.w	r3, r7, #12
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	60da      	str	r2, [r3, #12]
 80040e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040e4:	2300      	movs	r3, #0
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	4b28      	ldr	r3, [pc, #160]	; (800418c <SystemClock_Config+0xcc>)
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	4a27      	ldr	r2, [pc, #156]	; (800418c <SystemClock_Config+0xcc>)
 80040ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f2:	6413      	str	r3, [r2, #64]	; 0x40
 80040f4:	4b25      	ldr	r3, [pc, #148]	; (800418c <SystemClock_Config+0xcc>)
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004100:	2300      	movs	r3, #0
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	4b22      	ldr	r3, [pc, #136]	; (8004190 <SystemClock_Config+0xd0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800410c:	4a20      	ldr	r2, [pc, #128]	; (8004190 <SystemClock_Config+0xd0>)
 800410e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <SystemClock_Config+0xd0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004120:	2301      	movs	r3, #1
 8004122:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800412a:	2302      	movs	r3, #2
 800412c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800412e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004132:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 24;
 8004134:	2318      	movs	r3, #24
 8004136:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004138:	23a8      	movs	r3, #168	; 0xa8
 800413a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800413c:	2302      	movs	r3, #2
 800413e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004140:	2304      	movs	r3, #4
 8004142:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004144:	f107 0320 	add.w	r3, r7, #32
 8004148:	4618      	mov	r0, r3
 800414a:	f005 fb2d 	bl	80097a8 <HAL_RCC_OscConfig>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004154:	f000 f84c 	bl	80041f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004158:	230f      	movs	r3, #15
 800415a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800415c:	2302      	movs	r3, #2
 800415e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004168:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800416e:	f107 030c 	add.w	r3, r7, #12
 8004172:	2102      	movs	r1, #2
 8004174:	4618      	mov	r0, r3
 8004176:	f005 fd8f 	bl	8009c98 <HAL_RCC_ClockConfig>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004180:	f000 f836 	bl	80041f0 <Error_Handler>
  }
}
 8004184:	bf00      	nop
 8004186:	3750      	adds	r7, #80	; 0x50
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40023800 	.word	0x40023800
 8004190:	40007000 	.word	0x40007000

08004194 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a0f      	ldr	r2, [pc, #60]	; (80041e0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d101      	bne.n	80041aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80041a6:	f000 ff2d 	bl	8005004 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM10){ // UPDATE AS5600
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a0d      	ldr	r2, [pc, #52]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d111      	bne.n	80041d8 <HAL_TIM_PeriodElapsedCallback+0x44>
           if(FLAG_AS5600_M1==HAL_OK){
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	f083 0301 	eor.w	r3, r3, #1
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_TIM_PeriodElapsedCallback+0x32>
          	 AS5600_M1_getPOS();
 80041c2:	f7fc fee7 	bl	8000f94 <AS5600_M1_getPOS>
           }
           if(FLAG_AS5600_M2 == HAL_OK){
 80041c6:	4b09      	ldr	r3, [pc, #36]	; (80041ec <HAL_TIM_PeriodElapsedCallback+0x58>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	f083 0301 	eor.w	r3, r3, #1
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_TIM_PeriodElapsedCallback+0x44>
          	 AS5600_M2_getPOS();
 80041d4:	f7fc fef2 	bl	8000fbc <AS5600_M2_getPOS>
           }
    }
  /* USER CODE END Callback 1 */
}
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40014800 	.word	0x40014800
 80041e4:	40014400 	.word	0x40014400
 80041e8:	2000020c 	.word	0x2000020c
 80041ec:	2000020d 	.word	0x2000020d

080041f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041f4:	b672      	cpsid	i
}
 80041f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041f8:	e7fe      	b.n	80041f8 <Error_Handler+0x8>
	...

080041fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	607b      	str	r3, [r7, #4]
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <HAL_MspInit+0x54>)
 8004208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420a:	4a11      	ldr	r2, [pc, #68]	; (8004250 <HAL_MspInit+0x54>)
 800420c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004210:	6453      	str	r3, [r2, #68]	; 0x44
 8004212:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <HAL_MspInit+0x54>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421a:	607b      	str	r3, [r7, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <HAL_MspInit+0x54>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	4a0a      	ldr	r2, [pc, #40]	; (8004250 <HAL_MspInit+0x54>)
 8004228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422c:	6413      	str	r3, [r2, #64]	; 0x40
 800422e:	4b08      	ldr	r3, [pc, #32]	; (8004250 <HAL_MspInit+0x54>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800423a:	2200      	movs	r2, #0
 800423c:	210f      	movs	r1, #15
 800423e:	f06f 0001 	mvn.w	r0, #1
 8004242:	f001 fc5b 	bl	8005afc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40023800 	.word	0x40023800

08004254 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08c      	sub	sp, #48	; 0x30
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8004264:	2200      	movs	r2, #0
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	201a      	movs	r0, #26
 800426a:	f001 fc47 	bl	8005afc <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800426e:	201a      	movs	r0, #26
 8004270:	f001 fc60 	bl	8005b34 <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	4b1e      	ldr	r3, [pc, #120]	; (80042f4 <HAL_InitTick+0xa0>)
 800427a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427c:	4a1d      	ldr	r2, [pc, #116]	; (80042f4 <HAL_InitTick+0xa0>)
 800427e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004282:	6453      	str	r3, [r2, #68]	; 0x44
 8004284:	4b1b      	ldr	r3, [pc, #108]	; (80042f4 <HAL_InitTick+0xa0>)
 8004286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004290:	f107 0210 	add.w	r2, r7, #16
 8004294:	f107 0314 	add.w	r3, r7, #20
 8004298:	4611      	mov	r1, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f005 fecc 	bl	800a038 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80042a0:	f005 feb6 	bl	800a010 <HAL_RCC_GetPCLK2Freq>
 80042a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	4a13      	ldr	r2, [pc, #76]	; (80042f8 <HAL_InitTick+0xa4>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	0c9b      	lsrs	r3, r3, #18
 80042b0:	3b01      	subs	r3, #1
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80042b4:	4b11      	ldr	r3, [pc, #68]	; (80042fc <HAL_InitTick+0xa8>)
 80042b6:	4a12      	ldr	r2, [pc, #72]	; (8004300 <HAL_InitTick+0xac>)
 80042b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80042ba:	4b10      	ldr	r3, [pc, #64]	; (80042fc <HAL_InitTick+0xa8>)
 80042bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042c0:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80042c2:	4a0e      	ldr	r2, [pc, #56]	; (80042fc <HAL_InitTick+0xa8>)
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80042c8:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <HAL_InitTick+0xa8>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_InitTick+0xa8>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 80042d4:	4809      	ldr	r0, [pc, #36]	; (80042fc <HAL_InitTick+0xa8>)
 80042d6:	f005 fee1 	bl	800a09c <HAL_TIM_Base_Init>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d104      	bne.n	80042ea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 80042e0:	4806      	ldr	r0, [pc, #24]	; (80042fc <HAL_InitTick+0xa8>)
 80042e2:	f005 ff2b 	bl	800a13c <HAL_TIM_Base_Start_IT>
 80042e6:	4603      	mov	r3, r0
 80042e8:	e000      	b.n	80042ec <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3730      	adds	r7, #48	; 0x30
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40023800 	.word	0x40023800
 80042f8:	431bde83 	.word	0x431bde83
 80042fc:	2000b460 	.word	0x2000b460
 8004300:	40014800 	.word	0x40014800

08004304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004308:	e7fe      	b.n	8004308 <NMI_Handler+0x4>

0800430a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800430e:	e7fe      	b.n	800430e <HardFault_Handler+0x4>

08004310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004314:	e7fe      	b.n	8004314 <MemManage_Handler+0x4>

08004316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004316:	b480      	push	{r7}
 8004318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800431a:	e7fe      	b.n	800431a <BusFault_Handler+0x4>

0800431c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004320:	e7fe      	b.n	8004320 <UsageFault_Handler+0x4>

08004322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004322:	b480      	push	{r7}
 8004324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004326:	bf00      	nop
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004334:	4802      	ldr	r0, [pc, #8]	; (8004340 <DMA1_Stream0_IRQHandler+0x10>)
 8004336:	f001 fda3 	bl	8005e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	2000b340 	.word	0x2000b340

08004344 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8004348:	4802      	ldr	r0, [pc, #8]	; (8004354 <DMA1_Stream1_IRQHandler+0x10>)
 800434a:	f001 fd99 	bl	8005e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	2000b178 	.word	0x2000b178

08004358 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800435c:	4802      	ldr	r0, [pc, #8]	; (8004368 <DMA1_Stream2_IRQHandler+0x10>)
 800435e:	f001 fd8f 	bl	8005e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	2000b280 	.word	0x2000b280

0800436c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004370:	4802      	ldr	r0, [pc, #8]	; (800437c <DMA1_Stream5_IRQHandler+0x10>)
 8004372:	f001 fd85 	bl	8005e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	2000b3a0 	.word	0x2000b3a0

08004380 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004384:	4802      	ldr	r0, [pc, #8]	; (8004390 <ADC_IRQHandler+0x10>)
 8004386:	f000 ff83 	bl	8005290 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	2000af38 	.word	0x2000af38

08004394 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004398:	4802      	ldr	r0, [pc, #8]	; (80043a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800439a:	f006 f939 	bl	800a610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800439e:	bf00      	nop
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	2000b4f0 	.word	0x2000b4f0

080043a8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80043ac:	4802      	ldr	r0, [pc, #8]	; (80043b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80043ae:	f006 f92f 	bl	800a610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	2000b460 	.word	0x2000b460

080043bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80043c0:	4802      	ldr	r0, [pc, #8]	; (80043cc <TIM2_IRQHandler+0x10>)
 80043c2:	f006 f925 	bl	800a610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80043c6:	bf00      	nop
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	2000b5c8 	.word	0x2000b5c8

080043d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80043d4:	4802      	ldr	r0, [pc, #8]	; (80043e0 <TIM3_IRQHandler+0x10>)
 80043d6:	f006 f91b 	bl	800a610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80043da:	bf00      	nop
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	2000b580 	.word	0x2000b580

080043e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80043e8:	4802      	ldr	r0, [pc, #8]	; (80043f4 <I2C1_EV_IRQHandler+0x10>)
 80043ea:	f003 f9f7 	bl	80077dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80043ee:	bf00      	nop
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	2000b1d8 	.word	0x2000b1d8

080043f8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80043fc:	4802      	ldr	r0, [pc, #8]	; (8004408 <I2C1_ER_IRQHandler+0x10>)
 80043fe:	f003 fb5e 	bl	8007abe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004402:	bf00      	nop
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	2000b1d8 	.word	0x2000b1d8

0800440c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004410:	4802      	ldr	r0, [pc, #8]	; (800441c <I2C2_EV_IRQHandler+0x10>)
 8004412:	f003 f9e3 	bl	80077dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004416:	bf00      	nop
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	2000b22c 	.word	0x2000b22c

08004420 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8004424:	4802      	ldr	r0, [pc, #8]	; (8004430 <I2C2_ER_IRQHandler+0x10>)
 8004426:	f003 fb4a 	bl	8007abe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800442a:	bf00      	nop
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	2000b22c 	.word	0x2000b22c

08004434 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004438:	4802      	ldr	r0, [pc, #8]	; (8004444 <USART1_IRQHandler+0x10>)
 800443a:	f007 f935 	bl	800b6a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800443e:	bf00      	nop
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	2000b670 	.word	0x2000b670

08004448 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800444c:	4802      	ldr	r0, [pc, #8]	; (8004458 <USART2_IRQHandler+0x10>)
 800444e:	f007 f92b 	bl	800b6a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004452:	bf00      	nop
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	2000b41c 	.word	0x2000b41c

0800445c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8004460:	4802      	ldr	r0, [pc, #8]	; (800446c <DMA1_Stream7_IRQHandler+0x10>)
 8004462:	f001 fd0d 	bl	8005e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	2000b2e0 	.word	0x2000b2e0

08004470 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004474:	4802      	ldr	r0, [pc, #8]	; (8004480 <TIM5_IRQHandler+0x10>)
 8004476:	f006 f8cb 	bl	800a610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800447a:	bf00      	nop
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	2000b538 	.word	0x2000b538

08004484 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004488:	4802      	ldr	r0, [pc, #8]	; (8004494 <DMA2_Stream0_IRQHandler+0x10>)
 800448a:	f001 fcf9 	bl	8005e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800448e:	bf00      	nop
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	2000af80 	.word	0x2000af80

08004498 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800449c:	4802      	ldr	r0, [pc, #8]	; (80044a8 <DMA2_Stream2_IRQHandler+0x10>)
 800449e:	f001 fcef 	bl	8005e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	2000b610 	.word	0x2000b610

080044ac <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80044b0:	4802      	ldr	r0, [pc, #8]	; (80044bc <I2C3_EV_IRQHandler+0x10>)
 80044b2:	f003 f993 	bl	80077dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80044b6:	bf00      	nop
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	2000b124 	.word	0x2000b124

080044c0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80044c4:	4802      	ldr	r0, [pc, #8]	; (80044d0 <I2C3_ER_IRQHandler+0x10>)
 80044c6:	f003 fafa 	bl	8007abe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	2000b124 	.word	0x2000b124

080044d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
	return 1;
 80044d8:	2301      	movs	r3, #1
}
 80044da:	4618      	mov	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <_kill>:

int _kill(int pid, int sig)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80044ee:	f00b fa01 	bl	800f8f4 <__errno>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2216      	movs	r2, #22
 80044f6:	601a      	str	r2, [r3, #0]
	return -1;
 80044f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <_exit>:

void _exit (int status)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800450c:	f04f 31ff 	mov.w	r1, #4294967295
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff ffe7 	bl	80044e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004516:	e7fe      	b.n	8004516 <_exit+0x12>

08004518 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	e00a      	b.n	8004540 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800452a:	f3af 8000 	nop.w
 800452e:	4601      	mov	r1, r0
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	60ba      	str	r2, [r7, #8]
 8004536:	b2ca      	uxtb	r2, r1
 8004538:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	3301      	adds	r3, #1
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	dbf0      	blt.n	800452a <_read+0x12>
	}

return len;
 8004548:	687b      	ldr	r3, [r7, #4]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
	return -1;
 800455a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800457a:	605a      	str	r2, [r3, #4]
	return 0;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <_isatty>:

int _isatty(int file)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
	return 1;
 8004592:	2301      	movs	r3, #1
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
	return 0;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
	...

080045bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045c4:	4a14      	ldr	r2, [pc, #80]	; (8004618 <_sbrk+0x5c>)
 80045c6:	4b15      	ldr	r3, [pc, #84]	; (800461c <_sbrk+0x60>)
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045d0:	4b13      	ldr	r3, [pc, #76]	; (8004620 <_sbrk+0x64>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d102      	bne.n	80045de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045d8:	4b11      	ldr	r3, [pc, #68]	; (8004620 <_sbrk+0x64>)
 80045da:	4a12      	ldr	r2, [pc, #72]	; (8004624 <_sbrk+0x68>)
 80045dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <_sbrk+0x64>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d207      	bcs.n	80045fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045ec:	f00b f982 	bl	800f8f4 <__errno>
 80045f0:	4603      	mov	r3, r0
 80045f2:	220c      	movs	r2, #12
 80045f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045f6:	f04f 33ff 	mov.w	r3, #4294967295
 80045fa:	e009      	b.n	8004610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045fc:	4b08      	ldr	r3, [pc, #32]	; (8004620 <_sbrk+0x64>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <_sbrk+0x64>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4413      	add	r3, r2
 800460a:	4a05      	ldr	r2, [pc, #20]	; (8004620 <_sbrk+0x64>)
 800460c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800460e:	68fb      	ldr	r3, [r7, #12]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20010000 	.word	0x20010000
 800461c:	00000400 	.word	0x00000400
 8004620:	200008c8 	.word	0x200008c8
 8004624:	2000b728 	.word	0x2000b728

08004628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <SystemInit+0x20>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004632:	4a05      	ldr	r2, [pc, #20]	; (8004648 <SystemInit+0x20>)
 8004634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800463c:	bf00      	nop
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	e000ed00 	.word	0xe000ed00

0800464c <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08e      	sub	sp, #56	; 0x38
 8004650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	605a      	str	r2, [r3, #4]
 800465c:	609a      	str	r2, [r3, #8]
 800465e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004660:	f107 0320 	add.w	r3, r7, #32
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800466a:	1d3b      	adds	r3, r7, #4
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	605a      	str	r2, [r3, #4]
 8004672:	609a      	str	r2, [r3, #8]
 8004674:	60da      	str	r2, [r3, #12]
 8004676:	611a      	str	r2, [r3, #16]
 8004678:	615a      	str	r2, [r3, #20]
 800467a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800467c:	4b2d      	ldr	r3, [pc, #180]	; (8004734 <MX_TIM2_Init+0xe8>)
 800467e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004682:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8004684:	4b2b      	ldr	r3, [pc, #172]	; (8004734 <MX_TIM2_Init+0xe8>)
 8004686:	2253      	movs	r2, #83	; 0x53
 8004688:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800468a:	4b2a      	ldr	r3, [pc, #168]	; (8004734 <MX_TIM2_Init+0xe8>)
 800468c:	2200      	movs	r2, #0
 800468e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8004690:	4b28      	ldr	r3, [pc, #160]	; (8004734 <MX_TIM2_Init+0xe8>)
 8004692:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004696:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004698:	4b26      	ldr	r3, [pc, #152]	; (8004734 <MX_TIM2_Init+0xe8>)
 800469a:	2200      	movs	r2, #0
 800469c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800469e:	4b25      	ldr	r3, [pc, #148]	; (8004734 <MX_TIM2_Init+0xe8>)
 80046a0:	2280      	movs	r2, #128	; 0x80
 80046a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80046a4:	4823      	ldr	r0, [pc, #140]	; (8004734 <MX_TIM2_Init+0xe8>)
 80046a6:	f005 fcf9 	bl	800a09c <HAL_TIM_Base_Init>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80046b0:	f7ff fd9e 	bl	80041f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80046ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046be:	4619      	mov	r1, r3
 80046c0:	481c      	ldr	r0, [pc, #112]	; (8004734 <MX_TIM2_Init+0xe8>)
 80046c2:	f006 f96f 	bl	800a9a4 <HAL_TIM_ConfigClockSource>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80046cc:	f7ff fd90 	bl	80041f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80046d0:	4818      	ldr	r0, [pc, #96]	; (8004734 <MX_TIM2_Init+0xe8>)
 80046d2:	f005 fd95 	bl	800a200 <HAL_TIM_PWM_Init>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80046dc:	f7ff fd88 	bl	80041f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046e0:	2300      	movs	r3, #0
 80046e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046e4:	2300      	movs	r3, #0
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80046e8:	f107 0320 	add.w	r3, r7, #32
 80046ec:	4619      	mov	r1, r3
 80046ee:	4811      	ldr	r0, [pc, #68]	; (8004734 <MX_TIM2_Init+0xe8>)
 80046f0:	f006 fdee 	bl	800b2d0 <HAL_TIMEx_MasterConfigSynchronization>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80046fa:	f7ff fd79 	bl	80041f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046fe:	2360      	movs	r3, #96	; 0x60
 8004700:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 8004702:	2302      	movs	r3, #2
 8004704:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800470e:	1d3b      	adds	r3, r7, #4
 8004710:	2200      	movs	r2, #0
 8004712:	4619      	mov	r1, r3
 8004714:	4807      	ldr	r0, [pc, #28]	; (8004734 <MX_TIM2_Init+0xe8>)
 8004716:	f006 f883 	bl	800a820 <HAL_TIM_PWM_ConfigChannel>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004720:	f7ff fd66 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004724:	4803      	ldr	r0, [pc, #12]	; (8004734 <MX_TIM2_Init+0xe8>)
 8004726:	f000 fa2f 	bl	8004b88 <HAL_TIM_MspPostInit>

}
 800472a:	bf00      	nop
 800472c:	3738      	adds	r7, #56	; 0x38
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	2000b5c8 	.word	0x2000b5c8

08004738 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08e      	sub	sp, #56	; 0x38
 800473c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800473e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	605a      	str	r2, [r3, #4]
 8004748:	609a      	str	r2, [r3, #8]
 800474a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800474c:	f107 0320 	add.w	r3, r7, #32
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004756:	1d3b      	adds	r3, r7, #4
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	605a      	str	r2, [r3, #4]
 800475e:	609a      	str	r2, [r3, #8]
 8004760:	60da      	str	r2, [r3, #12]
 8004762:	611a      	str	r2, [r3, #16]
 8004764:	615a      	str	r2, [r3, #20]
 8004766:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004768:	4b2c      	ldr	r3, [pc, #176]	; (800481c <MX_TIM3_Init+0xe4>)
 800476a:	4a2d      	ldr	r2, [pc, #180]	; (8004820 <MX_TIM3_Init+0xe8>)
 800476c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800476e:	4b2b      	ldr	r3, [pc, #172]	; (800481c <MX_TIM3_Init+0xe4>)
 8004770:	2253      	movs	r2, #83	; 0x53
 8004772:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004774:	4b29      	ldr	r3, [pc, #164]	; (800481c <MX_TIM3_Init+0xe4>)
 8004776:	2200      	movs	r2, #0
 8004778:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800477a:	4b28      	ldr	r3, [pc, #160]	; (800481c <MX_TIM3_Init+0xe4>)
 800477c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004780:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004782:	4b26      	ldr	r3, [pc, #152]	; (800481c <MX_TIM3_Init+0xe4>)
 8004784:	2200      	movs	r2, #0
 8004786:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004788:	4b24      	ldr	r3, [pc, #144]	; (800481c <MX_TIM3_Init+0xe4>)
 800478a:	2280      	movs	r2, #128	; 0x80
 800478c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800478e:	4823      	ldr	r0, [pc, #140]	; (800481c <MX_TIM3_Init+0xe4>)
 8004790:	f005 fc84 	bl	800a09c <HAL_TIM_Base_Init>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800479a:	f7ff fd29 	bl	80041f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800479e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80047a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047a8:	4619      	mov	r1, r3
 80047aa:	481c      	ldr	r0, [pc, #112]	; (800481c <MX_TIM3_Init+0xe4>)
 80047ac:	f006 f8fa 	bl	800a9a4 <HAL_TIM_ConfigClockSource>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80047b6:	f7ff fd1b 	bl	80041f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80047ba:	4818      	ldr	r0, [pc, #96]	; (800481c <MX_TIM3_Init+0xe4>)
 80047bc:	f005 fd20 	bl	800a200 <HAL_TIM_PWM_Init>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80047c6:	f7ff fd13 	bl	80041f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047ca:	2300      	movs	r3, #0
 80047cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80047d2:	f107 0320 	add.w	r3, r7, #32
 80047d6:	4619      	mov	r1, r3
 80047d8:	4810      	ldr	r0, [pc, #64]	; (800481c <MX_TIM3_Init+0xe4>)
 80047da:	f006 fd79 	bl	800b2d0 <HAL_TIMEx_MasterConfigSynchronization>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80047e4:	f7ff fd04 	bl	80041f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047e8:	2360      	movs	r3, #96	; 0x60
 80047ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 80047ec:	2302      	movs	r3, #2
 80047ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80047f8:	1d3b      	adds	r3, r7, #4
 80047fa:	2208      	movs	r2, #8
 80047fc:	4619      	mov	r1, r3
 80047fe:	4807      	ldr	r0, [pc, #28]	; (800481c <MX_TIM3_Init+0xe4>)
 8004800:	f006 f80e 	bl	800a820 <HAL_TIM_PWM_ConfigChannel>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800480a:	f7ff fcf1 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800480e:	4803      	ldr	r0, [pc, #12]	; (800481c <MX_TIM3_Init+0xe4>)
 8004810:	f000 f9ba 	bl	8004b88 <HAL_TIM_MspPostInit>

}
 8004814:	bf00      	nop
 8004816:	3738      	adds	r7, #56	; 0x38
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	2000b580 	.word	0x2000b580
 8004820:	40000400 	.word	0x40000400

08004824 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b08e      	sub	sp, #56	; 0x38
 8004828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800482a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	605a      	str	r2, [r3, #4]
 8004834:	609a      	str	r2, [r3, #8]
 8004836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004838:	f107 0320 	add.w	r3, r7, #32
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004842:	1d3b      	adds	r3, r7, #4
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	60da      	str	r2, [r3, #12]
 800484e:	611a      	str	r2, [r3, #16]
 8004850:	615a      	str	r2, [r3, #20]
 8004852:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004854:	4b32      	ldr	r3, [pc, #200]	; (8004920 <MX_TIM4_Init+0xfc>)
 8004856:	4a33      	ldr	r2, [pc, #204]	; (8004924 <MX_TIM4_Init+0x100>)
 8004858:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800485a:	4b31      	ldr	r3, [pc, #196]	; (8004920 <MX_TIM4_Init+0xfc>)
 800485c:	2253      	movs	r2, #83	; 0x53
 800485e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004860:	4b2f      	ldr	r3, [pc, #188]	; (8004920 <MX_TIM4_Init+0xfc>)
 8004862:	2200      	movs	r2, #0
 8004864:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8004866:	4b2e      	ldr	r3, [pc, #184]	; (8004920 <MX_TIM4_Init+0xfc>)
 8004868:	f644 6220 	movw	r2, #20000	; 0x4e20
 800486c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800486e:	4b2c      	ldr	r3, [pc, #176]	; (8004920 <MX_TIM4_Init+0xfc>)
 8004870:	2200      	movs	r2, #0
 8004872:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004874:	4b2a      	ldr	r3, [pc, #168]	; (8004920 <MX_TIM4_Init+0xfc>)
 8004876:	2200      	movs	r2, #0
 8004878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800487a:	4829      	ldr	r0, [pc, #164]	; (8004920 <MX_TIM4_Init+0xfc>)
 800487c:	f005 fc0e 	bl	800a09c <HAL_TIM_Base_Init>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8004886:	f7ff fcb3 	bl	80041f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800488a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800488e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004890:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004894:	4619      	mov	r1, r3
 8004896:	4822      	ldr	r0, [pc, #136]	; (8004920 <MX_TIM4_Init+0xfc>)
 8004898:	f006 f884 	bl	800a9a4 <HAL_TIM_ConfigClockSource>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80048a2:	f7ff fca5 	bl	80041f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80048a6:	481e      	ldr	r0, [pc, #120]	; (8004920 <MX_TIM4_Init+0xfc>)
 80048a8:	f005 fcaa 	bl	800a200 <HAL_TIM_PWM_Init>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80048b2:	f7ff fc9d 	bl	80041f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048b6:	2300      	movs	r3, #0
 80048b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048ba:	2300      	movs	r3, #0
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80048be:	f107 0320 	add.w	r3, r7, #32
 80048c2:	4619      	mov	r1, r3
 80048c4:	4816      	ldr	r0, [pc, #88]	; (8004920 <MX_TIM4_Init+0xfc>)
 80048c6:	f006 fd03 	bl	800b2d0 <HAL_TIMEx_MasterConfigSynchronization>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80048d0:	f7ff fc8e 	bl	80041f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048d4:	2360      	movs	r3, #96	; 0x60
 80048d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80048d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80048e6:	1d3b      	adds	r3, r7, #4
 80048e8:	2208      	movs	r2, #8
 80048ea:	4619      	mov	r1, r3
 80048ec:	480c      	ldr	r0, [pc, #48]	; (8004920 <MX_TIM4_Init+0xfc>)
 80048ee:	f005 ff97 	bl	800a820 <HAL_TIM_PWM_ConfigChannel>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80048f8:	f7ff fc7a 	bl	80041f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80048fc:	1d3b      	adds	r3, r7, #4
 80048fe:	220c      	movs	r2, #12
 8004900:	4619      	mov	r1, r3
 8004902:	4807      	ldr	r0, [pc, #28]	; (8004920 <MX_TIM4_Init+0xfc>)
 8004904:	f005 ff8c 	bl	800a820 <HAL_TIM_PWM_ConfigChannel>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800490e:	f7ff fc6f 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004912:	4803      	ldr	r0, [pc, #12]	; (8004920 <MX_TIM4_Init+0xfc>)
 8004914:	f000 f938 	bl	8004b88 <HAL_TIM_MspPostInit>

}
 8004918:	bf00      	nop
 800491a:	3738      	adds	r7, #56	; 0x38
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	2000b4a8 	.word	0x2000b4a8
 8004924:	40000800 	.word	0x40000800

08004928 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08e      	sub	sp, #56	; 0x38
 800492c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800492e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	605a      	str	r2, [r3, #4]
 8004938:	609a      	str	r2, [r3, #8]
 800493a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800493c:	f107 0320 	add.w	r3, r7, #32
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004946:	1d3b      	adds	r3, r7, #4
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	609a      	str	r2, [r3, #8]
 8004950:	60da      	str	r2, [r3, #12]
 8004952:	611a      	str	r2, [r3, #16]
 8004954:	615a      	str	r2, [r3, #20]
 8004956:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004958:	4b2c      	ldr	r3, [pc, #176]	; (8004a0c <MX_TIM5_Init+0xe4>)
 800495a:	4a2d      	ldr	r2, [pc, #180]	; (8004a10 <MX_TIM5_Init+0xe8>)
 800495c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800495e:	4b2b      	ldr	r3, [pc, #172]	; (8004a0c <MX_TIM5_Init+0xe4>)
 8004960:	2253      	movs	r2, #83	; 0x53
 8004962:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004964:	4b29      	ldr	r3, [pc, #164]	; (8004a0c <MX_TIM5_Init+0xe4>)
 8004966:	2200      	movs	r2, #0
 8004968:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 800496a:	4b28      	ldr	r3, [pc, #160]	; (8004a0c <MX_TIM5_Init+0xe4>)
 800496c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004970:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004972:	4b26      	ldr	r3, [pc, #152]	; (8004a0c <MX_TIM5_Init+0xe4>)
 8004974:	2200      	movs	r2, #0
 8004976:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004978:	4b24      	ldr	r3, [pc, #144]	; (8004a0c <MX_TIM5_Init+0xe4>)
 800497a:	2280      	movs	r2, #128	; 0x80
 800497c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800497e:	4823      	ldr	r0, [pc, #140]	; (8004a0c <MX_TIM5_Init+0xe4>)
 8004980:	f005 fb8c 	bl	800a09c <HAL_TIM_Base_Init>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800498a:	f7ff fc31 	bl	80041f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800498e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004992:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004994:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004998:	4619      	mov	r1, r3
 800499a:	481c      	ldr	r0, [pc, #112]	; (8004a0c <MX_TIM5_Init+0xe4>)
 800499c:	f006 f802 	bl	800a9a4 <HAL_TIM_ConfigClockSource>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80049a6:	f7ff fc23 	bl	80041f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80049aa:	4818      	ldr	r0, [pc, #96]	; (8004a0c <MX_TIM5_Init+0xe4>)
 80049ac:	f005 fc28 	bl	800a200 <HAL_TIM_PWM_Init>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80049b6:	f7ff fc1b 	bl	80041f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049ba:	2300      	movs	r3, #0
 80049bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049be:	2300      	movs	r3, #0
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80049c2:	f107 0320 	add.w	r3, r7, #32
 80049c6:	4619      	mov	r1, r3
 80049c8:	4810      	ldr	r0, [pc, #64]	; (8004a0c <MX_TIM5_Init+0xe4>)
 80049ca:	f006 fc81 	bl	800b2d0 <HAL_TIMEx_MasterConfigSynchronization>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80049d4:	f7ff fc0c 	bl	80041f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049d8:	2360      	movs	r3, #96	; 0x60
 80049da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 80049dc:	2302      	movs	r3, #2
 80049de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049e0:	2300      	movs	r3, #0
 80049e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049e8:	1d3b      	adds	r3, r7, #4
 80049ea:	2200      	movs	r2, #0
 80049ec:	4619      	mov	r1, r3
 80049ee:	4807      	ldr	r0, [pc, #28]	; (8004a0c <MX_TIM5_Init+0xe4>)
 80049f0:	f005 ff16 	bl	800a820 <HAL_TIM_PWM_ConfigChannel>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80049fa:	f7ff fbf9 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80049fe:	4803      	ldr	r0, [pc, #12]	; (8004a0c <MX_TIM5_Init+0xe4>)
 8004a00:	f000 f8c2 	bl	8004b88 <HAL_TIM_MspPostInit>

}
 8004a04:	bf00      	nop
 8004a06:	3738      	adds	r7, #56	; 0x38
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	2000b538 	.word	0x2000b538
 8004a10:	40000c00 	.word	0x40000c00

08004a14 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004a18:	4b0e      	ldr	r3, [pc, #56]	; (8004a54 <MX_TIM10_Init+0x40>)
 8004a1a:	4a0f      	ldr	r2, [pc, #60]	; (8004a58 <MX_TIM10_Init+0x44>)
 8004a1c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <MX_TIM10_Init+0x40>)
 8004a20:	2253      	movs	r2, #83	; 0x53
 8004a22:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <MX_TIM10_Init+0x40>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <MX_TIM10_Init+0x40>)
 8004a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a30:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a32:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <MX_TIM10_Init+0x40>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <MX_TIM10_Init+0x40>)
 8004a3a:	2280      	movs	r2, #128	; 0x80
 8004a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004a3e:	4805      	ldr	r0, [pc, #20]	; (8004a54 <MX_TIM10_Init+0x40>)
 8004a40:	f005 fb2c 	bl	800a09c <HAL_TIM_Base_Init>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8004a4a:	f7ff fbd1 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004a4e:	bf00      	nop
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000b4f0 	.word	0x2000b4f0
 8004a58:	40014400 	.word	0x40014400

08004a5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6c:	d116      	bne.n	8004a9c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61fb      	str	r3, [r7, #28]
 8004a72:	4b40      	ldr	r3, [pc, #256]	; (8004b74 <HAL_TIM_Base_MspInit+0x118>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	4a3f      	ldr	r2, [pc, #252]	; (8004b74 <HAL_TIM_Base_MspInit+0x118>)
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a7e:	4b3d      	ldr	r3, [pc, #244]	; (8004b74 <HAL_TIM_Base_MspInit+0x118>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2105      	movs	r1, #5
 8004a8e:	201c      	movs	r0, #28
 8004a90:	f001 f834 	bl	8005afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004a94:	201c      	movs	r0, #28
 8004a96:	f001 f84d 	bl	8005b34 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8004a9a:	e066      	b.n	8004b6a <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM3)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a35      	ldr	r2, [pc, #212]	; (8004b78 <HAL_TIM_Base_MspInit+0x11c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d116      	bne.n	8004ad4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	4b32      	ldr	r3, [pc, #200]	; (8004b74 <HAL_TIM_Base_MspInit+0x118>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <HAL_TIM_Base_MspInit+0x118>)
 8004ab0:	f043 0302 	orr.w	r3, r3, #2
 8004ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ab6:	4b2f      	ldr	r3, [pc, #188]	; (8004b74 <HAL_TIM_Base_MspInit+0x118>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	61bb      	str	r3, [r7, #24]
 8004ac0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2105      	movs	r1, #5
 8004ac6:	201d      	movs	r0, #29
 8004ac8:	f001 f818 	bl	8005afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004acc:	201d      	movs	r0, #29
 8004ace:	f001 f831 	bl	8005b34 <HAL_NVIC_EnableIRQ>
}
 8004ad2:	e04a      	b.n	8004b6a <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM4)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a28      	ldr	r2, [pc, #160]	; (8004b7c <HAL_TIM_Base_MspInit+0x120>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d10e      	bne.n	8004afc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <HAL_TIM_Base_MspInit+0x118>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	4a23      	ldr	r2, [pc, #140]	; (8004b74 <HAL_TIM_Base_MspInit+0x118>)
 8004ae8:	f043 0304 	orr.w	r3, r3, #4
 8004aec:	6413      	str	r3, [r2, #64]	; 0x40
 8004aee:	4b21      	ldr	r3, [pc, #132]	; (8004b74 <HAL_TIM_Base_MspInit+0x118>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	697b      	ldr	r3, [r7, #20]
}
 8004afa:	e036      	b.n	8004b6a <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM5)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a1f      	ldr	r2, [pc, #124]	; (8004b80 <HAL_TIM_Base_MspInit+0x124>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d116      	bne.n	8004b34 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <HAL_TIM_Base_MspInit+0x118>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	4a19      	ldr	r2, [pc, #100]	; (8004b74 <HAL_TIM_Base_MspInit+0x118>)
 8004b10:	f043 0308 	orr.w	r3, r3, #8
 8004b14:	6413      	str	r3, [r2, #64]	; 0x40
 8004b16:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <HAL_TIM_Base_MspInit+0x118>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8004b22:	2200      	movs	r2, #0
 8004b24:	2105      	movs	r1, #5
 8004b26:	2032      	movs	r0, #50	; 0x32
 8004b28:	f000 ffe8 	bl	8005afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004b2c:	2032      	movs	r0, #50	; 0x32
 8004b2e:	f001 f801 	bl	8005b34 <HAL_NVIC_EnableIRQ>
}
 8004b32:	e01a      	b.n	8004b6a <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM10)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a12      	ldr	r2, [pc, #72]	; (8004b84 <HAL_TIM_Base_MspInit+0x128>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d115      	bne.n	8004b6a <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <HAL_TIM_Base_MspInit+0x118>)
 8004b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b46:	4a0b      	ldr	r2, [pc, #44]	; (8004b74 <HAL_TIM_Base_MspInit+0x118>)
 8004b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b4e:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <HAL_TIM_Base_MspInit+0x118>)
 8004b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2105      	movs	r1, #5
 8004b5e:	2019      	movs	r0, #25
 8004b60:	f000 ffcc 	bl	8005afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004b64:	2019      	movs	r0, #25
 8004b66:	f000 ffe5 	bl	8005b34 <HAL_NVIC_EnableIRQ>
}
 8004b6a:	bf00      	nop
 8004b6c:	3720      	adds	r7, #32
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40023800 	.word	0x40023800
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40000c00 	.word	0x40000c00
 8004b84:	40014400 	.word	0x40014400

08004b88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08c      	sub	sp, #48	; 0x30
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b90:	f107 031c 	add.w	r3, r7, #28
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	609a      	str	r2, [r3, #8]
 8004b9c:	60da      	str	r2, [r3, #12]
 8004b9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba8:	d11e      	bne.n	8004be8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	4b46      	ldr	r3, [pc, #280]	; (8004cc8 <HAL_TIM_MspPostInit+0x140>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	4a45      	ldr	r2, [pc, #276]	; (8004cc8 <HAL_TIM_MspPostInit+0x140>)
 8004bb4:	f043 0301 	orr.w	r3, r3, #1
 8004bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bba:	4b43      	ldr	r3, [pc, #268]	; (8004cc8 <HAL_TIM_MspPostInit+0x140>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	61bb      	str	r3, [r7, #24]
 8004bc4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = J2_STEP_TIM2_CH1_Pin;
 8004bc6:	2320      	movs	r3, #32
 8004bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bca:	2302      	movs	r3, #2
 8004bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(J2_STEP_TIM2_CH1_GPIO_Port, &GPIO_InitStruct);
 8004bda:	f107 031c 	add.w	r3, r7, #28
 8004bde:	4619      	mov	r1, r3
 8004be0:	483a      	ldr	r0, [pc, #232]	; (8004ccc <HAL_TIM_MspPostInit+0x144>)
 8004be2:	f001 fea9 	bl	8006938 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8004be6:	e06b      	b.n	8004cc0 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM3)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a38      	ldr	r2, [pc, #224]	; (8004cd0 <HAL_TIM_MspPostInit+0x148>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d11e      	bne.n	8004c30 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	4b34      	ldr	r3, [pc, #208]	; (8004cc8 <HAL_TIM_MspPostInit+0x140>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	4a33      	ldr	r2, [pc, #204]	; (8004cc8 <HAL_TIM_MspPostInit+0x140>)
 8004bfc:	f043 0302 	orr.w	r3, r3, #2
 8004c00:	6313      	str	r3, [r2, #48]	; 0x30
 8004c02:	4b31      	ldr	r3, [pc, #196]	; (8004cc8 <HAL_TIM_MspPostInit+0x140>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = J1_STEP_TIM3_CH3_Pin;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c12:	2302      	movs	r3, #2
 8004c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c1e:	2302      	movs	r3, #2
 8004c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(J1_STEP_TIM3_CH3_GPIO_Port, &GPIO_InitStruct);
 8004c22:	f107 031c 	add.w	r3, r7, #28
 8004c26:	4619      	mov	r1, r3
 8004c28:	482a      	ldr	r0, [pc, #168]	; (8004cd4 <HAL_TIM_MspPostInit+0x14c>)
 8004c2a:	f001 fe85 	bl	8006938 <HAL_GPIO_Init>
}
 8004c2e:	e047      	b.n	8004cc0 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM4)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <HAL_TIM_MspPostInit+0x150>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d11f      	bne.n	8004c7a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	4b22      	ldr	r3, [pc, #136]	; (8004cc8 <HAL_TIM_MspPostInit+0x140>)
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	4a21      	ldr	r2, [pc, #132]	; (8004cc8 <HAL_TIM_MspPostInit+0x140>)
 8004c44:	f043 0302 	orr.w	r3, r3, #2
 8004c48:	6313      	str	r3, [r2, #48]	; 0x30
 8004c4a:	4b1f      	ldr	r3, [pc, #124]	; (8004cc8 <HAL_TIM_MspPostInit+0x140>)
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	613b      	str	r3, [r7, #16]
 8004c54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO1_TIM4_CH3_Pin|SERVO_J3_TIM4_CH4_Pin;
 8004c56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c64:	2300      	movs	r3, #0
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004c68:	2302      	movs	r3, #2
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c6c:	f107 031c 	add.w	r3, r7, #28
 8004c70:	4619      	mov	r1, r3
 8004c72:	4818      	ldr	r0, [pc, #96]	; (8004cd4 <HAL_TIM_MspPostInit+0x14c>)
 8004c74:	f001 fe60 	bl	8006938 <HAL_GPIO_Init>
}
 8004c78:	e022      	b.n	8004cc0 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM5)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a17      	ldr	r2, [pc, #92]	; (8004cdc <HAL_TIM_MspPostInit+0x154>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d11d      	bne.n	8004cc0 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	4b0f      	ldr	r3, [pc, #60]	; (8004cc8 <HAL_TIM_MspPostInit+0x140>)
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	4a0e      	ldr	r2, [pc, #56]	; (8004cc8 <HAL_TIM_MspPostInit+0x140>)
 8004c8e:	f043 0301 	orr.w	r3, r3, #1
 8004c92:	6313      	str	r3, [r2, #48]	; 0x30
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <HAL_TIM_MspPostInit+0x140>)
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = J3_STEP_TIM5_CH1_Pin;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cac:	2300      	movs	r3, #0
 8004cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(J3_STEP_TIM5_CH1_GPIO_Port, &GPIO_InitStruct);
 8004cb4:	f107 031c 	add.w	r3, r7, #28
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4804      	ldr	r0, [pc, #16]	; (8004ccc <HAL_TIM_MspPostInit+0x144>)
 8004cbc:	f001 fe3c 	bl	8006938 <HAL_GPIO_Init>
}
 8004cc0:	bf00      	nop
 8004cc2:	3730      	adds	r7, #48	; 0x30
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	40020000 	.word	0x40020000
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40020400 	.word	0x40020400
 8004cd8:	40000800 	.word	0x40000800
 8004cdc:	40000c00 	.word	0x40000c00

08004ce0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004ce4:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <MX_USART1_UART_Init+0x4c>)
 8004ce6:	4a12      	ldr	r2, [pc, #72]	; (8004d30 <MX_USART1_UART_Init+0x50>)
 8004ce8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004cea:	4b10      	ldr	r3, [pc, #64]	; (8004d2c <MX_USART1_UART_Init+0x4c>)
 8004cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004cf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004cf2:	4b0e      	ldr	r3, [pc, #56]	; (8004d2c <MX_USART1_UART_Init+0x4c>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004cf8:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <MX_USART1_UART_Init+0x4c>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004cfe:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <MX_USART1_UART_Init+0x4c>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d04:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <MX_USART1_UART_Init+0x4c>)
 8004d06:	220c      	movs	r2, #12
 8004d08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d0a:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <MX_USART1_UART_Init+0x4c>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <MX_USART1_UART_Init+0x4c>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d16:	4805      	ldr	r0, [pc, #20]	; (8004d2c <MX_USART1_UART_Init+0x4c>)
 8004d18:	f006 fb81 	bl	800b41e <HAL_UART_Init>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004d22:	f7ff fa65 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d26:	bf00      	nop
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	2000b670 	.word	0x2000b670
 8004d30:	40011000 	.word	0x40011000

08004d34 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d38:	4b11      	ldr	r3, [pc, #68]	; (8004d80 <MX_USART2_UART_Init+0x4c>)
 8004d3a:	4a12      	ldr	r2, [pc, #72]	; (8004d84 <MX_USART2_UART_Init+0x50>)
 8004d3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004d3e:	4b10      	ldr	r3, [pc, #64]	; (8004d80 <MX_USART2_UART_Init+0x4c>)
 8004d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d46:	4b0e      	ldr	r3, [pc, #56]	; (8004d80 <MX_USART2_UART_Init+0x4c>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <MX_USART2_UART_Init+0x4c>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d52:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <MX_USART2_UART_Init+0x4c>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d58:	4b09      	ldr	r3, [pc, #36]	; (8004d80 <MX_USART2_UART_Init+0x4c>)
 8004d5a:	220c      	movs	r2, #12
 8004d5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d5e:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <MX_USART2_UART_Init+0x4c>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <MX_USART2_UART_Init+0x4c>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d6a:	4805      	ldr	r0, [pc, #20]	; (8004d80 <MX_USART2_UART_Init+0x4c>)
 8004d6c:	f006 fb57 	bl	800b41e <HAL_UART_Init>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004d76:	f7ff fa3b 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d7a:	bf00      	nop
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	2000b41c 	.word	0x2000b41c
 8004d84:	40004400 	.word	0x40004400

08004d88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08c      	sub	sp, #48	; 0x30
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d90:	f107 031c 	add.w	r3, r7, #28
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	605a      	str	r2, [r3, #4]
 8004d9a:	609a      	str	r2, [r3, #8]
 8004d9c:	60da      	str	r2, [r3, #12]
 8004d9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a69      	ldr	r2, [pc, #420]	; (8004f4c <HAL_UART_MspInit+0x1c4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d164      	bne.n	8004e74 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004daa:	2300      	movs	r3, #0
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	4b68      	ldr	r3, [pc, #416]	; (8004f50 <HAL_UART_MspInit+0x1c8>)
 8004db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db2:	4a67      	ldr	r2, [pc, #412]	; (8004f50 <HAL_UART_MspInit+0x1c8>)
 8004db4:	f043 0310 	orr.w	r3, r3, #16
 8004db8:	6453      	str	r3, [r2, #68]	; 0x44
 8004dba:	4b65      	ldr	r3, [pc, #404]	; (8004f50 <HAL_UART_MspInit+0x1c8>)
 8004dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbe:	f003 0310 	and.w	r3, r3, #16
 8004dc2:	61bb      	str	r3, [r7, #24]
 8004dc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	4b61      	ldr	r3, [pc, #388]	; (8004f50 <HAL_UART_MspInit+0x1c8>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	4a60      	ldr	r2, [pc, #384]	; (8004f50 <HAL_UART_MspInit+0x1c8>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004dd6:	4b5e      	ldr	r3, [pc, #376]	; (8004f50 <HAL_UART_MspInit+0x1c8>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004de2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de8:	2302      	movs	r3, #2
 8004dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004df0:	2303      	movs	r3, #3
 8004df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004df4:	2307      	movs	r3, #7
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004df8:	f107 031c 	add.w	r3, r7, #28
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4855      	ldr	r0, [pc, #340]	; (8004f54 <HAL_UART_MspInit+0x1cc>)
 8004e00:	f001 fd9a 	bl	8006938 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004e04:	4b54      	ldr	r3, [pc, #336]	; (8004f58 <HAL_UART_MspInit+0x1d0>)
 8004e06:	4a55      	ldr	r2, [pc, #340]	; (8004f5c <HAL_UART_MspInit+0x1d4>)
 8004e08:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004e0a:	4b53      	ldr	r3, [pc, #332]	; (8004f58 <HAL_UART_MspInit+0x1d0>)
 8004e0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e10:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e12:	4b51      	ldr	r3, [pc, #324]	; (8004f58 <HAL_UART_MspInit+0x1d0>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e18:	4b4f      	ldr	r3, [pc, #316]	; (8004f58 <HAL_UART_MspInit+0x1d0>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e1e:	4b4e      	ldr	r3, [pc, #312]	; (8004f58 <HAL_UART_MspInit+0x1d0>)
 8004e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e24:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e26:	4b4c      	ldr	r3, [pc, #304]	; (8004f58 <HAL_UART_MspInit+0x1d0>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e2c:	4b4a      	ldr	r3, [pc, #296]	; (8004f58 <HAL_UART_MspInit+0x1d0>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004e32:	4b49      	ldr	r3, [pc, #292]	; (8004f58 <HAL_UART_MspInit+0x1d0>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004e38:	4b47      	ldr	r3, [pc, #284]	; (8004f58 <HAL_UART_MspInit+0x1d0>)
 8004e3a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004e3e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e40:	4b45      	ldr	r3, [pc, #276]	; (8004f58 <HAL_UART_MspInit+0x1d0>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004e46:	4844      	ldr	r0, [pc, #272]	; (8004f58 <HAL_UART_MspInit+0x1d0>)
 8004e48:	f000 fe82 	bl	8005b50 <HAL_DMA_Init>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004e52:	f7ff f9cd 	bl	80041f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a3f      	ldr	r2, [pc, #252]	; (8004f58 <HAL_UART_MspInit+0x1d0>)
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38
 8004e5c:	4a3e      	ldr	r2, [pc, #248]	; (8004f58 <HAL_UART_MspInit+0x1d0>)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004e62:	2200      	movs	r2, #0
 8004e64:	2105      	movs	r1, #5
 8004e66:	2025      	movs	r0, #37	; 0x25
 8004e68:	f000 fe48 	bl	8005afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004e6c:	2025      	movs	r0, #37	; 0x25
 8004e6e:	f000 fe61 	bl	8005b34 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004e72:	e067      	b.n	8004f44 <HAL_UART_MspInit+0x1bc>
  else if(uartHandle->Instance==USART2)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a39      	ldr	r2, [pc, #228]	; (8004f60 <HAL_UART_MspInit+0x1d8>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d162      	bne.n	8004f44 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e7e:	2300      	movs	r3, #0
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	4b33      	ldr	r3, [pc, #204]	; (8004f50 <HAL_UART_MspInit+0x1c8>)
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	4a32      	ldr	r2, [pc, #200]	; (8004f50 <HAL_UART_MspInit+0x1c8>)
 8004e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e8e:	4b30      	ldr	r3, [pc, #192]	; (8004f50 <HAL_UART_MspInit+0x1c8>)
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e96:	613b      	str	r3, [r7, #16]
 8004e98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	4b2c      	ldr	r3, [pc, #176]	; (8004f50 <HAL_UART_MspInit+0x1c8>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	4a2b      	ldr	r2, [pc, #172]	; (8004f50 <HAL_UART_MspInit+0x1c8>)
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eaa:	4b29      	ldr	r3, [pc, #164]	; (8004f50 <HAL_UART_MspInit+0x1c8>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004eb6:	230c      	movs	r3, #12
 8004eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eba:	2302      	movs	r3, #2
 8004ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ec6:	2307      	movs	r3, #7
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eca:	f107 031c 	add.w	r3, r7, #28
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4820      	ldr	r0, [pc, #128]	; (8004f54 <HAL_UART_MspInit+0x1cc>)
 8004ed2:	f001 fd31 	bl	8006938 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004ed6:	4b23      	ldr	r3, [pc, #140]	; (8004f64 <HAL_UART_MspInit+0x1dc>)
 8004ed8:	4a23      	ldr	r2, [pc, #140]	; (8004f68 <HAL_UART_MspInit+0x1e0>)
 8004eda:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004edc:	4b21      	ldr	r3, [pc, #132]	; (8004f64 <HAL_UART_MspInit+0x1dc>)
 8004ede:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ee2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ee4:	4b1f      	ldr	r3, [pc, #124]	; (8004f64 <HAL_UART_MspInit+0x1dc>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004eea:	4b1e      	ldr	r3, [pc, #120]	; (8004f64 <HAL_UART_MspInit+0x1dc>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ef0:	4b1c      	ldr	r3, [pc, #112]	; (8004f64 <HAL_UART_MspInit+0x1dc>)
 8004ef2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ef6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ef8:	4b1a      	ldr	r3, [pc, #104]	; (8004f64 <HAL_UART_MspInit+0x1dc>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004efe:	4b19      	ldr	r3, [pc, #100]	; (8004f64 <HAL_UART_MspInit+0x1dc>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004f04:	4b17      	ldr	r3, [pc, #92]	; (8004f64 <HAL_UART_MspInit+0x1dc>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004f0a:	4b16      	ldr	r3, [pc, #88]	; (8004f64 <HAL_UART_MspInit+0x1dc>)
 8004f0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f10:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f12:	4b14      	ldr	r3, [pc, #80]	; (8004f64 <HAL_UART_MspInit+0x1dc>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004f18:	4812      	ldr	r0, [pc, #72]	; (8004f64 <HAL_UART_MspInit+0x1dc>)
 8004f1a:	f000 fe19 	bl	8005b50 <HAL_DMA_Init>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8004f24:	f7ff f964 	bl	80041f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a0e      	ldr	r2, [pc, #56]	; (8004f64 <HAL_UART_MspInit+0x1dc>)
 8004f2c:	639a      	str	r2, [r3, #56]	; 0x38
 8004f2e:	4a0d      	ldr	r2, [pc, #52]	; (8004f64 <HAL_UART_MspInit+0x1dc>)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004f34:	2200      	movs	r2, #0
 8004f36:	2105      	movs	r1, #5
 8004f38:	2026      	movs	r0, #38	; 0x26
 8004f3a:	f000 fddf 	bl	8005afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004f3e:	2026      	movs	r0, #38	; 0x26
 8004f40:	f000 fdf8 	bl	8005b34 <HAL_NVIC_EnableIRQ>
}
 8004f44:	bf00      	nop
 8004f46:	3730      	adds	r7, #48	; 0x30
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40011000 	.word	0x40011000
 8004f50:	40023800 	.word	0x40023800
 8004f54:	40020000 	.word	0x40020000
 8004f58:	2000b610 	.word	0x2000b610
 8004f5c:	40026440 	.word	0x40026440
 8004f60:	40004400 	.word	0x40004400
 8004f64:	2000b3a0 	.word	0x2000b3a0
 8004f68:	40026088 	.word	0x40026088

08004f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f70:	480d      	ldr	r0, [pc, #52]	; (8004fa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f72:	490e      	ldr	r1, [pc, #56]	; (8004fac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f74:	4a0e      	ldr	r2, [pc, #56]	; (8004fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f78:	e002      	b.n	8004f80 <LoopCopyDataInit>

08004f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f7e:	3304      	adds	r3, #4

08004f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f84:	d3f9      	bcc.n	8004f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f86:	4a0b      	ldr	r2, [pc, #44]	; (8004fb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004f88:	4c0b      	ldr	r4, [pc, #44]	; (8004fb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f8c:	e001      	b.n	8004f92 <LoopFillZerobss>

08004f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f90:	3204      	adds	r2, #4

08004f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f94:	d3fb      	bcc.n	8004f8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004f96:	f7ff fb47 	bl	8004628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f9a:	f00a fcb1 	bl	800f900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f9e:	f7ff f843 	bl	8004028 <main>
  bx  lr    
 8004fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004fa4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fac:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004fb0:	08014b70 	.word	0x08014b70
  ldr r2, =_sbss
 8004fb4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004fb8:	2000b728 	.word	0x2000b728

08004fbc <DMA1_Stream3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fbc:	e7fe      	b.n	8004fbc <DMA1_Stream3_IRQHandler>
	...

08004fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fc4:	4b0e      	ldr	r3, [pc, #56]	; (8005000 <HAL_Init+0x40>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a0d      	ldr	r2, [pc, #52]	; (8005000 <HAL_Init+0x40>)
 8004fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <HAL_Init+0x40>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a0a      	ldr	r2, [pc, #40]	; (8005000 <HAL_Init+0x40>)
 8004fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fdc:	4b08      	ldr	r3, [pc, #32]	; (8005000 <HAL_Init+0x40>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a07      	ldr	r2, [pc, #28]	; (8005000 <HAL_Init+0x40>)
 8004fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fe8:	2003      	movs	r0, #3
 8004fea:	f000 fd7c 	bl	8005ae6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fee:	2000      	movs	r0, #0
 8004ff0:	f7ff f930 	bl	8004254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ff4:	f7ff f902 	bl	80041fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40023c00 	.word	0x40023c00

08005004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005008:	4b06      	ldr	r3, [pc, #24]	; (8005024 <HAL_IncTick+0x20>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	4b06      	ldr	r3, [pc, #24]	; (8005028 <HAL_IncTick+0x24>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4413      	add	r3, r2
 8005014:	4a04      	ldr	r2, [pc, #16]	; (8005028 <HAL_IncTick+0x24>)
 8005016:	6013      	str	r3, [r2, #0]
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	20000014 	.word	0x20000014
 8005028:	2000b6b4 	.word	0x2000b6b4

0800502c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  return uwTick;
 8005030:	4b03      	ldr	r3, [pc, #12]	; (8005040 <HAL_GetTick+0x14>)
 8005032:	681b      	ldr	r3, [r3, #0]
}
 8005034:	4618      	mov	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	2000b6b4 	.word	0x2000b6b4

08005044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800504c:	f7ff ffee 	bl	800502c <HAL_GetTick>
 8005050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505c:	d005      	beq.n	800506a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800505e:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <HAL_Delay+0x44>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800506a:	bf00      	nop
 800506c:	f7ff ffde 	bl	800502c <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	429a      	cmp	r2, r3
 800507a:	d8f7      	bhi.n	800506c <HAL_Delay+0x28>
  {
  }
}
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20000014 	.word	0x20000014

0800508c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005094:	2300      	movs	r3, #0
 8005096:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e033      	b.n	800510a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d109      	bne.n	80050be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fc fc46 	bl	800193c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d118      	bne.n	80050fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80050d2:	f023 0302 	bic.w	r3, r3, #2
 80050d6:	f043 0202 	orr.w	r2, r3, #2
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fb4e 	bl	8005780 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f023 0303 	bic.w	r3, r3, #3
 80050f2:	f043 0201 	orr.w	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40
 80050fa:	e001      	b.n	8005100 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_ADC_Start_IT+0x1a>
 800512a:	2302      	movs	r3, #2
 800512c:	e0a1      	b.n	8005272 <HAL_ADC_Start_IT+0x15e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b01      	cmp	r3, #1
 8005142:	d018      	beq.n	8005176 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005154:	4b4a      	ldr	r3, [pc, #296]	; (8005280 <HAL_ADC_Start_IT+0x16c>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a4a      	ldr	r2, [pc, #296]	; (8005284 <HAL_ADC_Start_IT+0x170>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	0c9a      	lsrs	r2, r3, #18
 8005160:	4613      	mov	r3, r2
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	4413      	add	r3, r2
 8005166:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005168:	e002      	b.n	8005170 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	3b01      	subs	r3, #1
 800516e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f9      	bne.n	800516a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b01      	cmp	r3, #1
 8005182:	d169      	bne.n	8005258 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005188:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d007      	beq.n	80051b6 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c2:	d106      	bne.n	80051d2 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c8:	f023 0206 	bic.w	r2, r3, #6
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	645a      	str	r2, [r3, #68]	; 0x44
 80051d0:	e002      	b.n	80051d8 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051e0:	4b29      	ldr	r3, [pc, #164]	; (8005288 <HAL_ADC_Start_IT+0x174>)
 80051e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80051ec:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051fc:	f043 0320 	orr.w	r3, r3, #32
 8005200:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f003 031f 	and.w	r3, r3, #31
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10f      	bne.n	800522e <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d129      	bne.n	8005270 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800522a:	609a      	str	r2, [r3, #8]
 800522c:	e020      	b.n	8005270 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a16      	ldr	r2, [pc, #88]	; (800528c <HAL_ADC_Start_IT+0x178>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d11b      	bne.n	8005270 <HAL_ADC_Start_IT+0x15c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d114      	bne.n	8005270 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005254:	609a      	str	r2, [r3, #8]
 8005256:	e00b      	b.n	8005270 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	f043 0210 	orr.w	r2, r3, #16
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005268:	f043 0201 	orr.w	r2, r3, #1
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	2000000c 	.word	0x2000000c
 8005284:	431bde83 	.word	0x431bde83
 8005288:	40012300 	.word	0x40012300
 800528c:	40012000 	.word	0x40012000

08005290 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	2300      	movs	r3, #0
 800529e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	bf0c      	ite	eq
 80052ae:	2301      	moveq	r3, #1
 80052b0:	2300      	movne	r3, #0
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d049      	beq.n	8005366 <HAL_ADC_IRQHandler+0xd6>
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d046      	beq.n	8005366 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	f003 0310 	and.w	r3, r3, #16
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d105      	bne.n	80052f0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d12b      	bne.n	8005356 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005302:	2b00      	cmp	r3, #0
 8005304:	d127      	bne.n	8005356 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005310:	2b00      	cmp	r3, #0
 8005312:	d006      	beq.n	8005322 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800531e:	2b00      	cmp	r3, #0
 8005320:	d119      	bne.n	8005356 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0220 	bic.w	r2, r2, #32
 8005330:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d105      	bne.n	8005356 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	f043 0201 	orr.w	r2, r3, #1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fc fb6e 	bl	8001a38 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0212 	mvn.w	r2, #18
 8005364:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b04      	cmp	r3, #4
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005386:	2b80      	cmp	r3, #128	; 0x80
 8005388:	bf0c      	ite	eq
 800538a:	2301      	moveq	r3, #1
 800538c:	2300      	movne	r3, #0
 800538e:	b2db      	uxtb	r3, r3
 8005390:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d057      	beq.n	8005448 <HAL_ADC_IRQHandler+0x1b8>
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d054      	beq.n	8005448 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	f003 0310 	and.w	r3, r3, #16
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d105      	bne.n	80053b6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d139      	bne.n	8005438 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d006      	beq.n	80053e0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d12b      	bne.n	8005438 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d124      	bne.n	8005438 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d11d      	bne.n	8005438 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005400:	2b00      	cmp	r3, #0
 8005402:	d119      	bne.n	8005438 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005412:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005428:	2b00      	cmp	r3, #0
 800542a:	d105      	bne.n	8005438 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	f043 0201 	orr.w	r2, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fa9d 	bl	8005978 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f06f 020c 	mvn.w	r2, #12
 8005446:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b01      	cmp	r3, #1
 8005454:	bf0c      	ite	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	2300      	movne	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d017      	beq.n	80054aa <HAL_ADC_IRQHandler+0x21a>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d014      	beq.n	80054aa <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b01      	cmp	r3, #1
 800548c:	d10d      	bne.n	80054aa <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f839 	bl	8005512 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0201 	mvn.w	r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	bf0c      	ite	eq
 80054b8:	2301      	moveq	r3, #1
 80054ba:	2300      	movne	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054ce:	bf0c      	ite	eq
 80054d0:	2301      	moveq	r3, #1
 80054d2:	2300      	movne	r3, #0
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d015      	beq.n	800550a <HAL_ADC_IRQHandler+0x27a>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d012      	beq.n	800550a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e8:	f043 0202 	orr.w	r2, r3, #2
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0220 	mvn.w	r2, #32
 80054f8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f813 	bl	8005526 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0220 	mvn.w	r2, #32
 8005508:	601a      	str	r2, [r3, #0]
  }
}
 800550a:	bf00      	nop
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
	...

0800553c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_ADC_ConfigChannel+0x1c>
 8005554:	2302      	movs	r3, #2
 8005556:	e105      	b.n	8005764 <HAL_ADC_ConfigChannel+0x228>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b09      	cmp	r3, #9
 8005566:	d925      	bls.n	80055b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68d9      	ldr	r1, [r3, #12]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	b29b      	uxth	r3, r3
 8005574:	461a      	mov	r2, r3
 8005576:	4613      	mov	r3, r2
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	4413      	add	r3, r2
 800557c:	3b1e      	subs	r3, #30
 800557e:	2207      	movs	r2, #7
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	43da      	mvns	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	400a      	ands	r2, r1
 800558c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68d9      	ldr	r1, [r3, #12]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	4618      	mov	r0, r3
 80055a0:	4603      	mov	r3, r0
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	4403      	add	r3, r0
 80055a6:	3b1e      	subs	r3, #30
 80055a8:	409a      	lsls	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	60da      	str	r2, [r3, #12]
 80055b2:	e022      	b.n	80055fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6919      	ldr	r1, [r3, #16]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	461a      	mov	r2, r3
 80055c2:	4613      	mov	r3, r2
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	4413      	add	r3, r2
 80055c8:	2207      	movs	r2, #7
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	43da      	mvns	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	400a      	ands	r2, r1
 80055d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6919      	ldr	r1, [r3, #16]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	4618      	mov	r0, r3
 80055ea:	4603      	mov	r3, r0
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	4403      	add	r3, r0
 80055f0:	409a      	lsls	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b06      	cmp	r3, #6
 8005600:	d824      	bhi.n	800564c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	3b05      	subs	r3, #5
 8005614:	221f      	movs	r2, #31
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	43da      	mvns	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	400a      	ands	r2, r1
 8005622:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	b29b      	uxth	r3, r3
 8005630:	4618      	mov	r0, r3
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	3b05      	subs	r3, #5
 800563e:	fa00 f203 	lsl.w	r2, r0, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	635a      	str	r2, [r3, #52]	; 0x34
 800564a:	e04c      	b.n	80056e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2b0c      	cmp	r3, #12
 8005652:	d824      	bhi.n	800569e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	3b23      	subs	r3, #35	; 0x23
 8005666:	221f      	movs	r2, #31
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	43da      	mvns	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	400a      	ands	r2, r1
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	4618      	mov	r0, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	4613      	mov	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	3b23      	subs	r3, #35	; 0x23
 8005690:	fa00 f203 	lsl.w	r2, r0, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
 800569c:	e023      	b.n	80056e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	3b41      	subs	r3, #65	; 0x41
 80056b0:	221f      	movs	r2, #31
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	43da      	mvns	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	400a      	ands	r2, r1
 80056be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	4618      	mov	r0, r3
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	3b41      	subs	r3, #65	; 0x41
 80056da:	fa00 f203 	lsl.w	r2, r0, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056e6:	4b22      	ldr	r3, [pc, #136]	; (8005770 <HAL_ADC_ConfigChannel+0x234>)
 80056e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a21      	ldr	r2, [pc, #132]	; (8005774 <HAL_ADC_ConfigChannel+0x238>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d109      	bne.n	8005708 <HAL_ADC_ConfigChannel+0x1cc>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b12      	cmp	r3, #18
 80056fa:	d105      	bne.n	8005708 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a19      	ldr	r2, [pc, #100]	; (8005774 <HAL_ADC_ConfigChannel+0x238>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d123      	bne.n	800575a <HAL_ADC_ConfigChannel+0x21e>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b10      	cmp	r3, #16
 8005718:	d003      	beq.n	8005722 <HAL_ADC_ConfigChannel+0x1e6>
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b11      	cmp	r3, #17
 8005720:	d11b      	bne.n	800575a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b10      	cmp	r3, #16
 8005734:	d111      	bne.n	800575a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005736:	4b10      	ldr	r3, [pc, #64]	; (8005778 <HAL_ADC_ConfigChannel+0x23c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a10      	ldr	r2, [pc, #64]	; (800577c <HAL_ADC_ConfigChannel+0x240>)
 800573c:	fba2 2303 	umull	r2, r3, r2, r3
 8005740:	0c9a      	lsrs	r2, r3, #18
 8005742:	4613      	mov	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800574c:	e002      	b.n	8005754 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	3b01      	subs	r3, #1
 8005752:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f9      	bne.n	800574e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	40012300 	.word	0x40012300
 8005774:	40012000 	.word	0x40012000
 8005778:	2000000c 	.word	0x2000000c
 800577c:	431bde83 	.word	0x431bde83

08005780 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005788:	4b79      	ldr	r3, [pc, #484]	; (8005970 <ADC_Init+0x1f0>)
 800578a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	431a      	orrs	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6859      	ldr	r1, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	021a      	lsls	r2, r3, #8
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80057d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6859      	ldr	r1, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6899      	ldr	r1, [r3, #8]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005812:	4a58      	ldr	r2, [pc, #352]	; (8005974 <ADC_Init+0x1f4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d022      	beq.n	800585e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005826:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6899      	ldr	r1, [r3, #8]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005848:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6899      	ldr	r1, [r3, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	609a      	str	r2, [r3, #8]
 800585c:	e00f      	b.n	800587e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800586c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800587c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0202 	bic.w	r2, r2, #2
 800588c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6899      	ldr	r1, [r3, #8]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	7e1b      	ldrb	r3, [r3, #24]
 8005898:	005a      	lsls	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01b      	beq.n	80058e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80058ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6859      	ldr	r1, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	3b01      	subs	r3, #1
 80058d8:	035a      	lsls	r2, r3, #13
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	605a      	str	r2, [r3, #4]
 80058e2:	e007      	b.n	80058f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005902:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	3b01      	subs	r3, #1
 8005910:	051a      	lsls	r2, r3, #20
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005928:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6899      	ldr	r1, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005936:	025a      	lsls	r2, r3, #9
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800594e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6899      	ldr	r1, [r3, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	029a      	lsls	r2, r3, #10
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	609a      	str	r2, [r3, #8]
}
 8005964:	bf00      	nop
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	40012300 	.word	0x40012300
 8005974:	0f000001 	.word	0x0f000001

08005978 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800599c:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <__NVIC_SetPriorityGrouping+0x44>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059a8:	4013      	ands	r3, r2
 80059aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059be:	4a04      	ldr	r2, [pc, #16]	; (80059d0 <__NVIC_SetPriorityGrouping+0x44>)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	60d3      	str	r3, [r2, #12]
}
 80059c4:	bf00      	nop
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	e000ed00 	.word	0xe000ed00

080059d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059d8:	4b04      	ldr	r3, [pc, #16]	; (80059ec <__NVIC_GetPriorityGrouping+0x18>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	0a1b      	lsrs	r3, r3, #8
 80059de:	f003 0307 	and.w	r3, r3, #7
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	e000ed00 	.word	0xe000ed00

080059f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	db0b      	blt.n	8005a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	f003 021f 	and.w	r2, r3, #31
 8005a08:	4907      	ldr	r1, [pc, #28]	; (8005a28 <__NVIC_EnableIRQ+0x38>)
 8005a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a0e:	095b      	lsrs	r3, r3, #5
 8005a10:	2001      	movs	r0, #1
 8005a12:	fa00 f202 	lsl.w	r2, r0, r2
 8005a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	e000e100 	.word	0xe000e100

08005a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	6039      	str	r1, [r7, #0]
 8005a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	db0a      	blt.n	8005a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	490c      	ldr	r1, [pc, #48]	; (8005a78 <__NVIC_SetPriority+0x4c>)
 8005a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a4a:	0112      	lsls	r2, r2, #4
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	440b      	add	r3, r1
 8005a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a54:	e00a      	b.n	8005a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	4908      	ldr	r1, [pc, #32]	; (8005a7c <__NVIC_SetPriority+0x50>)
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	3b04      	subs	r3, #4
 8005a64:	0112      	lsls	r2, r2, #4
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	440b      	add	r3, r1
 8005a6a:	761a      	strb	r2, [r3, #24]
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	e000e100 	.word	0xe000e100
 8005a7c:	e000ed00 	.word	0xe000ed00

08005a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b089      	sub	sp, #36	; 0x24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	f1c3 0307 	rsb	r3, r3, #7
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	bf28      	it	cs
 8005a9e:	2304      	movcs	r3, #4
 8005aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	2b06      	cmp	r3, #6
 8005aa8:	d902      	bls.n	8005ab0 <NVIC_EncodePriority+0x30>
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	3b03      	subs	r3, #3
 8005aae:	e000      	b.n	8005ab2 <NVIC_EncodePriority+0x32>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	fa02 f303 	lsl.w	r3, r2, r3
 8005abe:	43da      	mvns	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	401a      	ands	r2, r3
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad2:	43d9      	mvns	r1, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ad8:	4313      	orrs	r3, r2
         );
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3724      	adds	r7, #36	; 0x24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b082      	sub	sp, #8
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff ff4c 	bl	800598c <__NVIC_SetPriorityGrouping>
}
 8005af4:	bf00      	nop
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b0e:	f7ff ff61 	bl	80059d4 <__NVIC_GetPriorityGrouping>
 8005b12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	6978      	ldr	r0, [r7, #20]
 8005b1a:	f7ff ffb1 	bl	8005a80 <NVIC_EncodePriority>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b24:	4611      	mov	r1, r2
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff ff80 	bl	8005a2c <__NVIC_SetPriority>
}
 8005b2c:	bf00      	nop
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7ff ff54 	bl	80059f0 <__NVIC_EnableIRQ>
}
 8005b48:	bf00      	nop
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b5c:	f7ff fa66 	bl	800502c <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e099      	b.n	8005ca0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0201 	bic.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b8c:	e00f      	b.n	8005bae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b8e:	f7ff fa4d 	bl	800502c <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b05      	cmp	r3, #5
 8005b9a:	d908      	bls.n	8005bae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2203      	movs	r2, #3
 8005ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e078      	b.n	8005ca0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e8      	bne.n	8005b8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4b38      	ldr	r3, [pc, #224]	; (8005ca8 <HAL_DMA_Init+0x158>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d107      	bne.n	8005c18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c10:	4313      	orrs	r3, r2
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f023 0307 	bic.w	r3, r3, #7
 8005c2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d117      	bne.n	8005c72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00e      	beq.n	8005c72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fb1b 	bl	8006290 <DMA_CheckFifoParam>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2240      	movs	r2, #64	; 0x40
 8005c64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e016      	b.n	8005ca0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fad2 	bl	8006224 <DMA_CalcBaseAndBitshift>
 8005c80:	4603      	mov	r3, r0
 8005c82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c88:	223f      	movs	r2, #63	; 0x3f
 8005c8a:	409a      	lsls	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	f010803f 	.word	0xf010803f

08005cac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_DMA_Start_IT+0x26>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e040      	b.n	8005d54 <HAL_DMA_Start_IT+0xa8>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d12f      	bne.n	8005d46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 fa64 	bl	80061c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d04:	223f      	movs	r2, #63	; 0x3f
 8005d06:	409a      	lsls	r2, r3
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0216 	orr.w	r2, r2, #22
 8005d1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d007      	beq.n	8005d34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0208 	orr.w	r2, r2, #8
 8005d32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	e005      	b.n	8005d52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d6a:	f7ff f95f 	bl	800502c <HAL_GetTick>
 8005d6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d008      	beq.n	8005d8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2280      	movs	r2, #128	; 0x80
 8005d80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e052      	b.n	8005e34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0216 	bic.w	r2, r2, #22
 8005d9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <HAL_DMA_Abort+0x62>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 0208 	bic.w	r2, r2, #8
 8005dcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0201 	bic.w	r2, r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dde:	e013      	b.n	8005e08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005de0:	f7ff f924 	bl	800502c <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b05      	cmp	r3, #5
 8005dec:	d90c      	bls.n	8005e08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2220      	movs	r2, #32
 8005df2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2203      	movs	r2, #3
 8005df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e015      	b.n	8005e34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1e4      	bne.n	8005de0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1a:	223f      	movs	r2, #63	; 0x3f
 8005e1c:	409a      	lsls	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d004      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2280      	movs	r2, #128	; 0x80
 8005e54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e00c      	b.n	8005e74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2205      	movs	r2, #5
 8005e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0201 	bic.w	r2, r2, #1
 8005e70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e8c:	4b92      	ldr	r3, [pc, #584]	; (80060d8 <HAL_DMA_IRQHandler+0x258>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a92      	ldr	r2, [pc, #584]	; (80060dc <HAL_DMA_IRQHandler+0x25c>)
 8005e92:	fba2 2303 	umull	r2, r3, r2, r3
 8005e96:	0a9b      	lsrs	r3, r3, #10
 8005e98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eaa:	2208      	movs	r2, #8
 8005eac:	409a      	lsls	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d01a      	beq.n	8005eec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d013      	beq.n	8005eec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0204 	bic.w	r2, r2, #4
 8005ed2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed8:	2208      	movs	r2, #8
 8005eda:	409a      	lsls	r2, r3
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee4:	f043 0201 	orr.w	r2, r3, #1
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	409a      	lsls	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d012      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0e:	2201      	movs	r2, #1
 8005f10:	409a      	lsls	r2, r3
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1a:	f043 0202 	orr.w	r2, r3, #2
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f26:	2204      	movs	r2, #4
 8005f28:	409a      	lsls	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d012      	beq.n	8005f58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00b      	beq.n	8005f58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f44:	2204      	movs	r2, #4
 8005f46:	409a      	lsls	r2, r3
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f50:	f043 0204 	orr.w	r2, r3, #4
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5c:	2210      	movs	r2, #16
 8005f5e:	409a      	lsls	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4013      	ands	r3, r2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d043      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d03c      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f7a:	2210      	movs	r2, #16
 8005f7c:	409a      	lsls	r2, r3
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d018      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d108      	bne.n	8005fb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d024      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	4798      	blx	r3
 8005fae:	e01f      	b.n	8005ff0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01b      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	4798      	blx	r3
 8005fc0:	e016      	b.n	8005ff0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d107      	bne.n	8005fe0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 0208 	bic.w	r2, r2, #8
 8005fde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	409a      	lsls	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 808e 	beq.w	800611e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 8086 	beq.w	800611e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006016:	2220      	movs	r2, #32
 8006018:	409a      	lsls	r2, r3
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b05      	cmp	r3, #5
 8006028:	d136      	bne.n	8006098 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0216 	bic.w	r2, r2, #22
 8006038:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006048:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d103      	bne.n	800605a <HAL_DMA_IRQHandler+0x1da>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006056:	2b00      	cmp	r3, #0
 8006058:	d007      	beq.n	800606a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0208 	bic.w	r2, r2, #8
 8006068:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606e:	223f      	movs	r2, #63	; 0x3f
 8006070:	409a      	lsls	r2, r3
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608a:	2b00      	cmp	r3, #0
 800608c:	d07d      	beq.n	800618a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4798      	blx	r3
        }
        return;
 8006096:	e078      	b.n	800618a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01c      	beq.n	80060e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d108      	bne.n	80060c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d030      	beq.n	800611e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	4798      	blx	r3
 80060c4:	e02b      	b.n	800611e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d027      	beq.n	800611e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	4798      	blx	r3
 80060d6:	e022      	b.n	800611e <HAL_DMA_IRQHandler+0x29e>
 80060d8:	2000000c 	.word	0x2000000c
 80060dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10f      	bne.n	800610e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0210 	bic.w	r2, r2, #16
 80060fc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006122:	2b00      	cmp	r3, #0
 8006124:	d032      	beq.n	800618c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d022      	beq.n	8006178 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2205      	movs	r2, #5
 8006136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0201 	bic.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	3301      	adds	r3, #1
 800614e:	60bb      	str	r3, [r7, #8]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	429a      	cmp	r2, r3
 8006154:	d307      	bcc.n	8006166 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1f2      	bne.n	800614a <HAL_DMA_IRQHandler+0x2ca>
 8006164:	e000      	b.n	8006168 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006166:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800617c:	2b00      	cmp	r3, #0
 800617e:	d005      	beq.n	800618c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
 8006188:	e000      	b.n	800618c <HAL_DMA_IRQHandler+0x30c>
        return;
 800618a:	bf00      	nop
    }
  }
}
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop

08006194 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061a2:	b2db      	uxtb	r3, r3
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80061bc:	4618      	mov	r0, r3
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	2b40      	cmp	r3, #64	; 0x40
 80061f4:	d108      	bne.n	8006208 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006206:	e007      	b.n	8006218 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	60da      	str	r2, [r3, #12]
}
 8006218:	bf00      	nop
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	3b10      	subs	r3, #16
 8006234:	4a14      	ldr	r2, [pc, #80]	; (8006288 <DMA_CalcBaseAndBitshift+0x64>)
 8006236:	fba2 2303 	umull	r2, r3, r2, r3
 800623a:	091b      	lsrs	r3, r3, #4
 800623c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800623e:	4a13      	ldr	r2, [pc, #76]	; (800628c <DMA_CalcBaseAndBitshift+0x68>)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4413      	add	r3, r2
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b03      	cmp	r3, #3
 8006250:	d909      	bls.n	8006266 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800625a:	f023 0303 	bic.w	r3, r3, #3
 800625e:	1d1a      	adds	r2, r3, #4
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	659a      	str	r2, [r3, #88]	; 0x58
 8006264:	e007      	b.n	8006276 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800626e:	f023 0303 	bic.w	r3, r3, #3
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	aaaaaaab 	.word	0xaaaaaaab
 800628c:	08014558 	.word	0x08014558

08006290 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d11f      	bne.n	80062ea <DMA_CheckFifoParam+0x5a>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d856      	bhi.n	800635e <DMA_CheckFifoParam+0xce>
 80062b0:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <DMA_CheckFifoParam+0x28>)
 80062b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b6:	bf00      	nop
 80062b8:	080062c9 	.word	0x080062c9
 80062bc:	080062db 	.word	0x080062db
 80062c0:	080062c9 	.word	0x080062c9
 80062c4:	0800635f 	.word	0x0800635f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d046      	beq.n	8006362 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062d8:	e043      	b.n	8006362 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062e2:	d140      	bne.n	8006366 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062e8:	e03d      	b.n	8006366 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062f2:	d121      	bne.n	8006338 <DMA_CheckFifoParam+0xa8>
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d837      	bhi.n	800636a <DMA_CheckFifoParam+0xda>
 80062fa:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <DMA_CheckFifoParam+0x70>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	08006311 	.word	0x08006311
 8006304:	08006317 	.word	0x08006317
 8006308:	08006311 	.word	0x08006311
 800630c:	08006329 	.word	0x08006329
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
      break;
 8006314:	e030      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d025      	beq.n	800636e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006326:	e022      	b.n	800636e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006330:	d11f      	bne.n	8006372 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006336:	e01c      	b.n	8006372 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d903      	bls.n	8006346 <DMA_CheckFifoParam+0xb6>
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b03      	cmp	r3, #3
 8006342:	d003      	beq.n	800634c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006344:	e018      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	73fb      	strb	r3, [r7, #15]
      break;
 800634a:	e015      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00e      	beq.n	8006376 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
      break;
 800635c:	e00b      	b.n	8006376 <DMA_CheckFifoParam+0xe6>
      break;
 800635e:	bf00      	nop
 8006360:	e00a      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
      break;
 8006362:	bf00      	nop
 8006364:	e008      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
      break;
 8006366:	bf00      	nop
 8006368:	e006      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
      break;
 800636a:	bf00      	nop
 800636c:	e004      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
      break;
 800636e:	bf00      	nop
 8006370:	e002      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
      break;   
 8006372:	bf00      	nop
 8006374:	e000      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
      break;
 8006376:	bf00      	nop
    }
  } 
  
  return status; 
 8006378:	7bfb      	ldrb	r3, [r7, #15]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop

08006388 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800639a:	4b23      	ldr	r3, [pc, #140]	; (8006428 <HAL_FLASH_Program+0xa0>)
 800639c:	7e1b      	ldrb	r3, [r3, #24]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d101      	bne.n	80063a6 <HAL_FLASH_Program+0x1e>
 80063a2:	2302      	movs	r3, #2
 80063a4:	e03b      	b.n	800641e <HAL_FLASH_Program+0x96>
 80063a6:	4b20      	ldr	r3, [pc, #128]	; (8006428 <HAL_FLASH_Program+0xa0>)
 80063a8:	2201      	movs	r2, #1
 80063aa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063b0:	f000 f860 	bl	8006474 <FLASH_WaitForLastOperation>
 80063b4:	4603      	mov	r3, r0
 80063b6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d12b      	bne.n	8006416 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d105      	bne.n	80063d0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80063c4:	783b      	ldrb	r3, [r7, #0]
 80063c6:	4619      	mov	r1, r3
 80063c8:	68b8      	ldr	r0, [r7, #8]
 80063ca:	f000 f90b 	bl	80065e4 <FLASH_Program_Byte>
 80063ce:	e016      	b.n	80063fe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d105      	bne.n	80063e2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80063d6:	883b      	ldrh	r3, [r7, #0]
 80063d8:	4619      	mov	r1, r3
 80063da:	68b8      	ldr	r0, [r7, #8]
 80063dc:	f000 f8de 	bl	800659c <FLASH_Program_HalfWord>
 80063e0:	e00d      	b.n	80063fe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d105      	bne.n	80063f4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	4619      	mov	r1, r3
 80063ec:	68b8      	ldr	r0, [r7, #8]
 80063ee:	f000 f8b3 	bl	8006558 <FLASH_Program_Word>
 80063f2:	e004      	b.n	80063fe <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80063f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f8:	68b8      	ldr	r0, [r7, #8]
 80063fa:	f000 f87b 	bl	80064f4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006402:	f000 f837 	bl	8006474 <FLASH_WaitForLastOperation>
 8006406:	4603      	mov	r3, r0
 8006408:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800640a:	4b08      	ldr	r3, [pc, #32]	; (800642c <HAL_FLASH_Program+0xa4>)
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	4a07      	ldr	r2, [pc, #28]	; (800642c <HAL_FLASH_Program+0xa4>)
 8006410:	f023 0301 	bic.w	r3, r3, #1
 8006414:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006416:	4b04      	ldr	r3, [pc, #16]	; (8006428 <HAL_FLASH_Program+0xa0>)
 8006418:	2200      	movs	r2, #0
 800641a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800641c:	7dfb      	ldrb	r3, [r7, #23]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	2000b6b8 	.word	0x2000b6b8
 800642c:	40023c00 	.word	0x40023c00

08006430 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800643a:	4b0b      	ldr	r3, [pc, #44]	; (8006468 <HAL_FLASH_Unlock+0x38>)
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	da0b      	bge.n	800645a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006442:	4b09      	ldr	r3, [pc, #36]	; (8006468 <HAL_FLASH_Unlock+0x38>)
 8006444:	4a09      	ldr	r2, [pc, #36]	; (800646c <HAL_FLASH_Unlock+0x3c>)
 8006446:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006448:	4b07      	ldr	r3, [pc, #28]	; (8006468 <HAL_FLASH_Unlock+0x38>)
 800644a:	4a09      	ldr	r2, [pc, #36]	; (8006470 <HAL_FLASH_Unlock+0x40>)
 800644c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800644e:	4b06      	ldr	r3, [pc, #24]	; (8006468 <HAL_FLASH_Unlock+0x38>)
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	da01      	bge.n	800645a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800645a:	79fb      	ldrb	r3, [r7, #7]
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	40023c00 	.word	0x40023c00
 800646c:	45670123 	.word	0x45670123
 8006470:	cdef89ab 	.word	0xcdef89ab

08006474 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006480:	4b1a      	ldr	r3, [pc, #104]	; (80064ec <FLASH_WaitForLastOperation+0x78>)
 8006482:	2200      	movs	r2, #0
 8006484:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8006486:	f7fe fdd1 	bl	800502c <HAL_GetTick>
 800648a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800648c:	e010      	b.n	80064b0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d00c      	beq.n	80064b0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <FLASH_WaitForLastOperation+0x38>
 800649c:	f7fe fdc6 	bl	800502c <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d201      	bcs.n	80064b0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e019      	b.n	80064e4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80064b0:	4b0f      	ldr	r3, [pc, #60]	; (80064f0 <FLASH_WaitForLastOperation+0x7c>)
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1e8      	bne.n	800648e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80064bc:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <FLASH_WaitForLastOperation+0x7c>)
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80064c8:	4b09      	ldr	r3, [pc, #36]	; (80064f0 <FLASH_WaitForLastOperation+0x7c>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80064ce:	4b08      	ldr	r3, [pc, #32]	; (80064f0 <FLASH_WaitForLastOperation+0x7c>)
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80064da:	f000 f8a5 	bl	8006628 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
  
}  
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	2000b6b8 	.word	0x2000b6b8
 80064f0:	40023c00 	.word	0x40023c00

080064f4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006500:	4b14      	ldr	r3, [pc, #80]	; (8006554 <FLASH_Program_DoubleWord+0x60>)
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	4a13      	ldr	r2, [pc, #76]	; (8006554 <FLASH_Program_DoubleWord+0x60>)
 8006506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800650a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800650c:	4b11      	ldr	r3, [pc, #68]	; (8006554 <FLASH_Program_DoubleWord+0x60>)
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	4a10      	ldr	r2, [pc, #64]	; (8006554 <FLASH_Program_DoubleWord+0x60>)
 8006512:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006516:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006518:	4b0e      	ldr	r3, [pc, #56]	; (8006554 <FLASH_Program_DoubleWord+0x60>)
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	4a0d      	ldr	r2, [pc, #52]	; (8006554 <FLASH_Program_DoubleWord+0x60>)
 800651e:	f043 0301 	orr.w	r3, r3, #1
 8006522:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800652a:	f3bf 8f6f 	isb	sy
}
 800652e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	000a      	movs	r2, r1
 800653e:	2300      	movs	r3, #0
 8006540:	68f9      	ldr	r1, [r7, #12]
 8006542:	3104      	adds	r1, #4
 8006544:	4613      	mov	r3, r2
 8006546:	600b      	str	r3, [r1, #0]
}
 8006548:	bf00      	nop
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	40023c00 	.word	0x40023c00

08006558 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006562:	4b0d      	ldr	r3, [pc, #52]	; (8006598 <FLASH_Program_Word+0x40>)
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	4a0c      	ldr	r2, [pc, #48]	; (8006598 <FLASH_Program_Word+0x40>)
 8006568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800656c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800656e:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <FLASH_Program_Word+0x40>)
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	4a09      	ldr	r2, [pc, #36]	; (8006598 <FLASH_Program_Word+0x40>)
 8006574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006578:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800657a:	4b07      	ldr	r3, [pc, #28]	; (8006598 <FLASH_Program_Word+0x40>)
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	4a06      	ldr	r2, [pc, #24]	; (8006598 <FLASH_Program_Word+0x40>)
 8006580:	f043 0301 	orr.w	r3, r3, #1
 8006584:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	601a      	str	r2, [r3, #0]
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	40023c00 	.word	0x40023c00

0800659c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	460b      	mov	r3, r1
 80065a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80065a8:	4b0d      	ldr	r3, [pc, #52]	; (80065e0 <FLASH_Program_HalfWord+0x44>)
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	4a0c      	ldr	r2, [pc, #48]	; (80065e0 <FLASH_Program_HalfWord+0x44>)
 80065ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80065b4:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <FLASH_Program_HalfWord+0x44>)
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	4a09      	ldr	r2, [pc, #36]	; (80065e0 <FLASH_Program_HalfWord+0x44>)
 80065ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80065c0:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <FLASH_Program_HalfWord+0x44>)
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	4a06      	ldr	r2, [pc, #24]	; (80065e0 <FLASH_Program_HalfWord+0x44>)
 80065c6:	f043 0301 	orr.w	r3, r3, #1
 80065ca:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	887a      	ldrh	r2, [r7, #2]
 80065d0:	801a      	strh	r2, [r3, #0]
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40023c00 	.word	0x40023c00

080065e4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <FLASH_Program_Byte+0x40>)
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	4a0b      	ldr	r2, [pc, #44]	; (8006624 <FLASH_Program_Byte+0x40>)
 80065f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80065fc:	4b09      	ldr	r3, [pc, #36]	; (8006624 <FLASH_Program_Byte+0x40>)
 80065fe:	4a09      	ldr	r2, [pc, #36]	; (8006624 <FLASH_Program_Byte+0x40>)
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006604:	4b07      	ldr	r3, [pc, #28]	; (8006624 <FLASH_Program_Byte+0x40>)
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	4a06      	ldr	r2, [pc, #24]	; (8006624 <FLASH_Program_Byte+0x40>)
 800660a:	f043 0301 	orr.w	r3, r3, #1
 800660e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	78fa      	ldrb	r2, [r7, #3]
 8006614:	701a      	strb	r2, [r3, #0]
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	40023c00 	.word	0x40023c00

08006628 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800662c:	4b2f      	ldr	r3, [pc, #188]	; (80066ec <FLASH_SetErrorCode+0xc4>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f003 0310 	and.w	r3, r3, #16
 8006634:	2b00      	cmp	r3, #0
 8006636:	d008      	beq.n	800664a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006638:	4b2d      	ldr	r3, [pc, #180]	; (80066f0 <FLASH_SetErrorCode+0xc8>)
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	f043 0310 	orr.w	r3, r3, #16
 8006640:	4a2b      	ldr	r2, [pc, #172]	; (80066f0 <FLASH_SetErrorCode+0xc8>)
 8006642:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006644:	4b29      	ldr	r3, [pc, #164]	; (80066ec <FLASH_SetErrorCode+0xc4>)
 8006646:	2210      	movs	r2, #16
 8006648:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800664a:	4b28      	ldr	r3, [pc, #160]	; (80066ec <FLASH_SetErrorCode+0xc4>)
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f003 0320 	and.w	r3, r3, #32
 8006652:	2b00      	cmp	r3, #0
 8006654:	d008      	beq.n	8006668 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006656:	4b26      	ldr	r3, [pc, #152]	; (80066f0 <FLASH_SetErrorCode+0xc8>)
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	f043 0308 	orr.w	r3, r3, #8
 800665e:	4a24      	ldr	r2, [pc, #144]	; (80066f0 <FLASH_SetErrorCode+0xc8>)
 8006660:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006662:	4b22      	ldr	r3, [pc, #136]	; (80066ec <FLASH_SetErrorCode+0xc4>)
 8006664:	2220      	movs	r2, #32
 8006666:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006668:	4b20      	ldr	r3, [pc, #128]	; (80066ec <FLASH_SetErrorCode+0xc4>)
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	d008      	beq.n	8006686 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006674:	4b1e      	ldr	r3, [pc, #120]	; (80066f0 <FLASH_SetErrorCode+0xc8>)
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	f043 0304 	orr.w	r3, r3, #4
 800667c:	4a1c      	ldr	r2, [pc, #112]	; (80066f0 <FLASH_SetErrorCode+0xc8>)
 800667e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006680:	4b1a      	ldr	r3, [pc, #104]	; (80066ec <FLASH_SetErrorCode+0xc4>)
 8006682:	2240      	movs	r2, #64	; 0x40
 8006684:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006686:	4b19      	ldr	r3, [pc, #100]	; (80066ec <FLASH_SetErrorCode+0xc4>)
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668e:	2b00      	cmp	r3, #0
 8006690:	d008      	beq.n	80066a4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006692:	4b17      	ldr	r3, [pc, #92]	; (80066f0 <FLASH_SetErrorCode+0xc8>)
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f043 0302 	orr.w	r3, r3, #2
 800669a:	4a15      	ldr	r2, [pc, #84]	; (80066f0 <FLASH_SetErrorCode+0xc8>)
 800669c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800669e:	4b13      	ldr	r3, [pc, #76]	; (80066ec <FLASH_SetErrorCode+0xc4>)
 80066a0:	2280      	movs	r2, #128	; 0x80
 80066a2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80066a4:	4b11      	ldr	r3, [pc, #68]	; (80066ec <FLASH_SetErrorCode+0xc4>)
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d009      	beq.n	80066c4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80066b0:	4b0f      	ldr	r3, [pc, #60]	; (80066f0 <FLASH_SetErrorCode+0xc8>)
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	f043 0301 	orr.w	r3, r3, #1
 80066b8:	4a0d      	ldr	r2, [pc, #52]	; (80066f0 <FLASH_SetErrorCode+0xc8>)
 80066ba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80066bc:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <FLASH_SetErrorCode+0xc4>)
 80066be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066c2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80066c4:	4b09      	ldr	r3, [pc, #36]	; (80066ec <FLASH_SetErrorCode+0xc4>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d008      	beq.n	80066e2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80066d0:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <FLASH_SetErrorCode+0xc8>)
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	f043 0320 	orr.w	r3, r3, #32
 80066d8:	4a05      	ldr	r2, [pc, #20]	; (80066f0 <FLASH_SetErrorCode+0xc8>)
 80066da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80066dc:	4b03      	ldr	r3, [pc, #12]	; (80066ec <FLASH_SetErrorCode+0xc4>)
 80066de:	2202      	movs	r2, #2
 80066e0:	60da      	str	r2, [r3, #12]
  }
}
 80066e2:	bf00      	nop
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	40023c00 	.word	0x40023c00
 80066f0:	2000b6b8 	.word	0x2000b6b8

080066f4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006706:	4b31      	ldr	r3, [pc, #196]	; (80067cc <HAL_FLASHEx_Erase+0xd8>)
 8006708:	7e1b      	ldrb	r3, [r3, #24]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_FLASHEx_Erase+0x1e>
 800670e:	2302      	movs	r3, #2
 8006710:	e058      	b.n	80067c4 <HAL_FLASHEx_Erase+0xd0>
 8006712:	4b2e      	ldr	r3, [pc, #184]	; (80067cc <HAL_FLASHEx_Erase+0xd8>)
 8006714:	2201      	movs	r2, #1
 8006716:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006718:	f24c 3050 	movw	r0, #50000	; 0xc350
 800671c:	f7ff feaa 	bl	8006474 <FLASH_WaitForLastOperation>
 8006720:	4603      	mov	r3, r0
 8006722:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d148      	bne.n	80067bc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	f04f 32ff 	mov.w	r2, #4294967295
 8006730:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d115      	bne.n	8006766 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	b2da      	uxtb	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	4619      	mov	r1, r3
 8006746:	4610      	mov	r0, r2
 8006748:	f000 f844 	bl	80067d4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800674c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006750:	f7ff fe90 	bl	8006474 <FLASH_WaitForLastOperation>
 8006754:	4603      	mov	r3, r0
 8006756:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006758:	4b1d      	ldr	r3, [pc, #116]	; (80067d0 <HAL_FLASHEx_Erase+0xdc>)
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	4a1c      	ldr	r2, [pc, #112]	; (80067d0 <HAL_FLASHEx_Erase+0xdc>)
 800675e:	f023 0304 	bic.w	r3, r3, #4
 8006762:	6113      	str	r3, [r2, #16]
 8006764:	e028      	b.n	80067b8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	60bb      	str	r3, [r7, #8]
 800676c:	e01c      	b.n	80067a8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	b2db      	uxtb	r3, r3
 8006774:	4619      	mov	r1, r3
 8006776:	68b8      	ldr	r0, [r7, #8]
 8006778:	f000 f850 	bl	800681c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800677c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006780:	f7ff fe78 	bl	8006474 <FLASH_WaitForLastOperation>
 8006784:	4603      	mov	r3, r0
 8006786:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006788:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <HAL_FLASHEx_Erase+0xdc>)
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	4a10      	ldr	r2, [pc, #64]	; (80067d0 <HAL_FLASHEx_Erase+0xdc>)
 800678e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8006792:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8006794:	7bfb      	ldrb	r3, [r7, #15]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	601a      	str	r2, [r3, #0]
          break;
 80067a0:	e00a      	b.n	80067b8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	3301      	adds	r3, #1
 80067a6:	60bb      	str	r3, [r7, #8]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	4413      	add	r3, r2
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d3da      	bcc.n	800676e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80067b8:	f000 f878 	bl	80068ac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80067bc:	4b03      	ldr	r3, [pc, #12]	; (80067cc <HAL_FLASHEx_Erase+0xd8>)
 80067be:	2200      	movs	r2, #0
 80067c0:	761a      	strb	r2, [r3, #24]

  return status;
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	2000b6b8 	.word	0x2000b6b8
 80067d0:	40023c00 	.word	0x40023c00

080067d4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	6039      	str	r1, [r7, #0]
 80067de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80067e0:	4b0d      	ldr	r3, [pc, #52]	; (8006818 <FLASH_MassErase+0x44>)
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	4a0c      	ldr	r2, [pc, #48]	; (8006818 <FLASH_MassErase+0x44>)
 80067e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80067ec:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <FLASH_MassErase+0x44>)
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	4a09      	ldr	r2, [pc, #36]	; (8006818 <FLASH_MassErase+0x44>)
 80067f2:	f043 0304 	orr.w	r3, r3, #4
 80067f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80067f8:	4b07      	ldr	r3, [pc, #28]	; (8006818 <FLASH_MassErase+0x44>)
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	79fb      	ldrb	r3, [r7, #7]
 80067fe:	021b      	lsls	r3, r3, #8
 8006800:	4313      	orrs	r3, r2
 8006802:	4a05      	ldr	r2, [pc, #20]	; (8006818 <FLASH_MassErase+0x44>)
 8006804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006808:	6113      	str	r3, [r2, #16]
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	40023c00 	.word	0x40023c00

0800681c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	460b      	mov	r3, r1
 8006826:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d102      	bne.n	8006838 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	e010      	b.n	800685a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d103      	bne.n	8006846 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800683e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	e009      	b.n	800685a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006846:	78fb      	ldrb	r3, [r7, #3]
 8006848:	2b02      	cmp	r3, #2
 800684a:	d103      	bne.n	8006854 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800684c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	e002      	b.n	800685a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006854:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006858:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800685a:	4b13      	ldr	r3, [pc, #76]	; (80068a8 <FLASH_Erase_Sector+0x8c>)
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	4a12      	ldr	r2, [pc, #72]	; (80068a8 <FLASH_Erase_Sector+0x8c>)
 8006860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006864:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006866:	4b10      	ldr	r3, [pc, #64]	; (80068a8 <FLASH_Erase_Sector+0x8c>)
 8006868:	691a      	ldr	r2, [r3, #16]
 800686a:	490f      	ldr	r1, [pc, #60]	; (80068a8 <FLASH_Erase_Sector+0x8c>)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006872:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <FLASH_Erase_Sector+0x8c>)
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	4a0c      	ldr	r2, [pc, #48]	; (80068a8 <FLASH_Erase_Sector+0x8c>)
 8006878:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800687c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800687e:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <FLASH_Erase_Sector+0x8c>)
 8006880:	691a      	ldr	r2, [r3, #16]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	00db      	lsls	r3, r3, #3
 8006886:	4313      	orrs	r3, r2
 8006888:	4a07      	ldr	r2, [pc, #28]	; (80068a8 <FLASH_Erase_Sector+0x8c>)
 800688a:	f043 0302 	orr.w	r3, r3, #2
 800688e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006890:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <FLASH_Erase_Sector+0x8c>)
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	4a04      	ldr	r2, [pc, #16]	; (80068a8 <FLASH_Erase_Sector+0x8c>)
 8006896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800689a:	6113      	str	r3, [r2, #16]
}
 800689c:	bf00      	nop
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr
 80068a8:	40023c00 	.word	0x40023c00

080068ac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80068b0:	4b20      	ldr	r3, [pc, #128]	; (8006934 <FLASH_FlushCaches+0x88>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d017      	beq.n	80068ec <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80068bc:	4b1d      	ldr	r3, [pc, #116]	; (8006934 <FLASH_FlushCaches+0x88>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a1c      	ldr	r2, [pc, #112]	; (8006934 <FLASH_FlushCaches+0x88>)
 80068c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068c6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80068c8:	4b1a      	ldr	r3, [pc, #104]	; (8006934 <FLASH_FlushCaches+0x88>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a19      	ldr	r2, [pc, #100]	; (8006934 <FLASH_FlushCaches+0x88>)
 80068ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	4b17      	ldr	r3, [pc, #92]	; (8006934 <FLASH_FlushCaches+0x88>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a16      	ldr	r2, [pc, #88]	; (8006934 <FLASH_FlushCaches+0x88>)
 80068da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068de:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80068e0:	4b14      	ldr	r3, [pc, #80]	; (8006934 <FLASH_FlushCaches+0x88>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a13      	ldr	r2, [pc, #76]	; (8006934 <FLASH_FlushCaches+0x88>)
 80068e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068ea:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80068ec:	4b11      	ldr	r3, [pc, #68]	; (8006934 <FLASH_FlushCaches+0x88>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d017      	beq.n	8006928 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80068f8:	4b0e      	ldr	r3, [pc, #56]	; (8006934 <FLASH_FlushCaches+0x88>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a0d      	ldr	r2, [pc, #52]	; (8006934 <FLASH_FlushCaches+0x88>)
 80068fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006902:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006904:	4b0b      	ldr	r3, [pc, #44]	; (8006934 <FLASH_FlushCaches+0x88>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a0a      	ldr	r2, [pc, #40]	; (8006934 <FLASH_FlushCaches+0x88>)
 800690a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	4b08      	ldr	r3, [pc, #32]	; (8006934 <FLASH_FlushCaches+0x88>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a07      	ldr	r2, [pc, #28]	; (8006934 <FLASH_FlushCaches+0x88>)
 8006916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800691a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800691c:	4b05      	ldr	r3, [pc, #20]	; (8006934 <FLASH_FlushCaches+0x88>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a04      	ldr	r2, [pc, #16]	; (8006934 <FLASH_FlushCaches+0x88>)
 8006922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006926:	6013      	str	r3, [r2, #0]
  }
}
 8006928:	bf00      	nop
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	40023c00 	.word	0x40023c00

08006938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006938:	b480      	push	{r7}
 800693a:	b089      	sub	sp, #36	; 0x24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006942:	2300      	movs	r3, #0
 8006944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006946:	2300      	movs	r3, #0
 8006948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800694a:	2300      	movs	r3, #0
 800694c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800694e:	2300      	movs	r3, #0
 8006950:	61fb      	str	r3, [r7, #28]
 8006952:	e159      	b.n	8006c08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006954:	2201      	movs	r2, #1
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	fa02 f303 	lsl.w	r3, r2, r3
 800695c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4013      	ands	r3, r2
 8006966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	429a      	cmp	r2, r3
 800696e:	f040 8148 	bne.w	8006c02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	2b01      	cmp	r3, #1
 800697c:	d005      	beq.n	800698a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006986:	2b02      	cmp	r3, #2
 8006988:	d130      	bne.n	80069ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	2203      	movs	r2, #3
 8006996:	fa02 f303 	lsl.w	r3, r2, r3
 800699a:	43db      	mvns	r3, r3
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	4013      	ands	r3, r2
 80069a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	68da      	ldr	r2, [r3, #12]
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	fa02 f303 	lsl.w	r3, r2, r3
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069c0:	2201      	movs	r2, #1
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	fa02 f303 	lsl.w	r3, r2, r3
 80069c8:	43db      	mvns	r3, r3
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	4013      	ands	r3, r2
 80069ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	091b      	lsrs	r3, r3, #4
 80069d6:	f003 0201 	and.w	r2, r3, #1
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	fa02 f303 	lsl.w	r3, r2, r3
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f003 0303 	and.w	r3, r3, #3
 80069f4:	2b03      	cmp	r3, #3
 80069f6:	d017      	beq.n	8006a28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	2203      	movs	r2, #3
 8006a04:	fa02 f303 	lsl.w	r3, r2, r3
 8006a08:	43db      	mvns	r3, r3
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f003 0303 	and.w	r3, r3, #3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d123      	bne.n	8006a7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	08da      	lsrs	r2, r3, #3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3208      	adds	r2, #8
 8006a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	220f      	movs	r2, #15
 8006a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a50:	43db      	mvns	r3, r3
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	4013      	ands	r3, r2
 8006a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	691a      	ldr	r2, [r3, #16]
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	fa02 f303 	lsl.w	r3, r2, r3
 8006a68:	69ba      	ldr	r2, [r7, #24]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	08da      	lsrs	r2, r3, #3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	3208      	adds	r2, #8
 8006a76:	69b9      	ldr	r1, [r7, #24]
 8006a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	2203      	movs	r2, #3
 8006a88:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	4013      	ands	r3, r2
 8006a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f003 0203 	and.w	r2, r3, #3
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 80a2 	beq.w	8006c02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	4b57      	ldr	r3, [pc, #348]	; (8006c20 <HAL_GPIO_Init+0x2e8>)
 8006ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac6:	4a56      	ldr	r2, [pc, #344]	; (8006c20 <HAL_GPIO_Init+0x2e8>)
 8006ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006acc:	6453      	str	r3, [r2, #68]	; 0x44
 8006ace:	4b54      	ldr	r3, [pc, #336]	; (8006c20 <HAL_GPIO_Init+0x2e8>)
 8006ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ada:	4a52      	ldr	r2, [pc, #328]	; (8006c24 <HAL_GPIO_Init+0x2ec>)
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	089b      	lsrs	r3, r3, #2
 8006ae0:	3302      	adds	r3, #2
 8006ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	220f      	movs	r2, #15
 8006af2:	fa02 f303 	lsl.w	r3, r2, r3
 8006af6:	43db      	mvns	r3, r3
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	4013      	ands	r3, r2
 8006afc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a49      	ldr	r2, [pc, #292]	; (8006c28 <HAL_GPIO_Init+0x2f0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d019      	beq.n	8006b3a <HAL_GPIO_Init+0x202>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a48      	ldr	r2, [pc, #288]	; (8006c2c <HAL_GPIO_Init+0x2f4>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d013      	beq.n	8006b36 <HAL_GPIO_Init+0x1fe>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a47      	ldr	r2, [pc, #284]	; (8006c30 <HAL_GPIO_Init+0x2f8>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00d      	beq.n	8006b32 <HAL_GPIO_Init+0x1fa>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a46      	ldr	r2, [pc, #280]	; (8006c34 <HAL_GPIO_Init+0x2fc>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d007      	beq.n	8006b2e <HAL_GPIO_Init+0x1f6>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a45      	ldr	r2, [pc, #276]	; (8006c38 <HAL_GPIO_Init+0x300>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d101      	bne.n	8006b2a <HAL_GPIO_Init+0x1f2>
 8006b26:	2304      	movs	r3, #4
 8006b28:	e008      	b.n	8006b3c <HAL_GPIO_Init+0x204>
 8006b2a:	2307      	movs	r3, #7
 8006b2c:	e006      	b.n	8006b3c <HAL_GPIO_Init+0x204>
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e004      	b.n	8006b3c <HAL_GPIO_Init+0x204>
 8006b32:	2302      	movs	r3, #2
 8006b34:	e002      	b.n	8006b3c <HAL_GPIO_Init+0x204>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <HAL_GPIO_Init+0x204>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	f002 0203 	and.w	r2, r2, #3
 8006b42:	0092      	lsls	r2, r2, #2
 8006b44:	4093      	lsls	r3, r2
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b4c:	4935      	ldr	r1, [pc, #212]	; (8006c24 <HAL_GPIO_Init+0x2ec>)
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	089b      	lsrs	r3, r3, #2
 8006b52:	3302      	adds	r3, #2
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b5a:	4b38      	ldr	r3, [pc, #224]	; (8006c3c <HAL_GPIO_Init+0x304>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	43db      	mvns	r3, r3
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	4013      	ands	r3, r2
 8006b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b7e:	4a2f      	ldr	r2, [pc, #188]	; (8006c3c <HAL_GPIO_Init+0x304>)
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006b84:	4b2d      	ldr	r3, [pc, #180]	; (8006c3c <HAL_GPIO_Init+0x304>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	43db      	mvns	r3, r3
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	4013      	ands	r3, r2
 8006b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ba8:	4a24      	ldr	r2, [pc, #144]	; (8006c3c <HAL_GPIO_Init+0x304>)
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006bae:	4b23      	ldr	r3, [pc, #140]	; (8006c3c <HAL_GPIO_Init+0x304>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	43db      	mvns	r3, r3
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006bd2:	4a1a      	ldr	r2, [pc, #104]	; (8006c3c <HAL_GPIO_Init+0x304>)
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006bd8:	4b18      	ldr	r3, [pc, #96]	; (8006c3c <HAL_GPIO_Init+0x304>)
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	43db      	mvns	r3, r3
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	4013      	ands	r3, r2
 8006be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d003      	beq.n	8006bfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006bfc:	4a0f      	ldr	r2, [pc, #60]	; (8006c3c <HAL_GPIO_Init+0x304>)
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	3301      	adds	r3, #1
 8006c06:	61fb      	str	r3, [r7, #28]
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	2b0f      	cmp	r3, #15
 8006c0c:	f67f aea2 	bls.w	8006954 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c10:	bf00      	nop
 8006c12:	bf00      	nop
 8006c14:	3724      	adds	r7, #36	; 0x24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	40023800 	.word	0x40023800
 8006c24:	40013800 	.word	0x40013800
 8006c28:	40020000 	.word	0x40020000
 8006c2c:	40020400 	.word	0x40020400
 8006c30:	40020800 	.word	0x40020800
 8006c34:	40020c00 	.word	0x40020c00
 8006c38:	40021000 	.word	0x40021000
 8006c3c:	40013c00 	.word	0x40013c00

08006c40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	691a      	ldr	r2, [r3, #16]
 8006c50:	887b      	ldrh	r3, [r7, #2]
 8006c52:	4013      	ands	r3, r2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	73fb      	strb	r3, [r7, #15]
 8006c5c:	e001      	b.n	8006c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	807b      	strh	r3, [r7, #2]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c80:	787b      	ldrb	r3, [r7, #1]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c86:	887a      	ldrh	r2, [r7, #2]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006c8c:	e003      	b.n	8006c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006c8e:	887b      	ldrh	r3, [r7, #2]
 8006c90:	041a      	lsls	r2, r3, #16
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	619a      	str	r2, [r3, #24]
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b085      	sub	sp, #20
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006cb4:	887a      	ldrh	r2, [r7, #2]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4013      	ands	r3, r2
 8006cba:	041a      	lsls	r2, r3, #16
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	43d9      	mvns	r1, r3
 8006cc0:	887b      	ldrh	r3, [r7, #2]
 8006cc2:	400b      	ands	r3, r1
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	619a      	str	r2, [r3, #24]
}
 8006cca:	bf00      	nop
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
	...

08006cd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e12b      	b.n	8006f42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d106      	bne.n	8006d04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7fc ff68 	bl	8003bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2224      	movs	r2, #36	; 0x24
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0201 	bic.w	r2, r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006d3c:	f003 f954 	bl	8009fe8 <HAL_RCC_GetPCLK1Freq>
 8006d40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	4a81      	ldr	r2, [pc, #516]	; (8006f4c <HAL_I2C_Init+0x274>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d807      	bhi.n	8006d5c <HAL_I2C_Init+0x84>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4a80      	ldr	r2, [pc, #512]	; (8006f50 <HAL_I2C_Init+0x278>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	bf94      	ite	ls
 8006d54:	2301      	movls	r3, #1
 8006d56:	2300      	movhi	r3, #0
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	e006      	b.n	8006d6a <HAL_I2C_Init+0x92>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4a7d      	ldr	r2, [pc, #500]	; (8006f54 <HAL_I2C_Init+0x27c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	bf94      	ite	ls
 8006d64:	2301      	movls	r3, #1
 8006d66:	2300      	movhi	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e0e7      	b.n	8006f42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4a78      	ldr	r2, [pc, #480]	; (8006f58 <HAL_I2C_Init+0x280>)
 8006d76:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7a:	0c9b      	lsrs	r3, r3, #18
 8006d7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	4a6a      	ldr	r2, [pc, #424]	; (8006f4c <HAL_I2C_Init+0x274>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d802      	bhi.n	8006dac <HAL_I2C_Init+0xd4>
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	3301      	adds	r3, #1
 8006daa:	e009      	b.n	8006dc0 <HAL_I2C_Init+0xe8>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006db2:	fb02 f303 	mul.w	r3, r2, r3
 8006db6:	4a69      	ldr	r2, [pc, #420]	; (8006f5c <HAL_I2C_Init+0x284>)
 8006db8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbc:	099b      	lsrs	r3, r3, #6
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6812      	ldr	r2, [r2, #0]
 8006dc4:	430b      	orrs	r3, r1
 8006dc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006dd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	495c      	ldr	r1, [pc, #368]	; (8006f4c <HAL_I2C_Init+0x274>)
 8006ddc:	428b      	cmp	r3, r1
 8006dde:	d819      	bhi.n	8006e14 <HAL_I2C_Init+0x13c>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	1e59      	subs	r1, r3, #1
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	fbb1 f3f3 	udiv	r3, r1, r3
 8006dee:	1c59      	adds	r1, r3, #1
 8006df0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006df4:	400b      	ands	r3, r1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <HAL_I2C_Init+0x138>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	1e59      	subs	r1, r3, #1
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e08:	3301      	adds	r3, #1
 8006e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e0e:	e051      	b.n	8006eb4 <HAL_I2C_Init+0x1dc>
 8006e10:	2304      	movs	r3, #4
 8006e12:	e04f      	b.n	8006eb4 <HAL_I2C_Init+0x1dc>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d111      	bne.n	8006e40 <HAL_I2C_Init+0x168>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	1e58      	subs	r0, r3, #1
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6859      	ldr	r1, [r3, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	440b      	add	r3, r1
 8006e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e2e:	3301      	adds	r3, #1
 8006e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	bf0c      	ite	eq
 8006e38:	2301      	moveq	r3, #1
 8006e3a:	2300      	movne	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	e012      	b.n	8006e66 <HAL_I2C_Init+0x18e>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	1e58      	subs	r0, r3, #1
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6859      	ldr	r1, [r3, #4]
 8006e48:	460b      	mov	r3, r1
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	0099      	lsls	r1, r3, #2
 8006e50:	440b      	add	r3, r1
 8006e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e56:	3301      	adds	r3, #1
 8006e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	bf0c      	ite	eq
 8006e60:	2301      	moveq	r3, #1
 8006e62:	2300      	movne	r3, #0
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <HAL_I2C_Init+0x196>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e022      	b.n	8006eb4 <HAL_I2C_Init+0x1dc>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10e      	bne.n	8006e94 <HAL_I2C_Init+0x1bc>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	1e58      	subs	r0, r3, #1
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6859      	ldr	r1, [r3, #4]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	440b      	add	r3, r1
 8006e84:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e88:	3301      	adds	r3, #1
 8006e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e92:	e00f      	b.n	8006eb4 <HAL_I2C_Init+0x1dc>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	1e58      	subs	r0, r3, #1
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6859      	ldr	r1, [r3, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	440b      	add	r3, r1
 8006ea2:	0099      	lsls	r1, r3, #2
 8006ea4:	440b      	add	r3, r1
 8006ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006eaa:	3301      	adds	r3, #1
 8006eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	6809      	ldr	r1, [r1, #0]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	69da      	ldr	r2, [r3, #28]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006ee2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	6911      	ldr	r1, [r2, #16]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	68d2      	ldr	r2, [r2, #12]
 8006eee:	4311      	orrs	r1, r2
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6812      	ldr	r2, [r2, #0]
 8006ef4:	430b      	orrs	r3, r1
 8006ef6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	695a      	ldr	r2, [r3, #20]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f042 0201 	orr.w	r2, r2, #1
 8006f22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	000186a0 	.word	0x000186a0
 8006f50:	001e847f 	.word	0x001e847f
 8006f54:	003d08ff 	.word	0x003d08ff
 8006f58:	431bde83 	.word	0x431bde83
 8006f5c:	10624dd3 	.word	0x10624dd3

08006f60 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08c      	sub	sp, #48	; 0x30
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	4608      	mov	r0, r1
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	4603      	mov	r3, r0
 8006f70:	817b      	strh	r3, [r7, #10]
 8006f72:	460b      	mov	r3, r1
 8006f74:	813b      	strh	r3, [r7, #8]
 8006f76:	4613      	mov	r3, r2
 8006f78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f7a:	f7fe f857 	bl	800502c <HAL_GetTick>
 8006f7e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b20      	cmp	r3, #32
 8006f8e:	f040 8176 	bne.w	800727e <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006f92:	4b95      	ldr	r3, [pc, #596]	; (80071e8 <HAL_I2C_Mem_Read_DMA+0x288>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	08db      	lsrs	r3, r3, #3
 8006f98:	4a94      	ldr	r2, [pc, #592]	; (80071ec <HAL_I2C_Mem_Read_DMA+0x28c>)
 8006f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9e:	0a1a      	lsrs	r2, r3, #8
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	009a      	lsls	r2, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d116      	bne.n	8006fe6 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f043 0220 	orr.w	r2, r3, #32
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e14c      	b.n	8007280 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d0db      	beq.n	8006fac <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d101      	bne.n	8007002 <HAL_I2C_Mem_Read_DMA+0xa2>
 8006ffe:	2302      	movs	r3, #2
 8007000:	e13e      	b.n	8007280 <HAL_I2C_Mem_Read_DMA+0x320>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b01      	cmp	r3, #1
 8007016:	d007      	beq.n	8007028 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f042 0201 	orr.w	r2, r2, #1
 8007026:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007036:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2222      	movs	r2, #34	; 0x22
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2240      	movs	r2, #64	; 0x40
 8007044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007052:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007058:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800705e:	b29a      	uxth	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4a62      	ldr	r2, [pc, #392]	; (80071f0 <HAL_I2C_Mem_Read_DMA+0x290>)
 8007068:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800706a:	897a      	ldrh	r2, [r7, #10]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8007070:	893a      	ldrh	r2, [r7, #8]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8007076:	88fa      	ldrh	r2, [r7, #6]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 80cc 	beq.w	8007224 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007090:	2b00      	cmp	r3, #0
 8007092:	d02d      	beq.n	80070f0 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007098:	4a56      	ldr	r2, [pc, #344]	; (80071f4 <HAL_I2C_Mem_Read_DMA+0x294>)
 800709a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a0:	4a55      	ldr	r2, [pc, #340]	; (80071f8 <HAL_I2C_Mem_Read_DMA+0x298>)
 80070a2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a8:	2200      	movs	r2, #0
 80070aa:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b0:	2200      	movs	r2, #0
 80070b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b8:	2200      	movs	r2, #0
 80070ba:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c0:	2200      	movs	r2, #0
 80070c2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3310      	adds	r3, #16
 80070ce:	4619      	mov	r1, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	461a      	mov	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070da:	f7fe fde7 	bl	8005cac <HAL_DMA_Start_IT>
 80070de:	4603      	mov	r3, r0
 80070e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80070e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f040 8087 	bne.w	80071fc <HAL_I2C_Mem_Read_DMA+0x29c>
 80070ee:	e013      	b.n	8007118 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007104:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e0b3      	b.n	8007280 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007118:	88f8      	ldrh	r0, [r7, #6]
 800711a:	893a      	ldrh	r2, [r7, #8]
 800711c:	8979      	ldrh	r1, [r7, #10]
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007120:	9301      	str	r3, [sp, #4]
 8007122:	2323      	movs	r3, #35	; 0x23
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	4603      	mov	r3, r0
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f001 ff07 	bl	8008f3c <I2C_RequestMemoryRead>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d023      	beq.n	800717c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007138:	4618      	mov	r0, r3
 800713a:	f7fe fe7f 	bl	8005e3c <HAL_DMA_Abort_IT>
 800713e:	4603      	mov	r3, r0
 8007140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007148:	2200      	movs	r2, #0
 800714a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800715a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0201 	bic.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e081      	b.n	8007280 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007180:	2b01      	cmp	r3, #1
 8007182:	d108      	bne.n	8007196 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	e007      	b.n	80071a6 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071a6:	2300      	movs	r3, #0
 80071a8:	61bb      	str	r3, [r7, #24]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	61bb      	str	r3, [r7, #24]
 80071ba:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071d2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071e2:	605a      	str	r2, [r3, #4]
 80071e4:	e049      	b.n	800727a <HAL_I2C_Mem_Read_DMA+0x31a>
 80071e6:	bf00      	nop
 80071e8:	2000000c 	.word	0x2000000c
 80071ec:	14f8b589 	.word	0x14f8b589
 80071f0:	ffff0000 	.word	0xffff0000
 80071f4:	0800910d 	.word	0x0800910d
 80071f8:	080092b7 	.word	0x080092b7
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2220      	movs	r2, #32
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007210:	f043 0210 	orr.w	r2, r3, #16
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e02d      	b.n	8007280 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007224:	88f8      	ldrh	r0, [r7, #6]
 8007226:	893a      	ldrh	r2, [r7, #8]
 8007228:	8979      	ldrh	r1, [r7, #10]
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	9301      	str	r3, [sp, #4]
 800722e:	2323      	movs	r3, #35	; 0x23
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	4603      	mov	r3, r0
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f001 fe81 	bl	8008f3c <I2C_RequestMemoryRead>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d001      	beq.n	8007244 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e01d      	b.n	8007280 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007244:	2300      	movs	r3, #0
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	617b      	str	r3, [r7, #20]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	617b      	str	r3, [r7, #20]
 8007258:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007268:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2220      	movs	r2, #32
 800726e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	e000      	b.n	8007280 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800727e:	2302      	movs	r3, #2
  }
}
 8007280:	4618      	mov	r0, r3
 8007282:	3728      	adds	r7, #40	; 0x28
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	603b      	str	r3, [r7, #0]
 8007294:	4613      	mov	r3, r2
 8007296:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80072a4:	2b28      	cmp	r3, #40	; 0x28
 80072a6:	f040 811e 	bne.w	80074e6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 80072b0:	88fb      	ldrh	r3, [r7, #6]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e116      	b.n	80074e8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d101      	bne.n	80072c8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 80072c4:	2302      	movs	r3, #2
 80072c6:	e10f      	b.n	80074e8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80072de:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b2a      	cmp	r3, #42	; 0x2a
 80072ea:	d127      	bne.n	800733c <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072fa:	d14c      	bne.n	8007396 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	2b00      	cmp	r3, #0
 8007302:	d048      	beq.n	8007396 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007312:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007318:	4a75      	ldr	r2, [pc, #468]	; (80074f0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
 800731a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007320:	4618      	mov	r0, r3
 8007322:	f7fe fd8b 	bl	8005e3c <HAL_DMA_Abort_IT>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d034      	beq.n	8007396 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007336:	4610      	mov	r0, r2
 8007338:	4798      	blx	r3
 800733a:	e02c      	b.n	8007396 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b29      	cmp	r3, #41	; 0x29
 8007346:	d126      	bne.n	8007396 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007356:	d11e      	bne.n	8007396 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007366:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736c:	2b00      	cmp	r3, #0
 800736e:	d012      	beq.n	8007396 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007374:	4a5e      	ldr	r2, [pc, #376]	; (80074f0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
 8007376:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800737c:	4618      	mov	r0, r3
 800737e:	f7fe fd5d 	bl	8005e3c <HAL_DMA_Abort_IT>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d006      	beq.n	8007396 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007392:	4610      	mov	r0, r2
 8007394:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d007      	beq.n	80073b4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0201 	orr.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2229      	movs	r2, #41	; 0x29
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	88fa      	ldrh	r2, [r7, #6]
 80073e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d022      	beq.n	8007444 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007402:	4a3c      	ldr	r2, [pc, #240]	; (80074f4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26c>)
 8007404:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740a:	4a3b      	ldr	r2, [pc, #236]	; (80074f8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x270>)
 800740c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007412:	2200      	movs	r2, #0
 8007414:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741a:	2200      	movs	r2, #0
 800741c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	4619      	mov	r1, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3310      	adds	r3, #16
 800742e:	461a      	mov	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007434:	f7fe fc3a 	bl	8005cac <HAL_DMA_Start_IT>
 8007438:	4603      	mov	r3, r0
 800743a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800743c:	7dfb      	ldrb	r3, [r7, #23]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d13d      	bne.n	80074be <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 8007442:	e013      	b.n	800746c <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2228      	movs	r2, #40	; 0x28
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007458:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e03d      	b.n	80074e8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800747a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800747c:	2300      	movs	r3, #0
 800747e:	613b      	str	r3, [r7, #16]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	613b      	str	r3, [r7, #16]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	613b      	str	r3, [r7, #16]
 8007490:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80074a8:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074b8:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	e014      	b.n	80074e8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	f043 0210 	orr.w	r2, r3, #16
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e000      	b.n	80074e8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 80074e6:	2302      	movs	r3, #2
  }
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	08009331 	.word	0x08009331
 80074f4:	0800910d 	.word	0x0800910d
 80074f8:	080092b7 	.word	0x080092b7

080074fc <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	603b      	str	r3, [r7, #0]
 8007508:	4613      	mov	r3, r2
 800750a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007512:	b2db      	uxtb	r3, r3
 8007514:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007518:	2b28      	cmp	r3, #40	; 0x28
 800751a:	f040 811e 	bne.w	800775a <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 8007524:	88fb      	ldrh	r3, [r7, #6]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e116      	b.n	800775c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007534:	2b01      	cmp	r3, #1
 8007536:	d101      	bne.n	800753c <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 8007538:	2302      	movs	r3, #2
 800753a:	e10f      	b.n	800775c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007552:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b2a      	cmp	r3, #42	; 0x2a
 800755e:	d127      	bne.n	80075b0 <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800756a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800756e:	d14c      	bne.n	800760a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007574:	2b00      	cmp	r3, #0
 8007576:	d048      	beq.n	800760a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007586:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758c:	4a75      	ldr	r2, [pc, #468]	; (8007764 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 800758e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	4618      	mov	r0, r3
 8007596:	f7fe fc51 	bl	8005e3c <HAL_DMA_Abort_IT>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d034      	beq.n	800760a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075aa:	4610      	mov	r0, r2
 80075ac:	4798      	blx	r3
 80075ae:	e02c      	b.n	800760a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b29      	cmp	r3, #41	; 0x29
 80075ba:	d126      	bne.n	800760a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ca:	d11e      	bne.n	800760a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075da:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d012      	beq.n	800760a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e8:	4a5e      	ldr	r2, [pc, #376]	; (8007764 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 80075ea:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fe fc23 	bl	8005e3c <HAL_DMA_Abort_IT>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d006      	beq.n	800760a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007606:	4610      	mov	r0, r2
 8007608:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b01      	cmp	r3, #1
 8007616:	d007      	beq.n	8007628 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0201 	orr.w	r2, r2, #1
 8007626:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007636:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	222a      	movs	r2, #42	; 0x2a
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2220      	movs	r2, #32
 8007644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	88fa      	ldrh	r2, [r7, #6]
 8007658:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766e:	2b00      	cmp	r3, #0
 8007670:	d022      	beq.n	80076b8 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007676:	4a3c      	ldr	r2, [pc, #240]	; (8007768 <HAL_I2C_Slave_Seq_Receive_DMA+0x26c>)
 8007678:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767e:	4a3b      	ldr	r2, [pc, #236]	; (800776c <HAL_I2C_Slave_Seq_Receive_DMA+0x270>)
 8007680:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007686:	2200      	movs	r2, #0
 8007688:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768e:	2200      	movs	r2, #0
 8007690:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3310      	adds	r3, #16
 800769c:	4619      	mov	r1, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	461a      	mov	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a8:	f7fe fb00 	bl	8005cac <HAL_DMA_Start_IT>
 80076ac:	4603      	mov	r3, r0
 80076ae:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d13d      	bne.n	8007732 <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 80076b6:	e013      	b.n	80076e0 <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2228      	movs	r2, #40	; 0x28
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e03d      	b.n	800775c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076ee:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076f0:	2300      	movs	r3, #0
 80076f2:	613b      	str	r3, [r7, #16]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	613b      	str	r3, [r7, #16]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	613b      	str	r3, [r7, #16]
 8007704:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800771c:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800772c:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	e014      	b.n	800775c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2220      	movs	r2, #32
 8007736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007746:	f043 0210 	orr.w	r2, r3, #16
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e000      	b.n	800775c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800775a:	2302      	movs	r3, #2
  }
}
 800775c:	4618      	mov	r0, r3
 800775e:	3718      	adds	r7, #24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	08009331 	.word	0x08009331
 8007768:	0800910d 	.word	0x0800910d
 800776c:	080092b7 	.word	0x080092b7

08007770 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b20      	cmp	r3, #32
 8007782:	d124      	bne.n	80077ce <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2228      	movs	r2, #40	; 0x28
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b01      	cmp	r3, #1
 8007798:	d007      	beq.n	80077aa <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f042 0201 	orr.w	r2, r2, #1
 80077a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077b8:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80077c8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	e000      	b.n	80077d0 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80077ce:	2302      	movs	r3, #2
  }
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b088      	sub	sp, #32
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007804:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007806:	7bfb      	ldrb	r3, [r7, #15]
 8007808:	2b10      	cmp	r3, #16
 800780a:	d003      	beq.n	8007814 <HAL_I2C_EV_IRQHandler+0x38>
 800780c:	7bfb      	ldrb	r3, [r7, #15]
 800780e:	2b40      	cmp	r3, #64	; 0x40
 8007810:	f040 80c1 	bne.w	8007996 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10d      	bne.n	800784a <HAL_I2C_EV_IRQHandler+0x6e>
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007834:	d003      	beq.n	800783e <HAL_I2C_EV_IRQHandler+0x62>
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800783c:	d101      	bne.n	8007842 <HAL_I2C_EV_IRQHandler+0x66>
 800783e:	2301      	movs	r3, #1
 8007840:	e000      	b.n	8007844 <HAL_I2C_EV_IRQHandler+0x68>
 8007842:	2300      	movs	r3, #0
 8007844:	2b01      	cmp	r3, #1
 8007846:	f000 8132 	beq.w	8007aae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00c      	beq.n	800786e <HAL_I2C_EV_IRQHandler+0x92>
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	0a5b      	lsrs	r3, r3, #9
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	d006      	beq.n	800786e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 ff86 	bl	8009772 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fd4d 	bl	8008306 <I2C_Master_SB>
 800786c:	e092      	b.n	8007994 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	08db      	lsrs	r3, r3, #3
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d009      	beq.n	800788e <HAL_I2C_EV_IRQHandler+0xb2>
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	0a5b      	lsrs	r3, r3, #9
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fdc3 	bl	8008412 <I2C_Master_ADD10>
 800788c:	e082      	b.n	8007994 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	085b      	lsrs	r3, r3, #1
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <HAL_I2C_EV_IRQHandler+0xd2>
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	0a5b      	lsrs	r3, r3, #9
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fddd 	bl	8008466 <I2C_Master_ADDR>
 80078ac:	e072      	b.n	8007994 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	089b      	lsrs	r3, r3, #2
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d03b      	beq.n	8007932 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078c8:	f000 80f3 	beq.w	8007ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	09db      	lsrs	r3, r3, #7
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00f      	beq.n	80078f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	0a9b      	lsrs	r3, r3, #10
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d009      	beq.n	80078f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	089b      	lsrs	r3, r3, #2
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d103      	bne.n	80078f8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f9c7 	bl	8007c84 <I2C_MasterTransmit_TXE>
 80078f6:	e04d      	b.n	8007994 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	089b      	lsrs	r3, r3, #2
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 80d6 	beq.w	8007ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	0a5b      	lsrs	r3, r3, #9
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 80cf 	beq.w	8007ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	2b21      	cmp	r3, #33	; 0x21
 8007918:	d103      	bne.n	8007922 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fa4e 	bl	8007dbc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007920:	e0c7      	b.n	8007ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007922:	7bfb      	ldrb	r3, [r7, #15]
 8007924:	2b40      	cmp	r3, #64	; 0x40
 8007926:	f040 80c4 	bne.w	8007ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fabc 	bl	8007ea8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007930:	e0bf      	b.n	8007ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800793c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007940:	f000 80b7 	beq.w	8007ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	099b      	lsrs	r3, r3, #6
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00f      	beq.n	8007970 <HAL_I2C_EV_IRQHandler+0x194>
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	0a9b      	lsrs	r3, r3, #10
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b00      	cmp	r3, #0
 800795a:	d009      	beq.n	8007970 <HAL_I2C_EV_IRQHandler+0x194>
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	089b      	lsrs	r3, r3, #2
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	d103      	bne.n	8007970 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fb31 	bl	8007fd0 <I2C_MasterReceive_RXNE>
 800796e:	e011      	b.n	8007994 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	089b      	lsrs	r3, r3, #2
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 809a 	beq.w	8007ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	0a5b      	lsrs	r3, r3, #9
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 8093 	beq.w	8007ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fbd0 	bl	8008132 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007992:	e08e      	b.n	8007ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007994:	e08d      	b.n	8007ab2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d004      	beq.n	80079a8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	61fb      	str	r3, [r7, #28]
 80079a6:	e007      	b.n	80079b8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	085b      	lsrs	r3, r3, #1
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d012      	beq.n	80079ea <HAL_I2C_EV_IRQHandler+0x20e>
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	0a5b      	lsrs	r3, r3, #9
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00c      	beq.n	80079ea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80079e0:	69b9      	ldr	r1, [r7, #24]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 ff8e 	bl	8008904 <I2C_Slave_ADDR>
 80079e8:	e066      	b.n	8007ab8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	091b      	lsrs	r3, r3, #4
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d009      	beq.n	8007a0a <HAL_I2C_EV_IRQHandler+0x22e>
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	0a5b      	lsrs	r3, r3, #9
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 ffc8 	bl	8008998 <I2C_Slave_STOPF>
 8007a08:	e056      	b.n	8007ab8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
 8007a0c:	2b21      	cmp	r3, #33	; 0x21
 8007a0e:	d002      	beq.n	8007a16 <HAL_I2C_EV_IRQHandler+0x23a>
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b29      	cmp	r3, #41	; 0x29
 8007a14:	d125      	bne.n	8007a62 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	09db      	lsrs	r3, r3, #7
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00f      	beq.n	8007a42 <HAL_I2C_EV_IRQHandler+0x266>
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	0a9b      	lsrs	r3, r3, #10
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d009      	beq.n	8007a42 <HAL_I2C_EV_IRQHandler+0x266>
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	089b      	lsrs	r3, r3, #2
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d103      	bne.n	8007a42 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fea4 	bl	8008788 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a40:	e039      	b.n	8007ab6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	089b      	lsrs	r3, r3, #2
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d033      	beq.n	8007ab6 <HAL_I2C_EV_IRQHandler+0x2da>
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	0a5b      	lsrs	r3, r3, #9
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d02d      	beq.n	8007ab6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fed1 	bl	8008802 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a60:	e029      	b.n	8007ab6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	099b      	lsrs	r3, r3, #6
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00f      	beq.n	8007a8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	0a9b      	lsrs	r3, r3, #10
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d009      	beq.n	8007a8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	089b      	lsrs	r3, r3, #2
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d103      	bne.n	8007a8e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fedc 	bl	8008844 <I2C_SlaveReceive_RXNE>
 8007a8c:	e014      	b.n	8007ab8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	089b      	lsrs	r3, r3, #2
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00e      	beq.n	8007ab8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	0a5b      	lsrs	r3, r3, #9
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d008      	beq.n	8007ab8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 ff0a 	bl	80088c0 <I2C_SlaveReceive_BTF>
 8007aac:	e004      	b.n	8007ab8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007aae:	bf00      	nop
 8007ab0:	e002      	b.n	8007ab8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ab2:	bf00      	nop
 8007ab4:	e000      	b.n	8007ab8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007ab6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007ab8:	3720      	adds	r7, #32
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b08a      	sub	sp, #40	; 0x28
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ae0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	0a1b      	lsrs	r3, r3, #8
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00e      	beq.n	8007b0c <HAL_I2C_ER_IRQHandler+0x4e>
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	0a1b      	lsrs	r3, r3, #8
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d008      	beq.n	8007b0c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	f043 0301 	orr.w	r3, r3, #1
 8007b00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b0a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	0a5b      	lsrs	r3, r3, #9
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00e      	beq.n	8007b36 <HAL_I2C_ER_IRQHandler+0x78>
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	0a1b      	lsrs	r3, r3, #8
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d008      	beq.n	8007b36 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	f043 0302 	orr.w	r3, r3, #2
 8007b2a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007b34:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	0a9b      	lsrs	r3, r3, #10
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d03f      	beq.n	8007bc2 <HAL_I2C_ER_IRQHandler+0x104>
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	0a1b      	lsrs	r3, r3, #8
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d039      	beq.n	8007bc2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007b4e:	7efb      	ldrb	r3, [r7, #27]
 8007b50:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b60:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b66:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007b68:	7ebb      	ldrb	r3, [r7, #26]
 8007b6a:	2b20      	cmp	r3, #32
 8007b6c:	d112      	bne.n	8007b94 <HAL_I2C_ER_IRQHandler+0xd6>
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10f      	bne.n	8007b94 <HAL_I2C_ER_IRQHandler+0xd6>
 8007b74:	7cfb      	ldrb	r3, [r7, #19]
 8007b76:	2b21      	cmp	r3, #33	; 0x21
 8007b78:	d008      	beq.n	8007b8c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007b7a:	7cfb      	ldrb	r3, [r7, #19]
 8007b7c:	2b29      	cmp	r3, #41	; 0x29
 8007b7e:	d005      	beq.n	8007b8c <HAL_I2C_ER_IRQHandler+0xce>
 8007b80:	7cfb      	ldrb	r3, [r7, #19]
 8007b82:	2b28      	cmp	r3, #40	; 0x28
 8007b84:	d106      	bne.n	8007b94 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2b21      	cmp	r3, #33	; 0x21
 8007b8a:	d103      	bne.n	8007b94 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 f833 	bl	8008bf8 <I2C_Slave_AF>
 8007b92:	e016      	b.n	8007bc2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b9c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	f043 0304 	orr.w	r3, r3, #4
 8007ba4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007ba6:	7efb      	ldrb	r3, [r7, #27]
 8007ba8:	2b10      	cmp	r3, #16
 8007baa:	d002      	beq.n	8007bb2 <HAL_I2C_ER_IRQHandler+0xf4>
 8007bac:	7efb      	ldrb	r3, [r7, #27]
 8007bae:	2b40      	cmp	r3, #64	; 0x40
 8007bb0:	d107      	bne.n	8007bc2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bc0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	0adb      	lsrs	r3, r3, #11
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00e      	beq.n	8007bec <HAL_I2C_ER_IRQHandler+0x12e>
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	0a1b      	lsrs	r3, r3, #8
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d008      	beq.n	8007bec <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	f043 0308 	orr.w	r3, r3, #8
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007bea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d008      	beq.n	8007c04 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf8:	431a      	orrs	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f001 f86a 	bl	8008cd8 <I2C_ITError>
  }
}
 8007c04:	bf00      	nop
 8007c06:	3728      	adds	r7, #40	; 0x28
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d150      	bne.n	8007d4c <I2C_MasterTransmit_TXE+0xc8>
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
 8007cac:	2b21      	cmp	r3, #33	; 0x21
 8007cae:	d14d      	bne.n	8007d4c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2b08      	cmp	r3, #8
 8007cb4:	d01d      	beq.n	8007cf2 <I2C_MasterTransmit_TXE+0x6e>
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b20      	cmp	r3, #32
 8007cba:	d01a      	beq.n	8007cf2 <I2C_MasterTransmit_TXE+0x6e>
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cc2:	d016      	beq.n	8007cf2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685a      	ldr	r2, [r3, #4]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007cd2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2211      	movs	r2, #17
 8007cd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2220      	movs	r2, #32
 8007ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff ff8e 	bl	8007c0c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007cf0:	e060      	b.n	8007db4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d00:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d10:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2220      	movs	r2, #32
 8007d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b40      	cmp	r3, #64	; 0x40
 8007d2a:	d107      	bne.n	8007d3c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7ff ff87 	bl	8007c48 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d3a:	e03b      	b.n	8007db4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff ff61 	bl	8007c0c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d4a:	e033      	b.n	8007db4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
 8007d4e:	2b21      	cmp	r3, #33	; 0x21
 8007d50:	d005      	beq.n	8007d5e <I2C_MasterTransmit_TXE+0xda>
 8007d52:	7bbb      	ldrb	r3, [r7, #14]
 8007d54:	2b40      	cmp	r3, #64	; 0x40
 8007d56:	d12d      	bne.n	8007db4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	2b22      	cmp	r3, #34	; 0x22
 8007d5c:	d12a      	bne.n	8007db4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d108      	bne.n	8007d7a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d76:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007d78:	e01c      	b.n	8007db4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b40      	cmp	r3, #64	; 0x40
 8007d84:	d103      	bne.n	8007d8e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f88e 	bl	8007ea8 <I2C_MemoryTransmit_TXE_BTF>
}
 8007d8c:	e012      	b.n	8007db4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	781a      	ldrb	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	3b01      	subs	r3, #1
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007db2:	e7ff      	b.n	8007db4 <I2C_MasterTransmit_TXE+0x130>
 8007db4:	bf00      	nop
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b21      	cmp	r3, #33	; 0x21
 8007dd4:	d164      	bne.n	8007ea0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d012      	beq.n	8007e06 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	781a      	ldrb	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007e04:	e04c      	b.n	8007ea0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	d01d      	beq.n	8007e48 <I2C_MasterTransmit_BTF+0x8c>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b20      	cmp	r3, #32
 8007e10:	d01a      	beq.n	8007e48 <I2C_MasterTransmit_BTF+0x8c>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e18:	d016      	beq.n	8007e48 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e28:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2211      	movs	r2, #17
 8007e2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7ff fee3 	bl	8007c0c <HAL_I2C_MasterTxCpltCallback>
}
 8007e46:	e02b      	b.n	8007ea0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e56:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e66:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b40      	cmp	r3, #64	; 0x40
 8007e80:	d107      	bne.n	8007e92 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7ff fedc 	bl	8007c48 <HAL_I2C_MemTxCpltCallback>
}
 8007e90:	e006      	b.n	8007ea0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7ff feb6 	bl	8007c0c <HAL_I2C_MasterTxCpltCallback>
}
 8007ea0:	bf00      	nop
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d11d      	bne.n	8007efc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d10b      	bne.n	8007ee0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ed8:	1c9a      	adds	r2, r3, #2
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007ede:	e073      	b.n	8007fc8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	121b      	asrs	r3, r3, #8
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef4:	1c5a      	adds	r2, r3, #1
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007efa:	e065      	b.n	8007fc8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d10b      	bne.n	8007f1c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007f1a:	e055      	b.n	8007fc8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d151      	bne.n	8007fc8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	2b22      	cmp	r3, #34	; 0x22
 8007f28:	d10d      	bne.n	8007f46 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f38:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007f44:	e040      	b.n	8007fc8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d015      	beq.n	8007f7c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	2b21      	cmp	r3, #33	; 0x21
 8007f54:	d112      	bne.n	8007f7c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	781a      	ldrb	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	3b01      	subs	r3, #1
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007f7a:	e025      	b.n	8007fc8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d120      	bne.n	8007fc8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	2b21      	cmp	r3, #33	; 0x21
 8007f8a:	d11d      	bne.n	8007fc8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f9a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007faa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7ff fe40 	bl	8007c48 <HAL_I2C_MemTxCpltCallback>
}
 8007fc8:	bf00      	nop
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b22      	cmp	r3, #34	; 0x22
 8007fe2:	f040 80a2 	bne.w	800812a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b03      	cmp	r3, #3
 8007ff2:	d921      	bls.n	8008038 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	691a      	ldr	r2, [r3, #16]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	b2d2      	uxtb	r2, r2
 8008000:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008010:	b29b      	uxth	r3, r3
 8008012:	3b01      	subs	r3, #1
 8008014:	b29a      	uxth	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800801e:	b29b      	uxth	r3, r3
 8008020:	2b03      	cmp	r3, #3
 8008022:	f040 8082 	bne.w	800812a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008034:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8008036:	e078      	b.n	800812a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	2b02      	cmp	r3, #2
 800803e:	d074      	beq.n	800812a <I2C_MasterReceive_RXNE+0x15a>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d002      	beq.n	800804c <I2C_MasterReceive_RXNE+0x7c>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d16e      	bne.n	800812a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f001 fb2f 	bl	80096b0 <I2C_WaitOnSTOPRequestThroughIT>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d142      	bne.n	80080de <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008066:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008076:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691a      	ldr	r2, [r3, #16]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008082:	b2d2      	uxtb	r2, r2
 8008084:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808a:	1c5a      	adds	r2, r3, #1
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008094:	b29b      	uxth	r3, r3
 8008096:	3b01      	subs	r3, #1
 8008098:	b29a      	uxth	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2220      	movs	r2, #32
 80080a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b40      	cmp	r3, #64	; 0x40
 80080b0:	d10a      	bne.n	80080c8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7ff fdcb 	bl	8007c5c <HAL_I2C_MemRxCpltCallback>
}
 80080c6:	e030      	b.n	800812a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2212      	movs	r2, #18
 80080d4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff fda2 	bl	8007c20 <HAL_I2C_MasterRxCpltCallback>
}
 80080dc:	e025      	b.n	800812a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80080ec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	691a      	ldr	r2, [r3, #16]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	b2d2      	uxtb	r2, r2
 80080fa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008100:	1c5a      	adds	r2, r3, #1
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800810a:	b29b      	uxth	r3, r3
 800810c:	3b01      	subs	r3, #1
 800810e:	b29a      	uxth	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2220      	movs	r2, #32
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7f8 ff13 	bl	8000f50 <HAL_I2C_ErrorCallback>
}
 800812a:	bf00      	nop
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b084      	sub	sp, #16
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008144:	b29b      	uxth	r3, r3
 8008146:	2b04      	cmp	r3, #4
 8008148:	d11b      	bne.n	8008182 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008158:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	691a      	ldr	r2, [r3, #16]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	b2d2      	uxtb	r2, r2
 8008166:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008176:	b29b      	uxth	r3, r3
 8008178:	3b01      	subs	r3, #1
 800817a:	b29a      	uxth	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008180:	e0bd      	b.n	80082fe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008186:	b29b      	uxth	r3, r3
 8008188:	2b03      	cmp	r3, #3
 800818a:	d129      	bne.n	80081e0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800819a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b04      	cmp	r3, #4
 80081a0:	d00a      	beq.n	80081b8 <I2C_MasterReceive_BTF+0x86>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d007      	beq.n	80081b8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081b6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	691a      	ldr	r2, [r3, #16]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c2:	b2d2      	uxtb	r2, r2
 80081c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	1c5a      	adds	r2, r3, #1
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	b29a      	uxth	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80081de:	e08e      	b.n	80082fe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d176      	bne.n	80082d8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d002      	beq.n	80081f6 <I2C_MasterReceive_BTF+0xc4>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b10      	cmp	r3, #16
 80081f4:	d108      	bne.n	8008208 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	e019      	b.n	800823c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b04      	cmp	r3, #4
 800820c:	d002      	beq.n	8008214 <I2C_MasterReceive_BTF+0xe2>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2b02      	cmp	r3, #2
 8008212:	d108      	bne.n	8008226 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	e00a      	b.n	800823c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2b10      	cmp	r3, #16
 800822a:	d007      	beq.n	800823c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800823a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691a      	ldr	r2, [r3, #16]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008246:	b2d2      	uxtb	r2, r2
 8008248:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008258:	b29b      	uxth	r3, r3
 800825a:	3b01      	subs	r3, #1
 800825c:	b29a      	uxth	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	691a      	ldr	r2, [r3, #16]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826c:	b2d2      	uxtb	r2, r2
 800826e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008274:	1c5a      	adds	r2, r3, #1
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800827e:	b29b      	uxth	r3, r3
 8008280:	3b01      	subs	r3, #1
 8008282:	b29a      	uxth	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685a      	ldr	r2, [r3, #4]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008296:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2220      	movs	r2, #32
 800829c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b40      	cmp	r3, #64	; 0x40
 80082aa:	d10a      	bne.n	80082c2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7ff fcce 	bl	8007c5c <HAL_I2C_MemRxCpltCallback>
}
 80082c0:	e01d      	b.n	80082fe <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2212      	movs	r2, #18
 80082ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff fca5 	bl	8007c20 <HAL_I2C_MasterRxCpltCallback>
}
 80082d6:	e012      	b.n	80082fe <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	691a      	ldr	r2, [r3, #16]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e2:	b2d2      	uxtb	r2, r2
 80082e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	3b01      	subs	r3, #1
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80082fe:	bf00      	nop
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008306:	b480      	push	{r7}
 8008308:	b083      	sub	sp, #12
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b40      	cmp	r3, #64	; 0x40
 8008318:	d117      	bne.n	800834a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800831e:	2b00      	cmp	r3, #0
 8008320:	d109      	bne.n	8008336 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008326:	b2db      	uxtb	r3, r3
 8008328:	461a      	mov	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008332:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008334:	e067      	b.n	8008406 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800833a:	b2db      	uxtb	r3, r3
 800833c:	f043 0301 	orr.w	r3, r3, #1
 8008340:	b2da      	uxtb	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	611a      	str	r2, [r3, #16]
}
 8008348:	e05d      	b.n	8008406 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008352:	d133      	bne.n	80083bc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b21      	cmp	r3, #33	; 0x21
 800835e:	d109      	bne.n	8008374 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008364:	b2db      	uxtb	r3, r3
 8008366:	461a      	mov	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008370:	611a      	str	r2, [r3, #16]
 8008372:	e008      	b.n	8008386 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008378:	b2db      	uxtb	r3, r3
 800837a:	f043 0301 	orr.w	r3, r3, #1
 800837e:	b2da      	uxtb	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800838a:	2b00      	cmp	r3, #0
 800838c:	d004      	beq.n	8008398 <I2C_Master_SB+0x92>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008394:	2b00      	cmp	r3, #0
 8008396:	d108      	bne.n	80083aa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839c:	2b00      	cmp	r3, #0
 800839e:	d032      	beq.n	8008406 <I2C_Master_SB+0x100>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d02d      	beq.n	8008406 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083b8:	605a      	str	r2, [r3, #4]
}
 80083ba:	e024      	b.n	8008406 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10e      	bne.n	80083e2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	11db      	asrs	r3, r3, #7
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	f003 0306 	and.w	r3, r3, #6
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	f063 030f 	orn	r3, r3, #15
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	611a      	str	r2, [r3, #16]
}
 80083e0:	e011      	b.n	8008406 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d10d      	bne.n	8008406 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	11db      	asrs	r3, r3, #7
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f003 0306 	and.w	r3, r3, #6
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	f063 030e 	orn	r3, r3, #14
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	611a      	str	r2, [r3, #16]
}
 8008406:	bf00      	nop
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008412:	b480      	push	{r7}
 8008414:	b083      	sub	sp, #12
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800841e:	b2da      	uxtb	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842a:	2b00      	cmp	r3, #0
 800842c:	d004      	beq.n	8008438 <I2C_Master_ADD10+0x26>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008434:	2b00      	cmp	r3, #0
 8008436:	d108      	bne.n	800844a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00c      	beq.n	800845a <I2C_Master_ADD10+0x48>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008446:	2b00      	cmp	r3, #0
 8008448:	d007      	beq.n	800845a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008458:	605a      	str	r2, [r3, #4]
  }
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008466:	b480      	push	{r7}
 8008468:	b091      	sub	sp, #68	; 0x44
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008474:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008482:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b22      	cmp	r3, #34	; 0x22
 800848e:	f040 8169 	bne.w	8008764 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10f      	bne.n	80084ba <I2C_Master_ADDR+0x54>
 800849a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800849e:	2b40      	cmp	r3, #64	; 0x40
 80084a0:	d10b      	bne.n	80084ba <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084a2:	2300      	movs	r3, #0
 80084a4:	633b      	str	r3, [r7, #48]	; 0x30
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	633b      	str	r3, [r7, #48]	; 0x30
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	633b      	str	r3, [r7, #48]	; 0x30
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	e160      	b.n	800877c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d11d      	bne.n	80084fe <I2C_Master_ADDR+0x98>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80084ca:	d118      	bne.n	80084fe <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084cc:	2300      	movs	r3, #0
 80084ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084f0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f6:	1c5a      	adds	r2, r3, #1
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	651a      	str	r2, [r3, #80]	; 0x50
 80084fc:	e13e      	b.n	800877c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008502:	b29b      	uxth	r3, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d113      	bne.n	8008530 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008508:	2300      	movs	r3, #0
 800850a:	62bb      	str	r3, [r7, #40]	; 0x28
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	62bb      	str	r3, [r7, #40]	; 0x28
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	62bb      	str	r3, [r7, #40]	; 0x28
 800851c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800852c:	601a      	str	r2, [r3, #0]
 800852e:	e115      	b.n	800875c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008534:	b29b      	uxth	r3, r3
 8008536:	2b01      	cmp	r3, #1
 8008538:	f040 808a 	bne.w	8008650 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800853c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008542:	d137      	bne.n	80085b4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008552:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800855e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008562:	d113      	bne.n	800858c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008572:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008574:	2300      	movs	r3, #0
 8008576:	627b      	str	r3, [r7, #36]	; 0x24
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	627b      	str	r3, [r7, #36]	; 0x24
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	627b      	str	r3, [r7, #36]	; 0x24
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	e0e7      	b.n	800875c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800858c:	2300      	movs	r3, #0
 800858e:	623b      	str	r3, [r7, #32]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	623b      	str	r3, [r7, #32]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	623b      	str	r3, [r7, #32]
 80085a0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	e0d3      	b.n	800875c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80085b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b6:	2b08      	cmp	r3, #8
 80085b8:	d02e      	beq.n	8008618 <I2C_Master_ADDR+0x1b2>
 80085ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085bc:	2b20      	cmp	r3, #32
 80085be:	d02b      	beq.n	8008618 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80085c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c2:	2b12      	cmp	r3, #18
 80085c4:	d102      	bne.n	80085cc <I2C_Master_ADDR+0x166>
 80085c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d125      	bne.n	8008618 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80085cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	d00e      	beq.n	80085f0 <I2C_Master_ADDR+0x18a>
 80085d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d00b      	beq.n	80085f0 <I2C_Master_ADDR+0x18a>
 80085d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085da:	2b10      	cmp	r3, #16
 80085dc:	d008      	beq.n	80085f0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	e007      	b.n	8008600 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085fe:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008600:	2300      	movs	r3, #0
 8008602:	61fb      	str	r3, [r7, #28]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	61fb      	str	r3, [r7, #28]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	61fb      	str	r3, [r7, #28]
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	e0a1      	b.n	800875c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008626:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008628:	2300      	movs	r3, #0
 800862a:	61bb      	str	r3, [r7, #24]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	61bb      	str	r3, [r7, #24]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	61bb      	str	r3, [r7, #24]
 800863c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	e085      	b.n	800875c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008654:	b29b      	uxth	r3, r3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d14d      	bne.n	80086f6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800865a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865c:	2b04      	cmp	r3, #4
 800865e:	d016      	beq.n	800868e <I2C_Master_ADDR+0x228>
 8008660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008662:	2b02      	cmp	r3, #2
 8008664:	d013      	beq.n	800868e <I2C_Master_ADDR+0x228>
 8008666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008668:	2b10      	cmp	r3, #16
 800866a:	d010      	beq.n	800868e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800867a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	e007      	b.n	800869e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800869c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ac:	d117      	bne.n	80086de <I2C_Master_ADDR+0x278>
 80086ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086b4:	d00b      	beq.n	80086ce <I2C_Master_ADDR+0x268>
 80086b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d008      	beq.n	80086ce <I2C_Master_ADDR+0x268>
 80086bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086be:	2b08      	cmp	r3, #8
 80086c0:	d005      	beq.n	80086ce <I2C_Master_ADDR+0x268>
 80086c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c4:	2b10      	cmp	r3, #16
 80086c6:	d002      	beq.n	80086ce <I2C_Master_ADDR+0x268>
 80086c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ca:	2b20      	cmp	r3, #32
 80086cc:	d107      	bne.n	80086de <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086dc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086de:	2300      	movs	r3, #0
 80086e0:	617b      	str	r3, [r7, #20]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	617b      	str	r3, [r7, #20]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	617b      	str	r3, [r7, #20]
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	e032      	b.n	800875c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008704:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008714:	d117      	bne.n	8008746 <I2C_Master_ADDR+0x2e0>
 8008716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008718:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800871c:	d00b      	beq.n	8008736 <I2C_Master_ADDR+0x2d0>
 800871e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008720:	2b01      	cmp	r3, #1
 8008722:	d008      	beq.n	8008736 <I2C_Master_ADDR+0x2d0>
 8008724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008726:	2b08      	cmp	r3, #8
 8008728:	d005      	beq.n	8008736 <I2C_Master_ADDR+0x2d0>
 800872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872c:	2b10      	cmp	r3, #16
 800872e:	d002      	beq.n	8008736 <I2C_Master_ADDR+0x2d0>
 8008730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008732:	2b20      	cmp	r3, #32
 8008734:	d107      	bne.n	8008746 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008744:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008746:	2300      	movs	r3, #0
 8008748:	613b      	str	r3, [r7, #16]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	613b      	str	r3, [r7, #16]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	613b      	str	r3, [r7, #16]
 800875a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008762:	e00b      	b.n	800877c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008764:	2300      	movs	r3, #0
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	68fb      	ldr	r3, [r7, #12]
}
 800877a:	e7ff      	b.n	800877c <I2C_Master_ADDR+0x316>
 800877c:	bf00      	nop
 800877e:	3744      	adds	r7, #68	; 0x44
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008796:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800879c:	b29b      	uxth	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d02b      	beq.n	80087fa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a6:	781a      	ldrb	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087bc:	b29b      	uxth	r3, r3
 80087be:	3b01      	subs	r3, #1
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d114      	bne.n	80087fa <I2C_SlaveTransmit_TXE+0x72>
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
 80087d2:	2b29      	cmp	r3, #41	; 0x29
 80087d4:	d111      	bne.n	80087fa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087e4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2221      	movs	r2, #33	; 0x21
 80087ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2228      	movs	r2, #40	; 0x28
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f7ff fa1d 	bl	8007c34 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80087fa:	bf00      	nop
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008802:	b480      	push	{r7}
 8008804:	b083      	sub	sp, #12
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800880e:	b29b      	uxth	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	d011      	beq.n	8008838 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	781a      	ldrb	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	1c5a      	adds	r2, r3, #1
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800882e:	b29b      	uxth	r3, r3
 8008830:	3b01      	subs	r3, #1
 8008832:	b29a      	uxth	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008852:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008858:	b29b      	uxth	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d02c      	beq.n	80088b8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	691a      	ldr	r2, [r3, #16]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800887a:	b29b      	uxth	r3, r3
 800887c:	3b01      	subs	r3, #1
 800887e:	b29a      	uxth	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008888:	b29b      	uxth	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d114      	bne.n	80088b8 <I2C_SlaveReceive_RXNE+0x74>
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	2b2a      	cmp	r3, #42	; 0x2a
 8008892:	d111      	bne.n	80088b8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088a2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2222      	movs	r2, #34	; 0x22
 80088a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2228      	movs	r2, #40	; 0x28
 80088ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7f9 fe7e 	bl	80025b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80088b8:	bf00      	nop
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d012      	beq.n	80088f8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	691a      	ldr	r2, [r3, #16]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	b2d2      	uxtb	r2, r2
 80088de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	1c5a      	adds	r2, r3, #1
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	3b01      	subs	r3, #1
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800890e:	2300      	movs	r3, #0
 8008910:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008918:	b2db      	uxtb	r3, r3
 800891a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800891e:	2b28      	cmp	r3, #40	; 0x28
 8008920:	d127      	bne.n	8008972 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	685a      	ldr	r2, [r3, #4]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008930:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	089b      	lsrs	r3, r3, #2
 8008936:	f003 0301 	and.w	r3, r3, #1
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800893e:	2301      	movs	r3, #1
 8008940:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	09db      	lsrs	r3, r3, #7
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	2b00      	cmp	r3, #0
 800894c:	d103      	bne.n	8008956 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	81bb      	strh	r3, [r7, #12]
 8008954:	e002      	b.n	800895c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008964:	89ba      	ldrh	r2, [r7, #12]
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7f9 fde8 	bl	8002540 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008970:	e00e      	b.n	8008990 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008972:	2300      	movs	r3, #0
 8008974:	60bb      	str	r3, [r7, #8]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	60bb      	str	r3, [r7, #8]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	60bb      	str	r3, [r7, #8]
 8008986:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008990:	bf00      	nop
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089a6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80089b6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80089b8:	2300      	movs	r3, #0
 80089ba:	60bb      	str	r3, [r7, #8]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	60bb      	str	r3, [r7, #8]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f042 0201 	orr.w	r2, r2, #1
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089e4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089f4:	d172      	bne.n	8008adc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
 80089f8:	2b22      	cmp	r3, #34	; 0x22
 80089fa:	d002      	beq.n	8008a02 <I2C_Slave_STOPF+0x6a>
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008a00:	d135      	bne.n	8008a6e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d005      	beq.n	8008a26 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1e:	f043 0204 	orr.w	r2, r3, #4
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fd fbaa 	bl	8006194 <HAL_DMA_GetState>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d049      	beq.n	8008ada <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4a:	4a69      	ldr	r2, [pc, #420]	; (8008bf0 <I2C_Slave_STOPF+0x258>)
 8008a4c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fd f9f2 	bl	8005e3c <HAL_DMA_Abort_IT>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d03d      	beq.n	8008ada <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008a68:	4610      	mov	r0, r2
 8008a6a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a6c:	e035      	b.n	8008ada <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d005      	beq.n	8008a92 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8a:	f043 0204 	orr.w	r2, r3, #4
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	685a      	ldr	r2, [r3, #4]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008aa0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fd fb74 	bl	8006194 <HAL_DMA_GetState>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d014      	beq.n	8008adc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab6:	4a4e      	ldr	r2, [pc, #312]	; (8008bf0 <I2C_Slave_STOPF+0x258>)
 8008ab8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fd f9bc 	bl	8005e3c <HAL_DMA_Abort_IT>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d008      	beq.n	8008adc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	4798      	blx	r3
 8008ad8:	e000      	b.n	8008adc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008ada:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d03e      	beq.n	8008b64 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b04      	cmp	r3, #4
 8008af2:	d112      	bne.n	8008b1a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691a      	ldr	r2, [r3, #16]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	b2d2      	uxtb	r2, r2
 8008b00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b06:	1c5a      	adds	r2, r3, #1
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	3b01      	subs	r3, #1
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b24:	2b40      	cmp	r3, #64	; 0x40
 8008b26:	d112      	bne.n	8008b4e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	691a      	ldr	r2, [r3, #16]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b32:	b2d2      	uxtb	r2, r2
 8008b34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3a:	1c5a      	adds	r2, r3, #1
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	3b01      	subs	r3, #1
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d005      	beq.n	8008b64 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5c:	f043 0204 	orr.w	r2, r3, #4
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d003      	beq.n	8008b74 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f8b3 	bl	8008cd8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008b72:	e039      	b.n	8008be8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
 8008b76:	2b2a      	cmp	r3, #42	; 0x2a
 8008b78:	d109      	bne.n	8008b8e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2228      	movs	r2, #40	; 0x28
 8008b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f7f9 fd13 	bl	80025b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b28      	cmp	r3, #40	; 0x28
 8008b98:	d111      	bne.n	8008bbe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a15      	ldr	r2, [pc, #84]	; (8008bf4 <I2C_Slave_STOPF+0x25c>)
 8008b9e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2220      	movs	r2, #32
 8008baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f7f9 fcee 	bl	8002598 <HAL_I2C_ListenCpltCallback>
}
 8008bbc:	e014      	b.n	8008be8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc2:	2b22      	cmp	r3, #34	; 0x22
 8008bc4:	d002      	beq.n	8008bcc <I2C_Slave_STOPF+0x234>
 8008bc6:	7bfb      	ldrb	r3, [r7, #15]
 8008bc8:	2b22      	cmp	r3, #34	; 0x22
 8008bca:	d10d      	bne.n	8008be8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7f9 fce6 	bl	80025b4 <HAL_I2C_SlaveRxCpltCallback>
}
 8008be8:	bf00      	nop
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	08009331 	.word	0x08009331
 8008bf4:	ffff0000 	.word	0xffff0000

08008bf8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c06:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	2b08      	cmp	r3, #8
 8008c12:	d002      	beq.n	8008c1a <I2C_Slave_AF+0x22>
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2b20      	cmp	r3, #32
 8008c18:	d129      	bne.n	8008c6e <I2C_Slave_AF+0x76>
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	2b28      	cmp	r3, #40	; 0x28
 8008c1e:	d126      	bne.n	8008c6e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a2c      	ldr	r2, [pc, #176]	; (8008cd4 <I2C_Slave_AF+0xdc>)
 8008c24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008c34:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c3e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c4e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2220      	movs	r2, #32
 8008c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7f9 fc96 	bl	8002598 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008c6c:	e02e      	b.n	8008ccc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	2b21      	cmp	r3, #33	; 0x21
 8008c72:	d126      	bne.n	8008cc2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a17      	ldr	r2, [pc, #92]	; (8008cd4 <I2C_Slave_AF+0xdc>)
 8008c78:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2221      	movs	r2, #33	; 0x21
 8008c7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2220      	movs	r2, #32
 8008c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008c9e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ca8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cb8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7fe ffba 	bl	8007c34 <HAL_I2C_SlaveTxCpltCallback>
}
 8008cc0:	e004      	b.n	8008ccc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008cca:	615a      	str	r2, [r3, #20]
}
 8008ccc:	bf00      	nop
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	ffff0000 	.word	0xffff0000

08008cd8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ce6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
 8008cf2:	2b10      	cmp	r3, #16
 8008cf4:	d002      	beq.n	8008cfc <I2C_ITError+0x24>
 8008cf6:	7bbb      	ldrb	r3, [r7, #14]
 8008cf8:	2b40      	cmp	r3, #64	; 0x40
 8008cfa:	d10a      	bne.n	8008d12 <I2C_ITError+0x3a>
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
 8008cfe:	2b22      	cmp	r3, #34	; 0x22
 8008d00:	d107      	bne.n	8008d12 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d10:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
 8008d14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008d18:	2b28      	cmp	r3, #40	; 0x28
 8008d1a:	d107      	bne.n	8008d2c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2228      	movs	r2, #40	; 0x28
 8008d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008d2a:	e015      	b.n	8008d58 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d3a:	d00a      	beq.n	8008d52 <I2C_ITError+0x7a>
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	2b60      	cmp	r3, #96	; 0x60
 8008d40:	d007      	beq.n	8008d52 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2220      	movs	r2, #32
 8008d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d66:	d162      	bne.n	8008e2e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d76:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d020      	beq.n	8008dc8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d8a:	4a6a      	ldr	r2, [pc, #424]	; (8008f34 <I2C_ITError+0x25c>)
 8008d8c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fd f852 	bl	8005e3c <HAL_DMA_Abort_IT>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 8089 	beq.w	8008eb2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0201 	bic.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2220      	movs	r2, #32
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	4798      	blx	r3
 8008dc6:	e074      	b.n	8008eb2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dcc:	4a59      	ldr	r2, [pc, #356]	; (8008f34 <I2C_ITError+0x25c>)
 8008dce:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7fd f831 	bl	8005e3c <HAL_DMA_Abort_IT>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d068      	beq.n	8008eb2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	695b      	ldr	r3, [r3, #20]
 8008de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dea:	2b40      	cmp	r3, #64	; 0x40
 8008dec:	d10b      	bne.n	8008e06 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	691a      	ldr	r2, [r3, #16]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	b2d2      	uxtb	r2, r2
 8008dfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e00:	1c5a      	adds	r2, r3, #1
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0201 	bic.w	r2, r2, #1
 8008e14:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e28:	4610      	mov	r0, r2
 8008e2a:	4798      	blx	r3
 8008e2c:	e041      	b.n	8008eb2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b60      	cmp	r3, #96	; 0x60
 8008e38:	d125      	bne.n	8008e86 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2220      	movs	r2, #32
 8008e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	695b      	ldr	r3, [r3, #20]
 8008e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e52:	2b40      	cmp	r3, #64	; 0x40
 8008e54:	d10b      	bne.n	8008e6e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	691a      	ldr	r2, [r3, #16]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e60:	b2d2      	uxtb	r2, r2
 8008e62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e68:	1c5a      	adds	r2, r3, #1
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f022 0201 	bic.w	r2, r2, #1
 8008e7c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7fe fef6 	bl	8007c70 <HAL_I2C_AbortCpltCallback>
 8008e84:	e015      	b.n	8008eb2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	695b      	ldr	r3, [r3, #20]
 8008e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e90:	2b40      	cmp	r3, #64	; 0x40
 8008e92:	d10b      	bne.n	8008eac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	691a      	ldr	r2, [r3, #16]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9e:	b2d2      	uxtb	r2, r2
 8008ea0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea6:	1c5a      	adds	r2, r3, #1
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7f8 f84f 	bl	8000f50 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10e      	bne.n	8008ee0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d109      	bne.n	8008ee0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d104      	bne.n	8008ee0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d007      	beq.n	8008ef0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008eee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efc:	f003 0304 	and.w	r3, r3, #4
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	d113      	bne.n	8008f2c <I2C_ITError+0x254>
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
 8008f06:	2b28      	cmp	r3, #40	; 0x28
 8008f08:	d110      	bne.n	8008f2c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a0a      	ldr	r2, [pc, #40]	; (8008f38 <I2C_ITError+0x260>)
 8008f0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2220      	movs	r2, #32
 8008f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7f9 fb36 	bl	8002598 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008f2c:	bf00      	nop
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	08009331 	.word	0x08009331
 8008f38:	ffff0000 	.word	0xffff0000

08008f3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b088      	sub	sp, #32
 8008f40:	af02      	add	r7, sp, #8
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	4608      	mov	r0, r1
 8008f46:	4611      	mov	r1, r2
 8008f48:	461a      	mov	r2, r3
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	817b      	strh	r3, [r7, #10]
 8008f4e:	460b      	mov	r3, r1
 8008f50:	813b      	strh	r3, [r7, #8]
 8008f52:	4613      	mov	r3, r2
 8008f54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 fa7c 	bl	8009480 <I2C_WaitOnFlagUntilTimeout>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00d      	beq.n	8008faa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f9c:	d103      	bne.n	8008fa6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fa4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e0aa      	b.n	8009100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008faa:	897b      	ldrh	r3, [r7, #10]
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	461a      	mov	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008fb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	6a3a      	ldr	r2, [r7, #32]
 8008fbe:	4952      	ldr	r1, [pc, #328]	; (8009108 <I2C_RequestMemoryRead+0x1cc>)
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 fab4 	bl	800952e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d001      	beq.n	8008fd0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e097      	b.n	8009100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	617b      	str	r3, [r7, #20]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	617b      	str	r3, [r7, #20]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	617b      	str	r3, [r7, #20]
 8008fe4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fe8:	6a39      	ldr	r1, [r7, #32]
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f000 fb1e 	bl	800962c <I2C_WaitOnTXEFlagUntilTimeout>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00d      	beq.n	8009012 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffa:	2b04      	cmp	r3, #4
 8008ffc:	d107      	bne.n	800900e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800900c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e076      	b.n	8009100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009012:	88fb      	ldrh	r3, [r7, #6]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d105      	bne.n	8009024 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009018:	893b      	ldrh	r3, [r7, #8]
 800901a:	b2da      	uxtb	r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	611a      	str	r2, [r3, #16]
 8009022:	e021      	b.n	8009068 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009024:	893b      	ldrh	r3, [r7, #8]
 8009026:	0a1b      	lsrs	r3, r3, #8
 8009028:	b29b      	uxth	r3, r3
 800902a:	b2da      	uxtb	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009034:	6a39      	ldr	r1, [r7, #32]
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 faf8 	bl	800962c <I2C_WaitOnTXEFlagUntilTimeout>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00d      	beq.n	800905e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009046:	2b04      	cmp	r3, #4
 8009048:	d107      	bne.n	800905a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009058:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e050      	b.n	8009100 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800905e:	893b      	ldrh	r3, [r7, #8]
 8009060:	b2da      	uxtb	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800906a:	6a39      	ldr	r1, [r7, #32]
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f000 fadd 	bl	800962c <I2C_WaitOnTXEFlagUntilTimeout>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00d      	beq.n	8009094 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907c:	2b04      	cmp	r3, #4
 800907e:	d107      	bne.n	8009090 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800908e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e035      	b.n	8009100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	6a3b      	ldr	r3, [r7, #32]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 f9e5 	bl	8009480 <I2C_WaitOnFlagUntilTimeout>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00d      	beq.n	80090d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ca:	d103      	bne.n	80090d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	e013      	b.n	8009100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80090d8:	897b      	ldrh	r3, [r7, #10]
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	f043 0301 	orr.w	r3, r3, #1
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80090e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ea:	6a3a      	ldr	r2, [r7, #32]
 80090ec:	4906      	ldr	r1, [pc, #24]	; (8009108 <I2C_RequestMemoryRead+0x1cc>)
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f000 fa1d 	bl	800952e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e000      	b.n	8009100 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3718      	adds	r7, #24
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	00010002 	.word	0x00010002

0800910c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b086      	sub	sp, #24
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009118:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009120:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009128:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800913e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009144:	2b00      	cmp	r3, #0
 8009146:	d003      	beq.n	8009150 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800914c:	2200      	movs	r2, #0
 800914e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009154:	2b00      	cmp	r3, #0
 8009156:	d003      	beq.n	8009160 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915c:	2200      	movs	r2, #0
 800915e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8009160:	7cfb      	ldrb	r3, [r7, #19]
 8009162:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8009166:	2b21      	cmp	r3, #33	; 0x21
 8009168:	d007      	beq.n	800917a <I2C_DMAXferCplt+0x6e>
 800916a:	7cfb      	ldrb	r3, [r7, #19]
 800916c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8009170:	2b22      	cmp	r3, #34	; 0x22
 8009172:	d131      	bne.n	80091d8 <I2C_DMAXferCplt+0xcc>
 8009174:	7cbb      	ldrb	r3, [r7, #18]
 8009176:	2b20      	cmp	r3, #32
 8009178:	d12e      	bne.n	80091d8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	685a      	ldr	r2, [r3, #4]
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009188:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	2200      	movs	r2, #0
 800918e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009190:	7cfb      	ldrb	r3, [r7, #19]
 8009192:	2b29      	cmp	r3, #41	; 0x29
 8009194:	d10a      	bne.n	80091ac <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	2221      	movs	r2, #33	; 0x21
 800919a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	2228      	movs	r2, #40	; 0x28
 80091a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80091a4:	6978      	ldr	r0, [r7, #20]
 80091a6:	f7fe fd45 	bl	8007c34 <HAL_I2C_SlaveTxCpltCallback>
 80091aa:	e00c      	b.n	80091c6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80091ac:	7cfb      	ldrb	r3, [r7, #19]
 80091ae:	2b2a      	cmp	r3, #42	; 0x2a
 80091b0:	d109      	bne.n	80091c6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2222      	movs	r2, #34	; 0x22
 80091b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	2228      	movs	r2, #40	; 0x28
 80091bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80091c0:	6978      	ldr	r0, [r7, #20]
 80091c2:	f7f9 f9f7 	bl	80025b4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80091d4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80091d6:	e06a      	b.n	80092ae <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d064      	beq.n	80092ae <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d107      	bne.n	80091fe <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091fc:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800920c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009214:	d009      	beq.n	800922a <I2C_DMAXferCplt+0x11e>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2b08      	cmp	r3, #8
 800921a:	d006      	beq.n	800922a <I2C_DMAXferCplt+0x11e>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009222:	d002      	beq.n	800922a <I2C_DMAXferCplt+0x11e>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2b20      	cmp	r3, #32
 8009228:	d107      	bne.n	800923a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009238:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009248:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	685a      	ldr	r2, [r3, #4]
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009258:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	2200      	movs	r2, #0
 800925e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8009268:	6978      	ldr	r0, [r7, #20]
 800926a:	f7f7 fe71 	bl	8000f50 <HAL_I2C_ErrorCallback>
}
 800926e:	e01e      	b.n	80092ae <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	2220      	movs	r2, #32
 8009274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b40      	cmp	r3, #64	; 0x40
 8009282:	d10a      	bne.n	800929a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	2200      	movs	r2, #0
 8009290:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8009292:	6978      	ldr	r0, [r7, #20]
 8009294:	f7fe fce2 	bl	8007c5c <HAL_I2C_MemRxCpltCallback>
}
 8009298:	e009      	b.n	80092ae <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2212      	movs	r2, #18
 80092a6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80092a8:	6978      	ldr	r0, [r7, #20]
 80092aa:	f7fe fcb9 	bl	8007c20 <HAL_I2C_MasterRxCpltCallback>
}
 80092ae:	bf00      	nop
 80092b0:	3718      	adds	r7, #24
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d0:	2200      	movs	r2, #0
 80092d2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d003      	beq.n	80092e4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e0:	2200      	movs	r2, #0
 80092e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7fc ff63 	bl	80061b0 <HAL_DMA_GetError>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d01b      	beq.n	8009328 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092fe:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2220      	movs	r2, #32
 800930a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931a:	f043 0210 	orr.w	r2, r3, #16
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f7f7 fe14 	bl	8000f50 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009328:	bf00      	nop
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009338:	2300      	movs	r3, #0
 800933a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009340:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009348:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800934a:	4b4b      	ldr	r3, [pc, #300]	; (8009478 <I2C_DMAAbort+0x148>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	08db      	lsrs	r3, r3, #3
 8009350:	4a4a      	ldr	r2, [pc, #296]	; (800947c <I2C_DMAAbort+0x14c>)
 8009352:	fba2 2303 	umull	r2, r3, r2, r3
 8009356:	0a1a      	lsrs	r2, r3, #8
 8009358:	4613      	mov	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	00da      	lsls	r2, r3, #3
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d106      	bne.n	8009378 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936e:	f043 0220 	orr.w	r2, r3, #32
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009376:	e00a      	b.n	800938e <I2C_DMAAbort+0x5e>
    }
    count--;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	3b01      	subs	r3, #1
 800937c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800938c:	d0ea      	beq.n	8009364 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009392:	2b00      	cmp	r3, #0
 8009394:	d003      	beq.n	800939e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800939a:	2200      	movs	r2, #0
 800939c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d003      	beq.n	80093ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093aa:	2200      	movs	r2, #0
 80093ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	2200      	movs	r2, #0
 80093c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d003      	beq.n	80093d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d0:	2200      	movs	r2, #0
 80093d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d003      	beq.n	80093e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e0:	2200      	movs	r2, #0
 80093e2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f022 0201 	bic.w	r2, r2, #1
 80093f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b60      	cmp	r3, #96	; 0x60
 80093fe:	d10e      	bne.n	800941e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	2220      	movs	r2, #32
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	2200      	movs	r2, #0
 8009414:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009416:	6978      	ldr	r0, [r7, #20]
 8009418:	f7fe fc2a 	bl	8007c70 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800941c:	e027      	b.n	800946e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800941e:	7cfb      	ldrb	r3, [r7, #19]
 8009420:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009424:	2b28      	cmp	r3, #40	; 0x28
 8009426:	d117      	bne.n	8009458 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f042 0201 	orr.w	r2, r2, #1
 8009436:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009446:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	2200      	movs	r2, #0
 800944c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	2228      	movs	r2, #40	; 0x28
 8009452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009456:	e007      	b.n	8009468 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	2220      	movs	r2, #32
 800945c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	2200      	movs	r2, #0
 8009464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009468:	6978      	ldr	r0, [r7, #20]
 800946a:	f7f7 fd71 	bl	8000f50 <HAL_I2C_ErrorCallback>
}
 800946e:	bf00      	nop
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	2000000c 	.word	0x2000000c
 800947c:	14f8b589 	.word	0x14f8b589

08009480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	603b      	str	r3, [r7, #0]
 800948c:	4613      	mov	r3, r2
 800948e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009490:	e025      	b.n	80094de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009498:	d021      	beq.n	80094de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800949a:	f7fb fdc7 	bl	800502c <HAL_GetTick>
 800949e:	4602      	mov	r2, r0
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d302      	bcc.n	80094b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d116      	bne.n	80094de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	f043 0220 	orr.w	r2, r3, #32
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e023      	b.n	8009526 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	0c1b      	lsrs	r3, r3, #16
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d10d      	bne.n	8009504 <I2C_WaitOnFlagUntilTimeout+0x84>
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	43da      	mvns	r2, r3
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	4013      	ands	r3, r2
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	bf0c      	ite	eq
 80094fa:	2301      	moveq	r3, #1
 80094fc:	2300      	movne	r3, #0
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	461a      	mov	r2, r3
 8009502:	e00c      	b.n	800951e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	43da      	mvns	r2, r3
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	4013      	ands	r3, r2
 8009510:	b29b      	uxth	r3, r3
 8009512:	2b00      	cmp	r3, #0
 8009514:	bf0c      	ite	eq
 8009516:	2301      	moveq	r3, #1
 8009518:	2300      	movne	r3, #0
 800951a:	b2db      	uxtb	r3, r3
 800951c:	461a      	mov	r2, r3
 800951e:	79fb      	ldrb	r3, [r7, #7]
 8009520:	429a      	cmp	r2, r3
 8009522:	d0b6      	beq.n	8009492 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b084      	sub	sp, #16
 8009532:	af00      	add	r7, sp, #0
 8009534:	60f8      	str	r0, [r7, #12]
 8009536:	60b9      	str	r1, [r7, #8]
 8009538:	607a      	str	r2, [r7, #4]
 800953a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800953c:	e051      	b.n	80095e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800954c:	d123      	bne.n	8009596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800955c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009566:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2220      	movs	r2, #32
 8009572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2200      	movs	r2, #0
 800957a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009582:	f043 0204 	orr.w	r2, r3, #4
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e046      	b.n	8009624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800959c:	d021      	beq.n	80095e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800959e:	f7fb fd45 	bl	800502c <HAL_GetTick>
 80095a2:	4602      	mov	r2, r0
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d302      	bcc.n	80095b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d116      	bne.n	80095e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2220      	movs	r2, #32
 80095be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ce:	f043 0220 	orr.w	r2, r3, #32
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e020      	b.n	8009624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	0c1b      	lsrs	r3, r3, #16
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d10c      	bne.n	8009606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	43da      	mvns	r2, r3
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	4013      	ands	r3, r2
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	bf14      	ite	ne
 80095fe:	2301      	movne	r3, #1
 8009600:	2300      	moveq	r3, #0
 8009602:	b2db      	uxtb	r3, r3
 8009604:	e00b      	b.n	800961e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	43da      	mvns	r2, r3
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	4013      	ands	r3, r2
 8009612:	b29b      	uxth	r3, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	bf14      	ite	ne
 8009618:	2301      	movne	r3, #1
 800961a:	2300      	moveq	r3, #0
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d18d      	bne.n	800953e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009638:	e02d      	b.n	8009696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f000 f86a 	bl	8009714 <I2C_IsAcknowledgeFailed>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e02d      	b.n	80096a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d021      	beq.n	8009696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009652:	f7fb fceb 	bl	800502c <HAL_GetTick>
 8009656:	4602      	mov	r2, r0
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	429a      	cmp	r2, r3
 8009660:	d302      	bcc.n	8009668 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d116      	bne.n	8009696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2220      	movs	r2, #32
 8009672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009682:	f043 0220 	orr.w	r2, r3, #32
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e007      	b.n	80096a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	695b      	ldr	r3, [r3, #20]
 800969c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a0:	2b80      	cmp	r3, #128	; 0x80
 80096a2:	d1ca      	bne.n	800963a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
	...

080096b0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096b8:	2300      	movs	r3, #0
 80096ba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80096bc:	4b13      	ldr	r3, [pc, #76]	; (800970c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	08db      	lsrs	r3, r3, #3
 80096c2:	4a13      	ldr	r2, [pc, #76]	; (8009710 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80096c4:	fba2 2303 	umull	r2, r3, r2, r3
 80096c8:	0a1a      	lsrs	r2, r3, #8
 80096ca:	4613      	mov	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4413      	add	r3, r2
 80096d0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	3b01      	subs	r3, #1
 80096d6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d107      	bne.n	80096ee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e2:	f043 0220 	orr.w	r2, r3, #32
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e008      	b.n	8009700 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096fc:	d0e9      	beq.n	80096d2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3714      	adds	r7, #20
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	2000000c 	.word	0x2000000c
 8009710:	14f8b589 	.word	0x14f8b589

08009714 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800972a:	d11b      	bne.n	8009764 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009734:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2220      	movs	r2, #32
 8009740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009750:	f043 0204 	orr.w	r2, r3, #4
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e000      	b.n	8009766 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009772:	b480      	push	{r7}
 8009774:	b083      	sub	sp, #12
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009782:	d103      	bne.n	800978c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800978a:	e007      	b.n	800979c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009790:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009794:	d102      	bne.n	800979c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2208      	movs	r2, #8
 800979a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d101      	bne.n	80097ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e264      	b.n	8009c84 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d075      	beq.n	80098b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80097c6:	4ba3      	ldr	r3, [pc, #652]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	f003 030c 	and.w	r3, r3, #12
 80097ce:	2b04      	cmp	r3, #4
 80097d0:	d00c      	beq.n	80097ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80097d2:	4ba0      	ldr	r3, [pc, #640]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80097da:	2b08      	cmp	r3, #8
 80097dc:	d112      	bne.n	8009804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80097de:	4b9d      	ldr	r3, [pc, #628]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097ea:	d10b      	bne.n	8009804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097ec:	4b99      	ldr	r3, [pc, #612]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d05b      	beq.n	80098b0 <HAL_RCC_OscConfig+0x108>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d157      	bne.n	80098b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	e23f      	b.n	8009c84 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800980c:	d106      	bne.n	800981c <HAL_RCC_OscConfig+0x74>
 800980e:	4b91      	ldr	r3, [pc, #580]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a90      	ldr	r2, [pc, #576]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 8009814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	e01d      	b.n	8009858 <HAL_RCC_OscConfig+0xb0>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009824:	d10c      	bne.n	8009840 <HAL_RCC_OscConfig+0x98>
 8009826:	4b8b      	ldr	r3, [pc, #556]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a8a      	ldr	r2, [pc, #552]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 800982c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009830:	6013      	str	r3, [r2, #0]
 8009832:	4b88      	ldr	r3, [pc, #544]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a87      	ldr	r2, [pc, #540]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 8009838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800983c:	6013      	str	r3, [r2, #0]
 800983e:	e00b      	b.n	8009858 <HAL_RCC_OscConfig+0xb0>
 8009840:	4b84      	ldr	r3, [pc, #528]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a83      	ldr	r2, [pc, #524]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 8009846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800984a:	6013      	str	r3, [r2, #0]
 800984c:	4b81      	ldr	r3, [pc, #516]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a80      	ldr	r2, [pc, #512]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 8009852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d013      	beq.n	8009888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009860:	f7fb fbe4 	bl	800502c <HAL_GetTick>
 8009864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009866:	e008      	b.n	800987a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009868:	f7fb fbe0 	bl	800502c <HAL_GetTick>
 800986c:	4602      	mov	r2, r0
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	2b64      	cmp	r3, #100	; 0x64
 8009874:	d901      	bls.n	800987a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e204      	b.n	8009c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800987a:	4b76      	ldr	r3, [pc, #472]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009882:	2b00      	cmp	r3, #0
 8009884:	d0f0      	beq.n	8009868 <HAL_RCC_OscConfig+0xc0>
 8009886:	e014      	b.n	80098b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009888:	f7fb fbd0 	bl	800502c <HAL_GetTick>
 800988c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800988e:	e008      	b.n	80098a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009890:	f7fb fbcc 	bl	800502c <HAL_GetTick>
 8009894:	4602      	mov	r2, r0
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	2b64      	cmp	r3, #100	; 0x64
 800989c:	d901      	bls.n	80098a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800989e:	2303      	movs	r3, #3
 80098a0:	e1f0      	b.n	8009c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098a2:	4b6c      	ldr	r3, [pc, #432]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1f0      	bne.n	8009890 <HAL_RCC_OscConfig+0xe8>
 80098ae:	e000      	b.n	80098b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f003 0302 	and.w	r3, r3, #2
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d063      	beq.n	8009986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80098be:	4b65      	ldr	r3, [pc, #404]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	f003 030c 	and.w	r3, r3, #12
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00b      	beq.n	80098e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098ca:	4b62      	ldr	r3, [pc, #392]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80098d2:	2b08      	cmp	r3, #8
 80098d4:	d11c      	bne.n	8009910 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098d6:	4b5f      	ldr	r3, [pc, #380]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d116      	bne.n	8009910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098e2:	4b5c      	ldr	r3, [pc, #368]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 0302 	and.w	r3, r3, #2
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d005      	beq.n	80098fa <HAL_RCC_OscConfig+0x152>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d001      	beq.n	80098fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e1c4      	b.n	8009c84 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098fa:	4b56      	ldr	r3, [pc, #344]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	00db      	lsls	r3, r3, #3
 8009908:	4952      	ldr	r1, [pc, #328]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 800990a:	4313      	orrs	r3, r2
 800990c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800990e:	e03a      	b.n	8009986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d020      	beq.n	800995a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009918:	4b4f      	ldr	r3, [pc, #316]	; (8009a58 <HAL_RCC_OscConfig+0x2b0>)
 800991a:	2201      	movs	r2, #1
 800991c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800991e:	f7fb fb85 	bl	800502c <HAL_GetTick>
 8009922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009924:	e008      	b.n	8009938 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009926:	f7fb fb81 	bl	800502c <HAL_GetTick>
 800992a:	4602      	mov	r2, r0
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	2b02      	cmp	r3, #2
 8009932:	d901      	bls.n	8009938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e1a5      	b.n	8009c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009938:	4b46      	ldr	r3, [pc, #280]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f003 0302 	and.w	r3, r3, #2
 8009940:	2b00      	cmp	r3, #0
 8009942:	d0f0      	beq.n	8009926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009944:	4b43      	ldr	r3, [pc, #268]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	00db      	lsls	r3, r3, #3
 8009952:	4940      	ldr	r1, [pc, #256]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 8009954:	4313      	orrs	r3, r2
 8009956:	600b      	str	r3, [r1, #0]
 8009958:	e015      	b.n	8009986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800995a:	4b3f      	ldr	r3, [pc, #252]	; (8009a58 <HAL_RCC_OscConfig+0x2b0>)
 800995c:	2200      	movs	r2, #0
 800995e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009960:	f7fb fb64 	bl	800502c <HAL_GetTick>
 8009964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009966:	e008      	b.n	800997a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009968:	f7fb fb60 	bl	800502c <HAL_GetTick>
 800996c:	4602      	mov	r2, r0
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	2b02      	cmp	r3, #2
 8009974:	d901      	bls.n	800997a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009976:	2303      	movs	r3, #3
 8009978:	e184      	b.n	8009c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800997a:	4b36      	ldr	r3, [pc, #216]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f003 0302 	and.w	r3, r3, #2
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1f0      	bne.n	8009968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0308 	and.w	r3, r3, #8
 800998e:	2b00      	cmp	r3, #0
 8009990:	d030      	beq.n	80099f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	695b      	ldr	r3, [r3, #20]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d016      	beq.n	80099c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800999a:	4b30      	ldr	r3, [pc, #192]	; (8009a5c <HAL_RCC_OscConfig+0x2b4>)
 800999c:	2201      	movs	r2, #1
 800999e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099a0:	f7fb fb44 	bl	800502c <HAL_GetTick>
 80099a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099a6:	e008      	b.n	80099ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099a8:	f7fb fb40 	bl	800502c <HAL_GetTick>
 80099ac:	4602      	mov	r2, r0
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d901      	bls.n	80099ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e164      	b.n	8009c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099ba:	4b26      	ldr	r3, [pc, #152]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 80099bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099be:	f003 0302 	and.w	r3, r3, #2
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d0f0      	beq.n	80099a8 <HAL_RCC_OscConfig+0x200>
 80099c6:	e015      	b.n	80099f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80099c8:	4b24      	ldr	r3, [pc, #144]	; (8009a5c <HAL_RCC_OscConfig+0x2b4>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099ce:	f7fb fb2d 	bl	800502c <HAL_GetTick>
 80099d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099d4:	e008      	b.n	80099e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099d6:	f7fb fb29 	bl	800502c <HAL_GetTick>
 80099da:	4602      	mov	r2, r0
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d901      	bls.n	80099e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e14d      	b.n	8009c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099e8:	4b1a      	ldr	r3, [pc, #104]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 80099ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099ec:	f003 0302 	and.w	r3, r3, #2
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1f0      	bne.n	80099d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0304 	and.w	r3, r3, #4
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 80a0 	beq.w	8009b42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a02:	2300      	movs	r3, #0
 8009a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a06:	4b13      	ldr	r3, [pc, #76]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 8009a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10f      	bne.n	8009a32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a12:	2300      	movs	r3, #0
 8009a14:	60bb      	str	r3, [r7, #8]
 8009a16:	4b0f      	ldr	r3, [pc, #60]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 8009a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1a:	4a0e      	ldr	r2, [pc, #56]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 8009a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a20:	6413      	str	r3, [r2, #64]	; 0x40
 8009a22:	4b0c      	ldr	r3, [pc, #48]	; (8009a54 <HAL_RCC_OscConfig+0x2ac>)
 8009a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a2a:	60bb      	str	r3, [r7, #8]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a32:	4b0b      	ldr	r3, [pc, #44]	; (8009a60 <HAL_RCC_OscConfig+0x2b8>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d121      	bne.n	8009a82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a3e:	4b08      	ldr	r3, [pc, #32]	; (8009a60 <HAL_RCC_OscConfig+0x2b8>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a07      	ldr	r2, [pc, #28]	; (8009a60 <HAL_RCC_OscConfig+0x2b8>)
 8009a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a4a:	f7fb faef 	bl	800502c <HAL_GetTick>
 8009a4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a50:	e011      	b.n	8009a76 <HAL_RCC_OscConfig+0x2ce>
 8009a52:	bf00      	nop
 8009a54:	40023800 	.word	0x40023800
 8009a58:	42470000 	.word	0x42470000
 8009a5c:	42470e80 	.word	0x42470e80
 8009a60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a64:	f7fb fae2 	bl	800502c <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d901      	bls.n	8009a76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e106      	b.n	8009c84 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a76:	4b85      	ldr	r3, [pc, #532]	; (8009c8c <HAL_RCC_OscConfig+0x4e4>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d0f0      	beq.n	8009a64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d106      	bne.n	8009a98 <HAL_RCC_OscConfig+0x2f0>
 8009a8a:	4b81      	ldr	r3, [pc, #516]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a8e:	4a80      	ldr	r2, [pc, #512]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009a90:	f043 0301 	orr.w	r3, r3, #1
 8009a94:	6713      	str	r3, [r2, #112]	; 0x70
 8009a96:	e01c      	b.n	8009ad2 <HAL_RCC_OscConfig+0x32a>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	2b05      	cmp	r3, #5
 8009a9e:	d10c      	bne.n	8009aba <HAL_RCC_OscConfig+0x312>
 8009aa0:	4b7b      	ldr	r3, [pc, #492]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa4:	4a7a      	ldr	r2, [pc, #488]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009aa6:	f043 0304 	orr.w	r3, r3, #4
 8009aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8009aac:	4b78      	ldr	r3, [pc, #480]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ab0:	4a77      	ldr	r2, [pc, #476]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009ab2:	f043 0301 	orr.w	r3, r3, #1
 8009ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8009ab8:	e00b      	b.n	8009ad2 <HAL_RCC_OscConfig+0x32a>
 8009aba:	4b75      	ldr	r3, [pc, #468]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009abe:	4a74      	ldr	r2, [pc, #464]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009ac0:	f023 0301 	bic.w	r3, r3, #1
 8009ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ac6:	4b72      	ldr	r3, [pc, #456]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aca:	4a71      	ldr	r2, [pc, #452]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009acc:	f023 0304 	bic.w	r3, r3, #4
 8009ad0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d015      	beq.n	8009b06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ada:	f7fb faa7 	bl	800502c <HAL_GetTick>
 8009ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ae0:	e00a      	b.n	8009af8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ae2:	f7fb faa3 	bl	800502c <HAL_GetTick>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d901      	bls.n	8009af8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e0c5      	b.n	8009c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009af8:	4b65      	ldr	r3, [pc, #404]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009afc:	f003 0302 	and.w	r3, r3, #2
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d0ee      	beq.n	8009ae2 <HAL_RCC_OscConfig+0x33a>
 8009b04:	e014      	b.n	8009b30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b06:	f7fb fa91 	bl	800502c <HAL_GetTick>
 8009b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b0c:	e00a      	b.n	8009b24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b0e:	f7fb fa8d 	bl	800502c <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d901      	bls.n	8009b24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009b20:	2303      	movs	r3, #3
 8009b22:	e0af      	b.n	8009c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b24:	4b5a      	ldr	r3, [pc, #360]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b28:	f003 0302 	and.w	r3, r3, #2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1ee      	bne.n	8009b0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b30:	7dfb      	ldrb	r3, [r7, #23]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d105      	bne.n	8009b42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b36:	4b56      	ldr	r3, [pc, #344]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3a:	4a55      	ldr	r2, [pc, #340]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 809b 	beq.w	8009c82 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009b4c:	4b50      	ldr	r3, [pc, #320]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	f003 030c 	and.w	r3, r3, #12
 8009b54:	2b08      	cmp	r3, #8
 8009b56:	d05c      	beq.n	8009c12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d141      	bne.n	8009be4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b60:	4b4c      	ldr	r3, [pc, #304]	; (8009c94 <HAL_RCC_OscConfig+0x4ec>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b66:	f7fb fa61 	bl	800502c <HAL_GetTick>
 8009b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b6c:	e008      	b.n	8009b80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b6e:	f7fb fa5d 	bl	800502c <HAL_GetTick>
 8009b72:	4602      	mov	r2, r0
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d901      	bls.n	8009b80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	e081      	b.n	8009c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b80:	4b43      	ldr	r3, [pc, #268]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1f0      	bne.n	8009b6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	69da      	ldr	r2, [r3, #28]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a1b      	ldr	r3, [r3, #32]
 8009b94:	431a      	orrs	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	019b      	lsls	r3, r3, #6
 8009b9c:	431a      	orrs	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba2:	085b      	lsrs	r3, r3, #1
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	041b      	lsls	r3, r3, #16
 8009ba8:	431a      	orrs	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bae:	061b      	lsls	r3, r3, #24
 8009bb0:	4937      	ldr	r1, [pc, #220]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009bb6:	4b37      	ldr	r3, [pc, #220]	; (8009c94 <HAL_RCC_OscConfig+0x4ec>)
 8009bb8:	2201      	movs	r2, #1
 8009bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bbc:	f7fb fa36 	bl	800502c <HAL_GetTick>
 8009bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bc2:	e008      	b.n	8009bd6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bc4:	f7fb fa32 	bl	800502c <HAL_GetTick>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d901      	bls.n	8009bd6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e056      	b.n	8009c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bd6:	4b2e      	ldr	r3, [pc, #184]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0f0      	beq.n	8009bc4 <HAL_RCC_OscConfig+0x41c>
 8009be2:	e04e      	b.n	8009c82 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009be4:	4b2b      	ldr	r3, [pc, #172]	; (8009c94 <HAL_RCC_OscConfig+0x4ec>)
 8009be6:	2200      	movs	r2, #0
 8009be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bea:	f7fb fa1f 	bl	800502c <HAL_GetTick>
 8009bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bf0:	e008      	b.n	8009c04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bf2:	f7fb fa1b 	bl	800502c <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d901      	bls.n	8009c04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e03f      	b.n	8009c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c04:	4b22      	ldr	r3, [pc, #136]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1f0      	bne.n	8009bf2 <HAL_RCC_OscConfig+0x44a>
 8009c10:	e037      	b.n	8009c82 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d101      	bne.n	8009c1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e032      	b.n	8009c84 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009c1e:	4b1c      	ldr	r3, [pc, #112]	; (8009c90 <HAL_RCC_OscConfig+0x4e8>)
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d028      	beq.n	8009c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d121      	bne.n	8009c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d11a      	bne.n	8009c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009c4e:	4013      	ands	r3, r2
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009c54:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d111      	bne.n	8009c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c64:	085b      	lsrs	r3, r3, #1
 8009c66:	3b01      	subs	r3, #1
 8009c68:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d107      	bne.n	8009c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c78:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d001      	beq.n	8009c82 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e000      	b.n	8009c84 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3718      	adds	r7, #24
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	40007000 	.word	0x40007000
 8009c90:	40023800 	.word	0x40023800
 8009c94:	42470060 	.word	0x42470060

08009c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e0cc      	b.n	8009e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009cac:	4b68      	ldr	r3, [pc, #416]	; (8009e50 <HAL_RCC_ClockConfig+0x1b8>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 0307 	and.w	r3, r3, #7
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d90c      	bls.n	8009cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cba:	4b65      	ldr	r3, [pc, #404]	; (8009e50 <HAL_RCC_ClockConfig+0x1b8>)
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	b2d2      	uxtb	r2, r2
 8009cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cc2:	4b63      	ldr	r3, [pc, #396]	; (8009e50 <HAL_RCC_ClockConfig+0x1b8>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 0307 	and.w	r3, r3, #7
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d001      	beq.n	8009cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e0b8      	b.n	8009e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f003 0302 	and.w	r3, r3, #2
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d020      	beq.n	8009d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f003 0304 	and.w	r3, r3, #4
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d005      	beq.n	8009cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009cec:	4b59      	ldr	r3, [pc, #356]	; (8009e54 <HAL_RCC_ClockConfig+0x1bc>)
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	4a58      	ldr	r2, [pc, #352]	; (8009e54 <HAL_RCC_ClockConfig+0x1bc>)
 8009cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 0308 	and.w	r3, r3, #8
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d005      	beq.n	8009d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d04:	4b53      	ldr	r3, [pc, #332]	; (8009e54 <HAL_RCC_ClockConfig+0x1bc>)
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	4a52      	ldr	r2, [pc, #328]	; (8009e54 <HAL_RCC_ClockConfig+0x1bc>)
 8009d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d10:	4b50      	ldr	r3, [pc, #320]	; (8009e54 <HAL_RCC_ClockConfig+0x1bc>)
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	494d      	ldr	r1, [pc, #308]	; (8009e54 <HAL_RCC_ClockConfig+0x1bc>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d044      	beq.n	8009db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d107      	bne.n	8009d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d36:	4b47      	ldr	r3, [pc, #284]	; (8009e54 <HAL_RCC_ClockConfig+0x1bc>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d119      	bne.n	8009d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e07f      	b.n	8009e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d003      	beq.n	8009d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	d107      	bne.n	8009d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d56:	4b3f      	ldr	r3, [pc, #252]	; (8009e54 <HAL_RCC_ClockConfig+0x1bc>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d109      	bne.n	8009d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e06f      	b.n	8009e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d66:	4b3b      	ldr	r3, [pc, #236]	; (8009e54 <HAL_RCC_ClockConfig+0x1bc>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 0302 	and.w	r3, r3, #2
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d101      	bne.n	8009d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e067      	b.n	8009e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d76:	4b37      	ldr	r3, [pc, #220]	; (8009e54 <HAL_RCC_ClockConfig+0x1bc>)
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	f023 0203 	bic.w	r2, r3, #3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	4934      	ldr	r1, [pc, #208]	; (8009e54 <HAL_RCC_ClockConfig+0x1bc>)
 8009d84:	4313      	orrs	r3, r2
 8009d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d88:	f7fb f950 	bl	800502c <HAL_GetTick>
 8009d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d8e:	e00a      	b.n	8009da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d90:	f7fb f94c 	bl	800502c <HAL_GetTick>
 8009d94:	4602      	mov	r2, r0
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d901      	bls.n	8009da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009da2:	2303      	movs	r3, #3
 8009da4:	e04f      	b.n	8009e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009da6:	4b2b      	ldr	r3, [pc, #172]	; (8009e54 <HAL_RCC_ClockConfig+0x1bc>)
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	f003 020c 	and.w	r2, r3, #12
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d1eb      	bne.n	8009d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009db8:	4b25      	ldr	r3, [pc, #148]	; (8009e50 <HAL_RCC_ClockConfig+0x1b8>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f003 0307 	and.w	r3, r3, #7
 8009dc0:	683a      	ldr	r2, [r7, #0]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d20c      	bcs.n	8009de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dc6:	4b22      	ldr	r3, [pc, #136]	; (8009e50 <HAL_RCC_ClockConfig+0x1b8>)
 8009dc8:	683a      	ldr	r2, [r7, #0]
 8009dca:	b2d2      	uxtb	r2, r2
 8009dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009dce:	4b20      	ldr	r3, [pc, #128]	; (8009e50 <HAL_RCC_ClockConfig+0x1b8>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 0307 	and.w	r3, r3, #7
 8009dd6:	683a      	ldr	r2, [r7, #0]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d001      	beq.n	8009de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e032      	b.n	8009e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 0304 	and.w	r3, r3, #4
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d008      	beq.n	8009dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009dec:	4b19      	ldr	r3, [pc, #100]	; (8009e54 <HAL_RCC_ClockConfig+0x1bc>)
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	4916      	ldr	r1, [pc, #88]	; (8009e54 <HAL_RCC_ClockConfig+0x1bc>)
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 0308 	and.w	r3, r3, #8
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d009      	beq.n	8009e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e0a:	4b12      	ldr	r3, [pc, #72]	; (8009e54 <HAL_RCC_ClockConfig+0x1bc>)
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	691b      	ldr	r3, [r3, #16]
 8009e16:	00db      	lsls	r3, r3, #3
 8009e18:	490e      	ldr	r1, [pc, #56]	; (8009e54 <HAL_RCC_ClockConfig+0x1bc>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009e1e:	f000 f821 	bl	8009e64 <HAL_RCC_GetSysClockFreq>
 8009e22:	4602      	mov	r2, r0
 8009e24:	4b0b      	ldr	r3, [pc, #44]	; (8009e54 <HAL_RCC_ClockConfig+0x1bc>)
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	091b      	lsrs	r3, r3, #4
 8009e2a:	f003 030f 	and.w	r3, r3, #15
 8009e2e:	490a      	ldr	r1, [pc, #40]	; (8009e58 <HAL_RCC_ClockConfig+0x1c0>)
 8009e30:	5ccb      	ldrb	r3, [r1, r3]
 8009e32:	fa22 f303 	lsr.w	r3, r2, r3
 8009e36:	4a09      	ldr	r2, [pc, #36]	; (8009e5c <HAL_RCC_ClockConfig+0x1c4>)
 8009e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009e3a:	4b09      	ldr	r3, [pc, #36]	; (8009e60 <HAL_RCC_ClockConfig+0x1c8>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fa fa08 	bl	8004254 <HAL_InitTick>

  return HAL_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	40023c00 	.word	0x40023c00
 8009e54:	40023800 	.word	0x40023800
 8009e58:	08014540 	.word	0x08014540
 8009e5c:	2000000c 	.word	0x2000000c
 8009e60:	20000010 	.word	0x20000010

08009e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e64:	b5b0      	push	{r4, r5, r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	6079      	str	r1, [r7, #4]
 8009e6e:	2100      	movs	r1, #0
 8009e70:	60f9      	str	r1, [r7, #12]
 8009e72:	2100      	movs	r1, #0
 8009e74:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009e76:	2100      	movs	r1, #0
 8009e78:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e7a:	4952      	ldr	r1, [pc, #328]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009e7c:	6889      	ldr	r1, [r1, #8]
 8009e7e:	f001 010c 	and.w	r1, r1, #12
 8009e82:	2908      	cmp	r1, #8
 8009e84:	d00d      	beq.n	8009ea2 <HAL_RCC_GetSysClockFreq+0x3e>
 8009e86:	2908      	cmp	r1, #8
 8009e88:	f200 8094 	bhi.w	8009fb4 <HAL_RCC_GetSysClockFreq+0x150>
 8009e8c:	2900      	cmp	r1, #0
 8009e8e:	d002      	beq.n	8009e96 <HAL_RCC_GetSysClockFreq+0x32>
 8009e90:	2904      	cmp	r1, #4
 8009e92:	d003      	beq.n	8009e9c <HAL_RCC_GetSysClockFreq+0x38>
 8009e94:	e08e      	b.n	8009fb4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009e96:	4b4c      	ldr	r3, [pc, #304]	; (8009fc8 <HAL_RCC_GetSysClockFreq+0x164>)
 8009e98:	60bb      	str	r3, [r7, #8]
       break;
 8009e9a:	e08e      	b.n	8009fba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009e9c:	4b4b      	ldr	r3, [pc, #300]	; (8009fcc <HAL_RCC_GetSysClockFreq+0x168>)
 8009e9e:	60bb      	str	r3, [r7, #8]
      break;
 8009ea0:	e08b      	b.n	8009fba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ea2:	4948      	ldr	r1, [pc, #288]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009ea4:	6849      	ldr	r1, [r1, #4]
 8009ea6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009eaa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009eac:	4945      	ldr	r1, [pc, #276]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009eae:	6849      	ldr	r1, [r1, #4]
 8009eb0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009eb4:	2900      	cmp	r1, #0
 8009eb6:	d024      	beq.n	8009f02 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009eb8:	4942      	ldr	r1, [pc, #264]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009eba:	6849      	ldr	r1, [r1, #4]
 8009ebc:	0989      	lsrs	r1, r1, #6
 8009ebe:	4608      	mov	r0, r1
 8009ec0:	f04f 0100 	mov.w	r1, #0
 8009ec4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009ec8:	f04f 0500 	mov.w	r5, #0
 8009ecc:	ea00 0204 	and.w	r2, r0, r4
 8009ed0:	ea01 0305 	and.w	r3, r1, r5
 8009ed4:	493d      	ldr	r1, [pc, #244]	; (8009fcc <HAL_RCC_GetSysClockFreq+0x168>)
 8009ed6:	fb01 f003 	mul.w	r0, r1, r3
 8009eda:	2100      	movs	r1, #0
 8009edc:	fb01 f102 	mul.w	r1, r1, r2
 8009ee0:	1844      	adds	r4, r0, r1
 8009ee2:	493a      	ldr	r1, [pc, #232]	; (8009fcc <HAL_RCC_GetSysClockFreq+0x168>)
 8009ee4:	fba2 0101 	umull	r0, r1, r2, r1
 8009ee8:	1863      	adds	r3, r4, r1
 8009eea:	4619      	mov	r1, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	f04f 0300 	mov.w	r3, #0
 8009ef4:	f7f6 feb0 	bl	8000c58 <__aeabi_uldivmod>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	460b      	mov	r3, r1
 8009efc:	4613      	mov	r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]
 8009f00:	e04a      	b.n	8009f98 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f02:	4b30      	ldr	r3, [pc, #192]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	099b      	lsrs	r3, r3, #6
 8009f08:	461a      	mov	r2, r3
 8009f0a:	f04f 0300 	mov.w	r3, #0
 8009f0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009f12:	f04f 0100 	mov.w	r1, #0
 8009f16:	ea02 0400 	and.w	r4, r2, r0
 8009f1a:	ea03 0501 	and.w	r5, r3, r1
 8009f1e:	4620      	mov	r0, r4
 8009f20:	4629      	mov	r1, r5
 8009f22:	f04f 0200 	mov.w	r2, #0
 8009f26:	f04f 0300 	mov.w	r3, #0
 8009f2a:	014b      	lsls	r3, r1, #5
 8009f2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009f30:	0142      	lsls	r2, r0, #5
 8009f32:	4610      	mov	r0, r2
 8009f34:	4619      	mov	r1, r3
 8009f36:	1b00      	subs	r0, r0, r4
 8009f38:	eb61 0105 	sbc.w	r1, r1, r5
 8009f3c:	f04f 0200 	mov.w	r2, #0
 8009f40:	f04f 0300 	mov.w	r3, #0
 8009f44:	018b      	lsls	r3, r1, #6
 8009f46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009f4a:	0182      	lsls	r2, r0, #6
 8009f4c:	1a12      	subs	r2, r2, r0
 8009f4e:	eb63 0301 	sbc.w	r3, r3, r1
 8009f52:	f04f 0000 	mov.w	r0, #0
 8009f56:	f04f 0100 	mov.w	r1, #0
 8009f5a:	00d9      	lsls	r1, r3, #3
 8009f5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009f60:	00d0      	lsls	r0, r2, #3
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	1912      	adds	r2, r2, r4
 8009f68:	eb45 0303 	adc.w	r3, r5, r3
 8009f6c:	f04f 0000 	mov.w	r0, #0
 8009f70:	f04f 0100 	mov.w	r1, #0
 8009f74:	0299      	lsls	r1, r3, #10
 8009f76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009f7a:	0290      	lsls	r0, r2, #10
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	4610      	mov	r0, r2
 8009f82:	4619      	mov	r1, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	461a      	mov	r2, r3
 8009f88:	f04f 0300 	mov.w	r3, #0
 8009f8c:	f7f6 fe64 	bl	8000c58 <__aeabi_uldivmod>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	4613      	mov	r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009f98:	4b0a      	ldr	r3, [pc, #40]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	0c1b      	lsrs	r3, r3, #16
 8009f9e:	f003 0303 	and.w	r3, r3, #3
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	005b      	lsls	r3, r3, #1
 8009fa6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fb0:	60bb      	str	r3, [r7, #8]
      break;
 8009fb2:	e002      	b.n	8009fba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009fb4:	4b04      	ldr	r3, [pc, #16]	; (8009fc8 <HAL_RCC_GetSysClockFreq+0x164>)
 8009fb6:	60bb      	str	r3, [r7, #8]
      break;
 8009fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009fba:	68bb      	ldr	r3, [r7, #8]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8009fc4:	40023800 	.word	0x40023800
 8009fc8:	00f42400 	.word	0x00f42400
 8009fcc:	016e3600 	.word	0x016e3600

08009fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009fd4:	4b03      	ldr	r3, [pc, #12]	; (8009fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	2000000c 	.word	0x2000000c

08009fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009fec:	f7ff fff0 	bl	8009fd0 <HAL_RCC_GetHCLKFreq>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	4b05      	ldr	r3, [pc, #20]	; (800a008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	0a9b      	lsrs	r3, r3, #10
 8009ff8:	f003 0307 	and.w	r3, r3, #7
 8009ffc:	4903      	ldr	r1, [pc, #12]	; (800a00c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ffe:	5ccb      	ldrb	r3, [r1, r3]
 800a000:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a004:	4618      	mov	r0, r3
 800a006:	bd80      	pop	{r7, pc}
 800a008:	40023800 	.word	0x40023800
 800a00c:	08014550 	.word	0x08014550

0800a010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a014:	f7ff ffdc 	bl	8009fd0 <HAL_RCC_GetHCLKFreq>
 800a018:	4602      	mov	r2, r0
 800a01a:	4b05      	ldr	r3, [pc, #20]	; (800a030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	0b5b      	lsrs	r3, r3, #13
 800a020:	f003 0307 	and.w	r3, r3, #7
 800a024:	4903      	ldr	r1, [pc, #12]	; (800a034 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a026:	5ccb      	ldrb	r3, [r1, r3]
 800a028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	40023800 	.word	0x40023800
 800a034:	08014550 	.word	0x08014550

0800a038 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	220f      	movs	r2, #15
 800a046:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a048:	4b12      	ldr	r3, [pc, #72]	; (800a094 <HAL_RCC_GetClockConfig+0x5c>)
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	f003 0203 	and.w	r2, r3, #3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a054:	4b0f      	ldr	r3, [pc, #60]	; (800a094 <HAL_RCC_GetClockConfig+0x5c>)
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a060:	4b0c      	ldr	r3, [pc, #48]	; (800a094 <HAL_RCC_GetClockConfig+0x5c>)
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a06c:	4b09      	ldr	r3, [pc, #36]	; (800a094 <HAL_RCC_GetClockConfig+0x5c>)
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	08db      	lsrs	r3, r3, #3
 800a072:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a07a:	4b07      	ldr	r3, [pc, #28]	; (800a098 <HAL_RCC_GetClockConfig+0x60>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 0207 	and.w	r2, r3, #7
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	601a      	str	r2, [r3, #0]
}
 800a086:	bf00      	nop
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	40023800 	.word	0x40023800
 800a098:	40023c00 	.word	0x40023c00

0800a09c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d101      	bne.n	800a0ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e041      	b.n	800a132 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d106      	bne.n	800a0c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7fa fcca 	bl	8004a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	4619      	mov	r1, r3
 800a0da:	4610      	mov	r0, r2
 800a0dc:	f000 fd48 	bl	800ab70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
	...

0800a13c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d001      	beq.n	800a154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e044      	b.n	800a1de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2202      	movs	r2, #2
 800a158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68da      	ldr	r2, [r3, #12]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f042 0201 	orr.w	r2, r2, #1
 800a16a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a1e      	ldr	r2, [pc, #120]	; (800a1ec <HAL_TIM_Base_Start_IT+0xb0>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d018      	beq.n	800a1a8 <HAL_TIM_Base_Start_IT+0x6c>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a17e:	d013      	beq.n	800a1a8 <HAL_TIM_Base_Start_IT+0x6c>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a1a      	ldr	r2, [pc, #104]	; (800a1f0 <HAL_TIM_Base_Start_IT+0xb4>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d00e      	beq.n	800a1a8 <HAL_TIM_Base_Start_IT+0x6c>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a19      	ldr	r2, [pc, #100]	; (800a1f4 <HAL_TIM_Base_Start_IT+0xb8>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d009      	beq.n	800a1a8 <HAL_TIM_Base_Start_IT+0x6c>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a17      	ldr	r2, [pc, #92]	; (800a1f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d004      	beq.n	800a1a8 <HAL_TIM_Base_Start_IT+0x6c>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a16      	ldr	r2, [pc, #88]	; (800a1fc <HAL_TIM_Base_Start_IT+0xc0>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d111      	bne.n	800a1cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	f003 0307 	and.w	r3, r3, #7
 800a1b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2b06      	cmp	r3, #6
 800a1b8:	d010      	beq.n	800a1dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f042 0201 	orr.w	r2, r2, #1
 800a1c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ca:	e007      	b.n	800a1dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f042 0201 	orr.w	r2, r2, #1
 800a1da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3714      	adds	r7, #20
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	40010000 	.word	0x40010000
 800a1f0:	40000400 	.word	0x40000400
 800a1f4:	40000800 	.word	0x40000800
 800a1f8:	40000c00 	.word	0x40000c00
 800a1fc:	40014000 	.word	0x40014000

0800a200 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d101      	bne.n	800a212 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	e041      	b.n	800a296 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d106      	bne.n	800a22c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 f839 	bl	800a29e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2202      	movs	r2, #2
 800a230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3304      	adds	r3, #4
 800a23c:	4619      	mov	r1, r3
 800a23e:	4610      	mov	r0, r2
 800a240:	f000 fc96 	bl	800ab70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2201      	movs	r2, #1
 800a250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a29e:	b480      	push	{r7}
 800a2a0:	b083      	sub	sp, #12
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a2a6:	bf00      	nop
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
	...

0800a2b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d109      	bne.n	800a2d8 <HAL_TIM_PWM_Start+0x24>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	bf14      	ite	ne
 800a2d0:	2301      	movne	r3, #1
 800a2d2:	2300      	moveq	r3, #0
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	e022      	b.n	800a31e <HAL_TIM_PWM_Start+0x6a>
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	2b04      	cmp	r3, #4
 800a2dc:	d109      	bne.n	800a2f2 <HAL_TIM_PWM_Start+0x3e>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	bf14      	ite	ne
 800a2ea:	2301      	movne	r3, #1
 800a2ec:	2300      	moveq	r3, #0
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	e015      	b.n	800a31e <HAL_TIM_PWM_Start+0x6a>
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	2b08      	cmp	r3, #8
 800a2f6:	d109      	bne.n	800a30c <HAL_TIM_PWM_Start+0x58>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	2b01      	cmp	r3, #1
 800a302:	bf14      	ite	ne
 800a304:	2301      	movne	r3, #1
 800a306:	2300      	moveq	r3, #0
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	e008      	b.n	800a31e <HAL_TIM_PWM_Start+0x6a>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a312:	b2db      	uxtb	r3, r3
 800a314:	2b01      	cmp	r3, #1
 800a316:	bf14      	ite	ne
 800a318:	2301      	movne	r3, #1
 800a31a:	2300      	moveq	r3, #0
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	e068      	b.n	800a3f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d104      	bne.n	800a336 <HAL_TIM_PWM_Start+0x82>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2202      	movs	r2, #2
 800a330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a334:	e013      	b.n	800a35e <HAL_TIM_PWM_Start+0xaa>
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	2b04      	cmp	r3, #4
 800a33a:	d104      	bne.n	800a346 <HAL_TIM_PWM_Start+0x92>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2202      	movs	r2, #2
 800a340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a344:	e00b      	b.n	800a35e <HAL_TIM_PWM_Start+0xaa>
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b08      	cmp	r3, #8
 800a34a:	d104      	bne.n	800a356 <HAL_TIM_PWM_Start+0xa2>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a354:	e003      	b.n	800a35e <HAL_TIM_PWM_Start+0xaa>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2202      	movs	r2, #2
 800a35a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2201      	movs	r2, #1
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	4618      	mov	r0, r3
 800a368:	f000 fea8 	bl	800b0bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a23      	ldr	r2, [pc, #140]	; (800a400 <HAL_TIM_PWM_Start+0x14c>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d107      	bne.n	800a386 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a384:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a1d      	ldr	r2, [pc, #116]	; (800a400 <HAL_TIM_PWM_Start+0x14c>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d018      	beq.n	800a3c2 <HAL_TIM_PWM_Start+0x10e>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a398:	d013      	beq.n	800a3c2 <HAL_TIM_PWM_Start+0x10e>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a19      	ldr	r2, [pc, #100]	; (800a404 <HAL_TIM_PWM_Start+0x150>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d00e      	beq.n	800a3c2 <HAL_TIM_PWM_Start+0x10e>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a17      	ldr	r2, [pc, #92]	; (800a408 <HAL_TIM_PWM_Start+0x154>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d009      	beq.n	800a3c2 <HAL_TIM_PWM_Start+0x10e>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a16      	ldr	r2, [pc, #88]	; (800a40c <HAL_TIM_PWM_Start+0x158>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d004      	beq.n	800a3c2 <HAL_TIM_PWM_Start+0x10e>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a14      	ldr	r2, [pc, #80]	; (800a410 <HAL_TIM_PWM_Start+0x15c>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d111      	bne.n	800a3e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	f003 0307 	and.w	r3, r3, #7
 800a3cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2b06      	cmp	r3, #6
 800a3d2:	d010      	beq.n	800a3f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f042 0201 	orr.w	r2, r2, #1
 800a3e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3e4:	e007      	b.n	800a3f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f042 0201 	orr.w	r2, r2, #1
 800a3f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	40010000 	.word	0x40010000
 800a404:	40000400 	.word	0x40000400
 800a408:	40000800 	.word	0x40000800
 800a40c:	40000c00 	.word	0x40000c00
 800a410:	40014000 	.word	0x40014000

0800a414 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d109      	bne.n	800a43c <HAL_TIM_PWM_Start_IT+0x28>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b01      	cmp	r3, #1
 800a432:	bf14      	ite	ne
 800a434:	2301      	movne	r3, #1
 800a436:	2300      	moveq	r3, #0
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	e022      	b.n	800a482 <HAL_TIM_PWM_Start_IT+0x6e>
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	2b04      	cmp	r3, #4
 800a440:	d109      	bne.n	800a456 <HAL_TIM_PWM_Start_IT+0x42>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	bf14      	ite	ne
 800a44e:	2301      	movne	r3, #1
 800a450:	2300      	moveq	r3, #0
 800a452:	b2db      	uxtb	r3, r3
 800a454:	e015      	b.n	800a482 <HAL_TIM_PWM_Start_IT+0x6e>
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	2b08      	cmp	r3, #8
 800a45a:	d109      	bne.n	800a470 <HAL_TIM_PWM_Start_IT+0x5c>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a462:	b2db      	uxtb	r3, r3
 800a464:	2b01      	cmp	r3, #1
 800a466:	bf14      	ite	ne
 800a468:	2301      	movne	r3, #1
 800a46a:	2300      	moveq	r3, #0
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	e008      	b.n	800a482 <HAL_TIM_PWM_Start_IT+0x6e>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a476:	b2db      	uxtb	r3, r3
 800a478:	2b01      	cmp	r3, #1
 800a47a:	bf14      	ite	ne
 800a47c:	2301      	movne	r3, #1
 800a47e:	2300      	moveq	r3, #0
 800a480:	b2db      	uxtb	r3, r3
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e0b3      	b.n	800a5f2 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d104      	bne.n	800a49a <HAL_TIM_PWM_Start_IT+0x86>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2202      	movs	r2, #2
 800a494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a498:	e013      	b.n	800a4c2 <HAL_TIM_PWM_Start_IT+0xae>
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	d104      	bne.n	800a4aa <HAL_TIM_PWM_Start_IT+0x96>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4a8:	e00b      	b.n	800a4c2 <HAL_TIM_PWM_Start_IT+0xae>
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2b08      	cmp	r3, #8
 800a4ae:	d104      	bne.n	800a4ba <HAL_TIM_PWM_Start_IT+0xa6>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2202      	movs	r2, #2
 800a4b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4b8:	e003      	b.n	800a4c2 <HAL_TIM_PWM_Start_IT+0xae>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2202      	movs	r2, #2
 800a4be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	2b0c      	cmp	r3, #12
 800a4c6:	d841      	bhi.n	800a54c <HAL_TIM_PWM_Start_IT+0x138>
 800a4c8:	a201      	add	r2, pc, #4	; (adr r2, 800a4d0 <HAL_TIM_PWM_Start_IT+0xbc>)
 800a4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ce:	bf00      	nop
 800a4d0:	0800a505 	.word	0x0800a505
 800a4d4:	0800a54d 	.word	0x0800a54d
 800a4d8:	0800a54d 	.word	0x0800a54d
 800a4dc:	0800a54d 	.word	0x0800a54d
 800a4e0:	0800a517 	.word	0x0800a517
 800a4e4:	0800a54d 	.word	0x0800a54d
 800a4e8:	0800a54d 	.word	0x0800a54d
 800a4ec:	0800a54d 	.word	0x0800a54d
 800a4f0:	0800a529 	.word	0x0800a529
 800a4f4:	0800a54d 	.word	0x0800a54d
 800a4f8:	0800a54d 	.word	0x0800a54d
 800a4fc:	0800a54d 	.word	0x0800a54d
 800a500:	0800a53b 	.word	0x0800a53b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68da      	ldr	r2, [r3, #12]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f042 0202 	orr.w	r2, r2, #2
 800a512:	60da      	str	r2, [r3, #12]
      break;
 800a514:	e01d      	b.n	800a552 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68da      	ldr	r2, [r3, #12]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f042 0204 	orr.w	r2, r2, #4
 800a524:	60da      	str	r2, [r3, #12]
      break;
 800a526:	e014      	b.n	800a552 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68da      	ldr	r2, [r3, #12]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f042 0208 	orr.w	r2, r2, #8
 800a536:	60da      	str	r2, [r3, #12]
      break;
 800a538:	e00b      	b.n	800a552 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	68da      	ldr	r2, [r3, #12]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f042 0210 	orr.w	r2, r2, #16
 800a548:	60da      	str	r2, [r3, #12]
      break;
 800a54a:	e002      	b.n	800a552 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	73fb      	strb	r3, [r7, #15]
      break;
 800a550:	bf00      	nop
  }

  if (status == HAL_OK)
 800a552:	7bfb      	ldrb	r3, [r7, #15]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d14b      	bne.n	800a5f0 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2201      	movs	r2, #1
 800a55e:	6839      	ldr	r1, [r7, #0]
 800a560:	4618      	mov	r0, r3
 800a562:	f000 fdab 	bl	800b0bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a24      	ldr	r2, [pc, #144]	; (800a5fc <HAL_TIM_PWM_Start_IT+0x1e8>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d107      	bne.n	800a580 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a57e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a1d      	ldr	r2, [pc, #116]	; (800a5fc <HAL_TIM_PWM_Start_IT+0x1e8>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d018      	beq.n	800a5bc <HAL_TIM_PWM_Start_IT+0x1a8>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a592:	d013      	beq.n	800a5bc <HAL_TIM_PWM_Start_IT+0x1a8>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a19      	ldr	r2, [pc, #100]	; (800a600 <HAL_TIM_PWM_Start_IT+0x1ec>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d00e      	beq.n	800a5bc <HAL_TIM_PWM_Start_IT+0x1a8>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a18      	ldr	r2, [pc, #96]	; (800a604 <HAL_TIM_PWM_Start_IT+0x1f0>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d009      	beq.n	800a5bc <HAL_TIM_PWM_Start_IT+0x1a8>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a16      	ldr	r2, [pc, #88]	; (800a608 <HAL_TIM_PWM_Start_IT+0x1f4>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d004      	beq.n	800a5bc <HAL_TIM_PWM_Start_IT+0x1a8>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a15      	ldr	r2, [pc, #84]	; (800a60c <HAL_TIM_PWM_Start_IT+0x1f8>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d111      	bne.n	800a5e0 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	f003 0307 	and.w	r3, r3, #7
 800a5c6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	2b06      	cmp	r3, #6
 800a5cc:	d010      	beq.n	800a5f0 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f042 0201 	orr.w	r2, r2, #1
 800a5dc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5de:	e007      	b.n	800a5f0 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f042 0201 	orr.w	r2, r2, #1
 800a5ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800a5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	40010000 	.word	0x40010000
 800a600:	40000400 	.word	0x40000400
 800a604:	40000800 	.word	0x40000800
 800a608:	40000c00 	.word	0x40000c00
 800a60c:	40014000 	.word	0x40014000

0800a610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	f003 0302 	and.w	r3, r3, #2
 800a622:	2b02      	cmp	r3, #2
 800a624:	d122      	bne.n	800a66c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	f003 0302 	and.w	r3, r3, #2
 800a630:	2b02      	cmp	r3, #2
 800a632:	d11b      	bne.n	800a66c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f06f 0202 	mvn.w	r2, #2
 800a63c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2201      	movs	r2, #1
 800a642:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	f003 0303 	and.w	r3, r3, #3
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d003      	beq.n	800a65a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fa77 	bl	800ab46 <HAL_TIM_IC_CaptureCallback>
 800a658:	e005      	b.n	800a666 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 fa69 	bl	800ab32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7f7 febd 	bl	80023e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	f003 0304 	and.w	r3, r3, #4
 800a676:	2b04      	cmp	r3, #4
 800a678:	d122      	bne.n	800a6c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	f003 0304 	and.w	r3, r3, #4
 800a684:	2b04      	cmp	r3, #4
 800a686:	d11b      	bne.n	800a6c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f06f 0204 	mvn.w	r2, #4
 800a690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2202      	movs	r2, #2
 800a696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d003      	beq.n	800a6ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 fa4d 	bl	800ab46 <HAL_TIM_IC_CaptureCallback>
 800a6ac:	e005      	b.n	800a6ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fa3f 	bl	800ab32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7f7 fe93 	bl	80023e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	f003 0308 	and.w	r3, r3, #8
 800a6ca:	2b08      	cmp	r3, #8
 800a6cc:	d122      	bne.n	800a714 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	f003 0308 	and.w	r3, r3, #8
 800a6d8:	2b08      	cmp	r3, #8
 800a6da:	d11b      	bne.n	800a714 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f06f 0208 	mvn.w	r2, #8
 800a6e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2204      	movs	r2, #4
 800a6ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	69db      	ldr	r3, [r3, #28]
 800a6f2:	f003 0303 	and.w	r3, r3, #3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d003      	beq.n	800a702 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fa23 	bl	800ab46 <HAL_TIM_IC_CaptureCallback>
 800a700:	e005      	b.n	800a70e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 fa15 	bl	800ab32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f7f7 fe69 	bl	80023e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	f003 0310 	and.w	r3, r3, #16
 800a71e:	2b10      	cmp	r3, #16
 800a720:	d122      	bne.n	800a768 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	f003 0310 	and.w	r3, r3, #16
 800a72c:	2b10      	cmp	r3, #16
 800a72e:	d11b      	bne.n	800a768 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f06f 0210 	mvn.w	r2, #16
 800a738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2208      	movs	r2, #8
 800a73e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d003      	beq.n	800a756 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f9f9 	bl	800ab46 <HAL_TIM_IC_CaptureCallback>
 800a754:	e005      	b.n	800a762 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f9eb 	bl	800ab32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f7f7 fe3f 	bl	80023e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	2b01      	cmp	r3, #1
 800a774:	d10e      	bne.n	800a794 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	f003 0301 	and.w	r3, r3, #1
 800a780:	2b01      	cmp	r3, #1
 800a782:	d107      	bne.n	800a794 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f06f 0201 	mvn.w	r2, #1
 800a78c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f7f9 fd00 	bl	8004194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a79e:	2b80      	cmp	r3, #128	; 0x80
 800a7a0:	d10e      	bne.n	800a7c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ac:	2b80      	cmp	r3, #128	; 0x80
 800a7ae:	d107      	bne.n	800a7c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fe00 	bl	800b3c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ca:	2b40      	cmp	r3, #64	; 0x40
 800a7cc:	d10e      	bne.n	800a7ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d8:	2b40      	cmp	r3, #64	; 0x40
 800a7da:	d107      	bne.n	800a7ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a7e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 f9b7 	bl	800ab5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	f003 0320 	and.w	r3, r3, #32
 800a7f6:	2b20      	cmp	r3, #32
 800a7f8:	d10e      	bne.n	800a818 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f003 0320 	and.w	r3, r3, #32
 800a804:	2b20      	cmp	r3, #32
 800a806:	d107      	bne.n	800a818 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f06f 0220 	mvn.w	r2, #32
 800a810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fdca 	bl	800b3ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a818:	bf00      	nop
 800a81a:	3708      	adds	r7, #8
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a82c:	2300      	movs	r3, #0
 800a82e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a836:	2b01      	cmp	r3, #1
 800a838:	d101      	bne.n	800a83e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a83a:	2302      	movs	r3, #2
 800a83c:	e0ae      	b.n	800a99c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2201      	movs	r2, #1
 800a842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b0c      	cmp	r3, #12
 800a84a:	f200 809f 	bhi.w	800a98c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a84e:	a201      	add	r2, pc, #4	; (adr r2, 800a854 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a854:	0800a889 	.word	0x0800a889
 800a858:	0800a98d 	.word	0x0800a98d
 800a85c:	0800a98d 	.word	0x0800a98d
 800a860:	0800a98d 	.word	0x0800a98d
 800a864:	0800a8c9 	.word	0x0800a8c9
 800a868:	0800a98d 	.word	0x0800a98d
 800a86c:	0800a98d 	.word	0x0800a98d
 800a870:	0800a98d 	.word	0x0800a98d
 800a874:	0800a90b 	.word	0x0800a90b
 800a878:	0800a98d 	.word	0x0800a98d
 800a87c:	0800a98d 	.word	0x0800a98d
 800a880:	0800a98d 	.word	0x0800a98d
 800a884:	0800a94b 	.word	0x0800a94b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68b9      	ldr	r1, [r7, #8]
 800a88e:	4618      	mov	r0, r3
 800a890:	f000 f9ee 	bl	800ac70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	699a      	ldr	r2, [r3, #24]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f042 0208 	orr.w	r2, r2, #8
 800a8a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	699a      	ldr	r2, [r3, #24]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f022 0204 	bic.w	r2, r2, #4
 800a8b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	6999      	ldr	r1, [r3, #24]
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	691a      	ldr	r2, [r3, #16]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	430a      	orrs	r2, r1
 800a8c4:	619a      	str	r2, [r3, #24]
      break;
 800a8c6:	e064      	b.n	800a992 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68b9      	ldr	r1, [r7, #8]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 fa34 	bl	800ad3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	699a      	ldr	r2, [r3, #24]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	699a      	ldr	r2, [r3, #24]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	6999      	ldr	r1, [r3, #24]
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	021a      	lsls	r2, r3, #8
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	430a      	orrs	r2, r1
 800a906:	619a      	str	r2, [r3, #24]
      break;
 800a908:	e043      	b.n	800a992 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68b9      	ldr	r1, [r7, #8]
 800a910:	4618      	mov	r0, r3
 800a912:	f000 fa7f 	bl	800ae14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	69da      	ldr	r2, [r3, #28]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f042 0208 	orr.w	r2, r2, #8
 800a924:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	69da      	ldr	r2, [r3, #28]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f022 0204 	bic.w	r2, r2, #4
 800a934:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	69d9      	ldr	r1, [r3, #28]
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	691a      	ldr	r2, [r3, #16]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	430a      	orrs	r2, r1
 800a946:	61da      	str	r2, [r3, #28]
      break;
 800a948:	e023      	b.n	800a992 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68b9      	ldr	r1, [r7, #8]
 800a950:	4618      	mov	r0, r3
 800a952:	f000 fac9 	bl	800aee8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	69da      	ldr	r2, [r3, #28]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	69da      	ldr	r2, [r3, #28]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	69d9      	ldr	r1, [r3, #28]
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	021a      	lsls	r2, r3, #8
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	430a      	orrs	r2, r1
 800a988:	61da      	str	r2, [r3, #28]
      break;
 800a98a:	e002      	b.n	800a992 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	75fb      	strb	r3, [r7, #23]
      break;
 800a990:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a99a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3718      	adds	r7, #24
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d101      	bne.n	800a9c0 <HAL_TIM_ConfigClockSource+0x1c>
 800a9bc:	2302      	movs	r3, #2
 800a9be:	e0b4      	b.n	800ab2a <HAL_TIM_ConfigClockSource+0x186>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a9de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	68ba      	ldr	r2, [r7, #8]
 800a9ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9f8:	d03e      	beq.n	800aa78 <HAL_TIM_ConfigClockSource+0xd4>
 800a9fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9fe:	f200 8087 	bhi.w	800ab10 <HAL_TIM_ConfigClockSource+0x16c>
 800aa02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa06:	f000 8086 	beq.w	800ab16 <HAL_TIM_ConfigClockSource+0x172>
 800aa0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa0e:	d87f      	bhi.n	800ab10 <HAL_TIM_ConfigClockSource+0x16c>
 800aa10:	2b70      	cmp	r3, #112	; 0x70
 800aa12:	d01a      	beq.n	800aa4a <HAL_TIM_ConfigClockSource+0xa6>
 800aa14:	2b70      	cmp	r3, #112	; 0x70
 800aa16:	d87b      	bhi.n	800ab10 <HAL_TIM_ConfigClockSource+0x16c>
 800aa18:	2b60      	cmp	r3, #96	; 0x60
 800aa1a:	d050      	beq.n	800aabe <HAL_TIM_ConfigClockSource+0x11a>
 800aa1c:	2b60      	cmp	r3, #96	; 0x60
 800aa1e:	d877      	bhi.n	800ab10 <HAL_TIM_ConfigClockSource+0x16c>
 800aa20:	2b50      	cmp	r3, #80	; 0x50
 800aa22:	d03c      	beq.n	800aa9e <HAL_TIM_ConfigClockSource+0xfa>
 800aa24:	2b50      	cmp	r3, #80	; 0x50
 800aa26:	d873      	bhi.n	800ab10 <HAL_TIM_ConfigClockSource+0x16c>
 800aa28:	2b40      	cmp	r3, #64	; 0x40
 800aa2a:	d058      	beq.n	800aade <HAL_TIM_ConfigClockSource+0x13a>
 800aa2c:	2b40      	cmp	r3, #64	; 0x40
 800aa2e:	d86f      	bhi.n	800ab10 <HAL_TIM_ConfigClockSource+0x16c>
 800aa30:	2b30      	cmp	r3, #48	; 0x30
 800aa32:	d064      	beq.n	800aafe <HAL_TIM_ConfigClockSource+0x15a>
 800aa34:	2b30      	cmp	r3, #48	; 0x30
 800aa36:	d86b      	bhi.n	800ab10 <HAL_TIM_ConfigClockSource+0x16c>
 800aa38:	2b20      	cmp	r3, #32
 800aa3a:	d060      	beq.n	800aafe <HAL_TIM_ConfigClockSource+0x15a>
 800aa3c:	2b20      	cmp	r3, #32
 800aa3e:	d867      	bhi.n	800ab10 <HAL_TIM_ConfigClockSource+0x16c>
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d05c      	beq.n	800aafe <HAL_TIM_ConfigClockSource+0x15a>
 800aa44:	2b10      	cmp	r3, #16
 800aa46:	d05a      	beq.n	800aafe <HAL_TIM_ConfigClockSource+0x15a>
 800aa48:	e062      	b.n	800ab10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6818      	ldr	r0, [r3, #0]
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	6899      	ldr	r1, [r3, #8]
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	f000 fb0f 	bl	800b07c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aa6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68ba      	ldr	r2, [r7, #8]
 800aa74:	609a      	str	r2, [r3, #8]
      break;
 800aa76:	e04f      	b.n	800ab18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6818      	ldr	r0, [r3, #0]
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	6899      	ldr	r1, [r3, #8]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	685a      	ldr	r2, [r3, #4]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	f000 faf8 	bl	800b07c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	689a      	ldr	r2, [r3, #8]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa9a:	609a      	str	r2, [r3, #8]
      break;
 800aa9c:	e03c      	b.n	800ab18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6818      	ldr	r0, [r3, #0]
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	6859      	ldr	r1, [r3, #4]
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	f000 fa6c 	bl	800af88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2150      	movs	r1, #80	; 0x50
 800aab6:	4618      	mov	r0, r3
 800aab8:	f000 fac5 	bl	800b046 <TIM_ITRx_SetConfig>
      break;
 800aabc:	e02c      	b.n	800ab18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6818      	ldr	r0, [r3, #0]
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	6859      	ldr	r1, [r3, #4]
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	461a      	mov	r2, r3
 800aacc:	f000 fa8b 	bl	800afe6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2160      	movs	r1, #96	; 0x60
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 fab5 	bl	800b046 <TIM_ITRx_SetConfig>
      break;
 800aadc:	e01c      	b.n	800ab18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6818      	ldr	r0, [r3, #0]
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	6859      	ldr	r1, [r3, #4]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	461a      	mov	r2, r3
 800aaec:	f000 fa4c 	bl	800af88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2140      	movs	r1, #64	; 0x40
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f000 faa5 	bl	800b046 <TIM_ITRx_SetConfig>
      break;
 800aafc:	e00c      	b.n	800ab18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4619      	mov	r1, r3
 800ab08:	4610      	mov	r0, r2
 800ab0a:	f000 fa9c 	bl	800b046 <TIM_ITRx_SetConfig>
      break;
 800ab0e:	e003      	b.n	800ab18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	73fb      	strb	r3, [r7, #15]
      break;
 800ab14:	e000      	b.n	800ab18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ab16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab32:	b480      	push	{r7}
 800ab34:	b083      	sub	sp, #12
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab3a:	bf00      	nop
 800ab3c:	370c      	adds	r7, #12
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab46:	b480      	push	{r7}
 800ab48:	b083      	sub	sp, #12
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab4e:	bf00      	nop
 800ab50:	370c      	adds	r7, #12
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b083      	sub	sp, #12
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab62:	bf00      	nop
 800ab64:	370c      	adds	r7, #12
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
	...

0800ab70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a34      	ldr	r2, [pc, #208]	; (800ac54 <TIM_Base_SetConfig+0xe4>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d00f      	beq.n	800aba8 <TIM_Base_SetConfig+0x38>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab8e:	d00b      	beq.n	800aba8 <TIM_Base_SetConfig+0x38>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a31      	ldr	r2, [pc, #196]	; (800ac58 <TIM_Base_SetConfig+0xe8>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d007      	beq.n	800aba8 <TIM_Base_SetConfig+0x38>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a30      	ldr	r2, [pc, #192]	; (800ac5c <TIM_Base_SetConfig+0xec>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d003      	beq.n	800aba8 <TIM_Base_SetConfig+0x38>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a2f      	ldr	r2, [pc, #188]	; (800ac60 <TIM_Base_SetConfig+0xf0>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d108      	bne.n	800abba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a25      	ldr	r2, [pc, #148]	; (800ac54 <TIM_Base_SetConfig+0xe4>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d01b      	beq.n	800abfa <TIM_Base_SetConfig+0x8a>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abc8:	d017      	beq.n	800abfa <TIM_Base_SetConfig+0x8a>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a22      	ldr	r2, [pc, #136]	; (800ac58 <TIM_Base_SetConfig+0xe8>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d013      	beq.n	800abfa <TIM_Base_SetConfig+0x8a>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a21      	ldr	r2, [pc, #132]	; (800ac5c <TIM_Base_SetConfig+0xec>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d00f      	beq.n	800abfa <TIM_Base_SetConfig+0x8a>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a20      	ldr	r2, [pc, #128]	; (800ac60 <TIM_Base_SetConfig+0xf0>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d00b      	beq.n	800abfa <TIM_Base_SetConfig+0x8a>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a1f      	ldr	r2, [pc, #124]	; (800ac64 <TIM_Base_SetConfig+0xf4>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d007      	beq.n	800abfa <TIM_Base_SetConfig+0x8a>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a1e      	ldr	r2, [pc, #120]	; (800ac68 <TIM_Base_SetConfig+0xf8>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d003      	beq.n	800abfa <TIM_Base_SetConfig+0x8a>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a1d      	ldr	r2, [pc, #116]	; (800ac6c <TIM_Base_SetConfig+0xfc>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d108      	bne.n	800ac0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	689a      	ldr	r2, [r3, #8]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a08      	ldr	r2, [pc, #32]	; (800ac54 <TIM_Base_SetConfig+0xe4>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d103      	bne.n	800ac40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	691a      	ldr	r2, [r3, #16]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	615a      	str	r2, [r3, #20]
}
 800ac46:	bf00      	nop
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	40010000 	.word	0x40010000
 800ac58:	40000400 	.word	0x40000400
 800ac5c:	40000800 	.word	0x40000800
 800ac60:	40000c00 	.word	0x40000c00
 800ac64:	40014000 	.word	0x40014000
 800ac68:	40014400 	.word	0x40014400
 800ac6c:	40014800 	.word	0x40014800

0800ac70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b087      	sub	sp, #28
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	f023 0201 	bic.w	r2, r3, #1
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a1b      	ldr	r3, [r3, #32]
 800ac8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	699b      	ldr	r3, [r3, #24]
 800ac96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f023 0303 	bic.w	r3, r3, #3
 800aca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	4313      	orrs	r3, r2
 800acb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	f023 0302 	bic.w	r3, r3, #2
 800acb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	4313      	orrs	r3, r2
 800acc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4a1c      	ldr	r2, [pc, #112]	; (800ad38 <TIM_OC1_SetConfig+0xc8>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d10c      	bne.n	800ace6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	f023 0308 	bic.w	r3, r3, #8
 800acd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	697a      	ldr	r2, [r7, #20]
 800acda:	4313      	orrs	r3, r2
 800acdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	f023 0304 	bic.w	r3, r3, #4
 800ace4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4a13      	ldr	r2, [pc, #76]	; (800ad38 <TIM_OC1_SetConfig+0xc8>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d111      	bne.n	800ad12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800acfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	695b      	ldr	r3, [r3, #20]
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	693a      	ldr	r2, [r7, #16]
 800ad16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	685a      	ldr	r2, [r3, #4]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	697a      	ldr	r2, [r7, #20]
 800ad2a:	621a      	str	r2, [r3, #32]
}
 800ad2c:	bf00      	nop
 800ad2e:	371c      	adds	r7, #28
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr
 800ad38:	40010000 	.word	0x40010000

0800ad3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b087      	sub	sp, #28
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	f023 0210 	bic.w	r2, r3, #16
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a1b      	ldr	r3, [r3, #32]
 800ad56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	699b      	ldr	r3, [r3, #24]
 800ad62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	021b      	lsls	r3, r3, #8
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f023 0320 	bic.w	r3, r3, #32
 800ad86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	011b      	lsls	r3, r3, #4
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a1e      	ldr	r2, [pc, #120]	; (800ae10 <TIM_OC2_SetConfig+0xd4>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d10d      	bne.n	800adb8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ada2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	011b      	lsls	r3, r3, #4
 800adaa:	697a      	ldr	r2, [r7, #20]
 800adac:	4313      	orrs	r3, r2
 800adae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4a15      	ldr	r2, [pc, #84]	; (800ae10 <TIM_OC2_SetConfig+0xd4>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d113      	bne.n	800ade8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800adc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800adce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	695b      	ldr	r3, [r3, #20]
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	4313      	orrs	r3, r2
 800adda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	699b      	ldr	r3, [r3, #24]
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	693a      	ldr	r2, [r7, #16]
 800ade4:	4313      	orrs	r3, r2
 800ade6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	685a      	ldr	r2, [r3, #4]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	697a      	ldr	r2, [r7, #20]
 800ae00:	621a      	str	r2, [r3, #32]
}
 800ae02:	bf00      	nop
 800ae04:	371c      	adds	r7, #28
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	40010000 	.word	0x40010000

0800ae14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b087      	sub	sp, #28
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a1b      	ldr	r3, [r3, #32]
 800ae22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	69db      	ldr	r3, [r3, #28]
 800ae3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f023 0303 	bic.w	r3, r3, #3
 800ae4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	021b      	lsls	r3, r3, #8
 800ae64:	697a      	ldr	r2, [r7, #20]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a1d      	ldr	r2, [pc, #116]	; (800aee4 <TIM_OC3_SetConfig+0xd0>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d10d      	bne.n	800ae8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	021b      	lsls	r3, r3, #8
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a14      	ldr	r2, [pc, #80]	; (800aee4 <TIM_OC3_SetConfig+0xd0>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d113      	bne.n	800aebe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	695b      	ldr	r3, [r3, #20]
 800aeaa:	011b      	lsls	r3, r3, #4
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	699b      	ldr	r3, [r3, #24]
 800aeb6:	011b      	lsls	r3, r3, #4
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	4313      	orrs	r3, r2
 800aebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	693a      	ldr	r2, [r7, #16]
 800aec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	685a      	ldr	r2, [r3, #4]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	697a      	ldr	r2, [r7, #20]
 800aed6:	621a      	str	r2, [r3, #32]
}
 800aed8:	bf00      	nop
 800aeda:	371c      	adds	r7, #28
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr
 800aee4:	40010000 	.word	0x40010000

0800aee8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a1b      	ldr	r3, [r3, #32]
 800af02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	021b      	lsls	r3, r3, #8
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	4313      	orrs	r3, r2
 800af2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	031b      	lsls	r3, r3, #12
 800af3a:	693a      	ldr	r2, [r7, #16]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a10      	ldr	r2, [pc, #64]	; (800af84 <TIM_OC4_SetConfig+0x9c>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d109      	bne.n	800af5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	019b      	lsls	r3, r3, #6
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	4313      	orrs	r3, r2
 800af5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	697a      	ldr	r2, [r7, #20]
 800af60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	693a      	ldr	r2, [r7, #16]
 800af74:	621a      	str	r2, [r3, #32]
}
 800af76:	bf00      	nop
 800af78:	371c      	adds	r7, #28
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	40010000 	.word	0x40010000

0800af88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af88:	b480      	push	{r7}
 800af8a:	b087      	sub	sp, #28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6a1b      	ldr	r3, [r3, #32]
 800af98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	f023 0201 	bic.w	r2, r3, #1
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	699b      	ldr	r3, [r3, #24]
 800afaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800afb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	011b      	lsls	r3, r3, #4
 800afb8:	693a      	ldr	r2, [r7, #16]
 800afba:	4313      	orrs	r3, r2
 800afbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	f023 030a 	bic.w	r3, r3, #10
 800afc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800afc6:	697a      	ldr	r2, [r7, #20]
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	4313      	orrs	r3, r2
 800afcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	693a      	ldr	r2, [r7, #16]
 800afd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	697a      	ldr	r2, [r7, #20]
 800afd8:	621a      	str	r2, [r3, #32]
}
 800afda:	bf00      	nop
 800afdc:	371c      	adds	r7, #28
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afe6:	b480      	push	{r7}
 800afe8:	b087      	sub	sp, #28
 800afea:	af00      	add	r7, sp, #0
 800afec:	60f8      	str	r0, [r7, #12]
 800afee:	60b9      	str	r1, [r7, #8]
 800aff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	6a1b      	ldr	r3, [r3, #32]
 800aff6:	f023 0210 	bic.w	r2, r3, #16
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6a1b      	ldr	r3, [r3, #32]
 800b008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b010:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	031b      	lsls	r3, r3, #12
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	4313      	orrs	r3, r2
 800b01a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b022:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	011b      	lsls	r3, r3, #4
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	697a      	ldr	r2, [r7, #20]
 800b032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	693a      	ldr	r2, [r7, #16]
 800b038:	621a      	str	r2, [r3, #32]
}
 800b03a:	bf00      	nop
 800b03c:	371c      	adds	r7, #28
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr

0800b046 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b046:	b480      	push	{r7}
 800b048:	b085      	sub	sp, #20
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b05c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	4313      	orrs	r3, r2
 800b064:	f043 0307 	orr.w	r3, r3, #7
 800b068:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	609a      	str	r2, [r3, #8]
}
 800b070:	bf00      	nop
 800b072:	3714      	adds	r7, #20
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b087      	sub	sp, #28
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
 800b088:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b096:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	021a      	lsls	r2, r3, #8
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	431a      	orrs	r2, r3
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	697a      	ldr	r2, [r7, #20]
 800b0ae:	609a      	str	r2, [r3, #8]
}
 800b0b0:	bf00      	nop
 800b0b2:	371c      	adds	r7, #28
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b087      	sub	sp, #28
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	f003 031f 	and.w	r3, r3, #31
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6a1a      	ldr	r2, [r3, #32]
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	43db      	mvns	r3, r3
 800b0de:	401a      	ands	r2, r3
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6a1a      	ldr	r2, [r3, #32]
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	f003 031f 	and.w	r3, r3, #31
 800b0ee:	6879      	ldr	r1, [r7, #4]
 800b0f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b0f4:	431a      	orrs	r2, r3
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	621a      	str	r2, [r3, #32]
}
 800b0fa:	bf00      	nop
 800b0fc:	371c      	adds	r7, #28
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
	...

0800b108 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b112:	2300      	movs	r3, #0
 800b114:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d109      	bne.n	800b130 <HAL_TIMEx_PWMN_Start_IT+0x28>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b122:	b2db      	uxtb	r3, r3
 800b124:	2b01      	cmp	r3, #1
 800b126:	bf14      	ite	ne
 800b128:	2301      	movne	r3, #1
 800b12a:	2300      	moveq	r3, #0
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	e022      	b.n	800b176 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	2b04      	cmp	r3, #4
 800b134:	d109      	bne.n	800b14a <HAL_TIMEx_PWMN_Start_IT+0x42>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b01      	cmp	r3, #1
 800b140:	bf14      	ite	ne
 800b142:	2301      	movne	r3, #1
 800b144:	2300      	moveq	r3, #0
 800b146:	b2db      	uxtb	r3, r3
 800b148:	e015      	b.n	800b176 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	2b08      	cmp	r3, #8
 800b14e:	d109      	bne.n	800b164 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b156:	b2db      	uxtb	r3, r3
 800b158:	2b01      	cmp	r3, #1
 800b15a:	bf14      	ite	ne
 800b15c:	2301      	movne	r3, #1
 800b15e:	2300      	moveq	r3, #0
 800b160:	b2db      	uxtb	r3, r3
 800b162:	e008      	b.n	800b176 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	bf14      	ite	ne
 800b170:	2301      	movne	r3, #1
 800b172:	2300      	moveq	r3, #0
 800b174:	b2db      	uxtb	r3, r3
 800b176:	2b00      	cmp	r3, #0
 800b178:	d001      	beq.n	800b17e <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800b17a:	2301      	movs	r3, #1
 800b17c:	e099      	b.n	800b2b2 <HAL_TIMEx_PWMN_Start_IT+0x1aa>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d104      	bne.n	800b18e <HAL_TIMEx_PWMN_Start_IT+0x86>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2202      	movs	r2, #2
 800b188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b18c:	e013      	b.n	800b1b6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	2b04      	cmp	r3, #4
 800b192:	d104      	bne.n	800b19e <HAL_TIMEx_PWMN_Start_IT+0x96>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2202      	movs	r2, #2
 800b198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b19c:	e00b      	b.n	800b1b6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	2b08      	cmp	r3, #8
 800b1a2:	d104      	bne.n	800b1ae <HAL_TIMEx_PWMN_Start_IT+0xa6>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2202      	movs	r2, #2
 800b1a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1ac:	e003      	b.n	800b1b6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2202      	movs	r2, #2
 800b1b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	2b08      	cmp	r3, #8
 800b1ba:	d01b      	beq.n	800b1f4 <HAL_TIMEx_PWMN_Start_IT+0xec>
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	2b08      	cmp	r3, #8
 800b1c0:	d821      	bhi.n	800b206 <HAL_TIMEx_PWMN_Start_IT+0xfe>
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d003      	beq.n	800b1d0 <HAL_TIMEx_PWMN_Start_IT+0xc8>
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	2b04      	cmp	r3, #4
 800b1cc:	d009      	beq.n	800b1e2 <HAL_TIMEx_PWMN_Start_IT+0xda>
 800b1ce:	e01a      	b.n	800b206 <HAL_TIMEx_PWMN_Start_IT+0xfe>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68da      	ldr	r2, [r3, #12]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f042 0202 	orr.w	r2, r2, #2
 800b1de:	60da      	str	r2, [r3, #12]
      break;
 800b1e0:	e014      	b.n	800b20c <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68da      	ldr	r2, [r3, #12]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f042 0204 	orr.w	r2, r2, #4
 800b1f0:	60da      	str	r2, [r3, #12]
      break;
 800b1f2:	e00b      	b.n	800b20c <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	68da      	ldr	r2, [r3, #12]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f042 0208 	orr.w	r2, r2, #8
 800b202:	60da      	str	r2, [r3, #12]
      break;
 800b204:	e002      	b.n	800b20c <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    default:
      status = HAL_ERROR;
 800b206:	2301      	movs	r3, #1
 800b208:	73fb      	strb	r3, [r7, #15]
      break;
 800b20a:	bf00      	nop
  }

  if (status == HAL_OK)
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d14e      	bne.n	800b2b0 <HAL_TIMEx_PWMN_Start_IT+0x1a8>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68da      	ldr	r2, [r3, #12]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b220:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	2204      	movs	r2, #4
 800b228:	6839      	ldr	r1, [r7, #0]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f000 f8d2 	bl	800b3d4 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b23e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a1d      	ldr	r2, [pc, #116]	; (800b2bc <HAL_TIMEx_PWMN_Start_IT+0x1b4>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d018      	beq.n	800b27c <HAL_TIMEx_PWMN_Start_IT+0x174>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b252:	d013      	beq.n	800b27c <HAL_TIMEx_PWMN_Start_IT+0x174>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a19      	ldr	r2, [pc, #100]	; (800b2c0 <HAL_TIMEx_PWMN_Start_IT+0x1b8>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d00e      	beq.n	800b27c <HAL_TIMEx_PWMN_Start_IT+0x174>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a18      	ldr	r2, [pc, #96]	; (800b2c4 <HAL_TIMEx_PWMN_Start_IT+0x1bc>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d009      	beq.n	800b27c <HAL_TIMEx_PWMN_Start_IT+0x174>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a16      	ldr	r2, [pc, #88]	; (800b2c8 <HAL_TIMEx_PWMN_Start_IT+0x1c0>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d004      	beq.n	800b27c <HAL_TIMEx_PWMN_Start_IT+0x174>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a15      	ldr	r2, [pc, #84]	; (800b2cc <HAL_TIMEx_PWMN_Start_IT+0x1c4>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d111      	bne.n	800b2a0 <HAL_TIMEx_PWMN_Start_IT+0x198>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	f003 0307 	and.w	r3, r3, #7
 800b286:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	2b06      	cmp	r3, #6
 800b28c:	d010      	beq.n	800b2b0 <HAL_TIMEx_PWMN_Start_IT+0x1a8>
      {
        __HAL_TIM_ENABLE(htim);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f042 0201 	orr.w	r2, r2, #1
 800b29c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b29e:	e007      	b.n	800b2b0 <HAL_TIMEx_PWMN_Start_IT+0x1a8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f042 0201 	orr.w	r2, r2, #1
 800b2ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800b2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	40010000 	.word	0x40010000
 800b2c0:	40000400 	.word	0x40000400
 800b2c4:	40000800 	.word	0x40000800
 800b2c8:	40000c00 	.word	0x40000c00
 800b2cc:	40014000 	.word	0x40014000

0800b2d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b085      	sub	sp, #20
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d101      	bne.n	800b2e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b2e4:	2302      	movs	r3, #2
 800b2e6:	e050      	b.n	800b38a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2202      	movs	r2, #2
 800b2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b30e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	4313      	orrs	r3, r2
 800b318:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a1c      	ldr	r2, [pc, #112]	; (800b398 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d018      	beq.n	800b35e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b334:	d013      	beq.n	800b35e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a18      	ldr	r2, [pc, #96]	; (800b39c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d00e      	beq.n	800b35e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a16      	ldr	r2, [pc, #88]	; (800b3a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d009      	beq.n	800b35e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a15      	ldr	r2, [pc, #84]	; (800b3a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d004      	beq.n	800b35e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a13      	ldr	r2, [pc, #76]	; (800b3a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d10c      	bne.n	800b378 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b364:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	4313      	orrs	r3, r2
 800b36e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	68ba      	ldr	r2, [r7, #8]
 800b376:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b388:	2300      	movs	r3, #0
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3714      	adds	r7, #20
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	40010000 	.word	0x40010000
 800b39c:	40000400 	.word	0x40000400
 800b3a0:	40000800 	.word	0x40000800
 800b3a4:	40000c00 	.word	0x40000c00
 800b3a8:	40014000 	.word	0x40014000

0800b3ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3b4:	bf00      	nop
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b087      	sub	sp, #28
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	f003 031f 	and.w	r3, r3, #31
 800b3e6:	2204      	movs	r2, #4
 800b3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	6a1a      	ldr	r2, [r3, #32]
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	43db      	mvns	r3, r3
 800b3f6:	401a      	ands	r2, r3
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6a1a      	ldr	r2, [r3, #32]
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	f003 031f 	and.w	r3, r3, #31
 800b406:	6879      	ldr	r1, [r7, #4]
 800b408:	fa01 f303 	lsl.w	r3, r1, r3
 800b40c:	431a      	orrs	r2, r3
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	621a      	str	r2, [r3, #32]
}
 800b412:	bf00      	nop
 800b414:	371c      	adds	r7, #28
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr

0800b41e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b082      	sub	sp, #8
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d101      	bne.n	800b430 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b42c:	2301      	movs	r3, #1
 800b42e:	e03f      	b.n	800b4b0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b436:	b2db      	uxtb	r3, r3
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d106      	bne.n	800b44a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f7f9 fc9f 	bl	8004d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2224      	movs	r2, #36	; 0x24
 800b44e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	68da      	ldr	r2, [r3, #12]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b460:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 ff98 	bl	800c398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	691a      	ldr	r2, [r3, #16]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b476:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	695a      	ldr	r2, [r3, #20]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b486:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	68da      	ldr	r2, [r3, #12]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b496:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2220      	movs	r2, #32
 800b4a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2220      	movs	r2, #32
 800b4aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b08a      	sub	sp, #40	; 0x28
 800b4bc:	af02      	add	r7, sp, #8
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	603b      	str	r3, [r7, #0]
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	2b20      	cmp	r3, #32
 800b4d6:	d17c      	bne.n	800b5d2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d002      	beq.n	800b4e4 <HAL_UART_Transmit+0x2c>
 800b4de:	88fb      	ldrh	r3, [r7, #6]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e075      	b.n	800b5d4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d101      	bne.n	800b4f6 <HAL_UART_Transmit+0x3e>
 800b4f2:	2302      	movs	r3, #2
 800b4f4:	e06e      	b.n	800b5d4 <HAL_UART_Transmit+0x11c>
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2200      	movs	r2, #0
 800b502:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2221      	movs	r2, #33	; 0x21
 800b508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b50c:	f7f9 fd8e 	bl	800502c <HAL_GetTick>
 800b510:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	88fa      	ldrh	r2, [r7, #6]
 800b516:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	88fa      	ldrh	r2, [r7, #6]
 800b51c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b526:	d108      	bne.n	800b53a <HAL_UART_Transmit+0x82>
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d104      	bne.n	800b53a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b530:	2300      	movs	r3, #0
 800b532:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	61bb      	str	r3, [r7, #24]
 800b538:	e003      	b.n	800b542 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b53e:	2300      	movs	r3, #0
 800b540:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2200      	movs	r2, #0
 800b546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b54a:	e02a      	b.n	800b5a2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	2200      	movs	r2, #0
 800b554:	2180      	movs	r1, #128	; 0x80
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	f000 fc54 	bl	800be04 <UART_WaitOnFlagUntilTimeout>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d001      	beq.n	800b566 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b562:	2303      	movs	r3, #3
 800b564:	e036      	b.n	800b5d4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d10b      	bne.n	800b584 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	881b      	ldrh	r3, [r3, #0]
 800b570:	461a      	mov	r2, r3
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b57a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	3302      	adds	r3, #2
 800b580:	61bb      	str	r3, [r7, #24]
 800b582:	e007      	b.n	800b594 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	781a      	ldrb	r2, [r3, #0]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	3301      	adds	r3, #1
 800b592:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b598:	b29b      	uxth	r3, r3
 800b59a:	3b01      	subs	r3, #1
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d1cf      	bne.n	800b54c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	2140      	movs	r1, #64	; 0x40
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f000 fc24 	bl	800be04 <UART_WaitOnFlagUntilTimeout>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d001      	beq.n	800b5c6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	e006      	b.n	800b5d4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2220      	movs	r2, #32
 800b5ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	e000      	b.n	800b5d4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b5d2:	2302      	movs	r3, #2
  }
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3720      	adds	r7, #32
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b08c      	sub	sp, #48	; 0x30
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	60b9      	str	r1, [r7, #8]
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	2b20      	cmp	r3, #32
 800b5f4:	d152      	bne.n	800b69c <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d002      	beq.n	800b602 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800b5fc:	88fb      	ldrh	r3, [r7, #6]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d101      	bne.n	800b606 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	e04b      	b.n	800b69e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d101      	bne.n	800b614 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800b610:	2302      	movs	r3, #2
 800b612:	e044      	b.n	800b69e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2201      	movs	r2, #1
 800b618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2201      	movs	r2, #1
 800b620:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b622:	88fb      	ldrh	r3, [r7, #6]
 800b624:	461a      	mov	r2, r3
 800b626:	68b9      	ldr	r1, [r7, #8]
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f000 fc59 	bl	800bee0 <UART_Start_Receive_DMA>
 800b62e:	4603      	mov	r3, r0
 800b630:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d12c      	bne.n	800b696 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b640:	2b01      	cmp	r3, #1
 800b642:	d125      	bne.n	800b690 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b644:	2300      	movs	r3, #0
 800b646:	613b      	str	r3, [r7, #16]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	613b      	str	r3, [r7, #16]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	613b      	str	r3, [r7, #16]
 800b658:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	330c      	adds	r3, #12
 800b660:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	e853 3f00 	ldrex	r3, [r3]
 800b668:	617b      	str	r3, [r7, #20]
   return(result);
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f043 0310 	orr.w	r3, r3, #16
 800b670:	62bb      	str	r3, [r7, #40]	; 0x28
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	330c      	adds	r3, #12
 800b678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b67a:	627a      	str	r2, [r7, #36]	; 0x24
 800b67c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67e:	6a39      	ldr	r1, [r7, #32]
 800b680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b682:	e841 2300 	strex	r3, r2, [r1]
 800b686:	61fb      	str	r3, [r7, #28]
   return(result);
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1e5      	bne.n	800b65a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800b68e:	e002      	b.n	800b696 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b690:	2301      	movs	r3, #1
 800b692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800b696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b69a:	e000      	b.n	800b69e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800b69c:	2302      	movs	r3, #2
  }
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3730      	adds	r7, #48	; 0x30
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
	...

0800b6a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b0ba      	sub	sp, #232	; 0xe8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	695b      	ldr	r3, [r3, #20]
 800b6ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b6da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6de:	f003 030f 	and.w	r3, r3, #15
 800b6e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b6e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d10f      	bne.n	800b70e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b6ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6f2:	f003 0320 	and.w	r3, r3, #32
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d009      	beq.n	800b70e <HAL_UART_IRQHandler+0x66>
 800b6fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6fe:	f003 0320 	and.w	r3, r3, #32
 800b702:	2b00      	cmp	r3, #0
 800b704:	d003      	beq.n	800b70e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fd8b 	bl	800c222 <UART_Receive_IT>
      return;
 800b70c:	e256      	b.n	800bbbc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b70e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b712:	2b00      	cmp	r3, #0
 800b714:	f000 80de 	beq.w	800b8d4 <HAL_UART_IRQHandler+0x22c>
 800b718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b71c:	f003 0301 	and.w	r3, r3, #1
 800b720:	2b00      	cmp	r3, #0
 800b722:	d106      	bne.n	800b732 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b728:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f000 80d1 	beq.w	800b8d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b736:	f003 0301 	and.w	r3, r3, #1
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00b      	beq.n	800b756 <HAL_UART_IRQHandler+0xae>
 800b73e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b746:	2b00      	cmp	r3, #0
 800b748:	d005      	beq.n	800b756 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b74e:	f043 0201 	orr.w	r2, r3, #1
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b75a:	f003 0304 	and.w	r3, r3, #4
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00b      	beq.n	800b77a <HAL_UART_IRQHandler+0xd2>
 800b762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b766:	f003 0301 	and.w	r3, r3, #1
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d005      	beq.n	800b77a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b772:	f043 0202 	orr.w	r2, r3, #2
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b77a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b77e:	f003 0302 	and.w	r3, r3, #2
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00b      	beq.n	800b79e <HAL_UART_IRQHandler+0xf6>
 800b786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b78a:	f003 0301 	and.w	r3, r3, #1
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d005      	beq.n	800b79e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b796:	f043 0204 	orr.w	r2, r3, #4
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b79e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7a2:	f003 0308 	and.w	r3, r3, #8
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d011      	beq.n	800b7ce <HAL_UART_IRQHandler+0x126>
 800b7aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7ae:	f003 0320 	and.w	r3, r3, #32
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d105      	bne.n	800b7c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b7b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d005      	beq.n	800b7ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7c6:	f043 0208 	orr.w	r2, r3, #8
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f000 81ed 	beq.w	800bbb2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b7d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7dc:	f003 0320 	and.w	r3, r3, #32
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d008      	beq.n	800b7f6 <HAL_UART_IRQHandler+0x14e>
 800b7e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7e8:	f003 0320 	and.w	r3, r3, #32
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d002      	beq.n	800b7f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 fd16 	bl	800c222 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	695b      	ldr	r3, [r3, #20]
 800b7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b800:	2b40      	cmp	r3, #64	; 0x40
 800b802:	bf0c      	ite	eq
 800b804:	2301      	moveq	r3, #1
 800b806:	2300      	movne	r3, #0
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b812:	f003 0308 	and.w	r3, r3, #8
 800b816:	2b00      	cmp	r3, #0
 800b818:	d103      	bne.n	800b822 <HAL_UART_IRQHandler+0x17a>
 800b81a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d04f      	beq.n	800b8c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 fc1e 	bl	800c064 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	695b      	ldr	r3, [r3, #20]
 800b82e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b832:	2b40      	cmp	r3, #64	; 0x40
 800b834:	d141      	bne.n	800b8ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	3314      	adds	r3, #20
 800b83c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b840:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b844:	e853 3f00 	ldrex	r3, [r3]
 800b848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b84c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b854:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3314      	adds	r3, #20
 800b85e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b862:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b866:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b86e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b872:	e841 2300 	strex	r3, r2, [r1]
 800b876:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b87a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d1d9      	bne.n	800b836 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b886:	2b00      	cmp	r3, #0
 800b888:	d013      	beq.n	800b8b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b88e:	4a7d      	ldr	r2, [pc, #500]	; (800ba84 <HAL_UART_IRQHandler+0x3dc>)
 800b890:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b896:	4618      	mov	r0, r3
 800b898:	f7fa fad0 	bl	8005e3c <HAL_DMA_Abort_IT>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d016      	beq.n	800b8d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8b0:	e00e      	b.n	800b8d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f9a4 	bl	800bc00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8b8:	e00a      	b.n	800b8d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f9a0 	bl	800bc00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8c0:	e006      	b.n	800b8d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 f99c 	bl	800bc00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b8ce:	e170      	b.n	800bbb2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8d0:	bf00      	nop
    return;
 800b8d2:	e16e      	b.n	800bbb2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	f040 814a 	bne.w	800bb72 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b8de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8e2:	f003 0310 	and.w	r3, r3, #16
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	f000 8143 	beq.w	800bb72 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b8ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8f0:	f003 0310 	and.w	r3, r3, #16
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f000 813c 	beq.w	800bb72 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	60bb      	str	r3, [r7, #8]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	60bb      	str	r3, [r7, #8]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	60bb      	str	r3, [r7, #8]
 800b90e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	695b      	ldr	r3, [r3, #20]
 800b916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b91a:	2b40      	cmp	r3, #64	; 0x40
 800b91c:	f040 80b4 	bne.w	800ba88 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b92c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b930:	2b00      	cmp	r3, #0
 800b932:	f000 8140 	beq.w	800bbb6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b93a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b93e:	429a      	cmp	r2, r3
 800b940:	f080 8139 	bcs.w	800bbb6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b94a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b950:	69db      	ldr	r3, [r3, #28]
 800b952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b956:	f000 8088 	beq.w	800ba6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	330c      	adds	r3, #12
 800b960:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b964:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b968:	e853 3f00 	ldrex	r3, [r3]
 800b96c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b970:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b978:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	330c      	adds	r3, #12
 800b982:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b986:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b98a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b992:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b996:	e841 2300 	strex	r3, r2, [r1]
 800b99a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b99e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1d9      	bne.n	800b95a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3314      	adds	r3, #20
 800b9ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9b0:	e853 3f00 	ldrex	r3, [r3]
 800b9b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b9b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9b8:	f023 0301 	bic.w	r3, r3, #1
 800b9bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	3314      	adds	r3, #20
 800b9c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b9ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b9ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b9d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b9d6:	e841 2300 	strex	r3, r2, [r1]
 800b9da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b9dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1e1      	bne.n	800b9a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	3314      	adds	r3, #20
 800b9e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9ec:	e853 3f00 	ldrex	r3, [r3]
 800b9f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b9f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	3314      	adds	r3, #20
 800ba02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ba06:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ba08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ba0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ba0e:	e841 2300 	strex	r3, r2, [r1]
 800ba12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ba14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1e3      	bne.n	800b9e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2220      	movs	r2, #32
 800ba1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	330c      	adds	r3, #12
 800ba2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba32:	e853 3f00 	ldrex	r3, [r3]
 800ba36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba3a:	f023 0310 	bic.w	r3, r3, #16
 800ba3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	330c      	adds	r3, #12
 800ba48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ba4c:	65ba      	str	r2, [r7, #88]	; 0x58
 800ba4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba54:	e841 2300 	strex	r3, r2, [r1]
 800ba58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1e3      	bne.n	800ba28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7fa f979 	bl	8005d5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	1ad3      	subs	r3, r2, r3
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	4619      	mov	r1, r3
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f7f8 faa4 	bl	8003fc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ba80:	e099      	b.n	800bbb6 <HAL_UART_IRQHandler+0x50e>
 800ba82:	bf00      	nop
 800ba84:	0800c12b 	.word	0x0800c12b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	1ad3      	subs	r3, r2, r3
 800ba94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 808b 	beq.w	800bbba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800baa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f000 8086 	beq.w	800bbba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	330c      	adds	r3, #12
 800bab4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab8:	e853 3f00 	ldrex	r3, [r3]
 800babc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800babe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bac4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	330c      	adds	r3, #12
 800bace:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bad2:	647a      	str	r2, [r7, #68]	; 0x44
 800bad4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bada:	e841 2300 	strex	r3, r2, [r1]
 800bade:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1e3      	bne.n	800baae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3314      	adds	r3, #20
 800baec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf0:	e853 3f00 	ldrex	r3, [r3]
 800baf4:	623b      	str	r3, [r7, #32]
   return(result);
 800baf6:	6a3b      	ldr	r3, [r7, #32]
 800baf8:	f023 0301 	bic.w	r3, r3, #1
 800bafc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	3314      	adds	r3, #20
 800bb06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bb0a:	633a      	str	r2, [r7, #48]	; 0x30
 800bb0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb12:	e841 2300 	strex	r3, r2, [r1]
 800bb16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d1e3      	bne.n	800bae6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2220      	movs	r2, #32
 800bb22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	330c      	adds	r3, #12
 800bb32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	e853 3f00 	ldrex	r3, [r3]
 800bb3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f023 0310 	bic.w	r3, r3, #16
 800bb42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	330c      	adds	r3, #12
 800bb4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bb50:	61fa      	str	r2, [r7, #28]
 800bb52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb54:	69b9      	ldr	r1, [r7, #24]
 800bb56:	69fa      	ldr	r2, [r7, #28]
 800bb58:	e841 2300 	strex	r3, r2, [r1]
 800bb5c:	617b      	str	r3, [r7, #20]
   return(result);
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1e3      	bne.n	800bb2c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bb64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7f8 fa2c 	bl	8003fc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bb70:	e023      	b.n	800bbba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bb72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d009      	beq.n	800bb92 <HAL_UART_IRQHandler+0x4ea>
 800bb7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d003      	beq.n	800bb92 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 fae1 	bl	800c152 <UART_Transmit_IT>
    return;
 800bb90:	e014      	b.n	800bbbc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bb92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00e      	beq.n	800bbbc <HAL_UART_IRQHandler+0x514>
 800bb9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d008      	beq.n	800bbbc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fb21 	bl	800c1f2 <UART_EndTransmit_IT>
    return;
 800bbb0:	e004      	b.n	800bbbc <HAL_UART_IRQHandler+0x514>
    return;
 800bbb2:	bf00      	nop
 800bbb4:	e002      	b.n	800bbbc <HAL_UART_IRQHandler+0x514>
      return;
 800bbb6:	bf00      	nop
 800bbb8:	e000      	b.n	800bbbc <HAL_UART_IRQHandler+0x514>
      return;
 800bbba:	bf00      	nop
  }
}
 800bbbc:	37e8      	adds	r7, #232	; 0xe8
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop

0800bbc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bbcc:	bf00      	nop
 800bbce:	370c      	adds	r7, #12
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bbe0:	bf00      	nop
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bbf4:	bf00      	nop
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bc08:	bf00      	nop
 800bc0a:	370c      	adds	r7, #12
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b09c      	sub	sp, #112	; 0x70
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc20:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d172      	bne.n	800bd16 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800bc30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc32:	2200      	movs	r2, #0
 800bc34:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	330c      	adds	r3, #12
 800bc3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc40:	e853 3f00 	ldrex	r3, [r3]
 800bc44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bc46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc4c:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	330c      	adds	r3, #12
 800bc54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bc56:	65ba      	str	r2, [r7, #88]	; 0x58
 800bc58:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc5e:	e841 2300 	strex	r3, r2, [r1]
 800bc62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bc64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d1e5      	bne.n	800bc36 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	3314      	adds	r3, #20
 800bc70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc74:	e853 3f00 	ldrex	r3, [r3]
 800bc78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc7c:	f023 0301 	bic.w	r3, r3, #1
 800bc80:	667b      	str	r3, [r7, #100]	; 0x64
 800bc82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	3314      	adds	r3, #20
 800bc88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc8a:	647a      	str	r2, [r7, #68]	; 0x44
 800bc8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc92:	e841 2300 	strex	r3, r2, [r1]
 800bc96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d1e5      	bne.n	800bc6a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	3314      	adds	r3, #20
 800bca4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca8:	e853 3f00 	ldrex	r3, [r3]
 800bcac:	623b      	str	r3, [r7, #32]
   return(result);
 800bcae:	6a3b      	ldr	r3, [r7, #32]
 800bcb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcb4:	663b      	str	r3, [r7, #96]	; 0x60
 800bcb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	3314      	adds	r3, #20
 800bcbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcbe:	633a      	str	r2, [r7, #48]	; 0x30
 800bcc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcc6:	e841 2300 	strex	r3, r2, [r1]
 800bcca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1e5      	bne.n	800bc9e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bcd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcd4:	2220      	movs	r2, #32
 800bcd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d119      	bne.n	800bd16 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	330c      	adds	r3, #12
 800bce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	e853 3f00 	ldrex	r3, [r3]
 800bcf0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f023 0310 	bic.w	r3, r3, #16
 800bcf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	330c      	adds	r3, #12
 800bd00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bd02:	61fa      	str	r2, [r7, #28]
 800bd04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd06:	69b9      	ldr	r1, [r7, #24]
 800bd08:	69fa      	ldr	r2, [r7, #28]
 800bd0a:	e841 2300 	strex	r3, r2, [r1]
 800bd0e:	617b      	str	r3, [r7, #20]
   return(result);
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1e5      	bne.n	800bce2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d106      	bne.n	800bd2c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bd22:	4619      	mov	r1, r3
 800bd24:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bd26:	f7f8 f94f 	bl	8003fc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bd2a:	e002      	b.n	800bd32 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800bd2c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bd2e:	f7ff ff53 	bl	800bbd8 <HAL_UART_RxCpltCallback>
}
 800bd32:	bf00      	nop
 800bd34:	3770      	adds	r7, #112	; 0x70
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b084      	sub	sp, #16
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd46:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d108      	bne.n	800bd62 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bd54:	085b      	lsrs	r3, r3, #1
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	4619      	mov	r1, r3
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f7f8 f934 	bl	8003fc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bd60:	e002      	b.n	800bd68 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f7ff ff42 	bl	800bbec <HAL_UART_RxHalfCpltCallback>
}
 800bd68:	bf00      	nop
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd80:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	695b      	ldr	r3, [r3, #20]
 800bd88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd8c:	2b80      	cmp	r3, #128	; 0x80
 800bd8e:	bf0c      	ite	eq
 800bd90:	2301      	moveq	r3, #1
 800bd92:	2300      	movne	r3, #0
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	2b21      	cmp	r3, #33	; 0x21
 800bda2:	d108      	bne.n	800bdb6 <UART_DMAError+0x46>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d005      	beq.n	800bdb6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	2200      	movs	r2, #0
 800bdae:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bdb0:	68b8      	ldr	r0, [r7, #8]
 800bdb2:	f000 f92f 	bl	800c014 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	695b      	ldr	r3, [r3, #20]
 800bdbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdc0:	2b40      	cmp	r3, #64	; 0x40
 800bdc2:	bf0c      	ite	eq
 800bdc4:	2301      	moveq	r3, #1
 800bdc6:	2300      	movne	r3, #0
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	2b22      	cmp	r3, #34	; 0x22
 800bdd6:	d108      	bne.n	800bdea <UART_DMAError+0x7a>
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d005      	beq.n	800bdea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	2200      	movs	r2, #0
 800bde2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bde4:	68b8      	ldr	r0, [r7, #8]
 800bde6:	f000 f93d 	bl	800c064 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdee:	f043 0210 	orr.w	r2, r3, #16
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bdf6:	68b8      	ldr	r0, [r7, #8]
 800bdf8:	f7ff ff02 	bl	800bc00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdfc:	bf00      	nop
 800bdfe:	3710      	adds	r7, #16
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b090      	sub	sp, #64	; 0x40
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	603b      	str	r3, [r7, #0]
 800be10:	4613      	mov	r3, r2
 800be12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be14:	e050      	b.n	800beb8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1c:	d04c      	beq.n	800beb8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800be1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be20:	2b00      	cmp	r3, #0
 800be22:	d007      	beq.n	800be34 <UART_WaitOnFlagUntilTimeout+0x30>
 800be24:	f7f9 f902 	bl	800502c <HAL_GetTick>
 800be28:	4602      	mov	r2, r0
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	1ad3      	subs	r3, r2, r3
 800be2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be30:	429a      	cmp	r2, r3
 800be32:	d241      	bcs.n	800beb8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	330c      	adds	r3, #12
 800be3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3e:	e853 3f00 	ldrex	r3, [r3]
 800be42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800be4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	330c      	adds	r3, #12
 800be52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be54:	637a      	str	r2, [r7, #52]	; 0x34
 800be56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be5c:	e841 2300 	strex	r3, r2, [r1]
 800be60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800be62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1e5      	bne.n	800be34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	3314      	adds	r3, #20
 800be6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	e853 3f00 	ldrex	r3, [r3]
 800be76:	613b      	str	r3, [r7, #16]
   return(result);
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	f023 0301 	bic.w	r3, r3, #1
 800be7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3314      	adds	r3, #20
 800be86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be88:	623a      	str	r2, [r7, #32]
 800be8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8c:	69f9      	ldr	r1, [r7, #28]
 800be8e:	6a3a      	ldr	r2, [r7, #32]
 800be90:	e841 2300 	strex	r3, r2, [r1]
 800be94:	61bb      	str	r3, [r7, #24]
   return(result);
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1e5      	bne.n	800be68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2220      	movs	r2, #32
 800bea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2220      	movs	r2, #32
 800bea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2200      	movs	r2, #0
 800beb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800beb4:	2303      	movs	r3, #3
 800beb6:	e00f      	b.n	800bed8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	4013      	ands	r3, r2
 800bec2:	68ba      	ldr	r2, [r7, #8]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	bf0c      	ite	eq
 800bec8:	2301      	moveq	r3, #1
 800beca:	2300      	movne	r3, #0
 800becc:	b2db      	uxtb	r3, r3
 800bece:	461a      	mov	r2, r3
 800bed0:	79fb      	ldrb	r3, [r7, #7]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d09f      	beq.n	800be16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bed6:	2300      	movs	r3, #0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3740      	adds	r7, #64	; 0x40
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b098      	sub	sp, #96	; 0x60
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	4613      	mov	r3, r2
 800beec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800beee:	68ba      	ldr	r2, [r7, #8]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	88fa      	ldrh	r2, [r7, #6]
 800bef8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2200      	movs	r2, #0
 800befe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2222      	movs	r2, #34	; 0x22
 800bf04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf0c:	4a3e      	ldr	r2, [pc, #248]	; (800c008 <UART_Start_Receive_DMA+0x128>)
 800bf0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf14:	4a3d      	ldr	r2, [pc, #244]	; (800c00c <UART_Start_Receive_DMA+0x12c>)
 800bf16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf1c:	4a3c      	ldr	r2, [pc, #240]	; (800c010 <UART_Start_Receive_DMA+0x130>)
 800bf1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf24:	2200      	movs	r2, #0
 800bf26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bf28:	f107 0308 	add.w	r3, r7, #8
 800bf2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	3304      	adds	r3, #4
 800bf38:	4619      	mov	r1, r3
 800bf3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	88fb      	ldrh	r3, [r7, #6]
 800bf40:	f7f9 feb4 	bl	8005cac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800bf44:	2300      	movs	r3, #0
 800bf46:	613b      	str	r3, [r7, #16]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	613b      	str	r3, [r7, #16]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	613b      	str	r3, [r7, #16]
 800bf58:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	330c      	adds	r3, #12
 800bf68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf6c:	e853 3f00 	ldrex	r3, [r3]
 800bf70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf78:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	330c      	adds	r3, #12
 800bf80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bf82:	64fa      	str	r2, [r7, #76]	; 0x4c
 800bf84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf86:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bf88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf8a:	e841 2300 	strex	r3, r2, [r1]
 800bf8e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bf90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1e5      	bne.n	800bf62 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3314      	adds	r3, #20
 800bf9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa0:	e853 3f00 	ldrex	r3, [r3]
 800bfa4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa8:	f043 0301 	orr.w	r3, r3, #1
 800bfac:	657b      	str	r3, [r7, #84]	; 0x54
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	3314      	adds	r3, #20
 800bfb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bfb6:	63ba      	str	r2, [r7, #56]	; 0x38
 800bfb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bfbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfbe:	e841 2300 	strex	r3, r2, [r1]
 800bfc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d1e5      	bne.n	800bf96 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	3314      	adds	r3, #20
 800bfd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	e853 3f00 	ldrex	r3, [r3]
 800bfd8:	617b      	str	r3, [r7, #20]
   return(result);
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfe0:	653b      	str	r3, [r7, #80]	; 0x50
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	3314      	adds	r3, #20
 800bfe8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bfea:	627a      	str	r2, [r7, #36]	; 0x24
 800bfec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfee:	6a39      	ldr	r1, [r7, #32]
 800bff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bff2:	e841 2300 	strex	r3, r2, [r1]
 800bff6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1e5      	bne.n	800bfca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800bffe:	2300      	movs	r3, #0
}
 800c000:	4618      	mov	r0, r3
 800c002:	3760      	adds	r7, #96	; 0x60
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	0800bc15 	.word	0x0800bc15
 800c00c:	0800bd3b 	.word	0x0800bd3b
 800c010:	0800bd71 	.word	0x0800bd71

0800c014 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c014:	b480      	push	{r7}
 800c016:	b089      	sub	sp, #36	; 0x24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	330c      	adds	r3, #12
 800c022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	e853 3f00 	ldrex	r3, [r3]
 800c02a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c032:	61fb      	str	r3, [r7, #28]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	330c      	adds	r3, #12
 800c03a:	69fa      	ldr	r2, [r7, #28]
 800c03c:	61ba      	str	r2, [r7, #24]
 800c03e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c040:	6979      	ldr	r1, [r7, #20]
 800c042:	69ba      	ldr	r2, [r7, #24]
 800c044:	e841 2300 	strex	r3, r2, [r1]
 800c048:	613b      	str	r3, [r7, #16]
   return(result);
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d1e5      	bne.n	800c01c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2220      	movs	r2, #32
 800c054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c058:	bf00      	nop
 800c05a:	3724      	adds	r7, #36	; 0x24
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c064:	b480      	push	{r7}
 800c066:	b095      	sub	sp, #84	; 0x54
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	330c      	adds	r3, #12
 800c072:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c076:	e853 3f00 	ldrex	r3, [r3]
 800c07a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c082:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	330c      	adds	r3, #12
 800c08a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c08c:	643a      	str	r2, [r7, #64]	; 0x40
 800c08e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c090:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c094:	e841 2300 	strex	r3, r2, [r1]
 800c098:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d1e5      	bne.n	800c06c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	3314      	adds	r3, #20
 800c0a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a8:	6a3b      	ldr	r3, [r7, #32]
 800c0aa:	e853 3f00 	ldrex	r3, [r3]
 800c0ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	f023 0301 	bic.w	r3, r3, #1
 800c0b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	3314      	adds	r3, #20
 800c0be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0c8:	e841 2300 	strex	r3, r2, [r1]
 800c0cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d1e5      	bne.n	800c0a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d119      	bne.n	800c110 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	330c      	adds	r3, #12
 800c0e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	e853 3f00 	ldrex	r3, [r3]
 800c0ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	f023 0310 	bic.w	r3, r3, #16
 800c0f2:	647b      	str	r3, [r7, #68]	; 0x44
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	330c      	adds	r3, #12
 800c0fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0fc:	61ba      	str	r2, [r7, #24]
 800c0fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c100:	6979      	ldr	r1, [r7, #20]
 800c102:	69ba      	ldr	r2, [r7, #24]
 800c104:	e841 2300 	strex	r3, r2, [r1]
 800c108:	613b      	str	r3, [r7, #16]
   return(result);
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d1e5      	bne.n	800c0dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2220      	movs	r2, #32
 800c114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c11e:	bf00      	nop
 800c120:	3754      	adds	r7, #84	; 0x54
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr

0800c12a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b084      	sub	sp, #16
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c136:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2200      	movs	r2, #0
 800c13c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2200      	movs	r2, #0
 800c142:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c144:	68f8      	ldr	r0, [r7, #12]
 800c146:	f7ff fd5b 	bl	800bc00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c14a:	bf00      	nop
 800c14c:	3710      	adds	r7, #16
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c152:	b480      	push	{r7}
 800c154:	b085      	sub	sp, #20
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c160:	b2db      	uxtb	r3, r3
 800c162:	2b21      	cmp	r3, #33	; 0x21
 800c164:	d13e      	bne.n	800c1e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c16e:	d114      	bne.n	800c19a <UART_Transmit_IT+0x48>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	691b      	ldr	r3, [r3, #16]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d110      	bne.n	800c19a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6a1b      	ldr	r3, [r3, #32]
 800c17c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	881b      	ldrh	r3, [r3, #0]
 800c182:	461a      	mov	r2, r3
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c18c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a1b      	ldr	r3, [r3, #32]
 800c192:	1c9a      	adds	r2, r3, #2
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	621a      	str	r2, [r3, #32]
 800c198:	e008      	b.n	800c1ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6a1b      	ldr	r3, [r3, #32]
 800c19e:	1c59      	adds	r1, r3, #1
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	6211      	str	r1, [r2, #32]
 800c1a4:	781a      	ldrb	r2, [r3, #0]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10f      	bne.n	800c1e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	68da      	ldr	r2, [r3, #12]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c1ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	68da      	ldr	r2, [r3, #12]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	e000      	b.n	800c1e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c1e4:	2302      	movs	r3, #2
  }
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3714      	adds	r7, #20
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b082      	sub	sp, #8
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	68da      	ldr	r2, [r3, #12]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c208:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2220      	movs	r2, #32
 800c20e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f7ff fcd6 	bl	800bbc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c218:	2300      	movs	r3, #0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3708      	adds	r7, #8
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b08c      	sub	sp, #48	; 0x30
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c230:	b2db      	uxtb	r3, r3
 800c232:	2b22      	cmp	r3, #34	; 0x22
 800c234:	f040 80ab 	bne.w	800c38e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c240:	d117      	bne.n	800c272 <UART_Receive_IT+0x50>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	691b      	ldr	r3, [r3, #16]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d113      	bne.n	800c272 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c24a:	2300      	movs	r3, #0
 800c24c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c252:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c260:	b29a      	uxth	r2, r3
 800c262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c264:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c26a:	1c9a      	adds	r2, r3, #2
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	629a      	str	r2, [r3, #40]	; 0x28
 800c270:	e026      	b.n	800c2c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c276:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c278:	2300      	movs	r3, #0
 800c27a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c284:	d007      	beq.n	800c296 <UART_Receive_IT+0x74>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10a      	bne.n	800c2a4 <UART_Receive_IT+0x82>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d106      	bne.n	800c2a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	b2da      	uxtb	r2, r3
 800c29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a0:	701a      	strb	r2, [r3, #0]
 800c2a2:	e008      	b.n	800c2b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2b0:	b2da      	uxtb	r2, r3
 800c2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ba:	1c5a      	adds	r2, r3, #1
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d15a      	bne.n	800c38a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	68da      	ldr	r2, [r3, #12]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f022 0220 	bic.w	r2, r2, #32
 800c2e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	68da      	ldr	r2, [r3, #12]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c2f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	695a      	ldr	r2, [r3, #20]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f022 0201 	bic.w	r2, r2, #1
 800c302:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2220      	movs	r2, #32
 800c308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c310:	2b01      	cmp	r3, #1
 800c312:	d135      	bne.n	800c380 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	330c      	adds	r3, #12
 800c320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	e853 3f00 	ldrex	r3, [r3]
 800c328:	613b      	str	r3, [r7, #16]
   return(result);
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	f023 0310 	bic.w	r3, r3, #16
 800c330:	627b      	str	r3, [r7, #36]	; 0x24
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	330c      	adds	r3, #12
 800c338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c33a:	623a      	str	r2, [r7, #32]
 800c33c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c33e:	69f9      	ldr	r1, [r7, #28]
 800c340:	6a3a      	ldr	r2, [r7, #32]
 800c342:	e841 2300 	strex	r3, r2, [r1]
 800c346:	61bb      	str	r3, [r7, #24]
   return(result);
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1e5      	bne.n	800c31a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f003 0310 	and.w	r3, r3, #16
 800c358:	2b10      	cmp	r3, #16
 800c35a:	d10a      	bne.n	800c372 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c35c:	2300      	movs	r3, #0
 800c35e:	60fb      	str	r3, [r7, #12]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	60fb      	str	r3, [r7, #12]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	60fb      	str	r3, [r7, #12]
 800c370:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c376:	4619      	mov	r1, r3
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f7f7 fe25 	bl	8003fc8 <HAL_UARTEx_RxEventCallback>
 800c37e:	e002      	b.n	800c386 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f7ff fc29 	bl	800bbd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c386:	2300      	movs	r3, #0
 800c388:	e002      	b.n	800c390 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c38a:	2300      	movs	r3, #0
 800c38c:	e000      	b.n	800c390 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c38e:	2302      	movs	r3, #2
  }
}
 800c390:	4618      	mov	r0, r3
 800c392:	3730      	adds	r7, #48	; 0x30
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39c:	b09f      	sub	sp, #124	; 0x7c
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c3a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c3ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3ae:	68d9      	ldr	r1, [r3, #12]
 800c3b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	ea40 0301 	orr.w	r3, r0, r1
 800c3b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c3ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3bc:	689a      	ldr	r2, [r3, #8]
 800c3be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3c0:	691b      	ldr	r3, [r3, #16]
 800c3c2:	431a      	orrs	r2, r3
 800c3c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3c6:	695b      	ldr	r3, [r3, #20]
 800c3c8:	431a      	orrs	r2, r3
 800c3ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3cc:	69db      	ldr	r3, [r3, #28]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800c3d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c3dc:	f021 010c 	bic.w	r1, r1, #12
 800c3e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c3e6:	430b      	orrs	r3, r1
 800c3e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c3ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	695b      	ldr	r3, [r3, #20]
 800c3f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c3f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3f6:	6999      	ldr	r1, [r3, #24]
 800c3f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	ea40 0301 	orr.w	r3, r0, r1
 800c400:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	4bc5      	ldr	r3, [pc, #788]	; (800c71c <UART_SetConfig+0x384>)
 800c408:	429a      	cmp	r2, r3
 800c40a:	d004      	beq.n	800c416 <UART_SetConfig+0x7e>
 800c40c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	4bc3      	ldr	r3, [pc, #780]	; (800c720 <UART_SetConfig+0x388>)
 800c412:	429a      	cmp	r2, r3
 800c414:	d103      	bne.n	800c41e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c416:	f7fd fdfb 	bl	800a010 <HAL_RCC_GetPCLK2Freq>
 800c41a:	6778      	str	r0, [r7, #116]	; 0x74
 800c41c:	e002      	b.n	800c424 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c41e:	f7fd fde3 	bl	8009fe8 <HAL_RCC_GetPCLK1Freq>
 800c422:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c426:	69db      	ldr	r3, [r3, #28]
 800c428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c42c:	f040 80b6 	bne.w	800c59c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c432:	461c      	mov	r4, r3
 800c434:	f04f 0500 	mov.w	r5, #0
 800c438:	4622      	mov	r2, r4
 800c43a:	462b      	mov	r3, r5
 800c43c:	1891      	adds	r1, r2, r2
 800c43e:	6439      	str	r1, [r7, #64]	; 0x40
 800c440:	415b      	adcs	r3, r3
 800c442:	647b      	str	r3, [r7, #68]	; 0x44
 800c444:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c448:	1912      	adds	r2, r2, r4
 800c44a:	eb45 0303 	adc.w	r3, r5, r3
 800c44e:	f04f 0000 	mov.w	r0, #0
 800c452:	f04f 0100 	mov.w	r1, #0
 800c456:	00d9      	lsls	r1, r3, #3
 800c458:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c45c:	00d0      	lsls	r0, r2, #3
 800c45e:	4602      	mov	r2, r0
 800c460:	460b      	mov	r3, r1
 800c462:	1911      	adds	r1, r2, r4
 800c464:	6639      	str	r1, [r7, #96]	; 0x60
 800c466:	416b      	adcs	r3, r5
 800c468:	667b      	str	r3, [r7, #100]	; 0x64
 800c46a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	461a      	mov	r2, r3
 800c470:	f04f 0300 	mov.w	r3, #0
 800c474:	1891      	adds	r1, r2, r2
 800c476:	63b9      	str	r1, [r7, #56]	; 0x38
 800c478:	415b      	adcs	r3, r3
 800c47a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c47c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c480:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c484:	f7f4 fbe8 	bl	8000c58 <__aeabi_uldivmod>
 800c488:	4602      	mov	r2, r0
 800c48a:	460b      	mov	r3, r1
 800c48c:	4ba5      	ldr	r3, [pc, #660]	; (800c724 <UART_SetConfig+0x38c>)
 800c48e:	fba3 2302 	umull	r2, r3, r3, r2
 800c492:	095b      	lsrs	r3, r3, #5
 800c494:	011e      	lsls	r6, r3, #4
 800c496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c498:	461c      	mov	r4, r3
 800c49a:	f04f 0500 	mov.w	r5, #0
 800c49e:	4622      	mov	r2, r4
 800c4a0:	462b      	mov	r3, r5
 800c4a2:	1891      	adds	r1, r2, r2
 800c4a4:	6339      	str	r1, [r7, #48]	; 0x30
 800c4a6:	415b      	adcs	r3, r3
 800c4a8:	637b      	str	r3, [r7, #52]	; 0x34
 800c4aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c4ae:	1912      	adds	r2, r2, r4
 800c4b0:	eb45 0303 	adc.w	r3, r5, r3
 800c4b4:	f04f 0000 	mov.w	r0, #0
 800c4b8:	f04f 0100 	mov.w	r1, #0
 800c4bc:	00d9      	lsls	r1, r3, #3
 800c4be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c4c2:	00d0      	lsls	r0, r2, #3
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	460b      	mov	r3, r1
 800c4c8:	1911      	adds	r1, r2, r4
 800c4ca:	65b9      	str	r1, [r7, #88]	; 0x58
 800c4cc:	416b      	adcs	r3, r5
 800c4ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c4d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	f04f 0300 	mov.w	r3, #0
 800c4da:	1891      	adds	r1, r2, r2
 800c4dc:	62b9      	str	r1, [r7, #40]	; 0x28
 800c4de:	415b      	adcs	r3, r3
 800c4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c4e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c4ea:	f7f4 fbb5 	bl	8000c58 <__aeabi_uldivmod>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	4b8c      	ldr	r3, [pc, #560]	; (800c724 <UART_SetConfig+0x38c>)
 800c4f4:	fba3 1302 	umull	r1, r3, r3, r2
 800c4f8:	095b      	lsrs	r3, r3, #5
 800c4fa:	2164      	movs	r1, #100	; 0x64
 800c4fc:	fb01 f303 	mul.w	r3, r1, r3
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	00db      	lsls	r3, r3, #3
 800c504:	3332      	adds	r3, #50	; 0x32
 800c506:	4a87      	ldr	r2, [pc, #540]	; (800c724 <UART_SetConfig+0x38c>)
 800c508:	fba2 2303 	umull	r2, r3, r2, r3
 800c50c:	095b      	lsrs	r3, r3, #5
 800c50e:	005b      	lsls	r3, r3, #1
 800c510:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c514:	441e      	add	r6, r3
 800c516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c518:	4618      	mov	r0, r3
 800c51a:	f04f 0100 	mov.w	r1, #0
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	1894      	adds	r4, r2, r2
 800c524:	623c      	str	r4, [r7, #32]
 800c526:	415b      	adcs	r3, r3
 800c528:	627b      	str	r3, [r7, #36]	; 0x24
 800c52a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c52e:	1812      	adds	r2, r2, r0
 800c530:	eb41 0303 	adc.w	r3, r1, r3
 800c534:	f04f 0400 	mov.w	r4, #0
 800c538:	f04f 0500 	mov.w	r5, #0
 800c53c:	00dd      	lsls	r5, r3, #3
 800c53e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c542:	00d4      	lsls	r4, r2, #3
 800c544:	4622      	mov	r2, r4
 800c546:	462b      	mov	r3, r5
 800c548:	1814      	adds	r4, r2, r0
 800c54a:	653c      	str	r4, [r7, #80]	; 0x50
 800c54c:	414b      	adcs	r3, r1
 800c54e:	657b      	str	r3, [r7, #84]	; 0x54
 800c550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	461a      	mov	r2, r3
 800c556:	f04f 0300 	mov.w	r3, #0
 800c55a:	1891      	adds	r1, r2, r2
 800c55c:	61b9      	str	r1, [r7, #24]
 800c55e:	415b      	adcs	r3, r3
 800c560:	61fb      	str	r3, [r7, #28]
 800c562:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c566:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c56a:	f7f4 fb75 	bl	8000c58 <__aeabi_uldivmod>
 800c56e:	4602      	mov	r2, r0
 800c570:	460b      	mov	r3, r1
 800c572:	4b6c      	ldr	r3, [pc, #432]	; (800c724 <UART_SetConfig+0x38c>)
 800c574:	fba3 1302 	umull	r1, r3, r3, r2
 800c578:	095b      	lsrs	r3, r3, #5
 800c57a:	2164      	movs	r1, #100	; 0x64
 800c57c:	fb01 f303 	mul.w	r3, r1, r3
 800c580:	1ad3      	subs	r3, r2, r3
 800c582:	00db      	lsls	r3, r3, #3
 800c584:	3332      	adds	r3, #50	; 0x32
 800c586:	4a67      	ldr	r2, [pc, #412]	; (800c724 <UART_SetConfig+0x38c>)
 800c588:	fba2 2303 	umull	r2, r3, r2, r3
 800c58c:	095b      	lsrs	r3, r3, #5
 800c58e:	f003 0207 	and.w	r2, r3, #7
 800c592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4432      	add	r2, r6
 800c598:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c59a:	e0b9      	b.n	800c710 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c59c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c59e:	461c      	mov	r4, r3
 800c5a0:	f04f 0500 	mov.w	r5, #0
 800c5a4:	4622      	mov	r2, r4
 800c5a6:	462b      	mov	r3, r5
 800c5a8:	1891      	adds	r1, r2, r2
 800c5aa:	6139      	str	r1, [r7, #16]
 800c5ac:	415b      	adcs	r3, r3
 800c5ae:	617b      	str	r3, [r7, #20]
 800c5b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c5b4:	1912      	adds	r2, r2, r4
 800c5b6:	eb45 0303 	adc.w	r3, r5, r3
 800c5ba:	f04f 0000 	mov.w	r0, #0
 800c5be:	f04f 0100 	mov.w	r1, #0
 800c5c2:	00d9      	lsls	r1, r3, #3
 800c5c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c5c8:	00d0      	lsls	r0, r2, #3
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	eb12 0804 	adds.w	r8, r2, r4
 800c5d2:	eb43 0905 	adc.w	r9, r3, r5
 800c5d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f04f 0100 	mov.w	r1, #0
 800c5e0:	f04f 0200 	mov.w	r2, #0
 800c5e4:	f04f 0300 	mov.w	r3, #0
 800c5e8:	008b      	lsls	r3, r1, #2
 800c5ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c5ee:	0082      	lsls	r2, r0, #2
 800c5f0:	4640      	mov	r0, r8
 800c5f2:	4649      	mov	r1, r9
 800c5f4:	f7f4 fb30 	bl	8000c58 <__aeabi_uldivmod>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	4b49      	ldr	r3, [pc, #292]	; (800c724 <UART_SetConfig+0x38c>)
 800c5fe:	fba3 2302 	umull	r2, r3, r3, r2
 800c602:	095b      	lsrs	r3, r3, #5
 800c604:	011e      	lsls	r6, r3, #4
 800c606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c608:	4618      	mov	r0, r3
 800c60a:	f04f 0100 	mov.w	r1, #0
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	1894      	adds	r4, r2, r2
 800c614:	60bc      	str	r4, [r7, #8]
 800c616:	415b      	adcs	r3, r3
 800c618:	60fb      	str	r3, [r7, #12]
 800c61a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c61e:	1812      	adds	r2, r2, r0
 800c620:	eb41 0303 	adc.w	r3, r1, r3
 800c624:	f04f 0400 	mov.w	r4, #0
 800c628:	f04f 0500 	mov.w	r5, #0
 800c62c:	00dd      	lsls	r5, r3, #3
 800c62e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c632:	00d4      	lsls	r4, r2, #3
 800c634:	4622      	mov	r2, r4
 800c636:	462b      	mov	r3, r5
 800c638:	1814      	adds	r4, r2, r0
 800c63a:	64bc      	str	r4, [r7, #72]	; 0x48
 800c63c:	414b      	adcs	r3, r1
 800c63e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	4618      	mov	r0, r3
 800c646:	f04f 0100 	mov.w	r1, #0
 800c64a:	f04f 0200 	mov.w	r2, #0
 800c64e:	f04f 0300 	mov.w	r3, #0
 800c652:	008b      	lsls	r3, r1, #2
 800c654:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c658:	0082      	lsls	r2, r0, #2
 800c65a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c65e:	f7f4 fafb 	bl	8000c58 <__aeabi_uldivmod>
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	4b2f      	ldr	r3, [pc, #188]	; (800c724 <UART_SetConfig+0x38c>)
 800c668:	fba3 1302 	umull	r1, r3, r3, r2
 800c66c:	095b      	lsrs	r3, r3, #5
 800c66e:	2164      	movs	r1, #100	; 0x64
 800c670:	fb01 f303 	mul.w	r3, r1, r3
 800c674:	1ad3      	subs	r3, r2, r3
 800c676:	011b      	lsls	r3, r3, #4
 800c678:	3332      	adds	r3, #50	; 0x32
 800c67a:	4a2a      	ldr	r2, [pc, #168]	; (800c724 <UART_SetConfig+0x38c>)
 800c67c:	fba2 2303 	umull	r2, r3, r2, r3
 800c680:	095b      	lsrs	r3, r3, #5
 800c682:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c686:	441e      	add	r6, r3
 800c688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c68a:	4618      	mov	r0, r3
 800c68c:	f04f 0100 	mov.w	r1, #0
 800c690:	4602      	mov	r2, r0
 800c692:	460b      	mov	r3, r1
 800c694:	1894      	adds	r4, r2, r2
 800c696:	603c      	str	r4, [r7, #0]
 800c698:	415b      	adcs	r3, r3
 800c69a:	607b      	str	r3, [r7, #4]
 800c69c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6a0:	1812      	adds	r2, r2, r0
 800c6a2:	eb41 0303 	adc.w	r3, r1, r3
 800c6a6:	f04f 0400 	mov.w	r4, #0
 800c6aa:	f04f 0500 	mov.w	r5, #0
 800c6ae:	00dd      	lsls	r5, r3, #3
 800c6b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c6b4:	00d4      	lsls	r4, r2, #3
 800c6b6:	4622      	mov	r2, r4
 800c6b8:	462b      	mov	r3, r5
 800c6ba:	eb12 0a00 	adds.w	sl, r2, r0
 800c6be:	eb43 0b01 	adc.w	fp, r3, r1
 800c6c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f04f 0100 	mov.w	r1, #0
 800c6cc:	f04f 0200 	mov.w	r2, #0
 800c6d0:	f04f 0300 	mov.w	r3, #0
 800c6d4:	008b      	lsls	r3, r1, #2
 800c6d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c6da:	0082      	lsls	r2, r0, #2
 800c6dc:	4650      	mov	r0, sl
 800c6de:	4659      	mov	r1, fp
 800c6e0:	f7f4 faba 	bl	8000c58 <__aeabi_uldivmod>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	4b0e      	ldr	r3, [pc, #56]	; (800c724 <UART_SetConfig+0x38c>)
 800c6ea:	fba3 1302 	umull	r1, r3, r3, r2
 800c6ee:	095b      	lsrs	r3, r3, #5
 800c6f0:	2164      	movs	r1, #100	; 0x64
 800c6f2:	fb01 f303 	mul.w	r3, r1, r3
 800c6f6:	1ad3      	subs	r3, r2, r3
 800c6f8:	011b      	lsls	r3, r3, #4
 800c6fa:	3332      	adds	r3, #50	; 0x32
 800c6fc:	4a09      	ldr	r2, [pc, #36]	; (800c724 <UART_SetConfig+0x38c>)
 800c6fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c702:	095b      	lsrs	r3, r3, #5
 800c704:	f003 020f 	and.w	r2, r3, #15
 800c708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4432      	add	r2, r6
 800c70e:	609a      	str	r2, [r3, #8]
}
 800c710:	bf00      	nop
 800c712:	377c      	adds	r7, #124	; 0x7c
 800c714:	46bd      	mov	sp, r7
 800c716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c71a:	bf00      	nop
 800c71c:	40011000 	.word	0x40011000
 800c720:	40011400 	.word	0x40011400
 800c724:	51eb851f 	.word	0x51eb851f

0800c728 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	4603      	mov	r3, r0
 800c730:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c732:	2300      	movs	r3, #0
 800c734:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c73a:	2b84      	cmp	r3, #132	; 0x84
 800c73c:	d005      	beq.n	800c74a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c73e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	4413      	add	r3, r2
 800c746:	3303      	adds	r3, #3
 800c748:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c74a:	68fb      	ldr	r3, [r7, #12]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c75e:	f3ef 8305 	mrs	r3, IPSR
 800c762:	607b      	str	r3, [r7, #4]
  return(result);
 800c764:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c766:	2b00      	cmp	r3, #0
 800c768:	bf14      	ite	ne
 800c76a:	2301      	movne	r3, #1
 800c76c:	2300      	moveq	r3, #0
 800c76e:	b2db      	uxtb	r3, r3
}
 800c770:	4618      	mov	r0, r3
 800c772:	370c      	adds	r7, #12
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c780:	f001 fae8 	bl	800dd54 <vTaskStartScheduler>
  
  return osOK;
 800c784:	2300      	movs	r3, #0
}
 800c786:	4618      	mov	r0, r3
 800c788:	bd80      	pop	{r7, pc}

0800c78a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c78a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c78c:	b089      	sub	sp, #36	; 0x24
 800c78e:	af04      	add	r7, sp, #16
 800c790:	6078      	str	r0, [r7, #4]
 800c792:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	695b      	ldr	r3, [r3, #20]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d020      	beq.n	800c7de <osThreadCreate+0x54>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	699b      	ldr	r3, [r3, #24]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d01c      	beq.n	800c7de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	685c      	ldr	r4, [r3, #4]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681d      	ldr	r5, [r3, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	691e      	ldr	r6, [r3, #16]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7ff ffb6 	bl	800c728 <makeFreeRtosPriority>
 800c7bc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	695b      	ldr	r3, [r3, #20]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7c6:	9202      	str	r2, [sp, #8]
 800c7c8:	9301      	str	r3, [sp, #4]
 800c7ca:	9100      	str	r1, [sp, #0]
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	4632      	mov	r2, r6
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f001 f8f6 	bl	800d9c4 <xTaskCreateStatic>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	60fb      	str	r3, [r7, #12]
 800c7dc:	e01c      	b.n	800c818 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	685c      	ldr	r4, [r3, #4]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7ea:	b29e      	uxth	r6, r3
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7ff ff98 	bl	800c728 <makeFreeRtosPriority>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	f107 030c 	add.w	r3, r7, #12
 800c7fe:	9301      	str	r3, [sp, #4]
 800c800:	9200      	str	r2, [sp, #0]
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	4632      	mov	r2, r6
 800c806:	4629      	mov	r1, r5
 800c808:	4620      	mov	r0, r4
 800c80a:	f001 f938 	bl	800da7e <xTaskCreate>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b01      	cmp	r3, #1
 800c812:	d001      	beq.n	800c818 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c814:	2300      	movs	r3, #0
 800c816:	e000      	b.n	800c81a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c818:	68fb      	ldr	r3, [r7, #12]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3714      	adds	r7, #20
 800c81e:	46bd      	mov	sp, r7
 800c820:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c822 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b084      	sub	sp, #16
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d001      	beq.n	800c838 <osDelay+0x16>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	e000      	b.n	800c83a <osDelay+0x18>
 800c838:	2301      	movs	r3, #1
 800c83a:	4618      	mov	r0, r3
 800c83c:	f001 fa56 	bl	800dcec <vTaskDelay>
  
  return osOK;
 800c840:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b086      	sub	sp, #24
 800c84e:	af02      	add	r7, sp, #8
 800c850:	6078      	str	r0, [r7, #4]
 800c852:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00f      	beq.n	800c87c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d10a      	bne.n	800c878 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	2203      	movs	r2, #3
 800c868:	9200      	str	r2, [sp, #0]
 800c86a:	2200      	movs	r2, #0
 800c86c:	2100      	movs	r1, #0
 800c86e:	2001      	movs	r0, #1
 800c870:	f000 f9be 	bl	800cbf0 <xQueueGenericCreateStatic>
 800c874:	4603      	mov	r3, r0
 800c876:	e016      	b.n	800c8a6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c878:	2300      	movs	r3, #0
 800c87a:	e014      	b.n	800c8a6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d110      	bne.n	800c8a4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c882:	2203      	movs	r2, #3
 800c884:	2100      	movs	r1, #0
 800c886:	2001      	movs	r0, #1
 800c888:	f000 fa2a 	bl	800cce0 <xQueueGenericCreate>
 800c88c:	60f8      	str	r0, [r7, #12]
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d005      	beq.n	800c8a0 <osSemaphoreCreate+0x56>
 800c894:	2300      	movs	r3, #0
 800c896:	2200      	movs	r2, #0
 800c898:	2100      	movs	r1, #0
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f000 fa7a 	bl	800cd94 <xQueueGenericSend>
      return sema;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	e000      	b.n	800c8a6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c8a4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3710      	adds	r7, #16
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
	...

0800c8b0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d101      	bne.n	800c8c8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c8c4:	2380      	movs	r3, #128	; 0x80
 800c8c6:	e03a      	b.n	800c93e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d2:	d103      	bne.n	800c8dc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c8d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8d8:	60fb      	str	r3, [r7, #12]
 800c8da:	e009      	b.n	800c8f0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d006      	beq.n	800c8f0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d101      	bne.n	800c8f0 <osSemaphoreWait+0x40>
      ticks = 1;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c8f0:	f7ff ff32 	bl	800c758 <inHandlerMode>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d017      	beq.n	800c92a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c8fa:	f107 0308 	add.w	r3, r7, #8
 800c8fe:	461a      	mov	r2, r3
 800c900:	2100      	movs	r1, #0
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 fe58 	bl	800d5b8 <xQueueReceiveFromISR>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d001      	beq.n	800c912 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c90e:	23ff      	movs	r3, #255	; 0xff
 800c910:	e015      	b.n	800c93e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d011      	beq.n	800c93c <osSemaphoreWait+0x8c>
 800c918:	4b0b      	ldr	r3, [pc, #44]	; (800c948 <osSemaphoreWait+0x98>)
 800c91a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c91e:	601a      	str	r2, [r3, #0]
 800c920:	f3bf 8f4f 	dsb	sy
 800c924:	f3bf 8f6f 	isb	sy
 800c928:	e008      	b.n	800c93c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c92a:	68f9      	ldr	r1, [r7, #12]
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 fd37 	bl	800d3a0 <xQueueSemaphoreTake>
 800c932:	4603      	mov	r3, r0
 800c934:	2b01      	cmp	r3, #1
 800c936:	d001      	beq.n	800c93c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c938:	23ff      	movs	r3, #255	; 0xff
 800c93a:	e000      	b.n	800c93e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3710      	adds	r7, #16
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	e000ed04 	.word	0xe000ed04

0800c94c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c954:	2300      	movs	r3, #0
 800c956:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c958:	2300      	movs	r3, #0
 800c95a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c95c:	f7ff fefc 	bl	800c758 <inHandlerMode>
 800c960:	4603      	mov	r3, r0
 800c962:	2b00      	cmp	r3, #0
 800c964:	d016      	beq.n	800c994 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c966:	f107 0308 	add.w	r3, r7, #8
 800c96a:	4619      	mov	r1, r3
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 fbaa 	bl	800d0c6 <xQueueGiveFromISR>
 800c972:	4603      	mov	r3, r0
 800c974:	2b01      	cmp	r3, #1
 800c976:	d001      	beq.n	800c97c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c978:	23ff      	movs	r3, #255	; 0xff
 800c97a:	e017      	b.n	800c9ac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d013      	beq.n	800c9aa <osSemaphoreRelease+0x5e>
 800c982:	4b0c      	ldr	r3, [pc, #48]	; (800c9b4 <osSemaphoreRelease+0x68>)
 800c984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c988:	601a      	str	r2, [r3, #0]
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	e00a      	b.n	800c9aa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c994:	2300      	movs	r3, #0
 800c996:	2200      	movs	r2, #0
 800c998:	2100      	movs	r1, #0
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 f9fa 	bl	800cd94 <xQueueGenericSend>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d001      	beq.n	800c9aa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c9a6:	23ff      	movs	r3, #255	; 0xff
 800c9a8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3710      	adds	r7, #16
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	e000ed04 	.word	0xe000ed04

0800c9b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b083      	sub	sp, #12
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f103 0208 	add.w	r2, r3, #8
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c9d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f103 0208 	add.w	r2, r3, #8
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f103 0208 	add.w	r2, r3, #8
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c9ec:	bf00      	nop
 800c9ee:	370c      	adds	r7, #12
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ca06:	bf00      	nop
 800ca08:	370c      	adds	r7, #12
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr

0800ca12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca12:	b480      	push	{r7}
 800ca14:	b085      	sub	sp, #20
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
 800ca1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	68fa      	ldr	r2, [r7, #12]
 800ca26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	689a      	ldr	r2, [r3, #8]
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	683a      	ldr	r2, [r7, #0]
 800ca36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	683a      	ldr	r2, [r7, #0]
 800ca3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	1c5a      	adds	r2, r3, #1
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	601a      	str	r2, [r3, #0]
}
 800ca4e:	bf00      	nop
 800ca50:	3714      	adds	r7, #20
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr

0800ca5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca5a:	b480      	push	{r7}
 800ca5c:	b085      	sub	sp, #20
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
 800ca62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca70:	d103      	bne.n	800ca7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	691b      	ldr	r3, [r3, #16]
 800ca76:	60fb      	str	r3, [r7, #12]
 800ca78:	e00c      	b.n	800ca94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	3308      	adds	r3, #8
 800ca7e:	60fb      	str	r3, [r7, #12]
 800ca80:	e002      	b.n	800ca88 <vListInsert+0x2e>
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	60fb      	str	r3, [r7, #12]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	68ba      	ldr	r2, [r7, #8]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d2f6      	bcs.n	800ca82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	685a      	ldr	r2, [r3, #4]
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	683a      	ldr	r2, [r7, #0]
 800caa2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	68fa      	ldr	r2, [r7, #12]
 800caa8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	683a      	ldr	r2, [r7, #0]
 800caae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	1c5a      	adds	r2, r3, #1
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	601a      	str	r2, [r3, #0]
}
 800cac0:	bf00      	nop
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cacc:	b480      	push	{r7}
 800cace:	b085      	sub	sp, #20
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	691b      	ldr	r3, [r3, #16]
 800cad8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	6892      	ldr	r2, [r2, #8]
 800cae2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	6852      	ldr	r2, [r2, #4]
 800caec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d103      	bne.n	800cb00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	689a      	ldr	r2, [r3, #8]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	1e5a      	subs	r2, r3, #1
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3714      	adds	r7, #20
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d10a      	bne.n	800cb4a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb38:	f383 8811 	msr	BASEPRI, r3
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	f3bf 8f4f 	dsb	sy
 800cb44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cb46:	bf00      	nop
 800cb48:	e7fe      	b.n	800cb48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cb4a:	f002 fbc3 	bl	800f2d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb56:	68f9      	ldr	r1, [r7, #12]
 800cb58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb5a:	fb01 f303 	mul.w	r3, r1, r3
 800cb5e:	441a      	add	r2, r3
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2200      	movs	r2, #0
 800cb68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	68f9      	ldr	r1, [r7, #12]
 800cb7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb80:	fb01 f303 	mul.w	r3, r1, r3
 800cb84:	441a      	add	r2, r3
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	22ff      	movs	r2, #255	; 0xff
 800cb8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	22ff      	movs	r2, #255	; 0xff
 800cb96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d114      	bne.n	800cbca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	691b      	ldr	r3, [r3, #16]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d01a      	beq.n	800cbde <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	3310      	adds	r3, #16
 800cbac:	4618      	mov	r0, r3
 800cbae:	f001 fb55 	bl	800e25c <xTaskRemoveFromEventList>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d012      	beq.n	800cbde <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cbb8:	4b0c      	ldr	r3, [pc, #48]	; (800cbec <xQueueGenericReset+0xcc>)
 800cbba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbbe:	601a      	str	r2, [r3, #0]
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	e009      	b.n	800cbde <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	3310      	adds	r3, #16
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7ff fef2 	bl	800c9b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	3324      	adds	r3, #36	; 0x24
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7ff feed 	bl	800c9b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cbde:	f002 fba9 	bl	800f334 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cbe2:	2301      	movs	r3, #1
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	e000ed04 	.word	0xe000ed04

0800cbf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b08e      	sub	sp, #56	; 0x38
 800cbf4:	af02      	add	r7, sp, #8
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	607a      	str	r2, [r7, #4]
 800cbfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d10a      	bne.n	800cc1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc08:	f383 8811 	msr	BASEPRI, r3
 800cc0c:	f3bf 8f6f 	isb	sy
 800cc10:	f3bf 8f4f 	dsb	sy
 800cc14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc16:	bf00      	nop
 800cc18:	e7fe      	b.n	800cc18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d10a      	bne.n	800cc36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc32:	bf00      	nop
 800cc34:	e7fe      	b.n	800cc34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d002      	beq.n	800cc42 <xQueueGenericCreateStatic+0x52>
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d001      	beq.n	800cc46 <xQueueGenericCreateStatic+0x56>
 800cc42:	2301      	movs	r3, #1
 800cc44:	e000      	b.n	800cc48 <xQueueGenericCreateStatic+0x58>
 800cc46:	2300      	movs	r3, #0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10a      	bne.n	800cc62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc50:	f383 8811 	msr	BASEPRI, r3
 800cc54:	f3bf 8f6f 	isb	sy
 800cc58:	f3bf 8f4f 	dsb	sy
 800cc5c:	623b      	str	r3, [r7, #32]
}
 800cc5e:	bf00      	nop
 800cc60:	e7fe      	b.n	800cc60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d102      	bne.n	800cc6e <xQueueGenericCreateStatic+0x7e>
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d101      	bne.n	800cc72 <xQueueGenericCreateStatic+0x82>
 800cc6e:	2301      	movs	r3, #1
 800cc70:	e000      	b.n	800cc74 <xQueueGenericCreateStatic+0x84>
 800cc72:	2300      	movs	r3, #0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d10a      	bne.n	800cc8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7c:	f383 8811 	msr	BASEPRI, r3
 800cc80:	f3bf 8f6f 	isb	sy
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	61fb      	str	r3, [r7, #28]
}
 800cc8a:	bf00      	nop
 800cc8c:	e7fe      	b.n	800cc8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cc8e:	2348      	movs	r3, #72	; 0x48
 800cc90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	2b48      	cmp	r3, #72	; 0x48
 800cc96:	d00a      	beq.n	800ccae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9c:	f383 8811 	msr	BASEPRI, r3
 800cca0:	f3bf 8f6f 	isb	sy
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	61bb      	str	r3, [r7, #24]
}
 800ccaa:	bf00      	nop
 800ccac:	e7fe      	b.n	800ccac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ccae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ccb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00d      	beq.n	800ccd6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ccba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ccc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ccc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc8:	9300      	str	r3, [sp, #0]
 800ccca:	4613      	mov	r3, r2
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	68b9      	ldr	r1, [r7, #8]
 800ccd0:	68f8      	ldr	r0, [r7, #12]
 800ccd2:	f000 f83f 	bl	800cd54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ccd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3730      	adds	r7, #48	; 0x30
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b08a      	sub	sp, #40	; 0x28
 800cce4:	af02      	add	r7, sp, #8
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	4613      	mov	r3, r2
 800ccec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d10a      	bne.n	800cd0a <xQueueGenericCreate+0x2a>
	__asm volatile
 800ccf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf8:	f383 8811 	msr	BASEPRI, r3
 800ccfc:	f3bf 8f6f 	isb	sy
 800cd00:	f3bf 8f4f 	dsb	sy
 800cd04:	613b      	str	r3, [r7, #16]
}
 800cd06:	bf00      	nop
 800cd08:	e7fe      	b.n	800cd08 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	68ba      	ldr	r2, [r7, #8]
 800cd0e:	fb02 f303 	mul.w	r3, r2, r3
 800cd12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	3348      	adds	r3, #72	; 0x48
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f002 fbfd 	bl	800f518 <pvPortMalloc>
 800cd1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cd20:	69bb      	ldr	r3, [r7, #24]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d011      	beq.n	800cd4a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cd26:	69bb      	ldr	r3, [r7, #24]
 800cd28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	3348      	adds	r3, #72	; 0x48
 800cd2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	2200      	movs	r2, #0
 800cd34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd38:	79fa      	ldrb	r2, [r7, #7]
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	9300      	str	r3, [sp, #0]
 800cd3e:	4613      	mov	r3, r2
 800cd40:	697a      	ldr	r2, [r7, #20]
 800cd42:	68b9      	ldr	r1, [r7, #8]
 800cd44:	68f8      	ldr	r0, [r7, #12]
 800cd46:	f000 f805 	bl	800cd54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd4a:	69bb      	ldr	r3, [r7, #24]
	}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3720      	adds	r7, #32
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	607a      	str	r2, [r7, #4]
 800cd60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d103      	bne.n	800cd70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cd68:	69bb      	ldr	r3, [r7, #24]
 800cd6a:	69ba      	ldr	r2, [r7, #24]
 800cd6c:	601a      	str	r2, [r3, #0]
 800cd6e:	e002      	b.n	800cd76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	68fa      	ldr	r2, [r7, #12]
 800cd7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cd7c:	69bb      	ldr	r3, [r7, #24]
 800cd7e:	68ba      	ldr	r2, [r7, #8]
 800cd80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cd82:	2101      	movs	r1, #1
 800cd84:	69b8      	ldr	r0, [r7, #24]
 800cd86:	f7ff fecb 	bl	800cb20 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cd8a:	bf00      	nop
 800cd8c:	3710      	adds	r7, #16
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
	...

0800cd94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b08e      	sub	sp, #56	; 0x38
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	607a      	str	r2, [r7, #4]
 800cda0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cda2:	2300      	movs	r3, #0
 800cda4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d10a      	bne.n	800cdc6 <xQueueGenericSend+0x32>
	__asm volatile
 800cdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb4:	f383 8811 	msr	BASEPRI, r3
 800cdb8:	f3bf 8f6f 	isb	sy
 800cdbc:	f3bf 8f4f 	dsb	sy
 800cdc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cdc2:	bf00      	nop
 800cdc4:	e7fe      	b.n	800cdc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d103      	bne.n	800cdd4 <xQueueGenericSend+0x40>
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d101      	bne.n	800cdd8 <xQueueGenericSend+0x44>
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	e000      	b.n	800cdda <xQueueGenericSend+0x46>
 800cdd8:	2300      	movs	r3, #0
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d10a      	bne.n	800cdf4 <xQueueGenericSend+0x60>
	__asm volatile
 800cdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde2:	f383 8811 	msr	BASEPRI, r3
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cdf0:	bf00      	nop
 800cdf2:	e7fe      	b.n	800cdf2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d103      	bne.n	800ce02 <xQueueGenericSend+0x6e>
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d101      	bne.n	800ce06 <xQueueGenericSend+0x72>
 800ce02:	2301      	movs	r3, #1
 800ce04:	e000      	b.n	800ce08 <xQueueGenericSend+0x74>
 800ce06:	2300      	movs	r3, #0
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d10a      	bne.n	800ce22 <xQueueGenericSend+0x8e>
	__asm volatile
 800ce0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce10:	f383 8811 	msr	BASEPRI, r3
 800ce14:	f3bf 8f6f 	isb	sy
 800ce18:	f3bf 8f4f 	dsb	sy
 800ce1c:	623b      	str	r3, [r7, #32]
}
 800ce1e:	bf00      	nop
 800ce20:	e7fe      	b.n	800ce20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce22:	f001 fbd7 	bl	800e5d4 <xTaskGetSchedulerState>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d102      	bne.n	800ce32 <xQueueGenericSend+0x9e>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d101      	bne.n	800ce36 <xQueueGenericSend+0xa2>
 800ce32:	2301      	movs	r3, #1
 800ce34:	e000      	b.n	800ce38 <xQueueGenericSend+0xa4>
 800ce36:	2300      	movs	r3, #0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10a      	bne.n	800ce52 <xQueueGenericSend+0xbe>
	__asm volatile
 800ce3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce40:	f383 8811 	msr	BASEPRI, r3
 800ce44:	f3bf 8f6f 	isb	sy
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	61fb      	str	r3, [r7, #28]
}
 800ce4e:	bf00      	nop
 800ce50:	e7fe      	b.n	800ce50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce52:	f002 fa3f 	bl	800f2d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d302      	bcc.n	800ce68 <xQueueGenericSend+0xd4>
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	2b02      	cmp	r3, #2
 800ce66:	d129      	bne.n	800cebc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce68:	683a      	ldr	r2, [r7, #0]
 800ce6a:	68b9      	ldr	r1, [r7, #8]
 800ce6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce6e:	f000 fc3b 	bl	800d6e8 <prvCopyDataToQueue>
 800ce72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d010      	beq.n	800ce9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce7e:	3324      	adds	r3, #36	; 0x24
 800ce80:	4618      	mov	r0, r3
 800ce82:	f001 f9eb 	bl	800e25c <xTaskRemoveFromEventList>
 800ce86:	4603      	mov	r3, r0
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d013      	beq.n	800ceb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce8c:	4b3f      	ldr	r3, [pc, #252]	; (800cf8c <xQueueGenericSend+0x1f8>)
 800ce8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	f3bf 8f4f 	dsb	sy
 800ce98:	f3bf 8f6f 	isb	sy
 800ce9c:	e00a      	b.n	800ceb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d007      	beq.n	800ceb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cea4:	4b39      	ldr	r3, [pc, #228]	; (800cf8c <xQueueGenericSend+0x1f8>)
 800cea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceaa:	601a      	str	r2, [r3, #0]
 800ceac:	f3bf 8f4f 	dsb	sy
 800ceb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ceb4:	f002 fa3e 	bl	800f334 <vPortExitCritical>
				return pdPASS;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	e063      	b.n	800cf84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d103      	bne.n	800ceca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cec2:	f002 fa37 	bl	800f334 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cec6:	2300      	movs	r3, #0
 800cec8:	e05c      	b.n	800cf84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ceca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d106      	bne.n	800cede <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ced0:	f107 0314 	add.w	r3, r7, #20
 800ced4:	4618      	mov	r0, r3
 800ced6:	f001 fa23 	bl	800e320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ceda:	2301      	movs	r3, #1
 800cedc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cede:	f002 fa29 	bl	800f334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cee2:	f000 ff9d 	bl	800de20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cee6:	f002 f9f5 	bl	800f2d4 <vPortEnterCritical>
 800ceea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cef0:	b25b      	sxtb	r3, r3
 800cef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cef6:	d103      	bne.n	800cf00 <xQueueGenericSend+0x16c>
 800cef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefa:	2200      	movs	r2, #0
 800cefc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf06:	b25b      	sxtb	r3, r3
 800cf08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf0c:	d103      	bne.n	800cf16 <xQueueGenericSend+0x182>
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf10:	2200      	movs	r2, #0
 800cf12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf16:	f002 fa0d 	bl	800f334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf1a:	1d3a      	adds	r2, r7, #4
 800cf1c:	f107 0314 	add.w	r3, r7, #20
 800cf20:	4611      	mov	r1, r2
 800cf22:	4618      	mov	r0, r3
 800cf24:	f001 fa12 	bl	800e34c <xTaskCheckForTimeOut>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d124      	bne.n	800cf78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cf2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf30:	f000 fcd2 	bl	800d8d8 <prvIsQueueFull>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d018      	beq.n	800cf6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3c:	3310      	adds	r3, #16
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	4611      	mov	r1, r2
 800cf42:	4618      	mov	r0, r3
 800cf44:	f001 f93a 	bl	800e1bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cf48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf4a:	f000 fc5d 	bl	800d808 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cf4e:	f000 ff75 	bl	800de3c <xTaskResumeAll>
 800cf52:	4603      	mov	r3, r0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f47f af7c 	bne.w	800ce52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cf5a:	4b0c      	ldr	r3, [pc, #48]	; (800cf8c <xQueueGenericSend+0x1f8>)
 800cf5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf60:	601a      	str	r2, [r3, #0]
 800cf62:	f3bf 8f4f 	dsb	sy
 800cf66:	f3bf 8f6f 	isb	sy
 800cf6a:	e772      	b.n	800ce52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf6e:	f000 fc4b 	bl	800d808 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf72:	f000 ff63 	bl	800de3c <xTaskResumeAll>
 800cf76:	e76c      	b.n	800ce52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf7a:	f000 fc45 	bl	800d808 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf7e:	f000 ff5d 	bl	800de3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3738      	adds	r7, #56	; 0x38
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	e000ed04 	.word	0xe000ed04

0800cf90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b090      	sub	sp, #64	; 0x40
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
 800cf9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d10a      	bne.n	800cfbe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfac:	f383 8811 	msr	BASEPRI, r3
 800cfb0:	f3bf 8f6f 	isb	sy
 800cfb4:	f3bf 8f4f 	dsb	sy
 800cfb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cfba:	bf00      	nop
 800cfbc:	e7fe      	b.n	800cfbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d103      	bne.n	800cfcc <xQueueGenericSendFromISR+0x3c>
 800cfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d101      	bne.n	800cfd0 <xQueueGenericSendFromISR+0x40>
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e000      	b.n	800cfd2 <xQueueGenericSendFromISR+0x42>
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d10a      	bne.n	800cfec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cfd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfda:	f383 8811 	msr	BASEPRI, r3
 800cfde:	f3bf 8f6f 	isb	sy
 800cfe2:	f3bf 8f4f 	dsb	sy
 800cfe6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cfe8:	bf00      	nop
 800cfea:	e7fe      	b.n	800cfea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	2b02      	cmp	r3, #2
 800cff0:	d103      	bne.n	800cffa <xQueueGenericSendFromISR+0x6a>
 800cff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	d101      	bne.n	800cffe <xQueueGenericSendFromISR+0x6e>
 800cffa:	2301      	movs	r3, #1
 800cffc:	e000      	b.n	800d000 <xQueueGenericSendFromISR+0x70>
 800cffe:	2300      	movs	r3, #0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d10a      	bne.n	800d01a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d008:	f383 8811 	msr	BASEPRI, r3
 800d00c:	f3bf 8f6f 	isb	sy
 800d010:	f3bf 8f4f 	dsb	sy
 800d014:	623b      	str	r3, [r7, #32]
}
 800d016:	bf00      	nop
 800d018:	e7fe      	b.n	800d018 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d01a:	f002 fa3d 	bl	800f498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d01e:	f3ef 8211 	mrs	r2, BASEPRI
 800d022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d026:	f383 8811 	msr	BASEPRI, r3
 800d02a:	f3bf 8f6f 	isb	sy
 800d02e:	f3bf 8f4f 	dsb	sy
 800d032:	61fa      	str	r2, [r7, #28]
 800d034:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d036:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d038:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d042:	429a      	cmp	r2, r3
 800d044:	d302      	bcc.n	800d04c <xQueueGenericSendFromISR+0xbc>
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	2b02      	cmp	r3, #2
 800d04a:	d12f      	bne.n	800d0ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d05a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d05c:	683a      	ldr	r2, [r7, #0]
 800d05e:	68b9      	ldr	r1, [r7, #8]
 800d060:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d062:	f000 fb41 	bl	800d6e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d066:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d06e:	d112      	bne.n	800d096 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d074:	2b00      	cmp	r3, #0
 800d076:	d016      	beq.n	800d0a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07a:	3324      	adds	r3, #36	; 0x24
 800d07c:	4618      	mov	r0, r3
 800d07e:	f001 f8ed 	bl	800e25c <xTaskRemoveFromEventList>
 800d082:	4603      	mov	r3, r0
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00e      	beq.n	800d0a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d00b      	beq.n	800d0a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2201      	movs	r2, #1
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	e007      	b.n	800d0a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d096:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d09a:	3301      	adds	r3, #1
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	b25a      	sxtb	r2, r3
 800d0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d0aa:	e001      	b.n	800d0b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d0ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3740      	adds	r7, #64	; 0x40
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	b08e      	sub	sp, #56	; 0x38
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
 800d0ce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d10a      	bne.n	800d0f0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0de:	f383 8811 	msr	BASEPRI, r3
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	623b      	str	r3, [r7, #32]
}
 800d0ec:	bf00      	nop
 800d0ee:	e7fe      	b.n	800d0ee <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00a      	beq.n	800d10e <xQueueGiveFromISR+0x48>
	__asm volatile
 800d0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fc:	f383 8811 	msr	BASEPRI, r3
 800d100:	f3bf 8f6f 	isb	sy
 800d104:	f3bf 8f4f 	dsb	sy
 800d108:	61fb      	str	r3, [r7, #28]
}
 800d10a:	bf00      	nop
 800d10c:	e7fe      	b.n	800d10c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d103      	bne.n	800d11e <xQueueGiveFromISR+0x58>
 800d116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d118:	689b      	ldr	r3, [r3, #8]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d101      	bne.n	800d122 <xQueueGiveFromISR+0x5c>
 800d11e:	2301      	movs	r3, #1
 800d120:	e000      	b.n	800d124 <xQueueGiveFromISR+0x5e>
 800d122:	2300      	movs	r3, #0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d10a      	bne.n	800d13e <xQueueGiveFromISR+0x78>
	__asm volatile
 800d128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12c:	f383 8811 	msr	BASEPRI, r3
 800d130:	f3bf 8f6f 	isb	sy
 800d134:	f3bf 8f4f 	dsb	sy
 800d138:	61bb      	str	r3, [r7, #24]
}
 800d13a:	bf00      	nop
 800d13c:	e7fe      	b.n	800d13c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d13e:	f002 f9ab 	bl	800f498 <vPortValidateInterruptPriority>
	__asm volatile
 800d142:	f3ef 8211 	mrs	r2, BASEPRI
 800d146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14a:	f383 8811 	msr	BASEPRI, r3
 800d14e:	f3bf 8f6f 	isb	sy
 800d152:	f3bf 8f4f 	dsb	sy
 800d156:	617a      	str	r2, [r7, #20]
 800d158:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d15a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d15c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d162:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d22b      	bcs.n	800d1c6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17a:	1c5a      	adds	r2, r3, #1
 800d17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d180:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d188:	d112      	bne.n	800d1b0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d016      	beq.n	800d1c0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d194:	3324      	adds	r3, #36	; 0x24
 800d196:	4618      	mov	r0, r3
 800d198:	f001 f860 	bl	800e25c <xTaskRemoveFromEventList>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d00e      	beq.n	800d1c0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00b      	beq.n	800d1c0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	601a      	str	r2, [r3, #0]
 800d1ae:	e007      	b.n	800d1c0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d1b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	b25a      	sxtb	r2, r3
 800d1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	637b      	str	r3, [r7, #52]	; 0x34
 800d1c4:	e001      	b.n	800d1ca <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f383 8811 	msr	BASEPRI, r3
}
 800d1d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3738      	adds	r7, #56	; 0x38
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b08c      	sub	sp, #48	; 0x30
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d10a      	bne.n	800d210 <xQueueReceive+0x30>
	__asm volatile
 800d1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fe:	f383 8811 	msr	BASEPRI, r3
 800d202:	f3bf 8f6f 	isb	sy
 800d206:	f3bf 8f4f 	dsb	sy
 800d20a:	623b      	str	r3, [r7, #32]
}
 800d20c:	bf00      	nop
 800d20e:	e7fe      	b.n	800d20e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d103      	bne.n	800d21e <xQueueReceive+0x3e>
 800d216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d101      	bne.n	800d222 <xQueueReceive+0x42>
 800d21e:	2301      	movs	r3, #1
 800d220:	e000      	b.n	800d224 <xQueueReceive+0x44>
 800d222:	2300      	movs	r3, #0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d10a      	bne.n	800d23e <xQueueReceive+0x5e>
	__asm volatile
 800d228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22c:	f383 8811 	msr	BASEPRI, r3
 800d230:	f3bf 8f6f 	isb	sy
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	61fb      	str	r3, [r7, #28]
}
 800d23a:	bf00      	nop
 800d23c:	e7fe      	b.n	800d23c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d23e:	f001 f9c9 	bl	800e5d4 <xTaskGetSchedulerState>
 800d242:	4603      	mov	r3, r0
 800d244:	2b00      	cmp	r3, #0
 800d246:	d102      	bne.n	800d24e <xQueueReceive+0x6e>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d101      	bne.n	800d252 <xQueueReceive+0x72>
 800d24e:	2301      	movs	r3, #1
 800d250:	e000      	b.n	800d254 <xQueueReceive+0x74>
 800d252:	2300      	movs	r3, #0
 800d254:	2b00      	cmp	r3, #0
 800d256:	d10a      	bne.n	800d26e <xQueueReceive+0x8e>
	__asm volatile
 800d258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25c:	f383 8811 	msr	BASEPRI, r3
 800d260:	f3bf 8f6f 	isb	sy
 800d264:	f3bf 8f4f 	dsb	sy
 800d268:	61bb      	str	r3, [r7, #24]
}
 800d26a:	bf00      	nop
 800d26c:	e7fe      	b.n	800d26c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d26e:	f002 f831 	bl	800f2d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d276:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d01f      	beq.n	800d2be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d27e:	68b9      	ldr	r1, [r7, #8]
 800d280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d282:	f000 fa9b 	bl	800d7bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d288:	1e5a      	subs	r2, r3, #1
 800d28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00f      	beq.n	800d2b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d298:	3310      	adds	r3, #16
 800d29a:	4618      	mov	r0, r3
 800d29c:	f000 ffde 	bl	800e25c <xTaskRemoveFromEventList>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d007      	beq.n	800d2b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d2a6:	4b3d      	ldr	r3, [pc, #244]	; (800d39c <xQueueReceive+0x1bc>)
 800d2a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2ac:	601a      	str	r2, [r3, #0]
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d2b6:	f002 f83d 	bl	800f334 <vPortExitCritical>
				return pdPASS;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e069      	b.n	800d392 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d103      	bne.n	800d2cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d2c4:	f002 f836 	bl	800f334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	e062      	b.n	800d392 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d106      	bne.n	800d2e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2d2:	f107 0310 	add.w	r3, r7, #16
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f001 f822 	bl	800e320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d2dc:	2301      	movs	r3, #1
 800d2de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d2e0:	f002 f828 	bl	800f334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d2e4:	f000 fd9c 	bl	800de20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d2e8:	f001 fff4 	bl	800f2d4 <vPortEnterCritical>
 800d2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2f2:	b25b      	sxtb	r3, r3
 800d2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f8:	d103      	bne.n	800d302 <xQueueReceive+0x122>
 800d2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d308:	b25b      	sxtb	r3, r3
 800d30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d30e:	d103      	bne.n	800d318 <xQueueReceive+0x138>
 800d310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d312:	2200      	movs	r2, #0
 800d314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d318:	f002 f80c 	bl	800f334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d31c:	1d3a      	adds	r2, r7, #4
 800d31e:	f107 0310 	add.w	r3, r7, #16
 800d322:	4611      	mov	r1, r2
 800d324:	4618      	mov	r0, r3
 800d326:	f001 f811 	bl	800e34c <xTaskCheckForTimeOut>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d123      	bne.n	800d378 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d332:	f000 fabb 	bl	800d8ac <prvIsQueueEmpty>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d017      	beq.n	800d36c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33e:	3324      	adds	r3, #36	; 0x24
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	4611      	mov	r1, r2
 800d344:	4618      	mov	r0, r3
 800d346:	f000 ff39 	bl	800e1bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d34a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d34c:	f000 fa5c 	bl	800d808 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d350:	f000 fd74 	bl	800de3c <xTaskResumeAll>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d189      	bne.n	800d26e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d35a:	4b10      	ldr	r3, [pc, #64]	; (800d39c <xQueueReceive+0x1bc>)
 800d35c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d360:	601a      	str	r2, [r3, #0]
 800d362:	f3bf 8f4f 	dsb	sy
 800d366:	f3bf 8f6f 	isb	sy
 800d36a:	e780      	b.n	800d26e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d36c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d36e:	f000 fa4b 	bl	800d808 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d372:	f000 fd63 	bl	800de3c <xTaskResumeAll>
 800d376:	e77a      	b.n	800d26e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d37a:	f000 fa45 	bl	800d808 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d37e:	f000 fd5d 	bl	800de3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d384:	f000 fa92 	bl	800d8ac <prvIsQueueEmpty>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f43f af6f 	beq.w	800d26e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d390:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d392:	4618      	mov	r0, r3
 800d394:	3730      	adds	r7, #48	; 0x30
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	e000ed04 	.word	0xe000ed04

0800d3a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b08e      	sub	sp, #56	; 0x38
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d10a      	bne.n	800d3d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c0:	f383 8811 	msr	BASEPRI, r3
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	f3bf 8f4f 	dsb	sy
 800d3cc:	623b      	str	r3, [r7, #32]
}
 800d3ce:	bf00      	nop
 800d3d0:	e7fe      	b.n	800d3d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00a      	beq.n	800d3f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3de:	f383 8811 	msr	BASEPRI, r3
 800d3e2:	f3bf 8f6f 	isb	sy
 800d3e6:	f3bf 8f4f 	dsb	sy
 800d3ea:	61fb      	str	r3, [r7, #28]
}
 800d3ec:	bf00      	nop
 800d3ee:	e7fe      	b.n	800d3ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3f0:	f001 f8f0 	bl	800e5d4 <xTaskGetSchedulerState>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d102      	bne.n	800d400 <xQueueSemaphoreTake+0x60>
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d101      	bne.n	800d404 <xQueueSemaphoreTake+0x64>
 800d400:	2301      	movs	r3, #1
 800d402:	e000      	b.n	800d406 <xQueueSemaphoreTake+0x66>
 800d404:	2300      	movs	r3, #0
 800d406:	2b00      	cmp	r3, #0
 800d408:	d10a      	bne.n	800d420 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d40e:	f383 8811 	msr	BASEPRI, r3
 800d412:	f3bf 8f6f 	isb	sy
 800d416:	f3bf 8f4f 	dsb	sy
 800d41a:	61bb      	str	r3, [r7, #24]
}
 800d41c:	bf00      	nop
 800d41e:	e7fe      	b.n	800d41e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d420:	f001 ff58 	bl	800f2d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d428:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d024      	beq.n	800d47a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d432:	1e5a      	subs	r2, r3, #1
 800d434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d436:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d104      	bne.n	800d44a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d440:	f001 fa70 	bl	800e924 <pvTaskIncrementMutexHeldCount>
 800d444:	4602      	mov	r2, r0
 800d446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d448:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d00f      	beq.n	800d472 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d454:	3310      	adds	r3, #16
 800d456:	4618      	mov	r0, r3
 800d458:	f000 ff00 	bl	800e25c <xTaskRemoveFromEventList>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d007      	beq.n	800d472 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d462:	4b54      	ldr	r3, [pc, #336]	; (800d5b4 <xQueueSemaphoreTake+0x214>)
 800d464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d468:	601a      	str	r2, [r3, #0]
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d472:	f001 ff5f 	bl	800f334 <vPortExitCritical>
				return pdPASS;
 800d476:	2301      	movs	r3, #1
 800d478:	e097      	b.n	800d5aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d111      	bne.n	800d4a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d482:	2b00      	cmp	r3, #0
 800d484:	d00a      	beq.n	800d49c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48a:	f383 8811 	msr	BASEPRI, r3
 800d48e:	f3bf 8f6f 	isb	sy
 800d492:	f3bf 8f4f 	dsb	sy
 800d496:	617b      	str	r3, [r7, #20]
}
 800d498:	bf00      	nop
 800d49a:	e7fe      	b.n	800d49a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d49c:	f001 ff4a 	bl	800f334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	e082      	b.n	800d5aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d106      	bne.n	800d4b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d4aa:	f107 030c 	add.w	r3, r7, #12
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f000 ff36 	bl	800e320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d4b8:	f001 ff3c 	bl	800f334 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d4bc:	f000 fcb0 	bl	800de20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d4c0:	f001 ff08 	bl	800f2d4 <vPortEnterCritical>
 800d4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4ca:	b25b      	sxtb	r3, r3
 800d4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d0:	d103      	bne.n	800d4da <xQueueSemaphoreTake+0x13a>
 800d4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4e0:	b25b      	sxtb	r3, r3
 800d4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e6:	d103      	bne.n	800d4f0 <xQueueSemaphoreTake+0x150>
 800d4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4f0:	f001 ff20 	bl	800f334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4f4:	463a      	mov	r2, r7
 800d4f6:	f107 030c 	add.w	r3, r7, #12
 800d4fa:	4611      	mov	r1, r2
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f000 ff25 	bl	800e34c <xTaskCheckForTimeOut>
 800d502:	4603      	mov	r3, r0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d132      	bne.n	800d56e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d508:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d50a:	f000 f9cf 	bl	800d8ac <prvIsQueueEmpty>
 800d50e:	4603      	mov	r3, r0
 800d510:	2b00      	cmp	r3, #0
 800d512:	d026      	beq.n	800d562 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d109      	bne.n	800d530 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d51c:	f001 feda 	bl	800f2d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d522:	689b      	ldr	r3, [r3, #8]
 800d524:	4618      	mov	r0, r3
 800d526:	f001 f873 	bl	800e610 <xTaskPriorityInherit>
 800d52a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d52c:	f001 ff02 	bl	800f334 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d532:	3324      	adds	r3, #36	; 0x24
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	4611      	mov	r1, r2
 800d538:	4618      	mov	r0, r3
 800d53a:	f000 fe3f 	bl	800e1bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d53e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d540:	f000 f962 	bl	800d808 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d544:	f000 fc7a 	bl	800de3c <xTaskResumeAll>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	f47f af68 	bne.w	800d420 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d550:	4b18      	ldr	r3, [pc, #96]	; (800d5b4 <xQueueSemaphoreTake+0x214>)
 800d552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d556:	601a      	str	r2, [r3, #0]
 800d558:	f3bf 8f4f 	dsb	sy
 800d55c:	f3bf 8f6f 	isb	sy
 800d560:	e75e      	b.n	800d420 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d562:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d564:	f000 f950 	bl	800d808 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d568:	f000 fc68 	bl	800de3c <xTaskResumeAll>
 800d56c:	e758      	b.n	800d420 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d56e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d570:	f000 f94a 	bl	800d808 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d574:	f000 fc62 	bl	800de3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d578:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d57a:	f000 f997 	bl	800d8ac <prvIsQueueEmpty>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	f43f af4d 	beq.w	800d420 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d00d      	beq.n	800d5a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d58c:	f001 fea2 	bl	800f2d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d592:	f000 f891 	bl	800d6b8 <prvGetDisinheritPriorityAfterTimeout>
 800d596:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59a:	689b      	ldr	r3, [r3, #8]
 800d59c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f001 f932 	bl	800e808 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d5a4:	f001 fec6 	bl	800f334 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d5a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3738      	adds	r7, #56	; 0x38
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	e000ed04 	.word	0xe000ed04

0800d5b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b08e      	sub	sp, #56	; 0x38
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d10a      	bne.n	800d5e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d2:	f383 8811 	msr	BASEPRI, r3
 800d5d6:	f3bf 8f6f 	isb	sy
 800d5da:	f3bf 8f4f 	dsb	sy
 800d5de:	623b      	str	r3, [r7, #32]
}
 800d5e0:	bf00      	nop
 800d5e2:	e7fe      	b.n	800d5e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d103      	bne.n	800d5f2 <xQueueReceiveFromISR+0x3a>
 800d5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d101      	bne.n	800d5f6 <xQueueReceiveFromISR+0x3e>
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e000      	b.n	800d5f8 <xQueueReceiveFromISR+0x40>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d10a      	bne.n	800d612 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d600:	f383 8811 	msr	BASEPRI, r3
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	61fb      	str	r3, [r7, #28]
}
 800d60e:	bf00      	nop
 800d610:	e7fe      	b.n	800d610 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d612:	f001 ff41 	bl	800f498 <vPortValidateInterruptPriority>
	__asm volatile
 800d616:	f3ef 8211 	mrs	r2, BASEPRI
 800d61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d61e:	f383 8811 	msr	BASEPRI, r3
 800d622:	f3bf 8f6f 	isb	sy
 800d626:	f3bf 8f4f 	dsb	sy
 800d62a:	61ba      	str	r2, [r7, #24]
 800d62c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d62e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d630:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d636:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d02f      	beq.n	800d69e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d640:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d648:	68b9      	ldr	r1, [r7, #8]
 800d64a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d64c:	f000 f8b6 	bl	800d7bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d652:	1e5a      	subs	r2, r3, #1
 800d654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d656:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d658:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d660:	d112      	bne.n	800d688 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d664:	691b      	ldr	r3, [r3, #16]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d016      	beq.n	800d698 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66c:	3310      	adds	r3, #16
 800d66e:	4618      	mov	r0, r3
 800d670:	f000 fdf4 	bl	800e25c <xTaskRemoveFromEventList>
 800d674:	4603      	mov	r3, r0
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00e      	beq.n	800d698 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d00b      	beq.n	800d698 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2201      	movs	r2, #1
 800d684:	601a      	str	r2, [r3, #0]
 800d686:	e007      	b.n	800d698 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d68c:	3301      	adds	r3, #1
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	b25a      	sxtb	r2, r3
 800d692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d698:	2301      	movs	r3, #1
 800d69a:	637b      	str	r3, [r7, #52]	; 0x34
 800d69c:	e001      	b.n	800d6a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	637b      	str	r3, [r7, #52]	; 0x34
 800d6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	f383 8811 	msr	BASEPRI, r3
}
 800d6ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3738      	adds	r7, #56	; 0x38
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b085      	sub	sp, #20
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d006      	beq.n	800d6d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f1c3 0307 	rsb	r3, r3, #7
 800d6d2:	60fb      	str	r3, [r7, #12]
 800d6d4:	e001      	b.n	800d6da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d6da:	68fb      	ldr	r3, [r7, #12]
	}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3714      	adds	r7, #20
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b086      	sub	sp, #24
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	60b9      	str	r1, [r7, #8]
 800d6f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d702:	2b00      	cmp	r3, #0
 800d704:	d10d      	bne.n	800d722 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d14d      	bne.n	800d7aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	689b      	ldr	r3, [r3, #8]
 800d712:	4618      	mov	r0, r3
 800d714:	f000 fff2 	bl	800e6fc <xTaskPriorityDisinherit>
 800d718:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2200      	movs	r2, #0
 800d71e:	609a      	str	r2, [r3, #8]
 800d720:	e043      	b.n	800d7aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d119      	bne.n	800d75c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	6858      	ldr	r0, [r3, #4]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d730:	461a      	mov	r2, r3
 800d732:	68b9      	ldr	r1, [r7, #8]
 800d734:	f002 f908 	bl	800f948 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	685a      	ldr	r2, [r3, #4]
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d740:	441a      	add	r2, r3
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	685a      	ldr	r2, [r3, #4]
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	689b      	ldr	r3, [r3, #8]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d32b      	bcc.n	800d7aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	605a      	str	r2, [r3, #4]
 800d75a:	e026      	b.n	800d7aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	68d8      	ldr	r0, [r3, #12]
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d764:	461a      	mov	r2, r3
 800d766:	68b9      	ldr	r1, [r7, #8]
 800d768:	f002 f8ee 	bl	800f948 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	68da      	ldr	r2, [r3, #12]
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d774:	425b      	negs	r3, r3
 800d776:	441a      	add	r2, r3
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	68da      	ldr	r2, [r3, #12]
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	429a      	cmp	r2, r3
 800d786:	d207      	bcs.n	800d798 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	689a      	ldr	r2, [r3, #8]
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d790:	425b      	negs	r3, r3
 800d792:	441a      	add	r2, r3
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2b02      	cmp	r3, #2
 800d79c:	d105      	bne.n	800d7aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d002      	beq.n	800d7aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	3b01      	subs	r3, #1
 800d7a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	1c5a      	adds	r2, r3, #1
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d7b2:	697b      	ldr	r3, [r7, #20]
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3718      	adds	r7, #24
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d018      	beq.n	800d800 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	68da      	ldr	r2, [r3, #12]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7d6:	441a      	add	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	68da      	ldr	r2, [r3, #12]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	689b      	ldr	r3, [r3, #8]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d303      	bcc.n	800d7f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	68d9      	ldr	r1, [r3, #12]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	6838      	ldr	r0, [r7, #0]
 800d7fc:	f002 f8a4 	bl	800f948 <memcpy>
	}
}
 800d800:	bf00      	nop
 800d802:	3708      	adds	r7, #8
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d810:	f001 fd60 	bl	800f2d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d81a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d81c:	e011      	b.n	800d842 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d822:	2b00      	cmp	r3, #0
 800d824:	d012      	beq.n	800d84c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	3324      	adds	r3, #36	; 0x24
 800d82a:	4618      	mov	r0, r3
 800d82c:	f000 fd16 	bl	800e25c <xTaskRemoveFromEventList>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d001      	beq.n	800d83a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d836:	f000 fdeb 	bl	800e410 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d83a:	7bfb      	ldrb	r3, [r7, #15]
 800d83c:	3b01      	subs	r3, #1
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d846:	2b00      	cmp	r3, #0
 800d848:	dce9      	bgt.n	800d81e <prvUnlockQueue+0x16>
 800d84a:	e000      	b.n	800d84e <prvUnlockQueue+0x46>
					break;
 800d84c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	22ff      	movs	r2, #255	; 0xff
 800d852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d856:	f001 fd6d 	bl	800f334 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d85a:	f001 fd3b 	bl	800f2d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d864:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d866:	e011      	b.n	800d88c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	691b      	ldr	r3, [r3, #16]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d012      	beq.n	800d896 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	3310      	adds	r3, #16
 800d874:	4618      	mov	r0, r3
 800d876:	f000 fcf1 	bl	800e25c <xTaskRemoveFromEventList>
 800d87a:	4603      	mov	r3, r0
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d001      	beq.n	800d884 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d880:	f000 fdc6 	bl	800e410 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d884:	7bbb      	ldrb	r3, [r7, #14]
 800d886:	3b01      	subs	r3, #1
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d88c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d890:	2b00      	cmp	r3, #0
 800d892:	dce9      	bgt.n	800d868 <prvUnlockQueue+0x60>
 800d894:	e000      	b.n	800d898 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d896:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	22ff      	movs	r2, #255	; 0xff
 800d89c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d8a0:	f001 fd48 	bl	800f334 <vPortExitCritical>
}
 800d8a4:	bf00      	nop
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d8b4:	f001 fd0e 	bl	800f2d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d102      	bne.n	800d8c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	60fb      	str	r3, [r7, #12]
 800d8c4:	e001      	b.n	800d8ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d8ca:	f001 fd33 	bl	800f334 <vPortExitCritical>

	return xReturn;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3710      	adds	r7, #16
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b084      	sub	sp, #16
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d8e0:	f001 fcf8 	bl	800f2d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d102      	bne.n	800d8f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	60fb      	str	r3, [r7, #12]
 800d8f4:	e001      	b.n	800d8fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d8fa:	f001 fd1b 	bl	800f334 <vPortExitCritical>

	return xReturn;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d908:	b480      	push	{r7}
 800d90a:	b085      	sub	sp, #20
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d912:	2300      	movs	r3, #0
 800d914:	60fb      	str	r3, [r7, #12]
 800d916:	e014      	b.n	800d942 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d918:	4a0f      	ldr	r2, [pc, #60]	; (800d958 <vQueueAddToRegistry+0x50>)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d10b      	bne.n	800d93c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d924:	490c      	ldr	r1, [pc, #48]	; (800d958 <vQueueAddToRegistry+0x50>)
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	683a      	ldr	r2, [r7, #0]
 800d92a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d92e:	4a0a      	ldr	r2, [pc, #40]	; (800d958 <vQueueAddToRegistry+0x50>)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	00db      	lsls	r3, r3, #3
 800d934:	4413      	add	r3, r2
 800d936:	687a      	ldr	r2, [r7, #4]
 800d938:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d93a:	e006      	b.n	800d94a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	3301      	adds	r3, #1
 800d940:	60fb      	str	r3, [r7, #12]
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2b07      	cmp	r3, #7
 800d946:	d9e7      	bls.n	800d918 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d948:	bf00      	nop
 800d94a:	bf00      	nop
 800d94c:	3714      	adds	r7, #20
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	2000b6d8 	.word	0x2000b6d8

0800d95c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b086      	sub	sp, #24
 800d960:	af00      	add	r7, sp, #0
 800d962:	60f8      	str	r0, [r7, #12]
 800d964:	60b9      	str	r1, [r7, #8]
 800d966:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d96c:	f001 fcb2 	bl	800f2d4 <vPortEnterCritical>
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d976:	b25b      	sxtb	r3, r3
 800d978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d97c:	d103      	bne.n	800d986 <vQueueWaitForMessageRestricted+0x2a>
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	2200      	movs	r2, #0
 800d982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d98c:	b25b      	sxtb	r3, r3
 800d98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d992:	d103      	bne.n	800d99c <vQueueWaitForMessageRestricted+0x40>
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	2200      	movs	r2, #0
 800d998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d99c:	f001 fcca 	bl	800f334 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d106      	bne.n	800d9b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	3324      	adds	r3, #36	; 0x24
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	68b9      	ldr	r1, [r7, #8]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f000 fc27 	bl	800e204 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d9b6:	6978      	ldr	r0, [r7, #20]
 800d9b8:	f7ff ff26 	bl	800d808 <prvUnlockQueue>
	}
 800d9bc:	bf00      	nop
 800d9be:	3718      	adds	r7, #24
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08e      	sub	sp, #56	; 0x38
 800d9c8:	af04      	add	r7, sp, #16
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
 800d9d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d10a      	bne.n	800d9ee <xTaskCreateStatic+0x2a>
	__asm volatile
 800d9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9dc:	f383 8811 	msr	BASEPRI, r3
 800d9e0:	f3bf 8f6f 	isb	sy
 800d9e4:	f3bf 8f4f 	dsb	sy
 800d9e8:	623b      	str	r3, [r7, #32]
}
 800d9ea:	bf00      	nop
 800d9ec:	e7fe      	b.n	800d9ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d10a      	bne.n	800da0a <xTaskCreateStatic+0x46>
	__asm volatile
 800d9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f8:	f383 8811 	msr	BASEPRI, r3
 800d9fc:	f3bf 8f6f 	isb	sy
 800da00:	f3bf 8f4f 	dsb	sy
 800da04:	61fb      	str	r3, [r7, #28]
}
 800da06:	bf00      	nop
 800da08:	e7fe      	b.n	800da08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800da0a:	2354      	movs	r3, #84	; 0x54
 800da0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	2b54      	cmp	r3, #84	; 0x54
 800da12:	d00a      	beq.n	800da2a <xTaskCreateStatic+0x66>
	__asm volatile
 800da14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da18:	f383 8811 	msr	BASEPRI, r3
 800da1c:	f3bf 8f6f 	isb	sy
 800da20:	f3bf 8f4f 	dsb	sy
 800da24:	61bb      	str	r3, [r7, #24]
}
 800da26:	bf00      	nop
 800da28:	e7fe      	b.n	800da28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800da2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800da2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d01e      	beq.n	800da70 <xTaskCreateStatic+0xac>
 800da32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da34:	2b00      	cmp	r3, #0
 800da36:	d01b      	beq.n	800da70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800da42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da44:	2202      	movs	r2, #2
 800da46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800da4a:	2300      	movs	r3, #0
 800da4c:	9303      	str	r3, [sp, #12]
 800da4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da50:	9302      	str	r3, [sp, #8]
 800da52:	f107 0314 	add.w	r3, r7, #20
 800da56:	9301      	str	r3, [sp, #4]
 800da58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5a:	9300      	str	r3, [sp, #0]
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	68b9      	ldr	r1, [r7, #8]
 800da62:	68f8      	ldr	r0, [r7, #12]
 800da64:	f000 f850 	bl	800db08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da6a:	f000 f8d5 	bl	800dc18 <prvAddNewTaskToReadyList>
 800da6e:	e001      	b.n	800da74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800da70:	2300      	movs	r3, #0
 800da72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800da74:	697b      	ldr	r3, [r7, #20]
	}
 800da76:	4618      	mov	r0, r3
 800da78:	3728      	adds	r7, #40	; 0x28
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b08c      	sub	sp, #48	; 0x30
 800da82:	af04      	add	r7, sp, #16
 800da84:	60f8      	str	r0, [r7, #12]
 800da86:	60b9      	str	r1, [r7, #8]
 800da88:	603b      	str	r3, [r7, #0]
 800da8a:	4613      	mov	r3, r2
 800da8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800da8e:	88fb      	ldrh	r3, [r7, #6]
 800da90:	009b      	lsls	r3, r3, #2
 800da92:	4618      	mov	r0, r3
 800da94:	f001 fd40 	bl	800f518 <pvPortMalloc>
 800da98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d00e      	beq.n	800dabe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800daa0:	2054      	movs	r0, #84	; 0x54
 800daa2:	f001 fd39 	bl	800f518 <pvPortMalloc>
 800daa6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d003      	beq.n	800dab6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800daae:	69fb      	ldr	r3, [r7, #28]
 800dab0:	697a      	ldr	r2, [r7, #20]
 800dab2:	631a      	str	r2, [r3, #48]	; 0x30
 800dab4:	e005      	b.n	800dac2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dab6:	6978      	ldr	r0, [r7, #20]
 800dab8:	f001 fdfa 	bl	800f6b0 <vPortFree>
 800dabc:	e001      	b.n	800dac2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dabe:	2300      	movs	r3, #0
 800dac0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dac2:	69fb      	ldr	r3, [r7, #28]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d017      	beq.n	800daf8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	2200      	movs	r2, #0
 800dacc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dad0:	88fa      	ldrh	r2, [r7, #6]
 800dad2:	2300      	movs	r3, #0
 800dad4:	9303      	str	r3, [sp, #12]
 800dad6:	69fb      	ldr	r3, [r7, #28]
 800dad8:	9302      	str	r3, [sp, #8]
 800dada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dadc:	9301      	str	r3, [sp, #4]
 800dade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae0:	9300      	str	r3, [sp, #0]
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	68b9      	ldr	r1, [r7, #8]
 800dae6:	68f8      	ldr	r0, [r7, #12]
 800dae8:	f000 f80e 	bl	800db08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800daec:	69f8      	ldr	r0, [r7, #28]
 800daee:	f000 f893 	bl	800dc18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800daf2:	2301      	movs	r3, #1
 800daf4:	61bb      	str	r3, [r7, #24]
 800daf6:	e002      	b.n	800dafe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800daf8:	f04f 33ff 	mov.w	r3, #4294967295
 800dafc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dafe:	69bb      	ldr	r3, [r7, #24]
	}
 800db00:	4618      	mov	r0, r3
 800db02:	3720      	adds	r7, #32
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b088      	sub	sp, #32
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
 800db14:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800db16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800db20:	3b01      	subs	r3, #1
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	4413      	add	r3, r2
 800db26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800db28:	69bb      	ldr	r3, [r7, #24]
 800db2a:	f023 0307 	bic.w	r3, r3, #7
 800db2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	f003 0307 	and.w	r3, r3, #7
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00a      	beq.n	800db50 <prvInitialiseNewTask+0x48>
	__asm volatile
 800db3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3e:	f383 8811 	msr	BASEPRI, r3
 800db42:	f3bf 8f6f 	isb	sy
 800db46:	f3bf 8f4f 	dsb	sy
 800db4a:	617b      	str	r3, [r7, #20]
}
 800db4c:	bf00      	nop
 800db4e:	e7fe      	b.n	800db4e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d01f      	beq.n	800db96 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db56:	2300      	movs	r3, #0
 800db58:	61fb      	str	r3, [r7, #28]
 800db5a:	e012      	b.n	800db82 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800db5c:	68ba      	ldr	r2, [r7, #8]
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	4413      	add	r3, r2
 800db62:	7819      	ldrb	r1, [r3, #0]
 800db64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	4413      	add	r3, r2
 800db6a:	3334      	adds	r3, #52	; 0x34
 800db6c:	460a      	mov	r2, r1
 800db6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800db70:	68ba      	ldr	r2, [r7, #8]
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	4413      	add	r3, r2
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d006      	beq.n	800db8a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	3301      	adds	r3, #1
 800db80:	61fb      	str	r3, [r7, #28]
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	2b0f      	cmp	r3, #15
 800db86:	d9e9      	bls.n	800db5c <prvInitialiseNewTask+0x54>
 800db88:	e000      	b.n	800db8c <prvInitialiseNewTask+0x84>
			{
				break;
 800db8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8e:	2200      	movs	r2, #0
 800db90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db94:	e003      	b.n	800db9e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	2200      	movs	r2, #0
 800db9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba0:	2b06      	cmp	r3, #6
 800dba2:	d901      	bls.n	800dba8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dba4:	2306      	movs	r3, #6
 800dba6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbb2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbbc:	3304      	adds	r3, #4
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7fe ff1a 	bl	800c9f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc6:	3318      	adds	r3, #24
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7fe ff15 	bl	800c9f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd6:	f1c3 0207 	rsb	r2, r3, #7
 800dbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbe2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbec:	2200      	movs	r2, #0
 800dbee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dbf2:	683a      	ldr	r2, [r7, #0]
 800dbf4:	68f9      	ldr	r1, [r7, #12]
 800dbf6:	69b8      	ldr	r0, [r7, #24]
 800dbf8:	f001 fa40 	bl	800f07c <pxPortInitialiseStack>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d002      	beq.n	800dc0e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc0e:	bf00      	nop
 800dc10:	3720      	adds	r7, #32
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
	...

0800dc18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dc20:	f001 fb58 	bl	800f2d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dc24:	4b2a      	ldr	r3, [pc, #168]	; (800dcd0 <prvAddNewTaskToReadyList+0xb8>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	4a29      	ldr	r2, [pc, #164]	; (800dcd0 <prvAddNewTaskToReadyList+0xb8>)
 800dc2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dc2e:	4b29      	ldr	r3, [pc, #164]	; (800dcd4 <prvAddNewTaskToReadyList+0xbc>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d109      	bne.n	800dc4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dc36:	4a27      	ldr	r2, [pc, #156]	; (800dcd4 <prvAddNewTaskToReadyList+0xbc>)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dc3c:	4b24      	ldr	r3, [pc, #144]	; (800dcd0 <prvAddNewTaskToReadyList+0xb8>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d110      	bne.n	800dc66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dc44:	f000 fc08 	bl	800e458 <prvInitialiseTaskLists>
 800dc48:	e00d      	b.n	800dc66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dc4a:	4b23      	ldr	r3, [pc, #140]	; (800dcd8 <prvAddNewTaskToReadyList+0xc0>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d109      	bne.n	800dc66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc52:	4b20      	ldr	r3, [pc, #128]	; (800dcd4 <prvAddNewTaskToReadyList+0xbc>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d802      	bhi.n	800dc66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dc60:	4a1c      	ldr	r2, [pc, #112]	; (800dcd4 <prvAddNewTaskToReadyList+0xbc>)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc66:	4b1d      	ldr	r3, [pc, #116]	; (800dcdc <prvAddNewTaskToReadyList+0xc4>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	4a1b      	ldr	r2, [pc, #108]	; (800dcdc <prvAddNewTaskToReadyList+0xc4>)
 800dc6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc74:	2201      	movs	r2, #1
 800dc76:	409a      	lsls	r2, r3
 800dc78:	4b19      	ldr	r3, [pc, #100]	; (800dce0 <prvAddNewTaskToReadyList+0xc8>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	4a18      	ldr	r2, [pc, #96]	; (800dce0 <prvAddNewTaskToReadyList+0xc8>)
 800dc80:	6013      	str	r3, [r2, #0]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc86:	4613      	mov	r3, r2
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	4413      	add	r3, r2
 800dc8c:	009b      	lsls	r3, r3, #2
 800dc8e:	4a15      	ldr	r2, [pc, #84]	; (800dce4 <prvAddNewTaskToReadyList+0xcc>)
 800dc90:	441a      	add	r2, r3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	3304      	adds	r3, #4
 800dc96:	4619      	mov	r1, r3
 800dc98:	4610      	mov	r0, r2
 800dc9a:	f7fe feba 	bl	800ca12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dc9e:	f001 fb49 	bl	800f334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dca2:	4b0d      	ldr	r3, [pc, #52]	; (800dcd8 <prvAddNewTaskToReadyList+0xc0>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d00e      	beq.n	800dcc8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dcaa:	4b0a      	ldr	r3, [pc, #40]	; (800dcd4 <prvAddNewTaskToReadyList+0xbc>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d207      	bcs.n	800dcc8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dcb8:	4b0b      	ldr	r3, [pc, #44]	; (800dce8 <prvAddNewTaskToReadyList+0xd0>)
 800dcba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcbe:	601a      	str	r2, [r3, #0]
 800dcc0:	f3bf 8f4f 	dsb	sy
 800dcc4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcc8:	bf00      	nop
 800dcca:	3708      	adds	r7, #8
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	200009cc 	.word	0x200009cc
 800dcd4:	200008cc 	.word	0x200008cc
 800dcd8:	200009d8 	.word	0x200009d8
 800dcdc:	200009e8 	.word	0x200009e8
 800dce0:	200009d4 	.word	0x200009d4
 800dce4:	200008d0 	.word	0x200008d0
 800dce8:	e000ed04 	.word	0xe000ed04

0800dcec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d017      	beq.n	800dd2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dcfe:	4b13      	ldr	r3, [pc, #76]	; (800dd4c <vTaskDelay+0x60>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d00a      	beq.n	800dd1c <vTaskDelay+0x30>
	__asm volatile
 800dd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0a:	f383 8811 	msr	BASEPRI, r3
 800dd0e:	f3bf 8f6f 	isb	sy
 800dd12:	f3bf 8f4f 	dsb	sy
 800dd16:	60bb      	str	r3, [r7, #8]
}
 800dd18:	bf00      	nop
 800dd1a:	e7fe      	b.n	800dd1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dd1c:	f000 f880 	bl	800de20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dd20:	2100      	movs	r1, #0
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 fe12 	bl	800e94c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dd28:	f000 f888 	bl	800de3c <xTaskResumeAll>
 800dd2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d107      	bne.n	800dd44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dd34:	4b06      	ldr	r3, [pc, #24]	; (800dd50 <vTaskDelay+0x64>)
 800dd36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd3a:	601a      	str	r2, [r3, #0]
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd44:	bf00      	nop
 800dd46:	3710      	adds	r7, #16
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	200009f4 	.word	0x200009f4
 800dd50:	e000ed04 	.word	0xe000ed04

0800dd54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b08a      	sub	sp, #40	; 0x28
 800dd58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dd62:	463a      	mov	r2, r7
 800dd64:	1d39      	adds	r1, r7, #4
 800dd66:	f107 0308 	add.w	r3, r7, #8
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7f4 fc38 	bl	80025e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dd70:	6839      	ldr	r1, [r7, #0]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	68ba      	ldr	r2, [r7, #8]
 800dd76:	9202      	str	r2, [sp, #8]
 800dd78:	9301      	str	r3, [sp, #4]
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	9300      	str	r3, [sp, #0]
 800dd7e:	2300      	movs	r3, #0
 800dd80:	460a      	mov	r2, r1
 800dd82:	4921      	ldr	r1, [pc, #132]	; (800de08 <vTaskStartScheduler+0xb4>)
 800dd84:	4821      	ldr	r0, [pc, #132]	; (800de0c <vTaskStartScheduler+0xb8>)
 800dd86:	f7ff fe1d 	bl	800d9c4 <xTaskCreateStatic>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	4a20      	ldr	r2, [pc, #128]	; (800de10 <vTaskStartScheduler+0xbc>)
 800dd8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd90:	4b1f      	ldr	r3, [pc, #124]	; (800de10 <vTaskStartScheduler+0xbc>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d002      	beq.n	800dd9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd98:	2301      	movs	r3, #1
 800dd9a:	617b      	str	r3, [r7, #20]
 800dd9c:	e001      	b.n	800dda2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d102      	bne.n	800ddae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dda8:	f000 fe36 	bl	800ea18 <xTimerCreateTimerTask>
 800ddac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d116      	bne.n	800dde2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ddb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb8:	f383 8811 	msr	BASEPRI, r3
 800ddbc:	f3bf 8f6f 	isb	sy
 800ddc0:	f3bf 8f4f 	dsb	sy
 800ddc4:	613b      	str	r3, [r7, #16]
}
 800ddc6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ddc8:	4b12      	ldr	r3, [pc, #72]	; (800de14 <vTaskStartScheduler+0xc0>)
 800ddca:	f04f 32ff 	mov.w	r2, #4294967295
 800ddce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ddd0:	4b11      	ldr	r3, [pc, #68]	; (800de18 <vTaskStartScheduler+0xc4>)
 800ddd2:	2201      	movs	r2, #1
 800ddd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ddd6:	4b11      	ldr	r3, [pc, #68]	; (800de1c <vTaskStartScheduler+0xc8>)
 800ddd8:	2200      	movs	r2, #0
 800ddda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dddc:	f001 f9d8 	bl	800f190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dde0:	e00e      	b.n	800de00 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dde8:	d10a      	bne.n	800de00 <vTaskStartScheduler+0xac>
	__asm volatile
 800ddea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddee:	f383 8811 	msr	BASEPRI, r3
 800ddf2:	f3bf 8f6f 	isb	sy
 800ddf6:	f3bf 8f4f 	dsb	sy
 800ddfa:	60fb      	str	r3, [r7, #12]
}
 800ddfc:	bf00      	nop
 800ddfe:	e7fe      	b.n	800ddfe <vTaskStartScheduler+0xaa>
}
 800de00:	bf00      	nop
 800de02:	3718      	adds	r7, #24
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}
 800de08:	080143e8 	.word	0x080143e8
 800de0c:	0800e429 	.word	0x0800e429
 800de10:	200009f0 	.word	0x200009f0
 800de14:	200009ec 	.word	0x200009ec
 800de18:	200009d8 	.word	0x200009d8
 800de1c:	200009d0 	.word	0x200009d0

0800de20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de20:	b480      	push	{r7}
 800de22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de24:	4b04      	ldr	r3, [pc, #16]	; (800de38 <vTaskSuspendAll+0x18>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	3301      	adds	r3, #1
 800de2a:	4a03      	ldr	r2, [pc, #12]	; (800de38 <vTaskSuspendAll+0x18>)
 800de2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800de2e:	bf00      	nop
 800de30:	46bd      	mov	sp, r7
 800de32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de36:	4770      	bx	lr
 800de38:	200009f4 	.word	0x200009f4

0800de3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800de42:	2300      	movs	r3, #0
 800de44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800de46:	2300      	movs	r3, #0
 800de48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800de4a:	4b41      	ldr	r3, [pc, #260]	; (800df50 <xTaskResumeAll+0x114>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d10a      	bne.n	800de68 <xTaskResumeAll+0x2c>
	__asm volatile
 800de52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de56:	f383 8811 	msr	BASEPRI, r3
 800de5a:	f3bf 8f6f 	isb	sy
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	603b      	str	r3, [r7, #0]
}
 800de64:	bf00      	nop
 800de66:	e7fe      	b.n	800de66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800de68:	f001 fa34 	bl	800f2d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800de6c:	4b38      	ldr	r3, [pc, #224]	; (800df50 <xTaskResumeAll+0x114>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	3b01      	subs	r3, #1
 800de72:	4a37      	ldr	r2, [pc, #220]	; (800df50 <xTaskResumeAll+0x114>)
 800de74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de76:	4b36      	ldr	r3, [pc, #216]	; (800df50 <xTaskResumeAll+0x114>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d161      	bne.n	800df42 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de7e:	4b35      	ldr	r3, [pc, #212]	; (800df54 <xTaskResumeAll+0x118>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d05d      	beq.n	800df42 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de86:	e02e      	b.n	800dee6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de88:	4b33      	ldr	r3, [pc, #204]	; (800df58 <xTaskResumeAll+0x11c>)
 800de8a:	68db      	ldr	r3, [r3, #12]
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	3318      	adds	r3, #24
 800de94:	4618      	mov	r0, r3
 800de96:	f7fe fe19 	bl	800cacc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	3304      	adds	r3, #4
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7fe fe14 	bl	800cacc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea8:	2201      	movs	r2, #1
 800deaa:	409a      	lsls	r2, r3
 800deac:	4b2b      	ldr	r3, [pc, #172]	; (800df5c <xTaskResumeAll+0x120>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	4313      	orrs	r3, r2
 800deb2:	4a2a      	ldr	r2, [pc, #168]	; (800df5c <xTaskResumeAll+0x120>)
 800deb4:	6013      	str	r3, [r2, #0]
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deba:	4613      	mov	r3, r2
 800debc:	009b      	lsls	r3, r3, #2
 800debe:	4413      	add	r3, r2
 800dec0:	009b      	lsls	r3, r3, #2
 800dec2:	4a27      	ldr	r2, [pc, #156]	; (800df60 <xTaskResumeAll+0x124>)
 800dec4:	441a      	add	r2, r3
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	3304      	adds	r3, #4
 800deca:	4619      	mov	r1, r3
 800decc:	4610      	mov	r0, r2
 800dece:	f7fe fda0 	bl	800ca12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded6:	4b23      	ldr	r3, [pc, #140]	; (800df64 <xTaskResumeAll+0x128>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dedc:	429a      	cmp	r2, r3
 800dede:	d302      	bcc.n	800dee6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800dee0:	4b21      	ldr	r3, [pc, #132]	; (800df68 <xTaskResumeAll+0x12c>)
 800dee2:	2201      	movs	r2, #1
 800dee4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dee6:	4b1c      	ldr	r3, [pc, #112]	; (800df58 <xTaskResumeAll+0x11c>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d1cc      	bne.n	800de88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d001      	beq.n	800def8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800def4:	f000 fb4e 	bl	800e594 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800def8:	4b1c      	ldr	r3, [pc, #112]	; (800df6c <xTaskResumeAll+0x130>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d010      	beq.n	800df26 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800df04:	f000 f846 	bl	800df94 <xTaskIncrementTick>
 800df08:	4603      	mov	r3, r0
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d002      	beq.n	800df14 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800df0e:	4b16      	ldr	r3, [pc, #88]	; (800df68 <xTaskResumeAll+0x12c>)
 800df10:	2201      	movs	r2, #1
 800df12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	3b01      	subs	r3, #1
 800df18:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d1f1      	bne.n	800df04 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800df20:	4b12      	ldr	r3, [pc, #72]	; (800df6c <xTaskResumeAll+0x130>)
 800df22:	2200      	movs	r2, #0
 800df24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df26:	4b10      	ldr	r3, [pc, #64]	; (800df68 <xTaskResumeAll+0x12c>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d009      	beq.n	800df42 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df2e:	2301      	movs	r3, #1
 800df30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800df32:	4b0f      	ldr	r3, [pc, #60]	; (800df70 <xTaskResumeAll+0x134>)
 800df34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df38:	601a      	str	r2, [r3, #0]
 800df3a:	f3bf 8f4f 	dsb	sy
 800df3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df42:	f001 f9f7 	bl	800f334 <vPortExitCritical>

	return xAlreadyYielded;
 800df46:	68bb      	ldr	r3, [r7, #8]
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3710      	adds	r7, #16
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	200009f4 	.word	0x200009f4
 800df54:	200009cc 	.word	0x200009cc
 800df58:	2000098c 	.word	0x2000098c
 800df5c:	200009d4 	.word	0x200009d4
 800df60:	200008d0 	.word	0x200008d0
 800df64:	200008cc 	.word	0x200008cc
 800df68:	200009e0 	.word	0x200009e0
 800df6c:	200009dc 	.word	0x200009dc
 800df70:	e000ed04 	.word	0xe000ed04

0800df74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800df7a:	4b05      	ldr	r3, [pc, #20]	; (800df90 <xTaskGetTickCount+0x1c>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800df80:	687b      	ldr	r3, [r7, #4]
}
 800df82:	4618      	mov	r0, r3
 800df84:	370c      	adds	r7, #12
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr
 800df8e:	bf00      	nop
 800df90:	200009d0 	.word	0x200009d0

0800df94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b086      	sub	sp, #24
 800df98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800df9a:	2300      	movs	r3, #0
 800df9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df9e:	4b4e      	ldr	r3, [pc, #312]	; (800e0d8 <xTaskIncrementTick+0x144>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	f040 808e 	bne.w	800e0c4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dfa8:	4b4c      	ldr	r3, [pc, #304]	; (800e0dc <xTaskIncrementTick+0x148>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	3301      	adds	r3, #1
 800dfae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dfb0:	4a4a      	ldr	r2, [pc, #296]	; (800e0dc <xTaskIncrementTick+0x148>)
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d120      	bne.n	800dffe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dfbc:	4b48      	ldr	r3, [pc, #288]	; (800e0e0 <xTaskIncrementTick+0x14c>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d00a      	beq.n	800dfdc <xTaskIncrementTick+0x48>
	__asm volatile
 800dfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfca:	f383 8811 	msr	BASEPRI, r3
 800dfce:	f3bf 8f6f 	isb	sy
 800dfd2:	f3bf 8f4f 	dsb	sy
 800dfd6:	603b      	str	r3, [r7, #0]
}
 800dfd8:	bf00      	nop
 800dfda:	e7fe      	b.n	800dfda <xTaskIncrementTick+0x46>
 800dfdc:	4b40      	ldr	r3, [pc, #256]	; (800e0e0 <xTaskIncrementTick+0x14c>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	60fb      	str	r3, [r7, #12]
 800dfe2:	4b40      	ldr	r3, [pc, #256]	; (800e0e4 <xTaskIncrementTick+0x150>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4a3e      	ldr	r2, [pc, #248]	; (800e0e0 <xTaskIncrementTick+0x14c>)
 800dfe8:	6013      	str	r3, [r2, #0]
 800dfea:	4a3e      	ldr	r2, [pc, #248]	; (800e0e4 <xTaskIncrementTick+0x150>)
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	6013      	str	r3, [r2, #0]
 800dff0:	4b3d      	ldr	r3, [pc, #244]	; (800e0e8 <xTaskIncrementTick+0x154>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	3301      	adds	r3, #1
 800dff6:	4a3c      	ldr	r2, [pc, #240]	; (800e0e8 <xTaskIncrementTick+0x154>)
 800dff8:	6013      	str	r3, [r2, #0]
 800dffa:	f000 facb 	bl	800e594 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dffe:	4b3b      	ldr	r3, [pc, #236]	; (800e0ec <xTaskIncrementTick+0x158>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	693a      	ldr	r2, [r7, #16]
 800e004:	429a      	cmp	r2, r3
 800e006:	d348      	bcc.n	800e09a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e008:	4b35      	ldr	r3, [pc, #212]	; (800e0e0 <xTaskIncrementTick+0x14c>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d104      	bne.n	800e01c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e012:	4b36      	ldr	r3, [pc, #216]	; (800e0ec <xTaskIncrementTick+0x158>)
 800e014:	f04f 32ff 	mov.w	r2, #4294967295
 800e018:	601a      	str	r2, [r3, #0]
					break;
 800e01a:	e03e      	b.n	800e09a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e01c:	4b30      	ldr	r3, [pc, #192]	; (800e0e0 <xTaskIncrementTick+0x14c>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	68db      	ldr	r3, [r3, #12]
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e02c:	693a      	ldr	r2, [r7, #16]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	429a      	cmp	r2, r3
 800e032:	d203      	bcs.n	800e03c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e034:	4a2d      	ldr	r2, [pc, #180]	; (800e0ec <xTaskIncrementTick+0x158>)
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e03a:	e02e      	b.n	800e09a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	3304      	adds	r3, #4
 800e040:	4618      	mov	r0, r3
 800e042:	f7fe fd43 	bl	800cacc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d004      	beq.n	800e058 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	3318      	adds	r3, #24
 800e052:	4618      	mov	r0, r3
 800e054:	f7fe fd3a 	bl	800cacc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e05c:	2201      	movs	r2, #1
 800e05e:	409a      	lsls	r2, r3
 800e060:	4b23      	ldr	r3, [pc, #140]	; (800e0f0 <xTaskIncrementTick+0x15c>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4313      	orrs	r3, r2
 800e066:	4a22      	ldr	r2, [pc, #136]	; (800e0f0 <xTaskIncrementTick+0x15c>)
 800e068:	6013      	str	r3, [r2, #0]
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e06e:	4613      	mov	r3, r2
 800e070:	009b      	lsls	r3, r3, #2
 800e072:	4413      	add	r3, r2
 800e074:	009b      	lsls	r3, r3, #2
 800e076:	4a1f      	ldr	r2, [pc, #124]	; (800e0f4 <xTaskIncrementTick+0x160>)
 800e078:	441a      	add	r2, r3
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	3304      	adds	r3, #4
 800e07e:	4619      	mov	r1, r3
 800e080:	4610      	mov	r0, r2
 800e082:	f7fe fcc6 	bl	800ca12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e08a:	4b1b      	ldr	r3, [pc, #108]	; (800e0f8 <xTaskIncrementTick+0x164>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e090:	429a      	cmp	r2, r3
 800e092:	d3b9      	bcc.n	800e008 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e094:	2301      	movs	r3, #1
 800e096:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e098:	e7b6      	b.n	800e008 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e09a:	4b17      	ldr	r3, [pc, #92]	; (800e0f8 <xTaskIncrementTick+0x164>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a0:	4914      	ldr	r1, [pc, #80]	; (800e0f4 <xTaskIncrementTick+0x160>)
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	009b      	lsls	r3, r3, #2
 800e0a6:	4413      	add	r3, r2
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	440b      	add	r3, r1
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2b01      	cmp	r3, #1
 800e0b0:	d901      	bls.n	800e0b6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e0b6:	4b11      	ldr	r3, [pc, #68]	; (800e0fc <xTaskIncrementTick+0x168>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d007      	beq.n	800e0ce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	617b      	str	r3, [r7, #20]
 800e0c2:	e004      	b.n	800e0ce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e0c4:	4b0e      	ldr	r3, [pc, #56]	; (800e100 <xTaskIncrementTick+0x16c>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	4a0d      	ldr	r2, [pc, #52]	; (800e100 <xTaskIncrementTick+0x16c>)
 800e0cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e0ce:	697b      	ldr	r3, [r7, #20]
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3718      	adds	r7, #24
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	200009f4 	.word	0x200009f4
 800e0dc:	200009d0 	.word	0x200009d0
 800e0e0:	20000984 	.word	0x20000984
 800e0e4:	20000988 	.word	0x20000988
 800e0e8:	200009e4 	.word	0x200009e4
 800e0ec:	200009ec 	.word	0x200009ec
 800e0f0:	200009d4 	.word	0x200009d4
 800e0f4:	200008d0 	.word	0x200008d0
 800e0f8:	200008cc 	.word	0x200008cc
 800e0fc:	200009e0 	.word	0x200009e0
 800e100:	200009dc 	.word	0x200009dc

0800e104 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e104:	b480      	push	{r7}
 800e106:	b087      	sub	sp, #28
 800e108:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e10a:	4b27      	ldr	r3, [pc, #156]	; (800e1a8 <vTaskSwitchContext+0xa4>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d003      	beq.n	800e11a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e112:	4b26      	ldr	r3, [pc, #152]	; (800e1ac <vTaskSwitchContext+0xa8>)
 800e114:	2201      	movs	r2, #1
 800e116:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e118:	e03f      	b.n	800e19a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800e11a:	4b24      	ldr	r3, [pc, #144]	; (800e1ac <vTaskSwitchContext+0xa8>)
 800e11c:	2200      	movs	r2, #0
 800e11e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e120:	4b23      	ldr	r3, [pc, #140]	; (800e1b0 <vTaskSwitchContext+0xac>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	fab3 f383 	clz	r3, r3
 800e12c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e12e:	7afb      	ldrb	r3, [r7, #11]
 800e130:	f1c3 031f 	rsb	r3, r3, #31
 800e134:	617b      	str	r3, [r7, #20]
 800e136:	491f      	ldr	r1, [pc, #124]	; (800e1b4 <vTaskSwitchContext+0xb0>)
 800e138:	697a      	ldr	r2, [r7, #20]
 800e13a:	4613      	mov	r3, r2
 800e13c:	009b      	lsls	r3, r3, #2
 800e13e:	4413      	add	r3, r2
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	440b      	add	r3, r1
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d10a      	bne.n	800e160 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14e:	f383 8811 	msr	BASEPRI, r3
 800e152:	f3bf 8f6f 	isb	sy
 800e156:	f3bf 8f4f 	dsb	sy
 800e15a:	607b      	str	r3, [r7, #4]
}
 800e15c:	bf00      	nop
 800e15e:	e7fe      	b.n	800e15e <vTaskSwitchContext+0x5a>
 800e160:	697a      	ldr	r2, [r7, #20]
 800e162:	4613      	mov	r3, r2
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	4413      	add	r3, r2
 800e168:	009b      	lsls	r3, r3, #2
 800e16a:	4a12      	ldr	r2, [pc, #72]	; (800e1b4 <vTaskSwitchContext+0xb0>)
 800e16c:	4413      	add	r3, r2
 800e16e:	613b      	str	r3, [r7, #16]
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	685a      	ldr	r2, [r3, #4]
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	605a      	str	r2, [r3, #4]
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	685a      	ldr	r2, [r3, #4]
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	3308      	adds	r3, #8
 800e182:	429a      	cmp	r2, r3
 800e184:	d104      	bne.n	800e190 <vTaskSwitchContext+0x8c>
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	685b      	ldr	r3, [r3, #4]
 800e18a:	685a      	ldr	r2, [r3, #4]
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	605a      	str	r2, [r3, #4]
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	4a08      	ldr	r2, [pc, #32]	; (800e1b8 <vTaskSwitchContext+0xb4>)
 800e198:	6013      	str	r3, [r2, #0]
}
 800e19a:	bf00      	nop
 800e19c:	371c      	adds	r7, #28
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop
 800e1a8:	200009f4 	.word	0x200009f4
 800e1ac:	200009e0 	.word	0x200009e0
 800e1b0:	200009d4 	.word	0x200009d4
 800e1b4:	200008d0 	.word	0x200008d0
 800e1b8:	200008cc 	.word	0x200008cc

0800e1bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b084      	sub	sp, #16
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d10a      	bne.n	800e1e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d0:	f383 8811 	msr	BASEPRI, r3
 800e1d4:	f3bf 8f6f 	isb	sy
 800e1d8:	f3bf 8f4f 	dsb	sy
 800e1dc:	60fb      	str	r3, [r7, #12]
}
 800e1de:	bf00      	nop
 800e1e0:	e7fe      	b.n	800e1e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e1e2:	4b07      	ldr	r3, [pc, #28]	; (800e200 <vTaskPlaceOnEventList+0x44>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	3318      	adds	r3, #24
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f7fe fc35 	bl	800ca5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e1f0:	2101      	movs	r1, #1
 800e1f2:	6838      	ldr	r0, [r7, #0]
 800e1f4:	f000 fbaa 	bl	800e94c <prvAddCurrentTaskToDelayedList>
}
 800e1f8:	bf00      	nop
 800e1fa:	3710      	adds	r7, #16
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	200008cc 	.word	0x200008cc

0800e204 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e204:	b580      	push	{r7, lr}
 800e206:	b086      	sub	sp, #24
 800e208:	af00      	add	r7, sp, #0
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d10a      	bne.n	800e22c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e21a:	f383 8811 	msr	BASEPRI, r3
 800e21e:	f3bf 8f6f 	isb	sy
 800e222:	f3bf 8f4f 	dsb	sy
 800e226:	617b      	str	r3, [r7, #20]
}
 800e228:	bf00      	nop
 800e22a:	e7fe      	b.n	800e22a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e22c:	4b0a      	ldr	r3, [pc, #40]	; (800e258 <vTaskPlaceOnEventListRestricted+0x54>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	3318      	adds	r3, #24
 800e232:	4619      	mov	r1, r3
 800e234:	68f8      	ldr	r0, [r7, #12]
 800e236:	f7fe fbec 	bl	800ca12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d002      	beq.n	800e246 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e240:	f04f 33ff 	mov.w	r3, #4294967295
 800e244:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e246:	6879      	ldr	r1, [r7, #4]
 800e248:	68b8      	ldr	r0, [r7, #8]
 800e24a:	f000 fb7f 	bl	800e94c <prvAddCurrentTaskToDelayedList>
	}
 800e24e:	bf00      	nop
 800e250:	3718      	adds	r7, #24
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	200008cc 	.word	0x200008cc

0800e25c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b086      	sub	sp, #24
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	68db      	ldr	r3, [r3, #12]
 800e26a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d10a      	bne.n	800e288 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e276:	f383 8811 	msr	BASEPRI, r3
 800e27a:	f3bf 8f6f 	isb	sy
 800e27e:	f3bf 8f4f 	dsb	sy
 800e282:	60fb      	str	r3, [r7, #12]
}
 800e284:	bf00      	nop
 800e286:	e7fe      	b.n	800e286 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	3318      	adds	r3, #24
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7fe fc1d 	bl	800cacc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e292:	4b1d      	ldr	r3, [pc, #116]	; (800e308 <xTaskRemoveFromEventList+0xac>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d11c      	bne.n	800e2d4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	3304      	adds	r3, #4
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7fe fc14 	bl	800cacc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	409a      	lsls	r2, r3
 800e2ac:	4b17      	ldr	r3, [pc, #92]	; (800e30c <xTaskRemoveFromEventList+0xb0>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4313      	orrs	r3, r2
 800e2b2:	4a16      	ldr	r2, [pc, #88]	; (800e30c <xTaskRemoveFromEventList+0xb0>)
 800e2b4:	6013      	str	r3, [r2, #0]
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	4413      	add	r3, r2
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	4a13      	ldr	r2, [pc, #76]	; (800e310 <xTaskRemoveFromEventList+0xb4>)
 800e2c4:	441a      	add	r2, r3
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	3304      	adds	r3, #4
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	4610      	mov	r0, r2
 800e2ce:	f7fe fba0 	bl	800ca12 <vListInsertEnd>
 800e2d2:	e005      	b.n	800e2e0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	3318      	adds	r3, #24
 800e2d8:	4619      	mov	r1, r3
 800e2da:	480e      	ldr	r0, [pc, #56]	; (800e314 <xTaskRemoveFromEventList+0xb8>)
 800e2dc:	f7fe fb99 	bl	800ca12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2e4:	4b0c      	ldr	r3, [pc, #48]	; (800e318 <xTaskRemoveFromEventList+0xbc>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d905      	bls.n	800e2fa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e2f2:	4b0a      	ldr	r3, [pc, #40]	; (800e31c <xTaskRemoveFromEventList+0xc0>)
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	601a      	str	r2, [r3, #0]
 800e2f8:	e001      	b.n	800e2fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e2fe:	697b      	ldr	r3, [r7, #20]
}
 800e300:	4618      	mov	r0, r3
 800e302:	3718      	adds	r7, #24
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	200009f4 	.word	0x200009f4
 800e30c:	200009d4 	.word	0x200009d4
 800e310:	200008d0 	.word	0x200008d0
 800e314:	2000098c 	.word	0x2000098c
 800e318:	200008cc 	.word	0x200008cc
 800e31c:	200009e0 	.word	0x200009e0

0800e320 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e320:	b480      	push	{r7}
 800e322:	b083      	sub	sp, #12
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e328:	4b06      	ldr	r3, [pc, #24]	; (800e344 <vTaskInternalSetTimeOutState+0x24>)
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e330:	4b05      	ldr	r3, [pc, #20]	; (800e348 <vTaskInternalSetTimeOutState+0x28>)
 800e332:	681a      	ldr	r2, [r3, #0]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	605a      	str	r2, [r3, #4]
}
 800e338:	bf00      	nop
 800e33a:	370c      	adds	r7, #12
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr
 800e344:	200009e4 	.word	0x200009e4
 800e348:	200009d0 	.word	0x200009d0

0800e34c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b088      	sub	sp, #32
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d10a      	bne.n	800e372 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e360:	f383 8811 	msr	BASEPRI, r3
 800e364:	f3bf 8f6f 	isb	sy
 800e368:	f3bf 8f4f 	dsb	sy
 800e36c:	613b      	str	r3, [r7, #16]
}
 800e36e:	bf00      	nop
 800e370:	e7fe      	b.n	800e370 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d10a      	bne.n	800e38e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e37c:	f383 8811 	msr	BASEPRI, r3
 800e380:	f3bf 8f6f 	isb	sy
 800e384:	f3bf 8f4f 	dsb	sy
 800e388:	60fb      	str	r3, [r7, #12]
}
 800e38a:	bf00      	nop
 800e38c:	e7fe      	b.n	800e38c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e38e:	f000 ffa1 	bl	800f2d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e392:	4b1d      	ldr	r3, [pc, #116]	; (800e408 <xTaskCheckForTimeOut+0xbc>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	69ba      	ldr	r2, [r7, #24]
 800e39e:	1ad3      	subs	r3, r2, r3
 800e3a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3aa:	d102      	bne.n	800e3b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	61fb      	str	r3, [r7, #28]
 800e3b0:	e023      	b.n	800e3fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	4b15      	ldr	r3, [pc, #84]	; (800e40c <xTaskCheckForTimeOut+0xc0>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d007      	beq.n	800e3ce <xTaskCheckForTimeOut+0x82>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	69ba      	ldr	r2, [r7, #24]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d302      	bcc.n	800e3ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	61fb      	str	r3, [r7, #28]
 800e3cc:	e015      	b.n	800e3fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	697a      	ldr	r2, [r7, #20]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d20b      	bcs.n	800e3f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	1ad2      	subs	r2, r2, r3
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f7ff ff9b 	bl	800e320 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	61fb      	str	r3, [r7, #28]
 800e3ee:	e004      	b.n	800e3fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e3fa:	f000 ff9b 	bl	800f334 <vPortExitCritical>

	return xReturn;
 800e3fe:	69fb      	ldr	r3, [r7, #28]
}
 800e400:	4618      	mov	r0, r3
 800e402:	3720      	adds	r7, #32
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	200009d0 	.word	0x200009d0
 800e40c:	200009e4 	.word	0x200009e4

0800e410 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e410:	b480      	push	{r7}
 800e412:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e414:	4b03      	ldr	r3, [pc, #12]	; (800e424 <vTaskMissedYield+0x14>)
 800e416:	2201      	movs	r2, #1
 800e418:	601a      	str	r2, [r3, #0]
}
 800e41a:	bf00      	nop
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr
 800e424:	200009e0 	.word	0x200009e0

0800e428 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e430:	f000 f852 	bl	800e4d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e434:	4b06      	ldr	r3, [pc, #24]	; (800e450 <prvIdleTask+0x28>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2b01      	cmp	r3, #1
 800e43a:	d9f9      	bls.n	800e430 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e43c:	4b05      	ldr	r3, [pc, #20]	; (800e454 <prvIdleTask+0x2c>)
 800e43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e442:	601a      	str	r2, [r3, #0]
 800e444:	f3bf 8f4f 	dsb	sy
 800e448:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e44c:	e7f0      	b.n	800e430 <prvIdleTask+0x8>
 800e44e:	bf00      	nop
 800e450:	200008d0 	.word	0x200008d0
 800e454:	e000ed04 	.word	0xe000ed04

0800e458 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e45e:	2300      	movs	r3, #0
 800e460:	607b      	str	r3, [r7, #4]
 800e462:	e00c      	b.n	800e47e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e464:	687a      	ldr	r2, [r7, #4]
 800e466:	4613      	mov	r3, r2
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	4413      	add	r3, r2
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	4a12      	ldr	r2, [pc, #72]	; (800e4b8 <prvInitialiseTaskLists+0x60>)
 800e470:	4413      	add	r3, r2
 800e472:	4618      	mov	r0, r3
 800e474:	f7fe faa0 	bl	800c9b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	3301      	adds	r3, #1
 800e47c:	607b      	str	r3, [r7, #4]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2b06      	cmp	r3, #6
 800e482:	d9ef      	bls.n	800e464 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e484:	480d      	ldr	r0, [pc, #52]	; (800e4bc <prvInitialiseTaskLists+0x64>)
 800e486:	f7fe fa97 	bl	800c9b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e48a:	480d      	ldr	r0, [pc, #52]	; (800e4c0 <prvInitialiseTaskLists+0x68>)
 800e48c:	f7fe fa94 	bl	800c9b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e490:	480c      	ldr	r0, [pc, #48]	; (800e4c4 <prvInitialiseTaskLists+0x6c>)
 800e492:	f7fe fa91 	bl	800c9b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e496:	480c      	ldr	r0, [pc, #48]	; (800e4c8 <prvInitialiseTaskLists+0x70>)
 800e498:	f7fe fa8e 	bl	800c9b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e49c:	480b      	ldr	r0, [pc, #44]	; (800e4cc <prvInitialiseTaskLists+0x74>)
 800e49e:	f7fe fa8b 	bl	800c9b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e4a2:	4b0b      	ldr	r3, [pc, #44]	; (800e4d0 <prvInitialiseTaskLists+0x78>)
 800e4a4:	4a05      	ldr	r2, [pc, #20]	; (800e4bc <prvInitialiseTaskLists+0x64>)
 800e4a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e4a8:	4b0a      	ldr	r3, [pc, #40]	; (800e4d4 <prvInitialiseTaskLists+0x7c>)
 800e4aa:	4a05      	ldr	r2, [pc, #20]	; (800e4c0 <prvInitialiseTaskLists+0x68>)
 800e4ac:	601a      	str	r2, [r3, #0]
}
 800e4ae:	bf00      	nop
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	200008d0 	.word	0x200008d0
 800e4bc:	2000095c 	.word	0x2000095c
 800e4c0:	20000970 	.word	0x20000970
 800e4c4:	2000098c 	.word	0x2000098c
 800e4c8:	200009a0 	.word	0x200009a0
 800e4cc:	200009b8 	.word	0x200009b8
 800e4d0:	20000984 	.word	0x20000984
 800e4d4:	20000988 	.word	0x20000988

0800e4d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4de:	e019      	b.n	800e514 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e4e0:	f000 fef8 	bl	800f2d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4e4:	4b10      	ldr	r3, [pc, #64]	; (800e528 <prvCheckTasksWaitingTermination+0x50>)
 800e4e6:	68db      	ldr	r3, [r3, #12]
 800e4e8:	68db      	ldr	r3, [r3, #12]
 800e4ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	3304      	adds	r3, #4
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7fe faeb 	bl	800cacc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e4f6:	4b0d      	ldr	r3, [pc, #52]	; (800e52c <prvCheckTasksWaitingTermination+0x54>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	3b01      	subs	r3, #1
 800e4fc:	4a0b      	ldr	r2, [pc, #44]	; (800e52c <prvCheckTasksWaitingTermination+0x54>)
 800e4fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e500:	4b0b      	ldr	r3, [pc, #44]	; (800e530 <prvCheckTasksWaitingTermination+0x58>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	3b01      	subs	r3, #1
 800e506:	4a0a      	ldr	r2, [pc, #40]	; (800e530 <prvCheckTasksWaitingTermination+0x58>)
 800e508:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e50a:	f000 ff13 	bl	800f334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 f810 	bl	800e534 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e514:	4b06      	ldr	r3, [pc, #24]	; (800e530 <prvCheckTasksWaitingTermination+0x58>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d1e1      	bne.n	800e4e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e51c:	bf00      	nop
 800e51e:	bf00      	nop
 800e520:	3708      	adds	r7, #8
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	200009a0 	.word	0x200009a0
 800e52c:	200009cc 	.word	0x200009cc
 800e530:	200009b4 	.word	0x200009b4

0800e534 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e542:	2b00      	cmp	r3, #0
 800e544:	d108      	bne.n	800e558 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e54a:	4618      	mov	r0, r3
 800e54c:	f001 f8b0 	bl	800f6b0 <vPortFree>
				vPortFree( pxTCB );
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f001 f8ad 	bl	800f6b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e556:	e018      	b.n	800e58a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e55e:	2b01      	cmp	r3, #1
 800e560:	d103      	bne.n	800e56a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f001 f8a4 	bl	800f6b0 <vPortFree>
	}
 800e568:	e00f      	b.n	800e58a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e570:	2b02      	cmp	r3, #2
 800e572:	d00a      	beq.n	800e58a <prvDeleteTCB+0x56>
	__asm volatile
 800e574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e578:	f383 8811 	msr	BASEPRI, r3
 800e57c:	f3bf 8f6f 	isb	sy
 800e580:	f3bf 8f4f 	dsb	sy
 800e584:	60fb      	str	r3, [r7, #12]
}
 800e586:	bf00      	nop
 800e588:	e7fe      	b.n	800e588 <prvDeleteTCB+0x54>
	}
 800e58a:	bf00      	nop
 800e58c:	3710      	adds	r7, #16
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
	...

0800e594 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e594:	b480      	push	{r7}
 800e596:	b083      	sub	sp, #12
 800e598:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e59a:	4b0c      	ldr	r3, [pc, #48]	; (800e5cc <prvResetNextTaskUnblockTime+0x38>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d104      	bne.n	800e5ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e5a4:	4b0a      	ldr	r3, [pc, #40]	; (800e5d0 <prvResetNextTaskUnblockTime+0x3c>)
 800e5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e5aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e5ac:	e008      	b.n	800e5c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5ae:	4b07      	ldr	r3, [pc, #28]	; (800e5cc <prvResetNextTaskUnblockTime+0x38>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	68db      	ldr	r3, [r3, #12]
 800e5b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	4a04      	ldr	r2, [pc, #16]	; (800e5d0 <prvResetNextTaskUnblockTime+0x3c>)
 800e5be:	6013      	str	r3, [r2, #0]
}
 800e5c0:	bf00      	nop
 800e5c2:	370c      	adds	r7, #12
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr
 800e5cc:	20000984 	.word	0x20000984
 800e5d0:	200009ec 	.word	0x200009ec

0800e5d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b083      	sub	sp, #12
 800e5d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e5da:	4b0b      	ldr	r3, [pc, #44]	; (800e608 <xTaskGetSchedulerState+0x34>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d102      	bne.n	800e5e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	607b      	str	r3, [r7, #4]
 800e5e6:	e008      	b.n	800e5fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5e8:	4b08      	ldr	r3, [pc, #32]	; (800e60c <xTaskGetSchedulerState+0x38>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d102      	bne.n	800e5f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e5f0:	2302      	movs	r3, #2
 800e5f2:	607b      	str	r3, [r7, #4]
 800e5f4:	e001      	b.n	800e5fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e5fa:	687b      	ldr	r3, [r7, #4]
	}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr
 800e608:	200009d8 	.word	0x200009d8
 800e60c:	200009f4 	.word	0x200009f4

0800e610 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e610:	b580      	push	{r7, lr}
 800e612:	b084      	sub	sp, #16
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e61c:	2300      	movs	r3, #0
 800e61e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d05e      	beq.n	800e6e4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e62a:	4b31      	ldr	r3, [pc, #196]	; (800e6f0 <xTaskPriorityInherit+0xe0>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e630:	429a      	cmp	r2, r3
 800e632:	d24e      	bcs.n	800e6d2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	699b      	ldr	r3, [r3, #24]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	db06      	blt.n	800e64a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e63c:	4b2c      	ldr	r3, [pc, #176]	; (800e6f0 <xTaskPriorityInherit+0xe0>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e642:	f1c3 0207 	rsb	r2, r3, #7
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	6959      	ldr	r1, [r3, #20]
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e652:	4613      	mov	r3, r2
 800e654:	009b      	lsls	r3, r3, #2
 800e656:	4413      	add	r3, r2
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	4a26      	ldr	r2, [pc, #152]	; (800e6f4 <xTaskPriorityInherit+0xe4>)
 800e65c:	4413      	add	r3, r2
 800e65e:	4299      	cmp	r1, r3
 800e660:	d12f      	bne.n	800e6c2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	3304      	adds	r3, #4
 800e666:	4618      	mov	r0, r3
 800e668:	f7fe fa30 	bl	800cacc <uxListRemove>
 800e66c:	4603      	mov	r3, r0
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d10a      	bne.n	800e688 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e676:	2201      	movs	r2, #1
 800e678:	fa02 f303 	lsl.w	r3, r2, r3
 800e67c:	43da      	mvns	r2, r3
 800e67e:	4b1e      	ldr	r3, [pc, #120]	; (800e6f8 <xTaskPriorityInherit+0xe8>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4013      	ands	r3, r2
 800e684:	4a1c      	ldr	r2, [pc, #112]	; (800e6f8 <xTaskPriorityInherit+0xe8>)
 800e686:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e688:	4b19      	ldr	r3, [pc, #100]	; (800e6f0 <xTaskPriorityInherit+0xe0>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e696:	2201      	movs	r2, #1
 800e698:	409a      	lsls	r2, r3
 800e69a:	4b17      	ldr	r3, [pc, #92]	; (800e6f8 <xTaskPriorityInherit+0xe8>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4313      	orrs	r3, r2
 800e6a0:	4a15      	ldr	r2, [pc, #84]	; (800e6f8 <xTaskPriorityInherit+0xe8>)
 800e6a2:	6013      	str	r3, [r2, #0]
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	009b      	lsls	r3, r3, #2
 800e6ac:	4413      	add	r3, r2
 800e6ae:	009b      	lsls	r3, r3, #2
 800e6b0:	4a10      	ldr	r2, [pc, #64]	; (800e6f4 <xTaskPriorityInherit+0xe4>)
 800e6b2:	441a      	add	r2, r3
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	3304      	adds	r3, #4
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	4610      	mov	r0, r2
 800e6bc:	f7fe f9a9 	bl	800ca12 <vListInsertEnd>
 800e6c0:	e004      	b.n	800e6cc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e6c2:	4b0b      	ldr	r3, [pc, #44]	; (800e6f0 <xTaskPriorityInherit+0xe0>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	60fb      	str	r3, [r7, #12]
 800e6d0:	e008      	b.n	800e6e4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e6d6:	4b06      	ldr	r3, [pc, #24]	; (800e6f0 <xTaskPriorityInherit+0xe0>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d201      	bcs.n	800e6e4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
	}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3710      	adds	r7, #16
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	200008cc 	.word	0x200008cc
 800e6f4:	200008d0 	.word	0x200008d0
 800e6f8:	200009d4 	.word	0x200009d4

0800e6fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b086      	sub	sp, #24
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e708:	2300      	movs	r3, #0
 800e70a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d06e      	beq.n	800e7f0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e712:	4b3a      	ldr	r3, [pc, #232]	; (800e7fc <xTaskPriorityDisinherit+0x100>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	693a      	ldr	r2, [r7, #16]
 800e718:	429a      	cmp	r2, r3
 800e71a:	d00a      	beq.n	800e732 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e720:	f383 8811 	msr	BASEPRI, r3
 800e724:	f3bf 8f6f 	isb	sy
 800e728:	f3bf 8f4f 	dsb	sy
 800e72c:	60fb      	str	r3, [r7, #12]
}
 800e72e:	bf00      	nop
 800e730:	e7fe      	b.n	800e730 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e736:	2b00      	cmp	r3, #0
 800e738:	d10a      	bne.n	800e750 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73e:	f383 8811 	msr	BASEPRI, r3
 800e742:	f3bf 8f6f 	isb	sy
 800e746:	f3bf 8f4f 	dsb	sy
 800e74a:	60bb      	str	r3, [r7, #8]
}
 800e74c:	bf00      	nop
 800e74e:	e7fe      	b.n	800e74e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e754:	1e5a      	subs	r2, r3, #1
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e762:	429a      	cmp	r2, r3
 800e764:	d044      	beq.n	800e7f0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d140      	bne.n	800e7f0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	3304      	adds	r3, #4
 800e772:	4618      	mov	r0, r3
 800e774:	f7fe f9aa 	bl	800cacc <uxListRemove>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d115      	bne.n	800e7aa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e782:	491f      	ldr	r1, [pc, #124]	; (800e800 <xTaskPriorityDisinherit+0x104>)
 800e784:	4613      	mov	r3, r2
 800e786:	009b      	lsls	r3, r3, #2
 800e788:	4413      	add	r3, r2
 800e78a:	009b      	lsls	r3, r3, #2
 800e78c:	440b      	add	r3, r1
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d10a      	bne.n	800e7aa <xTaskPriorityDisinherit+0xae>
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e798:	2201      	movs	r2, #1
 800e79a:	fa02 f303 	lsl.w	r3, r2, r3
 800e79e:	43da      	mvns	r2, r3
 800e7a0:	4b18      	ldr	r3, [pc, #96]	; (800e804 <xTaskPriorityDisinherit+0x108>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	4013      	ands	r3, r2
 800e7a6:	4a17      	ldr	r2, [pc, #92]	; (800e804 <xTaskPriorityDisinherit+0x108>)
 800e7a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b6:	f1c3 0207 	rsb	r2, r3, #7
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	409a      	lsls	r2, r3
 800e7c6:	4b0f      	ldr	r3, [pc, #60]	; (800e804 <xTaskPriorityDisinherit+0x108>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	4a0d      	ldr	r2, [pc, #52]	; (800e804 <xTaskPriorityDisinherit+0x108>)
 800e7ce:	6013      	str	r3, [r2, #0]
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	009b      	lsls	r3, r3, #2
 800e7d8:	4413      	add	r3, r2
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	4a08      	ldr	r2, [pc, #32]	; (800e800 <xTaskPriorityDisinherit+0x104>)
 800e7de:	441a      	add	r2, r3
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	3304      	adds	r3, #4
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	4610      	mov	r0, r2
 800e7e8:	f7fe f913 	bl	800ca12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e7f0:	697b      	ldr	r3, [r7, #20]
	}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3718      	adds	r7, #24
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	200008cc 	.word	0x200008cc
 800e800:	200008d0 	.word	0x200008d0
 800e804:	200009d4 	.word	0x200009d4

0800e808 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b088      	sub	sp, #32
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e816:	2301      	movs	r3, #1
 800e818:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d077      	beq.n	800e910 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e820:	69bb      	ldr	r3, [r7, #24]
 800e822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e824:	2b00      	cmp	r3, #0
 800e826:	d10a      	bne.n	800e83e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e82c:	f383 8811 	msr	BASEPRI, r3
 800e830:	f3bf 8f6f 	isb	sy
 800e834:	f3bf 8f4f 	dsb	sy
 800e838:	60fb      	str	r3, [r7, #12]
}
 800e83a:	bf00      	nop
 800e83c:	e7fe      	b.n	800e83c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e83e:	69bb      	ldr	r3, [r7, #24]
 800e840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e842:	683a      	ldr	r2, [r7, #0]
 800e844:	429a      	cmp	r2, r3
 800e846:	d902      	bls.n	800e84e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	61fb      	str	r3, [r7, #28]
 800e84c:	e002      	b.n	800e854 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e84e:	69bb      	ldr	r3, [r7, #24]
 800e850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e852:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e858:	69fa      	ldr	r2, [r7, #28]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d058      	beq.n	800e910 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e862:	697a      	ldr	r2, [r7, #20]
 800e864:	429a      	cmp	r2, r3
 800e866:	d153      	bne.n	800e910 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e868:	4b2b      	ldr	r3, [pc, #172]	; (800e918 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	69ba      	ldr	r2, [r7, #24]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d10a      	bne.n	800e888 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e876:	f383 8811 	msr	BASEPRI, r3
 800e87a:	f3bf 8f6f 	isb	sy
 800e87e:	f3bf 8f4f 	dsb	sy
 800e882:	60bb      	str	r3, [r7, #8]
}
 800e884:	bf00      	nop
 800e886:	e7fe      	b.n	800e886 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e88c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e88e:	69bb      	ldr	r3, [r7, #24]
 800e890:	69fa      	ldr	r2, [r7, #28]
 800e892:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e894:	69bb      	ldr	r3, [r7, #24]
 800e896:	699b      	ldr	r3, [r3, #24]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	db04      	blt.n	800e8a6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e89c:	69fb      	ldr	r3, [r7, #28]
 800e89e:	f1c3 0207 	rsb	r2, r3, #7
 800e8a2:	69bb      	ldr	r3, [r7, #24]
 800e8a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	6959      	ldr	r1, [r3, #20]
 800e8aa:	693a      	ldr	r2, [r7, #16]
 800e8ac:	4613      	mov	r3, r2
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	4413      	add	r3, r2
 800e8b2:	009b      	lsls	r3, r3, #2
 800e8b4:	4a19      	ldr	r2, [pc, #100]	; (800e91c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e8b6:	4413      	add	r3, r2
 800e8b8:	4299      	cmp	r1, r3
 800e8ba:	d129      	bne.n	800e910 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	3304      	adds	r3, #4
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fe f903 	bl	800cacc <uxListRemove>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d10a      	bne.n	800e8e2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	fa02 f303 	lsl.w	r3, r2, r3
 800e8d6:	43da      	mvns	r2, r3
 800e8d8:	4b11      	ldr	r3, [pc, #68]	; (800e920 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	4013      	ands	r3, r2
 800e8de:	4a10      	ldr	r2, [pc, #64]	; (800e920 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e8e0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e8e2:	69bb      	ldr	r3, [r7, #24]
 800e8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	409a      	lsls	r2, r3
 800e8ea:	4b0d      	ldr	r3, [pc, #52]	; (800e920 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	4313      	orrs	r3, r2
 800e8f0:	4a0b      	ldr	r2, [pc, #44]	; (800e920 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e8f2:	6013      	str	r3, [r2, #0]
 800e8f4:	69bb      	ldr	r3, [r7, #24]
 800e8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	009b      	lsls	r3, r3, #2
 800e8fc:	4413      	add	r3, r2
 800e8fe:	009b      	lsls	r3, r3, #2
 800e900:	4a06      	ldr	r2, [pc, #24]	; (800e91c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e902:	441a      	add	r2, r3
 800e904:	69bb      	ldr	r3, [r7, #24]
 800e906:	3304      	adds	r3, #4
 800e908:	4619      	mov	r1, r3
 800e90a:	4610      	mov	r0, r2
 800e90c:	f7fe f881 	bl	800ca12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e910:	bf00      	nop
 800e912:	3720      	adds	r7, #32
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}
 800e918:	200008cc 	.word	0x200008cc
 800e91c:	200008d0 	.word	0x200008d0
 800e920:	200009d4 	.word	0x200009d4

0800e924 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e924:	b480      	push	{r7}
 800e926:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e928:	4b07      	ldr	r3, [pc, #28]	; (800e948 <pvTaskIncrementMutexHeldCount+0x24>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d004      	beq.n	800e93a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e930:	4b05      	ldr	r3, [pc, #20]	; (800e948 <pvTaskIncrementMutexHeldCount+0x24>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e936:	3201      	adds	r2, #1
 800e938:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e93a:	4b03      	ldr	r3, [pc, #12]	; (800e948 <pvTaskIncrementMutexHeldCount+0x24>)
 800e93c:	681b      	ldr	r3, [r3, #0]
	}
 800e93e:	4618      	mov	r0, r3
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr
 800e948:	200008cc 	.word	0x200008cc

0800e94c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b084      	sub	sp, #16
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e956:	4b29      	ldr	r3, [pc, #164]	; (800e9fc <prvAddCurrentTaskToDelayedList+0xb0>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e95c:	4b28      	ldr	r3, [pc, #160]	; (800ea00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	3304      	adds	r3, #4
 800e962:	4618      	mov	r0, r3
 800e964:	f7fe f8b2 	bl	800cacc <uxListRemove>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d10b      	bne.n	800e986 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e96e:	4b24      	ldr	r3, [pc, #144]	; (800ea00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e974:	2201      	movs	r2, #1
 800e976:	fa02 f303 	lsl.w	r3, r2, r3
 800e97a:	43da      	mvns	r2, r3
 800e97c:	4b21      	ldr	r3, [pc, #132]	; (800ea04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4013      	ands	r3, r2
 800e982:	4a20      	ldr	r2, [pc, #128]	; (800ea04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e984:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e98c:	d10a      	bne.n	800e9a4 <prvAddCurrentTaskToDelayedList+0x58>
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d007      	beq.n	800e9a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e994:	4b1a      	ldr	r3, [pc, #104]	; (800ea00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	3304      	adds	r3, #4
 800e99a:	4619      	mov	r1, r3
 800e99c:	481a      	ldr	r0, [pc, #104]	; (800ea08 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e99e:	f7fe f838 	bl	800ca12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e9a2:	e026      	b.n	800e9f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e9a4:	68fa      	ldr	r2, [r7, #12]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e9ac:	4b14      	ldr	r3, [pc, #80]	; (800ea00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	68ba      	ldr	r2, [r7, #8]
 800e9b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e9b4:	68ba      	ldr	r2, [r7, #8]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d209      	bcs.n	800e9d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9bc:	4b13      	ldr	r3, [pc, #76]	; (800ea0c <prvAddCurrentTaskToDelayedList+0xc0>)
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	4b0f      	ldr	r3, [pc, #60]	; (800ea00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	3304      	adds	r3, #4
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	4610      	mov	r0, r2
 800e9ca:	f7fe f846 	bl	800ca5a <vListInsert>
}
 800e9ce:	e010      	b.n	800e9f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9d0:	4b0f      	ldr	r3, [pc, #60]	; (800ea10 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	4b0a      	ldr	r3, [pc, #40]	; (800ea00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	3304      	adds	r3, #4
 800e9da:	4619      	mov	r1, r3
 800e9dc:	4610      	mov	r0, r2
 800e9de:	f7fe f83c 	bl	800ca5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e9e2:	4b0c      	ldr	r3, [pc, #48]	; (800ea14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	68ba      	ldr	r2, [r7, #8]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d202      	bcs.n	800e9f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e9ec:	4a09      	ldr	r2, [pc, #36]	; (800ea14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	6013      	str	r3, [r2, #0]
}
 800e9f2:	bf00      	nop
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	200009d0 	.word	0x200009d0
 800ea00:	200008cc 	.word	0x200008cc
 800ea04:	200009d4 	.word	0x200009d4
 800ea08:	200009b8 	.word	0x200009b8
 800ea0c:	20000988 	.word	0x20000988
 800ea10:	20000984 	.word	0x20000984
 800ea14:	200009ec 	.word	0x200009ec

0800ea18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b08a      	sub	sp, #40	; 0x28
 800ea1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ea22:	f000 faeb 	bl	800effc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ea26:	4b1c      	ldr	r3, [pc, #112]	; (800ea98 <xTimerCreateTimerTask+0x80>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d021      	beq.n	800ea72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ea32:	2300      	movs	r3, #0
 800ea34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ea36:	1d3a      	adds	r2, r7, #4
 800ea38:	f107 0108 	add.w	r1, r7, #8
 800ea3c:	f107 030c 	add.w	r3, r7, #12
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7f3 fde7 	bl	8002614 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ea46:	6879      	ldr	r1, [r7, #4]
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	68fa      	ldr	r2, [r7, #12]
 800ea4c:	9202      	str	r2, [sp, #8]
 800ea4e:	9301      	str	r3, [sp, #4]
 800ea50:	2302      	movs	r3, #2
 800ea52:	9300      	str	r3, [sp, #0]
 800ea54:	2300      	movs	r3, #0
 800ea56:	460a      	mov	r2, r1
 800ea58:	4910      	ldr	r1, [pc, #64]	; (800ea9c <xTimerCreateTimerTask+0x84>)
 800ea5a:	4811      	ldr	r0, [pc, #68]	; (800eaa0 <xTimerCreateTimerTask+0x88>)
 800ea5c:	f7fe ffb2 	bl	800d9c4 <xTaskCreateStatic>
 800ea60:	4603      	mov	r3, r0
 800ea62:	4a10      	ldr	r2, [pc, #64]	; (800eaa4 <xTimerCreateTimerTask+0x8c>)
 800ea64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ea66:	4b0f      	ldr	r3, [pc, #60]	; (800eaa4 <xTimerCreateTimerTask+0x8c>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d001      	beq.n	800ea72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ea6e:	2301      	movs	r3, #1
 800ea70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d10a      	bne.n	800ea8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ea78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea7c:	f383 8811 	msr	BASEPRI, r3
 800ea80:	f3bf 8f6f 	isb	sy
 800ea84:	f3bf 8f4f 	dsb	sy
 800ea88:	613b      	str	r3, [r7, #16]
}
 800ea8a:	bf00      	nop
 800ea8c:	e7fe      	b.n	800ea8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ea8e:	697b      	ldr	r3, [r7, #20]
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3718      	adds	r7, #24
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	20000a28 	.word	0x20000a28
 800ea9c:	080143f0 	.word	0x080143f0
 800eaa0:	0800ebdd 	.word	0x0800ebdd
 800eaa4:	20000a2c 	.word	0x20000a2c

0800eaa8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b08a      	sub	sp, #40	; 0x28
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	607a      	str	r2, [r7, #4]
 800eab4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800eab6:	2300      	movs	r3, #0
 800eab8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d10a      	bne.n	800ead6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800eac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac4:	f383 8811 	msr	BASEPRI, r3
 800eac8:	f3bf 8f6f 	isb	sy
 800eacc:	f3bf 8f4f 	dsb	sy
 800ead0:	623b      	str	r3, [r7, #32]
}
 800ead2:	bf00      	nop
 800ead4:	e7fe      	b.n	800ead4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ead6:	4b1a      	ldr	r3, [pc, #104]	; (800eb40 <xTimerGenericCommand+0x98>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d02a      	beq.n	800eb34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	2b05      	cmp	r3, #5
 800eaee:	dc18      	bgt.n	800eb22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eaf0:	f7ff fd70 	bl	800e5d4 <xTaskGetSchedulerState>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b02      	cmp	r3, #2
 800eaf8:	d109      	bne.n	800eb0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eafa:	4b11      	ldr	r3, [pc, #68]	; (800eb40 <xTimerGenericCommand+0x98>)
 800eafc:	6818      	ldr	r0, [r3, #0]
 800eafe:	f107 0114 	add.w	r1, r7, #20
 800eb02:	2300      	movs	r3, #0
 800eb04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb06:	f7fe f945 	bl	800cd94 <xQueueGenericSend>
 800eb0a:	6278      	str	r0, [r7, #36]	; 0x24
 800eb0c:	e012      	b.n	800eb34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eb0e:	4b0c      	ldr	r3, [pc, #48]	; (800eb40 <xTimerGenericCommand+0x98>)
 800eb10:	6818      	ldr	r0, [r3, #0]
 800eb12:	f107 0114 	add.w	r1, r7, #20
 800eb16:	2300      	movs	r3, #0
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f7fe f93b 	bl	800cd94 <xQueueGenericSend>
 800eb1e:	6278      	str	r0, [r7, #36]	; 0x24
 800eb20:	e008      	b.n	800eb34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eb22:	4b07      	ldr	r3, [pc, #28]	; (800eb40 <xTimerGenericCommand+0x98>)
 800eb24:	6818      	ldr	r0, [r3, #0]
 800eb26:	f107 0114 	add.w	r1, r7, #20
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	683a      	ldr	r2, [r7, #0]
 800eb2e:	f7fe fa2f 	bl	800cf90 <xQueueGenericSendFromISR>
 800eb32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3728      	adds	r7, #40	; 0x28
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	bf00      	nop
 800eb40:	20000a28 	.word	0x20000a28

0800eb44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b088      	sub	sp, #32
 800eb48:	af02      	add	r7, sp, #8
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb4e:	4b22      	ldr	r3, [pc, #136]	; (800ebd8 <prvProcessExpiredTimer+0x94>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	68db      	ldr	r3, [r3, #12]
 800eb54:	68db      	ldr	r3, [r3, #12]
 800eb56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	3304      	adds	r3, #4
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7fd ffb5 	bl	800cacc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eb68:	f003 0304 	and.w	r3, r3, #4
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d022      	beq.n	800ebb6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	699a      	ldr	r2, [r3, #24]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	18d1      	adds	r1, r2, r3
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	683a      	ldr	r2, [r7, #0]
 800eb7c:	6978      	ldr	r0, [r7, #20]
 800eb7e:	f000 f8d1 	bl	800ed24 <prvInsertTimerInActiveList>
 800eb82:	4603      	mov	r3, r0
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d01f      	beq.n	800ebc8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb88:	2300      	movs	r3, #0
 800eb8a:	9300      	str	r3, [sp, #0]
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	687a      	ldr	r2, [r7, #4]
 800eb90:	2100      	movs	r1, #0
 800eb92:	6978      	ldr	r0, [r7, #20]
 800eb94:	f7ff ff88 	bl	800eaa8 <xTimerGenericCommand>
 800eb98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d113      	bne.n	800ebc8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800eba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba4:	f383 8811 	msr	BASEPRI, r3
 800eba8:	f3bf 8f6f 	isb	sy
 800ebac:	f3bf 8f4f 	dsb	sy
 800ebb0:	60fb      	str	r3, [r7, #12]
}
 800ebb2:	bf00      	nop
 800ebb4:	e7fe      	b.n	800ebb4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ebbc:	f023 0301 	bic.w	r3, r3, #1
 800ebc0:	b2da      	uxtb	r2, r3
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	6a1b      	ldr	r3, [r3, #32]
 800ebcc:	6978      	ldr	r0, [r7, #20]
 800ebce:	4798      	blx	r3
}
 800ebd0:	bf00      	nop
 800ebd2:	3718      	adds	r7, #24
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	20000a20 	.word	0x20000a20

0800ebdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ebe4:	f107 0308 	add.w	r3, r7, #8
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f000 f857 	bl	800ec9c <prvGetNextExpireTime>
 800ebee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	68f8      	ldr	r0, [r7, #12]
 800ebf6:	f000 f803 	bl	800ec00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ebfa:	f000 f8d5 	bl	800eda8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ebfe:	e7f1      	b.n	800ebe4 <prvTimerTask+0x8>

0800ec00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b084      	sub	sp, #16
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ec0a:	f7ff f909 	bl	800de20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec0e:	f107 0308 	add.w	r3, r7, #8
 800ec12:	4618      	mov	r0, r3
 800ec14:	f000 f866 	bl	800ece4 <prvSampleTimeNow>
 800ec18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d130      	bne.n	800ec82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d10a      	bne.n	800ec3c <prvProcessTimerOrBlockTask+0x3c>
 800ec26:	687a      	ldr	r2, [r7, #4]
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d806      	bhi.n	800ec3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ec2e:	f7ff f905 	bl	800de3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ec32:	68f9      	ldr	r1, [r7, #12]
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f7ff ff85 	bl	800eb44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ec3a:	e024      	b.n	800ec86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d008      	beq.n	800ec54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ec42:	4b13      	ldr	r3, [pc, #76]	; (800ec90 <prvProcessTimerOrBlockTask+0x90>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d101      	bne.n	800ec50 <prvProcessTimerOrBlockTask+0x50>
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	e000      	b.n	800ec52 <prvProcessTimerOrBlockTask+0x52>
 800ec50:	2300      	movs	r3, #0
 800ec52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ec54:	4b0f      	ldr	r3, [pc, #60]	; (800ec94 <prvProcessTimerOrBlockTask+0x94>)
 800ec56:	6818      	ldr	r0, [r3, #0]
 800ec58:	687a      	ldr	r2, [r7, #4]
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	1ad3      	subs	r3, r2, r3
 800ec5e:	683a      	ldr	r2, [r7, #0]
 800ec60:	4619      	mov	r1, r3
 800ec62:	f7fe fe7b 	bl	800d95c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ec66:	f7ff f8e9 	bl	800de3c <xTaskResumeAll>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d10a      	bne.n	800ec86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ec70:	4b09      	ldr	r3, [pc, #36]	; (800ec98 <prvProcessTimerOrBlockTask+0x98>)
 800ec72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec76:	601a      	str	r2, [r3, #0]
 800ec78:	f3bf 8f4f 	dsb	sy
 800ec7c:	f3bf 8f6f 	isb	sy
}
 800ec80:	e001      	b.n	800ec86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ec82:	f7ff f8db 	bl	800de3c <xTaskResumeAll>
}
 800ec86:	bf00      	nop
 800ec88:	3710      	adds	r7, #16
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	20000a24 	.word	0x20000a24
 800ec94:	20000a28 	.word	0x20000a28
 800ec98:	e000ed04 	.word	0xe000ed04

0800ec9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b085      	sub	sp, #20
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eca4:	4b0e      	ldr	r3, [pc, #56]	; (800ece0 <prvGetNextExpireTime+0x44>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d101      	bne.n	800ecb2 <prvGetNextExpireTime+0x16>
 800ecae:	2201      	movs	r2, #1
 800ecb0:	e000      	b.n	800ecb4 <prvGetNextExpireTime+0x18>
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d105      	bne.n	800eccc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ecc0:	4b07      	ldr	r3, [pc, #28]	; (800ece0 <prvGetNextExpireTime+0x44>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	68db      	ldr	r3, [r3, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	60fb      	str	r3, [r7, #12]
 800ecca:	e001      	b.n	800ecd0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eccc:	2300      	movs	r3, #0
 800ecce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3714      	adds	r7, #20
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecdc:	4770      	bx	lr
 800ecde:	bf00      	nop
 800ece0:	20000a20 	.word	0x20000a20

0800ece4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ecec:	f7ff f942 	bl	800df74 <xTaskGetTickCount>
 800ecf0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ecf2:	4b0b      	ldr	r3, [pc, #44]	; (800ed20 <prvSampleTimeNow+0x3c>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	68fa      	ldr	r2, [r7, #12]
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d205      	bcs.n	800ed08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ecfc:	f000 f91a 	bl	800ef34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2201      	movs	r2, #1
 800ed04:	601a      	str	r2, [r3, #0]
 800ed06:	e002      	b.n	800ed0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ed0e:	4a04      	ldr	r2, [pc, #16]	; (800ed20 <prvSampleTimeNow+0x3c>)
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ed14:	68fb      	ldr	r3, [r7, #12]
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3710      	adds	r7, #16
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}
 800ed1e:	bf00      	nop
 800ed20:	20000a30 	.word	0x20000a30

0800ed24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b086      	sub	sp, #24
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	60b9      	str	r1, [r7, #8]
 800ed2e:	607a      	str	r2, [r7, #4]
 800ed30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ed32:	2300      	movs	r3, #0
 800ed34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	68ba      	ldr	r2, [r7, #8]
 800ed3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	68fa      	ldr	r2, [r7, #12]
 800ed40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ed42:	68ba      	ldr	r2, [r7, #8]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d812      	bhi.n	800ed70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed4a:	687a      	ldr	r2, [r7, #4]
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	1ad2      	subs	r2, r2, r3
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	699b      	ldr	r3, [r3, #24]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d302      	bcc.n	800ed5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	617b      	str	r3, [r7, #20]
 800ed5c:	e01b      	b.n	800ed96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ed5e:	4b10      	ldr	r3, [pc, #64]	; (800eda0 <prvInsertTimerInActiveList+0x7c>)
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	3304      	adds	r3, #4
 800ed66:	4619      	mov	r1, r3
 800ed68:	4610      	mov	r0, r2
 800ed6a:	f7fd fe76 	bl	800ca5a <vListInsert>
 800ed6e:	e012      	b.n	800ed96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d206      	bcs.n	800ed86 <prvInsertTimerInActiveList+0x62>
 800ed78:	68ba      	ldr	r2, [r7, #8]
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d302      	bcc.n	800ed86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ed80:	2301      	movs	r3, #1
 800ed82:	617b      	str	r3, [r7, #20]
 800ed84:	e007      	b.n	800ed96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed86:	4b07      	ldr	r3, [pc, #28]	; (800eda4 <prvInsertTimerInActiveList+0x80>)
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	3304      	adds	r3, #4
 800ed8e:	4619      	mov	r1, r3
 800ed90:	4610      	mov	r0, r2
 800ed92:	f7fd fe62 	bl	800ca5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ed96:	697b      	ldr	r3, [r7, #20]
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3718      	adds	r7, #24
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	20000a24 	.word	0x20000a24
 800eda4:	20000a20 	.word	0x20000a20

0800eda8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b08c      	sub	sp, #48	; 0x30
 800edac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800edae:	e0ae      	b.n	800ef0e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	f2c0 80aa 	blt.w	800ef0c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800edbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbe:	695b      	ldr	r3, [r3, #20]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d004      	beq.n	800edce <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800edc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc6:	3304      	adds	r3, #4
 800edc8:	4618      	mov	r0, r3
 800edca:	f7fd fe7f 	bl	800cacc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800edce:	1d3b      	adds	r3, r7, #4
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7ff ff87 	bl	800ece4 <prvSampleTimeNow>
 800edd6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	2b09      	cmp	r3, #9
 800eddc:	f200 8097 	bhi.w	800ef0e <prvProcessReceivedCommands+0x166>
 800ede0:	a201      	add	r2, pc, #4	; (adr r2, 800ede8 <prvProcessReceivedCommands+0x40>)
 800ede2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ede6:	bf00      	nop
 800ede8:	0800ee11 	.word	0x0800ee11
 800edec:	0800ee11 	.word	0x0800ee11
 800edf0:	0800ee11 	.word	0x0800ee11
 800edf4:	0800ee85 	.word	0x0800ee85
 800edf8:	0800ee99 	.word	0x0800ee99
 800edfc:	0800eee3 	.word	0x0800eee3
 800ee00:	0800ee11 	.word	0x0800ee11
 800ee04:	0800ee11 	.word	0x0800ee11
 800ee08:	0800ee85 	.word	0x0800ee85
 800ee0c:	0800ee99 	.word	0x0800ee99
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ee16:	f043 0301 	orr.w	r3, r3, #1
 800ee1a:	b2da      	uxtb	r2, r3
 800ee1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ee22:	68fa      	ldr	r2, [r7, #12]
 800ee24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee26:	699b      	ldr	r3, [r3, #24]
 800ee28:	18d1      	adds	r1, r2, r3
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	6a3a      	ldr	r2, [r7, #32]
 800ee2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee30:	f7ff ff78 	bl	800ed24 <prvInsertTimerInActiveList>
 800ee34:	4603      	mov	r3, r0
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d069      	beq.n	800ef0e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3c:	6a1b      	ldr	r3, [r3, #32]
 800ee3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ee48:	f003 0304 	and.w	r3, r3, #4
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d05e      	beq.n	800ef0e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ee50:	68fa      	ldr	r2, [r7, #12]
 800ee52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee54:	699b      	ldr	r3, [r3, #24]
 800ee56:	441a      	add	r2, r3
 800ee58:	2300      	movs	r3, #0
 800ee5a:	9300      	str	r3, [sp, #0]
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	2100      	movs	r1, #0
 800ee60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee62:	f7ff fe21 	bl	800eaa8 <xTimerGenericCommand>
 800ee66:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800ee68:	69fb      	ldr	r3, [r7, #28]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d14f      	bne.n	800ef0e <prvProcessReceivedCommands+0x166>
	__asm volatile
 800ee6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee72:	f383 8811 	msr	BASEPRI, r3
 800ee76:	f3bf 8f6f 	isb	sy
 800ee7a:	f3bf 8f4f 	dsb	sy
 800ee7e:	61bb      	str	r3, [r7, #24]
}
 800ee80:	bf00      	nop
 800ee82:	e7fe      	b.n	800ee82 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ee8a:	f023 0301 	bic.w	r3, r3, #1
 800ee8e:	b2da      	uxtb	r2, r3
 800ee90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800ee96:	e03a      	b.n	800ef0e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ee9e:	f043 0301 	orr.w	r3, r3, #1
 800eea2:	b2da      	uxtb	r2, r3
 800eea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eeaa:	68fa      	ldr	r2, [r7, #12]
 800eeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb2:	699b      	ldr	r3, [r3, #24]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d10a      	bne.n	800eece <prvProcessReceivedCommands+0x126>
	__asm volatile
 800eeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eebc:	f383 8811 	msr	BASEPRI, r3
 800eec0:	f3bf 8f6f 	isb	sy
 800eec4:	f3bf 8f4f 	dsb	sy
 800eec8:	617b      	str	r3, [r7, #20]
}
 800eeca:	bf00      	nop
 800eecc:	e7fe      	b.n	800eecc <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed0:	699a      	ldr	r2, [r3, #24]
 800eed2:	6a3b      	ldr	r3, [r7, #32]
 800eed4:	18d1      	adds	r1, r2, r3
 800eed6:	6a3b      	ldr	r3, [r7, #32]
 800eed8:	6a3a      	ldr	r2, [r7, #32]
 800eeda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eedc:	f7ff ff22 	bl	800ed24 <prvInsertTimerInActiveList>
					break;
 800eee0:	e015      	b.n	800ef0e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eee8:	f003 0302 	and.w	r3, r3, #2
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d103      	bne.n	800eef8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800eef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eef2:	f000 fbdd 	bl	800f6b0 <vPortFree>
 800eef6:	e00a      	b.n	800ef0e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eefe:	f023 0301 	bic.w	r3, r3, #1
 800ef02:	b2da      	uxtb	r2, r3
 800ef04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ef0a:	e000      	b.n	800ef0e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ef0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef0e:	4b08      	ldr	r3, [pc, #32]	; (800ef30 <prvProcessReceivedCommands+0x188>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f107 0108 	add.w	r1, r7, #8
 800ef16:	2200      	movs	r2, #0
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7fe f961 	bl	800d1e0 <xQueueReceive>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	f47f af45 	bne.w	800edb0 <prvProcessReceivedCommands+0x8>
	}
}
 800ef26:	bf00      	nop
 800ef28:	bf00      	nop
 800ef2a:	3728      	adds	r7, #40	; 0x28
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	20000a28 	.word	0x20000a28

0800ef34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b088      	sub	sp, #32
 800ef38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef3a:	e048      	b.n	800efce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef3c:	4b2d      	ldr	r3, [pc, #180]	; (800eff4 <prvSwitchTimerLists+0xc0>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	68db      	ldr	r3, [r3, #12]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef46:	4b2b      	ldr	r3, [pc, #172]	; (800eff4 <prvSwitchTimerLists+0xc0>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	68db      	ldr	r3, [r3, #12]
 800ef4c:	68db      	ldr	r3, [r3, #12]
 800ef4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	3304      	adds	r3, #4
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7fd fdb9 	bl	800cacc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	6a1b      	ldr	r3, [r3, #32]
 800ef5e:	68f8      	ldr	r0, [r7, #12]
 800ef60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ef68:	f003 0304 	and.w	r3, r3, #4
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d02e      	beq.n	800efce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	699b      	ldr	r3, [r3, #24]
 800ef74:	693a      	ldr	r2, [r7, #16]
 800ef76:	4413      	add	r3, r2
 800ef78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ef7a:	68ba      	ldr	r2, [r7, #8]
 800ef7c:	693b      	ldr	r3, [r7, #16]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d90e      	bls.n	800efa0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	68ba      	ldr	r2, [r7, #8]
 800ef86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	68fa      	ldr	r2, [r7, #12]
 800ef8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef8e:	4b19      	ldr	r3, [pc, #100]	; (800eff4 <prvSwitchTimerLists+0xc0>)
 800ef90:	681a      	ldr	r2, [r3, #0]
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	3304      	adds	r3, #4
 800ef96:	4619      	mov	r1, r3
 800ef98:	4610      	mov	r0, r2
 800ef9a:	f7fd fd5e 	bl	800ca5a <vListInsert>
 800ef9e:	e016      	b.n	800efce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800efa0:	2300      	movs	r3, #0
 800efa2:	9300      	str	r3, [sp, #0]
 800efa4:	2300      	movs	r3, #0
 800efa6:	693a      	ldr	r2, [r7, #16]
 800efa8:	2100      	movs	r1, #0
 800efaa:	68f8      	ldr	r0, [r7, #12]
 800efac:	f7ff fd7c 	bl	800eaa8 <xTimerGenericCommand>
 800efb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d10a      	bne.n	800efce <prvSwitchTimerLists+0x9a>
	__asm volatile
 800efb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efbc:	f383 8811 	msr	BASEPRI, r3
 800efc0:	f3bf 8f6f 	isb	sy
 800efc4:	f3bf 8f4f 	dsb	sy
 800efc8:	603b      	str	r3, [r7, #0]
}
 800efca:	bf00      	nop
 800efcc:	e7fe      	b.n	800efcc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efce:	4b09      	ldr	r3, [pc, #36]	; (800eff4 <prvSwitchTimerLists+0xc0>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d1b1      	bne.n	800ef3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800efd8:	4b06      	ldr	r3, [pc, #24]	; (800eff4 <prvSwitchTimerLists+0xc0>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800efde:	4b06      	ldr	r3, [pc, #24]	; (800eff8 <prvSwitchTimerLists+0xc4>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	4a04      	ldr	r2, [pc, #16]	; (800eff4 <prvSwitchTimerLists+0xc0>)
 800efe4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800efe6:	4a04      	ldr	r2, [pc, #16]	; (800eff8 <prvSwitchTimerLists+0xc4>)
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	6013      	str	r3, [r2, #0]
}
 800efec:	bf00      	nop
 800efee:	3718      	adds	r7, #24
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	20000a20 	.word	0x20000a20
 800eff8:	20000a24 	.word	0x20000a24

0800effc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f002:	f000 f967 	bl	800f2d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f006:	4b15      	ldr	r3, [pc, #84]	; (800f05c <prvCheckForValidListAndQueue+0x60>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d120      	bne.n	800f050 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f00e:	4814      	ldr	r0, [pc, #80]	; (800f060 <prvCheckForValidListAndQueue+0x64>)
 800f010:	f7fd fcd2 	bl	800c9b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f014:	4813      	ldr	r0, [pc, #76]	; (800f064 <prvCheckForValidListAndQueue+0x68>)
 800f016:	f7fd fccf 	bl	800c9b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f01a:	4b13      	ldr	r3, [pc, #76]	; (800f068 <prvCheckForValidListAndQueue+0x6c>)
 800f01c:	4a10      	ldr	r2, [pc, #64]	; (800f060 <prvCheckForValidListAndQueue+0x64>)
 800f01e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f020:	4b12      	ldr	r3, [pc, #72]	; (800f06c <prvCheckForValidListAndQueue+0x70>)
 800f022:	4a10      	ldr	r2, [pc, #64]	; (800f064 <prvCheckForValidListAndQueue+0x68>)
 800f024:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f026:	2300      	movs	r3, #0
 800f028:	9300      	str	r3, [sp, #0]
 800f02a:	4b11      	ldr	r3, [pc, #68]	; (800f070 <prvCheckForValidListAndQueue+0x74>)
 800f02c:	4a11      	ldr	r2, [pc, #68]	; (800f074 <prvCheckForValidListAndQueue+0x78>)
 800f02e:	210c      	movs	r1, #12
 800f030:	200a      	movs	r0, #10
 800f032:	f7fd fddd 	bl	800cbf0 <xQueueGenericCreateStatic>
 800f036:	4603      	mov	r3, r0
 800f038:	4a08      	ldr	r2, [pc, #32]	; (800f05c <prvCheckForValidListAndQueue+0x60>)
 800f03a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f03c:	4b07      	ldr	r3, [pc, #28]	; (800f05c <prvCheckForValidListAndQueue+0x60>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d005      	beq.n	800f050 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f044:	4b05      	ldr	r3, [pc, #20]	; (800f05c <prvCheckForValidListAndQueue+0x60>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	490b      	ldr	r1, [pc, #44]	; (800f078 <prvCheckForValidListAndQueue+0x7c>)
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7fe fc5c 	bl	800d908 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f050:	f000 f970 	bl	800f334 <vPortExitCritical>
}
 800f054:	bf00      	nop
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
 800f05a:	bf00      	nop
 800f05c:	20000a28 	.word	0x20000a28
 800f060:	200009f8 	.word	0x200009f8
 800f064:	20000a0c 	.word	0x20000a0c
 800f068:	20000a20 	.word	0x20000a20
 800f06c:	20000a24 	.word	0x20000a24
 800f070:	20000aac 	.word	0x20000aac
 800f074:	20000a34 	.word	0x20000a34
 800f078:	080143f8 	.word	0x080143f8

0800f07c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f07c:	b480      	push	{r7}
 800f07e:	b085      	sub	sp, #20
 800f080:	af00      	add	r7, sp, #0
 800f082:	60f8      	str	r0, [r7, #12]
 800f084:	60b9      	str	r1, [r7, #8]
 800f086:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	3b04      	subs	r3, #4
 800f08c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f094:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	3b04      	subs	r3, #4
 800f09a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	f023 0201 	bic.w	r2, r3, #1
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	3b04      	subs	r3, #4
 800f0aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f0ac:	4a0c      	ldr	r2, [pc, #48]	; (800f0e0 <pxPortInitialiseStack+0x64>)
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	3b14      	subs	r3, #20
 800f0b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f0b8:	687a      	ldr	r2, [r7, #4]
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	3b04      	subs	r3, #4
 800f0c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f06f 0202 	mvn.w	r2, #2
 800f0ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	3b20      	subs	r3, #32
 800f0d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f0d2:	68fb      	ldr	r3, [r7, #12]
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3714      	adds	r7, #20
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0de:	4770      	bx	lr
 800f0e0:	0800f0e5 	.word	0x0800f0e5

0800f0e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b085      	sub	sp, #20
 800f0e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f0ee:	4b12      	ldr	r3, [pc, #72]	; (800f138 <prvTaskExitError+0x54>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0f6:	d00a      	beq.n	800f10e <prvTaskExitError+0x2a>
	__asm volatile
 800f0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0fc:	f383 8811 	msr	BASEPRI, r3
 800f100:	f3bf 8f6f 	isb	sy
 800f104:	f3bf 8f4f 	dsb	sy
 800f108:	60fb      	str	r3, [r7, #12]
}
 800f10a:	bf00      	nop
 800f10c:	e7fe      	b.n	800f10c <prvTaskExitError+0x28>
	__asm volatile
 800f10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f112:	f383 8811 	msr	BASEPRI, r3
 800f116:	f3bf 8f6f 	isb	sy
 800f11a:	f3bf 8f4f 	dsb	sy
 800f11e:	60bb      	str	r3, [r7, #8]
}
 800f120:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f122:	bf00      	nop
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d0fc      	beq.n	800f124 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f12a:	bf00      	nop
 800f12c:	bf00      	nop
 800f12e:	3714      	adds	r7, #20
 800f130:	46bd      	mov	sp, r7
 800f132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f136:	4770      	bx	lr
 800f138:	20000018 	.word	0x20000018
 800f13c:	00000000 	.word	0x00000000

0800f140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f140:	4b07      	ldr	r3, [pc, #28]	; (800f160 <pxCurrentTCBConst2>)
 800f142:	6819      	ldr	r1, [r3, #0]
 800f144:	6808      	ldr	r0, [r1, #0]
 800f146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f14a:	f380 8809 	msr	PSP, r0
 800f14e:	f3bf 8f6f 	isb	sy
 800f152:	f04f 0000 	mov.w	r0, #0
 800f156:	f380 8811 	msr	BASEPRI, r0
 800f15a:	4770      	bx	lr
 800f15c:	f3af 8000 	nop.w

0800f160 <pxCurrentTCBConst2>:
 800f160:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f164:	bf00      	nop
 800f166:	bf00      	nop

0800f168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f168:	4808      	ldr	r0, [pc, #32]	; (800f18c <prvPortStartFirstTask+0x24>)
 800f16a:	6800      	ldr	r0, [r0, #0]
 800f16c:	6800      	ldr	r0, [r0, #0]
 800f16e:	f380 8808 	msr	MSP, r0
 800f172:	f04f 0000 	mov.w	r0, #0
 800f176:	f380 8814 	msr	CONTROL, r0
 800f17a:	b662      	cpsie	i
 800f17c:	b661      	cpsie	f
 800f17e:	f3bf 8f4f 	dsb	sy
 800f182:	f3bf 8f6f 	isb	sy
 800f186:	df00      	svc	0
 800f188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f18a:	bf00      	nop
 800f18c:	e000ed08 	.word	0xe000ed08

0800f190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b086      	sub	sp, #24
 800f194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f196:	4b46      	ldr	r3, [pc, #280]	; (800f2b0 <xPortStartScheduler+0x120>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	4a46      	ldr	r2, [pc, #280]	; (800f2b4 <xPortStartScheduler+0x124>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d10a      	bne.n	800f1b6 <xPortStartScheduler+0x26>
	__asm volatile
 800f1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a4:	f383 8811 	msr	BASEPRI, r3
 800f1a8:	f3bf 8f6f 	isb	sy
 800f1ac:	f3bf 8f4f 	dsb	sy
 800f1b0:	613b      	str	r3, [r7, #16]
}
 800f1b2:	bf00      	nop
 800f1b4:	e7fe      	b.n	800f1b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f1b6:	4b3e      	ldr	r3, [pc, #248]	; (800f2b0 <xPortStartScheduler+0x120>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	4a3f      	ldr	r2, [pc, #252]	; (800f2b8 <xPortStartScheduler+0x128>)
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d10a      	bne.n	800f1d6 <xPortStartScheduler+0x46>
	__asm volatile
 800f1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c4:	f383 8811 	msr	BASEPRI, r3
 800f1c8:	f3bf 8f6f 	isb	sy
 800f1cc:	f3bf 8f4f 	dsb	sy
 800f1d0:	60fb      	str	r3, [r7, #12]
}
 800f1d2:	bf00      	nop
 800f1d4:	e7fe      	b.n	800f1d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f1d6:	4b39      	ldr	r3, [pc, #228]	; (800f2bc <xPortStartScheduler+0x12c>)
 800f1d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	b2db      	uxtb	r3, r3
 800f1e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	22ff      	movs	r2, #255	; 0xff
 800f1e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	781b      	ldrb	r3, [r3, #0]
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f1f0:	78fb      	ldrb	r3, [r7, #3]
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f1f8:	b2da      	uxtb	r2, r3
 800f1fa:	4b31      	ldr	r3, [pc, #196]	; (800f2c0 <xPortStartScheduler+0x130>)
 800f1fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f1fe:	4b31      	ldr	r3, [pc, #196]	; (800f2c4 <xPortStartScheduler+0x134>)
 800f200:	2207      	movs	r2, #7
 800f202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f204:	e009      	b.n	800f21a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f206:	4b2f      	ldr	r3, [pc, #188]	; (800f2c4 <xPortStartScheduler+0x134>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	3b01      	subs	r3, #1
 800f20c:	4a2d      	ldr	r2, [pc, #180]	; (800f2c4 <xPortStartScheduler+0x134>)
 800f20e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f210:	78fb      	ldrb	r3, [r7, #3]
 800f212:	b2db      	uxtb	r3, r3
 800f214:	005b      	lsls	r3, r3, #1
 800f216:	b2db      	uxtb	r3, r3
 800f218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f21a:	78fb      	ldrb	r3, [r7, #3]
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f222:	2b80      	cmp	r3, #128	; 0x80
 800f224:	d0ef      	beq.n	800f206 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f226:	4b27      	ldr	r3, [pc, #156]	; (800f2c4 <xPortStartScheduler+0x134>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f1c3 0307 	rsb	r3, r3, #7
 800f22e:	2b04      	cmp	r3, #4
 800f230:	d00a      	beq.n	800f248 <xPortStartScheduler+0xb8>
	__asm volatile
 800f232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f236:	f383 8811 	msr	BASEPRI, r3
 800f23a:	f3bf 8f6f 	isb	sy
 800f23e:	f3bf 8f4f 	dsb	sy
 800f242:	60bb      	str	r3, [r7, #8]
}
 800f244:	bf00      	nop
 800f246:	e7fe      	b.n	800f246 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f248:	4b1e      	ldr	r3, [pc, #120]	; (800f2c4 <xPortStartScheduler+0x134>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	021b      	lsls	r3, r3, #8
 800f24e:	4a1d      	ldr	r2, [pc, #116]	; (800f2c4 <xPortStartScheduler+0x134>)
 800f250:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f252:	4b1c      	ldr	r3, [pc, #112]	; (800f2c4 <xPortStartScheduler+0x134>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f25a:	4a1a      	ldr	r2, [pc, #104]	; (800f2c4 <xPortStartScheduler+0x134>)
 800f25c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	b2da      	uxtb	r2, r3
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f266:	4b18      	ldr	r3, [pc, #96]	; (800f2c8 <xPortStartScheduler+0x138>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	4a17      	ldr	r2, [pc, #92]	; (800f2c8 <xPortStartScheduler+0x138>)
 800f26c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f270:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f272:	4b15      	ldr	r3, [pc, #84]	; (800f2c8 <xPortStartScheduler+0x138>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4a14      	ldr	r2, [pc, #80]	; (800f2c8 <xPortStartScheduler+0x138>)
 800f278:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f27c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f27e:	f000 f8dd 	bl	800f43c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f282:	4b12      	ldr	r3, [pc, #72]	; (800f2cc <xPortStartScheduler+0x13c>)
 800f284:	2200      	movs	r2, #0
 800f286:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f288:	f000 f8fc 	bl	800f484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f28c:	4b10      	ldr	r3, [pc, #64]	; (800f2d0 <xPortStartScheduler+0x140>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	4a0f      	ldr	r2, [pc, #60]	; (800f2d0 <xPortStartScheduler+0x140>)
 800f292:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f296:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f298:	f7ff ff66 	bl	800f168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f29c:	f7fe ff32 	bl	800e104 <vTaskSwitchContext>
	prvTaskExitError();
 800f2a0:	f7ff ff20 	bl	800f0e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f2a4:	2300      	movs	r3, #0
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3718      	adds	r7, #24
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	e000ed00 	.word	0xe000ed00
 800f2b4:	410fc271 	.word	0x410fc271
 800f2b8:	410fc270 	.word	0x410fc270
 800f2bc:	e000e400 	.word	0xe000e400
 800f2c0:	20000af4 	.word	0x20000af4
 800f2c4:	20000af8 	.word	0x20000af8
 800f2c8:	e000ed20 	.word	0xe000ed20
 800f2cc:	20000018 	.word	0x20000018
 800f2d0:	e000ef34 	.word	0xe000ef34

0800f2d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b083      	sub	sp, #12
 800f2d8:	af00      	add	r7, sp, #0
	__asm volatile
 800f2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2de:	f383 8811 	msr	BASEPRI, r3
 800f2e2:	f3bf 8f6f 	isb	sy
 800f2e6:	f3bf 8f4f 	dsb	sy
 800f2ea:	607b      	str	r3, [r7, #4]
}
 800f2ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f2ee:	4b0f      	ldr	r3, [pc, #60]	; (800f32c <vPortEnterCritical+0x58>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	4a0d      	ldr	r2, [pc, #52]	; (800f32c <vPortEnterCritical+0x58>)
 800f2f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f2f8:	4b0c      	ldr	r3, [pc, #48]	; (800f32c <vPortEnterCritical+0x58>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	2b01      	cmp	r3, #1
 800f2fe:	d10f      	bne.n	800f320 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f300:	4b0b      	ldr	r3, [pc, #44]	; (800f330 <vPortEnterCritical+0x5c>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	b2db      	uxtb	r3, r3
 800f306:	2b00      	cmp	r3, #0
 800f308:	d00a      	beq.n	800f320 <vPortEnterCritical+0x4c>
	__asm volatile
 800f30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f30e:	f383 8811 	msr	BASEPRI, r3
 800f312:	f3bf 8f6f 	isb	sy
 800f316:	f3bf 8f4f 	dsb	sy
 800f31a:	603b      	str	r3, [r7, #0]
}
 800f31c:	bf00      	nop
 800f31e:	e7fe      	b.n	800f31e <vPortEnterCritical+0x4a>
	}
}
 800f320:	bf00      	nop
 800f322:	370c      	adds	r7, #12
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr
 800f32c:	20000018 	.word	0x20000018
 800f330:	e000ed04 	.word	0xe000ed04

0800f334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f334:	b480      	push	{r7}
 800f336:	b083      	sub	sp, #12
 800f338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f33a:	4b12      	ldr	r3, [pc, #72]	; (800f384 <vPortExitCritical+0x50>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d10a      	bne.n	800f358 <vPortExitCritical+0x24>
	__asm volatile
 800f342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f346:	f383 8811 	msr	BASEPRI, r3
 800f34a:	f3bf 8f6f 	isb	sy
 800f34e:	f3bf 8f4f 	dsb	sy
 800f352:	607b      	str	r3, [r7, #4]
}
 800f354:	bf00      	nop
 800f356:	e7fe      	b.n	800f356 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f358:	4b0a      	ldr	r3, [pc, #40]	; (800f384 <vPortExitCritical+0x50>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	3b01      	subs	r3, #1
 800f35e:	4a09      	ldr	r2, [pc, #36]	; (800f384 <vPortExitCritical+0x50>)
 800f360:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f362:	4b08      	ldr	r3, [pc, #32]	; (800f384 <vPortExitCritical+0x50>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d105      	bne.n	800f376 <vPortExitCritical+0x42>
 800f36a:	2300      	movs	r3, #0
 800f36c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	f383 8811 	msr	BASEPRI, r3
}
 800f374:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f376:	bf00      	nop
 800f378:	370c      	adds	r7, #12
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr
 800f382:	bf00      	nop
 800f384:	20000018 	.word	0x20000018
	...

0800f390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f390:	f3ef 8009 	mrs	r0, PSP
 800f394:	f3bf 8f6f 	isb	sy
 800f398:	4b15      	ldr	r3, [pc, #84]	; (800f3f0 <pxCurrentTCBConst>)
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	f01e 0f10 	tst.w	lr, #16
 800f3a0:	bf08      	it	eq
 800f3a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f3a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3aa:	6010      	str	r0, [r2, #0]
 800f3ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f3b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f3b4:	f380 8811 	msr	BASEPRI, r0
 800f3b8:	f3bf 8f4f 	dsb	sy
 800f3bc:	f3bf 8f6f 	isb	sy
 800f3c0:	f7fe fea0 	bl	800e104 <vTaskSwitchContext>
 800f3c4:	f04f 0000 	mov.w	r0, #0
 800f3c8:	f380 8811 	msr	BASEPRI, r0
 800f3cc:	bc09      	pop	{r0, r3}
 800f3ce:	6819      	ldr	r1, [r3, #0]
 800f3d0:	6808      	ldr	r0, [r1, #0]
 800f3d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d6:	f01e 0f10 	tst.w	lr, #16
 800f3da:	bf08      	it	eq
 800f3dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f3e0:	f380 8809 	msr	PSP, r0
 800f3e4:	f3bf 8f6f 	isb	sy
 800f3e8:	4770      	bx	lr
 800f3ea:	bf00      	nop
 800f3ec:	f3af 8000 	nop.w

0800f3f0 <pxCurrentTCBConst>:
 800f3f0:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f3f4:	bf00      	nop
 800f3f6:	bf00      	nop

0800f3f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800f3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f402:	f383 8811 	msr	BASEPRI, r3
 800f406:	f3bf 8f6f 	isb	sy
 800f40a:	f3bf 8f4f 	dsb	sy
 800f40e:	607b      	str	r3, [r7, #4]
}
 800f410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f412:	f7fe fdbf 	bl	800df94 <xTaskIncrementTick>
 800f416:	4603      	mov	r3, r0
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d003      	beq.n	800f424 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f41c:	4b06      	ldr	r3, [pc, #24]	; (800f438 <SysTick_Handler+0x40>)
 800f41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f422:	601a      	str	r2, [r3, #0]
 800f424:	2300      	movs	r3, #0
 800f426:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	f383 8811 	msr	BASEPRI, r3
}
 800f42e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f430:	bf00      	nop
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}
 800f438:	e000ed04 	.word	0xe000ed04

0800f43c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f43c:	b480      	push	{r7}
 800f43e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f440:	4b0b      	ldr	r3, [pc, #44]	; (800f470 <vPortSetupTimerInterrupt+0x34>)
 800f442:	2200      	movs	r2, #0
 800f444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f446:	4b0b      	ldr	r3, [pc, #44]	; (800f474 <vPortSetupTimerInterrupt+0x38>)
 800f448:	2200      	movs	r2, #0
 800f44a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f44c:	4b0a      	ldr	r3, [pc, #40]	; (800f478 <vPortSetupTimerInterrupt+0x3c>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4a0a      	ldr	r2, [pc, #40]	; (800f47c <vPortSetupTimerInterrupt+0x40>)
 800f452:	fba2 2303 	umull	r2, r3, r2, r3
 800f456:	099b      	lsrs	r3, r3, #6
 800f458:	4a09      	ldr	r2, [pc, #36]	; (800f480 <vPortSetupTimerInterrupt+0x44>)
 800f45a:	3b01      	subs	r3, #1
 800f45c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f45e:	4b04      	ldr	r3, [pc, #16]	; (800f470 <vPortSetupTimerInterrupt+0x34>)
 800f460:	2207      	movs	r2, #7
 800f462:	601a      	str	r2, [r3, #0]
}
 800f464:	bf00      	nop
 800f466:	46bd      	mov	sp, r7
 800f468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46c:	4770      	bx	lr
 800f46e:	bf00      	nop
 800f470:	e000e010 	.word	0xe000e010
 800f474:	e000e018 	.word	0xe000e018
 800f478:	2000000c 	.word	0x2000000c
 800f47c:	10624dd3 	.word	0x10624dd3
 800f480:	e000e014 	.word	0xe000e014

0800f484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f494 <vPortEnableVFP+0x10>
 800f488:	6801      	ldr	r1, [r0, #0]
 800f48a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f48e:	6001      	str	r1, [r0, #0]
 800f490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f492:	bf00      	nop
 800f494:	e000ed88 	.word	0xe000ed88

0800f498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f498:	b480      	push	{r7}
 800f49a:	b085      	sub	sp, #20
 800f49c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f49e:	f3ef 8305 	mrs	r3, IPSR
 800f4a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	2b0f      	cmp	r3, #15
 800f4a8:	d914      	bls.n	800f4d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f4aa:	4a17      	ldr	r2, [pc, #92]	; (800f508 <vPortValidateInterruptPriority+0x70>)
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	4413      	add	r3, r2
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f4b4:	4b15      	ldr	r3, [pc, #84]	; (800f50c <vPortValidateInterruptPriority+0x74>)
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	7afa      	ldrb	r2, [r7, #11]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d20a      	bcs.n	800f4d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c2:	f383 8811 	msr	BASEPRI, r3
 800f4c6:	f3bf 8f6f 	isb	sy
 800f4ca:	f3bf 8f4f 	dsb	sy
 800f4ce:	607b      	str	r3, [r7, #4]
}
 800f4d0:	bf00      	nop
 800f4d2:	e7fe      	b.n	800f4d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f4d4:	4b0e      	ldr	r3, [pc, #56]	; (800f510 <vPortValidateInterruptPriority+0x78>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f4dc:	4b0d      	ldr	r3, [pc, #52]	; (800f514 <vPortValidateInterruptPriority+0x7c>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d90a      	bls.n	800f4fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4e8:	f383 8811 	msr	BASEPRI, r3
 800f4ec:	f3bf 8f6f 	isb	sy
 800f4f0:	f3bf 8f4f 	dsb	sy
 800f4f4:	603b      	str	r3, [r7, #0]
}
 800f4f6:	bf00      	nop
 800f4f8:	e7fe      	b.n	800f4f8 <vPortValidateInterruptPriority+0x60>
	}
 800f4fa:	bf00      	nop
 800f4fc:	3714      	adds	r7, #20
 800f4fe:	46bd      	mov	sp, r7
 800f500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f504:	4770      	bx	lr
 800f506:	bf00      	nop
 800f508:	e000e3f0 	.word	0xe000e3f0
 800f50c:	20000af4 	.word	0x20000af4
 800f510:	e000ed0c 	.word	0xe000ed0c
 800f514:	20000af8 	.word	0x20000af8

0800f518 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b08a      	sub	sp, #40	; 0x28
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f520:	2300      	movs	r3, #0
 800f522:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f524:	f7fe fc7c 	bl	800de20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f528:	4b5b      	ldr	r3, [pc, #364]	; (800f698 <pvPortMalloc+0x180>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d101      	bne.n	800f534 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f530:	f000 f920 	bl	800f774 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f534:	4b59      	ldr	r3, [pc, #356]	; (800f69c <pvPortMalloc+0x184>)
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	4013      	ands	r3, r2
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	f040 8093 	bne.w	800f668 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d01d      	beq.n	800f584 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f548:	2208      	movs	r2, #8
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	4413      	add	r3, r2
 800f54e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f003 0307 	and.w	r3, r3, #7
 800f556:	2b00      	cmp	r3, #0
 800f558:	d014      	beq.n	800f584 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f023 0307 	bic.w	r3, r3, #7
 800f560:	3308      	adds	r3, #8
 800f562:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f003 0307 	and.w	r3, r3, #7
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d00a      	beq.n	800f584 <pvPortMalloc+0x6c>
	__asm volatile
 800f56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f572:	f383 8811 	msr	BASEPRI, r3
 800f576:	f3bf 8f6f 	isb	sy
 800f57a:	f3bf 8f4f 	dsb	sy
 800f57e:	617b      	str	r3, [r7, #20]
}
 800f580:	bf00      	nop
 800f582:	e7fe      	b.n	800f582 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d06e      	beq.n	800f668 <pvPortMalloc+0x150>
 800f58a:	4b45      	ldr	r3, [pc, #276]	; (800f6a0 <pvPortMalloc+0x188>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	429a      	cmp	r2, r3
 800f592:	d869      	bhi.n	800f668 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f594:	4b43      	ldr	r3, [pc, #268]	; (800f6a4 <pvPortMalloc+0x18c>)
 800f596:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f598:	4b42      	ldr	r3, [pc, #264]	; (800f6a4 <pvPortMalloc+0x18c>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f59e:	e004      	b.n	800f5aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	687a      	ldr	r2, [r7, #4]
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d903      	bls.n	800f5bc <pvPortMalloc+0xa4>
 800f5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d1f1      	bne.n	800f5a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f5bc:	4b36      	ldr	r3, [pc, #216]	; (800f698 <pvPortMalloc+0x180>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d050      	beq.n	800f668 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f5c6:	6a3b      	ldr	r3, [r7, #32]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	2208      	movs	r2, #8
 800f5cc:	4413      	add	r3, r2
 800f5ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d2:	681a      	ldr	r2, [r3, #0]
 800f5d4:	6a3b      	ldr	r3, [r7, #32]
 800f5d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5da:	685a      	ldr	r2, [r3, #4]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	1ad2      	subs	r2, r2, r3
 800f5e0:	2308      	movs	r3, #8
 800f5e2:	005b      	lsls	r3, r3, #1
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d91f      	bls.n	800f628 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4413      	add	r3, r2
 800f5ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5f0:	69bb      	ldr	r3, [r7, #24]
 800f5f2:	f003 0307 	and.w	r3, r3, #7
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d00a      	beq.n	800f610 <pvPortMalloc+0xf8>
	__asm volatile
 800f5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5fe:	f383 8811 	msr	BASEPRI, r3
 800f602:	f3bf 8f6f 	isb	sy
 800f606:	f3bf 8f4f 	dsb	sy
 800f60a:	613b      	str	r3, [r7, #16]
}
 800f60c:	bf00      	nop
 800f60e:	e7fe      	b.n	800f60e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f612:	685a      	ldr	r2, [r3, #4]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	1ad2      	subs	r2, r2, r3
 800f618:	69bb      	ldr	r3, [r7, #24]
 800f61a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61e:	687a      	ldr	r2, [r7, #4]
 800f620:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f622:	69b8      	ldr	r0, [r7, #24]
 800f624:	f000 f908 	bl	800f838 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f628:	4b1d      	ldr	r3, [pc, #116]	; (800f6a0 <pvPortMalloc+0x188>)
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	1ad3      	subs	r3, r2, r3
 800f632:	4a1b      	ldr	r2, [pc, #108]	; (800f6a0 <pvPortMalloc+0x188>)
 800f634:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f636:	4b1a      	ldr	r3, [pc, #104]	; (800f6a0 <pvPortMalloc+0x188>)
 800f638:	681a      	ldr	r2, [r3, #0]
 800f63a:	4b1b      	ldr	r3, [pc, #108]	; (800f6a8 <pvPortMalloc+0x190>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	429a      	cmp	r2, r3
 800f640:	d203      	bcs.n	800f64a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f642:	4b17      	ldr	r3, [pc, #92]	; (800f6a0 <pvPortMalloc+0x188>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	4a18      	ldr	r2, [pc, #96]	; (800f6a8 <pvPortMalloc+0x190>)
 800f648:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64c:	685a      	ldr	r2, [r3, #4]
 800f64e:	4b13      	ldr	r3, [pc, #76]	; (800f69c <pvPortMalloc+0x184>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	431a      	orrs	r2, r3
 800f654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f656:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65a:	2200      	movs	r2, #0
 800f65c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f65e:	4b13      	ldr	r3, [pc, #76]	; (800f6ac <pvPortMalloc+0x194>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	3301      	adds	r3, #1
 800f664:	4a11      	ldr	r2, [pc, #68]	; (800f6ac <pvPortMalloc+0x194>)
 800f666:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f668:	f7fe fbe8 	bl	800de3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f66c:	69fb      	ldr	r3, [r7, #28]
 800f66e:	f003 0307 	and.w	r3, r3, #7
 800f672:	2b00      	cmp	r3, #0
 800f674:	d00a      	beq.n	800f68c <pvPortMalloc+0x174>
	__asm volatile
 800f676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f67a:	f383 8811 	msr	BASEPRI, r3
 800f67e:	f3bf 8f6f 	isb	sy
 800f682:	f3bf 8f4f 	dsb	sy
 800f686:	60fb      	str	r3, [r7, #12]
}
 800f688:	bf00      	nop
 800f68a:	e7fe      	b.n	800f68a <pvPortMalloc+0x172>
	return pvReturn;
 800f68c:	69fb      	ldr	r3, [r7, #28]
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3728      	adds	r7, #40	; 0x28
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	2000af14 	.word	0x2000af14
 800f69c:	2000af28 	.word	0x2000af28
 800f6a0:	2000af18 	.word	0x2000af18
 800f6a4:	2000af0c 	.word	0x2000af0c
 800f6a8:	2000af1c 	.word	0x2000af1c
 800f6ac:	2000af20 	.word	0x2000af20

0800f6b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b086      	sub	sp, #24
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d04d      	beq.n	800f75e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f6c2:	2308      	movs	r3, #8
 800f6c4:	425b      	negs	r3, r3
 800f6c6:	697a      	ldr	r2, [r7, #20]
 800f6c8:	4413      	add	r3, r2
 800f6ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	685a      	ldr	r2, [r3, #4]
 800f6d4:	4b24      	ldr	r3, [pc, #144]	; (800f768 <vPortFree+0xb8>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	4013      	ands	r3, r2
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d10a      	bne.n	800f6f4 <vPortFree+0x44>
	__asm volatile
 800f6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e2:	f383 8811 	msr	BASEPRI, r3
 800f6e6:	f3bf 8f6f 	isb	sy
 800f6ea:	f3bf 8f4f 	dsb	sy
 800f6ee:	60fb      	str	r3, [r7, #12]
}
 800f6f0:	bf00      	nop
 800f6f2:	e7fe      	b.n	800f6f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d00a      	beq.n	800f712 <vPortFree+0x62>
	__asm volatile
 800f6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f700:	f383 8811 	msr	BASEPRI, r3
 800f704:	f3bf 8f6f 	isb	sy
 800f708:	f3bf 8f4f 	dsb	sy
 800f70c:	60bb      	str	r3, [r7, #8]
}
 800f70e:	bf00      	nop
 800f710:	e7fe      	b.n	800f710 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	685a      	ldr	r2, [r3, #4]
 800f716:	4b14      	ldr	r3, [pc, #80]	; (800f768 <vPortFree+0xb8>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	4013      	ands	r3, r2
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d01e      	beq.n	800f75e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d11a      	bne.n	800f75e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	685a      	ldr	r2, [r3, #4]
 800f72c:	4b0e      	ldr	r3, [pc, #56]	; (800f768 <vPortFree+0xb8>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	43db      	mvns	r3, r3
 800f732:	401a      	ands	r2, r3
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f738:	f7fe fb72 	bl	800de20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	685a      	ldr	r2, [r3, #4]
 800f740:	4b0a      	ldr	r3, [pc, #40]	; (800f76c <vPortFree+0xbc>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	4413      	add	r3, r2
 800f746:	4a09      	ldr	r2, [pc, #36]	; (800f76c <vPortFree+0xbc>)
 800f748:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f74a:	6938      	ldr	r0, [r7, #16]
 800f74c:	f000 f874 	bl	800f838 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f750:	4b07      	ldr	r3, [pc, #28]	; (800f770 <vPortFree+0xc0>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	3301      	adds	r3, #1
 800f756:	4a06      	ldr	r2, [pc, #24]	; (800f770 <vPortFree+0xc0>)
 800f758:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f75a:	f7fe fb6f 	bl	800de3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f75e:	bf00      	nop
 800f760:	3718      	adds	r7, #24
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	2000af28 	.word	0x2000af28
 800f76c:	2000af18 	.word	0x2000af18
 800f770:	2000af24 	.word	0x2000af24

0800f774 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f774:	b480      	push	{r7}
 800f776:	b085      	sub	sp, #20
 800f778:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f77a:	f24a 4310 	movw	r3, #42000	; 0xa410
 800f77e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f780:	4b27      	ldr	r3, [pc, #156]	; (800f820 <prvHeapInit+0xac>)
 800f782:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f003 0307 	and.w	r3, r3, #7
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d00c      	beq.n	800f7a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	3307      	adds	r3, #7
 800f792:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f023 0307 	bic.w	r3, r3, #7
 800f79a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f79c:	68ba      	ldr	r2, [r7, #8]
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	1ad3      	subs	r3, r2, r3
 800f7a2:	4a1f      	ldr	r2, [pc, #124]	; (800f820 <prvHeapInit+0xac>)
 800f7a4:	4413      	add	r3, r2
 800f7a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f7ac:	4a1d      	ldr	r2, [pc, #116]	; (800f824 <prvHeapInit+0xb0>)
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f7b2:	4b1c      	ldr	r3, [pc, #112]	; (800f824 <prvHeapInit+0xb0>)
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	68ba      	ldr	r2, [r7, #8]
 800f7bc:	4413      	add	r3, r2
 800f7be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f7c0:	2208      	movs	r2, #8
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	1a9b      	subs	r3, r3, r2
 800f7c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	f023 0307 	bic.w	r3, r3, #7
 800f7ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	4a15      	ldr	r2, [pc, #84]	; (800f828 <prvHeapInit+0xb4>)
 800f7d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f7d6:	4b14      	ldr	r3, [pc, #80]	; (800f828 <prvHeapInit+0xb4>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f7de:	4b12      	ldr	r3, [pc, #72]	; (800f828 <prvHeapInit+0xb4>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	68fa      	ldr	r2, [r7, #12]
 800f7ee:	1ad2      	subs	r2, r2, r3
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f7f4:	4b0c      	ldr	r3, [pc, #48]	; (800f828 <prvHeapInit+0xb4>)
 800f7f6:	681a      	ldr	r2, [r3, #0]
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	4a0a      	ldr	r2, [pc, #40]	; (800f82c <prvHeapInit+0xb8>)
 800f802:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	685b      	ldr	r3, [r3, #4]
 800f808:	4a09      	ldr	r2, [pc, #36]	; (800f830 <prvHeapInit+0xbc>)
 800f80a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f80c:	4b09      	ldr	r3, [pc, #36]	; (800f834 <prvHeapInit+0xc0>)
 800f80e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f812:	601a      	str	r2, [r3, #0]
}
 800f814:	bf00      	nop
 800f816:	3714      	adds	r7, #20
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr
 800f820:	20000afc 	.word	0x20000afc
 800f824:	2000af0c 	.word	0x2000af0c
 800f828:	2000af14 	.word	0x2000af14
 800f82c:	2000af1c 	.word	0x2000af1c
 800f830:	2000af18 	.word	0x2000af18
 800f834:	2000af28 	.word	0x2000af28

0800f838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f838:	b480      	push	{r7}
 800f83a:	b085      	sub	sp, #20
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f840:	4b28      	ldr	r3, [pc, #160]	; (800f8e4 <prvInsertBlockIntoFreeList+0xac>)
 800f842:	60fb      	str	r3, [r7, #12]
 800f844:	e002      	b.n	800f84c <prvInsertBlockIntoFreeList+0x14>
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	60fb      	str	r3, [r7, #12]
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	687a      	ldr	r2, [r7, #4]
 800f852:	429a      	cmp	r2, r3
 800f854:	d8f7      	bhi.n	800f846 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	68ba      	ldr	r2, [r7, #8]
 800f860:	4413      	add	r3, r2
 800f862:	687a      	ldr	r2, [r7, #4]
 800f864:	429a      	cmp	r2, r3
 800f866:	d108      	bne.n	800f87a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	685a      	ldr	r2, [r3, #4]
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	685b      	ldr	r3, [r3, #4]
 800f870:	441a      	add	r2, r3
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	68ba      	ldr	r2, [r7, #8]
 800f884:	441a      	add	r2, r3
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d118      	bne.n	800f8c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	4b15      	ldr	r3, [pc, #84]	; (800f8e8 <prvInsertBlockIntoFreeList+0xb0>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	429a      	cmp	r2, r3
 800f898:	d00d      	beq.n	800f8b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	685a      	ldr	r2, [r3, #4]
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	685b      	ldr	r3, [r3, #4]
 800f8a4:	441a      	add	r2, r3
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	601a      	str	r2, [r3, #0]
 800f8b4:	e008      	b.n	800f8c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f8b6:	4b0c      	ldr	r3, [pc, #48]	; (800f8e8 <prvInsertBlockIntoFreeList+0xb0>)
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	601a      	str	r2, [r3, #0]
 800f8be:	e003      	b.n	800f8c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f8c8:	68fa      	ldr	r2, [r7, #12]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	d002      	beq.n	800f8d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8d6:	bf00      	nop
 800f8d8:	3714      	adds	r7, #20
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e0:	4770      	bx	lr
 800f8e2:	bf00      	nop
 800f8e4:	2000af0c 	.word	0x2000af0c
 800f8e8:	2000af14 	.word	0x2000af14

0800f8ec <atoi>:
 800f8ec:	220a      	movs	r2, #10
 800f8ee:	2100      	movs	r1, #0
 800f8f0:	f000 bdbc 	b.w	801046c <strtol>

0800f8f4 <__errno>:
 800f8f4:	4b01      	ldr	r3, [pc, #4]	; (800f8fc <__errno+0x8>)
 800f8f6:	6818      	ldr	r0, [r3, #0]
 800f8f8:	4770      	bx	lr
 800f8fa:	bf00      	nop
 800f8fc:	2000001c 	.word	0x2000001c

0800f900 <__libc_init_array>:
 800f900:	b570      	push	{r4, r5, r6, lr}
 800f902:	4d0d      	ldr	r5, [pc, #52]	; (800f938 <__libc_init_array+0x38>)
 800f904:	4c0d      	ldr	r4, [pc, #52]	; (800f93c <__libc_init_array+0x3c>)
 800f906:	1b64      	subs	r4, r4, r5
 800f908:	10a4      	asrs	r4, r4, #2
 800f90a:	2600      	movs	r6, #0
 800f90c:	42a6      	cmp	r6, r4
 800f90e:	d109      	bne.n	800f924 <__libc_init_array+0x24>
 800f910:	4d0b      	ldr	r5, [pc, #44]	; (800f940 <__libc_init_array+0x40>)
 800f912:	4c0c      	ldr	r4, [pc, #48]	; (800f944 <__libc_init_array+0x44>)
 800f914:	f004 fbc2 	bl	801409c <_init>
 800f918:	1b64      	subs	r4, r4, r5
 800f91a:	10a4      	asrs	r4, r4, #2
 800f91c:	2600      	movs	r6, #0
 800f91e:	42a6      	cmp	r6, r4
 800f920:	d105      	bne.n	800f92e <__libc_init_array+0x2e>
 800f922:	bd70      	pop	{r4, r5, r6, pc}
 800f924:	f855 3b04 	ldr.w	r3, [r5], #4
 800f928:	4798      	blx	r3
 800f92a:	3601      	adds	r6, #1
 800f92c:	e7ee      	b.n	800f90c <__libc_init_array+0xc>
 800f92e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f932:	4798      	blx	r3
 800f934:	3601      	adds	r6, #1
 800f936:	e7f2      	b.n	800f91e <__libc_init_array+0x1e>
 800f938:	08014b68 	.word	0x08014b68
 800f93c:	08014b68 	.word	0x08014b68
 800f940:	08014b68 	.word	0x08014b68
 800f944:	08014b6c 	.word	0x08014b6c

0800f948 <memcpy>:
 800f948:	440a      	add	r2, r1
 800f94a:	4291      	cmp	r1, r2
 800f94c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f950:	d100      	bne.n	800f954 <memcpy+0xc>
 800f952:	4770      	bx	lr
 800f954:	b510      	push	{r4, lr}
 800f956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f95a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f95e:	4291      	cmp	r1, r2
 800f960:	d1f9      	bne.n	800f956 <memcpy+0xe>
 800f962:	bd10      	pop	{r4, pc}

0800f964 <memset>:
 800f964:	4402      	add	r2, r0
 800f966:	4603      	mov	r3, r0
 800f968:	4293      	cmp	r3, r2
 800f96a:	d100      	bne.n	800f96e <memset+0xa>
 800f96c:	4770      	bx	lr
 800f96e:	f803 1b01 	strb.w	r1, [r3], #1
 800f972:	e7f9      	b.n	800f968 <memset+0x4>

0800f974 <__cvt>:
 800f974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f978:	ec55 4b10 	vmov	r4, r5, d0
 800f97c:	2d00      	cmp	r5, #0
 800f97e:	460e      	mov	r6, r1
 800f980:	4619      	mov	r1, r3
 800f982:	462b      	mov	r3, r5
 800f984:	bfbb      	ittet	lt
 800f986:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f98a:	461d      	movlt	r5, r3
 800f98c:	2300      	movge	r3, #0
 800f98e:	232d      	movlt	r3, #45	; 0x2d
 800f990:	700b      	strb	r3, [r1, #0]
 800f992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f994:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f998:	4691      	mov	r9, r2
 800f99a:	f023 0820 	bic.w	r8, r3, #32
 800f99e:	bfbc      	itt	lt
 800f9a0:	4622      	movlt	r2, r4
 800f9a2:	4614      	movlt	r4, r2
 800f9a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f9a8:	d005      	beq.n	800f9b6 <__cvt+0x42>
 800f9aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f9ae:	d100      	bne.n	800f9b2 <__cvt+0x3e>
 800f9b0:	3601      	adds	r6, #1
 800f9b2:	2102      	movs	r1, #2
 800f9b4:	e000      	b.n	800f9b8 <__cvt+0x44>
 800f9b6:	2103      	movs	r1, #3
 800f9b8:	ab03      	add	r3, sp, #12
 800f9ba:	9301      	str	r3, [sp, #4]
 800f9bc:	ab02      	add	r3, sp, #8
 800f9be:	9300      	str	r3, [sp, #0]
 800f9c0:	ec45 4b10 	vmov	d0, r4, r5
 800f9c4:	4653      	mov	r3, sl
 800f9c6:	4632      	mov	r2, r6
 800f9c8:	f000 fea6 	bl	8010718 <_dtoa_r>
 800f9cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f9d0:	4607      	mov	r7, r0
 800f9d2:	d102      	bne.n	800f9da <__cvt+0x66>
 800f9d4:	f019 0f01 	tst.w	r9, #1
 800f9d8:	d022      	beq.n	800fa20 <__cvt+0xac>
 800f9da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f9de:	eb07 0906 	add.w	r9, r7, r6
 800f9e2:	d110      	bne.n	800fa06 <__cvt+0x92>
 800f9e4:	783b      	ldrb	r3, [r7, #0]
 800f9e6:	2b30      	cmp	r3, #48	; 0x30
 800f9e8:	d10a      	bne.n	800fa00 <__cvt+0x8c>
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	4629      	mov	r1, r5
 800f9f2:	f7f1 f871 	bl	8000ad8 <__aeabi_dcmpeq>
 800f9f6:	b918      	cbnz	r0, 800fa00 <__cvt+0x8c>
 800f9f8:	f1c6 0601 	rsb	r6, r6, #1
 800f9fc:	f8ca 6000 	str.w	r6, [sl]
 800fa00:	f8da 3000 	ldr.w	r3, [sl]
 800fa04:	4499      	add	r9, r3
 800fa06:	2200      	movs	r2, #0
 800fa08:	2300      	movs	r3, #0
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	4629      	mov	r1, r5
 800fa0e:	f7f1 f863 	bl	8000ad8 <__aeabi_dcmpeq>
 800fa12:	b108      	cbz	r0, 800fa18 <__cvt+0xa4>
 800fa14:	f8cd 900c 	str.w	r9, [sp, #12]
 800fa18:	2230      	movs	r2, #48	; 0x30
 800fa1a:	9b03      	ldr	r3, [sp, #12]
 800fa1c:	454b      	cmp	r3, r9
 800fa1e:	d307      	bcc.n	800fa30 <__cvt+0xbc>
 800fa20:	9b03      	ldr	r3, [sp, #12]
 800fa22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa24:	1bdb      	subs	r3, r3, r7
 800fa26:	4638      	mov	r0, r7
 800fa28:	6013      	str	r3, [r2, #0]
 800fa2a:	b004      	add	sp, #16
 800fa2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa30:	1c59      	adds	r1, r3, #1
 800fa32:	9103      	str	r1, [sp, #12]
 800fa34:	701a      	strb	r2, [r3, #0]
 800fa36:	e7f0      	b.n	800fa1a <__cvt+0xa6>

0800fa38 <__exponent>:
 800fa38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	2900      	cmp	r1, #0
 800fa3e:	bfb8      	it	lt
 800fa40:	4249      	neglt	r1, r1
 800fa42:	f803 2b02 	strb.w	r2, [r3], #2
 800fa46:	bfb4      	ite	lt
 800fa48:	222d      	movlt	r2, #45	; 0x2d
 800fa4a:	222b      	movge	r2, #43	; 0x2b
 800fa4c:	2909      	cmp	r1, #9
 800fa4e:	7042      	strb	r2, [r0, #1]
 800fa50:	dd2a      	ble.n	800faa8 <__exponent+0x70>
 800fa52:	f10d 0407 	add.w	r4, sp, #7
 800fa56:	46a4      	mov	ip, r4
 800fa58:	270a      	movs	r7, #10
 800fa5a:	46a6      	mov	lr, r4
 800fa5c:	460a      	mov	r2, r1
 800fa5e:	fb91 f6f7 	sdiv	r6, r1, r7
 800fa62:	fb07 1516 	mls	r5, r7, r6, r1
 800fa66:	3530      	adds	r5, #48	; 0x30
 800fa68:	2a63      	cmp	r2, #99	; 0x63
 800fa6a:	f104 34ff 	add.w	r4, r4, #4294967295
 800fa6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fa72:	4631      	mov	r1, r6
 800fa74:	dcf1      	bgt.n	800fa5a <__exponent+0x22>
 800fa76:	3130      	adds	r1, #48	; 0x30
 800fa78:	f1ae 0502 	sub.w	r5, lr, #2
 800fa7c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fa80:	1c44      	adds	r4, r0, #1
 800fa82:	4629      	mov	r1, r5
 800fa84:	4561      	cmp	r1, ip
 800fa86:	d30a      	bcc.n	800fa9e <__exponent+0x66>
 800fa88:	f10d 0209 	add.w	r2, sp, #9
 800fa8c:	eba2 020e 	sub.w	r2, r2, lr
 800fa90:	4565      	cmp	r5, ip
 800fa92:	bf88      	it	hi
 800fa94:	2200      	movhi	r2, #0
 800fa96:	4413      	add	r3, r2
 800fa98:	1a18      	subs	r0, r3, r0
 800fa9a:	b003      	add	sp, #12
 800fa9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800faa2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800faa6:	e7ed      	b.n	800fa84 <__exponent+0x4c>
 800faa8:	2330      	movs	r3, #48	; 0x30
 800faaa:	3130      	adds	r1, #48	; 0x30
 800faac:	7083      	strb	r3, [r0, #2]
 800faae:	70c1      	strb	r1, [r0, #3]
 800fab0:	1d03      	adds	r3, r0, #4
 800fab2:	e7f1      	b.n	800fa98 <__exponent+0x60>

0800fab4 <_printf_float>:
 800fab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fab8:	ed2d 8b02 	vpush	{d8}
 800fabc:	b08d      	sub	sp, #52	; 0x34
 800fabe:	460c      	mov	r4, r1
 800fac0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fac4:	4616      	mov	r6, r2
 800fac6:	461f      	mov	r7, r3
 800fac8:	4605      	mov	r5, r0
 800faca:	f001 fdc9 	bl	8011660 <_localeconv_r>
 800face:	f8d0 a000 	ldr.w	sl, [r0]
 800fad2:	4650      	mov	r0, sl
 800fad4:	f7f0 fb84 	bl	80001e0 <strlen>
 800fad8:	2300      	movs	r3, #0
 800fada:	930a      	str	r3, [sp, #40]	; 0x28
 800fadc:	6823      	ldr	r3, [r4, #0]
 800fade:	9305      	str	r3, [sp, #20]
 800fae0:	f8d8 3000 	ldr.w	r3, [r8]
 800fae4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fae8:	3307      	adds	r3, #7
 800faea:	f023 0307 	bic.w	r3, r3, #7
 800faee:	f103 0208 	add.w	r2, r3, #8
 800faf2:	f8c8 2000 	str.w	r2, [r8]
 800faf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fafe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fb02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fb06:	9307      	str	r3, [sp, #28]
 800fb08:	f8cd 8018 	str.w	r8, [sp, #24]
 800fb0c:	ee08 0a10 	vmov	s16, r0
 800fb10:	4b9f      	ldr	r3, [pc, #636]	; (800fd90 <_printf_float+0x2dc>)
 800fb12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fb16:	f04f 32ff 	mov.w	r2, #4294967295
 800fb1a:	f7f1 f80f 	bl	8000b3c <__aeabi_dcmpun>
 800fb1e:	bb88      	cbnz	r0, 800fb84 <_printf_float+0xd0>
 800fb20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fb24:	4b9a      	ldr	r3, [pc, #616]	; (800fd90 <_printf_float+0x2dc>)
 800fb26:	f04f 32ff 	mov.w	r2, #4294967295
 800fb2a:	f7f0 ffe9 	bl	8000b00 <__aeabi_dcmple>
 800fb2e:	bb48      	cbnz	r0, 800fb84 <_printf_float+0xd0>
 800fb30:	2200      	movs	r2, #0
 800fb32:	2300      	movs	r3, #0
 800fb34:	4640      	mov	r0, r8
 800fb36:	4649      	mov	r1, r9
 800fb38:	f7f0 ffd8 	bl	8000aec <__aeabi_dcmplt>
 800fb3c:	b110      	cbz	r0, 800fb44 <_printf_float+0x90>
 800fb3e:	232d      	movs	r3, #45	; 0x2d
 800fb40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb44:	4b93      	ldr	r3, [pc, #588]	; (800fd94 <_printf_float+0x2e0>)
 800fb46:	4894      	ldr	r0, [pc, #592]	; (800fd98 <_printf_float+0x2e4>)
 800fb48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fb4c:	bf94      	ite	ls
 800fb4e:	4698      	movls	r8, r3
 800fb50:	4680      	movhi	r8, r0
 800fb52:	2303      	movs	r3, #3
 800fb54:	6123      	str	r3, [r4, #16]
 800fb56:	9b05      	ldr	r3, [sp, #20]
 800fb58:	f023 0204 	bic.w	r2, r3, #4
 800fb5c:	6022      	str	r2, [r4, #0]
 800fb5e:	f04f 0900 	mov.w	r9, #0
 800fb62:	9700      	str	r7, [sp, #0]
 800fb64:	4633      	mov	r3, r6
 800fb66:	aa0b      	add	r2, sp, #44	; 0x2c
 800fb68:	4621      	mov	r1, r4
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	f000 f9d8 	bl	800ff20 <_printf_common>
 800fb70:	3001      	adds	r0, #1
 800fb72:	f040 8090 	bne.w	800fc96 <_printf_float+0x1e2>
 800fb76:	f04f 30ff 	mov.w	r0, #4294967295
 800fb7a:	b00d      	add	sp, #52	; 0x34
 800fb7c:	ecbd 8b02 	vpop	{d8}
 800fb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb84:	4642      	mov	r2, r8
 800fb86:	464b      	mov	r3, r9
 800fb88:	4640      	mov	r0, r8
 800fb8a:	4649      	mov	r1, r9
 800fb8c:	f7f0 ffd6 	bl	8000b3c <__aeabi_dcmpun>
 800fb90:	b140      	cbz	r0, 800fba4 <_printf_float+0xf0>
 800fb92:	464b      	mov	r3, r9
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	bfbc      	itt	lt
 800fb98:	232d      	movlt	r3, #45	; 0x2d
 800fb9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fb9e:	487f      	ldr	r0, [pc, #508]	; (800fd9c <_printf_float+0x2e8>)
 800fba0:	4b7f      	ldr	r3, [pc, #508]	; (800fda0 <_printf_float+0x2ec>)
 800fba2:	e7d1      	b.n	800fb48 <_printf_float+0x94>
 800fba4:	6863      	ldr	r3, [r4, #4]
 800fba6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fbaa:	9206      	str	r2, [sp, #24]
 800fbac:	1c5a      	adds	r2, r3, #1
 800fbae:	d13f      	bne.n	800fc30 <_printf_float+0x17c>
 800fbb0:	2306      	movs	r3, #6
 800fbb2:	6063      	str	r3, [r4, #4]
 800fbb4:	9b05      	ldr	r3, [sp, #20]
 800fbb6:	6861      	ldr	r1, [r4, #4]
 800fbb8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	9303      	str	r3, [sp, #12]
 800fbc0:	ab0a      	add	r3, sp, #40	; 0x28
 800fbc2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fbc6:	ab09      	add	r3, sp, #36	; 0x24
 800fbc8:	ec49 8b10 	vmov	d0, r8, r9
 800fbcc:	9300      	str	r3, [sp, #0]
 800fbce:	6022      	str	r2, [r4, #0]
 800fbd0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fbd4:	4628      	mov	r0, r5
 800fbd6:	f7ff fecd 	bl	800f974 <__cvt>
 800fbda:	9b06      	ldr	r3, [sp, #24]
 800fbdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fbde:	2b47      	cmp	r3, #71	; 0x47
 800fbe0:	4680      	mov	r8, r0
 800fbe2:	d108      	bne.n	800fbf6 <_printf_float+0x142>
 800fbe4:	1cc8      	adds	r0, r1, #3
 800fbe6:	db02      	blt.n	800fbee <_printf_float+0x13a>
 800fbe8:	6863      	ldr	r3, [r4, #4]
 800fbea:	4299      	cmp	r1, r3
 800fbec:	dd41      	ble.n	800fc72 <_printf_float+0x1be>
 800fbee:	f1ab 0b02 	sub.w	fp, fp, #2
 800fbf2:	fa5f fb8b 	uxtb.w	fp, fp
 800fbf6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fbfa:	d820      	bhi.n	800fc3e <_printf_float+0x18a>
 800fbfc:	3901      	subs	r1, #1
 800fbfe:	465a      	mov	r2, fp
 800fc00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fc04:	9109      	str	r1, [sp, #36]	; 0x24
 800fc06:	f7ff ff17 	bl	800fa38 <__exponent>
 800fc0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc0c:	1813      	adds	r3, r2, r0
 800fc0e:	2a01      	cmp	r2, #1
 800fc10:	4681      	mov	r9, r0
 800fc12:	6123      	str	r3, [r4, #16]
 800fc14:	dc02      	bgt.n	800fc1c <_printf_float+0x168>
 800fc16:	6822      	ldr	r2, [r4, #0]
 800fc18:	07d2      	lsls	r2, r2, #31
 800fc1a:	d501      	bpl.n	800fc20 <_printf_float+0x16c>
 800fc1c:	3301      	adds	r3, #1
 800fc1e:	6123      	str	r3, [r4, #16]
 800fc20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d09c      	beq.n	800fb62 <_printf_float+0xae>
 800fc28:	232d      	movs	r3, #45	; 0x2d
 800fc2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc2e:	e798      	b.n	800fb62 <_printf_float+0xae>
 800fc30:	9a06      	ldr	r2, [sp, #24]
 800fc32:	2a47      	cmp	r2, #71	; 0x47
 800fc34:	d1be      	bne.n	800fbb4 <_printf_float+0x100>
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d1bc      	bne.n	800fbb4 <_printf_float+0x100>
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	e7b9      	b.n	800fbb2 <_printf_float+0xfe>
 800fc3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fc42:	d118      	bne.n	800fc76 <_printf_float+0x1c2>
 800fc44:	2900      	cmp	r1, #0
 800fc46:	6863      	ldr	r3, [r4, #4]
 800fc48:	dd0b      	ble.n	800fc62 <_printf_float+0x1ae>
 800fc4a:	6121      	str	r1, [r4, #16]
 800fc4c:	b913      	cbnz	r3, 800fc54 <_printf_float+0x1a0>
 800fc4e:	6822      	ldr	r2, [r4, #0]
 800fc50:	07d0      	lsls	r0, r2, #31
 800fc52:	d502      	bpl.n	800fc5a <_printf_float+0x1a6>
 800fc54:	3301      	adds	r3, #1
 800fc56:	440b      	add	r3, r1
 800fc58:	6123      	str	r3, [r4, #16]
 800fc5a:	65a1      	str	r1, [r4, #88]	; 0x58
 800fc5c:	f04f 0900 	mov.w	r9, #0
 800fc60:	e7de      	b.n	800fc20 <_printf_float+0x16c>
 800fc62:	b913      	cbnz	r3, 800fc6a <_printf_float+0x1b6>
 800fc64:	6822      	ldr	r2, [r4, #0]
 800fc66:	07d2      	lsls	r2, r2, #31
 800fc68:	d501      	bpl.n	800fc6e <_printf_float+0x1ba>
 800fc6a:	3302      	adds	r3, #2
 800fc6c:	e7f4      	b.n	800fc58 <_printf_float+0x1a4>
 800fc6e:	2301      	movs	r3, #1
 800fc70:	e7f2      	b.n	800fc58 <_printf_float+0x1a4>
 800fc72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fc76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc78:	4299      	cmp	r1, r3
 800fc7a:	db05      	blt.n	800fc88 <_printf_float+0x1d4>
 800fc7c:	6823      	ldr	r3, [r4, #0]
 800fc7e:	6121      	str	r1, [r4, #16]
 800fc80:	07d8      	lsls	r0, r3, #31
 800fc82:	d5ea      	bpl.n	800fc5a <_printf_float+0x1a6>
 800fc84:	1c4b      	adds	r3, r1, #1
 800fc86:	e7e7      	b.n	800fc58 <_printf_float+0x1a4>
 800fc88:	2900      	cmp	r1, #0
 800fc8a:	bfd4      	ite	le
 800fc8c:	f1c1 0202 	rsble	r2, r1, #2
 800fc90:	2201      	movgt	r2, #1
 800fc92:	4413      	add	r3, r2
 800fc94:	e7e0      	b.n	800fc58 <_printf_float+0x1a4>
 800fc96:	6823      	ldr	r3, [r4, #0]
 800fc98:	055a      	lsls	r2, r3, #21
 800fc9a:	d407      	bmi.n	800fcac <_printf_float+0x1f8>
 800fc9c:	6923      	ldr	r3, [r4, #16]
 800fc9e:	4642      	mov	r2, r8
 800fca0:	4631      	mov	r1, r6
 800fca2:	4628      	mov	r0, r5
 800fca4:	47b8      	blx	r7
 800fca6:	3001      	adds	r0, #1
 800fca8:	d12c      	bne.n	800fd04 <_printf_float+0x250>
 800fcaa:	e764      	b.n	800fb76 <_printf_float+0xc2>
 800fcac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fcb0:	f240 80e0 	bls.w	800fe74 <_printf_float+0x3c0>
 800fcb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fcb8:	2200      	movs	r2, #0
 800fcba:	2300      	movs	r3, #0
 800fcbc:	f7f0 ff0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	d034      	beq.n	800fd2e <_printf_float+0x27a>
 800fcc4:	4a37      	ldr	r2, [pc, #220]	; (800fda4 <_printf_float+0x2f0>)
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	4631      	mov	r1, r6
 800fcca:	4628      	mov	r0, r5
 800fccc:	47b8      	blx	r7
 800fcce:	3001      	adds	r0, #1
 800fcd0:	f43f af51 	beq.w	800fb76 <_printf_float+0xc2>
 800fcd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	db02      	blt.n	800fce2 <_printf_float+0x22e>
 800fcdc:	6823      	ldr	r3, [r4, #0]
 800fcde:	07d8      	lsls	r0, r3, #31
 800fce0:	d510      	bpl.n	800fd04 <_printf_float+0x250>
 800fce2:	ee18 3a10 	vmov	r3, s16
 800fce6:	4652      	mov	r2, sl
 800fce8:	4631      	mov	r1, r6
 800fcea:	4628      	mov	r0, r5
 800fcec:	47b8      	blx	r7
 800fcee:	3001      	adds	r0, #1
 800fcf0:	f43f af41 	beq.w	800fb76 <_printf_float+0xc2>
 800fcf4:	f04f 0800 	mov.w	r8, #0
 800fcf8:	f104 091a 	add.w	r9, r4, #26
 800fcfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcfe:	3b01      	subs	r3, #1
 800fd00:	4543      	cmp	r3, r8
 800fd02:	dc09      	bgt.n	800fd18 <_printf_float+0x264>
 800fd04:	6823      	ldr	r3, [r4, #0]
 800fd06:	079b      	lsls	r3, r3, #30
 800fd08:	f100 8105 	bmi.w	800ff16 <_printf_float+0x462>
 800fd0c:	68e0      	ldr	r0, [r4, #12]
 800fd0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd10:	4298      	cmp	r0, r3
 800fd12:	bfb8      	it	lt
 800fd14:	4618      	movlt	r0, r3
 800fd16:	e730      	b.n	800fb7a <_printf_float+0xc6>
 800fd18:	2301      	movs	r3, #1
 800fd1a:	464a      	mov	r2, r9
 800fd1c:	4631      	mov	r1, r6
 800fd1e:	4628      	mov	r0, r5
 800fd20:	47b8      	blx	r7
 800fd22:	3001      	adds	r0, #1
 800fd24:	f43f af27 	beq.w	800fb76 <_printf_float+0xc2>
 800fd28:	f108 0801 	add.w	r8, r8, #1
 800fd2c:	e7e6      	b.n	800fcfc <_printf_float+0x248>
 800fd2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	dc39      	bgt.n	800fda8 <_printf_float+0x2f4>
 800fd34:	4a1b      	ldr	r2, [pc, #108]	; (800fda4 <_printf_float+0x2f0>)
 800fd36:	2301      	movs	r3, #1
 800fd38:	4631      	mov	r1, r6
 800fd3a:	4628      	mov	r0, r5
 800fd3c:	47b8      	blx	r7
 800fd3e:	3001      	adds	r0, #1
 800fd40:	f43f af19 	beq.w	800fb76 <_printf_float+0xc2>
 800fd44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fd48:	4313      	orrs	r3, r2
 800fd4a:	d102      	bne.n	800fd52 <_printf_float+0x29e>
 800fd4c:	6823      	ldr	r3, [r4, #0]
 800fd4e:	07d9      	lsls	r1, r3, #31
 800fd50:	d5d8      	bpl.n	800fd04 <_printf_float+0x250>
 800fd52:	ee18 3a10 	vmov	r3, s16
 800fd56:	4652      	mov	r2, sl
 800fd58:	4631      	mov	r1, r6
 800fd5a:	4628      	mov	r0, r5
 800fd5c:	47b8      	blx	r7
 800fd5e:	3001      	adds	r0, #1
 800fd60:	f43f af09 	beq.w	800fb76 <_printf_float+0xc2>
 800fd64:	f04f 0900 	mov.w	r9, #0
 800fd68:	f104 0a1a 	add.w	sl, r4, #26
 800fd6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd6e:	425b      	negs	r3, r3
 800fd70:	454b      	cmp	r3, r9
 800fd72:	dc01      	bgt.n	800fd78 <_printf_float+0x2c4>
 800fd74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd76:	e792      	b.n	800fc9e <_printf_float+0x1ea>
 800fd78:	2301      	movs	r3, #1
 800fd7a:	4652      	mov	r2, sl
 800fd7c:	4631      	mov	r1, r6
 800fd7e:	4628      	mov	r0, r5
 800fd80:	47b8      	blx	r7
 800fd82:	3001      	adds	r0, #1
 800fd84:	f43f aef7 	beq.w	800fb76 <_printf_float+0xc2>
 800fd88:	f109 0901 	add.w	r9, r9, #1
 800fd8c:	e7ee      	b.n	800fd6c <_printf_float+0x2b8>
 800fd8e:	bf00      	nop
 800fd90:	7fefffff 	.word	0x7fefffff
 800fd94:	08014564 	.word	0x08014564
 800fd98:	08014568 	.word	0x08014568
 800fd9c:	08014570 	.word	0x08014570
 800fda0:	0801456c 	.word	0x0801456c
 800fda4:	08014574 	.word	0x08014574
 800fda8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fdaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fdac:	429a      	cmp	r2, r3
 800fdae:	bfa8      	it	ge
 800fdb0:	461a      	movge	r2, r3
 800fdb2:	2a00      	cmp	r2, #0
 800fdb4:	4691      	mov	r9, r2
 800fdb6:	dc37      	bgt.n	800fe28 <_printf_float+0x374>
 800fdb8:	f04f 0b00 	mov.w	fp, #0
 800fdbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fdc0:	f104 021a 	add.w	r2, r4, #26
 800fdc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fdc6:	9305      	str	r3, [sp, #20]
 800fdc8:	eba3 0309 	sub.w	r3, r3, r9
 800fdcc:	455b      	cmp	r3, fp
 800fdce:	dc33      	bgt.n	800fe38 <_printf_float+0x384>
 800fdd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	db3b      	blt.n	800fe50 <_printf_float+0x39c>
 800fdd8:	6823      	ldr	r3, [r4, #0]
 800fdda:	07da      	lsls	r2, r3, #31
 800fddc:	d438      	bmi.n	800fe50 <_printf_float+0x39c>
 800fdde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fde0:	9b05      	ldr	r3, [sp, #20]
 800fde2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fde4:	1ad3      	subs	r3, r2, r3
 800fde6:	eba2 0901 	sub.w	r9, r2, r1
 800fdea:	4599      	cmp	r9, r3
 800fdec:	bfa8      	it	ge
 800fdee:	4699      	movge	r9, r3
 800fdf0:	f1b9 0f00 	cmp.w	r9, #0
 800fdf4:	dc35      	bgt.n	800fe62 <_printf_float+0x3ae>
 800fdf6:	f04f 0800 	mov.w	r8, #0
 800fdfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fdfe:	f104 0a1a 	add.w	sl, r4, #26
 800fe02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fe06:	1a9b      	subs	r3, r3, r2
 800fe08:	eba3 0309 	sub.w	r3, r3, r9
 800fe0c:	4543      	cmp	r3, r8
 800fe0e:	f77f af79 	ble.w	800fd04 <_printf_float+0x250>
 800fe12:	2301      	movs	r3, #1
 800fe14:	4652      	mov	r2, sl
 800fe16:	4631      	mov	r1, r6
 800fe18:	4628      	mov	r0, r5
 800fe1a:	47b8      	blx	r7
 800fe1c:	3001      	adds	r0, #1
 800fe1e:	f43f aeaa 	beq.w	800fb76 <_printf_float+0xc2>
 800fe22:	f108 0801 	add.w	r8, r8, #1
 800fe26:	e7ec      	b.n	800fe02 <_printf_float+0x34e>
 800fe28:	4613      	mov	r3, r2
 800fe2a:	4631      	mov	r1, r6
 800fe2c:	4642      	mov	r2, r8
 800fe2e:	4628      	mov	r0, r5
 800fe30:	47b8      	blx	r7
 800fe32:	3001      	adds	r0, #1
 800fe34:	d1c0      	bne.n	800fdb8 <_printf_float+0x304>
 800fe36:	e69e      	b.n	800fb76 <_printf_float+0xc2>
 800fe38:	2301      	movs	r3, #1
 800fe3a:	4631      	mov	r1, r6
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	9205      	str	r2, [sp, #20]
 800fe40:	47b8      	blx	r7
 800fe42:	3001      	adds	r0, #1
 800fe44:	f43f ae97 	beq.w	800fb76 <_printf_float+0xc2>
 800fe48:	9a05      	ldr	r2, [sp, #20]
 800fe4a:	f10b 0b01 	add.w	fp, fp, #1
 800fe4e:	e7b9      	b.n	800fdc4 <_printf_float+0x310>
 800fe50:	ee18 3a10 	vmov	r3, s16
 800fe54:	4652      	mov	r2, sl
 800fe56:	4631      	mov	r1, r6
 800fe58:	4628      	mov	r0, r5
 800fe5a:	47b8      	blx	r7
 800fe5c:	3001      	adds	r0, #1
 800fe5e:	d1be      	bne.n	800fdde <_printf_float+0x32a>
 800fe60:	e689      	b.n	800fb76 <_printf_float+0xc2>
 800fe62:	9a05      	ldr	r2, [sp, #20]
 800fe64:	464b      	mov	r3, r9
 800fe66:	4442      	add	r2, r8
 800fe68:	4631      	mov	r1, r6
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	47b8      	blx	r7
 800fe6e:	3001      	adds	r0, #1
 800fe70:	d1c1      	bne.n	800fdf6 <_printf_float+0x342>
 800fe72:	e680      	b.n	800fb76 <_printf_float+0xc2>
 800fe74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe76:	2a01      	cmp	r2, #1
 800fe78:	dc01      	bgt.n	800fe7e <_printf_float+0x3ca>
 800fe7a:	07db      	lsls	r3, r3, #31
 800fe7c:	d538      	bpl.n	800fef0 <_printf_float+0x43c>
 800fe7e:	2301      	movs	r3, #1
 800fe80:	4642      	mov	r2, r8
 800fe82:	4631      	mov	r1, r6
 800fe84:	4628      	mov	r0, r5
 800fe86:	47b8      	blx	r7
 800fe88:	3001      	adds	r0, #1
 800fe8a:	f43f ae74 	beq.w	800fb76 <_printf_float+0xc2>
 800fe8e:	ee18 3a10 	vmov	r3, s16
 800fe92:	4652      	mov	r2, sl
 800fe94:	4631      	mov	r1, r6
 800fe96:	4628      	mov	r0, r5
 800fe98:	47b8      	blx	r7
 800fe9a:	3001      	adds	r0, #1
 800fe9c:	f43f ae6b 	beq.w	800fb76 <_printf_float+0xc2>
 800fea0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fea4:	2200      	movs	r2, #0
 800fea6:	2300      	movs	r3, #0
 800fea8:	f7f0 fe16 	bl	8000ad8 <__aeabi_dcmpeq>
 800feac:	b9d8      	cbnz	r0, 800fee6 <_printf_float+0x432>
 800feae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800feb0:	f108 0201 	add.w	r2, r8, #1
 800feb4:	3b01      	subs	r3, #1
 800feb6:	4631      	mov	r1, r6
 800feb8:	4628      	mov	r0, r5
 800feba:	47b8      	blx	r7
 800febc:	3001      	adds	r0, #1
 800febe:	d10e      	bne.n	800fede <_printf_float+0x42a>
 800fec0:	e659      	b.n	800fb76 <_printf_float+0xc2>
 800fec2:	2301      	movs	r3, #1
 800fec4:	4652      	mov	r2, sl
 800fec6:	4631      	mov	r1, r6
 800fec8:	4628      	mov	r0, r5
 800feca:	47b8      	blx	r7
 800fecc:	3001      	adds	r0, #1
 800fece:	f43f ae52 	beq.w	800fb76 <_printf_float+0xc2>
 800fed2:	f108 0801 	add.w	r8, r8, #1
 800fed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fed8:	3b01      	subs	r3, #1
 800feda:	4543      	cmp	r3, r8
 800fedc:	dcf1      	bgt.n	800fec2 <_printf_float+0x40e>
 800fede:	464b      	mov	r3, r9
 800fee0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fee4:	e6dc      	b.n	800fca0 <_printf_float+0x1ec>
 800fee6:	f04f 0800 	mov.w	r8, #0
 800feea:	f104 0a1a 	add.w	sl, r4, #26
 800feee:	e7f2      	b.n	800fed6 <_printf_float+0x422>
 800fef0:	2301      	movs	r3, #1
 800fef2:	4642      	mov	r2, r8
 800fef4:	e7df      	b.n	800feb6 <_printf_float+0x402>
 800fef6:	2301      	movs	r3, #1
 800fef8:	464a      	mov	r2, r9
 800fefa:	4631      	mov	r1, r6
 800fefc:	4628      	mov	r0, r5
 800fefe:	47b8      	blx	r7
 800ff00:	3001      	adds	r0, #1
 800ff02:	f43f ae38 	beq.w	800fb76 <_printf_float+0xc2>
 800ff06:	f108 0801 	add.w	r8, r8, #1
 800ff0a:	68e3      	ldr	r3, [r4, #12]
 800ff0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ff0e:	1a5b      	subs	r3, r3, r1
 800ff10:	4543      	cmp	r3, r8
 800ff12:	dcf0      	bgt.n	800fef6 <_printf_float+0x442>
 800ff14:	e6fa      	b.n	800fd0c <_printf_float+0x258>
 800ff16:	f04f 0800 	mov.w	r8, #0
 800ff1a:	f104 0919 	add.w	r9, r4, #25
 800ff1e:	e7f4      	b.n	800ff0a <_printf_float+0x456>

0800ff20 <_printf_common>:
 800ff20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff24:	4616      	mov	r6, r2
 800ff26:	4699      	mov	r9, r3
 800ff28:	688a      	ldr	r2, [r1, #8]
 800ff2a:	690b      	ldr	r3, [r1, #16]
 800ff2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ff30:	4293      	cmp	r3, r2
 800ff32:	bfb8      	it	lt
 800ff34:	4613      	movlt	r3, r2
 800ff36:	6033      	str	r3, [r6, #0]
 800ff38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ff3c:	4607      	mov	r7, r0
 800ff3e:	460c      	mov	r4, r1
 800ff40:	b10a      	cbz	r2, 800ff46 <_printf_common+0x26>
 800ff42:	3301      	adds	r3, #1
 800ff44:	6033      	str	r3, [r6, #0]
 800ff46:	6823      	ldr	r3, [r4, #0]
 800ff48:	0699      	lsls	r1, r3, #26
 800ff4a:	bf42      	ittt	mi
 800ff4c:	6833      	ldrmi	r3, [r6, #0]
 800ff4e:	3302      	addmi	r3, #2
 800ff50:	6033      	strmi	r3, [r6, #0]
 800ff52:	6825      	ldr	r5, [r4, #0]
 800ff54:	f015 0506 	ands.w	r5, r5, #6
 800ff58:	d106      	bne.n	800ff68 <_printf_common+0x48>
 800ff5a:	f104 0a19 	add.w	sl, r4, #25
 800ff5e:	68e3      	ldr	r3, [r4, #12]
 800ff60:	6832      	ldr	r2, [r6, #0]
 800ff62:	1a9b      	subs	r3, r3, r2
 800ff64:	42ab      	cmp	r3, r5
 800ff66:	dc26      	bgt.n	800ffb6 <_printf_common+0x96>
 800ff68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff6c:	1e13      	subs	r3, r2, #0
 800ff6e:	6822      	ldr	r2, [r4, #0]
 800ff70:	bf18      	it	ne
 800ff72:	2301      	movne	r3, #1
 800ff74:	0692      	lsls	r2, r2, #26
 800ff76:	d42b      	bmi.n	800ffd0 <_printf_common+0xb0>
 800ff78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff7c:	4649      	mov	r1, r9
 800ff7e:	4638      	mov	r0, r7
 800ff80:	47c0      	blx	r8
 800ff82:	3001      	adds	r0, #1
 800ff84:	d01e      	beq.n	800ffc4 <_printf_common+0xa4>
 800ff86:	6823      	ldr	r3, [r4, #0]
 800ff88:	68e5      	ldr	r5, [r4, #12]
 800ff8a:	6832      	ldr	r2, [r6, #0]
 800ff8c:	f003 0306 	and.w	r3, r3, #6
 800ff90:	2b04      	cmp	r3, #4
 800ff92:	bf08      	it	eq
 800ff94:	1aad      	subeq	r5, r5, r2
 800ff96:	68a3      	ldr	r3, [r4, #8]
 800ff98:	6922      	ldr	r2, [r4, #16]
 800ff9a:	bf0c      	ite	eq
 800ff9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ffa0:	2500      	movne	r5, #0
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	bfc4      	itt	gt
 800ffa6:	1a9b      	subgt	r3, r3, r2
 800ffa8:	18ed      	addgt	r5, r5, r3
 800ffaa:	2600      	movs	r6, #0
 800ffac:	341a      	adds	r4, #26
 800ffae:	42b5      	cmp	r5, r6
 800ffb0:	d11a      	bne.n	800ffe8 <_printf_common+0xc8>
 800ffb2:	2000      	movs	r0, #0
 800ffb4:	e008      	b.n	800ffc8 <_printf_common+0xa8>
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	4652      	mov	r2, sl
 800ffba:	4649      	mov	r1, r9
 800ffbc:	4638      	mov	r0, r7
 800ffbe:	47c0      	blx	r8
 800ffc0:	3001      	adds	r0, #1
 800ffc2:	d103      	bne.n	800ffcc <_printf_common+0xac>
 800ffc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffcc:	3501      	adds	r5, #1
 800ffce:	e7c6      	b.n	800ff5e <_printf_common+0x3e>
 800ffd0:	18e1      	adds	r1, r4, r3
 800ffd2:	1c5a      	adds	r2, r3, #1
 800ffd4:	2030      	movs	r0, #48	; 0x30
 800ffd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ffda:	4422      	add	r2, r4
 800ffdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ffe0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ffe4:	3302      	adds	r3, #2
 800ffe6:	e7c7      	b.n	800ff78 <_printf_common+0x58>
 800ffe8:	2301      	movs	r3, #1
 800ffea:	4622      	mov	r2, r4
 800ffec:	4649      	mov	r1, r9
 800ffee:	4638      	mov	r0, r7
 800fff0:	47c0      	blx	r8
 800fff2:	3001      	adds	r0, #1
 800fff4:	d0e6      	beq.n	800ffc4 <_printf_common+0xa4>
 800fff6:	3601      	adds	r6, #1
 800fff8:	e7d9      	b.n	800ffae <_printf_common+0x8e>
	...

0800fffc <_printf_i>:
 800fffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010000:	460c      	mov	r4, r1
 8010002:	4691      	mov	r9, r2
 8010004:	7e27      	ldrb	r7, [r4, #24]
 8010006:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010008:	2f78      	cmp	r7, #120	; 0x78
 801000a:	4680      	mov	r8, r0
 801000c:	469a      	mov	sl, r3
 801000e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010012:	d807      	bhi.n	8010024 <_printf_i+0x28>
 8010014:	2f62      	cmp	r7, #98	; 0x62
 8010016:	d80a      	bhi.n	801002e <_printf_i+0x32>
 8010018:	2f00      	cmp	r7, #0
 801001a:	f000 80d8 	beq.w	80101ce <_printf_i+0x1d2>
 801001e:	2f58      	cmp	r7, #88	; 0x58
 8010020:	f000 80a3 	beq.w	801016a <_printf_i+0x16e>
 8010024:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010028:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801002c:	e03a      	b.n	80100a4 <_printf_i+0xa8>
 801002e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010032:	2b15      	cmp	r3, #21
 8010034:	d8f6      	bhi.n	8010024 <_printf_i+0x28>
 8010036:	a001      	add	r0, pc, #4	; (adr r0, 801003c <_printf_i+0x40>)
 8010038:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801003c:	08010095 	.word	0x08010095
 8010040:	080100a9 	.word	0x080100a9
 8010044:	08010025 	.word	0x08010025
 8010048:	08010025 	.word	0x08010025
 801004c:	08010025 	.word	0x08010025
 8010050:	08010025 	.word	0x08010025
 8010054:	080100a9 	.word	0x080100a9
 8010058:	08010025 	.word	0x08010025
 801005c:	08010025 	.word	0x08010025
 8010060:	08010025 	.word	0x08010025
 8010064:	08010025 	.word	0x08010025
 8010068:	080101b5 	.word	0x080101b5
 801006c:	080100d9 	.word	0x080100d9
 8010070:	08010197 	.word	0x08010197
 8010074:	08010025 	.word	0x08010025
 8010078:	08010025 	.word	0x08010025
 801007c:	080101d7 	.word	0x080101d7
 8010080:	08010025 	.word	0x08010025
 8010084:	080100d9 	.word	0x080100d9
 8010088:	08010025 	.word	0x08010025
 801008c:	08010025 	.word	0x08010025
 8010090:	0801019f 	.word	0x0801019f
 8010094:	680b      	ldr	r3, [r1, #0]
 8010096:	1d1a      	adds	r2, r3, #4
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	600a      	str	r2, [r1, #0]
 801009c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80100a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80100a4:	2301      	movs	r3, #1
 80100a6:	e0a3      	b.n	80101f0 <_printf_i+0x1f4>
 80100a8:	6825      	ldr	r5, [r4, #0]
 80100aa:	6808      	ldr	r0, [r1, #0]
 80100ac:	062e      	lsls	r6, r5, #24
 80100ae:	f100 0304 	add.w	r3, r0, #4
 80100b2:	d50a      	bpl.n	80100ca <_printf_i+0xce>
 80100b4:	6805      	ldr	r5, [r0, #0]
 80100b6:	600b      	str	r3, [r1, #0]
 80100b8:	2d00      	cmp	r5, #0
 80100ba:	da03      	bge.n	80100c4 <_printf_i+0xc8>
 80100bc:	232d      	movs	r3, #45	; 0x2d
 80100be:	426d      	negs	r5, r5
 80100c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100c4:	485e      	ldr	r0, [pc, #376]	; (8010240 <_printf_i+0x244>)
 80100c6:	230a      	movs	r3, #10
 80100c8:	e019      	b.n	80100fe <_printf_i+0x102>
 80100ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80100ce:	6805      	ldr	r5, [r0, #0]
 80100d0:	600b      	str	r3, [r1, #0]
 80100d2:	bf18      	it	ne
 80100d4:	b22d      	sxthne	r5, r5
 80100d6:	e7ef      	b.n	80100b8 <_printf_i+0xbc>
 80100d8:	680b      	ldr	r3, [r1, #0]
 80100da:	6825      	ldr	r5, [r4, #0]
 80100dc:	1d18      	adds	r0, r3, #4
 80100de:	6008      	str	r0, [r1, #0]
 80100e0:	0628      	lsls	r0, r5, #24
 80100e2:	d501      	bpl.n	80100e8 <_printf_i+0xec>
 80100e4:	681d      	ldr	r5, [r3, #0]
 80100e6:	e002      	b.n	80100ee <_printf_i+0xf2>
 80100e8:	0669      	lsls	r1, r5, #25
 80100ea:	d5fb      	bpl.n	80100e4 <_printf_i+0xe8>
 80100ec:	881d      	ldrh	r5, [r3, #0]
 80100ee:	4854      	ldr	r0, [pc, #336]	; (8010240 <_printf_i+0x244>)
 80100f0:	2f6f      	cmp	r7, #111	; 0x6f
 80100f2:	bf0c      	ite	eq
 80100f4:	2308      	moveq	r3, #8
 80100f6:	230a      	movne	r3, #10
 80100f8:	2100      	movs	r1, #0
 80100fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80100fe:	6866      	ldr	r6, [r4, #4]
 8010100:	60a6      	str	r6, [r4, #8]
 8010102:	2e00      	cmp	r6, #0
 8010104:	bfa2      	ittt	ge
 8010106:	6821      	ldrge	r1, [r4, #0]
 8010108:	f021 0104 	bicge.w	r1, r1, #4
 801010c:	6021      	strge	r1, [r4, #0]
 801010e:	b90d      	cbnz	r5, 8010114 <_printf_i+0x118>
 8010110:	2e00      	cmp	r6, #0
 8010112:	d04d      	beq.n	80101b0 <_printf_i+0x1b4>
 8010114:	4616      	mov	r6, r2
 8010116:	fbb5 f1f3 	udiv	r1, r5, r3
 801011a:	fb03 5711 	mls	r7, r3, r1, r5
 801011e:	5dc7      	ldrb	r7, [r0, r7]
 8010120:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010124:	462f      	mov	r7, r5
 8010126:	42bb      	cmp	r3, r7
 8010128:	460d      	mov	r5, r1
 801012a:	d9f4      	bls.n	8010116 <_printf_i+0x11a>
 801012c:	2b08      	cmp	r3, #8
 801012e:	d10b      	bne.n	8010148 <_printf_i+0x14c>
 8010130:	6823      	ldr	r3, [r4, #0]
 8010132:	07df      	lsls	r7, r3, #31
 8010134:	d508      	bpl.n	8010148 <_printf_i+0x14c>
 8010136:	6923      	ldr	r3, [r4, #16]
 8010138:	6861      	ldr	r1, [r4, #4]
 801013a:	4299      	cmp	r1, r3
 801013c:	bfde      	ittt	le
 801013e:	2330      	movle	r3, #48	; 0x30
 8010140:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010144:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010148:	1b92      	subs	r2, r2, r6
 801014a:	6122      	str	r2, [r4, #16]
 801014c:	f8cd a000 	str.w	sl, [sp]
 8010150:	464b      	mov	r3, r9
 8010152:	aa03      	add	r2, sp, #12
 8010154:	4621      	mov	r1, r4
 8010156:	4640      	mov	r0, r8
 8010158:	f7ff fee2 	bl	800ff20 <_printf_common>
 801015c:	3001      	adds	r0, #1
 801015e:	d14c      	bne.n	80101fa <_printf_i+0x1fe>
 8010160:	f04f 30ff 	mov.w	r0, #4294967295
 8010164:	b004      	add	sp, #16
 8010166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801016a:	4835      	ldr	r0, [pc, #212]	; (8010240 <_printf_i+0x244>)
 801016c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010170:	6823      	ldr	r3, [r4, #0]
 8010172:	680e      	ldr	r6, [r1, #0]
 8010174:	061f      	lsls	r7, r3, #24
 8010176:	f856 5b04 	ldr.w	r5, [r6], #4
 801017a:	600e      	str	r6, [r1, #0]
 801017c:	d514      	bpl.n	80101a8 <_printf_i+0x1ac>
 801017e:	07d9      	lsls	r1, r3, #31
 8010180:	bf44      	itt	mi
 8010182:	f043 0320 	orrmi.w	r3, r3, #32
 8010186:	6023      	strmi	r3, [r4, #0]
 8010188:	b91d      	cbnz	r5, 8010192 <_printf_i+0x196>
 801018a:	6823      	ldr	r3, [r4, #0]
 801018c:	f023 0320 	bic.w	r3, r3, #32
 8010190:	6023      	str	r3, [r4, #0]
 8010192:	2310      	movs	r3, #16
 8010194:	e7b0      	b.n	80100f8 <_printf_i+0xfc>
 8010196:	6823      	ldr	r3, [r4, #0]
 8010198:	f043 0320 	orr.w	r3, r3, #32
 801019c:	6023      	str	r3, [r4, #0]
 801019e:	2378      	movs	r3, #120	; 0x78
 80101a0:	4828      	ldr	r0, [pc, #160]	; (8010244 <_printf_i+0x248>)
 80101a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80101a6:	e7e3      	b.n	8010170 <_printf_i+0x174>
 80101a8:	065e      	lsls	r6, r3, #25
 80101aa:	bf48      	it	mi
 80101ac:	b2ad      	uxthmi	r5, r5
 80101ae:	e7e6      	b.n	801017e <_printf_i+0x182>
 80101b0:	4616      	mov	r6, r2
 80101b2:	e7bb      	b.n	801012c <_printf_i+0x130>
 80101b4:	680b      	ldr	r3, [r1, #0]
 80101b6:	6826      	ldr	r6, [r4, #0]
 80101b8:	6960      	ldr	r0, [r4, #20]
 80101ba:	1d1d      	adds	r5, r3, #4
 80101bc:	600d      	str	r5, [r1, #0]
 80101be:	0635      	lsls	r5, r6, #24
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	d501      	bpl.n	80101c8 <_printf_i+0x1cc>
 80101c4:	6018      	str	r0, [r3, #0]
 80101c6:	e002      	b.n	80101ce <_printf_i+0x1d2>
 80101c8:	0671      	lsls	r1, r6, #25
 80101ca:	d5fb      	bpl.n	80101c4 <_printf_i+0x1c8>
 80101cc:	8018      	strh	r0, [r3, #0]
 80101ce:	2300      	movs	r3, #0
 80101d0:	6123      	str	r3, [r4, #16]
 80101d2:	4616      	mov	r6, r2
 80101d4:	e7ba      	b.n	801014c <_printf_i+0x150>
 80101d6:	680b      	ldr	r3, [r1, #0]
 80101d8:	1d1a      	adds	r2, r3, #4
 80101da:	600a      	str	r2, [r1, #0]
 80101dc:	681e      	ldr	r6, [r3, #0]
 80101de:	6862      	ldr	r2, [r4, #4]
 80101e0:	2100      	movs	r1, #0
 80101e2:	4630      	mov	r0, r6
 80101e4:	f7f0 f804 	bl	80001f0 <memchr>
 80101e8:	b108      	cbz	r0, 80101ee <_printf_i+0x1f2>
 80101ea:	1b80      	subs	r0, r0, r6
 80101ec:	6060      	str	r0, [r4, #4]
 80101ee:	6863      	ldr	r3, [r4, #4]
 80101f0:	6123      	str	r3, [r4, #16]
 80101f2:	2300      	movs	r3, #0
 80101f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101f8:	e7a8      	b.n	801014c <_printf_i+0x150>
 80101fa:	6923      	ldr	r3, [r4, #16]
 80101fc:	4632      	mov	r2, r6
 80101fe:	4649      	mov	r1, r9
 8010200:	4640      	mov	r0, r8
 8010202:	47d0      	blx	sl
 8010204:	3001      	adds	r0, #1
 8010206:	d0ab      	beq.n	8010160 <_printf_i+0x164>
 8010208:	6823      	ldr	r3, [r4, #0]
 801020a:	079b      	lsls	r3, r3, #30
 801020c:	d413      	bmi.n	8010236 <_printf_i+0x23a>
 801020e:	68e0      	ldr	r0, [r4, #12]
 8010210:	9b03      	ldr	r3, [sp, #12]
 8010212:	4298      	cmp	r0, r3
 8010214:	bfb8      	it	lt
 8010216:	4618      	movlt	r0, r3
 8010218:	e7a4      	b.n	8010164 <_printf_i+0x168>
 801021a:	2301      	movs	r3, #1
 801021c:	4632      	mov	r2, r6
 801021e:	4649      	mov	r1, r9
 8010220:	4640      	mov	r0, r8
 8010222:	47d0      	blx	sl
 8010224:	3001      	adds	r0, #1
 8010226:	d09b      	beq.n	8010160 <_printf_i+0x164>
 8010228:	3501      	adds	r5, #1
 801022a:	68e3      	ldr	r3, [r4, #12]
 801022c:	9903      	ldr	r1, [sp, #12]
 801022e:	1a5b      	subs	r3, r3, r1
 8010230:	42ab      	cmp	r3, r5
 8010232:	dcf2      	bgt.n	801021a <_printf_i+0x21e>
 8010234:	e7eb      	b.n	801020e <_printf_i+0x212>
 8010236:	2500      	movs	r5, #0
 8010238:	f104 0619 	add.w	r6, r4, #25
 801023c:	e7f5      	b.n	801022a <_printf_i+0x22e>
 801023e:	bf00      	nop
 8010240:	08014576 	.word	0x08014576
 8010244:	08014587 	.word	0x08014587

08010248 <iprintf>:
 8010248:	b40f      	push	{r0, r1, r2, r3}
 801024a:	4b0a      	ldr	r3, [pc, #40]	; (8010274 <iprintf+0x2c>)
 801024c:	b513      	push	{r0, r1, r4, lr}
 801024e:	681c      	ldr	r4, [r3, #0]
 8010250:	b124      	cbz	r4, 801025c <iprintf+0x14>
 8010252:	69a3      	ldr	r3, [r4, #24]
 8010254:	b913      	cbnz	r3, 801025c <iprintf+0x14>
 8010256:	4620      	mov	r0, r4
 8010258:	f001 f964 	bl	8011524 <__sinit>
 801025c:	ab05      	add	r3, sp, #20
 801025e:	9a04      	ldr	r2, [sp, #16]
 8010260:	68a1      	ldr	r1, [r4, #8]
 8010262:	9301      	str	r3, [sp, #4]
 8010264:	4620      	mov	r0, r4
 8010266:	f001 fed1 	bl	801200c <_vfiprintf_r>
 801026a:	b002      	add	sp, #8
 801026c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010270:	b004      	add	sp, #16
 8010272:	4770      	bx	lr
 8010274:	2000001c 	.word	0x2000001c

08010278 <_puts_r>:
 8010278:	b570      	push	{r4, r5, r6, lr}
 801027a:	460e      	mov	r6, r1
 801027c:	4605      	mov	r5, r0
 801027e:	b118      	cbz	r0, 8010288 <_puts_r+0x10>
 8010280:	6983      	ldr	r3, [r0, #24]
 8010282:	b90b      	cbnz	r3, 8010288 <_puts_r+0x10>
 8010284:	f001 f94e 	bl	8011524 <__sinit>
 8010288:	69ab      	ldr	r3, [r5, #24]
 801028a:	68ac      	ldr	r4, [r5, #8]
 801028c:	b913      	cbnz	r3, 8010294 <_puts_r+0x1c>
 801028e:	4628      	mov	r0, r5
 8010290:	f001 f948 	bl	8011524 <__sinit>
 8010294:	4b2c      	ldr	r3, [pc, #176]	; (8010348 <_puts_r+0xd0>)
 8010296:	429c      	cmp	r4, r3
 8010298:	d120      	bne.n	80102dc <_puts_r+0x64>
 801029a:	686c      	ldr	r4, [r5, #4]
 801029c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801029e:	07db      	lsls	r3, r3, #31
 80102a0:	d405      	bmi.n	80102ae <_puts_r+0x36>
 80102a2:	89a3      	ldrh	r3, [r4, #12]
 80102a4:	0598      	lsls	r0, r3, #22
 80102a6:	d402      	bmi.n	80102ae <_puts_r+0x36>
 80102a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102aa:	f001 f9de 	bl	801166a <__retarget_lock_acquire_recursive>
 80102ae:	89a3      	ldrh	r3, [r4, #12]
 80102b0:	0719      	lsls	r1, r3, #28
 80102b2:	d51d      	bpl.n	80102f0 <_puts_r+0x78>
 80102b4:	6923      	ldr	r3, [r4, #16]
 80102b6:	b1db      	cbz	r3, 80102f0 <_puts_r+0x78>
 80102b8:	3e01      	subs	r6, #1
 80102ba:	68a3      	ldr	r3, [r4, #8]
 80102bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80102c0:	3b01      	subs	r3, #1
 80102c2:	60a3      	str	r3, [r4, #8]
 80102c4:	bb39      	cbnz	r1, 8010316 <_puts_r+0x9e>
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	da38      	bge.n	801033c <_puts_r+0xc4>
 80102ca:	4622      	mov	r2, r4
 80102cc:	210a      	movs	r1, #10
 80102ce:	4628      	mov	r0, r5
 80102d0:	f000 f8d6 	bl	8010480 <__swbuf_r>
 80102d4:	3001      	adds	r0, #1
 80102d6:	d011      	beq.n	80102fc <_puts_r+0x84>
 80102d8:	250a      	movs	r5, #10
 80102da:	e011      	b.n	8010300 <_puts_r+0x88>
 80102dc:	4b1b      	ldr	r3, [pc, #108]	; (801034c <_puts_r+0xd4>)
 80102de:	429c      	cmp	r4, r3
 80102e0:	d101      	bne.n	80102e6 <_puts_r+0x6e>
 80102e2:	68ac      	ldr	r4, [r5, #8]
 80102e4:	e7da      	b.n	801029c <_puts_r+0x24>
 80102e6:	4b1a      	ldr	r3, [pc, #104]	; (8010350 <_puts_r+0xd8>)
 80102e8:	429c      	cmp	r4, r3
 80102ea:	bf08      	it	eq
 80102ec:	68ec      	ldreq	r4, [r5, #12]
 80102ee:	e7d5      	b.n	801029c <_puts_r+0x24>
 80102f0:	4621      	mov	r1, r4
 80102f2:	4628      	mov	r0, r5
 80102f4:	f000 f916 	bl	8010524 <__swsetup_r>
 80102f8:	2800      	cmp	r0, #0
 80102fa:	d0dd      	beq.n	80102b8 <_puts_r+0x40>
 80102fc:	f04f 35ff 	mov.w	r5, #4294967295
 8010300:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010302:	07da      	lsls	r2, r3, #31
 8010304:	d405      	bmi.n	8010312 <_puts_r+0x9a>
 8010306:	89a3      	ldrh	r3, [r4, #12]
 8010308:	059b      	lsls	r3, r3, #22
 801030a:	d402      	bmi.n	8010312 <_puts_r+0x9a>
 801030c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801030e:	f001 f9ad 	bl	801166c <__retarget_lock_release_recursive>
 8010312:	4628      	mov	r0, r5
 8010314:	bd70      	pop	{r4, r5, r6, pc}
 8010316:	2b00      	cmp	r3, #0
 8010318:	da04      	bge.n	8010324 <_puts_r+0xac>
 801031a:	69a2      	ldr	r2, [r4, #24]
 801031c:	429a      	cmp	r2, r3
 801031e:	dc06      	bgt.n	801032e <_puts_r+0xb6>
 8010320:	290a      	cmp	r1, #10
 8010322:	d004      	beq.n	801032e <_puts_r+0xb6>
 8010324:	6823      	ldr	r3, [r4, #0]
 8010326:	1c5a      	adds	r2, r3, #1
 8010328:	6022      	str	r2, [r4, #0]
 801032a:	7019      	strb	r1, [r3, #0]
 801032c:	e7c5      	b.n	80102ba <_puts_r+0x42>
 801032e:	4622      	mov	r2, r4
 8010330:	4628      	mov	r0, r5
 8010332:	f000 f8a5 	bl	8010480 <__swbuf_r>
 8010336:	3001      	adds	r0, #1
 8010338:	d1bf      	bne.n	80102ba <_puts_r+0x42>
 801033a:	e7df      	b.n	80102fc <_puts_r+0x84>
 801033c:	6823      	ldr	r3, [r4, #0]
 801033e:	250a      	movs	r5, #10
 8010340:	1c5a      	adds	r2, r3, #1
 8010342:	6022      	str	r2, [r4, #0]
 8010344:	701d      	strb	r5, [r3, #0]
 8010346:	e7db      	b.n	8010300 <_puts_r+0x88>
 8010348:	08014750 	.word	0x08014750
 801034c:	08014770 	.word	0x08014770
 8010350:	08014730 	.word	0x08014730

08010354 <puts>:
 8010354:	4b02      	ldr	r3, [pc, #8]	; (8010360 <puts+0xc>)
 8010356:	4601      	mov	r1, r0
 8010358:	6818      	ldr	r0, [r3, #0]
 801035a:	f7ff bf8d 	b.w	8010278 <_puts_r>
 801035e:	bf00      	nop
 8010360:	2000001c 	.word	0x2000001c

08010364 <_strtol_l.isra.0>:
 8010364:	2b01      	cmp	r3, #1
 8010366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801036a:	d001      	beq.n	8010370 <_strtol_l.isra.0+0xc>
 801036c:	2b24      	cmp	r3, #36	; 0x24
 801036e:	d906      	bls.n	801037e <_strtol_l.isra.0+0x1a>
 8010370:	f7ff fac0 	bl	800f8f4 <__errno>
 8010374:	2316      	movs	r3, #22
 8010376:	6003      	str	r3, [r0, #0]
 8010378:	2000      	movs	r0, #0
 801037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801037e:	4f3a      	ldr	r7, [pc, #232]	; (8010468 <_strtol_l.isra.0+0x104>)
 8010380:	468e      	mov	lr, r1
 8010382:	4676      	mov	r6, lr
 8010384:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8010388:	5de5      	ldrb	r5, [r4, r7]
 801038a:	f015 0508 	ands.w	r5, r5, #8
 801038e:	d1f8      	bne.n	8010382 <_strtol_l.isra.0+0x1e>
 8010390:	2c2d      	cmp	r4, #45	; 0x2d
 8010392:	d134      	bne.n	80103fe <_strtol_l.isra.0+0x9a>
 8010394:	f89e 4000 	ldrb.w	r4, [lr]
 8010398:	f04f 0801 	mov.w	r8, #1
 801039c:	f106 0e02 	add.w	lr, r6, #2
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d05c      	beq.n	801045e <_strtol_l.isra.0+0xfa>
 80103a4:	2b10      	cmp	r3, #16
 80103a6:	d10c      	bne.n	80103c2 <_strtol_l.isra.0+0x5e>
 80103a8:	2c30      	cmp	r4, #48	; 0x30
 80103aa:	d10a      	bne.n	80103c2 <_strtol_l.isra.0+0x5e>
 80103ac:	f89e 4000 	ldrb.w	r4, [lr]
 80103b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80103b4:	2c58      	cmp	r4, #88	; 0x58
 80103b6:	d14d      	bne.n	8010454 <_strtol_l.isra.0+0xf0>
 80103b8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80103bc:	2310      	movs	r3, #16
 80103be:	f10e 0e02 	add.w	lr, lr, #2
 80103c2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80103c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80103ca:	2600      	movs	r6, #0
 80103cc:	fbbc f9f3 	udiv	r9, ip, r3
 80103d0:	4635      	mov	r5, r6
 80103d2:	fb03 ca19 	mls	sl, r3, r9, ip
 80103d6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80103da:	2f09      	cmp	r7, #9
 80103dc:	d818      	bhi.n	8010410 <_strtol_l.isra.0+0xac>
 80103de:	463c      	mov	r4, r7
 80103e0:	42a3      	cmp	r3, r4
 80103e2:	dd24      	ble.n	801042e <_strtol_l.isra.0+0xca>
 80103e4:	2e00      	cmp	r6, #0
 80103e6:	db1f      	blt.n	8010428 <_strtol_l.isra.0+0xc4>
 80103e8:	45a9      	cmp	r9, r5
 80103ea:	d31d      	bcc.n	8010428 <_strtol_l.isra.0+0xc4>
 80103ec:	d101      	bne.n	80103f2 <_strtol_l.isra.0+0x8e>
 80103ee:	45a2      	cmp	sl, r4
 80103f0:	db1a      	blt.n	8010428 <_strtol_l.isra.0+0xc4>
 80103f2:	fb05 4503 	mla	r5, r5, r3, r4
 80103f6:	2601      	movs	r6, #1
 80103f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80103fc:	e7eb      	b.n	80103d6 <_strtol_l.isra.0+0x72>
 80103fe:	2c2b      	cmp	r4, #43	; 0x2b
 8010400:	bf08      	it	eq
 8010402:	f89e 4000 	ldrbeq.w	r4, [lr]
 8010406:	46a8      	mov	r8, r5
 8010408:	bf08      	it	eq
 801040a:	f106 0e02 	addeq.w	lr, r6, #2
 801040e:	e7c7      	b.n	80103a0 <_strtol_l.isra.0+0x3c>
 8010410:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8010414:	2f19      	cmp	r7, #25
 8010416:	d801      	bhi.n	801041c <_strtol_l.isra.0+0xb8>
 8010418:	3c37      	subs	r4, #55	; 0x37
 801041a:	e7e1      	b.n	80103e0 <_strtol_l.isra.0+0x7c>
 801041c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8010420:	2f19      	cmp	r7, #25
 8010422:	d804      	bhi.n	801042e <_strtol_l.isra.0+0xca>
 8010424:	3c57      	subs	r4, #87	; 0x57
 8010426:	e7db      	b.n	80103e0 <_strtol_l.isra.0+0x7c>
 8010428:	f04f 36ff 	mov.w	r6, #4294967295
 801042c:	e7e4      	b.n	80103f8 <_strtol_l.isra.0+0x94>
 801042e:	2e00      	cmp	r6, #0
 8010430:	da05      	bge.n	801043e <_strtol_l.isra.0+0xda>
 8010432:	2322      	movs	r3, #34	; 0x22
 8010434:	6003      	str	r3, [r0, #0]
 8010436:	4665      	mov	r5, ip
 8010438:	b942      	cbnz	r2, 801044c <_strtol_l.isra.0+0xe8>
 801043a:	4628      	mov	r0, r5
 801043c:	e79d      	b.n	801037a <_strtol_l.isra.0+0x16>
 801043e:	f1b8 0f00 	cmp.w	r8, #0
 8010442:	d000      	beq.n	8010446 <_strtol_l.isra.0+0xe2>
 8010444:	426d      	negs	r5, r5
 8010446:	2a00      	cmp	r2, #0
 8010448:	d0f7      	beq.n	801043a <_strtol_l.isra.0+0xd6>
 801044a:	b10e      	cbz	r6, 8010450 <_strtol_l.isra.0+0xec>
 801044c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8010450:	6011      	str	r1, [r2, #0]
 8010452:	e7f2      	b.n	801043a <_strtol_l.isra.0+0xd6>
 8010454:	2430      	movs	r4, #48	; 0x30
 8010456:	2b00      	cmp	r3, #0
 8010458:	d1b3      	bne.n	80103c2 <_strtol_l.isra.0+0x5e>
 801045a:	2308      	movs	r3, #8
 801045c:	e7b1      	b.n	80103c2 <_strtol_l.isra.0+0x5e>
 801045e:	2c30      	cmp	r4, #48	; 0x30
 8010460:	d0a4      	beq.n	80103ac <_strtol_l.isra.0+0x48>
 8010462:	230a      	movs	r3, #10
 8010464:	e7ad      	b.n	80103c2 <_strtol_l.isra.0+0x5e>
 8010466:	bf00      	nop
 8010468:	08014599 	.word	0x08014599

0801046c <strtol>:
 801046c:	4613      	mov	r3, r2
 801046e:	460a      	mov	r2, r1
 8010470:	4601      	mov	r1, r0
 8010472:	4802      	ldr	r0, [pc, #8]	; (801047c <strtol+0x10>)
 8010474:	6800      	ldr	r0, [r0, #0]
 8010476:	f7ff bf75 	b.w	8010364 <_strtol_l.isra.0>
 801047a:	bf00      	nop
 801047c:	2000001c 	.word	0x2000001c

08010480 <__swbuf_r>:
 8010480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010482:	460e      	mov	r6, r1
 8010484:	4614      	mov	r4, r2
 8010486:	4605      	mov	r5, r0
 8010488:	b118      	cbz	r0, 8010492 <__swbuf_r+0x12>
 801048a:	6983      	ldr	r3, [r0, #24]
 801048c:	b90b      	cbnz	r3, 8010492 <__swbuf_r+0x12>
 801048e:	f001 f849 	bl	8011524 <__sinit>
 8010492:	4b21      	ldr	r3, [pc, #132]	; (8010518 <__swbuf_r+0x98>)
 8010494:	429c      	cmp	r4, r3
 8010496:	d12b      	bne.n	80104f0 <__swbuf_r+0x70>
 8010498:	686c      	ldr	r4, [r5, #4]
 801049a:	69a3      	ldr	r3, [r4, #24]
 801049c:	60a3      	str	r3, [r4, #8]
 801049e:	89a3      	ldrh	r3, [r4, #12]
 80104a0:	071a      	lsls	r2, r3, #28
 80104a2:	d52f      	bpl.n	8010504 <__swbuf_r+0x84>
 80104a4:	6923      	ldr	r3, [r4, #16]
 80104a6:	b36b      	cbz	r3, 8010504 <__swbuf_r+0x84>
 80104a8:	6923      	ldr	r3, [r4, #16]
 80104aa:	6820      	ldr	r0, [r4, #0]
 80104ac:	1ac0      	subs	r0, r0, r3
 80104ae:	6963      	ldr	r3, [r4, #20]
 80104b0:	b2f6      	uxtb	r6, r6
 80104b2:	4283      	cmp	r3, r0
 80104b4:	4637      	mov	r7, r6
 80104b6:	dc04      	bgt.n	80104c2 <__swbuf_r+0x42>
 80104b8:	4621      	mov	r1, r4
 80104ba:	4628      	mov	r0, r5
 80104bc:	f000 ff9e 	bl	80113fc <_fflush_r>
 80104c0:	bb30      	cbnz	r0, 8010510 <__swbuf_r+0x90>
 80104c2:	68a3      	ldr	r3, [r4, #8]
 80104c4:	3b01      	subs	r3, #1
 80104c6:	60a3      	str	r3, [r4, #8]
 80104c8:	6823      	ldr	r3, [r4, #0]
 80104ca:	1c5a      	adds	r2, r3, #1
 80104cc:	6022      	str	r2, [r4, #0]
 80104ce:	701e      	strb	r6, [r3, #0]
 80104d0:	6963      	ldr	r3, [r4, #20]
 80104d2:	3001      	adds	r0, #1
 80104d4:	4283      	cmp	r3, r0
 80104d6:	d004      	beq.n	80104e2 <__swbuf_r+0x62>
 80104d8:	89a3      	ldrh	r3, [r4, #12]
 80104da:	07db      	lsls	r3, r3, #31
 80104dc:	d506      	bpl.n	80104ec <__swbuf_r+0x6c>
 80104de:	2e0a      	cmp	r6, #10
 80104e0:	d104      	bne.n	80104ec <__swbuf_r+0x6c>
 80104e2:	4621      	mov	r1, r4
 80104e4:	4628      	mov	r0, r5
 80104e6:	f000 ff89 	bl	80113fc <_fflush_r>
 80104ea:	b988      	cbnz	r0, 8010510 <__swbuf_r+0x90>
 80104ec:	4638      	mov	r0, r7
 80104ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104f0:	4b0a      	ldr	r3, [pc, #40]	; (801051c <__swbuf_r+0x9c>)
 80104f2:	429c      	cmp	r4, r3
 80104f4:	d101      	bne.n	80104fa <__swbuf_r+0x7a>
 80104f6:	68ac      	ldr	r4, [r5, #8]
 80104f8:	e7cf      	b.n	801049a <__swbuf_r+0x1a>
 80104fa:	4b09      	ldr	r3, [pc, #36]	; (8010520 <__swbuf_r+0xa0>)
 80104fc:	429c      	cmp	r4, r3
 80104fe:	bf08      	it	eq
 8010500:	68ec      	ldreq	r4, [r5, #12]
 8010502:	e7ca      	b.n	801049a <__swbuf_r+0x1a>
 8010504:	4621      	mov	r1, r4
 8010506:	4628      	mov	r0, r5
 8010508:	f000 f80c 	bl	8010524 <__swsetup_r>
 801050c:	2800      	cmp	r0, #0
 801050e:	d0cb      	beq.n	80104a8 <__swbuf_r+0x28>
 8010510:	f04f 37ff 	mov.w	r7, #4294967295
 8010514:	e7ea      	b.n	80104ec <__swbuf_r+0x6c>
 8010516:	bf00      	nop
 8010518:	08014750 	.word	0x08014750
 801051c:	08014770 	.word	0x08014770
 8010520:	08014730 	.word	0x08014730

08010524 <__swsetup_r>:
 8010524:	4b32      	ldr	r3, [pc, #200]	; (80105f0 <__swsetup_r+0xcc>)
 8010526:	b570      	push	{r4, r5, r6, lr}
 8010528:	681d      	ldr	r5, [r3, #0]
 801052a:	4606      	mov	r6, r0
 801052c:	460c      	mov	r4, r1
 801052e:	b125      	cbz	r5, 801053a <__swsetup_r+0x16>
 8010530:	69ab      	ldr	r3, [r5, #24]
 8010532:	b913      	cbnz	r3, 801053a <__swsetup_r+0x16>
 8010534:	4628      	mov	r0, r5
 8010536:	f000 fff5 	bl	8011524 <__sinit>
 801053a:	4b2e      	ldr	r3, [pc, #184]	; (80105f4 <__swsetup_r+0xd0>)
 801053c:	429c      	cmp	r4, r3
 801053e:	d10f      	bne.n	8010560 <__swsetup_r+0x3c>
 8010540:	686c      	ldr	r4, [r5, #4]
 8010542:	89a3      	ldrh	r3, [r4, #12]
 8010544:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010548:	0719      	lsls	r1, r3, #28
 801054a:	d42c      	bmi.n	80105a6 <__swsetup_r+0x82>
 801054c:	06dd      	lsls	r5, r3, #27
 801054e:	d411      	bmi.n	8010574 <__swsetup_r+0x50>
 8010550:	2309      	movs	r3, #9
 8010552:	6033      	str	r3, [r6, #0]
 8010554:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010558:	81a3      	strh	r3, [r4, #12]
 801055a:	f04f 30ff 	mov.w	r0, #4294967295
 801055e:	e03e      	b.n	80105de <__swsetup_r+0xba>
 8010560:	4b25      	ldr	r3, [pc, #148]	; (80105f8 <__swsetup_r+0xd4>)
 8010562:	429c      	cmp	r4, r3
 8010564:	d101      	bne.n	801056a <__swsetup_r+0x46>
 8010566:	68ac      	ldr	r4, [r5, #8]
 8010568:	e7eb      	b.n	8010542 <__swsetup_r+0x1e>
 801056a:	4b24      	ldr	r3, [pc, #144]	; (80105fc <__swsetup_r+0xd8>)
 801056c:	429c      	cmp	r4, r3
 801056e:	bf08      	it	eq
 8010570:	68ec      	ldreq	r4, [r5, #12]
 8010572:	e7e6      	b.n	8010542 <__swsetup_r+0x1e>
 8010574:	0758      	lsls	r0, r3, #29
 8010576:	d512      	bpl.n	801059e <__swsetup_r+0x7a>
 8010578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801057a:	b141      	cbz	r1, 801058e <__swsetup_r+0x6a>
 801057c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010580:	4299      	cmp	r1, r3
 8010582:	d002      	beq.n	801058a <__swsetup_r+0x66>
 8010584:	4630      	mov	r0, r6
 8010586:	f001 fc6d 	bl	8011e64 <_free_r>
 801058a:	2300      	movs	r3, #0
 801058c:	6363      	str	r3, [r4, #52]	; 0x34
 801058e:	89a3      	ldrh	r3, [r4, #12]
 8010590:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010594:	81a3      	strh	r3, [r4, #12]
 8010596:	2300      	movs	r3, #0
 8010598:	6063      	str	r3, [r4, #4]
 801059a:	6923      	ldr	r3, [r4, #16]
 801059c:	6023      	str	r3, [r4, #0]
 801059e:	89a3      	ldrh	r3, [r4, #12]
 80105a0:	f043 0308 	orr.w	r3, r3, #8
 80105a4:	81a3      	strh	r3, [r4, #12]
 80105a6:	6923      	ldr	r3, [r4, #16]
 80105a8:	b94b      	cbnz	r3, 80105be <__swsetup_r+0x9a>
 80105aa:	89a3      	ldrh	r3, [r4, #12]
 80105ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80105b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105b4:	d003      	beq.n	80105be <__swsetup_r+0x9a>
 80105b6:	4621      	mov	r1, r4
 80105b8:	4630      	mov	r0, r6
 80105ba:	f001 f87d 	bl	80116b8 <__smakebuf_r>
 80105be:	89a0      	ldrh	r0, [r4, #12]
 80105c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80105c4:	f010 0301 	ands.w	r3, r0, #1
 80105c8:	d00a      	beq.n	80105e0 <__swsetup_r+0xbc>
 80105ca:	2300      	movs	r3, #0
 80105cc:	60a3      	str	r3, [r4, #8]
 80105ce:	6963      	ldr	r3, [r4, #20]
 80105d0:	425b      	negs	r3, r3
 80105d2:	61a3      	str	r3, [r4, #24]
 80105d4:	6923      	ldr	r3, [r4, #16]
 80105d6:	b943      	cbnz	r3, 80105ea <__swsetup_r+0xc6>
 80105d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80105dc:	d1ba      	bne.n	8010554 <__swsetup_r+0x30>
 80105de:	bd70      	pop	{r4, r5, r6, pc}
 80105e0:	0781      	lsls	r1, r0, #30
 80105e2:	bf58      	it	pl
 80105e4:	6963      	ldrpl	r3, [r4, #20]
 80105e6:	60a3      	str	r3, [r4, #8]
 80105e8:	e7f4      	b.n	80105d4 <__swsetup_r+0xb0>
 80105ea:	2000      	movs	r0, #0
 80105ec:	e7f7      	b.n	80105de <__swsetup_r+0xba>
 80105ee:	bf00      	nop
 80105f0:	2000001c 	.word	0x2000001c
 80105f4:	08014750 	.word	0x08014750
 80105f8:	08014770 	.word	0x08014770
 80105fc:	08014730 	.word	0x08014730

08010600 <quorem>:
 8010600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010604:	6903      	ldr	r3, [r0, #16]
 8010606:	690c      	ldr	r4, [r1, #16]
 8010608:	42a3      	cmp	r3, r4
 801060a:	4607      	mov	r7, r0
 801060c:	f2c0 8081 	blt.w	8010712 <quorem+0x112>
 8010610:	3c01      	subs	r4, #1
 8010612:	f101 0814 	add.w	r8, r1, #20
 8010616:	f100 0514 	add.w	r5, r0, #20
 801061a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801061e:	9301      	str	r3, [sp, #4]
 8010620:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010624:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010628:	3301      	adds	r3, #1
 801062a:	429a      	cmp	r2, r3
 801062c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010630:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010634:	fbb2 f6f3 	udiv	r6, r2, r3
 8010638:	d331      	bcc.n	801069e <quorem+0x9e>
 801063a:	f04f 0e00 	mov.w	lr, #0
 801063e:	4640      	mov	r0, r8
 8010640:	46ac      	mov	ip, r5
 8010642:	46f2      	mov	sl, lr
 8010644:	f850 2b04 	ldr.w	r2, [r0], #4
 8010648:	b293      	uxth	r3, r2
 801064a:	fb06 e303 	mla	r3, r6, r3, lr
 801064e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010652:	b29b      	uxth	r3, r3
 8010654:	ebaa 0303 	sub.w	r3, sl, r3
 8010658:	0c12      	lsrs	r2, r2, #16
 801065a:	f8dc a000 	ldr.w	sl, [ip]
 801065e:	fb06 e202 	mla	r2, r6, r2, lr
 8010662:	fa13 f38a 	uxtah	r3, r3, sl
 8010666:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801066a:	fa1f fa82 	uxth.w	sl, r2
 801066e:	f8dc 2000 	ldr.w	r2, [ip]
 8010672:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010676:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801067a:	b29b      	uxth	r3, r3
 801067c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010680:	4581      	cmp	r9, r0
 8010682:	f84c 3b04 	str.w	r3, [ip], #4
 8010686:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801068a:	d2db      	bcs.n	8010644 <quorem+0x44>
 801068c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010690:	b92b      	cbnz	r3, 801069e <quorem+0x9e>
 8010692:	9b01      	ldr	r3, [sp, #4]
 8010694:	3b04      	subs	r3, #4
 8010696:	429d      	cmp	r5, r3
 8010698:	461a      	mov	r2, r3
 801069a:	d32e      	bcc.n	80106fa <quorem+0xfa>
 801069c:	613c      	str	r4, [r7, #16]
 801069e:	4638      	mov	r0, r7
 80106a0:	f001 fad0 	bl	8011c44 <__mcmp>
 80106a4:	2800      	cmp	r0, #0
 80106a6:	db24      	blt.n	80106f2 <quorem+0xf2>
 80106a8:	3601      	adds	r6, #1
 80106aa:	4628      	mov	r0, r5
 80106ac:	f04f 0c00 	mov.w	ip, #0
 80106b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80106b4:	f8d0 e000 	ldr.w	lr, [r0]
 80106b8:	b293      	uxth	r3, r2
 80106ba:	ebac 0303 	sub.w	r3, ip, r3
 80106be:	0c12      	lsrs	r2, r2, #16
 80106c0:	fa13 f38e 	uxtah	r3, r3, lr
 80106c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80106c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106d2:	45c1      	cmp	r9, r8
 80106d4:	f840 3b04 	str.w	r3, [r0], #4
 80106d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80106dc:	d2e8      	bcs.n	80106b0 <quorem+0xb0>
 80106de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80106e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106e6:	b922      	cbnz	r2, 80106f2 <quorem+0xf2>
 80106e8:	3b04      	subs	r3, #4
 80106ea:	429d      	cmp	r5, r3
 80106ec:	461a      	mov	r2, r3
 80106ee:	d30a      	bcc.n	8010706 <quorem+0x106>
 80106f0:	613c      	str	r4, [r7, #16]
 80106f2:	4630      	mov	r0, r6
 80106f4:	b003      	add	sp, #12
 80106f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106fa:	6812      	ldr	r2, [r2, #0]
 80106fc:	3b04      	subs	r3, #4
 80106fe:	2a00      	cmp	r2, #0
 8010700:	d1cc      	bne.n	801069c <quorem+0x9c>
 8010702:	3c01      	subs	r4, #1
 8010704:	e7c7      	b.n	8010696 <quorem+0x96>
 8010706:	6812      	ldr	r2, [r2, #0]
 8010708:	3b04      	subs	r3, #4
 801070a:	2a00      	cmp	r2, #0
 801070c:	d1f0      	bne.n	80106f0 <quorem+0xf0>
 801070e:	3c01      	subs	r4, #1
 8010710:	e7eb      	b.n	80106ea <quorem+0xea>
 8010712:	2000      	movs	r0, #0
 8010714:	e7ee      	b.n	80106f4 <quorem+0xf4>
	...

08010718 <_dtoa_r>:
 8010718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801071c:	ed2d 8b02 	vpush	{d8}
 8010720:	ec57 6b10 	vmov	r6, r7, d0
 8010724:	b095      	sub	sp, #84	; 0x54
 8010726:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010728:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801072c:	9105      	str	r1, [sp, #20]
 801072e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010732:	4604      	mov	r4, r0
 8010734:	9209      	str	r2, [sp, #36]	; 0x24
 8010736:	930f      	str	r3, [sp, #60]	; 0x3c
 8010738:	b975      	cbnz	r5, 8010758 <_dtoa_r+0x40>
 801073a:	2010      	movs	r0, #16
 801073c:	f000 fffc 	bl	8011738 <malloc>
 8010740:	4602      	mov	r2, r0
 8010742:	6260      	str	r0, [r4, #36]	; 0x24
 8010744:	b920      	cbnz	r0, 8010750 <_dtoa_r+0x38>
 8010746:	4bb2      	ldr	r3, [pc, #712]	; (8010a10 <_dtoa_r+0x2f8>)
 8010748:	21ea      	movs	r1, #234	; 0xea
 801074a:	48b2      	ldr	r0, [pc, #712]	; (8010a14 <_dtoa_r+0x2fc>)
 801074c:	f001 fdf4 	bl	8012338 <__assert_func>
 8010750:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010754:	6005      	str	r5, [r0, #0]
 8010756:	60c5      	str	r5, [r0, #12]
 8010758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801075a:	6819      	ldr	r1, [r3, #0]
 801075c:	b151      	cbz	r1, 8010774 <_dtoa_r+0x5c>
 801075e:	685a      	ldr	r2, [r3, #4]
 8010760:	604a      	str	r2, [r1, #4]
 8010762:	2301      	movs	r3, #1
 8010764:	4093      	lsls	r3, r2
 8010766:	608b      	str	r3, [r1, #8]
 8010768:	4620      	mov	r0, r4
 801076a:	f001 f82d 	bl	80117c8 <_Bfree>
 801076e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010770:	2200      	movs	r2, #0
 8010772:	601a      	str	r2, [r3, #0]
 8010774:	1e3b      	subs	r3, r7, #0
 8010776:	bfb9      	ittee	lt
 8010778:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801077c:	9303      	strlt	r3, [sp, #12]
 801077e:	2300      	movge	r3, #0
 8010780:	f8c8 3000 	strge.w	r3, [r8]
 8010784:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010788:	4ba3      	ldr	r3, [pc, #652]	; (8010a18 <_dtoa_r+0x300>)
 801078a:	bfbc      	itt	lt
 801078c:	2201      	movlt	r2, #1
 801078e:	f8c8 2000 	strlt.w	r2, [r8]
 8010792:	ea33 0309 	bics.w	r3, r3, r9
 8010796:	d11b      	bne.n	80107d0 <_dtoa_r+0xb8>
 8010798:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801079a:	f242 730f 	movw	r3, #9999	; 0x270f
 801079e:	6013      	str	r3, [r2, #0]
 80107a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80107a4:	4333      	orrs	r3, r6
 80107a6:	f000 857a 	beq.w	801129e <_dtoa_r+0xb86>
 80107aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107ac:	b963      	cbnz	r3, 80107c8 <_dtoa_r+0xb0>
 80107ae:	4b9b      	ldr	r3, [pc, #620]	; (8010a1c <_dtoa_r+0x304>)
 80107b0:	e024      	b.n	80107fc <_dtoa_r+0xe4>
 80107b2:	4b9b      	ldr	r3, [pc, #620]	; (8010a20 <_dtoa_r+0x308>)
 80107b4:	9300      	str	r3, [sp, #0]
 80107b6:	3308      	adds	r3, #8
 80107b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107ba:	6013      	str	r3, [r2, #0]
 80107bc:	9800      	ldr	r0, [sp, #0]
 80107be:	b015      	add	sp, #84	; 0x54
 80107c0:	ecbd 8b02 	vpop	{d8}
 80107c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c8:	4b94      	ldr	r3, [pc, #592]	; (8010a1c <_dtoa_r+0x304>)
 80107ca:	9300      	str	r3, [sp, #0]
 80107cc:	3303      	adds	r3, #3
 80107ce:	e7f3      	b.n	80107b8 <_dtoa_r+0xa0>
 80107d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80107d4:	2200      	movs	r2, #0
 80107d6:	ec51 0b17 	vmov	r0, r1, d7
 80107da:	2300      	movs	r3, #0
 80107dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80107e0:	f7f0 f97a 	bl	8000ad8 <__aeabi_dcmpeq>
 80107e4:	4680      	mov	r8, r0
 80107e6:	b158      	cbz	r0, 8010800 <_dtoa_r+0xe8>
 80107e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80107ea:	2301      	movs	r3, #1
 80107ec:	6013      	str	r3, [r2, #0]
 80107ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	f000 8551 	beq.w	8011298 <_dtoa_r+0xb80>
 80107f6:	488b      	ldr	r0, [pc, #556]	; (8010a24 <_dtoa_r+0x30c>)
 80107f8:	6018      	str	r0, [r3, #0]
 80107fa:	1e43      	subs	r3, r0, #1
 80107fc:	9300      	str	r3, [sp, #0]
 80107fe:	e7dd      	b.n	80107bc <_dtoa_r+0xa4>
 8010800:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010804:	aa12      	add	r2, sp, #72	; 0x48
 8010806:	a913      	add	r1, sp, #76	; 0x4c
 8010808:	4620      	mov	r0, r4
 801080a:	f001 fabf 	bl	8011d8c <__d2b>
 801080e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010812:	4683      	mov	fp, r0
 8010814:	2d00      	cmp	r5, #0
 8010816:	d07c      	beq.n	8010912 <_dtoa_r+0x1fa>
 8010818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801081a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801081e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010822:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8010826:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801082a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801082e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010832:	4b7d      	ldr	r3, [pc, #500]	; (8010a28 <_dtoa_r+0x310>)
 8010834:	2200      	movs	r2, #0
 8010836:	4630      	mov	r0, r6
 8010838:	4639      	mov	r1, r7
 801083a:	f7ef fd2d 	bl	8000298 <__aeabi_dsub>
 801083e:	a36e      	add	r3, pc, #440	; (adr r3, 80109f8 <_dtoa_r+0x2e0>)
 8010840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010844:	f7ef fee0 	bl	8000608 <__aeabi_dmul>
 8010848:	a36d      	add	r3, pc, #436	; (adr r3, 8010a00 <_dtoa_r+0x2e8>)
 801084a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801084e:	f7ef fd25 	bl	800029c <__adddf3>
 8010852:	4606      	mov	r6, r0
 8010854:	4628      	mov	r0, r5
 8010856:	460f      	mov	r7, r1
 8010858:	f7ef fe6c 	bl	8000534 <__aeabi_i2d>
 801085c:	a36a      	add	r3, pc, #424	; (adr r3, 8010a08 <_dtoa_r+0x2f0>)
 801085e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010862:	f7ef fed1 	bl	8000608 <__aeabi_dmul>
 8010866:	4602      	mov	r2, r0
 8010868:	460b      	mov	r3, r1
 801086a:	4630      	mov	r0, r6
 801086c:	4639      	mov	r1, r7
 801086e:	f7ef fd15 	bl	800029c <__adddf3>
 8010872:	4606      	mov	r6, r0
 8010874:	460f      	mov	r7, r1
 8010876:	f7f0 f977 	bl	8000b68 <__aeabi_d2iz>
 801087a:	2200      	movs	r2, #0
 801087c:	4682      	mov	sl, r0
 801087e:	2300      	movs	r3, #0
 8010880:	4630      	mov	r0, r6
 8010882:	4639      	mov	r1, r7
 8010884:	f7f0 f932 	bl	8000aec <__aeabi_dcmplt>
 8010888:	b148      	cbz	r0, 801089e <_dtoa_r+0x186>
 801088a:	4650      	mov	r0, sl
 801088c:	f7ef fe52 	bl	8000534 <__aeabi_i2d>
 8010890:	4632      	mov	r2, r6
 8010892:	463b      	mov	r3, r7
 8010894:	f7f0 f920 	bl	8000ad8 <__aeabi_dcmpeq>
 8010898:	b908      	cbnz	r0, 801089e <_dtoa_r+0x186>
 801089a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801089e:	f1ba 0f16 	cmp.w	sl, #22
 80108a2:	d854      	bhi.n	801094e <_dtoa_r+0x236>
 80108a4:	4b61      	ldr	r3, [pc, #388]	; (8010a2c <_dtoa_r+0x314>)
 80108a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80108aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80108b2:	f7f0 f91b 	bl	8000aec <__aeabi_dcmplt>
 80108b6:	2800      	cmp	r0, #0
 80108b8:	d04b      	beq.n	8010952 <_dtoa_r+0x23a>
 80108ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80108be:	2300      	movs	r3, #0
 80108c0:	930e      	str	r3, [sp, #56]	; 0x38
 80108c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80108c4:	1b5d      	subs	r5, r3, r5
 80108c6:	1e6b      	subs	r3, r5, #1
 80108c8:	9304      	str	r3, [sp, #16]
 80108ca:	bf43      	ittte	mi
 80108cc:	2300      	movmi	r3, #0
 80108ce:	f1c5 0801 	rsbmi	r8, r5, #1
 80108d2:	9304      	strmi	r3, [sp, #16]
 80108d4:	f04f 0800 	movpl.w	r8, #0
 80108d8:	f1ba 0f00 	cmp.w	sl, #0
 80108dc:	db3b      	blt.n	8010956 <_dtoa_r+0x23e>
 80108de:	9b04      	ldr	r3, [sp, #16]
 80108e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80108e4:	4453      	add	r3, sl
 80108e6:	9304      	str	r3, [sp, #16]
 80108e8:	2300      	movs	r3, #0
 80108ea:	9306      	str	r3, [sp, #24]
 80108ec:	9b05      	ldr	r3, [sp, #20]
 80108ee:	2b09      	cmp	r3, #9
 80108f0:	d869      	bhi.n	80109c6 <_dtoa_r+0x2ae>
 80108f2:	2b05      	cmp	r3, #5
 80108f4:	bfc4      	itt	gt
 80108f6:	3b04      	subgt	r3, #4
 80108f8:	9305      	strgt	r3, [sp, #20]
 80108fa:	9b05      	ldr	r3, [sp, #20]
 80108fc:	f1a3 0302 	sub.w	r3, r3, #2
 8010900:	bfcc      	ite	gt
 8010902:	2500      	movgt	r5, #0
 8010904:	2501      	movle	r5, #1
 8010906:	2b03      	cmp	r3, #3
 8010908:	d869      	bhi.n	80109de <_dtoa_r+0x2c6>
 801090a:	e8df f003 	tbb	[pc, r3]
 801090e:	4e2c      	.short	0x4e2c
 8010910:	5a4c      	.short	0x5a4c
 8010912:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8010916:	441d      	add	r5, r3
 8010918:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801091c:	2b20      	cmp	r3, #32
 801091e:	bfc1      	itttt	gt
 8010920:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010924:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010928:	fa09 f303 	lslgt.w	r3, r9, r3
 801092c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010930:	bfda      	itte	le
 8010932:	f1c3 0320 	rsble	r3, r3, #32
 8010936:	fa06 f003 	lslle.w	r0, r6, r3
 801093a:	4318      	orrgt	r0, r3
 801093c:	f7ef fdea 	bl	8000514 <__aeabi_ui2d>
 8010940:	2301      	movs	r3, #1
 8010942:	4606      	mov	r6, r0
 8010944:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010948:	3d01      	subs	r5, #1
 801094a:	9310      	str	r3, [sp, #64]	; 0x40
 801094c:	e771      	b.n	8010832 <_dtoa_r+0x11a>
 801094e:	2301      	movs	r3, #1
 8010950:	e7b6      	b.n	80108c0 <_dtoa_r+0x1a8>
 8010952:	900e      	str	r0, [sp, #56]	; 0x38
 8010954:	e7b5      	b.n	80108c2 <_dtoa_r+0x1aa>
 8010956:	f1ca 0300 	rsb	r3, sl, #0
 801095a:	9306      	str	r3, [sp, #24]
 801095c:	2300      	movs	r3, #0
 801095e:	eba8 080a 	sub.w	r8, r8, sl
 8010962:	930d      	str	r3, [sp, #52]	; 0x34
 8010964:	e7c2      	b.n	80108ec <_dtoa_r+0x1d4>
 8010966:	2300      	movs	r3, #0
 8010968:	9308      	str	r3, [sp, #32]
 801096a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801096c:	2b00      	cmp	r3, #0
 801096e:	dc39      	bgt.n	80109e4 <_dtoa_r+0x2cc>
 8010970:	f04f 0901 	mov.w	r9, #1
 8010974:	f8cd 9004 	str.w	r9, [sp, #4]
 8010978:	464b      	mov	r3, r9
 801097a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801097e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010980:	2200      	movs	r2, #0
 8010982:	6042      	str	r2, [r0, #4]
 8010984:	2204      	movs	r2, #4
 8010986:	f102 0614 	add.w	r6, r2, #20
 801098a:	429e      	cmp	r6, r3
 801098c:	6841      	ldr	r1, [r0, #4]
 801098e:	d92f      	bls.n	80109f0 <_dtoa_r+0x2d8>
 8010990:	4620      	mov	r0, r4
 8010992:	f000 fed9 	bl	8011748 <_Balloc>
 8010996:	9000      	str	r0, [sp, #0]
 8010998:	2800      	cmp	r0, #0
 801099a:	d14b      	bne.n	8010a34 <_dtoa_r+0x31c>
 801099c:	4b24      	ldr	r3, [pc, #144]	; (8010a30 <_dtoa_r+0x318>)
 801099e:	4602      	mov	r2, r0
 80109a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80109a4:	e6d1      	b.n	801074a <_dtoa_r+0x32>
 80109a6:	2301      	movs	r3, #1
 80109a8:	e7de      	b.n	8010968 <_dtoa_r+0x250>
 80109aa:	2300      	movs	r3, #0
 80109ac:	9308      	str	r3, [sp, #32]
 80109ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109b0:	eb0a 0903 	add.w	r9, sl, r3
 80109b4:	f109 0301 	add.w	r3, r9, #1
 80109b8:	2b01      	cmp	r3, #1
 80109ba:	9301      	str	r3, [sp, #4]
 80109bc:	bfb8      	it	lt
 80109be:	2301      	movlt	r3, #1
 80109c0:	e7dd      	b.n	801097e <_dtoa_r+0x266>
 80109c2:	2301      	movs	r3, #1
 80109c4:	e7f2      	b.n	80109ac <_dtoa_r+0x294>
 80109c6:	2501      	movs	r5, #1
 80109c8:	2300      	movs	r3, #0
 80109ca:	9305      	str	r3, [sp, #20]
 80109cc:	9508      	str	r5, [sp, #32]
 80109ce:	f04f 39ff 	mov.w	r9, #4294967295
 80109d2:	2200      	movs	r2, #0
 80109d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80109d8:	2312      	movs	r3, #18
 80109da:	9209      	str	r2, [sp, #36]	; 0x24
 80109dc:	e7cf      	b.n	801097e <_dtoa_r+0x266>
 80109de:	2301      	movs	r3, #1
 80109e0:	9308      	str	r3, [sp, #32]
 80109e2:	e7f4      	b.n	80109ce <_dtoa_r+0x2b6>
 80109e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80109e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80109ec:	464b      	mov	r3, r9
 80109ee:	e7c6      	b.n	801097e <_dtoa_r+0x266>
 80109f0:	3101      	adds	r1, #1
 80109f2:	6041      	str	r1, [r0, #4]
 80109f4:	0052      	lsls	r2, r2, #1
 80109f6:	e7c6      	b.n	8010986 <_dtoa_r+0x26e>
 80109f8:	636f4361 	.word	0x636f4361
 80109fc:	3fd287a7 	.word	0x3fd287a7
 8010a00:	8b60c8b3 	.word	0x8b60c8b3
 8010a04:	3fc68a28 	.word	0x3fc68a28
 8010a08:	509f79fb 	.word	0x509f79fb
 8010a0c:	3fd34413 	.word	0x3fd34413
 8010a10:	080146a6 	.word	0x080146a6
 8010a14:	080146bd 	.word	0x080146bd
 8010a18:	7ff00000 	.word	0x7ff00000
 8010a1c:	080146a2 	.word	0x080146a2
 8010a20:	08014699 	.word	0x08014699
 8010a24:	08014575 	.word	0x08014575
 8010a28:	3ff80000 	.word	0x3ff80000
 8010a2c:	08014818 	.word	0x08014818
 8010a30:	0801471c 	.word	0x0801471c
 8010a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a36:	9a00      	ldr	r2, [sp, #0]
 8010a38:	601a      	str	r2, [r3, #0]
 8010a3a:	9b01      	ldr	r3, [sp, #4]
 8010a3c:	2b0e      	cmp	r3, #14
 8010a3e:	f200 80ad 	bhi.w	8010b9c <_dtoa_r+0x484>
 8010a42:	2d00      	cmp	r5, #0
 8010a44:	f000 80aa 	beq.w	8010b9c <_dtoa_r+0x484>
 8010a48:	f1ba 0f00 	cmp.w	sl, #0
 8010a4c:	dd36      	ble.n	8010abc <_dtoa_r+0x3a4>
 8010a4e:	4ac3      	ldr	r2, [pc, #780]	; (8010d5c <_dtoa_r+0x644>)
 8010a50:	f00a 030f 	and.w	r3, sl, #15
 8010a54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010a58:	ed93 7b00 	vldr	d7, [r3]
 8010a5c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010a60:	ea4f 172a 	mov.w	r7, sl, asr #4
 8010a64:	eeb0 8a47 	vmov.f32	s16, s14
 8010a68:	eef0 8a67 	vmov.f32	s17, s15
 8010a6c:	d016      	beq.n	8010a9c <_dtoa_r+0x384>
 8010a6e:	4bbc      	ldr	r3, [pc, #752]	; (8010d60 <_dtoa_r+0x648>)
 8010a70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010a74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a78:	f7ef fef0 	bl	800085c <__aeabi_ddiv>
 8010a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a80:	f007 070f 	and.w	r7, r7, #15
 8010a84:	2503      	movs	r5, #3
 8010a86:	4eb6      	ldr	r6, [pc, #728]	; (8010d60 <_dtoa_r+0x648>)
 8010a88:	b957      	cbnz	r7, 8010aa0 <_dtoa_r+0x388>
 8010a8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a8e:	ec53 2b18 	vmov	r2, r3, d8
 8010a92:	f7ef fee3 	bl	800085c <__aeabi_ddiv>
 8010a96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a9a:	e029      	b.n	8010af0 <_dtoa_r+0x3d8>
 8010a9c:	2502      	movs	r5, #2
 8010a9e:	e7f2      	b.n	8010a86 <_dtoa_r+0x36e>
 8010aa0:	07f9      	lsls	r1, r7, #31
 8010aa2:	d508      	bpl.n	8010ab6 <_dtoa_r+0x39e>
 8010aa4:	ec51 0b18 	vmov	r0, r1, d8
 8010aa8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010aac:	f7ef fdac 	bl	8000608 <__aeabi_dmul>
 8010ab0:	ec41 0b18 	vmov	d8, r0, r1
 8010ab4:	3501      	adds	r5, #1
 8010ab6:	107f      	asrs	r7, r7, #1
 8010ab8:	3608      	adds	r6, #8
 8010aba:	e7e5      	b.n	8010a88 <_dtoa_r+0x370>
 8010abc:	f000 80a6 	beq.w	8010c0c <_dtoa_r+0x4f4>
 8010ac0:	f1ca 0600 	rsb	r6, sl, #0
 8010ac4:	4ba5      	ldr	r3, [pc, #660]	; (8010d5c <_dtoa_r+0x644>)
 8010ac6:	4fa6      	ldr	r7, [pc, #664]	; (8010d60 <_dtoa_r+0x648>)
 8010ac8:	f006 020f 	and.w	r2, r6, #15
 8010acc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010ad8:	f7ef fd96 	bl	8000608 <__aeabi_dmul>
 8010adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ae0:	1136      	asrs	r6, r6, #4
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	2502      	movs	r5, #2
 8010ae6:	2e00      	cmp	r6, #0
 8010ae8:	f040 8085 	bne.w	8010bf6 <_dtoa_r+0x4de>
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d1d2      	bne.n	8010a96 <_dtoa_r+0x37e>
 8010af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	f000 808c 	beq.w	8010c10 <_dtoa_r+0x4f8>
 8010af8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010afc:	4b99      	ldr	r3, [pc, #612]	; (8010d64 <_dtoa_r+0x64c>)
 8010afe:	2200      	movs	r2, #0
 8010b00:	4630      	mov	r0, r6
 8010b02:	4639      	mov	r1, r7
 8010b04:	f7ef fff2 	bl	8000aec <__aeabi_dcmplt>
 8010b08:	2800      	cmp	r0, #0
 8010b0a:	f000 8081 	beq.w	8010c10 <_dtoa_r+0x4f8>
 8010b0e:	9b01      	ldr	r3, [sp, #4]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d07d      	beq.n	8010c10 <_dtoa_r+0x4f8>
 8010b14:	f1b9 0f00 	cmp.w	r9, #0
 8010b18:	dd3c      	ble.n	8010b94 <_dtoa_r+0x47c>
 8010b1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010b1e:	9307      	str	r3, [sp, #28]
 8010b20:	2200      	movs	r2, #0
 8010b22:	4b91      	ldr	r3, [pc, #580]	; (8010d68 <_dtoa_r+0x650>)
 8010b24:	4630      	mov	r0, r6
 8010b26:	4639      	mov	r1, r7
 8010b28:	f7ef fd6e 	bl	8000608 <__aeabi_dmul>
 8010b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b30:	3501      	adds	r5, #1
 8010b32:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010b36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010b3a:	4628      	mov	r0, r5
 8010b3c:	f7ef fcfa 	bl	8000534 <__aeabi_i2d>
 8010b40:	4632      	mov	r2, r6
 8010b42:	463b      	mov	r3, r7
 8010b44:	f7ef fd60 	bl	8000608 <__aeabi_dmul>
 8010b48:	4b88      	ldr	r3, [pc, #544]	; (8010d6c <_dtoa_r+0x654>)
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	f7ef fba6 	bl	800029c <__adddf3>
 8010b50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b58:	9303      	str	r3, [sp, #12]
 8010b5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d15c      	bne.n	8010c1a <_dtoa_r+0x502>
 8010b60:	4b83      	ldr	r3, [pc, #524]	; (8010d70 <_dtoa_r+0x658>)
 8010b62:	2200      	movs	r2, #0
 8010b64:	4630      	mov	r0, r6
 8010b66:	4639      	mov	r1, r7
 8010b68:	f7ef fb96 	bl	8000298 <__aeabi_dsub>
 8010b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b70:	4606      	mov	r6, r0
 8010b72:	460f      	mov	r7, r1
 8010b74:	f7ef ffd8 	bl	8000b28 <__aeabi_dcmpgt>
 8010b78:	2800      	cmp	r0, #0
 8010b7a:	f040 8296 	bne.w	80110aa <_dtoa_r+0x992>
 8010b7e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010b82:	4630      	mov	r0, r6
 8010b84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b88:	4639      	mov	r1, r7
 8010b8a:	f7ef ffaf 	bl	8000aec <__aeabi_dcmplt>
 8010b8e:	2800      	cmp	r0, #0
 8010b90:	f040 8288 	bne.w	80110a4 <_dtoa_r+0x98c>
 8010b94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010b98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010b9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	f2c0 8158 	blt.w	8010e54 <_dtoa_r+0x73c>
 8010ba4:	f1ba 0f0e 	cmp.w	sl, #14
 8010ba8:	f300 8154 	bgt.w	8010e54 <_dtoa_r+0x73c>
 8010bac:	4b6b      	ldr	r3, [pc, #428]	; (8010d5c <_dtoa_r+0x644>)
 8010bae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010bb2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	f280 80e3 	bge.w	8010d84 <_dtoa_r+0x66c>
 8010bbe:	9b01      	ldr	r3, [sp, #4]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	f300 80df 	bgt.w	8010d84 <_dtoa_r+0x66c>
 8010bc6:	f040 826d 	bne.w	80110a4 <_dtoa_r+0x98c>
 8010bca:	4b69      	ldr	r3, [pc, #420]	; (8010d70 <_dtoa_r+0x658>)
 8010bcc:	2200      	movs	r2, #0
 8010bce:	4640      	mov	r0, r8
 8010bd0:	4649      	mov	r1, r9
 8010bd2:	f7ef fd19 	bl	8000608 <__aeabi_dmul>
 8010bd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010bda:	f7ef ff9b 	bl	8000b14 <__aeabi_dcmpge>
 8010bde:	9e01      	ldr	r6, [sp, #4]
 8010be0:	4637      	mov	r7, r6
 8010be2:	2800      	cmp	r0, #0
 8010be4:	f040 8243 	bne.w	801106e <_dtoa_r+0x956>
 8010be8:	9d00      	ldr	r5, [sp, #0]
 8010bea:	2331      	movs	r3, #49	; 0x31
 8010bec:	f805 3b01 	strb.w	r3, [r5], #1
 8010bf0:	f10a 0a01 	add.w	sl, sl, #1
 8010bf4:	e23f      	b.n	8011076 <_dtoa_r+0x95e>
 8010bf6:	07f2      	lsls	r2, r6, #31
 8010bf8:	d505      	bpl.n	8010c06 <_dtoa_r+0x4ee>
 8010bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bfe:	f7ef fd03 	bl	8000608 <__aeabi_dmul>
 8010c02:	3501      	adds	r5, #1
 8010c04:	2301      	movs	r3, #1
 8010c06:	1076      	asrs	r6, r6, #1
 8010c08:	3708      	adds	r7, #8
 8010c0a:	e76c      	b.n	8010ae6 <_dtoa_r+0x3ce>
 8010c0c:	2502      	movs	r5, #2
 8010c0e:	e76f      	b.n	8010af0 <_dtoa_r+0x3d8>
 8010c10:	9b01      	ldr	r3, [sp, #4]
 8010c12:	f8cd a01c 	str.w	sl, [sp, #28]
 8010c16:	930c      	str	r3, [sp, #48]	; 0x30
 8010c18:	e78d      	b.n	8010b36 <_dtoa_r+0x41e>
 8010c1a:	9900      	ldr	r1, [sp, #0]
 8010c1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010c1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c20:	4b4e      	ldr	r3, [pc, #312]	; (8010d5c <_dtoa_r+0x644>)
 8010c22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010c26:	4401      	add	r1, r0
 8010c28:	9102      	str	r1, [sp, #8]
 8010c2a:	9908      	ldr	r1, [sp, #32]
 8010c2c:	eeb0 8a47 	vmov.f32	s16, s14
 8010c30:	eef0 8a67 	vmov.f32	s17, s15
 8010c34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010c3c:	2900      	cmp	r1, #0
 8010c3e:	d045      	beq.n	8010ccc <_dtoa_r+0x5b4>
 8010c40:	494c      	ldr	r1, [pc, #304]	; (8010d74 <_dtoa_r+0x65c>)
 8010c42:	2000      	movs	r0, #0
 8010c44:	f7ef fe0a 	bl	800085c <__aeabi_ddiv>
 8010c48:	ec53 2b18 	vmov	r2, r3, d8
 8010c4c:	f7ef fb24 	bl	8000298 <__aeabi_dsub>
 8010c50:	9d00      	ldr	r5, [sp, #0]
 8010c52:	ec41 0b18 	vmov	d8, r0, r1
 8010c56:	4639      	mov	r1, r7
 8010c58:	4630      	mov	r0, r6
 8010c5a:	f7ef ff85 	bl	8000b68 <__aeabi_d2iz>
 8010c5e:	900c      	str	r0, [sp, #48]	; 0x30
 8010c60:	f7ef fc68 	bl	8000534 <__aeabi_i2d>
 8010c64:	4602      	mov	r2, r0
 8010c66:	460b      	mov	r3, r1
 8010c68:	4630      	mov	r0, r6
 8010c6a:	4639      	mov	r1, r7
 8010c6c:	f7ef fb14 	bl	8000298 <__aeabi_dsub>
 8010c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c72:	3330      	adds	r3, #48	; 0x30
 8010c74:	f805 3b01 	strb.w	r3, [r5], #1
 8010c78:	ec53 2b18 	vmov	r2, r3, d8
 8010c7c:	4606      	mov	r6, r0
 8010c7e:	460f      	mov	r7, r1
 8010c80:	f7ef ff34 	bl	8000aec <__aeabi_dcmplt>
 8010c84:	2800      	cmp	r0, #0
 8010c86:	d165      	bne.n	8010d54 <_dtoa_r+0x63c>
 8010c88:	4632      	mov	r2, r6
 8010c8a:	463b      	mov	r3, r7
 8010c8c:	4935      	ldr	r1, [pc, #212]	; (8010d64 <_dtoa_r+0x64c>)
 8010c8e:	2000      	movs	r0, #0
 8010c90:	f7ef fb02 	bl	8000298 <__aeabi_dsub>
 8010c94:	ec53 2b18 	vmov	r2, r3, d8
 8010c98:	f7ef ff28 	bl	8000aec <__aeabi_dcmplt>
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	f040 80b9 	bne.w	8010e14 <_dtoa_r+0x6fc>
 8010ca2:	9b02      	ldr	r3, [sp, #8]
 8010ca4:	429d      	cmp	r5, r3
 8010ca6:	f43f af75 	beq.w	8010b94 <_dtoa_r+0x47c>
 8010caa:	4b2f      	ldr	r3, [pc, #188]	; (8010d68 <_dtoa_r+0x650>)
 8010cac:	ec51 0b18 	vmov	r0, r1, d8
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	f7ef fca9 	bl	8000608 <__aeabi_dmul>
 8010cb6:	4b2c      	ldr	r3, [pc, #176]	; (8010d68 <_dtoa_r+0x650>)
 8010cb8:	ec41 0b18 	vmov	d8, r0, r1
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	4630      	mov	r0, r6
 8010cc0:	4639      	mov	r1, r7
 8010cc2:	f7ef fca1 	bl	8000608 <__aeabi_dmul>
 8010cc6:	4606      	mov	r6, r0
 8010cc8:	460f      	mov	r7, r1
 8010cca:	e7c4      	b.n	8010c56 <_dtoa_r+0x53e>
 8010ccc:	ec51 0b17 	vmov	r0, r1, d7
 8010cd0:	f7ef fc9a 	bl	8000608 <__aeabi_dmul>
 8010cd4:	9b02      	ldr	r3, [sp, #8]
 8010cd6:	9d00      	ldr	r5, [sp, #0]
 8010cd8:	930c      	str	r3, [sp, #48]	; 0x30
 8010cda:	ec41 0b18 	vmov	d8, r0, r1
 8010cde:	4639      	mov	r1, r7
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	f7ef ff41 	bl	8000b68 <__aeabi_d2iz>
 8010ce6:	9011      	str	r0, [sp, #68]	; 0x44
 8010ce8:	f7ef fc24 	bl	8000534 <__aeabi_i2d>
 8010cec:	4602      	mov	r2, r0
 8010cee:	460b      	mov	r3, r1
 8010cf0:	4630      	mov	r0, r6
 8010cf2:	4639      	mov	r1, r7
 8010cf4:	f7ef fad0 	bl	8000298 <__aeabi_dsub>
 8010cf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010cfa:	3330      	adds	r3, #48	; 0x30
 8010cfc:	f805 3b01 	strb.w	r3, [r5], #1
 8010d00:	9b02      	ldr	r3, [sp, #8]
 8010d02:	429d      	cmp	r5, r3
 8010d04:	4606      	mov	r6, r0
 8010d06:	460f      	mov	r7, r1
 8010d08:	f04f 0200 	mov.w	r2, #0
 8010d0c:	d134      	bne.n	8010d78 <_dtoa_r+0x660>
 8010d0e:	4b19      	ldr	r3, [pc, #100]	; (8010d74 <_dtoa_r+0x65c>)
 8010d10:	ec51 0b18 	vmov	r0, r1, d8
 8010d14:	f7ef fac2 	bl	800029c <__adddf3>
 8010d18:	4602      	mov	r2, r0
 8010d1a:	460b      	mov	r3, r1
 8010d1c:	4630      	mov	r0, r6
 8010d1e:	4639      	mov	r1, r7
 8010d20:	f7ef ff02 	bl	8000b28 <__aeabi_dcmpgt>
 8010d24:	2800      	cmp	r0, #0
 8010d26:	d175      	bne.n	8010e14 <_dtoa_r+0x6fc>
 8010d28:	ec53 2b18 	vmov	r2, r3, d8
 8010d2c:	4911      	ldr	r1, [pc, #68]	; (8010d74 <_dtoa_r+0x65c>)
 8010d2e:	2000      	movs	r0, #0
 8010d30:	f7ef fab2 	bl	8000298 <__aeabi_dsub>
 8010d34:	4602      	mov	r2, r0
 8010d36:	460b      	mov	r3, r1
 8010d38:	4630      	mov	r0, r6
 8010d3a:	4639      	mov	r1, r7
 8010d3c:	f7ef fed6 	bl	8000aec <__aeabi_dcmplt>
 8010d40:	2800      	cmp	r0, #0
 8010d42:	f43f af27 	beq.w	8010b94 <_dtoa_r+0x47c>
 8010d46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010d48:	1e6b      	subs	r3, r5, #1
 8010d4a:	930c      	str	r3, [sp, #48]	; 0x30
 8010d4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010d50:	2b30      	cmp	r3, #48	; 0x30
 8010d52:	d0f8      	beq.n	8010d46 <_dtoa_r+0x62e>
 8010d54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010d58:	e04a      	b.n	8010df0 <_dtoa_r+0x6d8>
 8010d5a:	bf00      	nop
 8010d5c:	08014818 	.word	0x08014818
 8010d60:	080147f0 	.word	0x080147f0
 8010d64:	3ff00000 	.word	0x3ff00000
 8010d68:	40240000 	.word	0x40240000
 8010d6c:	401c0000 	.word	0x401c0000
 8010d70:	40140000 	.word	0x40140000
 8010d74:	3fe00000 	.word	0x3fe00000
 8010d78:	4baf      	ldr	r3, [pc, #700]	; (8011038 <_dtoa_r+0x920>)
 8010d7a:	f7ef fc45 	bl	8000608 <__aeabi_dmul>
 8010d7e:	4606      	mov	r6, r0
 8010d80:	460f      	mov	r7, r1
 8010d82:	e7ac      	b.n	8010cde <_dtoa_r+0x5c6>
 8010d84:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010d88:	9d00      	ldr	r5, [sp, #0]
 8010d8a:	4642      	mov	r2, r8
 8010d8c:	464b      	mov	r3, r9
 8010d8e:	4630      	mov	r0, r6
 8010d90:	4639      	mov	r1, r7
 8010d92:	f7ef fd63 	bl	800085c <__aeabi_ddiv>
 8010d96:	f7ef fee7 	bl	8000b68 <__aeabi_d2iz>
 8010d9a:	9002      	str	r0, [sp, #8]
 8010d9c:	f7ef fbca 	bl	8000534 <__aeabi_i2d>
 8010da0:	4642      	mov	r2, r8
 8010da2:	464b      	mov	r3, r9
 8010da4:	f7ef fc30 	bl	8000608 <__aeabi_dmul>
 8010da8:	4602      	mov	r2, r0
 8010daa:	460b      	mov	r3, r1
 8010dac:	4630      	mov	r0, r6
 8010dae:	4639      	mov	r1, r7
 8010db0:	f7ef fa72 	bl	8000298 <__aeabi_dsub>
 8010db4:	9e02      	ldr	r6, [sp, #8]
 8010db6:	9f01      	ldr	r7, [sp, #4]
 8010db8:	3630      	adds	r6, #48	; 0x30
 8010dba:	f805 6b01 	strb.w	r6, [r5], #1
 8010dbe:	9e00      	ldr	r6, [sp, #0]
 8010dc0:	1bae      	subs	r6, r5, r6
 8010dc2:	42b7      	cmp	r7, r6
 8010dc4:	4602      	mov	r2, r0
 8010dc6:	460b      	mov	r3, r1
 8010dc8:	d137      	bne.n	8010e3a <_dtoa_r+0x722>
 8010dca:	f7ef fa67 	bl	800029c <__adddf3>
 8010dce:	4642      	mov	r2, r8
 8010dd0:	464b      	mov	r3, r9
 8010dd2:	4606      	mov	r6, r0
 8010dd4:	460f      	mov	r7, r1
 8010dd6:	f7ef fea7 	bl	8000b28 <__aeabi_dcmpgt>
 8010dda:	b9c8      	cbnz	r0, 8010e10 <_dtoa_r+0x6f8>
 8010ddc:	4642      	mov	r2, r8
 8010dde:	464b      	mov	r3, r9
 8010de0:	4630      	mov	r0, r6
 8010de2:	4639      	mov	r1, r7
 8010de4:	f7ef fe78 	bl	8000ad8 <__aeabi_dcmpeq>
 8010de8:	b110      	cbz	r0, 8010df0 <_dtoa_r+0x6d8>
 8010dea:	9b02      	ldr	r3, [sp, #8]
 8010dec:	07d9      	lsls	r1, r3, #31
 8010dee:	d40f      	bmi.n	8010e10 <_dtoa_r+0x6f8>
 8010df0:	4620      	mov	r0, r4
 8010df2:	4659      	mov	r1, fp
 8010df4:	f000 fce8 	bl	80117c8 <_Bfree>
 8010df8:	2300      	movs	r3, #0
 8010dfa:	702b      	strb	r3, [r5, #0]
 8010dfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010dfe:	f10a 0001 	add.w	r0, sl, #1
 8010e02:	6018      	str	r0, [r3, #0]
 8010e04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	f43f acd8 	beq.w	80107bc <_dtoa_r+0xa4>
 8010e0c:	601d      	str	r5, [r3, #0]
 8010e0e:	e4d5      	b.n	80107bc <_dtoa_r+0xa4>
 8010e10:	f8cd a01c 	str.w	sl, [sp, #28]
 8010e14:	462b      	mov	r3, r5
 8010e16:	461d      	mov	r5, r3
 8010e18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010e1c:	2a39      	cmp	r2, #57	; 0x39
 8010e1e:	d108      	bne.n	8010e32 <_dtoa_r+0x71a>
 8010e20:	9a00      	ldr	r2, [sp, #0]
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d1f7      	bne.n	8010e16 <_dtoa_r+0x6fe>
 8010e26:	9a07      	ldr	r2, [sp, #28]
 8010e28:	9900      	ldr	r1, [sp, #0]
 8010e2a:	3201      	adds	r2, #1
 8010e2c:	9207      	str	r2, [sp, #28]
 8010e2e:	2230      	movs	r2, #48	; 0x30
 8010e30:	700a      	strb	r2, [r1, #0]
 8010e32:	781a      	ldrb	r2, [r3, #0]
 8010e34:	3201      	adds	r2, #1
 8010e36:	701a      	strb	r2, [r3, #0]
 8010e38:	e78c      	b.n	8010d54 <_dtoa_r+0x63c>
 8010e3a:	4b7f      	ldr	r3, [pc, #508]	; (8011038 <_dtoa_r+0x920>)
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	f7ef fbe3 	bl	8000608 <__aeabi_dmul>
 8010e42:	2200      	movs	r2, #0
 8010e44:	2300      	movs	r3, #0
 8010e46:	4606      	mov	r6, r0
 8010e48:	460f      	mov	r7, r1
 8010e4a:	f7ef fe45 	bl	8000ad8 <__aeabi_dcmpeq>
 8010e4e:	2800      	cmp	r0, #0
 8010e50:	d09b      	beq.n	8010d8a <_dtoa_r+0x672>
 8010e52:	e7cd      	b.n	8010df0 <_dtoa_r+0x6d8>
 8010e54:	9a08      	ldr	r2, [sp, #32]
 8010e56:	2a00      	cmp	r2, #0
 8010e58:	f000 80c4 	beq.w	8010fe4 <_dtoa_r+0x8cc>
 8010e5c:	9a05      	ldr	r2, [sp, #20]
 8010e5e:	2a01      	cmp	r2, #1
 8010e60:	f300 80a8 	bgt.w	8010fb4 <_dtoa_r+0x89c>
 8010e64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010e66:	2a00      	cmp	r2, #0
 8010e68:	f000 80a0 	beq.w	8010fac <_dtoa_r+0x894>
 8010e6c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010e70:	9e06      	ldr	r6, [sp, #24]
 8010e72:	4645      	mov	r5, r8
 8010e74:	9a04      	ldr	r2, [sp, #16]
 8010e76:	2101      	movs	r1, #1
 8010e78:	441a      	add	r2, r3
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	4498      	add	r8, r3
 8010e7e:	9204      	str	r2, [sp, #16]
 8010e80:	f000 fd5e 	bl	8011940 <__i2b>
 8010e84:	4607      	mov	r7, r0
 8010e86:	2d00      	cmp	r5, #0
 8010e88:	dd0b      	ble.n	8010ea2 <_dtoa_r+0x78a>
 8010e8a:	9b04      	ldr	r3, [sp, #16]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	dd08      	ble.n	8010ea2 <_dtoa_r+0x78a>
 8010e90:	42ab      	cmp	r3, r5
 8010e92:	9a04      	ldr	r2, [sp, #16]
 8010e94:	bfa8      	it	ge
 8010e96:	462b      	movge	r3, r5
 8010e98:	eba8 0803 	sub.w	r8, r8, r3
 8010e9c:	1aed      	subs	r5, r5, r3
 8010e9e:	1ad3      	subs	r3, r2, r3
 8010ea0:	9304      	str	r3, [sp, #16]
 8010ea2:	9b06      	ldr	r3, [sp, #24]
 8010ea4:	b1fb      	cbz	r3, 8010ee6 <_dtoa_r+0x7ce>
 8010ea6:	9b08      	ldr	r3, [sp, #32]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	f000 809f 	beq.w	8010fec <_dtoa_r+0x8d4>
 8010eae:	2e00      	cmp	r6, #0
 8010eb0:	dd11      	ble.n	8010ed6 <_dtoa_r+0x7be>
 8010eb2:	4639      	mov	r1, r7
 8010eb4:	4632      	mov	r2, r6
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	f000 fdfe 	bl	8011ab8 <__pow5mult>
 8010ebc:	465a      	mov	r2, fp
 8010ebe:	4601      	mov	r1, r0
 8010ec0:	4607      	mov	r7, r0
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	f000 fd52 	bl	801196c <__multiply>
 8010ec8:	4659      	mov	r1, fp
 8010eca:	9007      	str	r0, [sp, #28]
 8010ecc:	4620      	mov	r0, r4
 8010ece:	f000 fc7b 	bl	80117c8 <_Bfree>
 8010ed2:	9b07      	ldr	r3, [sp, #28]
 8010ed4:	469b      	mov	fp, r3
 8010ed6:	9b06      	ldr	r3, [sp, #24]
 8010ed8:	1b9a      	subs	r2, r3, r6
 8010eda:	d004      	beq.n	8010ee6 <_dtoa_r+0x7ce>
 8010edc:	4659      	mov	r1, fp
 8010ede:	4620      	mov	r0, r4
 8010ee0:	f000 fdea 	bl	8011ab8 <__pow5mult>
 8010ee4:	4683      	mov	fp, r0
 8010ee6:	2101      	movs	r1, #1
 8010ee8:	4620      	mov	r0, r4
 8010eea:	f000 fd29 	bl	8011940 <__i2b>
 8010eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	4606      	mov	r6, r0
 8010ef4:	dd7c      	ble.n	8010ff0 <_dtoa_r+0x8d8>
 8010ef6:	461a      	mov	r2, r3
 8010ef8:	4601      	mov	r1, r0
 8010efa:	4620      	mov	r0, r4
 8010efc:	f000 fddc 	bl	8011ab8 <__pow5mult>
 8010f00:	9b05      	ldr	r3, [sp, #20]
 8010f02:	2b01      	cmp	r3, #1
 8010f04:	4606      	mov	r6, r0
 8010f06:	dd76      	ble.n	8010ff6 <_dtoa_r+0x8de>
 8010f08:	2300      	movs	r3, #0
 8010f0a:	9306      	str	r3, [sp, #24]
 8010f0c:	6933      	ldr	r3, [r6, #16]
 8010f0e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010f12:	6918      	ldr	r0, [r3, #16]
 8010f14:	f000 fcc4 	bl	80118a0 <__hi0bits>
 8010f18:	f1c0 0020 	rsb	r0, r0, #32
 8010f1c:	9b04      	ldr	r3, [sp, #16]
 8010f1e:	4418      	add	r0, r3
 8010f20:	f010 001f 	ands.w	r0, r0, #31
 8010f24:	f000 8086 	beq.w	8011034 <_dtoa_r+0x91c>
 8010f28:	f1c0 0320 	rsb	r3, r0, #32
 8010f2c:	2b04      	cmp	r3, #4
 8010f2e:	dd7f      	ble.n	8011030 <_dtoa_r+0x918>
 8010f30:	f1c0 001c 	rsb	r0, r0, #28
 8010f34:	9b04      	ldr	r3, [sp, #16]
 8010f36:	4403      	add	r3, r0
 8010f38:	4480      	add	r8, r0
 8010f3a:	4405      	add	r5, r0
 8010f3c:	9304      	str	r3, [sp, #16]
 8010f3e:	f1b8 0f00 	cmp.w	r8, #0
 8010f42:	dd05      	ble.n	8010f50 <_dtoa_r+0x838>
 8010f44:	4659      	mov	r1, fp
 8010f46:	4642      	mov	r2, r8
 8010f48:	4620      	mov	r0, r4
 8010f4a:	f000 fe0f 	bl	8011b6c <__lshift>
 8010f4e:	4683      	mov	fp, r0
 8010f50:	9b04      	ldr	r3, [sp, #16]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	dd05      	ble.n	8010f62 <_dtoa_r+0x84a>
 8010f56:	4631      	mov	r1, r6
 8010f58:	461a      	mov	r2, r3
 8010f5a:	4620      	mov	r0, r4
 8010f5c:	f000 fe06 	bl	8011b6c <__lshift>
 8010f60:	4606      	mov	r6, r0
 8010f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d069      	beq.n	801103c <_dtoa_r+0x924>
 8010f68:	4631      	mov	r1, r6
 8010f6a:	4658      	mov	r0, fp
 8010f6c:	f000 fe6a 	bl	8011c44 <__mcmp>
 8010f70:	2800      	cmp	r0, #0
 8010f72:	da63      	bge.n	801103c <_dtoa_r+0x924>
 8010f74:	2300      	movs	r3, #0
 8010f76:	4659      	mov	r1, fp
 8010f78:	220a      	movs	r2, #10
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	f000 fc46 	bl	801180c <__multadd>
 8010f80:	9b08      	ldr	r3, [sp, #32]
 8010f82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010f86:	4683      	mov	fp, r0
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	f000 818f 	beq.w	80112ac <_dtoa_r+0xb94>
 8010f8e:	4639      	mov	r1, r7
 8010f90:	2300      	movs	r3, #0
 8010f92:	220a      	movs	r2, #10
 8010f94:	4620      	mov	r0, r4
 8010f96:	f000 fc39 	bl	801180c <__multadd>
 8010f9a:	f1b9 0f00 	cmp.w	r9, #0
 8010f9e:	4607      	mov	r7, r0
 8010fa0:	f300 808e 	bgt.w	80110c0 <_dtoa_r+0x9a8>
 8010fa4:	9b05      	ldr	r3, [sp, #20]
 8010fa6:	2b02      	cmp	r3, #2
 8010fa8:	dc50      	bgt.n	801104c <_dtoa_r+0x934>
 8010faa:	e089      	b.n	80110c0 <_dtoa_r+0x9a8>
 8010fac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010fae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010fb2:	e75d      	b.n	8010e70 <_dtoa_r+0x758>
 8010fb4:	9b01      	ldr	r3, [sp, #4]
 8010fb6:	1e5e      	subs	r6, r3, #1
 8010fb8:	9b06      	ldr	r3, [sp, #24]
 8010fba:	42b3      	cmp	r3, r6
 8010fbc:	bfbf      	itttt	lt
 8010fbe:	9b06      	ldrlt	r3, [sp, #24]
 8010fc0:	9606      	strlt	r6, [sp, #24]
 8010fc2:	1af2      	sublt	r2, r6, r3
 8010fc4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8010fc6:	bfb6      	itet	lt
 8010fc8:	189b      	addlt	r3, r3, r2
 8010fca:	1b9e      	subge	r6, r3, r6
 8010fcc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010fce:	9b01      	ldr	r3, [sp, #4]
 8010fd0:	bfb8      	it	lt
 8010fd2:	2600      	movlt	r6, #0
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	bfb5      	itete	lt
 8010fd8:	eba8 0503 	sublt.w	r5, r8, r3
 8010fdc:	9b01      	ldrge	r3, [sp, #4]
 8010fde:	2300      	movlt	r3, #0
 8010fe0:	4645      	movge	r5, r8
 8010fe2:	e747      	b.n	8010e74 <_dtoa_r+0x75c>
 8010fe4:	9e06      	ldr	r6, [sp, #24]
 8010fe6:	9f08      	ldr	r7, [sp, #32]
 8010fe8:	4645      	mov	r5, r8
 8010fea:	e74c      	b.n	8010e86 <_dtoa_r+0x76e>
 8010fec:	9a06      	ldr	r2, [sp, #24]
 8010fee:	e775      	b.n	8010edc <_dtoa_r+0x7c4>
 8010ff0:	9b05      	ldr	r3, [sp, #20]
 8010ff2:	2b01      	cmp	r3, #1
 8010ff4:	dc18      	bgt.n	8011028 <_dtoa_r+0x910>
 8010ff6:	9b02      	ldr	r3, [sp, #8]
 8010ff8:	b9b3      	cbnz	r3, 8011028 <_dtoa_r+0x910>
 8010ffa:	9b03      	ldr	r3, [sp, #12]
 8010ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011000:	b9a3      	cbnz	r3, 801102c <_dtoa_r+0x914>
 8011002:	9b03      	ldr	r3, [sp, #12]
 8011004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011008:	0d1b      	lsrs	r3, r3, #20
 801100a:	051b      	lsls	r3, r3, #20
 801100c:	b12b      	cbz	r3, 801101a <_dtoa_r+0x902>
 801100e:	9b04      	ldr	r3, [sp, #16]
 8011010:	3301      	adds	r3, #1
 8011012:	9304      	str	r3, [sp, #16]
 8011014:	f108 0801 	add.w	r8, r8, #1
 8011018:	2301      	movs	r3, #1
 801101a:	9306      	str	r3, [sp, #24]
 801101c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801101e:	2b00      	cmp	r3, #0
 8011020:	f47f af74 	bne.w	8010f0c <_dtoa_r+0x7f4>
 8011024:	2001      	movs	r0, #1
 8011026:	e779      	b.n	8010f1c <_dtoa_r+0x804>
 8011028:	2300      	movs	r3, #0
 801102a:	e7f6      	b.n	801101a <_dtoa_r+0x902>
 801102c:	9b02      	ldr	r3, [sp, #8]
 801102e:	e7f4      	b.n	801101a <_dtoa_r+0x902>
 8011030:	d085      	beq.n	8010f3e <_dtoa_r+0x826>
 8011032:	4618      	mov	r0, r3
 8011034:	301c      	adds	r0, #28
 8011036:	e77d      	b.n	8010f34 <_dtoa_r+0x81c>
 8011038:	40240000 	.word	0x40240000
 801103c:	9b01      	ldr	r3, [sp, #4]
 801103e:	2b00      	cmp	r3, #0
 8011040:	dc38      	bgt.n	80110b4 <_dtoa_r+0x99c>
 8011042:	9b05      	ldr	r3, [sp, #20]
 8011044:	2b02      	cmp	r3, #2
 8011046:	dd35      	ble.n	80110b4 <_dtoa_r+0x99c>
 8011048:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801104c:	f1b9 0f00 	cmp.w	r9, #0
 8011050:	d10d      	bne.n	801106e <_dtoa_r+0x956>
 8011052:	4631      	mov	r1, r6
 8011054:	464b      	mov	r3, r9
 8011056:	2205      	movs	r2, #5
 8011058:	4620      	mov	r0, r4
 801105a:	f000 fbd7 	bl	801180c <__multadd>
 801105e:	4601      	mov	r1, r0
 8011060:	4606      	mov	r6, r0
 8011062:	4658      	mov	r0, fp
 8011064:	f000 fdee 	bl	8011c44 <__mcmp>
 8011068:	2800      	cmp	r0, #0
 801106a:	f73f adbd 	bgt.w	8010be8 <_dtoa_r+0x4d0>
 801106e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011070:	9d00      	ldr	r5, [sp, #0]
 8011072:	ea6f 0a03 	mvn.w	sl, r3
 8011076:	f04f 0800 	mov.w	r8, #0
 801107a:	4631      	mov	r1, r6
 801107c:	4620      	mov	r0, r4
 801107e:	f000 fba3 	bl	80117c8 <_Bfree>
 8011082:	2f00      	cmp	r7, #0
 8011084:	f43f aeb4 	beq.w	8010df0 <_dtoa_r+0x6d8>
 8011088:	f1b8 0f00 	cmp.w	r8, #0
 801108c:	d005      	beq.n	801109a <_dtoa_r+0x982>
 801108e:	45b8      	cmp	r8, r7
 8011090:	d003      	beq.n	801109a <_dtoa_r+0x982>
 8011092:	4641      	mov	r1, r8
 8011094:	4620      	mov	r0, r4
 8011096:	f000 fb97 	bl	80117c8 <_Bfree>
 801109a:	4639      	mov	r1, r7
 801109c:	4620      	mov	r0, r4
 801109e:	f000 fb93 	bl	80117c8 <_Bfree>
 80110a2:	e6a5      	b.n	8010df0 <_dtoa_r+0x6d8>
 80110a4:	2600      	movs	r6, #0
 80110a6:	4637      	mov	r7, r6
 80110a8:	e7e1      	b.n	801106e <_dtoa_r+0x956>
 80110aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80110ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80110b0:	4637      	mov	r7, r6
 80110b2:	e599      	b.n	8010be8 <_dtoa_r+0x4d0>
 80110b4:	9b08      	ldr	r3, [sp, #32]
 80110b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	f000 80fd 	beq.w	80112ba <_dtoa_r+0xba2>
 80110c0:	2d00      	cmp	r5, #0
 80110c2:	dd05      	ble.n	80110d0 <_dtoa_r+0x9b8>
 80110c4:	4639      	mov	r1, r7
 80110c6:	462a      	mov	r2, r5
 80110c8:	4620      	mov	r0, r4
 80110ca:	f000 fd4f 	bl	8011b6c <__lshift>
 80110ce:	4607      	mov	r7, r0
 80110d0:	9b06      	ldr	r3, [sp, #24]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d05c      	beq.n	8011190 <_dtoa_r+0xa78>
 80110d6:	6879      	ldr	r1, [r7, #4]
 80110d8:	4620      	mov	r0, r4
 80110da:	f000 fb35 	bl	8011748 <_Balloc>
 80110de:	4605      	mov	r5, r0
 80110e0:	b928      	cbnz	r0, 80110ee <_dtoa_r+0x9d6>
 80110e2:	4b80      	ldr	r3, [pc, #512]	; (80112e4 <_dtoa_r+0xbcc>)
 80110e4:	4602      	mov	r2, r0
 80110e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80110ea:	f7ff bb2e 	b.w	801074a <_dtoa_r+0x32>
 80110ee:	693a      	ldr	r2, [r7, #16]
 80110f0:	3202      	adds	r2, #2
 80110f2:	0092      	lsls	r2, r2, #2
 80110f4:	f107 010c 	add.w	r1, r7, #12
 80110f8:	300c      	adds	r0, #12
 80110fa:	f7fe fc25 	bl	800f948 <memcpy>
 80110fe:	2201      	movs	r2, #1
 8011100:	4629      	mov	r1, r5
 8011102:	4620      	mov	r0, r4
 8011104:	f000 fd32 	bl	8011b6c <__lshift>
 8011108:	9b00      	ldr	r3, [sp, #0]
 801110a:	3301      	adds	r3, #1
 801110c:	9301      	str	r3, [sp, #4]
 801110e:	9b00      	ldr	r3, [sp, #0]
 8011110:	444b      	add	r3, r9
 8011112:	9307      	str	r3, [sp, #28]
 8011114:	9b02      	ldr	r3, [sp, #8]
 8011116:	f003 0301 	and.w	r3, r3, #1
 801111a:	46b8      	mov	r8, r7
 801111c:	9306      	str	r3, [sp, #24]
 801111e:	4607      	mov	r7, r0
 8011120:	9b01      	ldr	r3, [sp, #4]
 8011122:	4631      	mov	r1, r6
 8011124:	3b01      	subs	r3, #1
 8011126:	4658      	mov	r0, fp
 8011128:	9302      	str	r3, [sp, #8]
 801112a:	f7ff fa69 	bl	8010600 <quorem>
 801112e:	4603      	mov	r3, r0
 8011130:	3330      	adds	r3, #48	; 0x30
 8011132:	9004      	str	r0, [sp, #16]
 8011134:	4641      	mov	r1, r8
 8011136:	4658      	mov	r0, fp
 8011138:	9308      	str	r3, [sp, #32]
 801113a:	f000 fd83 	bl	8011c44 <__mcmp>
 801113e:	463a      	mov	r2, r7
 8011140:	4681      	mov	r9, r0
 8011142:	4631      	mov	r1, r6
 8011144:	4620      	mov	r0, r4
 8011146:	f000 fd99 	bl	8011c7c <__mdiff>
 801114a:	68c2      	ldr	r2, [r0, #12]
 801114c:	9b08      	ldr	r3, [sp, #32]
 801114e:	4605      	mov	r5, r0
 8011150:	bb02      	cbnz	r2, 8011194 <_dtoa_r+0xa7c>
 8011152:	4601      	mov	r1, r0
 8011154:	4658      	mov	r0, fp
 8011156:	f000 fd75 	bl	8011c44 <__mcmp>
 801115a:	9b08      	ldr	r3, [sp, #32]
 801115c:	4602      	mov	r2, r0
 801115e:	4629      	mov	r1, r5
 8011160:	4620      	mov	r0, r4
 8011162:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011166:	f000 fb2f 	bl	80117c8 <_Bfree>
 801116a:	9b05      	ldr	r3, [sp, #20]
 801116c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801116e:	9d01      	ldr	r5, [sp, #4]
 8011170:	ea43 0102 	orr.w	r1, r3, r2
 8011174:	9b06      	ldr	r3, [sp, #24]
 8011176:	430b      	orrs	r3, r1
 8011178:	9b08      	ldr	r3, [sp, #32]
 801117a:	d10d      	bne.n	8011198 <_dtoa_r+0xa80>
 801117c:	2b39      	cmp	r3, #57	; 0x39
 801117e:	d029      	beq.n	80111d4 <_dtoa_r+0xabc>
 8011180:	f1b9 0f00 	cmp.w	r9, #0
 8011184:	dd01      	ble.n	801118a <_dtoa_r+0xa72>
 8011186:	9b04      	ldr	r3, [sp, #16]
 8011188:	3331      	adds	r3, #49	; 0x31
 801118a:	9a02      	ldr	r2, [sp, #8]
 801118c:	7013      	strb	r3, [r2, #0]
 801118e:	e774      	b.n	801107a <_dtoa_r+0x962>
 8011190:	4638      	mov	r0, r7
 8011192:	e7b9      	b.n	8011108 <_dtoa_r+0x9f0>
 8011194:	2201      	movs	r2, #1
 8011196:	e7e2      	b.n	801115e <_dtoa_r+0xa46>
 8011198:	f1b9 0f00 	cmp.w	r9, #0
 801119c:	db06      	blt.n	80111ac <_dtoa_r+0xa94>
 801119e:	9905      	ldr	r1, [sp, #20]
 80111a0:	ea41 0909 	orr.w	r9, r1, r9
 80111a4:	9906      	ldr	r1, [sp, #24]
 80111a6:	ea59 0101 	orrs.w	r1, r9, r1
 80111aa:	d120      	bne.n	80111ee <_dtoa_r+0xad6>
 80111ac:	2a00      	cmp	r2, #0
 80111ae:	ddec      	ble.n	801118a <_dtoa_r+0xa72>
 80111b0:	4659      	mov	r1, fp
 80111b2:	2201      	movs	r2, #1
 80111b4:	4620      	mov	r0, r4
 80111b6:	9301      	str	r3, [sp, #4]
 80111b8:	f000 fcd8 	bl	8011b6c <__lshift>
 80111bc:	4631      	mov	r1, r6
 80111be:	4683      	mov	fp, r0
 80111c0:	f000 fd40 	bl	8011c44 <__mcmp>
 80111c4:	2800      	cmp	r0, #0
 80111c6:	9b01      	ldr	r3, [sp, #4]
 80111c8:	dc02      	bgt.n	80111d0 <_dtoa_r+0xab8>
 80111ca:	d1de      	bne.n	801118a <_dtoa_r+0xa72>
 80111cc:	07da      	lsls	r2, r3, #31
 80111ce:	d5dc      	bpl.n	801118a <_dtoa_r+0xa72>
 80111d0:	2b39      	cmp	r3, #57	; 0x39
 80111d2:	d1d8      	bne.n	8011186 <_dtoa_r+0xa6e>
 80111d4:	9a02      	ldr	r2, [sp, #8]
 80111d6:	2339      	movs	r3, #57	; 0x39
 80111d8:	7013      	strb	r3, [r2, #0]
 80111da:	462b      	mov	r3, r5
 80111dc:	461d      	mov	r5, r3
 80111de:	3b01      	subs	r3, #1
 80111e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80111e4:	2a39      	cmp	r2, #57	; 0x39
 80111e6:	d050      	beq.n	801128a <_dtoa_r+0xb72>
 80111e8:	3201      	adds	r2, #1
 80111ea:	701a      	strb	r2, [r3, #0]
 80111ec:	e745      	b.n	801107a <_dtoa_r+0x962>
 80111ee:	2a00      	cmp	r2, #0
 80111f0:	dd03      	ble.n	80111fa <_dtoa_r+0xae2>
 80111f2:	2b39      	cmp	r3, #57	; 0x39
 80111f4:	d0ee      	beq.n	80111d4 <_dtoa_r+0xabc>
 80111f6:	3301      	adds	r3, #1
 80111f8:	e7c7      	b.n	801118a <_dtoa_r+0xa72>
 80111fa:	9a01      	ldr	r2, [sp, #4]
 80111fc:	9907      	ldr	r1, [sp, #28]
 80111fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011202:	428a      	cmp	r2, r1
 8011204:	d02a      	beq.n	801125c <_dtoa_r+0xb44>
 8011206:	4659      	mov	r1, fp
 8011208:	2300      	movs	r3, #0
 801120a:	220a      	movs	r2, #10
 801120c:	4620      	mov	r0, r4
 801120e:	f000 fafd 	bl	801180c <__multadd>
 8011212:	45b8      	cmp	r8, r7
 8011214:	4683      	mov	fp, r0
 8011216:	f04f 0300 	mov.w	r3, #0
 801121a:	f04f 020a 	mov.w	r2, #10
 801121e:	4641      	mov	r1, r8
 8011220:	4620      	mov	r0, r4
 8011222:	d107      	bne.n	8011234 <_dtoa_r+0xb1c>
 8011224:	f000 faf2 	bl	801180c <__multadd>
 8011228:	4680      	mov	r8, r0
 801122a:	4607      	mov	r7, r0
 801122c:	9b01      	ldr	r3, [sp, #4]
 801122e:	3301      	adds	r3, #1
 8011230:	9301      	str	r3, [sp, #4]
 8011232:	e775      	b.n	8011120 <_dtoa_r+0xa08>
 8011234:	f000 faea 	bl	801180c <__multadd>
 8011238:	4639      	mov	r1, r7
 801123a:	4680      	mov	r8, r0
 801123c:	2300      	movs	r3, #0
 801123e:	220a      	movs	r2, #10
 8011240:	4620      	mov	r0, r4
 8011242:	f000 fae3 	bl	801180c <__multadd>
 8011246:	4607      	mov	r7, r0
 8011248:	e7f0      	b.n	801122c <_dtoa_r+0xb14>
 801124a:	f1b9 0f00 	cmp.w	r9, #0
 801124e:	9a00      	ldr	r2, [sp, #0]
 8011250:	bfcc      	ite	gt
 8011252:	464d      	movgt	r5, r9
 8011254:	2501      	movle	r5, #1
 8011256:	4415      	add	r5, r2
 8011258:	f04f 0800 	mov.w	r8, #0
 801125c:	4659      	mov	r1, fp
 801125e:	2201      	movs	r2, #1
 8011260:	4620      	mov	r0, r4
 8011262:	9301      	str	r3, [sp, #4]
 8011264:	f000 fc82 	bl	8011b6c <__lshift>
 8011268:	4631      	mov	r1, r6
 801126a:	4683      	mov	fp, r0
 801126c:	f000 fcea 	bl	8011c44 <__mcmp>
 8011270:	2800      	cmp	r0, #0
 8011272:	dcb2      	bgt.n	80111da <_dtoa_r+0xac2>
 8011274:	d102      	bne.n	801127c <_dtoa_r+0xb64>
 8011276:	9b01      	ldr	r3, [sp, #4]
 8011278:	07db      	lsls	r3, r3, #31
 801127a:	d4ae      	bmi.n	80111da <_dtoa_r+0xac2>
 801127c:	462b      	mov	r3, r5
 801127e:	461d      	mov	r5, r3
 8011280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011284:	2a30      	cmp	r2, #48	; 0x30
 8011286:	d0fa      	beq.n	801127e <_dtoa_r+0xb66>
 8011288:	e6f7      	b.n	801107a <_dtoa_r+0x962>
 801128a:	9a00      	ldr	r2, [sp, #0]
 801128c:	429a      	cmp	r2, r3
 801128e:	d1a5      	bne.n	80111dc <_dtoa_r+0xac4>
 8011290:	f10a 0a01 	add.w	sl, sl, #1
 8011294:	2331      	movs	r3, #49	; 0x31
 8011296:	e779      	b.n	801118c <_dtoa_r+0xa74>
 8011298:	4b13      	ldr	r3, [pc, #76]	; (80112e8 <_dtoa_r+0xbd0>)
 801129a:	f7ff baaf 	b.w	80107fc <_dtoa_r+0xe4>
 801129e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	f47f aa86 	bne.w	80107b2 <_dtoa_r+0x9a>
 80112a6:	4b11      	ldr	r3, [pc, #68]	; (80112ec <_dtoa_r+0xbd4>)
 80112a8:	f7ff baa8 	b.w	80107fc <_dtoa_r+0xe4>
 80112ac:	f1b9 0f00 	cmp.w	r9, #0
 80112b0:	dc03      	bgt.n	80112ba <_dtoa_r+0xba2>
 80112b2:	9b05      	ldr	r3, [sp, #20]
 80112b4:	2b02      	cmp	r3, #2
 80112b6:	f73f aec9 	bgt.w	801104c <_dtoa_r+0x934>
 80112ba:	9d00      	ldr	r5, [sp, #0]
 80112bc:	4631      	mov	r1, r6
 80112be:	4658      	mov	r0, fp
 80112c0:	f7ff f99e 	bl	8010600 <quorem>
 80112c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80112c8:	f805 3b01 	strb.w	r3, [r5], #1
 80112cc:	9a00      	ldr	r2, [sp, #0]
 80112ce:	1aaa      	subs	r2, r5, r2
 80112d0:	4591      	cmp	r9, r2
 80112d2:	ddba      	ble.n	801124a <_dtoa_r+0xb32>
 80112d4:	4659      	mov	r1, fp
 80112d6:	2300      	movs	r3, #0
 80112d8:	220a      	movs	r2, #10
 80112da:	4620      	mov	r0, r4
 80112dc:	f000 fa96 	bl	801180c <__multadd>
 80112e0:	4683      	mov	fp, r0
 80112e2:	e7eb      	b.n	80112bc <_dtoa_r+0xba4>
 80112e4:	0801471c 	.word	0x0801471c
 80112e8:	08014574 	.word	0x08014574
 80112ec:	08014699 	.word	0x08014699

080112f0 <__sflush_r>:
 80112f0:	898a      	ldrh	r2, [r1, #12]
 80112f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112f6:	4605      	mov	r5, r0
 80112f8:	0710      	lsls	r0, r2, #28
 80112fa:	460c      	mov	r4, r1
 80112fc:	d458      	bmi.n	80113b0 <__sflush_r+0xc0>
 80112fe:	684b      	ldr	r3, [r1, #4]
 8011300:	2b00      	cmp	r3, #0
 8011302:	dc05      	bgt.n	8011310 <__sflush_r+0x20>
 8011304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011306:	2b00      	cmp	r3, #0
 8011308:	dc02      	bgt.n	8011310 <__sflush_r+0x20>
 801130a:	2000      	movs	r0, #0
 801130c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011312:	2e00      	cmp	r6, #0
 8011314:	d0f9      	beq.n	801130a <__sflush_r+0x1a>
 8011316:	2300      	movs	r3, #0
 8011318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801131c:	682f      	ldr	r7, [r5, #0]
 801131e:	602b      	str	r3, [r5, #0]
 8011320:	d032      	beq.n	8011388 <__sflush_r+0x98>
 8011322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011324:	89a3      	ldrh	r3, [r4, #12]
 8011326:	075a      	lsls	r2, r3, #29
 8011328:	d505      	bpl.n	8011336 <__sflush_r+0x46>
 801132a:	6863      	ldr	r3, [r4, #4]
 801132c:	1ac0      	subs	r0, r0, r3
 801132e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011330:	b10b      	cbz	r3, 8011336 <__sflush_r+0x46>
 8011332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011334:	1ac0      	subs	r0, r0, r3
 8011336:	2300      	movs	r3, #0
 8011338:	4602      	mov	r2, r0
 801133a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801133c:	6a21      	ldr	r1, [r4, #32]
 801133e:	4628      	mov	r0, r5
 8011340:	47b0      	blx	r6
 8011342:	1c43      	adds	r3, r0, #1
 8011344:	89a3      	ldrh	r3, [r4, #12]
 8011346:	d106      	bne.n	8011356 <__sflush_r+0x66>
 8011348:	6829      	ldr	r1, [r5, #0]
 801134a:	291d      	cmp	r1, #29
 801134c:	d82c      	bhi.n	80113a8 <__sflush_r+0xb8>
 801134e:	4a2a      	ldr	r2, [pc, #168]	; (80113f8 <__sflush_r+0x108>)
 8011350:	40ca      	lsrs	r2, r1
 8011352:	07d6      	lsls	r6, r2, #31
 8011354:	d528      	bpl.n	80113a8 <__sflush_r+0xb8>
 8011356:	2200      	movs	r2, #0
 8011358:	6062      	str	r2, [r4, #4]
 801135a:	04d9      	lsls	r1, r3, #19
 801135c:	6922      	ldr	r2, [r4, #16]
 801135e:	6022      	str	r2, [r4, #0]
 8011360:	d504      	bpl.n	801136c <__sflush_r+0x7c>
 8011362:	1c42      	adds	r2, r0, #1
 8011364:	d101      	bne.n	801136a <__sflush_r+0x7a>
 8011366:	682b      	ldr	r3, [r5, #0]
 8011368:	b903      	cbnz	r3, 801136c <__sflush_r+0x7c>
 801136a:	6560      	str	r0, [r4, #84]	; 0x54
 801136c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801136e:	602f      	str	r7, [r5, #0]
 8011370:	2900      	cmp	r1, #0
 8011372:	d0ca      	beq.n	801130a <__sflush_r+0x1a>
 8011374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011378:	4299      	cmp	r1, r3
 801137a:	d002      	beq.n	8011382 <__sflush_r+0x92>
 801137c:	4628      	mov	r0, r5
 801137e:	f000 fd71 	bl	8011e64 <_free_r>
 8011382:	2000      	movs	r0, #0
 8011384:	6360      	str	r0, [r4, #52]	; 0x34
 8011386:	e7c1      	b.n	801130c <__sflush_r+0x1c>
 8011388:	6a21      	ldr	r1, [r4, #32]
 801138a:	2301      	movs	r3, #1
 801138c:	4628      	mov	r0, r5
 801138e:	47b0      	blx	r6
 8011390:	1c41      	adds	r1, r0, #1
 8011392:	d1c7      	bne.n	8011324 <__sflush_r+0x34>
 8011394:	682b      	ldr	r3, [r5, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d0c4      	beq.n	8011324 <__sflush_r+0x34>
 801139a:	2b1d      	cmp	r3, #29
 801139c:	d001      	beq.n	80113a2 <__sflush_r+0xb2>
 801139e:	2b16      	cmp	r3, #22
 80113a0:	d101      	bne.n	80113a6 <__sflush_r+0xb6>
 80113a2:	602f      	str	r7, [r5, #0]
 80113a4:	e7b1      	b.n	801130a <__sflush_r+0x1a>
 80113a6:	89a3      	ldrh	r3, [r4, #12]
 80113a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113ac:	81a3      	strh	r3, [r4, #12]
 80113ae:	e7ad      	b.n	801130c <__sflush_r+0x1c>
 80113b0:	690f      	ldr	r7, [r1, #16]
 80113b2:	2f00      	cmp	r7, #0
 80113b4:	d0a9      	beq.n	801130a <__sflush_r+0x1a>
 80113b6:	0793      	lsls	r3, r2, #30
 80113b8:	680e      	ldr	r6, [r1, #0]
 80113ba:	bf08      	it	eq
 80113bc:	694b      	ldreq	r3, [r1, #20]
 80113be:	600f      	str	r7, [r1, #0]
 80113c0:	bf18      	it	ne
 80113c2:	2300      	movne	r3, #0
 80113c4:	eba6 0807 	sub.w	r8, r6, r7
 80113c8:	608b      	str	r3, [r1, #8]
 80113ca:	f1b8 0f00 	cmp.w	r8, #0
 80113ce:	dd9c      	ble.n	801130a <__sflush_r+0x1a>
 80113d0:	6a21      	ldr	r1, [r4, #32]
 80113d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80113d4:	4643      	mov	r3, r8
 80113d6:	463a      	mov	r2, r7
 80113d8:	4628      	mov	r0, r5
 80113da:	47b0      	blx	r6
 80113dc:	2800      	cmp	r0, #0
 80113de:	dc06      	bgt.n	80113ee <__sflush_r+0xfe>
 80113e0:	89a3      	ldrh	r3, [r4, #12]
 80113e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113e6:	81a3      	strh	r3, [r4, #12]
 80113e8:	f04f 30ff 	mov.w	r0, #4294967295
 80113ec:	e78e      	b.n	801130c <__sflush_r+0x1c>
 80113ee:	4407      	add	r7, r0
 80113f0:	eba8 0800 	sub.w	r8, r8, r0
 80113f4:	e7e9      	b.n	80113ca <__sflush_r+0xda>
 80113f6:	bf00      	nop
 80113f8:	20400001 	.word	0x20400001

080113fc <_fflush_r>:
 80113fc:	b538      	push	{r3, r4, r5, lr}
 80113fe:	690b      	ldr	r3, [r1, #16]
 8011400:	4605      	mov	r5, r0
 8011402:	460c      	mov	r4, r1
 8011404:	b913      	cbnz	r3, 801140c <_fflush_r+0x10>
 8011406:	2500      	movs	r5, #0
 8011408:	4628      	mov	r0, r5
 801140a:	bd38      	pop	{r3, r4, r5, pc}
 801140c:	b118      	cbz	r0, 8011416 <_fflush_r+0x1a>
 801140e:	6983      	ldr	r3, [r0, #24]
 8011410:	b90b      	cbnz	r3, 8011416 <_fflush_r+0x1a>
 8011412:	f000 f887 	bl	8011524 <__sinit>
 8011416:	4b14      	ldr	r3, [pc, #80]	; (8011468 <_fflush_r+0x6c>)
 8011418:	429c      	cmp	r4, r3
 801141a:	d11b      	bne.n	8011454 <_fflush_r+0x58>
 801141c:	686c      	ldr	r4, [r5, #4]
 801141e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d0ef      	beq.n	8011406 <_fflush_r+0xa>
 8011426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011428:	07d0      	lsls	r0, r2, #31
 801142a:	d404      	bmi.n	8011436 <_fflush_r+0x3a>
 801142c:	0599      	lsls	r1, r3, #22
 801142e:	d402      	bmi.n	8011436 <_fflush_r+0x3a>
 8011430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011432:	f000 f91a 	bl	801166a <__retarget_lock_acquire_recursive>
 8011436:	4628      	mov	r0, r5
 8011438:	4621      	mov	r1, r4
 801143a:	f7ff ff59 	bl	80112f0 <__sflush_r>
 801143e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011440:	07da      	lsls	r2, r3, #31
 8011442:	4605      	mov	r5, r0
 8011444:	d4e0      	bmi.n	8011408 <_fflush_r+0xc>
 8011446:	89a3      	ldrh	r3, [r4, #12]
 8011448:	059b      	lsls	r3, r3, #22
 801144a:	d4dd      	bmi.n	8011408 <_fflush_r+0xc>
 801144c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801144e:	f000 f90d 	bl	801166c <__retarget_lock_release_recursive>
 8011452:	e7d9      	b.n	8011408 <_fflush_r+0xc>
 8011454:	4b05      	ldr	r3, [pc, #20]	; (801146c <_fflush_r+0x70>)
 8011456:	429c      	cmp	r4, r3
 8011458:	d101      	bne.n	801145e <_fflush_r+0x62>
 801145a:	68ac      	ldr	r4, [r5, #8]
 801145c:	e7df      	b.n	801141e <_fflush_r+0x22>
 801145e:	4b04      	ldr	r3, [pc, #16]	; (8011470 <_fflush_r+0x74>)
 8011460:	429c      	cmp	r4, r3
 8011462:	bf08      	it	eq
 8011464:	68ec      	ldreq	r4, [r5, #12]
 8011466:	e7da      	b.n	801141e <_fflush_r+0x22>
 8011468:	08014750 	.word	0x08014750
 801146c:	08014770 	.word	0x08014770
 8011470:	08014730 	.word	0x08014730

08011474 <std>:
 8011474:	2300      	movs	r3, #0
 8011476:	b510      	push	{r4, lr}
 8011478:	4604      	mov	r4, r0
 801147a:	e9c0 3300 	strd	r3, r3, [r0]
 801147e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011482:	6083      	str	r3, [r0, #8]
 8011484:	8181      	strh	r1, [r0, #12]
 8011486:	6643      	str	r3, [r0, #100]	; 0x64
 8011488:	81c2      	strh	r2, [r0, #14]
 801148a:	6183      	str	r3, [r0, #24]
 801148c:	4619      	mov	r1, r3
 801148e:	2208      	movs	r2, #8
 8011490:	305c      	adds	r0, #92	; 0x5c
 8011492:	f7fe fa67 	bl	800f964 <memset>
 8011496:	4b05      	ldr	r3, [pc, #20]	; (80114ac <std+0x38>)
 8011498:	6263      	str	r3, [r4, #36]	; 0x24
 801149a:	4b05      	ldr	r3, [pc, #20]	; (80114b0 <std+0x3c>)
 801149c:	62a3      	str	r3, [r4, #40]	; 0x28
 801149e:	4b05      	ldr	r3, [pc, #20]	; (80114b4 <std+0x40>)
 80114a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80114a2:	4b05      	ldr	r3, [pc, #20]	; (80114b8 <std+0x44>)
 80114a4:	6224      	str	r4, [r4, #32]
 80114a6:	6323      	str	r3, [r4, #48]	; 0x30
 80114a8:	bd10      	pop	{r4, pc}
 80114aa:	bf00      	nop
 80114ac:	0801228d 	.word	0x0801228d
 80114b0:	080122af 	.word	0x080122af
 80114b4:	080122e7 	.word	0x080122e7
 80114b8:	0801230b 	.word	0x0801230b

080114bc <_cleanup_r>:
 80114bc:	4901      	ldr	r1, [pc, #4]	; (80114c4 <_cleanup_r+0x8>)
 80114be:	f000 b8af 	b.w	8011620 <_fwalk_reent>
 80114c2:	bf00      	nop
 80114c4:	080113fd 	.word	0x080113fd

080114c8 <__sfmoreglue>:
 80114c8:	b570      	push	{r4, r5, r6, lr}
 80114ca:	1e4a      	subs	r2, r1, #1
 80114cc:	2568      	movs	r5, #104	; 0x68
 80114ce:	4355      	muls	r5, r2
 80114d0:	460e      	mov	r6, r1
 80114d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80114d6:	f000 fd15 	bl	8011f04 <_malloc_r>
 80114da:	4604      	mov	r4, r0
 80114dc:	b140      	cbz	r0, 80114f0 <__sfmoreglue+0x28>
 80114de:	2100      	movs	r1, #0
 80114e0:	e9c0 1600 	strd	r1, r6, [r0]
 80114e4:	300c      	adds	r0, #12
 80114e6:	60a0      	str	r0, [r4, #8]
 80114e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80114ec:	f7fe fa3a 	bl	800f964 <memset>
 80114f0:	4620      	mov	r0, r4
 80114f2:	bd70      	pop	{r4, r5, r6, pc}

080114f4 <__sfp_lock_acquire>:
 80114f4:	4801      	ldr	r0, [pc, #4]	; (80114fc <__sfp_lock_acquire+0x8>)
 80114f6:	f000 b8b8 	b.w	801166a <__retarget_lock_acquire_recursive>
 80114fa:	bf00      	nop
 80114fc:	2000b720 	.word	0x2000b720

08011500 <__sfp_lock_release>:
 8011500:	4801      	ldr	r0, [pc, #4]	; (8011508 <__sfp_lock_release+0x8>)
 8011502:	f000 b8b3 	b.w	801166c <__retarget_lock_release_recursive>
 8011506:	bf00      	nop
 8011508:	2000b720 	.word	0x2000b720

0801150c <__sinit_lock_acquire>:
 801150c:	4801      	ldr	r0, [pc, #4]	; (8011514 <__sinit_lock_acquire+0x8>)
 801150e:	f000 b8ac 	b.w	801166a <__retarget_lock_acquire_recursive>
 8011512:	bf00      	nop
 8011514:	2000b71b 	.word	0x2000b71b

08011518 <__sinit_lock_release>:
 8011518:	4801      	ldr	r0, [pc, #4]	; (8011520 <__sinit_lock_release+0x8>)
 801151a:	f000 b8a7 	b.w	801166c <__retarget_lock_release_recursive>
 801151e:	bf00      	nop
 8011520:	2000b71b 	.word	0x2000b71b

08011524 <__sinit>:
 8011524:	b510      	push	{r4, lr}
 8011526:	4604      	mov	r4, r0
 8011528:	f7ff fff0 	bl	801150c <__sinit_lock_acquire>
 801152c:	69a3      	ldr	r3, [r4, #24]
 801152e:	b11b      	cbz	r3, 8011538 <__sinit+0x14>
 8011530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011534:	f7ff bff0 	b.w	8011518 <__sinit_lock_release>
 8011538:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801153c:	6523      	str	r3, [r4, #80]	; 0x50
 801153e:	4b13      	ldr	r3, [pc, #76]	; (801158c <__sinit+0x68>)
 8011540:	4a13      	ldr	r2, [pc, #76]	; (8011590 <__sinit+0x6c>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	62a2      	str	r2, [r4, #40]	; 0x28
 8011546:	42a3      	cmp	r3, r4
 8011548:	bf04      	itt	eq
 801154a:	2301      	moveq	r3, #1
 801154c:	61a3      	streq	r3, [r4, #24]
 801154e:	4620      	mov	r0, r4
 8011550:	f000 f820 	bl	8011594 <__sfp>
 8011554:	6060      	str	r0, [r4, #4]
 8011556:	4620      	mov	r0, r4
 8011558:	f000 f81c 	bl	8011594 <__sfp>
 801155c:	60a0      	str	r0, [r4, #8]
 801155e:	4620      	mov	r0, r4
 8011560:	f000 f818 	bl	8011594 <__sfp>
 8011564:	2200      	movs	r2, #0
 8011566:	60e0      	str	r0, [r4, #12]
 8011568:	2104      	movs	r1, #4
 801156a:	6860      	ldr	r0, [r4, #4]
 801156c:	f7ff ff82 	bl	8011474 <std>
 8011570:	68a0      	ldr	r0, [r4, #8]
 8011572:	2201      	movs	r2, #1
 8011574:	2109      	movs	r1, #9
 8011576:	f7ff ff7d 	bl	8011474 <std>
 801157a:	68e0      	ldr	r0, [r4, #12]
 801157c:	2202      	movs	r2, #2
 801157e:	2112      	movs	r1, #18
 8011580:	f7ff ff78 	bl	8011474 <std>
 8011584:	2301      	movs	r3, #1
 8011586:	61a3      	str	r3, [r4, #24]
 8011588:	e7d2      	b.n	8011530 <__sinit+0xc>
 801158a:	bf00      	nop
 801158c:	08014560 	.word	0x08014560
 8011590:	080114bd 	.word	0x080114bd

08011594 <__sfp>:
 8011594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011596:	4607      	mov	r7, r0
 8011598:	f7ff ffac 	bl	80114f4 <__sfp_lock_acquire>
 801159c:	4b1e      	ldr	r3, [pc, #120]	; (8011618 <__sfp+0x84>)
 801159e:	681e      	ldr	r6, [r3, #0]
 80115a0:	69b3      	ldr	r3, [r6, #24]
 80115a2:	b913      	cbnz	r3, 80115aa <__sfp+0x16>
 80115a4:	4630      	mov	r0, r6
 80115a6:	f7ff ffbd 	bl	8011524 <__sinit>
 80115aa:	3648      	adds	r6, #72	; 0x48
 80115ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80115b0:	3b01      	subs	r3, #1
 80115b2:	d503      	bpl.n	80115bc <__sfp+0x28>
 80115b4:	6833      	ldr	r3, [r6, #0]
 80115b6:	b30b      	cbz	r3, 80115fc <__sfp+0x68>
 80115b8:	6836      	ldr	r6, [r6, #0]
 80115ba:	e7f7      	b.n	80115ac <__sfp+0x18>
 80115bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80115c0:	b9d5      	cbnz	r5, 80115f8 <__sfp+0x64>
 80115c2:	4b16      	ldr	r3, [pc, #88]	; (801161c <__sfp+0x88>)
 80115c4:	60e3      	str	r3, [r4, #12]
 80115c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80115ca:	6665      	str	r5, [r4, #100]	; 0x64
 80115cc:	f000 f84c 	bl	8011668 <__retarget_lock_init_recursive>
 80115d0:	f7ff ff96 	bl	8011500 <__sfp_lock_release>
 80115d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80115d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80115dc:	6025      	str	r5, [r4, #0]
 80115de:	61a5      	str	r5, [r4, #24]
 80115e0:	2208      	movs	r2, #8
 80115e2:	4629      	mov	r1, r5
 80115e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80115e8:	f7fe f9bc 	bl	800f964 <memset>
 80115ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80115f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80115f4:	4620      	mov	r0, r4
 80115f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115f8:	3468      	adds	r4, #104	; 0x68
 80115fa:	e7d9      	b.n	80115b0 <__sfp+0x1c>
 80115fc:	2104      	movs	r1, #4
 80115fe:	4638      	mov	r0, r7
 8011600:	f7ff ff62 	bl	80114c8 <__sfmoreglue>
 8011604:	4604      	mov	r4, r0
 8011606:	6030      	str	r0, [r6, #0]
 8011608:	2800      	cmp	r0, #0
 801160a:	d1d5      	bne.n	80115b8 <__sfp+0x24>
 801160c:	f7ff ff78 	bl	8011500 <__sfp_lock_release>
 8011610:	230c      	movs	r3, #12
 8011612:	603b      	str	r3, [r7, #0]
 8011614:	e7ee      	b.n	80115f4 <__sfp+0x60>
 8011616:	bf00      	nop
 8011618:	08014560 	.word	0x08014560
 801161c:	ffff0001 	.word	0xffff0001

08011620 <_fwalk_reent>:
 8011620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011624:	4606      	mov	r6, r0
 8011626:	4688      	mov	r8, r1
 8011628:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801162c:	2700      	movs	r7, #0
 801162e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011632:	f1b9 0901 	subs.w	r9, r9, #1
 8011636:	d505      	bpl.n	8011644 <_fwalk_reent+0x24>
 8011638:	6824      	ldr	r4, [r4, #0]
 801163a:	2c00      	cmp	r4, #0
 801163c:	d1f7      	bne.n	801162e <_fwalk_reent+0xe>
 801163e:	4638      	mov	r0, r7
 8011640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011644:	89ab      	ldrh	r3, [r5, #12]
 8011646:	2b01      	cmp	r3, #1
 8011648:	d907      	bls.n	801165a <_fwalk_reent+0x3a>
 801164a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801164e:	3301      	adds	r3, #1
 8011650:	d003      	beq.n	801165a <_fwalk_reent+0x3a>
 8011652:	4629      	mov	r1, r5
 8011654:	4630      	mov	r0, r6
 8011656:	47c0      	blx	r8
 8011658:	4307      	orrs	r7, r0
 801165a:	3568      	adds	r5, #104	; 0x68
 801165c:	e7e9      	b.n	8011632 <_fwalk_reent+0x12>
	...

08011660 <_localeconv_r>:
 8011660:	4800      	ldr	r0, [pc, #0]	; (8011664 <_localeconv_r+0x4>)
 8011662:	4770      	bx	lr
 8011664:	20000170 	.word	0x20000170

08011668 <__retarget_lock_init_recursive>:
 8011668:	4770      	bx	lr

0801166a <__retarget_lock_acquire_recursive>:
 801166a:	4770      	bx	lr

0801166c <__retarget_lock_release_recursive>:
 801166c:	4770      	bx	lr

0801166e <__swhatbuf_r>:
 801166e:	b570      	push	{r4, r5, r6, lr}
 8011670:	460e      	mov	r6, r1
 8011672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011676:	2900      	cmp	r1, #0
 8011678:	b096      	sub	sp, #88	; 0x58
 801167a:	4614      	mov	r4, r2
 801167c:	461d      	mov	r5, r3
 801167e:	da07      	bge.n	8011690 <__swhatbuf_r+0x22>
 8011680:	2300      	movs	r3, #0
 8011682:	602b      	str	r3, [r5, #0]
 8011684:	89b3      	ldrh	r3, [r6, #12]
 8011686:	061a      	lsls	r2, r3, #24
 8011688:	d410      	bmi.n	80116ac <__swhatbuf_r+0x3e>
 801168a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801168e:	e00e      	b.n	80116ae <__swhatbuf_r+0x40>
 8011690:	466a      	mov	r2, sp
 8011692:	f000 fe91 	bl	80123b8 <_fstat_r>
 8011696:	2800      	cmp	r0, #0
 8011698:	dbf2      	blt.n	8011680 <__swhatbuf_r+0x12>
 801169a:	9a01      	ldr	r2, [sp, #4]
 801169c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80116a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80116a4:	425a      	negs	r2, r3
 80116a6:	415a      	adcs	r2, r3
 80116a8:	602a      	str	r2, [r5, #0]
 80116aa:	e7ee      	b.n	801168a <__swhatbuf_r+0x1c>
 80116ac:	2340      	movs	r3, #64	; 0x40
 80116ae:	2000      	movs	r0, #0
 80116b0:	6023      	str	r3, [r4, #0]
 80116b2:	b016      	add	sp, #88	; 0x58
 80116b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080116b8 <__smakebuf_r>:
 80116b8:	898b      	ldrh	r3, [r1, #12]
 80116ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80116bc:	079d      	lsls	r5, r3, #30
 80116be:	4606      	mov	r6, r0
 80116c0:	460c      	mov	r4, r1
 80116c2:	d507      	bpl.n	80116d4 <__smakebuf_r+0x1c>
 80116c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80116c8:	6023      	str	r3, [r4, #0]
 80116ca:	6123      	str	r3, [r4, #16]
 80116cc:	2301      	movs	r3, #1
 80116ce:	6163      	str	r3, [r4, #20]
 80116d0:	b002      	add	sp, #8
 80116d2:	bd70      	pop	{r4, r5, r6, pc}
 80116d4:	ab01      	add	r3, sp, #4
 80116d6:	466a      	mov	r2, sp
 80116d8:	f7ff ffc9 	bl	801166e <__swhatbuf_r>
 80116dc:	9900      	ldr	r1, [sp, #0]
 80116de:	4605      	mov	r5, r0
 80116e0:	4630      	mov	r0, r6
 80116e2:	f000 fc0f 	bl	8011f04 <_malloc_r>
 80116e6:	b948      	cbnz	r0, 80116fc <__smakebuf_r+0x44>
 80116e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116ec:	059a      	lsls	r2, r3, #22
 80116ee:	d4ef      	bmi.n	80116d0 <__smakebuf_r+0x18>
 80116f0:	f023 0303 	bic.w	r3, r3, #3
 80116f4:	f043 0302 	orr.w	r3, r3, #2
 80116f8:	81a3      	strh	r3, [r4, #12]
 80116fa:	e7e3      	b.n	80116c4 <__smakebuf_r+0xc>
 80116fc:	4b0d      	ldr	r3, [pc, #52]	; (8011734 <__smakebuf_r+0x7c>)
 80116fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8011700:	89a3      	ldrh	r3, [r4, #12]
 8011702:	6020      	str	r0, [r4, #0]
 8011704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011708:	81a3      	strh	r3, [r4, #12]
 801170a:	9b00      	ldr	r3, [sp, #0]
 801170c:	6163      	str	r3, [r4, #20]
 801170e:	9b01      	ldr	r3, [sp, #4]
 8011710:	6120      	str	r0, [r4, #16]
 8011712:	b15b      	cbz	r3, 801172c <__smakebuf_r+0x74>
 8011714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011718:	4630      	mov	r0, r6
 801171a:	f000 fe5f 	bl	80123dc <_isatty_r>
 801171e:	b128      	cbz	r0, 801172c <__smakebuf_r+0x74>
 8011720:	89a3      	ldrh	r3, [r4, #12]
 8011722:	f023 0303 	bic.w	r3, r3, #3
 8011726:	f043 0301 	orr.w	r3, r3, #1
 801172a:	81a3      	strh	r3, [r4, #12]
 801172c:	89a0      	ldrh	r0, [r4, #12]
 801172e:	4305      	orrs	r5, r0
 8011730:	81a5      	strh	r5, [r4, #12]
 8011732:	e7cd      	b.n	80116d0 <__smakebuf_r+0x18>
 8011734:	080114bd 	.word	0x080114bd

08011738 <malloc>:
 8011738:	4b02      	ldr	r3, [pc, #8]	; (8011744 <malloc+0xc>)
 801173a:	4601      	mov	r1, r0
 801173c:	6818      	ldr	r0, [r3, #0]
 801173e:	f000 bbe1 	b.w	8011f04 <_malloc_r>
 8011742:	bf00      	nop
 8011744:	2000001c 	.word	0x2000001c

08011748 <_Balloc>:
 8011748:	b570      	push	{r4, r5, r6, lr}
 801174a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801174c:	4604      	mov	r4, r0
 801174e:	460d      	mov	r5, r1
 8011750:	b976      	cbnz	r6, 8011770 <_Balloc+0x28>
 8011752:	2010      	movs	r0, #16
 8011754:	f7ff fff0 	bl	8011738 <malloc>
 8011758:	4602      	mov	r2, r0
 801175a:	6260      	str	r0, [r4, #36]	; 0x24
 801175c:	b920      	cbnz	r0, 8011768 <_Balloc+0x20>
 801175e:	4b18      	ldr	r3, [pc, #96]	; (80117c0 <_Balloc+0x78>)
 8011760:	4818      	ldr	r0, [pc, #96]	; (80117c4 <_Balloc+0x7c>)
 8011762:	2166      	movs	r1, #102	; 0x66
 8011764:	f000 fde8 	bl	8012338 <__assert_func>
 8011768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801176c:	6006      	str	r6, [r0, #0]
 801176e:	60c6      	str	r6, [r0, #12]
 8011770:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011772:	68f3      	ldr	r3, [r6, #12]
 8011774:	b183      	cbz	r3, 8011798 <_Balloc+0x50>
 8011776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011778:	68db      	ldr	r3, [r3, #12]
 801177a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801177e:	b9b8      	cbnz	r0, 80117b0 <_Balloc+0x68>
 8011780:	2101      	movs	r1, #1
 8011782:	fa01 f605 	lsl.w	r6, r1, r5
 8011786:	1d72      	adds	r2, r6, #5
 8011788:	0092      	lsls	r2, r2, #2
 801178a:	4620      	mov	r0, r4
 801178c:	f000 fb5a 	bl	8011e44 <_calloc_r>
 8011790:	b160      	cbz	r0, 80117ac <_Balloc+0x64>
 8011792:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011796:	e00e      	b.n	80117b6 <_Balloc+0x6e>
 8011798:	2221      	movs	r2, #33	; 0x21
 801179a:	2104      	movs	r1, #4
 801179c:	4620      	mov	r0, r4
 801179e:	f000 fb51 	bl	8011e44 <_calloc_r>
 80117a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117a4:	60f0      	str	r0, [r6, #12]
 80117a6:	68db      	ldr	r3, [r3, #12]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d1e4      	bne.n	8011776 <_Balloc+0x2e>
 80117ac:	2000      	movs	r0, #0
 80117ae:	bd70      	pop	{r4, r5, r6, pc}
 80117b0:	6802      	ldr	r2, [r0, #0]
 80117b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80117b6:	2300      	movs	r3, #0
 80117b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80117bc:	e7f7      	b.n	80117ae <_Balloc+0x66>
 80117be:	bf00      	nop
 80117c0:	080146a6 	.word	0x080146a6
 80117c4:	08014790 	.word	0x08014790

080117c8 <_Bfree>:
 80117c8:	b570      	push	{r4, r5, r6, lr}
 80117ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80117cc:	4605      	mov	r5, r0
 80117ce:	460c      	mov	r4, r1
 80117d0:	b976      	cbnz	r6, 80117f0 <_Bfree+0x28>
 80117d2:	2010      	movs	r0, #16
 80117d4:	f7ff ffb0 	bl	8011738 <malloc>
 80117d8:	4602      	mov	r2, r0
 80117da:	6268      	str	r0, [r5, #36]	; 0x24
 80117dc:	b920      	cbnz	r0, 80117e8 <_Bfree+0x20>
 80117de:	4b09      	ldr	r3, [pc, #36]	; (8011804 <_Bfree+0x3c>)
 80117e0:	4809      	ldr	r0, [pc, #36]	; (8011808 <_Bfree+0x40>)
 80117e2:	218a      	movs	r1, #138	; 0x8a
 80117e4:	f000 fda8 	bl	8012338 <__assert_func>
 80117e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80117ec:	6006      	str	r6, [r0, #0]
 80117ee:	60c6      	str	r6, [r0, #12]
 80117f0:	b13c      	cbz	r4, 8011802 <_Bfree+0x3a>
 80117f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80117f4:	6862      	ldr	r2, [r4, #4]
 80117f6:	68db      	ldr	r3, [r3, #12]
 80117f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80117fc:	6021      	str	r1, [r4, #0]
 80117fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011802:	bd70      	pop	{r4, r5, r6, pc}
 8011804:	080146a6 	.word	0x080146a6
 8011808:	08014790 	.word	0x08014790

0801180c <__multadd>:
 801180c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011810:	690e      	ldr	r6, [r1, #16]
 8011812:	4607      	mov	r7, r0
 8011814:	4698      	mov	r8, r3
 8011816:	460c      	mov	r4, r1
 8011818:	f101 0014 	add.w	r0, r1, #20
 801181c:	2300      	movs	r3, #0
 801181e:	6805      	ldr	r5, [r0, #0]
 8011820:	b2a9      	uxth	r1, r5
 8011822:	fb02 8101 	mla	r1, r2, r1, r8
 8011826:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801182a:	0c2d      	lsrs	r5, r5, #16
 801182c:	fb02 c505 	mla	r5, r2, r5, ip
 8011830:	b289      	uxth	r1, r1
 8011832:	3301      	adds	r3, #1
 8011834:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011838:	429e      	cmp	r6, r3
 801183a:	f840 1b04 	str.w	r1, [r0], #4
 801183e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011842:	dcec      	bgt.n	801181e <__multadd+0x12>
 8011844:	f1b8 0f00 	cmp.w	r8, #0
 8011848:	d022      	beq.n	8011890 <__multadd+0x84>
 801184a:	68a3      	ldr	r3, [r4, #8]
 801184c:	42b3      	cmp	r3, r6
 801184e:	dc19      	bgt.n	8011884 <__multadd+0x78>
 8011850:	6861      	ldr	r1, [r4, #4]
 8011852:	4638      	mov	r0, r7
 8011854:	3101      	adds	r1, #1
 8011856:	f7ff ff77 	bl	8011748 <_Balloc>
 801185a:	4605      	mov	r5, r0
 801185c:	b928      	cbnz	r0, 801186a <__multadd+0x5e>
 801185e:	4602      	mov	r2, r0
 8011860:	4b0d      	ldr	r3, [pc, #52]	; (8011898 <__multadd+0x8c>)
 8011862:	480e      	ldr	r0, [pc, #56]	; (801189c <__multadd+0x90>)
 8011864:	21b5      	movs	r1, #181	; 0xb5
 8011866:	f000 fd67 	bl	8012338 <__assert_func>
 801186a:	6922      	ldr	r2, [r4, #16]
 801186c:	3202      	adds	r2, #2
 801186e:	f104 010c 	add.w	r1, r4, #12
 8011872:	0092      	lsls	r2, r2, #2
 8011874:	300c      	adds	r0, #12
 8011876:	f7fe f867 	bl	800f948 <memcpy>
 801187a:	4621      	mov	r1, r4
 801187c:	4638      	mov	r0, r7
 801187e:	f7ff ffa3 	bl	80117c8 <_Bfree>
 8011882:	462c      	mov	r4, r5
 8011884:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011888:	3601      	adds	r6, #1
 801188a:	f8c3 8014 	str.w	r8, [r3, #20]
 801188e:	6126      	str	r6, [r4, #16]
 8011890:	4620      	mov	r0, r4
 8011892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011896:	bf00      	nop
 8011898:	0801471c 	.word	0x0801471c
 801189c:	08014790 	.word	0x08014790

080118a0 <__hi0bits>:
 80118a0:	0c03      	lsrs	r3, r0, #16
 80118a2:	041b      	lsls	r3, r3, #16
 80118a4:	b9d3      	cbnz	r3, 80118dc <__hi0bits+0x3c>
 80118a6:	0400      	lsls	r0, r0, #16
 80118a8:	2310      	movs	r3, #16
 80118aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80118ae:	bf04      	itt	eq
 80118b0:	0200      	lsleq	r0, r0, #8
 80118b2:	3308      	addeq	r3, #8
 80118b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80118b8:	bf04      	itt	eq
 80118ba:	0100      	lsleq	r0, r0, #4
 80118bc:	3304      	addeq	r3, #4
 80118be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80118c2:	bf04      	itt	eq
 80118c4:	0080      	lsleq	r0, r0, #2
 80118c6:	3302      	addeq	r3, #2
 80118c8:	2800      	cmp	r0, #0
 80118ca:	db05      	blt.n	80118d8 <__hi0bits+0x38>
 80118cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80118d0:	f103 0301 	add.w	r3, r3, #1
 80118d4:	bf08      	it	eq
 80118d6:	2320      	moveq	r3, #32
 80118d8:	4618      	mov	r0, r3
 80118da:	4770      	bx	lr
 80118dc:	2300      	movs	r3, #0
 80118de:	e7e4      	b.n	80118aa <__hi0bits+0xa>

080118e0 <__lo0bits>:
 80118e0:	6803      	ldr	r3, [r0, #0]
 80118e2:	f013 0207 	ands.w	r2, r3, #7
 80118e6:	4601      	mov	r1, r0
 80118e8:	d00b      	beq.n	8011902 <__lo0bits+0x22>
 80118ea:	07da      	lsls	r2, r3, #31
 80118ec:	d424      	bmi.n	8011938 <__lo0bits+0x58>
 80118ee:	0798      	lsls	r0, r3, #30
 80118f0:	bf49      	itett	mi
 80118f2:	085b      	lsrmi	r3, r3, #1
 80118f4:	089b      	lsrpl	r3, r3, #2
 80118f6:	2001      	movmi	r0, #1
 80118f8:	600b      	strmi	r3, [r1, #0]
 80118fa:	bf5c      	itt	pl
 80118fc:	600b      	strpl	r3, [r1, #0]
 80118fe:	2002      	movpl	r0, #2
 8011900:	4770      	bx	lr
 8011902:	b298      	uxth	r0, r3
 8011904:	b9b0      	cbnz	r0, 8011934 <__lo0bits+0x54>
 8011906:	0c1b      	lsrs	r3, r3, #16
 8011908:	2010      	movs	r0, #16
 801190a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801190e:	bf04      	itt	eq
 8011910:	0a1b      	lsreq	r3, r3, #8
 8011912:	3008      	addeq	r0, #8
 8011914:	071a      	lsls	r2, r3, #28
 8011916:	bf04      	itt	eq
 8011918:	091b      	lsreq	r3, r3, #4
 801191a:	3004      	addeq	r0, #4
 801191c:	079a      	lsls	r2, r3, #30
 801191e:	bf04      	itt	eq
 8011920:	089b      	lsreq	r3, r3, #2
 8011922:	3002      	addeq	r0, #2
 8011924:	07da      	lsls	r2, r3, #31
 8011926:	d403      	bmi.n	8011930 <__lo0bits+0x50>
 8011928:	085b      	lsrs	r3, r3, #1
 801192a:	f100 0001 	add.w	r0, r0, #1
 801192e:	d005      	beq.n	801193c <__lo0bits+0x5c>
 8011930:	600b      	str	r3, [r1, #0]
 8011932:	4770      	bx	lr
 8011934:	4610      	mov	r0, r2
 8011936:	e7e8      	b.n	801190a <__lo0bits+0x2a>
 8011938:	2000      	movs	r0, #0
 801193a:	4770      	bx	lr
 801193c:	2020      	movs	r0, #32
 801193e:	4770      	bx	lr

08011940 <__i2b>:
 8011940:	b510      	push	{r4, lr}
 8011942:	460c      	mov	r4, r1
 8011944:	2101      	movs	r1, #1
 8011946:	f7ff feff 	bl	8011748 <_Balloc>
 801194a:	4602      	mov	r2, r0
 801194c:	b928      	cbnz	r0, 801195a <__i2b+0x1a>
 801194e:	4b05      	ldr	r3, [pc, #20]	; (8011964 <__i2b+0x24>)
 8011950:	4805      	ldr	r0, [pc, #20]	; (8011968 <__i2b+0x28>)
 8011952:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011956:	f000 fcef 	bl	8012338 <__assert_func>
 801195a:	2301      	movs	r3, #1
 801195c:	6144      	str	r4, [r0, #20]
 801195e:	6103      	str	r3, [r0, #16]
 8011960:	bd10      	pop	{r4, pc}
 8011962:	bf00      	nop
 8011964:	0801471c 	.word	0x0801471c
 8011968:	08014790 	.word	0x08014790

0801196c <__multiply>:
 801196c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011970:	4614      	mov	r4, r2
 8011972:	690a      	ldr	r2, [r1, #16]
 8011974:	6923      	ldr	r3, [r4, #16]
 8011976:	429a      	cmp	r2, r3
 8011978:	bfb8      	it	lt
 801197a:	460b      	movlt	r3, r1
 801197c:	460d      	mov	r5, r1
 801197e:	bfbc      	itt	lt
 8011980:	4625      	movlt	r5, r4
 8011982:	461c      	movlt	r4, r3
 8011984:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011988:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801198c:	68ab      	ldr	r3, [r5, #8]
 801198e:	6869      	ldr	r1, [r5, #4]
 8011990:	eb0a 0709 	add.w	r7, sl, r9
 8011994:	42bb      	cmp	r3, r7
 8011996:	b085      	sub	sp, #20
 8011998:	bfb8      	it	lt
 801199a:	3101      	addlt	r1, #1
 801199c:	f7ff fed4 	bl	8011748 <_Balloc>
 80119a0:	b930      	cbnz	r0, 80119b0 <__multiply+0x44>
 80119a2:	4602      	mov	r2, r0
 80119a4:	4b42      	ldr	r3, [pc, #264]	; (8011ab0 <__multiply+0x144>)
 80119a6:	4843      	ldr	r0, [pc, #268]	; (8011ab4 <__multiply+0x148>)
 80119a8:	f240 115d 	movw	r1, #349	; 0x15d
 80119ac:	f000 fcc4 	bl	8012338 <__assert_func>
 80119b0:	f100 0614 	add.w	r6, r0, #20
 80119b4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80119b8:	4633      	mov	r3, r6
 80119ba:	2200      	movs	r2, #0
 80119bc:	4543      	cmp	r3, r8
 80119be:	d31e      	bcc.n	80119fe <__multiply+0x92>
 80119c0:	f105 0c14 	add.w	ip, r5, #20
 80119c4:	f104 0314 	add.w	r3, r4, #20
 80119c8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80119cc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80119d0:	9202      	str	r2, [sp, #8]
 80119d2:	ebac 0205 	sub.w	r2, ip, r5
 80119d6:	3a15      	subs	r2, #21
 80119d8:	f022 0203 	bic.w	r2, r2, #3
 80119dc:	3204      	adds	r2, #4
 80119de:	f105 0115 	add.w	r1, r5, #21
 80119e2:	458c      	cmp	ip, r1
 80119e4:	bf38      	it	cc
 80119e6:	2204      	movcc	r2, #4
 80119e8:	9201      	str	r2, [sp, #4]
 80119ea:	9a02      	ldr	r2, [sp, #8]
 80119ec:	9303      	str	r3, [sp, #12]
 80119ee:	429a      	cmp	r2, r3
 80119f0:	d808      	bhi.n	8011a04 <__multiply+0x98>
 80119f2:	2f00      	cmp	r7, #0
 80119f4:	dc55      	bgt.n	8011aa2 <__multiply+0x136>
 80119f6:	6107      	str	r7, [r0, #16]
 80119f8:	b005      	add	sp, #20
 80119fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119fe:	f843 2b04 	str.w	r2, [r3], #4
 8011a02:	e7db      	b.n	80119bc <__multiply+0x50>
 8011a04:	f8b3 a000 	ldrh.w	sl, [r3]
 8011a08:	f1ba 0f00 	cmp.w	sl, #0
 8011a0c:	d020      	beq.n	8011a50 <__multiply+0xe4>
 8011a0e:	f105 0e14 	add.w	lr, r5, #20
 8011a12:	46b1      	mov	r9, r6
 8011a14:	2200      	movs	r2, #0
 8011a16:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011a1a:	f8d9 b000 	ldr.w	fp, [r9]
 8011a1e:	b2a1      	uxth	r1, r4
 8011a20:	fa1f fb8b 	uxth.w	fp, fp
 8011a24:	fb0a b101 	mla	r1, sl, r1, fp
 8011a28:	4411      	add	r1, r2
 8011a2a:	f8d9 2000 	ldr.w	r2, [r9]
 8011a2e:	0c24      	lsrs	r4, r4, #16
 8011a30:	0c12      	lsrs	r2, r2, #16
 8011a32:	fb0a 2404 	mla	r4, sl, r4, r2
 8011a36:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011a3a:	b289      	uxth	r1, r1
 8011a3c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011a40:	45f4      	cmp	ip, lr
 8011a42:	f849 1b04 	str.w	r1, [r9], #4
 8011a46:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011a4a:	d8e4      	bhi.n	8011a16 <__multiply+0xaa>
 8011a4c:	9901      	ldr	r1, [sp, #4]
 8011a4e:	5072      	str	r2, [r6, r1]
 8011a50:	9a03      	ldr	r2, [sp, #12]
 8011a52:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011a56:	3304      	adds	r3, #4
 8011a58:	f1b9 0f00 	cmp.w	r9, #0
 8011a5c:	d01f      	beq.n	8011a9e <__multiply+0x132>
 8011a5e:	6834      	ldr	r4, [r6, #0]
 8011a60:	f105 0114 	add.w	r1, r5, #20
 8011a64:	46b6      	mov	lr, r6
 8011a66:	f04f 0a00 	mov.w	sl, #0
 8011a6a:	880a      	ldrh	r2, [r1, #0]
 8011a6c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011a70:	fb09 b202 	mla	r2, r9, r2, fp
 8011a74:	4492      	add	sl, r2
 8011a76:	b2a4      	uxth	r4, r4
 8011a78:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011a7c:	f84e 4b04 	str.w	r4, [lr], #4
 8011a80:	f851 4b04 	ldr.w	r4, [r1], #4
 8011a84:	f8be 2000 	ldrh.w	r2, [lr]
 8011a88:	0c24      	lsrs	r4, r4, #16
 8011a8a:	fb09 2404 	mla	r4, r9, r4, r2
 8011a8e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011a92:	458c      	cmp	ip, r1
 8011a94:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011a98:	d8e7      	bhi.n	8011a6a <__multiply+0xfe>
 8011a9a:	9a01      	ldr	r2, [sp, #4]
 8011a9c:	50b4      	str	r4, [r6, r2]
 8011a9e:	3604      	adds	r6, #4
 8011aa0:	e7a3      	b.n	80119ea <__multiply+0x7e>
 8011aa2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d1a5      	bne.n	80119f6 <__multiply+0x8a>
 8011aaa:	3f01      	subs	r7, #1
 8011aac:	e7a1      	b.n	80119f2 <__multiply+0x86>
 8011aae:	bf00      	nop
 8011ab0:	0801471c 	.word	0x0801471c
 8011ab4:	08014790 	.word	0x08014790

08011ab8 <__pow5mult>:
 8011ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011abc:	4615      	mov	r5, r2
 8011abe:	f012 0203 	ands.w	r2, r2, #3
 8011ac2:	4606      	mov	r6, r0
 8011ac4:	460f      	mov	r7, r1
 8011ac6:	d007      	beq.n	8011ad8 <__pow5mult+0x20>
 8011ac8:	4c25      	ldr	r4, [pc, #148]	; (8011b60 <__pow5mult+0xa8>)
 8011aca:	3a01      	subs	r2, #1
 8011acc:	2300      	movs	r3, #0
 8011ace:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011ad2:	f7ff fe9b 	bl	801180c <__multadd>
 8011ad6:	4607      	mov	r7, r0
 8011ad8:	10ad      	asrs	r5, r5, #2
 8011ada:	d03d      	beq.n	8011b58 <__pow5mult+0xa0>
 8011adc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011ade:	b97c      	cbnz	r4, 8011b00 <__pow5mult+0x48>
 8011ae0:	2010      	movs	r0, #16
 8011ae2:	f7ff fe29 	bl	8011738 <malloc>
 8011ae6:	4602      	mov	r2, r0
 8011ae8:	6270      	str	r0, [r6, #36]	; 0x24
 8011aea:	b928      	cbnz	r0, 8011af8 <__pow5mult+0x40>
 8011aec:	4b1d      	ldr	r3, [pc, #116]	; (8011b64 <__pow5mult+0xac>)
 8011aee:	481e      	ldr	r0, [pc, #120]	; (8011b68 <__pow5mult+0xb0>)
 8011af0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011af4:	f000 fc20 	bl	8012338 <__assert_func>
 8011af8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011afc:	6004      	str	r4, [r0, #0]
 8011afe:	60c4      	str	r4, [r0, #12]
 8011b00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011b04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011b08:	b94c      	cbnz	r4, 8011b1e <__pow5mult+0x66>
 8011b0a:	f240 2171 	movw	r1, #625	; 0x271
 8011b0e:	4630      	mov	r0, r6
 8011b10:	f7ff ff16 	bl	8011940 <__i2b>
 8011b14:	2300      	movs	r3, #0
 8011b16:	f8c8 0008 	str.w	r0, [r8, #8]
 8011b1a:	4604      	mov	r4, r0
 8011b1c:	6003      	str	r3, [r0, #0]
 8011b1e:	f04f 0900 	mov.w	r9, #0
 8011b22:	07eb      	lsls	r3, r5, #31
 8011b24:	d50a      	bpl.n	8011b3c <__pow5mult+0x84>
 8011b26:	4639      	mov	r1, r7
 8011b28:	4622      	mov	r2, r4
 8011b2a:	4630      	mov	r0, r6
 8011b2c:	f7ff ff1e 	bl	801196c <__multiply>
 8011b30:	4639      	mov	r1, r7
 8011b32:	4680      	mov	r8, r0
 8011b34:	4630      	mov	r0, r6
 8011b36:	f7ff fe47 	bl	80117c8 <_Bfree>
 8011b3a:	4647      	mov	r7, r8
 8011b3c:	106d      	asrs	r5, r5, #1
 8011b3e:	d00b      	beq.n	8011b58 <__pow5mult+0xa0>
 8011b40:	6820      	ldr	r0, [r4, #0]
 8011b42:	b938      	cbnz	r0, 8011b54 <__pow5mult+0x9c>
 8011b44:	4622      	mov	r2, r4
 8011b46:	4621      	mov	r1, r4
 8011b48:	4630      	mov	r0, r6
 8011b4a:	f7ff ff0f 	bl	801196c <__multiply>
 8011b4e:	6020      	str	r0, [r4, #0]
 8011b50:	f8c0 9000 	str.w	r9, [r0]
 8011b54:	4604      	mov	r4, r0
 8011b56:	e7e4      	b.n	8011b22 <__pow5mult+0x6a>
 8011b58:	4638      	mov	r0, r7
 8011b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b5e:	bf00      	nop
 8011b60:	080148e0 	.word	0x080148e0
 8011b64:	080146a6 	.word	0x080146a6
 8011b68:	08014790 	.word	0x08014790

08011b6c <__lshift>:
 8011b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b70:	460c      	mov	r4, r1
 8011b72:	6849      	ldr	r1, [r1, #4]
 8011b74:	6923      	ldr	r3, [r4, #16]
 8011b76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011b7a:	68a3      	ldr	r3, [r4, #8]
 8011b7c:	4607      	mov	r7, r0
 8011b7e:	4691      	mov	r9, r2
 8011b80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011b84:	f108 0601 	add.w	r6, r8, #1
 8011b88:	42b3      	cmp	r3, r6
 8011b8a:	db0b      	blt.n	8011ba4 <__lshift+0x38>
 8011b8c:	4638      	mov	r0, r7
 8011b8e:	f7ff fddb 	bl	8011748 <_Balloc>
 8011b92:	4605      	mov	r5, r0
 8011b94:	b948      	cbnz	r0, 8011baa <__lshift+0x3e>
 8011b96:	4602      	mov	r2, r0
 8011b98:	4b28      	ldr	r3, [pc, #160]	; (8011c3c <__lshift+0xd0>)
 8011b9a:	4829      	ldr	r0, [pc, #164]	; (8011c40 <__lshift+0xd4>)
 8011b9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011ba0:	f000 fbca 	bl	8012338 <__assert_func>
 8011ba4:	3101      	adds	r1, #1
 8011ba6:	005b      	lsls	r3, r3, #1
 8011ba8:	e7ee      	b.n	8011b88 <__lshift+0x1c>
 8011baa:	2300      	movs	r3, #0
 8011bac:	f100 0114 	add.w	r1, r0, #20
 8011bb0:	f100 0210 	add.w	r2, r0, #16
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	4553      	cmp	r3, sl
 8011bb8:	db33      	blt.n	8011c22 <__lshift+0xb6>
 8011bba:	6920      	ldr	r0, [r4, #16]
 8011bbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011bc0:	f104 0314 	add.w	r3, r4, #20
 8011bc4:	f019 091f 	ands.w	r9, r9, #31
 8011bc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011bcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011bd0:	d02b      	beq.n	8011c2a <__lshift+0xbe>
 8011bd2:	f1c9 0e20 	rsb	lr, r9, #32
 8011bd6:	468a      	mov	sl, r1
 8011bd8:	2200      	movs	r2, #0
 8011bda:	6818      	ldr	r0, [r3, #0]
 8011bdc:	fa00 f009 	lsl.w	r0, r0, r9
 8011be0:	4302      	orrs	r2, r0
 8011be2:	f84a 2b04 	str.w	r2, [sl], #4
 8011be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bea:	459c      	cmp	ip, r3
 8011bec:	fa22 f20e 	lsr.w	r2, r2, lr
 8011bf0:	d8f3      	bhi.n	8011bda <__lshift+0x6e>
 8011bf2:	ebac 0304 	sub.w	r3, ip, r4
 8011bf6:	3b15      	subs	r3, #21
 8011bf8:	f023 0303 	bic.w	r3, r3, #3
 8011bfc:	3304      	adds	r3, #4
 8011bfe:	f104 0015 	add.w	r0, r4, #21
 8011c02:	4584      	cmp	ip, r0
 8011c04:	bf38      	it	cc
 8011c06:	2304      	movcc	r3, #4
 8011c08:	50ca      	str	r2, [r1, r3]
 8011c0a:	b10a      	cbz	r2, 8011c10 <__lshift+0xa4>
 8011c0c:	f108 0602 	add.w	r6, r8, #2
 8011c10:	3e01      	subs	r6, #1
 8011c12:	4638      	mov	r0, r7
 8011c14:	612e      	str	r6, [r5, #16]
 8011c16:	4621      	mov	r1, r4
 8011c18:	f7ff fdd6 	bl	80117c8 <_Bfree>
 8011c1c:	4628      	mov	r0, r5
 8011c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c22:	f842 0f04 	str.w	r0, [r2, #4]!
 8011c26:	3301      	adds	r3, #1
 8011c28:	e7c5      	b.n	8011bb6 <__lshift+0x4a>
 8011c2a:	3904      	subs	r1, #4
 8011c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c30:	f841 2f04 	str.w	r2, [r1, #4]!
 8011c34:	459c      	cmp	ip, r3
 8011c36:	d8f9      	bhi.n	8011c2c <__lshift+0xc0>
 8011c38:	e7ea      	b.n	8011c10 <__lshift+0xa4>
 8011c3a:	bf00      	nop
 8011c3c:	0801471c 	.word	0x0801471c
 8011c40:	08014790 	.word	0x08014790

08011c44 <__mcmp>:
 8011c44:	b530      	push	{r4, r5, lr}
 8011c46:	6902      	ldr	r2, [r0, #16]
 8011c48:	690c      	ldr	r4, [r1, #16]
 8011c4a:	1b12      	subs	r2, r2, r4
 8011c4c:	d10e      	bne.n	8011c6c <__mcmp+0x28>
 8011c4e:	f100 0314 	add.w	r3, r0, #20
 8011c52:	3114      	adds	r1, #20
 8011c54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011c58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011c5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011c60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011c64:	42a5      	cmp	r5, r4
 8011c66:	d003      	beq.n	8011c70 <__mcmp+0x2c>
 8011c68:	d305      	bcc.n	8011c76 <__mcmp+0x32>
 8011c6a:	2201      	movs	r2, #1
 8011c6c:	4610      	mov	r0, r2
 8011c6e:	bd30      	pop	{r4, r5, pc}
 8011c70:	4283      	cmp	r3, r0
 8011c72:	d3f3      	bcc.n	8011c5c <__mcmp+0x18>
 8011c74:	e7fa      	b.n	8011c6c <__mcmp+0x28>
 8011c76:	f04f 32ff 	mov.w	r2, #4294967295
 8011c7a:	e7f7      	b.n	8011c6c <__mcmp+0x28>

08011c7c <__mdiff>:
 8011c7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c80:	460c      	mov	r4, r1
 8011c82:	4606      	mov	r6, r0
 8011c84:	4611      	mov	r1, r2
 8011c86:	4620      	mov	r0, r4
 8011c88:	4617      	mov	r7, r2
 8011c8a:	f7ff ffdb 	bl	8011c44 <__mcmp>
 8011c8e:	1e05      	subs	r5, r0, #0
 8011c90:	d110      	bne.n	8011cb4 <__mdiff+0x38>
 8011c92:	4629      	mov	r1, r5
 8011c94:	4630      	mov	r0, r6
 8011c96:	f7ff fd57 	bl	8011748 <_Balloc>
 8011c9a:	b930      	cbnz	r0, 8011caa <__mdiff+0x2e>
 8011c9c:	4b39      	ldr	r3, [pc, #228]	; (8011d84 <__mdiff+0x108>)
 8011c9e:	4602      	mov	r2, r0
 8011ca0:	f240 2132 	movw	r1, #562	; 0x232
 8011ca4:	4838      	ldr	r0, [pc, #224]	; (8011d88 <__mdiff+0x10c>)
 8011ca6:	f000 fb47 	bl	8012338 <__assert_func>
 8011caa:	2301      	movs	r3, #1
 8011cac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011cb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cb4:	bfa4      	itt	ge
 8011cb6:	463b      	movge	r3, r7
 8011cb8:	4627      	movge	r7, r4
 8011cba:	4630      	mov	r0, r6
 8011cbc:	6879      	ldr	r1, [r7, #4]
 8011cbe:	bfa6      	itte	ge
 8011cc0:	461c      	movge	r4, r3
 8011cc2:	2500      	movge	r5, #0
 8011cc4:	2501      	movlt	r5, #1
 8011cc6:	f7ff fd3f 	bl	8011748 <_Balloc>
 8011cca:	b920      	cbnz	r0, 8011cd6 <__mdiff+0x5a>
 8011ccc:	4b2d      	ldr	r3, [pc, #180]	; (8011d84 <__mdiff+0x108>)
 8011cce:	4602      	mov	r2, r0
 8011cd0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011cd4:	e7e6      	b.n	8011ca4 <__mdiff+0x28>
 8011cd6:	693e      	ldr	r6, [r7, #16]
 8011cd8:	60c5      	str	r5, [r0, #12]
 8011cda:	6925      	ldr	r5, [r4, #16]
 8011cdc:	f107 0114 	add.w	r1, r7, #20
 8011ce0:	f104 0914 	add.w	r9, r4, #20
 8011ce4:	f100 0e14 	add.w	lr, r0, #20
 8011ce8:	f107 0210 	add.w	r2, r7, #16
 8011cec:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011cf0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011cf4:	46f2      	mov	sl, lr
 8011cf6:	2700      	movs	r7, #0
 8011cf8:	f859 3b04 	ldr.w	r3, [r9], #4
 8011cfc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011d00:	fa1f f883 	uxth.w	r8, r3
 8011d04:	fa17 f78b 	uxtah	r7, r7, fp
 8011d08:	0c1b      	lsrs	r3, r3, #16
 8011d0a:	eba7 0808 	sub.w	r8, r7, r8
 8011d0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011d12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011d16:	fa1f f888 	uxth.w	r8, r8
 8011d1a:	141f      	asrs	r7, r3, #16
 8011d1c:	454d      	cmp	r5, r9
 8011d1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011d22:	f84a 3b04 	str.w	r3, [sl], #4
 8011d26:	d8e7      	bhi.n	8011cf8 <__mdiff+0x7c>
 8011d28:	1b2b      	subs	r3, r5, r4
 8011d2a:	3b15      	subs	r3, #21
 8011d2c:	f023 0303 	bic.w	r3, r3, #3
 8011d30:	3304      	adds	r3, #4
 8011d32:	3415      	adds	r4, #21
 8011d34:	42a5      	cmp	r5, r4
 8011d36:	bf38      	it	cc
 8011d38:	2304      	movcc	r3, #4
 8011d3a:	4419      	add	r1, r3
 8011d3c:	4473      	add	r3, lr
 8011d3e:	469e      	mov	lr, r3
 8011d40:	460d      	mov	r5, r1
 8011d42:	4565      	cmp	r5, ip
 8011d44:	d30e      	bcc.n	8011d64 <__mdiff+0xe8>
 8011d46:	f10c 0203 	add.w	r2, ip, #3
 8011d4a:	1a52      	subs	r2, r2, r1
 8011d4c:	f022 0203 	bic.w	r2, r2, #3
 8011d50:	3903      	subs	r1, #3
 8011d52:	458c      	cmp	ip, r1
 8011d54:	bf38      	it	cc
 8011d56:	2200      	movcc	r2, #0
 8011d58:	441a      	add	r2, r3
 8011d5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011d5e:	b17b      	cbz	r3, 8011d80 <__mdiff+0x104>
 8011d60:	6106      	str	r6, [r0, #16]
 8011d62:	e7a5      	b.n	8011cb0 <__mdiff+0x34>
 8011d64:	f855 8b04 	ldr.w	r8, [r5], #4
 8011d68:	fa17 f488 	uxtah	r4, r7, r8
 8011d6c:	1422      	asrs	r2, r4, #16
 8011d6e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011d72:	b2a4      	uxth	r4, r4
 8011d74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011d78:	f84e 4b04 	str.w	r4, [lr], #4
 8011d7c:	1417      	asrs	r7, r2, #16
 8011d7e:	e7e0      	b.n	8011d42 <__mdiff+0xc6>
 8011d80:	3e01      	subs	r6, #1
 8011d82:	e7ea      	b.n	8011d5a <__mdiff+0xde>
 8011d84:	0801471c 	.word	0x0801471c
 8011d88:	08014790 	.word	0x08014790

08011d8c <__d2b>:
 8011d8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011d90:	4689      	mov	r9, r1
 8011d92:	2101      	movs	r1, #1
 8011d94:	ec57 6b10 	vmov	r6, r7, d0
 8011d98:	4690      	mov	r8, r2
 8011d9a:	f7ff fcd5 	bl	8011748 <_Balloc>
 8011d9e:	4604      	mov	r4, r0
 8011da0:	b930      	cbnz	r0, 8011db0 <__d2b+0x24>
 8011da2:	4602      	mov	r2, r0
 8011da4:	4b25      	ldr	r3, [pc, #148]	; (8011e3c <__d2b+0xb0>)
 8011da6:	4826      	ldr	r0, [pc, #152]	; (8011e40 <__d2b+0xb4>)
 8011da8:	f240 310a 	movw	r1, #778	; 0x30a
 8011dac:	f000 fac4 	bl	8012338 <__assert_func>
 8011db0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011db4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011db8:	bb35      	cbnz	r5, 8011e08 <__d2b+0x7c>
 8011dba:	2e00      	cmp	r6, #0
 8011dbc:	9301      	str	r3, [sp, #4]
 8011dbe:	d028      	beq.n	8011e12 <__d2b+0x86>
 8011dc0:	4668      	mov	r0, sp
 8011dc2:	9600      	str	r6, [sp, #0]
 8011dc4:	f7ff fd8c 	bl	80118e0 <__lo0bits>
 8011dc8:	9900      	ldr	r1, [sp, #0]
 8011dca:	b300      	cbz	r0, 8011e0e <__d2b+0x82>
 8011dcc:	9a01      	ldr	r2, [sp, #4]
 8011dce:	f1c0 0320 	rsb	r3, r0, #32
 8011dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8011dd6:	430b      	orrs	r3, r1
 8011dd8:	40c2      	lsrs	r2, r0
 8011dda:	6163      	str	r3, [r4, #20]
 8011ddc:	9201      	str	r2, [sp, #4]
 8011dde:	9b01      	ldr	r3, [sp, #4]
 8011de0:	61a3      	str	r3, [r4, #24]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	bf14      	ite	ne
 8011de6:	2202      	movne	r2, #2
 8011de8:	2201      	moveq	r2, #1
 8011dea:	6122      	str	r2, [r4, #16]
 8011dec:	b1d5      	cbz	r5, 8011e24 <__d2b+0x98>
 8011dee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011df2:	4405      	add	r5, r0
 8011df4:	f8c9 5000 	str.w	r5, [r9]
 8011df8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011dfc:	f8c8 0000 	str.w	r0, [r8]
 8011e00:	4620      	mov	r0, r4
 8011e02:	b003      	add	sp, #12
 8011e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e0c:	e7d5      	b.n	8011dba <__d2b+0x2e>
 8011e0e:	6161      	str	r1, [r4, #20]
 8011e10:	e7e5      	b.n	8011dde <__d2b+0x52>
 8011e12:	a801      	add	r0, sp, #4
 8011e14:	f7ff fd64 	bl	80118e0 <__lo0bits>
 8011e18:	9b01      	ldr	r3, [sp, #4]
 8011e1a:	6163      	str	r3, [r4, #20]
 8011e1c:	2201      	movs	r2, #1
 8011e1e:	6122      	str	r2, [r4, #16]
 8011e20:	3020      	adds	r0, #32
 8011e22:	e7e3      	b.n	8011dec <__d2b+0x60>
 8011e24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011e28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011e2c:	f8c9 0000 	str.w	r0, [r9]
 8011e30:	6918      	ldr	r0, [r3, #16]
 8011e32:	f7ff fd35 	bl	80118a0 <__hi0bits>
 8011e36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011e3a:	e7df      	b.n	8011dfc <__d2b+0x70>
 8011e3c:	0801471c 	.word	0x0801471c
 8011e40:	08014790 	.word	0x08014790

08011e44 <_calloc_r>:
 8011e44:	b513      	push	{r0, r1, r4, lr}
 8011e46:	434a      	muls	r2, r1
 8011e48:	4611      	mov	r1, r2
 8011e4a:	9201      	str	r2, [sp, #4]
 8011e4c:	f000 f85a 	bl	8011f04 <_malloc_r>
 8011e50:	4604      	mov	r4, r0
 8011e52:	b118      	cbz	r0, 8011e5c <_calloc_r+0x18>
 8011e54:	9a01      	ldr	r2, [sp, #4]
 8011e56:	2100      	movs	r1, #0
 8011e58:	f7fd fd84 	bl	800f964 <memset>
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	b002      	add	sp, #8
 8011e60:	bd10      	pop	{r4, pc}
	...

08011e64 <_free_r>:
 8011e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e66:	2900      	cmp	r1, #0
 8011e68:	d048      	beq.n	8011efc <_free_r+0x98>
 8011e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e6e:	9001      	str	r0, [sp, #4]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	f1a1 0404 	sub.w	r4, r1, #4
 8011e76:	bfb8      	it	lt
 8011e78:	18e4      	addlt	r4, r4, r3
 8011e7a:	f000 fae3 	bl	8012444 <__malloc_lock>
 8011e7e:	4a20      	ldr	r2, [pc, #128]	; (8011f00 <_free_r+0x9c>)
 8011e80:	9801      	ldr	r0, [sp, #4]
 8011e82:	6813      	ldr	r3, [r2, #0]
 8011e84:	4615      	mov	r5, r2
 8011e86:	b933      	cbnz	r3, 8011e96 <_free_r+0x32>
 8011e88:	6063      	str	r3, [r4, #4]
 8011e8a:	6014      	str	r4, [r2, #0]
 8011e8c:	b003      	add	sp, #12
 8011e8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e92:	f000 badd 	b.w	8012450 <__malloc_unlock>
 8011e96:	42a3      	cmp	r3, r4
 8011e98:	d90b      	bls.n	8011eb2 <_free_r+0x4e>
 8011e9a:	6821      	ldr	r1, [r4, #0]
 8011e9c:	1862      	adds	r2, r4, r1
 8011e9e:	4293      	cmp	r3, r2
 8011ea0:	bf04      	itt	eq
 8011ea2:	681a      	ldreq	r2, [r3, #0]
 8011ea4:	685b      	ldreq	r3, [r3, #4]
 8011ea6:	6063      	str	r3, [r4, #4]
 8011ea8:	bf04      	itt	eq
 8011eaa:	1852      	addeq	r2, r2, r1
 8011eac:	6022      	streq	r2, [r4, #0]
 8011eae:	602c      	str	r4, [r5, #0]
 8011eb0:	e7ec      	b.n	8011e8c <_free_r+0x28>
 8011eb2:	461a      	mov	r2, r3
 8011eb4:	685b      	ldr	r3, [r3, #4]
 8011eb6:	b10b      	cbz	r3, 8011ebc <_free_r+0x58>
 8011eb8:	42a3      	cmp	r3, r4
 8011eba:	d9fa      	bls.n	8011eb2 <_free_r+0x4e>
 8011ebc:	6811      	ldr	r1, [r2, #0]
 8011ebe:	1855      	adds	r5, r2, r1
 8011ec0:	42a5      	cmp	r5, r4
 8011ec2:	d10b      	bne.n	8011edc <_free_r+0x78>
 8011ec4:	6824      	ldr	r4, [r4, #0]
 8011ec6:	4421      	add	r1, r4
 8011ec8:	1854      	adds	r4, r2, r1
 8011eca:	42a3      	cmp	r3, r4
 8011ecc:	6011      	str	r1, [r2, #0]
 8011ece:	d1dd      	bne.n	8011e8c <_free_r+0x28>
 8011ed0:	681c      	ldr	r4, [r3, #0]
 8011ed2:	685b      	ldr	r3, [r3, #4]
 8011ed4:	6053      	str	r3, [r2, #4]
 8011ed6:	4421      	add	r1, r4
 8011ed8:	6011      	str	r1, [r2, #0]
 8011eda:	e7d7      	b.n	8011e8c <_free_r+0x28>
 8011edc:	d902      	bls.n	8011ee4 <_free_r+0x80>
 8011ede:	230c      	movs	r3, #12
 8011ee0:	6003      	str	r3, [r0, #0]
 8011ee2:	e7d3      	b.n	8011e8c <_free_r+0x28>
 8011ee4:	6825      	ldr	r5, [r4, #0]
 8011ee6:	1961      	adds	r1, r4, r5
 8011ee8:	428b      	cmp	r3, r1
 8011eea:	bf04      	itt	eq
 8011eec:	6819      	ldreq	r1, [r3, #0]
 8011eee:	685b      	ldreq	r3, [r3, #4]
 8011ef0:	6063      	str	r3, [r4, #4]
 8011ef2:	bf04      	itt	eq
 8011ef4:	1949      	addeq	r1, r1, r5
 8011ef6:	6021      	streq	r1, [r4, #0]
 8011ef8:	6054      	str	r4, [r2, #4]
 8011efa:	e7c7      	b.n	8011e8c <_free_r+0x28>
 8011efc:	b003      	add	sp, #12
 8011efe:	bd30      	pop	{r4, r5, pc}
 8011f00:	2000af2c 	.word	0x2000af2c

08011f04 <_malloc_r>:
 8011f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f06:	1ccd      	adds	r5, r1, #3
 8011f08:	f025 0503 	bic.w	r5, r5, #3
 8011f0c:	3508      	adds	r5, #8
 8011f0e:	2d0c      	cmp	r5, #12
 8011f10:	bf38      	it	cc
 8011f12:	250c      	movcc	r5, #12
 8011f14:	2d00      	cmp	r5, #0
 8011f16:	4606      	mov	r6, r0
 8011f18:	db01      	blt.n	8011f1e <_malloc_r+0x1a>
 8011f1a:	42a9      	cmp	r1, r5
 8011f1c:	d903      	bls.n	8011f26 <_malloc_r+0x22>
 8011f1e:	230c      	movs	r3, #12
 8011f20:	6033      	str	r3, [r6, #0]
 8011f22:	2000      	movs	r0, #0
 8011f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f26:	f000 fa8d 	bl	8012444 <__malloc_lock>
 8011f2a:	4921      	ldr	r1, [pc, #132]	; (8011fb0 <_malloc_r+0xac>)
 8011f2c:	680a      	ldr	r2, [r1, #0]
 8011f2e:	4614      	mov	r4, r2
 8011f30:	b99c      	cbnz	r4, 8011f5a <_malloc_r+0x56>
 8011f32:	4f20      	ldr	r7, [pc, #128]	; (8011fb4 <_malloc_r+0xb0>)
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	b923      	cbnz	r3, 8011f42 <_malloc_r+0x3e>
 8011f38:	4621      	mov	r1, r4
 8011f3a:	4630      	mov	r0, r6
 8011f3c:	f000 f996 	bl	801226c <_sbrk_r>
 8011f40:	6038      	str	r0, [r7, #0]
 8011f42:	4629      	mov	r1, r5
 8011f44:	4630      	mov	r0, r6
 8011f46:	f000 f991 	bl	801226c <_sbrk_r>
 8011f4a:	1c43      	adds	r3, r0, #1
 8011f4c:	d123      	bne.n	8011f96 <_malloc_r+0x92>
 8011f4e:	230c      	movs	r3, #12
 8011f50:	6033      	str	r3, [r6, #0]
 8011f52:	4630      	mov	r0, r6
 8011f54:	f000 fa7c 	bl	8012450 <__malloc_unlock>
 8011f58:	e7e3      	b.n	8011f22 <_malloc_r+0x1e>
 8011f5a:	6823      	ldr	r3, [r4, #0]
 8011f5c:	1b5b      	subs	r3, r3, r5
 8011f5e:	d417      	bmi.n	8011f90 <_malloc_r+0x8c>
 8011f60:	2b0b      	cmp	r3, #11
 8011f62:	d903      	bls.n	8011f6c <_malloc_r+0x68>
 8011f64:	6023      	str	r3, [r4, #0]
 8011f66:	441c      	add	r4, r3
 8011f68:	6025      	str	r5, [r4, #0]
 8011f6a:	e004      	b.n	8011f76 <_malloc_r+0x72>
 8011f6c:	6863      	ldr	r3, [r4, #4]
 8011f6e:	42a2      	cmp	r2, r4
 8011f70:	bf0c      	ite	eq
 8011f72:	600b      	streq	r3, [r1, #0]
 8011f74:	6053      	strne	r3, [r2, #4]
 8011f76:	4630      	mov	r0, r6
 8011f78:	f000 fa6a 	bl	8012450 <__malloc_unlock>
 8011f7c:	f104 000b 	add.w	r0, r4, #11
 8011f80:	1d23      	adds	r3, r4, #4
 8011f82:	f020 0007 	bic.w	r0, r0, #7
 8011f86:	1ac2      	subs	r2, r0, r3
 8011f88:	d0cc      	beq.n	8011f24 <_malloc_r+0x20>
 8011f8a:	1a1b      	subs	r3, r3, r0
 8011f8c:	50a3      	str	r3, [r4, r2]
 8011f8e:	e7c9      	b.n	8011f24 <_malloc_r+0x20>
 8011f90:	4622      	mov	r2, r4
 8011f92:	6864      	ldr	r4, [r4, #4]
 8011f94:	e7cc      	b.n	8011f30 <_malloc_r+0x2c>
 8011f96:	1cc4      	adds	r4, r0, #3
 8011f98:	f024 0403 	bic.w	r4, r4, #3
 8011f9c:	42a0      	cmp	r0, r4
 8011f9e:	d0e3      	beq.n	8011f68 <_malloc_r+0x64>
 8011fa0:	1a21      	subs	r1, r4, r0
 8011fa2:	4630      	mov	r0, r6
 8011fa4:	f000 f962 	bl	801226c <_sbrk_r>
 8011fa8:	3001      	adds	r0, #1
 8011faa:	d1dd      	bne.n	8011f68 <_malloc_r+0x64>
 8011fac:	e7cf      	b.n	8011f4e <_malloc_r+0x4a>
 8011fae:	bf00      	nop
 8011fb0:	2000af2c 	.word	0x2000af2c
 8011fb4:	2000af30 	.word	0x2000af30

08011fb8 <__sfputc_r>:
 8011fb8:	6893      	ldr	r3, [r2, #8]
 8011fba:	3b01      	subs	r3, #1
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	b410      	push	{r4}
 8011fc0:	6093      	str	r3, [r2, #8]
 8011fc2:	da08      	bge.n	8011fd6 <__sfputc_r+0x1e>
 8011fc4:	6994      	ldr	r4, [r2, #24]
 8011fc6:	42a3      	cmp	r3, r4
 8011fc8:	db01      	blt.n	8011fce <__sfputc_r+0x16>
 8011fca:	290a      	cmp	r1, #10
 8011fcc:	d103      	bne.n	8011fd6 <__sfputc_r+0x1e>
 8011fce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fd2:	f7fe ba55 	b.w	8010480 <__swbuf_r>
 8011fd6:	6813      	ldr	r3, [r2, #0]
 8011fd8:	1c58      	adds	r0, r3, #1
 8011fda:	6010      	str	r0, [r2, #0]
 8011fdc:	7019      	strb	r1, [r3, #0]
 8011fde:	4608      	mov	r0, r1
 8011fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fe4:	4770      	bx	lr

08011fe6 <__sfputs_r>:
 8011fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fe8:	4606      	mov	r6, r0
 8011fea:	460f      	mov	r7, r1
 8011fec:	4614      	mov	r4, r2
 8011fee:	18d5      	adds	r5, r2, r3
 8011ff0:	42ac      	cmp	r4, r5
 8011ff2:	d101      	bne.n	8011ff8 <__sfputs_r+0x12>
 8011ff4:	2000      	movs	r0, #0
 8011ff6:	e007      	b.n	8012008 <__sfputs_r+0x22>
 8011ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ffc:	463a      	mov	r2, r7
 8011ffe:	4630      	mov	r0, r6
 8012000:	f7ff ffda 	bl	8011fb8 <__sfputc_r>
 8012004:	1c43      	adds	r3, r0, #1
 8012006:	d1f3      	bne.n	8011ff0 <__sfputs_r+0xa>
 8012008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801200c <_vfiprintf_r>:
 801200c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012010:	460d      	mov	r5, r1
 8012012:	b09d      	sub	sp, #116	; 0x74
 8012014:	4614      	mov	r4, r2
 8012016:	4698      	mov	r8, r3
 8012018:	4606      	mov	r6, r0
 801201a:	b118      	cbz	r0, 8012024 <_vfiprintf_r+0x18>
 801201c:	6983      	ldr	r3, [r0, #24]
 801201e:	b90b      	cbnz	r3, 8012024 <_vfiprintf_r+0x18>
 8012020:	f7ff fa80 	bl	8011524 <__sinit>
 8012024:	4b89      	ldr	r3, [pc, #548]	; (801224c <_vfiprintf_r+0x240>)
 8012026:	429d      	cmp	r5, r3
 8012028:	d11b      	bne.n	8012062 <_vfiprintf_r+0x56>
 801202a:	6875      	ldr	r5, [r6, #4]
 801202c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801202e:	07d9      	lsls	r1, r3, #31
 8012030:	d405      	bmi.n	801203e <_vfiprintf_r+0x32>
 8012032:	89ab      	ldrh	r3, [r5, #12]
 8012034:	059a      	lsls	r2, r3, #22
 8012036:	d402      	bmi.n	801203e <_vfiprintf_r+0x32>
 8012038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801203a:	f7ff fb16 	bl	801166a <__retarget_lock_acquire_recursive>
 801203e:	89ab      	ldrh	r3, [r5, #12]
 8012040:	071b      	lsls	r3, r3, #28
 8012042:	d501      	bpl.n	8012048 <_vfiprintf_r+0x3c>
 8012044:	692b      	ldr	r3, [r5, #16]
 8012046:	b9eb      	cbnz	r3, 8012084 <_vfiprintf_r+0x78>
 8012048:	4629      	mov	r1, r5
 801204a:	4630      	mov	r0, r6
 801204c:	f7fe fa6a 	bl	8010524 <__swsetup_r>
 8012050:	b1c0      	cbz	r0, 8012084 <_vfiprintf_r+0x78>
 8012052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012054:	07dc      	lsls	r4, r3, #31
 8012056:	d50e      	bpl.n	8012076 <_vfiprintf_r+0x6a>
 8012058:	f04f 30ff 	mov.w	r0, #4294967295
 801205c:	b01d      	add	sp, #116	; 0x74
 801205e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012062:	4b7b      	ldr	r3, [pc, #492]	; (8012250 <_vfiprintf_r+0x244>)
 8012064:	429d      	cmp	r5, r3
 8012066:	d101      	bne.n	801206c <_vfiprintf_r+0x60>
 8012068:	68b5      	ldr	r5, [r6, #8]
 801206a:	e7df      	b.n	801202c <_vfiprintf_r+0x20>
 801206c:	4b79      	ldr	r3, [pc, #484]	; (8012254 <_vfiprintf_r+0x248>)
 801206e:	429d      	cmp	r5, r3
 8012070:	bf08      	it	eq
 8012072:	68f5      	ldreq	r5, [r6, #12]
 8012074:	e7da      	b.n	801202c <_vfiprintf_r+0x20>
 8012076:	89ab      	ldrh	r3, [r5, #12]
 8012078:	0598      	lsls	r0, r3, #22
 801207a:	d4ed      	bmi.n	8012058 <_vfiprintf_r+0x4c>
 801207c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801207e:	f7ff faf5 	bl	801166c <__retarget_lock_release_recursive>
 8012082:	e7e9      	b.n	8012058 <_vfiprintf_r+0x4c>
 8012084:	2300      	movs	r3, #0
 8012086:	9309      	str	r3, [sp, #36]	; 0x24
 8012088:	2320      	movs	r3, #32
 801208a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801208e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012092:	2330      	movs	r3, #48	; 0x30
 8012094:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012258 <_vfiprintf_r+0x24c>
 8012098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801209c:	f04f 0901 	mov.w	r9, #1
 80120a0:	4623      	mov	r3, r4
 80120a2:	469a      	mov	sl, r3
 80120a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120a8:	b10a      	cbz	r2, 80120ae <_vfiprintf_r+0xa2>
 80120aa:	2a25      	cmp	r2, #37	; 0x25
 80120ac:	d1f9      	bne.n	80120a2 <_vfiprintf_r+0x96>
 80120ae:	ebba 0b04 	subs.w	fp, sl, r4
 80120b2:	d00b      	beq.n	80120cc <_vfiprintf_r+0xc0>
 80120b4:	465b      	mov	r3, fp
 80120b6:	4622      	mov	r2, r4
 80120b8:	4629      	mov	r1, r5
 80120ba:	4630      	mov	r0, r6
 80120bc:	f7ff ff93 	bl	8011fe6 <__sfputs_r>
 80120c0:	3001      	adds	r0, #1
 80120c2:	f000 80aa 	beq.w	801221a <_vfiprintf_r+0x20e>
 80120c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120c8:	445a      	add	r2, fp
 80120ca:	9209      	str	r2, [sp, #36]	; 0x24
 80120cc:	f89a 3000 	ldrb.w	r3, [sl]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	f000 80a2 	beq.w	801221a <_vfiprintf_r+0x20e>
 80120d6:	2300      	movs	r3, #0
 80120d8:	f04f 32ff 	mov.w	r2, #4294967295
 80120dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120e0:	f10a 0a01 	add.w	sl, sl, #1
 80120e4:	9304      	str	r3, [sp, #16]
 80120e6:	9307      	str	r3, [sp, #28]
 80120e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120ec:	931a      	str	r3, [sp, #104]	; 0x68
 80120ee:	4654      	mov	r4, sl
 80120f0:	2205      	movs	r2, #5
 80120f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120f6:	4858      	ldr	r0, [pc, #352]	; (8012258 <_vfiprintf_r+0x24c>)
 80120f8:	f7ee f87a 	bl	80001f0 <memchr>
 80120fc:	9a04      	ldr	r2, [sp, #16]
 80120fe:	b9d8      	cbnz	r0, 8012138 <_vfiprintf_r+0x12c>
 8012100:	06d1      	lsls	r1, r2, #27
 8012102:	bf44      	itt	mi
 8012104:	2320      	movmi	r3, #32
 8012106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801210a:	0713      	lsls	r3, r2, #28
 801210c:	bf44      	itt	mi
 801210e:	232b      	movmi	r3, #43	; 0x2b
 8012110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012114:	f89a 3000 	ldrb.w	r3, [sl]
 8012118:	2b2a      	cmp	r3, #42	; 0x2a
 801211a:	d015      	beq.n	8012148 <_vfiprintf_r+0x13c>
 801211c:	9a07      	ldr	r2, [sp, #28]
 801211e:	4654      	mov	r4, sl
 8012120:	2000      	movs	r0, #0
 8012122:	f04f 0c0a 	mov.w	ip, #10
 8012126:	4621      	mov	r1, r4
 8012128:	f811 3b01 	ldrb.w	r3, [r1], #1
 801212c:	3b30      	subs	r3, #48	; 0x30
 801212e:	2b09      	cmp	r3, #9
 8012130:	d94e      	bls.n	80121d0 <_vfiprintf_r+0x1c4>
 8012132:	b1b0      	cbz	r0, 8012162 <_vfiprintf_r+0x156>
 8012134:	9207      	str	r2, [sp, #28]
 8012136:	e014      	b.n	8012162 <_vfiprintf_r+0x156>
 8012138:	eba0 0308 	sub.w	r3, r0, r8
 801213c:	fa09 f303 	lsl.w	r3, r9, r3
 8012140:	4313      	orrs	r3, r2
 8012142:	9304      	str	r3, [sp, #16]
 8012144:	46a2      	mov	sl, r4
 8012146:	e7d2      	b.n	80120ee <_vfiprintf_r+0xe2>
 8012148:	9b03      	ldr	r3, [sp, #12]
 801214a:	1d19      	adds	r1, r3, #4
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	9103      	str	r1, [sp, #12]
 8012150:	2b00      	cmp	r3, #0
 8012152:	bfbb      	ittet	lt
 8012154:	425b      	neglt	r3, r3
 8012156:	f042 0202 	orrlt.w	r2, r2, #2
 801215a:	9307      	strge	r3, [sp, #28]
 801215c:	9307      	strlt	r3, [sp, #28]
 801215e:	bfb8      	it	lt
 8012160:	9204      	strlt	r2, [sp, #16]
 8012162:	7823      	ldrb	r3, [r4, #0]
 8012164:	2b2e      	cmp	r3, #46	; 0x2e
 8012166:	d10c      	bne.n	8012182 <_vfiprintf_r+0x176>
 8012168:	7863      	ldrb	r3, [r4, #1]
 801216a:	2b2a      	cmp	r3, #42	; 0x2a
 801216c:	d135      	bne.n	80121da <_vfiprintf_r+0x1ce>
 801216e:	9b03      	ldr	r3, [sp, #12]
 8012170:	1d1a      	adds	r2, r3, #4
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	9203      	str	r2, [sp, #12]
 8012176:	2b00      	cmp	r3, #0
 8012178:	bfb8      	it	lt
 801217a:	f04f 33ff 	movlt.w	r3, #4294967295
 801217e:	3402      	adds	r4, #2
 8012180:	9305      	str	r3, [sp, #20]
 8012182:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012268 <_vfiprintf_r+0x25c>
 8012186:	7821      	ldrb	r1, [r4, #0]
 8012188:	2203      	movs	r2, #3
 801218a:	4650      	mov	r0, sl
 801218c:	f7ee f830 	bl	80001f0 <memchr>
 8012190:	b140      	cbz	r0, 80121a4 <_vfiprintf_r+0x198>
 8012192:	2340      	movs	r3, #64	; 0x40
 8012194:	eba0 000a 	sub.w	r0, r0, sl
 8012198:	fa03 f000 	lsl.w	r0, r3, r0
 801219c:	9b04      	ldr	r3, [sp, #16]
 801219e:	4303      	orrs	r3, r0
 80121a0:	3401      	adds	r4, #1
 80121a2:	9304      	str	r3, [sp, #16]
 80121a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121a8:	482c      	ldr	r0, [pc, #176]	; (801225c <_vfiprintf_r+0x250>)
 80121aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121ae:	2206      	movs	r2, #6
 80121b0:	f7ee f81e 	bl	80001f0 <memchr>
 80121b4:	2800      	cmp	r0, #0
 80121b6:	d03f      	beq.n	8012238 <_vfiprintf_r+0x22c>
 80121b8:	4b29      	ldr	r3, [pc, #164]	; (8012260 <_vfiprintf_r+0x254>)
 80121ba:	bb1b      	cbnz	r3, 8012204 <_vfiprintf_r+0x1f8>
 80121bc:	9b03      	ldr	r3, [sp, #12]
 80121be:	3307      	adds	r3, #7
 80121c0:	f023 0307 	bic.w	r3, r3, #7
 80121c4:	3308      	adds	r3, #8
 80121c6:	9303      	str	r3, [sp, #12]
 80121c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121ca:	443b      	add	r3, r7
 80121cc:	9309      	str	r3, [sp, #36]	; 0x24
 80121ce:	e767      	b.n	80120a0 <_vfiprintf_r+0x94>
 80121d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80121d4:	460c      	mov	r4, r1
 80121d6:	2001      	movs	r0, #1
 80121d8:	e7a5      	b.n	8012126 <_vfiprintf_r+0x11a>
 80121da:	2300      	movs	r3, #0
 80121dc:	3401      	adds	r4, #1
 80121de:	9305      	str	r3, [sp, #20]
 80121e0:	4619      	mov	r1, r3
 80121e2:	f04f 0c0a 	mov.w	ip, #10
 80121e6:	4620      	mov	r0, r4
 80121e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121ec:	3a30      	subs	r2, #48	; 0x30
 80121ee:	2a09      	cmp	r2, #9
 80121f0:	d903      	bls.n	80121fa <_vfiprintf_r+0x1ee>
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d0c5      	beq.n	8012182 <_vfiprintf_r+0x176>
 80121f6:	9105      	str	r1, [sp, #20]
 80121f8:	e7c3      	b.n	8012182 <_vfiprintf_r+0x176>
 80121fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80121fe:	4604      	mov	r4, r0
 8012200:	2301      	movs	r3, #1
 8012202:	e7f0      	b.n	80121e6 <_vfiprintf_r+0x1da>
 8012204:	ab03      	add	r3, sp, #12
 8012206:	9300      	str	r3, [sp, #0]
 8012208:	462a      	mov	r2, r5
 801220a:	4b16      	ldr	r3, [pc, #88]	; (8012264 <_vfiprintf_r+0x258>)
 801220c:	a904      	add	r1, sp, #16
 801220e:	4630      	mov	r0, r6
 8012210:	f7fd fc50 	bl	800fab4 <_printf_float>
 8012214:	4607      	mov	r7, r0
 8012216:	1c78      	adds	r0, r7, #1
 8012218:	d1d6      	bne.n	80121c8 <_vfiprintf_r+0x1bc>
 801221a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801221c:	07d9      	lsls	r1, r3, #31
 801221e:	d405      	bmi.n	801222c <_vfiprintf_r+0x220>
 8012220:	89ab      	ldrh	r3, [r5, #12]
 8012222:	059a      	lsls	r2, r3, #22
 8012224:	d402      	bmi.n	801222c <_vfiprintf_r+0x220>
 8012226:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012228:	f7ff fa20 	bl	801166c <__retarget_lock_release_recursive>
 801222c:	89ab      	ldrh	r3, [r5, #12]
 801222e:	065b      	lsls	r3, r3, #25
 8012230:	f53f af12 	bmi.w	8012058 <_vfiprintf_r+0x4c>
 8012234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012236:	e711      	b.n	801205c <_vfiprintf_r+0x50>
 8012238:	ab03      	add	r3, sp, #12
 801223a:	9300      	str	r3, [sp, #0]
 801223c:	462a      	mov	r2, r5
 801223e:	4b09      	ldr	r3, [pc, #36]	; (8012264 <_vfiprintf_r+0x258>)
 8012240:	a904      	add	r1, sp, #16
 8012242:	4630      	mov	r0, r6
 8012244:	f7fd feda 	bl	800fffc <_printf_i>
 8012248:	e7e4      	b.n	8012214 <_vfiprintf_r+0x208>
 801224a:	bf00      	nop
 801224c:	08014750 	.word	0x08014750
 8012250:	08014770 	.word	0x08014770
 8012254:	08014730 	.word	0x08014730
 8012258:	080148ec 	.word	0x080148ec
 801225c:	080148f6 	.word	0x080148f6
 8012260:	0800fab5 	.word	0x0800fab5
 8012264:	08011fe7 	.word	0x08011fe7
 8012268:	080148f2 	.word	0x080148f2

0801226c <_sbrk_r>:
 801226c:	b538      	push	{r3, r4, r5, lr}
 801226e:	4d06      	ldr	r5, [pc, #24]	; (8012288 <_sbrk_r+0x1c>)
 8012270:	2300      	movs	r3, #0
 8012272:	4604      	mov	r4, r0
 8012274:	4608      	mov	r0, r1
 8012276:	602b      	str	r3, [r5, #0]
 8012278:	f7f2 f9a0 	bl	80045bc <_sbrk>
 801227c:	1c43      	adds	r3, r0, #1
 801227e:	d102      	bne.n	8012286 <_sbrk_r+0x1a>
 8012280:	682b      	ldr	r3, [r5, #0]
 8012282:	b103      	cbz	r3, 8012286 <_sbrk_r+0x1a>
 8012284:	6023      	str	r3, [r4, #0]
 8012286:	bd38      	pop	{r3, r4, r5, pc}
 8012288:	2000b724 	.word	0x2000b724

0801228c <__sread>:
 801228c:	b510      	push	{r4, lr}
 801228e:	460c      	mov	r4, r1
 8012290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012294:	f000 f8e2 	bl	801245c <_read_r>
 8012298:	2800      	cmp	r0, #0
 801229a:	bfab      	itete	ge
 801229c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801229e:	89a3      	ldrhlt	r3, [r4, #12]
 80122a0:	181b      	addge	r3, r3, r0
 80122a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80122a6:	bfac      	ite	ge
 80122a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80122aa:	81a3      	strhlt	r3, [r4, #12]
 80122ac:	bd10      	pop	{r4, pc}

080122ae <__swrite>:
 80122ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122b2:	461f      	mov	r7, r3
 80122b4:	898b      	ldrh	r3, [r1, #12]
 80122b6:	05db      	lsls	r3, r3, #23
 80122b8:	4605      	mov	r5, r0
 80122ba:	460c      	mov	r4, r1
 80122bc:	4616      	mov	r6, r2
 80122be:	d505      	bpl.n	80122cc <__swrite+0x1e>
 80122c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122c4:	2302      	movs	r3, #2
 80122c6:	2200      	movs	r2, #0
 80122c8:	f000 f898 	bl	80123fc <_lseek_r>
 80122cc:	89a3      	ldrh	r3, [r4, #12]
 80122ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80122d6:	81a3      	strh	r3, [r4, #12]
 80122d8:	4632      	mov	r2, r6
 80122da:	463b      	mov	r3, r7
 80122dc:	4628      	mov	r0, r5
 80122de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122e2:	f000 b817 	b.w	8012314 <_write_r>

080122e6 <__sseek>:
 80122e6:	b510      	push	{r4, lr}
 80122e8:	460c      	mov	r4, r1
 80122ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122ee:	f000 f885 	bl	80123fc <_lseek_r>
 80122f2:	1c43      	adds	r3, r0, #1
 80122f4:	89a3      	ldrh	r3, [r4, #12]
 80122f6:	bf15      	itete	ne
 80122f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80122fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80122fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012302:	81a3      	strheq	r3, [r4, #12]
 8012304:	bf18      	it	ne
 8012306:	81a3      	strhne	r3, [r4, #12]
 8012308:	bd10      	pop	{r4, pc}

0801230a <__sclose>:
 801230a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801230e:	f000 b831 	b.w	8012374 <_close_r>
	...

08012314 <_write_r>:
 8012314:	b538      	push	{r3, r4, r5, lr}
 8012316:	4d07      	ldr	r5, [pc, #28]	; (8012334 <_write_r+0x20>)
 8012318:	4604      	mov	r4, r0
 801231a:	4608      	mov	r0, r1
 801231c:	4611      	mov	r1, r2
 801231e:	2200      	movs	r2, #0
 8012320:	602a      	str	r2, [r5, #0]
 8012322:	461a      	mov	r2, r3
 8012324:	f7f1 fe3a 	bl	8003f9c <_write>
 8012328:	1c43      	adds	r3, r0, #1
 801232a:	d102      	bne.n	8012332 <_write_r+0x1e>
 801232c:	682b      	ldr	r3, [r5, #0]
 801232e:	b103      	cbz	r3, 8012332 <_write_r+0x1e>
 8012330:	6023      	str	r3, [r4, #0]
 8012332:	bd38      	pop	{r3, r4, r5, pc}
 8012334:	2000b724 	.word	0x2000b724

08012338 <__assert_func>:
 8012338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801233a:	4614      	mov	r4, r2
 801233c:	461a      	mov	r2, r3
 801233e:	4b09      	ldr	r3, [pc, #36]	; (8012364 <__assert_func+0x2c>)
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	4605      	mov	r5, r0
 8012344:	68d8      	ldr	r0, [r3, #12]
 8012346:	b14c      	cbz	r4, 801235c <__assert_func+0x24>
 8012348:	4b07      	ldr	r3, [pc, #28]	; (8012368 <__assert_func+0x30>)
 801234a:	9100      	str	r1, [sp, #0]
 801234c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012350:	4906      	ldr	r1, [pc, #24]	; (801236c <__assert_func+0x34>)
 8012352:	462b      	mov	r3, r5
 8012354:	f000 f81e 	bl	8012394 <fiprintf>
 8012358:	f000 f89f 	bl	801249a <abort>
 801235c:	4b04      	ldr	r3, [pc, #16]	; (8012370 <__assert_func+0x38>)
 801235e:	461c      	mov	r4, r3
 8012360:	e7f3      	b.n	801234a <__assert_func+0x12>
 8012362:	bf00      	nop
 8012364:	2000001c 	.word	0x2000001c
 8012368:	080148fd 	.word	0x080148fd
 801236c:	0801490a 	.word	0x0801490a
 8012370:	08014938 	.word	0x08014938

08012374 <_close_r>:
 8012374:	b538      	push	{r3, r4, r5, lr}
 8012376:	4d06      	ldr	r5, [pc, #24]	; (8012390 <_close_r+0x1c>)
 8012378:	2300      	movs	r3, #0
 801237a:	4604      	mov	r4, r0
 801237c:	4608      	mov	r0, r1
 801237e:	602b      	str	r3, [r5, #0]
 8012380:	f7f2 f8e7 	bl	8004552 <_close>
 8012384:	1c43      	adds	r3, r0, #1
 8012386:	d102      	bne.n	801238e <_close_r+0x1a>
 8012388:	682b      	ldr	r3, [r5, #0]
 801238a:	b103      	cbz	r3, 801238e <_close_r+0x1a>
 801238c:	6023      	str	r3, [r4, #0]
 801238e:	bd38      	pop	{r3, r4, r5, pc}
 8012390:	2000b724 	.word	0x2000b724

08012394 <fiprintf>:
 8012394:	b40e      	push	{r1, r2, r3}
 8012396:	b503      	push	{r0, r1, lr}
 8012398:	4601      	mov	r1, r0
 801239a:	ab03      	add	r3, sp, #12
 801239c:	4805      	ldr	r0, [pc, #20]	; (80123b4 <fiprintf+0x20>)
 801239e:	f853 2b04 	ldr.w	r2, [r3], #4
 80123a2:	6800      	ldr	r0, [r0, #0]
 80123a4:	9301      	str	r3, [sp, #4]
 80123a6:	f7ff fe31 	bl	801200c <_vfiprintf_r>
 80123aa:	b002      	add	sp, #8
 80123ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80123b0:	b003      	add	sp, #12
 80123b2:	4770      	bx	lr
 80123b4:	2000001c 	.word	0x2000001c

080123b8 <_fstat_r>:
 80123b8:	b538      	push	{r3, r4, r5, lr}
 80123ba:	4d07      	ldr	r5, [pc, #28]	; (80123d8 <_fstat_r+0x20>)
 80123bc:	2300      	movs	r3, #0
 80123be:	4604      	mov	r4, r0
 80123c0:	4608      	mov	r0, r1
 80123c2:	4611      	mov	r1, r2
 80123c4:	602b      	str	r3, [r5, #0]
 80123c6:	f7f2 f8d0 	bl	800456a <_fstat>
 80123ca:	1c43      	adds	r3, r0, #1
 80123cc:	d102      	bne.n	80123d4 <_fstat_r+0x1c>
 80123ce:	682b      	ldr	r3, [r5, #0]
 80123d0:	b103      	cbz	r3, 80123d4 <_fstat_r+0x1c>
 80123d2:	6023      	str	r3, [r4, #0]
 80123d4:	bd38      	pop	{r3, r4, r5, pc}
 80123d6:	bf00      	nop
 80123d8:	2000b724 	.word	0x2000b724

080123dc <_isatty_r>:
 80123dc:	b538      	push	{r3, r4, r5, lr}
 80123de:	4d06      	ldr	r5, [pc, #24]	; (80123f8 <_isatty_r+0x1c>)
 80123e0:	2300      	movs	r3, #0
 80123e2:	4604      	mov	r4, r0
 80123e4:	4608      	mov	r0, r1
 80123e6:	602b      	str	r3, [r5, #0]
 80123e8:	f7f2 f8cf 	bl	800458a <_isatty>
 80123ec:	1c43      	adds	r3, r0, #1
 80123ee:	d102      	bne.n	80123f6 <_isatty_r+0x1a>
 80123f0:	682b      	ldr	r3, [r5, #0]
 80123f2:	b103      	cbz	r3, 80123f6 <_isatty_r+0x1a>
 80123f4:	6023      	str	r3, [r4, #0]
 80123f6:	bd38      	pop	{r3, r4, r5, pc}
 80123f8:	2000b724 	.word	0x2000b724

080123fc <_lseek_r>:
 80123fc:	b538      	push	{r3, r4, r5, lr}
 80123fe:	4d07      	ldr	r5, [pc, #28]	; (801241c <_lseek_r+0x20>)
 8012400:	4604      	mov	r4, r0
 8012402:	4608      	mov	r0, r1
 8012404:	4611      	mov	r1, r2
 8012406:	2200      	movs	r2, #0
 8012408:	602a      	str	r2, [r5, #0]
 801240a:	461a      	mov	r2, r3
 801240c:	f7f2 f8c8 	bl	80045a0 <_lseek>
 8012410:	1c43      	adds	r3, r0, #1
 8012412:	d102      	bne.n	801241a <_lseek_r+0x1e>
 8012414:	682b      	ldr	r3, [r5, #0]
 8012416:	b103      	cbz	r3, 801241a <_lseek_r+0x1e>
 8012418:	6023      	str	r3, [r4, #0]
 801241a:	bd38      	pop	{r3, r4, r5, pc}
 801241c:	2000b724 	.word	0x2000b724

08012420 <__ascii_mbtowc>:
 8012420:	b082      	sub	sp, #8
 8012422:	b901      	cbnz	r1, 8012426 <__ascii_mbtowc+0x6>
 8012424:	a901      	add	r1, sp, #4
 8012426:	b142      	cbz	r2, 801243a <__ascii_mbtowc+0x1a>
 8012428:	b14b      	cbz	r3, 801243e <__ascii_mbtowc+0x1e>
 801242a:	7813      	ldrb	r3, [r2, #0]
 801242c:	600b      	str	r3, [r1, #0]
 801242e:	7812      	ldrb	r2, [r2, #0]
 8012430:	1e10      	subs	r0, r2, #0
 8012432:	bf18      	it	ne
 8012434:	2001      	movne	r0, #1
 8012436:	b002      	add	sp, #8
 8012438:	4770      	bx	lr
 801243a:	4610      	mov	r0, r2
 801243c:	e7fb      	b.n	8012436 <__ascii_mbtowc+0x16>
 801243e:	f06f 0001 	mvn.w	r0, #1
 8012442:	e7f8      	b.n	8012436 <__ascii_mbtowc+0x16>

08012444 <__malloc_lock>:
 8012444:	4801      	ldr	r0, [pc, #4]	; (801244c <__malloc_lock+0x8>)
 8012446:	f7ff b910 	b.w	801166a <__retarget_lock_acquire_recursive>
 801244a:	bf00      	nop
 801244c:	2000b71c 	.word	0x2000b71c

08012450 <__malloc_unlock>:
 8012450:	4801      	ldr	r0, [pc, #4]	; (8012458 <__malloc_unlock+0x8>)
 8012452:	f7ff b90b 	b.w	801166c <__retarget_lock_release_recursive>
 8012456:	bf00      	nop
 8012458:	2000b71c 	.word	0x2000b71c

0801245c <_read_r>:
 801245c:	b538      	push	{r3, r4, r5, lr}
 801245e:	4d07      	ldr	r5, [pc, #28]	; (801247c <_read_r+0x20>)
 8012460:	4604      	mov	r4, r0
 8012462:	4608      	mov	r0, r1
 8012464:	4611      	mov	r1, r2
 8012466:	2200      	movs	r2, #0
 8012468:	602a      	str	r2, [r5, #0]
 801246a:	461a      	mov	r2, r3
 801246c:	f7f2 f854 	bl	8004518 <_read>
 8012470:	1c43      	adds	r3, r0, #1
 8012472:	d102      	bne.n	801247a <_read_r+0x1e>
 8012474:	682b      	ldr	r3, [r5, #0]
 8012476:	b103      	cbz	r3, 801247a <_read_r+0x1e>
 8012478:	6023      	str	r3, [r4, #0]
 801247a:	bd38      	pop	{r3, r4, r5, pc}
 801247c:	2000b724 	.word	0x2000b724

08012480 <__ascii_wctomb>:
 8012480:	b149      	cbz	r1, 8012496 <__ascii_wctomb+0x16>
 8012482:	2aff      	cmp	r2, #255	; 0xff
 8012484:	bf85      	ittet	hi
 8012486:	238a      	movhi	r3, #138	; 0x8a
 8012488:	6003      	strhi	r3, [r0, #0]
 801248a:	700a      	strbls	r2, [r1, #0]
 801248c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012490:	bf98      	it	ls
 8012492:	2001      	movls	r0, #1
 8012494:	4770      	bx	lr
 8012496:	4608      	mov	r0, r1
 8012498:	4770      	bx	lr

0801249a <abort>:
 801249a:	b508      	push	{r3, lr}
 801249c:	2006      	movs	r0, #6
 801249e:	f000 f82b 	bl	80124f8 <raise>
 80124a2:	2001      	movs	r0, #1
 80124a4:	f7f2 f82e 	bl	8004504 <_exit>

080124a8 <_raise_r>:
 80124a8:	291f      	cmp	r1, #31
 80124aa:	b538      	push	{r3, r4, r5, lr}
 80124ac:	4604      	mov	r4, r0
 80124ae:	460d      	mov	r5, r1
 80124b0:	d904      	bls.n	80124bc <_raise_r+0x14>
 80124b2:	2316      	movs	r3, #22
 80124b4:	6003      	str	r3, [r0, #0]
 80124b6:	f04f 30ff 	mov.w	r0, #4294967295
 80124ba:	bd38      	pop	{r3, r4, r5, pc}
 80124bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80124be:	b112      	cbz	r2, 80124c6 <_raise_r+0x1e>
 80124c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80124c4:	b94b      	cbnz	r3, 80124da <_raise_r+0x32>
 80124c6:	4620      	mov	r0, r4
 80124c8:	f000 f830 	bl	801252c <_getpid_r>
 80124cc:	462a      	mov	r2, r5
 80124ce:	4601      	mov	r1, r0
 80124d0:	4620      	mov	r0, r4
 80124d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124d6:	f000 b817 	b.w	8012508 <_kill_r>
 80124da:	2b01      	cmp	r3, #1
 80124dc:	d00a      	beq.n	80124f4 <_raise_r+0x4c>
 80124de:	1c59      	adds	r1, r3, #1
 80124e0:	d103      	bne.n	80124ea <_raise_r+0x42>
 80124e2:	2316      	movs	r3, #22
 80124e4:	6003      	str	r3, [r0, #0]
 80124e6:	2001      	movs	r0, #1
 80124e8:	e7e7      	b.n	80124ba <_raise_r+0x12>
 80124ea:	2400      	movs	r4, #0
 80124ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80124f0:	4628      	mov	r0, r5
 80124f2:	4798      	blx	r3
 80124f4:	2000      	movs	r0, #0
 80124f6:	e7e0      	b.n	80124ba <_raise_r+0x12>

080124f8 <raise>:
 80124f8:	4b02      	ldr	r3, [pc, #8]	; (8012504 <raise+0xc>)
 80124fa:	4601      	mov	r1, r0
 80124fc:	6818      	ldr	r0, [r3, #0]
 80124fe:	f7ff bfd3 	b.w	80124a8 <_raise_r>
 8012502:	bf00      	nop
 8012504:	2000001c 	.word	0x2000001c

08012508 <_kill_r>:
 8012508:	b538      	push	{r3, r4, r5, lr}
 801250a:	4d07      	ldr	r5, [pc, #28]	; (8012528 <_kill_r+0x20>)
 801250c:	2300      	movs	r3, #0
 801250e:	4604      	mov	r4, r0
 8012510:	4608      	mov	r0, r1
 8012512:	4611      	mov	r1, r2
 8012514:	602b      	str	r3, [r5, #0]
 8012516:	f7f1 ffe5 	bl	80044e4 <_kill>
 801251a:	1c43      	adds	r3, r0, #1
 801251c:	d102      	bne.n	8012524 <_kill_r+0x1c>
 801251e:	682b      	ldr	r3, [r5, #0]
 8012520:	b103      	cbz	r3, 8012524 <_kill_r+0x1c>
 8012522:	6023      	str	r3, [r4, #0]
 8012524:	bd38      	pop	{r3, r4, r5, pc}
 8012526:	bf00      	nop
 8012528:	2000b724 	.word	0x2000b724

0801252c <_getpid_r>:
 801252c:	f7f1 bfd2 	b.w	80044d4 <_getpid>

08012530 <atan>:
 8012530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012534:	ec55 4b10 	vmov	r4, r5, d0
 8012538:	4bc3      	ldr	r3, [pc, #780]	; (8012848 <atan+0x318>)
 801253a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801253e:	429e      	cmp	r6, r3
 8012540:	46ab      	mov	fp, r5
 8012542:	dd18      	ble.n	8012576 <atan+0x46>
 8012544:	4bc1      	ldr	r3, [pc, #772]	; (801284c <atan+0x31c>)
 8012546:	429e      	cmp	r6, r3
 8012548:	dc01      	bgt.n	801254e <atan+0x1e>
 801254a:	d109      	bne.n	8012560 <atan+0x30>
 801254c:	b144      	cbz	r4, 8012560 <atan+0x30>
 801254e:	4622      	mov	r2, r4
 8012550:	462b      	mov	r3, r5
 8012552:	4620      	mov	r0, r4
 8012554:	4629      	mov	r1, r5
 8012556:	f7ed fea1 	bl	800029c <__adddf3>
 801255a:	4604      	mov	r4, r0
 801255c:	460d      	mov	r5, r1
 801255e:	e006      	b.n	801256e <atan+0x3e>
 8012560:	f1bb 0f00 	cmp.w	fp, #0
 8012564:	f300 8131 	bgt.w	80127ca <atan+0x29a>
 8012568:	a59b      	add	r5, pc, #620	; (adr r5, 80127d8 <atan+0x2a8>)
 801256a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801256e:	ec45 4b10 	vmov	d0, r4, r5
 8012572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012576:	4bb6      	ldr	r3, [pc, #728]	; (8012850 <atan+0x320>)
 8012578:	429e      	cmp	r6, r3
 801257a:	dc14      	bgt.n	80125a6 <atan+0x76>
 801257c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012580:	429e      	cmp	r6, r3
 8012582:	dc0d      	bgt.n	80125a0 <atan+0x70>
 8012584:	a396      	add	r3, pc, #600	; (adr r3, 80127e0 <atan+0x2b0>)
 8012586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801258a:	ee10 0a10 	vmov	r0, s0
 801258e:	4629      	mov	r1, r5
 8012590:	f7ed fe84 	bl	800029c <__adddf3>
 8012594:	4baf      	ldr	r3, [pc, #700]	; (8012854 <atan+0x324>)
 8012596:	2200      	movs	r2, #0
 8012598:	f7ee fac6 	bl	8000b28 <__aeabi_dcmpgt>
 801259c:	2800      	cmp	r0, #0
 801259e:	d1e6      	bne.n	801256e <atan+0x3e>
 80125a0:	f04f 3aff 	mov.w	sl, #4294967295
 80125a4:	e02b      	b.n	80125fe <atan+0xce>
 80125a6:	f000 f9b3 	bl	8012910 <fabs>
 80125aa:	4bab      	ldr	r3, [pc, #684]	; (8012858 <atan+0x328>)
 80125ac:	429e      	cmp	r6, r3
 80125ae:	ec55 4b10 	vmov	r4, r5, d0
 80125b2:	f300 80bf 	bgt.w	8012734 <atan+0x204>
 80125b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80125ba:	429e      	cmp	r6, r3
 80125bc:	f300 80a0 	bgt.w	8012700 <atan+0x1d0>
 80125c0:	ee10 2a10 	vmov	r2, s0
 80125c4:	ee10 0a10 	vmov	r0, s0
 80125c8:	462b      	mov	r3, r5
 80125ca:	4629      	mov	r1, r5
 80125cc:	f7ed fe66 	bl	800029c <__adddf3>
 80125d0:	4ba0      	ldr	r3, [pc, #640]	; (8012854 <atan+0x324>)
 80125d2:	2200      	movs	r2, #0
 80125d4:	f7ed fe60 	bl	8000298 <__aeabi_dsub>
 80125d8:	2200      	movs	r2, #0
 80125da:	4606      	mov	r6, r0
 80125dc:	460f      	mov	r7, r1
 80125de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80125e2:	4620      	mov	r0, r4
 80125e4:	4629      	mov	r1, r5
 80125e6:	f7ed fe59 	bl	800029c <__adddf3>
 80125ea:	4602      	mov	r2, r0
 80125ec:	460b      	mov	r3, r1
 80125ee:	4630      	mov	r0, r6
 80125f0:	4639      	mov	r1, r7
 80125f2:	f7ee f933 	bl	800085c <__aeabi_ddiv>
 80125f6:	f04f 0a00 	mov.w	sl, #0
 80125fa:	4604      	mov	r4, r0
 80125fc:	460d      	mov	r5, r1
 80125fe:	4622      	mov	r2, r4
 8012600:	462b      	mov	r3, r5
 8012602:	4620      	mov	r0, r4
 8012604:	4629      	mov	r1, r5
 8012606:	f7ed ffff 	bl	8000608 <__aeabi_dmul>
 801260a:	4602      	mov	r2, r0
 801260c:	460b      	mov	r3, r1
 801260e:	4680      	mov	r8, r0
 8012610:	4689      	mov	r9, r1
 8012612:	f7ed fff9 	bl	8000608 <__aeabi_dmul>
 8012616:	a374      	add	r3, pc, #464	; (adr r3, 80127e8 <atan+0x2b8>)
 8012618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801261c:	4606      	mov	r6, r0
 801261e:	460f      	mov	r7, r1
 8012620:	f7ed fff2 	bl	8000608 <__aeabi_dmul>
 8012624:	a372      	add	r3, pc, #456	; (adr r3, 80127f0 <atan+0x2c0>)
 8012626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801262a:	f7ed fe37 	bl	800029c <__adddf3>
 801262e:	4632      	mov	r2, r6
 8012630:	463b      	mov	r3, r7
 8012632:	f7ed ffe9 	bl	8000608 <__aeabi_dmul>
 8012636:	a370      	add	r3, pc, #448	; (adr r3, 80127f8 <atan+0x2c8>)
 8012638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801263c:	f7ed fe2e 	bl	800029c <__adddf3>
 8012640:	4632      	mov	r2, r6
 8012642:	463b      	mov	r3, r7
 8012644:	f7ed ffe0 	bl	8000608 <__aeabi_dmul>
 8012648:	a36d      	add	r3, pc, #436	; (adr r3, 8012800 <atan+0x2d0>)
 801264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264e:	f7ed fe25 	bl	800029c <__adddf3>
 8012652:	4632      	mov	r2, r6
 8012654:	463b      	mov	r3, r7
 8012656:	f7ed ffd7 	bl	8000608 <__aeabi_dmul>
 801265a:	a36b      	add	r3, pc, #428	; (adr r3, 8012808 <atan+0x2d8>)
 801265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012660:	f7ed fe1c 	bl	800029c <__adddf3>
 8012664:	4632      	mov	r2, r6
 8012666:	463b      	mov	r3, r7
 8012668:	f7ed ffce 	bl	8000608 <__aeabi_dmul>
 801266c:	a368      	add	r3, pc, #416	; (adr r3, 8012810 <atan+0x2e0>)
 801266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012672:	f7ed fe13 	bl	800029c <__adddf3>
 8012676:	4642      	mov	r2, r8
 8012678:	464b      	mov	r3, r9
 801267a:	f7ed ffc5 	bl	8000608 <__aeabi_dmul>
 801267e:	a366      	add	r3, pc, #408	; (adr r3, 8012818 <atan+0x2e8>)
 8012680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012684:	4680      	mov	r8, r0
 8012686:	4689      	mov	r9, r1
 8012688:	4630      	mov	r0, r6
 801268a:	4639      	mov	r1, r7
 801268c:	f7ed ffbc 	bl	8000608 <__aeabi_dmul>
 8012690:	a363      	add	r3, pc, #396	; (adr r3, 8012820 <atan+0x2f0>)
 8012692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012696:	f7ed fdff 	bl	8000298 <__aeabi_dsub>
 801269a:	4632      	mov	r2, r6
 801269c:	463b      	mov	r3, r7
 801269e:	f7ed ffb3 	bl	8000608 <__aeabi_dmul>
 80126a2:	a361      	add	r3, pc, #388	; (adr r3, 8012828 <atan+0x2f8>)
 80126a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a8:	f7ed fdf6 	bl	8000298 <__aeabi_dsub>
 80126ac:	4632      	mov	r2, r6
 80126ae:	463b      	mov	r3, r7
 80126b0:	f7ed ffaa 	bl	8000608 <__aeabi_dmul>
 80126b4:	a35e      	add	r3, pc, #376	; (adr r3, 8012830 <atan+0x300>)
 80126b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ba:	f7ed fded 	bl	8000298 <__aeabi_dsub>
 80126be:	4632      	mov	r2, r6
 80126c0:	463b      	mov	r3, r7
 80126c2:	f7ed ffa1 	bl	8000608 <__aeabi_dmul>
 80126c6:	a35c      	add	r3, pc, #368	; (adr r3, 8012838 <atan+0x308>)
 80126c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126cc:	f7ed fde4 	bl	8000298 <__aeabi_dsub>
 80126d0:	4632      	mov	r2, r6
 80126d2:	463b      	mov	r3, r7
 80126d4:	f7ed ff98 	bl	8000608 <__aeabi_dmul>
 80126d8:	4602      	mov	r2, r0
 80126da:	460b      	mov	r3, r1
 80126dc:	4640      	mov	r0, r8
 80126de:	4649      	mov	r1, r9
 80126e0:	f7ed fddc 	bl	800029c <__adddf3>
 80126e4:	4622      	mov	r2, r4
 80126e6:	462b      	mov	r3, r5
 80126e8:	f7ed ff8e 	bl	8000608 <__aeabi_dmul>
 80126ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80126f0:	4602      	mov	r2, r0
 80126f2:	460b      	mov	r3, r1
 80126f4:	d14b      	bne.n	801278e <atan+0x25e>
 80126f6:	4620      	mov	r0, r4
 80126f8:	4629      	mov	r1, r5
 80126fa:	f7ed fdcd 	bl	8000298 <__aeabi_dsub>
 80126fe:	e72c      	b.n	801255a <atan+0x2a>
 8012700:	ee10 0a10 	vmov	r0, s0
 8012704:	4b53      	ldr	r3, [pc, #332]	; (8012854 <atan+0x324>)
 8012706:	2200      	movs	r2, #0
 8012708:	4629      	mov	r1, r5
 801270a:	f7ed fdc5 	bl	8000298 <__aeabi_dsub>
 801270e:	4b51      	ldr	r3, [pc, #324]	; (8012854 <atan+0x324>)
 8012710:	4606      	mov	r6, r0
 8012712:	460f      	mov	r7, r1
 8012714:	2200      	movs	r2, #0
 8012716:	4620      	mov	r0, r4
 8012718:	4629      	mov	r1, r5
 801271a:	f7ed fdbf 	bl	800029c <__adddf3>
 801271e:	4602      	mov	r2, r0
 8012720:	460b      	mov	r3, r1
 8012722:	4630      	mov	r0, r6
 8012724:	4639      	mov	r1, r7
 8012726:	f7ee f899 	bl	800085c <__aeabi_ddiv>
 801272a:	f04f 0a01 	mov.w	sl, #1
 801272e:	4604      	mov	r4, r0
 8012730:	460d      	mov	r5, r1
 8012732:	e764      	b.n	80125fe <atan+0xce>
 8012734:	4b49      	ldr	r3, [pc, #292]	; (801285c <atan+0x32c>)
 8012736:	429e      	cmp	r6, r3
 8012738:	da1d      	bge.n	8012776 <atan+0x246>
 801273a:	ee10 0a10 	vmov	r0, s0
 801273e:	4b48      	ldr	r3, [pc, #288]	; (8012860 <atan+0x330>)
 8012740:	2200      	movs	r2, #0
 8012742:	4629      	mov	r1, r5
 8012744:	f7ed fda8 	bl	8000298 <__aeabi_dsub>
 8012748:	4b45      	ldr	r3, [pc, #276]	; (8012860 <atan+0x330>)
 801274a:	4606      	mov	r6, r0
 801274c:	460f      	mov	r7, r1
 801274e:	2200      	movs	r2, #0
 8012750:	4620      	mov	r0, r4
 8012752:	4629      	mov	r1, r5
 8012754:	f7ed ff58 	bl	8000608 <__aeabi_dmul>
 8012758:	4b3e      	ldr	r3, [pc, #248]	; (8012854 <atan+0x324>)
 801275a:	2200      	movs	r2, #0
 801275c:	f7ed fd9e 	bl	800029c <__adddf3>
 8012760:	4602      	mov	r2, r0
 8012762:	460b      	mov	r3, r1
 8012764:	4630      	mov	r0, r6
 8012766:	4639      	mov	r1, r7
 8012768:	f7ee f878 	bl	800085c <__aeabi_ddiv>
 801276c:	f04f 0a02 	mov.w	sl, #2
 8012770:	4604      	mov	r4, r0
 8012772:	460d      	mov	r5, r1
 8012774:	e743      	b.n	80125fe <atan+0xce>
 8012776:	462b      	mov	r3, r5
 8012778:	ee10 2a10 	vmov	r2, s0
 801277c:	4939      	ldr	r1, [pc, #228]	; (8012864 <atan+0x334>)
 801277e:	2000      	movs	r0, #0
 8012780:	f7ee f86c 	bl	800085c <__aeabi_ddiv>
 8012784:	f04f 0a03 	mov.w	sl, #3
 8012788:	4604      	mov	r4, r0
 801278a:	460d      	mov	r5, r1
 801278c:	e737      	b.n	80125fe <atan+0xce>
 801278e:	4b36      	ldr	r3, [pc, #216]	; (8012868 <atan+0x338>)
 8012790:	4e36      	ldr	r6, [pc, #216]	; (801286c <atan+0x33c>)
 8012792:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012796:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801279a:	e9da 2300 	ldrd	r2, r3, [sl]
 801279e:	f7ed fd7b 	bl	8000298 <__aeabi_dsub>
 80127a2:	4622      	mov	r2, r4
 80127a4:	462b      	mov	r3, r5
 80127a6:	f7ed fd77 	bl	8000298 <__aeabi_dsub>
 80127aa:	4602      	mov	r2, r0
 80127ac:	460b      	mov	r3, r1
 80127ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 80127b2:	f7ed fd71 	bl	8000298 <__aeabi_dsub>
 80127b6:	f1bb 0f00 	cmp.w	fp, #0
 80127ba:	4604      	mov	r4, r0
 80127bc:	460d      	mov	r5, r1
 80127be:	f6bf aed6 	bge.w	801256e <atan+0x3e>
 80127c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127c6:	461d      	mov	r5, r3
 80127c8:	e6d1      	b.n	801256e <atan+0x3e>
 80127ca:	a51d      	add	r5, pc, #116	; (adr r5, 8012840 <atan+0x310>)
 80127cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80127d0:	e6cd      	b.n	801256e <atan+0x3e>
 80127d2:	bf00      	nop
 80127d4:	f3af 8000 	nop.w
 80127d8:	54442d18 	.word	0x54442d18
 80127dc:	bff921fb 	.word	0xbff921fb
 80127e0:	8800759c 	.word	0x8800759c
 80127e4:	7e37e43c 	.word	0x7e37e43c
 80127e8:	e322da11 	.word	0xe322da11
 80127ec:	3f90ad3a 	.word	0x3f90ad3a
 80127f0:	24760deb 	.word	0x24760deb
 80127f4:	3fa97b4b 	.word	0x3fa97b4b
 80127f8:	a0d03d51 	.word	0xa0d03d51
 80127fc:	3fb10d66 	.word	0x3fb10d66
 8012800:	c54c206e 	.word	0xc54c206e
 8012804:	3fb745cd 	.word	0x3fb745cd
 8012808:	920083ff 	.word	0x920083ff
 801280c:	3fc24924 	.word	0x3fc24924
 8012810:	5555550d 	.word	0x5555550d
 8012814:	3fd55555 	.word	0x3fd55555
 8012818:	2c6a6c2f 	.word	0x2c6a6c2f
 801281c:	bfa2b444 	.word	0xbfa2b444
 8012820:	52defd9a 	.word	0x52defd9a
 8012824:	3fadde2d 	.word	0x3fadde2d
 8012828:	af749a6d 	.word	0xaf749a6d
 801282c:	3fb3b0f2 	.word	0x3fb3b0f2
 8012830:	fe231671 	.word	0xfe231671
 8012834:	3fbc71c6 	.word	0x3fbc71c6
 8012838:	9998ebc4 	.word	0x9998ebc4
 801283c:	3fc99999 	.word	0x3fc99999
 8012840:	54442d18 	.word	0x54442d18
 8012844:	3ff921fb 	.word	0x3ff921fb
 8012848:	440fffff 	.word	0x440fffff
 801284c:	7ff00000 	.word	0x7ff00000
 8012850:	3fdbffff 	.word	0x3fdbffff
 8012854:	3ff00000 	.word	0x3ff00000
 8012858:	3ff2ffff 	.word	0x3ff2ffff
 801285c:	40038000 	.word	0x40038000
 8012860:	3ff80000 	.word	0x3ff80000
 8012864:	bff00000 	.word	0xbff00000
 8012868:	08014968 	.word	0x08014968
 801286c:	08014948 	.word	0x08014948

08012870 <cos>:
 8012870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012872:	ec53 2b10 	vmov	r2, r3, d0
 8012876:	4824      	ldr	r0, [pc, #144]	; (8012908 <cos+0x98>)
 8012878:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801287c:	4281      	cmp	r1, r0
 801287e:	dc06      	bgt.n	801288e <cos+0x1e>
 8012880:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8012900 <cos+0x90>
 8012884:	f000 fe34 	bl	80134f0 <__kernel_cos>
 8012888:	ec51 0b10 	vmov	r0, r1, d0
 801288c:	e007      	b.n	801289e <cos+0x2e>
 801288e:	481f      	ldr	r0, [pc, #124]	; (801290c <cos+0x9c>)
 8012890:	4281      	cmp	r1, r0
 8012892:	dd09      	ble.n	80128a8 <cos+0x38>
 8012894:	ee10 0a10 	vmov	r0, s0
 8012898:	4619      	mov	r1, r3
 801289a:	f7ed fcfd 	bl	8000298 <__aeabi_dsub>
 801289e:	ec41 0b10 	vmov	d0, r0, r1
 80128a2:	b005      	add	sp, #20
 80128a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80128a8:	4668      	mov	r0, sp
 80128aa:	f000 fb61 	bl	8012f70 <__ieee754_rem_pio2>
 80128ae:	f000 0003 	and.w	r0, r0, #3
 80128b2:	2801      	cmp	r0, #1
 80128b4:	d007      	beq.n	80128c6 <cos+0x56>
 80128b6:	2802      	cmp	r0, #2
 80128b8:	d012      	beq.n	80128e0 <cos+0x70>
 80128ba:	b9c0      	cbnz	r0, 80128ee <cos+0x7e>
 80128bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80128c0:	ed9d 0b00 	vldr	d0, [sp]
 80128c4:	e7de      	b.n	8012884 <cos+0x14>
 80128c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80128ca:	ed9d 0b00 	vldr	d0, [sp]
 80128ce:	f001 fa17 	bl	8013d00 <__kernel_sin>
 80128d2:	ec53 2b10 	vmov	r2, r3, d0
 80128d6:	ee10 0a10 	vmov	r0, s0
 80128da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80128de:	e7de      	b.n	801289e <cos+0x2e>
 80128e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80128e4:	ed9d 0b00 	vldr	d0, [sp]
 80128e8:	f000 fe02 	bl	80134f0 <__kernel_cos>
 80128ec:	e7f1      	b.n	80128d2 <cos+0x62>
 80128ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80128f2:	ed9d 0b00 	vldr	d0, [sp]
 80128f6:	2001      	movs	r0, #1
 80128f8:	f001 fa02 	bl	8013d00 <__kernel_sin>
 80128fc:	e7c4      	b.n	8012888 <cos+0x18>
 80128fe:	bf00      	nop
	...
 8012908:	3fe921fb 	.word	0x3fe921fb
 801290c:	7fefffff 	.word	0x7fefffff

08012910 <fabs>:
 8012910:	ec51 0b10 	vmov	r0, r1, d0
 8012914:	ee10 2a10 	vmov	r2, s0
 8012918:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801291c:	ec43 2b10 	vmov	d0, r2, r3
 8012920:	4770      	bx	lr
 8012922:	0000      	movs	r0, r0
 8012924:	0000      	movs	r0, r0
	...

08012928 <sin>:
 8012928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801292a:	ec53 2b10 	vmov	r2, r3, d0
 801292e:	4826      	ldr	r0, [pc, #152]	; (80129c8 <sin+0xa0>)
 8012930:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012934:	4281      	cmp	r1, r0
 8012936:	dc07      	bgt.n	8012948 <sin+0x20>
 8012938:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80129c0 <sin+0x98>
 801293c:	2000      	movs	r0, #0
 801293e:	f001 f9df 	bl	8013d00 <__kernel_sin>
 8012942:	ec51 0b10 	vmov	r0, r1, d0
 8012946:	e007      	b.n	8012958 <sin+0x30>
 8012948:	4820      	ldr	r0, [pc, #128]	; (80129cc <sin+0xa4>)
 801294a:	4281      	cmp	r1, r0
 801294c:	dd09      	ble.n	8012962 <sin+0x3a>
 801294e:	ee10 0a10 	vmov	r0, s0
 8012952:	4619      	mov	r1, r3
 8012954:	f7ed fca0 	bl	8000298 <__aeabi_dsub>
 8012958:	ec41 0b10 	vmov	d0, r0, r1
 801295c:	b005      	add	sp, #20
 801295e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012962:	4668      	mov	r0, sp
 8012964:	f000 fb04 	bl	8012f70 <__ieee754_rem_pio2>
 8012968:	f000 0003 	and.w	r0, r0, #3
 801296c:	2801      	cmp	r0, #1
 801296e:	d008      	beq.n	8012982 <sin+0x5a>
 8012970:	2802      	cmp	r0, #2
 8012972:	d00d      	beq.n	8012990 <sin+0x68>
 8012974:	b9d0      	cbnz	r0, 80129ac <sin+0x84>
 8012976:	ed9d 1b02 	vldr	d1, [sp, #8]
 801297a:	ed9d 0b00 	vldr	d0, [sp]
 801297e:	2001      	movs	r0, #1
 8012980:	e7dd      	b.n	801293e <sin+0x16>
 8012982:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012986:	ed9d 0b00 	vldr	d0, [sp]
 801298a:	f000 fdb1 	bl	80134f0 <__kernel_cos>
 801298e:	e7d8      	b.n	8012942 <sin+0x1a>
 8012990:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012994:	ed9d 0b00 	vldr	d0, [sp]
 8012998:	2001      	movs	r0, #1
 801299a:	f001 f9b1 	bl	8013d00 <__kernel_sin>
 801299e:	ec53 2b10 	vmov	r2, r3, d0
 80129a2:	ee10 0a10 	vmov	r0, s0
 80129a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80129aa:	e7d5      	b.n	8012958 <sin+0x30>
 80129ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80129b0:	ed9d 0b00 	vldr	d0, [sp]
 80129b4:	f000 fd9c 	bl	80134f0 <__kernel_cos>
 80129b8:	e7f1      	b.n	801299e <sin+0x76>
 80129ba:	bf00      	nop
 80129bc:	f3af 8000 	nop.w
	...
 80129c8:	3fe921fb 	.word	0x3fe921fb
 80129cc:	7fefffff 	.word	0x7fefffff

080129d0 <acos>:
 80129d0:	b538      	push	{r3, r4, r5, lr}
 80129d2:	ed2d 8b02 	vpush	{d8}
 80129d6:	ec55 4b10 	vmov	r4, r5, d0
 80129da:	f000 f869 	bl	8012ab0 <__ieee754_acos>
 80129de:	4b16      	ldr	r3, [pc, #88]	; (8012a38 <acos+0x68>)
 80129e0:	eeb0 8a40 	vmov.f32	s16, s0
 80129e4:	eef0 8a60 	vmov.f32	s17, s1
 80129e8:	f993 3000 	ldrsb.w	r3, [r3]
 80129ec:	3301      	adds	r3, #1
 80129ee:	d01c      	beq.n	8012a2a <acos+0x5a>
 80129f0:	4622      	mov	r2, r4
 80129f2:	462b      	mov	r3, r5
 80129f4:	4620      	mov	r0, r4
 80129f6:	4629      	mov	r1, r5
 80129f8:	f7ee f8a0 	bl	8000b3c <__aeabi_dcmpun>
 80129fc:	b9a8      	cbnz	r0, 8012a2a <acos+0x5a>
 80129fe:	ec45 4b10 	vmov	d0, r4, r5
 8012a02:	f7ff ff85 	bl	8012910 <fabs>
 8012a06:	4b0d      	ldr	r3, [pc, #52]	; (8012a3c <acos+0x6c>)
 8012a08:	ec51 0b10 	vmov	r0, r1, d0
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	f7ee f88b 	bl	8000b28 <__aeabi_dcmpgt>
 8012a12:	b150      	cbz	r0, 8012a2a <acos+0x5a>
 8012a14:	f7fc ff6e 	bl	800f8f4 <__errno>
 8012a18:	ecbd 8b02 	vpop	{d8}
 8012a1c:	2321      	movs	r3, #33	; 0x21
 8012a1e:	6003      	str	r3, [r0, #0]
 8012a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a24:	4806      	ldr	r0, [pc, #24]	; (8012a40 <acos+0x70>)
 8012a26:	f001 baab 	b.w	8013f80 <nan>
 8012a2a:	eeb0 0a48 	vmov.f32	s0, s16
 8012a2e:	eef0 0a68 	vmov.f32	s1, s17
 8012a32:	ecbd 8b02 	vpop	{d8}
 8012a36:	bd38      	pop	{r3, r4, r5, pc}
 8012a38:	200001ec 	.word	0x200001ec
 8012a3c:	3ff00000 	.word	0x3ff00000
 8012a40:	08014938 	.word	0x08014938

08012a44 <sqrt>:
 8012a44:	b538      	push	{r3, r4, r5, lr}
 8012a46:	ed2d 8b02 	vpush	{d8}
 8012a4a:	ec55 4b10 	vmov	r4, r5, d0
 8012a4e:	f000 fc99 	bl	8013384 <__ieee754_sqrt>
 8012a52:	4b15      	ldr	r3, [pc, #84]	; (8012aa8 <sqrt+0x64>)
 8012a54:	eeb0 8a40 	vmov.f32	s16, s0
 8012a58:	eef0 8a60 	vmov.f32	s17, s1
 8012a5c:	f993 3000 	ldrsb.w	r3, [r3]
 8012a60:	3301      	adds	r3, #1
 8012a62:	d019      	beq.n	8012a98 <sqrt+0x54>
 8012a64:	4622      	mov	r2, r4
 8012a66:	462b      	mov	r3, r5
 8012a68:	4620      	mov	r0, r4
 8012a6a:	4629      	mov	r1, r5
 8012a6c:	f7ee f866 	bl	8000b3c <__aeabi_dcmpun>
 8012a70:	b990      	cbnz	r0, 8012a98 <sqrt+0x54>
 8012a72:	2200      	movs	r2, #0
 8012a74:	2300      	movs	r3, #0
 8012a76:	4620      	mov	r0, r4
 8012a78:	4629      	mov	r1, r5
 8012a7a:	f7ee f837 	bl	8000aec <__aeabi_dcmplt>
 8012a7e:	b158      	cbz	r0, 8012a98 <sqrt+0x54>
 8012a80:	f7fc ff38 	bl	800f8f4 <__errno>
 8012a84:	2321      	movs	r3, #33	; 0x21
 8012a86:	6003      	str	r3, [r0, #0]
 8012a88:	2200      	movs	r2, #0
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	4610      	mov	r0, r2
 8012a8e:	4619      	mov	r1, r3
 8012a90:	f7ed fee4 	bl	800085c <__aeabi_ddiv>
 8012a94:	ec41 0b18 	vmov	d8, r0, r1
 8012a98:	eeb0 0a48 	vmov.f32	s0, s16
 8012a9c:	eef0 0a68 	vmov.f32	s1, s17
 8012aa0:	ecbd 8b02 	vpop	{d8}
 8012aa4:	bd38      	pop	{r3, r4, r5, pc}
 8012aa6:	bf00      	nop
 8012aa8:	200001ec 	.word	0x200001ec
 8012aac:	00000000 	.word	0x00000000

08012ab0 <__ieee754_acos>:
 8012ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ab4:	ec55 4b10 	vmov	r4, r5, d0
 8012ab8:	49b7      	ldr	r1, [pc, #732]	; (8012d98 <__ieee754_acos+0x2e8>)
 8012aba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012abe:	428b      	cmp	r3, r1
 8012ac0:	dd1b      	ble.n	8012afa <__ieee754_acos+0x4a>
 8012ac2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8012ac6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012aca:	4323      	orrs	r3, r4
 8012acc:	d106      	bne.n	8012adc <__ieee754_acos+0x2c>
 8012ace:	2d00      	cmp	r5, #0
 8012ad0:	f300 8211 	bgt.w	8012ef6 <__ieee754_acos+0x446>
 8012ad4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8012d30 <__ieee754_acos+0x280>
 8012ad8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012adc:	ee10 2a10 	vmov	r2, s0
 8012ae0:	462b      	mov	r3, r5
 8012ae2:	ee10 0a10 	vmov	r0, s0
 8012ae6:	4629      	mov	r1, r5
 8012ae8:	f7ed fbd6 	bl	8000298 <__aeabi_dsub>
 8012aec:	4602      	mov	r2, r0
 8012aee:	460b      	mov	r3, r1
 8012af0:	f7ed feb4 	bl	800085c <__aeabi_ddiv>
 8012af4:	ec41 0b10 	vmov	d0, r0, r1
 8012af8:	e7ee      	b.n	8012ad8 <__ieee754_acos+0x28>
 8012afa:	49a8      	ldr	r1, [pc, #672]	; (8012d9c <__ieee754_acos+0x2ec>)
 8012afc:	428b      	cmp	r3, r1
 8012afe:	f300 8087 	bgt.w	8012c10 <__ieee754_acos+0x160>
 8012b02:	4aa7      	ldr	r2, [pc, #668]	; (8012da0 <__ieee754_acos+0x2f0>)
 8012b04:	4293      	cmp	r3, r2
 8012b06:	f340 81f9 	ble.w	8012efc <__ieee754_acos+0x44c>
 8012b0a:	ee10 2a10 	vmov	r2, s0
 8012b0e:	ee10 0a10 	vmov	r0, s0
 8012b12:	462b      	mov	r3, r5
 8012b14:	4629      	mov	r1, r5
 8012b16:	f7ed fd77 	bl	8000608 <__aeabi_dmul>
 8012b1a:	a387      	add	r3, pc, #540	; (adr r3, 8012d38 <__ieee754_acos+0x288>)
 8012b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b20:	4606      	mov	r6, r0
 8012b22:	460f      	mov	r7, r1
 8012b24:	f7ed fd70 	bl	8000608 <__aeabi_dmul>
 8012b28:	a385      	add	r3, pc, #532	; (adr r3, 8012d40 <__ieee754_acos+0x290>)
 8012b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2e:	f7ed fbb5 	bl	800029c <__adddf3>
 8012b32:	4632      	mov	r2, r6
 8012b34:	463b      	mov	r3, r7
 8012b36:	f7ed fd67 	bl	8000608 <__aeabi_dmul>
 8012b3a:	a383      	add	r3, pc, #524	; (adr r3, 8012d48 <__ieee754_acos+0x298>)
 8012b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b40:	f7ed fbaa 	bl	8000298 <__aeabi_dsub>
 8012b44:	4632      	mov	r2, r6
 8012b46:	463b      	mov	r3, r7
 8012b48:	f7ed fd5e 	bl	8000608 <__aeabi_dmul>
 8012b4c:	a380      	add	r3, pc, #512	; (adr r3, 8012d50 <__ieee754_acos+0x2a0>)
 8012b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b52:	f7ed fba3 	bl	800029c <__adddf3>
 8012b56:	4632      	mov	r2, r6
 8012b58:	463b      	mov	r3, r7
 8012b5a:	f7ed fd55 	bl	8000608 <__aeabi_dmul>
 8012b5e:	a37e      	add	r3, pc, #504	; (adr r3, 8012d58 <__ieee754_acos+0x2a8>)
 8012b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b64:	f7ed fb98 	bl	8000298 <__aeabi_dsub>
 8012b68:	4632      	mov	r2, r6
 8012b6a:	463b      	mov	r3, r7
 8012b6c:	f7ed fd4c 	bl	8000608 <__aeabi_dmul>
 8012b70:	a37b      	add	r3, pc, #492	; (adr r3, 8012d60 <__ieee754_acos+0x2b0>)
 8012b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b76:	f7ed fb91 	bl	800029c <__adddf3>
 8012b7a:	4632      	mov	r2, r6
 8012b7c:	463b      	mov	r3, r7
 8012b7e:	f7ed fd43 	bl	8000608 <__aeabi_dmul>
 8012b82:	a379      	add	r3, pc, #484	; (adr r3, 8012d68 <__ieee754_acos+0x2b8>)
 8012b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b88:	4680      	mov	r8, r0
 8012b8a:	4689      	mov	r9, r1
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	4639      	mov	r1, r7
 8012b90:	f7ed fd3a 	bl	8000608 <__aeabi_dmul>
 8012b94:	a376      	add	r3, pc, #472	; (adr r3, 8012d70 <__ieee754_acos+0x2c0>)
 8012b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b9a:	f7ed fb7d 	bl	8000298 <__aeabi_dsub>
 8012b9e:	4632      	mov	r2, r6
 8012ba0:	463b      	mov	r3, r7
 8012ba2:	f7ed fd31 	bl	8000608 <__aeabi_dmul>
 8012ba6:	a374      	add	r3, pc, #464	; (adr r3, 8012d78 <__ieee754_acos+0x2c8>)
 8012ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bac:	f7ed fb76 	bl	800029c <__adddf3>
 8012bb0:	4632      	mov	r2, r6
 8012bb2:	463b      	mov	r3, r7
 8012bb4:	f7ed fd28 	bl	8000608 <__aeabi_dmul>
 8012bb8:	a371      	add	r3, pc, #452	; (adr r3, 8012d80 <__ieee754_acos+0x2d0>)
 8012bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bbe:	f7ed fb6b 	bl	8000298 <__aeabi_dsub>
 8012bc2:	4632      	mov	r2, r6
 8012bc4:	463b      	mov	r3, r7
 8012bc6:	f7ed fd1f 	bl	8000608 <__aeabi_dmul>
 8012bca:	4b76      	ldr	r3, [pc, #472]	; (8012da4 <__ieee754_acos+0x2f4>)
 8012bcc:	2200      	movs	r2, #0
 8012bce:	f7ed fb65 	bl	800029c <__adddf3>
 8012bd2:	4602      	mov	r2, r0
 8012bd4:	460b      	mov	r3, r1
 8012bd6:	4640      	mov	r0, r8
 8012bd8:	4649      	mov	r1, r9
 8012bda:	f7ed fe3f 	bl	800085c <__aeabi_ddiv>
 8012bde:	4622      	mov	r2, r4
 8012be0:	462b      	mov	r3, r5
 8012be2:	f7ed fd11 	bl	8000608 <__aeabi_dmul>
 8012be6:	4602      	mov	r2, r0
 8012be8:	460b      	mov	r3, r1
 8012bea:	a167      	add	r1, pc, #412	; (adr r1, 8012d88 <__ieee754_acos+0x2d8>)
 8012bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012bf0:	f7ed fb52 	bl	8000298 <__aeabi_dsub>
 8012bf4:	4602      	mov	r2, r0
 8012bf6:	460b      	mov	r3, r1
 8012bf8:	4620      	mov	r0, r4
 8012bfa:	4629      	mov	r1, r5
 8012bfc:	f7ed fb4c 	bl	8000298 <__aeabi_dsub>
 8012c00:	4602      	mov	r2, r0
 8012c02:	460b      	mov	r3, r1
 8012c04:	a162      	add	r1, pc, #392	; (adr r1, 8012d90 <__ieee754_acos+0x2e0>)
 8012c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c0a:	f7ed fb45 	bl	8000298 <__aeabi_dsub>
 8012c0e:	e771      	b.n	8012af4 <__ieee754_acos+0x44>
 8012c10:	2d00      	cmp	r5, #0
 8012c12:	f280 80cb 	bge.w	8012dac <__ieee754_acos+0x2fc>
 8012c16:	ee10 0a10 	vmov	r0, s0
 8012c1a:	4b62      	ldr	r3, [pc, #392]	; (8012da4 <__ieee754_acos+0x2f4>)
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	4629      	mov	r1, r5
 8012c20:	f7ed fb3c 	bl	800029c <__adddf3>
 8012c24:	4b60      	ldr	r3, [pc, #384]	; (8012da8 <__ieee754_acos+0x2f8>)
 8012c26:	2200      	movs	r2, #0
 8012c28:	f7ed fcee 	bl	8000608 <__aeabi_dmul>
 8012c2c:	a342      	add	r3, pc, #264	; (adr r3, 8012d38 <__ieee754_acos+0x288>)
 8012c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c32:	4604      	mov	r4, r0
 8012c34:	460d      	mov	r5, r1
 8012c36:	f7ed fce7 	bl	8000608 <__aeabi_dmul>
 8012c3a:	a341      	add	r3, pc, #260	; (adr r3, 8012d40 <__ieee754_acos+0x290>)
 8012c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c40:	f7ed fb2c 	bl	800029c <__adddf3>
 8012c44:	4622      	mov	r2, r4
 8012c46:	462b      	mov	r3, r5
 8012c48:	f7ed fcde 	bl	8000608 <__aeabi_dmul>
 8012c4c:	a33e      	add	r3, pc, #248	; (adr r3, 8012d48 <__ieee754_acos+0x298>)
 8012c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c52:	f7ed fb21 	bl	8000298 <__aeabi_dsub>
 8012c56:	4622      	mov	r2, r4
 8012c58:	462b      	mov	r3, r5
 8012c5a:	f7ed fcd5 	bl	8000608 <__aeabi_dmul>
 8012c5e:	a33c      	add	r3, pc, #240	; (adr r3, 8012d50 <__ieee754_acos+0x2a0>)
 8012c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c64:	f7ed fb1a 	bl	800029c <__adddf3>
 8012c68:	4622      	mov	r2, r4
 8012c6a:	462b      	mov	r3, r5
 8012c6c:	f7ed fccc 	bl	8000608 <__aeabi_dmul>
 8012c70:	a339      	add	r3, pc, #228	; (adr r3, 8012d58 <__ieee754_acos+0x2a8>)
 8012c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c76:	f7ed fb0f 	bl	8000298 <__aeabi_dsub>
 8012c7a:	4622      	mov	r2, r4
 8012c7c:	462b      	mov	r3, r5
 8012c7e:	f7ed fcc3 	bl	8000608 <__aeabi_dmul>
 8012c82:	a337      	add	r3, pc, #220	; (adr r3, 8012d60 <__ieee754_acos+0x2b0>)
 8012c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c88:	f7ed fb08 	bl	800029c <__adddf3>
 8012c8c:	4622      	mov	r2, r4
 8012c8e:	462b      	mov	r3, r5
 8012c90:	f7ed fcba 	bl	8000608 <__aeabi_dmul>
 8012c94:	ec45 4b10 	vmov	d0, r4, r5
 8012c98:	4680      	mov	r8, r0
 8012c9a:	4689      	mov	r9, r1
 8012c9c:	f000 fb72 	bl	8013384 <__ieee754_sqrt>
 8012ca0:	a331      	add	r3, pc, #196	; (adr r3, 8012d68 <__ieee754_acos+0x2b8>)
 8012ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	4629      	mov	r1, r5
 8012caa:	ec57 6b10 	vmov	r6, r7, d0
 8012cae:	f7ed fcab 	bl	8000608 <__aeabi_dmul>
 8012cb2:	a32f      	add	r3, pc, #188	; (adr r3, 8012d70 <__ieee754_acos+0x2c0>)
 8012cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb8:	f7ed faee 	bl	8000298 <__aeabi_dsub>
 8012cbc:	4622      	mov	r2, r4
 8012cbe:	462b      	mov	r3, r5
 8012cc0:	f7ed fca2 	bl	8000608 <__aeabi_dmul>
 8012cc4:	a32c      	add	r3, pc, #176	; (adr r3, 8012d78 <__ieee754_acos+0x2c8>)
 8012cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cca:	f7ed fae7 	bl	800029c <__adddf3>
 8012cce:	4622      	mov	r2, r4
 8012cd0:	462b      	mov	r3, r5
 8012cd2:	f7ed fc99 	bl	8000608 <__aeabi_dmul>
 8012cd6:	a32a      	add	r3, pc, #168	; (adr r3, 8012d80 <__ieee754_acos+0x2d0>)
 8012cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cdc:	f7ed fadc 	bl	8000298 <__aeabi_dsub>
 8012ce0:	4622      	mov	r2, r4
 8012ce2:	462b      	mov	r3, r5
 8012ce4:	f7ed fc90 	bl	8000608 <__aeabi_dmul>
 8012ce8:	4b2e      	ldr	r3, [pc, #184]	; (8012da4 <__ieee754_acos+0x2f4>)
 8012cea:	2200      	movs	r2, #0
 8012cec:	f7ed fad6 	bl	800029c <__adddf3>
 8012cf0:	4602      	mov	r2, r0
 8012cf2:	460b      	mov	r3, r1
 8012cf4:	4640      	mov	r0, r8
 8012cf6:	4649      	mov	r1, r9
 8012cf8:	f7ed fdb0 	bl	800085c <__aeabi_ddiv>
 8012cfc:	4632      	mov	r2, r6
 8012cfe:	463b      	mov	r3, r7
 8012d00:	f7ed fc82 	bl	8000608 <__aeabi_dmul>
 8012d04:	a320      	add	r3, pc, #128	; (adr r3, 8012d88 <__ieee754_acos+0x2d8>)
 8012d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d0a:	f7ed fac5 	bl	8000298 <__aeabi_dsub>
 8012d0e:	4632      	mov	r2, r6
 8012d10:	463b      	mov	r3, r7
 8012d12:	f7ed fac3 	bl	800029c <__adddf3>
 8012d16:	4602      	mov	r2, r0
 8012d18:	460b      	mov	r3, r1
 8012d1a:	f7ed fabf 	bl	800029c <__adddf3>
 8012d1e:	4602      	mov	r2, r0
 8012d20:	460b      	mov	r3, r1
 8012d22:	a103      	add	r1, pc, #12	; (adr r1, 8012d30 <__ieee754_acos+0x280>)
 8012d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d28:	e76f      	b.n	8012c0a <__ieee754_acos+0x15a>
 8012d2a:	bf00      	nop
 8012d2c:	f3af 8000 	nop.w
 8012d30:	54442d18 	.word	0x54442d18
 8012d34:	400921fb 	.word	0x400921fb
 8012d38:	0dfdf709 	.word	0x0dfdf709
 8012d3c:	3f023de1 	.word	0x3f023de1
 8012d40:	7501b288 	.word	0x7501b288
 8012d44:	3f49efe0 	.word	0x3f49efe0
 8012d48:	b5688f3b 	.word	0xb5688f3b
 8012d4c:	3fa48228 	.word	0x3fa48228
 8012d50:	0e884455 	.word	0x0e884455
 8012d54:	3fc9c155 	.word	0x3fc9c155
 8012d58:	03eb6f7d 	.word	0x03eb6f7d
 8012d5c:	3fd4d612 	.word	0x3fd4d612
 8012d60:	55555555 	.word	0x55555555
 8012d64:	3fc55555 	.word	0x3fc55555
 8012d68:	b12e9282 	.word	0xb12e9282
 8012d6c:	3fb3b8c5 	.word	0x3fb3b8c5
 8012d70:	1b8d0159 	.word	0x1b8d0159
 8012d74:	3fe6066c 	.word	0x3fe6066c
 8012d78:	9c598ac8 	.word	0x9c598ac8
 8012d7c:	40002ae5 	.word	0x40002ae5
 8012d80:	1c8a2d4b 	.word	0x1c8a2d4b
 8012d84:	40033a27 	.word	0x40033a27
 8012d88:	33145c07 	.word	0x33145c07
 8012d8c:	3c91a626 	.word	0x3c91a626
 8012d90:	54442d18 	.word	0x54442d18
 8012d94:	3ff921fb 	.word	0x3ff921fb
 8012d98:	3fefffff 	.word	0x3fefffff
 8012d9c:	3fdfffff 	.word	0x3fdfffff
 8012da0:	3c600000 	.word	0x3c600000
 8012da4:	3ff00000 	.word	0x3ff00000
 8012da8:	3fe00000 	.word	0x3fe00000
 8012dac:	ee10 2a10 	vmov	r2, s0
 8012db0:	462b      	mov	r3, r5
 8012db2:	496d      	ldr	r1, [pc, #436]	; (8012f68 <__ieee754_acos+0x4b8>)
 8012db4:	2000      	movs	r0, #0
 8012db6:	f7ed fa6f 	bl	8000298 <__aeabi_dsub>
 8012dba:	4b6c      	ldr	r3, [pc, #432]	; (8012f6c <__ieee754_acos+0x4bc>)
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	f7ed fc23 	bl	8000608 <__aeabi_dmul>
 8012dc2:	4604      	mov	r4, r0
 8012dc4:	460d      	mov	r5, r1
 8012dc6:	ec45 4b10 	vmov	d0, r4, r5
 8012dca:	f000 fadb 	bl	8013384 <__ieee754_sqrt>
 8012dce:	a34e      	add	r3, pc, #312	; (adr r3, 8012f08 <__ieee754_acos+0x458>)
 8012dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	4629      	mov	r1, r5
 8012dd8:	ec59 8b10 	vmov	r8, r9, d0
 8012ddc:	f7ed fc14 	bl	8000608 <__aeabi_dmul>
 8012de0:	a34b      	add	r3, pc, #300	; (adr r3, 8012f10 <__ieee754_acos+0x460>)
 8012de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de6:	f7ed fa59 	bl	800029c <__adddf3>
 8012dea:	4622      	mov	r2, r4
 8012dec:	462b      	mov	r3, r5
 8012dee:	f7ed fc0b 	bl	8000608 <__aeabi_dmul>
 8012df2:	a349      	add	r3, pc, #292	; (adr r3, 8012f18 <__ieee754_acos+0x468>)
 8012df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df8:	f7ed fa4e 	bl	8000298 <__aeabi_dsub>
 8012dfc:	4622      	mov	r2, r4
 8012dfe:	462b      	mov	r3, r5
 8012e00:	f7ed fc02 	bl	8000608 <__aeabi_dmul>
 8012e04:	a346      	add	r3, pc, #280	; (adr r3, 8012f20 <__ieee754_acos+0x470>)
 8012e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e0a:	f7ed fa47 	bl	800029c <__adddf3>
 8012e0e:	4622      	mov	r2, r4
 8012e10:	462b      	mov	r3, r5
 8012e12:	f7ed fbf9 	bl	8000608 <__aeabi_dmul>
 8012e16:	a344      	add	r3, pc, #272	; (adr r3, 8012f28 <__ieee754_acos+0x478>)
 8012e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e1c:	f7ed fa3c 	bl	8000298 <__aeabi_dsub>
 8012e20:	4622      	mov	r2, r4
 8012e22:	462b      	mov	r3, r5
 8012e24:	f7ed fbf0 	bl	8000608 <__aeabi_dmul>
 8012e28:	a341      	add	r3, pc, #260	; (adr r3, 8012f30 <__ieee754_acos+0x480>)
 8012e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2e:	f7ed fa35 	bl	800029c <__adddf3>
 8012e32:	4622      	mov	r2, r4
 8012e34:	462b      	mov	r3, r5
 8012e36:	f7ed fbe7 	bl	8000608 <__aeabi_dmul>
 8012e3a:	a33f      	add	r3, pc, #252	; (adr r3, 8012f38 <__ieee754_acos+0x488>)
 8012e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e40:	4682      	mov	sl, r0
 8012e42:	468b      	mov	fp, r1
 8012e44:	4620      	mov	r0, r4
 8012e46:	4629      	mov	r1, r5
 8012e48:	f7ed fbde 	bl	8000608 <__aeabi_dmul>
 8012e4c:	a33c      	add	r3, pc, #240	; (adr r3, 8012f40 <__ieee754_acos+0x490>)
 8012e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e52:	f7ed fa21 	bl	8000298 <__aeabi_dsub>
 8012e56:	4622      	mov	r2, r4
 8012e58:	462b      	mov	r3, r5
 8012e5a:	f7ed fbd5 	bl	8000608 <__aeabi_dmul>
 8012e5e:	a33a      	add	r3, pc, #232	; (adr r3, 8012f48 <__ieee754_acos+0x498>)
 8012e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e64:	f7ed fa1a 	bl	800029c <__adddf3>
 8012e68:	4622      	mov	r2, r4
 8012e6a:	462b      	mov	r3, r5
 8012e6c:	f7ed fbcc 	bl	8000608 <__aeabi_dmul>
 8012e70:	a337      	add	r3, pc, #220	; (adr r3, 8012f50 <__ieee754_acos+0x4a0>)
 8012e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e76:	f7ed fa0f 	bl	8000298 <__aeabi_dsub>
 8012e7a:	4622      	mov	r2, r4
 8012e7c:	462b      	mov	r3, r5
 8012e7e:	f7ed fbc3 	bl	8000608 <__aeabi_dmul>
 8012e82:	4b39      	ldr	r3, [pc, #228]	; (8012f68 <__ieee754_acos+0x4b8>)
 8012e84:	2200      	movs	r2, #0
 8012e86:	f7ed fa09 	bl	800029c <__adddf3>
 8012e8a:	4602      	mov	r2, r0
 8012e8c:	460b      	mov	r3, r1
 8012e8e:	4650      	mov	r0, sl
 8012e90:	4659      	mov	r1, fp
 8012e92:	f7ed fce3 	bl	800085c <__aeabi_ddiv>
 8012e96:	4642      	mov	r2, r8
 8012e98:	464b      	mov	r3, r9
 8012e9a:	f7ed fbb5 	bl	8000608 <__aeabi_dmul>
 8012e9e:	2600      	movs	r6, #0
 8012ea0:	4682      	mov	sl, r0
 8012ea2:	468b      	mov	fp, r1
 8012ea4:	4632      	mov	r2, r6
 8012ea6:	464b      	mov	r3, r9
 8012ea8:	4630      	mov	r0, r6
 8012eaa:	4649      	mov	r1, r9
 8012eac:	f7ed fbac 	bl	8000608 <__aeabi_dmul>
 8012eb0:	4602      	mov	r2, r0
 8012eb2:	460b      	mov	r3, r1
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	4629      	mov	r1, r5
 8012eb8:	f7ed f9ee 	bl	8000298 <__aeabi_dsub>
 8012ebc:	4632      	mov	r2, r6
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	460d      	mov	r5, r1
 8012ec2:	464b      	mov	r3, r9
 8012ec4:	4640      	mov	r0, r8
 8012ec6:	4649      	mov	r1, r9
 8012ec8:	f7ed f9e8 	bl	800029c <__adddf3>
 8012ecc:	4602      	mov	r2, r0
 8012ece:	460b      	mov	r3, r1
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	4629      	mov	r1, r5
 8012ed4:	f7ed fcc2 	bl	800085c <__aeabi_ddiv>
 8012ed8:	4602      	mov	r2, r0
 8012eda:	460b      	mov	r3, r1
 8012edc:	4650      	mov	r0, sl
 8012ede:	4659      	mov	r1, fp
 8012ee0:	f7ed f9dc 	bl	800029c <__adddf3>
 8012ee4:	4632      	mov	r2, r6
 8012ee6:	464b      	mov	r3, r9
 8012ee8:	f7ed f9d8 	bl	800029c <__adddf3>
 8012eec:	4602      	mov	r2, r0
 8012eee:	460b      	mov	r3, r1
 8012ef0:	f7ed f9d4 	bl	800029c <__adddf3>
 8012ef4:	e5fe      	b.n	8012af4 <__ieee754_acos+0x44>
 8012ef6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8012f58 <__ieee754_acos+0x4a8>
 8012efa:	e5ed      	b.n	8012ad8 <__ieee754_acos+0x28>
 8012efc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8012f60 <__ieee754_acos+0x4b0>
 8012f00:	e5ea      	b.n	8012ad8 <__ieee754_acos+0x28>
 8012f02:	bf00      	nop
 8012f04:	f3af 8000 	nop.w
 8012f08:	0dfdf709 	.word	0x0dfdf709
 8012f0c:	3f023de1 	.word	0x3f023de1
 8012f10:	7501b288 	.word	0x7501b288
 8012f14:	3f49efe0 	.word	0x3f49efe0
 8012f18:	b5688f3b 	.word	0xb5688f3b
 8012f1c:	3fa48228 	.word	0x3fa48228
 8012f20:	0e884455 	.word	0x0e884455
 8012f24:	3fc9c155 	.word	0x3fc9c155
 8012f28:	03eb6f7d 	.word	0x03eb6f7d
 8012f2c:	3fd4d612 	.word	0x3fd4d612
 8012f30:	55555555 	.word	0x55555555
 8012f34:	3fc55555 	.word	0x3fc55555
 8012f38:	b12e9282 	.word	0xb12e9282
 8012f3c:	3fb3b8c5 	.word	0x3fb3b8c5
 8012f40:	1b8d0159 	.word	0x1b8d0159
 8012f44:	3fe6066c 	.word	0x3fe6066c
 8012f48:	9c598ac8 	.word	0x9c598ac8
 8012f4c:	40002ae5 	.word	0x40002ae5
 8012f50:	1c8a2d4b 	.word	0x1c8a2d4b
 8012f54:	40033a27 	.word	0x40033a27
	...
 8012f60:	54442d18 	.word	0x54442d18
 8012f64:	3ff921fb 	.word	0x3ff921fb
 8012f68:	3ff00000 	.word	0x3ff00000
 8012f6c:	3fe00000 	.word	0x3fe00000

08012f70 <__ieee754_rem_pio2>:
 8012f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f74:	ed2d 8b02 	vpush	{d8}
 8012f78:	ec55 4b10 	vmov	r4, r5, d0
 8012f7c:	4bca      	ldr	r3, [pc, #808]	; (80132a8 <__ieee754_rem_pio2+0x338>)
 8012f7e:	b08b      	sub	sp, #44	; 0x2c
 8012f80:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012f84:	4598      	cmp	r8, r3
 8012f86:	4682      	mov	sl, r0
 8012f88:	9502      	str	r5, [sp, #8]
 8012f8a:	dc08      	bgt.n	8012f9e <__ieee754_rem_pio2+0x2e>
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	2300      	movs	r3, #0
 8012f90:	ed80 0b00 	vstr	d0, [r0]
 8012f94:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012f98:	f04f 0b00 	mov.w	fp, #0
 8012f9c:	e028      	b.n	8012ff0 <__ieee754_rem_pio2+0x80>
 8012f9e:	4bc3      	ldr	r3, [pc, #780]	; (80132ac <__ieee754_rem_pio2+0x33c>)
 8012fa0:	4598      	cmp	r8, r3
 8012fa2:	dc78      	bgt.n	8013096 <__ieee754_rem_pio2+0x126>
 8012fa4:	9b02      	ldr	r3, [sp, #8]
 8012fa6:	4ec2      	ldr	r6, [pc, #776]	; (80132b0 <__ieee754_rem_pio2+0x340>)
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	ee10 0a10 	vmov	r0, s0
 8012fae:	a3b0      	add	r3, pc, #704	; (adr r3, 8013270 <__ieee754_rem_pio2+0x300>)
 8012fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb4:	4629      	mov	r1, r5
 8012fb6:	dd39      	ble.n	801302c <__ieee754_rem_pio2+0xbc>
 8012fb8:	f7ed f96e 	bl	8000298 <__aeabi_dsub>
 8012fbc:	45b0      	cmp	r8, r6
 8012fbe:	4604      	mov	r4, r0
 8012fc0:	460d      	mov	r5, r1
 8012fc2:	d01b      	beq.n	8012ffc <__ieee754_rem_pio2+0x8c>
 8012fc4:	a3ac      	add	r3, pc, #688	; (adr r3, 8013278 <__ieee754_rem_pio2+0x308>)
 8012fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fca:	f7ed f965 	bl	8000298 <__aeabi_dsub>
 8012fce:	4602      	mov	r2, r0
 8012fd0:	460b      	mov	r3, r1
 8012fd2:	e9ca 2300 	strd	r2, r3, [sl]
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	4629      	mov	r1, r5
 8012fda:	f7ed f95d 	bl	8000298 <__aeabi_dsub>
 8012fde:	a3a6      	add	r3, pc, #664	; (adr r3, 8013278 <__ieee754_rem_pio2+0x308>)
 8012fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe4:	f7ed f958 	bl	8000298 <__aeabi_dsub>
 8012fe8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012fec:	f04f 0b01 	mov.w	fp, #1
 8012ff0:	4658      	mov	r0, fp
 8012ff2:	b00b      	add	sp, #44	; 0x2c
 8012ff4:	ecbd 8b02 	vpop	{d8}
 8012ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ffc:	a3a0      	add	r3, pc, #640	; (adr r3, 8013280 <__ieee754_rem_pio2+0x310>)
 8012ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013002:	f7ed f949 	bl	8000298 <__aeabi_dsub>
 8013006:	a3a0      	add	r3, pc, #640	; (adr r3, 8013288 <__ieee754_rem_pio2+0x318>)
 8013008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801300c:	4604      	mov	r4, r0
 801300e:	460d      	mov	r5, r1
 8013010:	f7ed f942 	bl	8000298 <__aeabi_dsub>
 8013014:	4602      	mov	r2, r0
 8013016:	460b      	mov	r3, r1
 8013018:	e9ca 2300 	strd	r2, r3, [sl]
 801301c:	4620      	mov	r0, r4
 801301e:	4629      	mov	r1, r5
 8013020:	f7ed f93a 	bl	8000298 <__aeabi_dsub>
 8013024:	a398      	add	r3, pc, #608	; (adr r3, 8013288 <__ieee754_rem_pio2+0x318>)
 8013026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801302a:	e7db      	b.n	8012fe4 <__ieee754_rem_pio2+0x74>
 801302c:	f7ed f936 	bl	800029c <__adddf3>
 8013030:	45b0      	cmp	r8, r6
 8013032:	4604      	mov	r4, r0
 8013034:	460d      	mov	r5, r1
 8013036:	d016      	beq.n	8013066 <__ieee754_rem_pio2+0xf6>
 8013038:	a38f      	add	r3, pc, #572	; (adr r3, 8013278 <__ieee754_rem_pio2+0x308>)
 801303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801303e:	f7ed f92d 	bl	800029c <__adddf3>
 8013042:	4602      	mov	r2, r0
 8013044:	460b      	mov	r3, r1
 8013046:	e9ca 2300 	strd	r2, r3, [sl]
 801304a:	4620      	mov	r0, r4
 801304c:	4629      	mov	r1, r5
 801304e:	f7ed f923 	bl	8000298 <__aeabi_dsub>
 8013052:	a389      	add	r3, pc, #548	; (adr r3, 8013278 <__ieee754_rem_pio2+0x308>)
 8013054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013058:	f7ed f920 	bl	800029c <__adddf3>
 801305c:	f04f 3bff 	mov.w	fp, #4294967295
 8013060:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013064:	e7c4      	b.n	8012ff0 <__ieee754_rem_pio2+0x80>
 8013066:	a386      	add	r3, pc, #536	; (adr r3, 8013280 <__ieee754_rem_pio2+0x310>)
 8013068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801306c:	f7ed f916 	bl	800029c <__adddf3>
 8013070:	a385      	add	r3, pc, #532	; (adr r3, 8013288 <__ieee754_rem_pio2+0x318>)
 8013072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013076:	4604      	mov	r4, r0
 8013078:	460d      	mov	r5, r1
 801307a:	f7ed f90f 	bl	800029c <__adddf3>
 801307e:	4602      	mov	r2, r0
 8013080:	460b      	mov	r3, r1
 8013082:	e9ca 2300 	strd	r2, r3, [sl]
 8013086:	4620      	mov	r0, r4
 8013088:	4629      	mov	r1, r5
 801308a:	f7ed f905 	bl	8000298 <__aeabi_dsub>
 801308e:	a37e      	add	r3, pc, #504	; (adr r3, 8013288 <__ieee754_rem_pio2+0x318>)
 8013090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013094:	e7e0      	b.n	8013058 <__ieee754_rem_pio2+0xe8>
 8013096:	4b87      	ldr	r3, [pc, #540]	; (80132b4 <__ieee754_rem_pio2+0x344>)
 8013098:	4598      	cmp	r8, r3
 801309a:	f300 80d9 	bgt.w	8013250 <__ieee754_rem_pio2+0x2e0>
 801309e:	f7ff fc37 	bl	8012910 <fabs>
 80130a2:	ec55 4b10 	vmov	r4, r5, d0
 80130a6:	ee10 0a10 	vmov	r0, s0
 80130aa:	a379      	add	r3, pc, #484	; (adr r3, 8013290 <__ieee754_rem_pio2+0x320>)
 80130ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b0:	4629      	mov	r1, r5
 80130b2:	f7ed faa9 	bl	8000608 <__aeabi_dmul>
 80130b6:	4b80      	ldr	r3, [pc, #512]	; (80132b8 <__ieee754_rem_pio2+0x348>)
 80130b8:	2200      	movs	r2, #0
 80130ba:	f7ed f8ef 	bl	800029c <__adddf3>
 80130be:	f7ed fd53 	bl	8000b68 <__aeabi_d2iz>
 80130c2:	4683      	mov	fp, r0
 80130c4:	f7ed fa36 	bl	8000534 <__aeabi_i2d>
 80130c8:	4602      	mov	r2, r0
 80130ca:	460b      	mov	r3, r1
 80130cc:	ec43 2b18 	vmov	d8, r2, r3
 80130d0:	a367      	add	r3, pc, #412	; (adr r3, 8013270 <__ieee754_rem_pio2+0x300>)
 80130d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130d6:	f7ed fa97 	bl	8000608 <__aeabi_dmul>
 80130da:	4602      	mov	r2, r0
 80130dc:	460b      	mov	r3, r1
 80130de:	4620      	mov	r0, r4
 80130e0:	4629      	mov	r1, r5
 80130e2:	f7ed f8d9 	bl	8000298 <__aeabi_dsub>
 80130e6:	a364      	add	r3, pc, #400	; (adr r3, 8013278 <__ieee754_rem_pio2+0x308>)
 80130e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ec:	4606      	mov	r6, r0
 80130ee:	460f      	mov	r7, r1
 80130f0:	ec51 0b18 	vmov	r0, r1, d8
 80130f4:	f7ed fa88 	bl	8000608 <__aeabi_dmul>
 80130f8:	f1bb 0f1f 	cmp.w	fp, #31
 80130fc:	4604      	mov	r4, r0
 80130fe:	460d      	mov	r5, r1
 8013100:	dc0d      	bgt.n	801311e <__ieee754_rem_pio2+0x1ae>
 8013102:	4b6e      	ldr	r3, [pc, #440]	; (80132bc <__ieee754_rem_pio2+0x34c>)
 8013104:	f10b 32ff 	add.w	r2, fp, #4294967295
 8013108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801310c:	4543      	cmp	r3, r8
 801310e:	d006      	beq.n	801311e <__ieee754_rem_pio2+0x1ae>
 8013110:	4622      	mov	r2, r4
 8013112:	462b      	mov	r3, r5
 8013114:	4630      	mov	r0, r6
 8013116:	4639      	mov	r1, r7
 8013118:	f7ed f8be 	bl	8000298 <__aeabi_dsub>
 801311c:	e00f      	b.n	801313e <__ieee754_rem_pio2+0x1ce>
 801311e:	462b      	mov	r3, r5
 8013120:	4622      	mov	r2, r4
 8013122:	4630      	mov	r0, r6
 8013124:	4639      	mov	r1, r7
 8013126:	f7ed f8b7 	bl	8000298 <__aeabi_dsub>
 801312a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801312e:	9303      	str	r3, [sp, #12]
 8013130:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013134:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8013138:	f1b8 0f10 	cmp.w	r8, #16
 801313c:	dc02      	bgt.n	8013144 <__ieee754_rem_pio2+0x1d4>
 801313e:	e9ca 0100 	strd	r0, r1, [sl]
 8013142:	e039      	b.n	80131b8 <__ieee754_rem_pio2+0x248>
 8013144:	a34e      	add	r3, pc, #312	; (adr r3, 8013280 <__ieee754_rem_pio2+0x310>)
 8013146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801314a:	ec51 0b18 	vmov	r0, r1, d8
 801314e:	f7ed fa5b 	bl	8000608 <__aeabi_dmul>
 8013152:	4604      	mov	r4, r0
 8013154:	460d      	mov	r5, r1
 8013156:	4602      	mov	r2, r0
 8013158:	460b      	mov	r3, r1
 801315a:	4630      	mov	r0, r6
 801315c:	4639      	mov	r1, r7
 801315e:	f7ed f89b 	bl	8000298 <__aeabi_dsub>
 8013162:	4602      	mov	r2, r0
 8013164:	460b      	mov	r3, r1
 8013166:	4680      	mov	r8, r0
 8013168:	4689      	mov	r9, r1
 801316a:	4630      	mov	r0, r6
 801316c:	4639      	mov	r1, r7
 801316e:	f7ed f893 	bl	8000298 <__aeabi_dsub>
 8013172:	4622      	mov	r2, r4
 8013174:	462b      	mov	r3, r5
 8013176:	f7ed f88f 	bl	8000298 <__aeabi_dsub>
 801317a:	a343      	add	r3, pc, #268	; (adr r3, 8013288 <__ieee754_rem_pio2+0x318>)
 801317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013180:	4604      	mov	r4, r0
 8013182:	460d      	mov	r5, r1
 8013184:	ec51 0b18 	vmov	r0, r1, d8
 8013188:	f7ed fa3e 	bl	8000608 <__aeabi_dmul>
 801318c:	4622      	mov	r2, r4
 801318e:	462b      	mov	r3, r5
 8013190:	f7ed f882 	bl	8000298 <__aeabi_dsub>
 8013194:	4602      	mov	r2, r0
 8013196:	460b      	mov	r3, r1
 8013198:	4604      	mov	r4, r0
 801319a:	460d      	mov	r5, r1
 801319c:	4640      	mov	r0, r8
 801319e:	4649      	mov	r1, r9
 80131a0:	f7ed f87a 	bl	8000298 <__aeabi_dsub>
 80131a4:	9a03      	ldr	r2, [sp, #12]
 80131a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80131aa:	1ad3      	subs	r3, r2, r3
 80131ac:	2b31      	cmp	r3, #49	; 0x31
 80131ae:	dc24      	bgt.n	80131fa <__ieee754_rem_pio2+0x28a>
 80131b0:	e9ca 0100 	strd	r0, r1, [sl]
 80131b4:	4646      	mov	r6, r8
 80131b6:	464f      	mov	r7, r9
 80131b8:	e9da 8900 	ldrd	r8, r9, [sl]
 80131bc:	4630      	mov	r0, r6
 80131be:	4642      	mov	r2, r8
 80131c0:	464b      	mov	r3, r9
 80131c2:	4639      	mov	r1, r7
 80131c4:	f7ed f868 	bl	8000298 <__aeabi_dsub>
 80131c8:	462b      	mov	r3, r5
 80131ca:	4622      	mov	r2, r4
 80131cc:	f7ed f864 	bl	8000298 <__aeabi_dsub>
 80131d0:	9b02      	ldr	r3, [sp, #8]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80131d8:	f6bf af0a 	bge.w	8012ff0 <__ieee754_rem_pio2+0x80>
 80131dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80131e0:	f8ca 3004 	str.w	r3, [sl, #4]
 80131e4:	f8ca 8000 	str.w	r8, [sl]
 80131e8:	f8ca 0008 	str.w	r0, [sl, #8]
 80131ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80131f0:	f8ca 300c 	str.w	r3, [sl, #12]
 80131f4:	f1cb 0b00 	rsb	fp, fp, #0
 80131f8:	e6fa      	b.n	8012ff0 <__ieee754_rem_pio2+0x80>
 80131fa:	a327      	add	r3, pc, #156	; (adr r3, 8013298 <__ieee754_rem_pio2+0x328>)
 80131fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013200:	ec51 0b18 	vmov	r0, r1, d8
 8013204:	f7ed fa00 	bl	8000608 <__aeabi_dmul>
 8013208:	4604      	mov	r4, r0
 801320a:	460d      	mov	r5, r1
 801320c:	4602      	mov	r2, r0
 801320e:	460b      	mov	r3, r1
 8013210:	4640      	mov	r0, r8
 8013212:	4649      	mov	r1, r9
 8013214:	f7ed f840 	bl	8000298 <__aeabi_dsub>
 8013218:	4602      	mov	r2, r0
 801321a:	460b      	mov	r3, r1
 801321c:	4606      	mov	r6, r0
 801321e:	460f      	mov	r7, r1
 8013220:	4640      	mov	r0, r8
 8013222:	4649      	mov	r1, r9
 8013224:	f7ed f838 	bl	8000298 <__aeabi_dsub>
 8013228:	4622      	mov	r2, r4
 801322a:	462b      	mov	r3, r5
 801322c:	f7ed f834 	bl	8000298 <__aeabi_dsub>
 8013230:	a31b      	add	r3, pc, #108	; (adr r3, 80132a0 <__ieee754_rem_pio2+0x330>)
 8013232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013236:	4604      	mov	r4, r0
 8013238:	460d      	mov	r5, r1
 801323a:	ec51 0b18 	vmov	r0, r1, d8
 801323e:	f7ed f9e3 	bl	8000608 <__aeabi_dmul>
 8013242:	4622      	mov	r2, r4
 8013244:	462b      	mov	r3, r5
 8013246:	f7ed f827 	bl	8000298 <__aeabi_dsub>
 801324a:	4604      	mov	r4, r0
 801324c:	460d      	mov	r5, r1
 801324e:	e75f      	b.n	8013110 <__ieee754_rem_pio2+0x1a0>
 8013250:	4b1b      	ldr	r3, [pc, #108]	; (80132c0 <__ieee754_rem_pio2+0x350>)
 8013252:	4598      	cmp	r8, r3
 8013254:	dd36      	ble.n	80132c4 <__ieee754_rem_pio2+0x354>
 8013256:	ee10 2a10 	vmov	r2, s0
 801325a:	462b      	mov	r3, r5
 801325c:	4620      	mov	r0, r4
 801325e:	4629      	mov	r1, r5
 8013260:	f7ed f81a 	bl	8000298 <__aeabi_dsub>
 8013264:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013268:	e9ca 0100 	strd	r0, r1, [sl]
 801326c:	e694      	b.n	8012f98 <__ieee754_rem_pio2+0x28>
 801326e:	bf00      	nop
 8013270:	54400000 	.word	0x54400000
 8013274:	3ff921fb 	.word	0x3ff921fb
 8013278:	1a626331 	.word	0x1a626331
 801327c:	3dd0b461 	.word	0x3dd0b461
 8013280:	1a600000 	.word	0x1a600000
 8013284:	3dd0b461 	.word	0x3dd0b461
 8013288:	2e037073 	.word	0x2e037073
 801328c:	3ba3198a 	.word	0x3ba3198a
 8013290:	6dc9c883 	.word	0x6dc9c883
 8013294:	3fe45f30 	.word	0x3fe45f30
 8013298:	2e000000 	.word	0x2e000000
 801329c:	3ba3198a 	.word	0x3ba3198a
 80132a0:	252049c1 	.word	0x252049c1
 80132a4:	397b839a 	.word	0x397b839a
 80132a8:	3fe921fb 	.word	0x3fe921fb
 80132ac:	4002d97b 	.word	0x4002d97b
 80132b0:	3ff921fb 	.word	0x3ff921fb
 80132b4:	413921fb 	.word	0x413921fb
 80132b8:	3fe00000 	.word	0x3fe00000
 80132bc:	08014988 	.word	0x08014988
 80132c0:	7fefffff 	.word	0x7fefffff
 80132c4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80132c8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80132cc:	ee10 0a10 	vmov	r0, s0
 80132d0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80132d4:	ee10 6a10 	vmov	r6, s0
 80132d8:	460f      	mov	r7, r1
 80132da:	f7ed fc45 	bl	8000b68 <__aeabi_d2iz>
 80132de:	f7ed f929 	bl	8000534 <__aeabi_i2d>
 80132e2:	4602      	mov	r2, r0
 80132e4:	460b      	mov	r3, r1
 80132e6:	4630      	mov	r0, r6
 80132e8:	4639      	mov	r1, r7
 80132ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80132ee:	f7ec ffd3 	bl	8000298 <__aeabi_dsub>
 80132f2:	4b22      	ldr	r3, [pc, #136]	; (801337c <__ieee754_rem_pio2+0x40c>)
 80132f4:	2200      	movs	r2, #0
 80132f6:	f7ed f987 	bl	8000608 <__aeabi_dmul>
 80132fa:	460f      	mov	r7, r1
 80132fc:	4606      	mov	r6, r0
 80132fe:	f7ed fc33 	bl	8000b68 <__aeabi_d2iz>
 8013302:	f7ed f917 	bl	8000534 <__aeabi_i2d>
 8013306:	4602      	mov	r2, r0
 8013308:	460b      	mov	r3, r1
 801330a:	4630      	mov	r0, r6
 801330c:	4639      	mov	r1, r7
 801330e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013312:	f7ec ffc1 	bl	8000298 <__aeabi_dsub>
 8013316:	4b19      	ldr	r3, [pc, #100]	; (801337c <__ieee754_rem_pio2+0x40c>)
 8013318:	2200      	movs	r2, #0
 801331a:	f7ed f975 	bl	8000608 <__aeabi_dmul>
 801331e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013322:	ad04      	add	r5, sp, #16
 8013324:	f04f 0803 	mov.w	r8, #3
 8013328:	46a9      	mov	r9, r5
 801332a:	2600      	movs	r6, #0
 801332c:	2700      	movs	r7, #0
 801332e:	4632      	mov	r2, r6
 8013330:	463b      	mov	r3, r7
 8013332:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8013336:	46c3      	mov	fp, r8
 8013338:	3d08      	subs	r5, #8
 801333a:	f108 38ff 	add.w	r8, r8, #4294967295
 801333e:	f7ed fbcb 	bl	8000ad8 <__aeabi_dcmpeq>
 8013342:	2800      	cmp	r0, #0
 8013344:	d1f3      	bne.n	801332e <__ieee754_rem_pio2+0x3be>
 8013346:	4b0e      	ldr	r3, [pc, #56]	; (8013380 <__ieee754_rem_pio2+0x410>)
 8013348:	9301      	str	r3, [sp, #4]
 801334a:	2302      	movs	r3, #2
 801334c:	9300      	str	r3, [sp, #0]
 801334e:	4622      	mov	r2, r4
 8013350:	465b      	mov	r3, fp
 8013352:	4651      	mov	r1, sl
 8013354:	4648      	mov	r0, r9
 8013356:	f000 f993 	bl	8013680 <__kernel_rem_pio2>
 801335a:	9b02      	ldr	r3, [sp, #8]
 801335c:	2b00      	cmp	r3, #0
 801335e:	4683      	mov	fp, r0
 8013360:	f6bf ae46 	bge.w	8012ff0 <__ieee754_rem_pio2+0x80>
 8013364:	f8da 3004 	ldr.w	r3, [sl, #4]
 8013368:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801336c:	f8ca 3004 	str.w	r3, [sl, #4]
 8013370:	f8da 300c 	ldr.w	r3, [sl, #12]
 8013374:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013378:	e73a      	b.n	80131f0 <__ieee754_rem_pio2+0x280>
 801337a:	bf00      	nop
 801337c:	41700000 	.word	0x41700000
 8013380:	08014a08 	.word	0x08014a08

08013384 <__ieee754_sqrt>:
 8013384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013388:	ec55 4b10 	vmov	r4, r5, d0
 801338c:	4e56      	ldr	r6, [pc, #344]	; (80134e8 <__ieee754_sqrt+0x164>)
 801338e:	43ae      	bics	r6, r5
 8013390:	ee10 0a10 	vmov	r0, s0
 8013394:	ee10 3a10 	vmov	r3, s0
 8013398:	4629      	mov	r1, r5
 801339a:	462a      	mov	r2, r5
 801339c:	d110      	bne.n	80133c0 <__ieee754_sqrt+0x3c>
 801339e:	ee10 2a10 	vmov	r2, s0
 80133a2:	462b      	mov	r3, r5
 80133a4:	f7ed f930 	bl	8000608 <__aeabi_dmul>
 80133a8:	4602      	mov	r2, r0
 80133aa:	460b      	mov	r3, r1
 80133ac:	4620      	mov	r0, r4
 80133ae:	4629      	mov	r1, r5
 80133b0:	f7ec ff74 	bl	800029c <__adddf3>
 80133b4:	4604      	mov	r4, r0
 80133b6:	460d      	mov	r5, r1
 80133b8:	ec45 4b10 	vmov	d0, r4, r5
 80133bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133c0:	2d00      	cmp	r5, #0
 80133c2:	dc10      	bgt.n	80133e6 <__ieee754_sqrt+0x62>
 80133c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80133c8:	4330      	orrs	r0, r6
 80133ca:	d0f5      	beq.n	80133b8 <__ieee754_sqrt+0x34>
 80133cc:	b15d      	cbz	r5, 80133e6 <__ieee754_sqrt+0x62>
 80133ce:	ee10 2a10 	vmov	r2, s0
 80133d2:	462b      	mov	r3, r5
 80133d4:	ee10 0a10 	vmov	r0, s0
 80133d8:	f7ec ff5e 	bl	8000298 <__aeabi_dsub>
 80133dc:	4602      	mov	r2, r0
 80133de:	460b      	mov	r3, r1
 80133e0:	f7ed fa3c 	bl	800085c <__aeabi_ddiv>
 80133e4:	e7e6      	b.n	80133b4 <__ieee754_sqrt+0x30>
 80133e6:	1509      	asrs	r1, r1, #20
 80133e8:	d076      	beq.n	80134d8 <__ieee754_sqrt+0x154>
 80133ea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80133ee:	07ce      	lsls	r6, r1, #31
 80133f0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80133f4:	bf5e      	ittt	pl
 80133f6:	0fda      	lsrpl	r2, r3, #31
 80133f8:	005b      	lslpl	r3, r3, #1
 80133fa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80133fe:	0fda      	lsrs	r2, r3, #31
 8013400:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8013404:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8013408:	2000      	movs	r0, #0
 801340a:	106d      	asrs	r5, r5, #1
 801340c:	005b      	lsls	r3, r3, #1
 801340e:	f04f 0e16 	mov.w	lr, #22
 8013412:	4684      	mov	ip, r0
 8013414:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013418:	eb0c 0401 	add.w	r4, ip, r1
 801341c:	4294      	cmp	r4, r2
 801341e:	bfde      	ittt	le
 8013420:	1b12      	suble	r2, r2, r4
 8013422:	eb04 0c01 	addle.w	ip, r4, r1
 8013426:	1840      	addle	r0, r0, r1
 8013428:	0052      	lsls	r2, r2, #1
 801342a:	f1be 0e01 	subs.w	lr, lr, #1
 801342e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8013432:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013436:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801343a:	d1ed      	bne.n	8013418 <__ieee754_sqrt+0x94>
 801343c:	4671      	mov	r1, lr
 801343e:	2720      	movs	r7, #32
 8013440:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8013444:	4562      	cmp	r2, ip
 8013446:	eb04 060e 	add.w	r6, r4, lr
 801344a:	dc02      	bgt.n	8013452 <__ieee754_sqrt+0xce>
 801344c:	d113      	bne.n	8013476 <__ieee754_sqrt+0xf2>
 801344e:	429e      	cmp	r6, r3
 8013450:	d811      	bhi.n	8013476 <__ieee754_sqrt+0xf2>
 8013452:	2e00      	cmp	r6, #0
 8013454:	eb06 0e04 	add.w	lr, r6, r4
 8013458:	da43      	bge.n	80134e2 <__ieee754_sqrt+0x15e>
 801345a:	f1be 0f00 	cmp.w	lr, #0
 801345e:	db40      	blt.n	80134e2 <__ieee754_sqrt+0x15e>
 8013460:	f10c 0801 	add.w	r8, ip, #1
 8013464:	eba2 020c 	sub.w	r2, r2, ip
 8013468:	429e      	cmp	r6, r3
 801346a:	bf88      	it	hi
 801346c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8013470:	1b9b      	subs	r3, r3, r6
 8013472:	4421      	add	r1, r4
 8013474:	46c4      	mov	ip, r8
 8013476:	0052      	lsls	r2, r2, #1
 8013478:	3f01      	subs	r7, #1
 801347a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801347e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8013482:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013486:	d1dd      	bne.n	8013444 <__ieee754_sqrt+0xc0>
 8013488:	4313      	orrs	r3, r2
 801348a:	d006      	beq.n	801349a <__ieee754_sqrt+0x116>
 801348c:	1c4c      	adds	r4, r1, #1
 801348e:	bf13      	iteet	ne
 8013490:	3101      	addne	r1, #1
 8013492:	3001      	addeq	r0, #1
 8013494:	4639      	moveq	r1, r7
 8013496:	f021 0101 	bicne.w	r1, r1, #1
 801349a:	1043      	asrs	r3, r0, #1
 801349c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80134a0:	0849      	lsrs	r1, r1, #1
 80134a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80134a6:	07c2      	lsls	r2, r0, #31
 80134a8:	bf48      	it	mi
 80134aa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80134ae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80134b2:	460c      	mov	r4, r1
 80134b4:	463d      	mov	r5, r7
 80134b6:	e77f      	b.n	80133b8 <__ieee754_sqrt+0x34>
 80134b8:	0ada      	lsrs	r2, r3, #11
 80134ba:	3815      	subs	r0, #21
 80134bc:	055b      	lsls	r3, r3, #21
 80134be:	2a00      	cmp	r2, #0
 80134c0:	d0fa      	beq.n	80134b8 <__ieee754_sqrt+0x134>
 80134c2:	02d7      	lsls	r7, r2, #11
 80134c4:	d50a      	bpl.n	80134dc <__ieee754_sqrt+0x158>
 80134c6:	f1c1 0420 	rsb	r4, r1, #32
 80134ca:	fa23 f404 	lsr.w	r4, r3, r4
 80134ce:	1e4d      	subs	r5, r1, #1
 80134d0:	408b      	lsls	r3, r1
 80134d2:	4322      	orrs	r2, r4
 80134d4:	1b41      	subs	r1, r0, r5
 80134d6:	e788      	b.n	80133ea <__ieee754_sqrt+0x66>
 80134d8:	4608      	mov	r0, r1
 80134da:	e7f0      	b.n	80134be <__ieee754_sqrt+0x13a>
 80134dc:	0052      	lsls	r2, r2, #1
 80134de:	3101      	adds	r1, #1
 80134e0:	e7ef      	b.n	80134c2 <__ieee754_sqrt+0x13e>
 80134e2:	46e0      	mov	r8, ip
 80134e4:	e7be      	b.n	8013464 <__ieee754_sqrt+0xe0>
 80134e6:	bf00      	nop
 80134e8:	7ff00000 	.word	0x7ff00000
 80134ec:	00000000 	.word	0x00000000

080134f0 <__kernel_cos>:
 80134f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134f4:	ec57 6b10 	vmov	r6, r7, d0
 80134f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80134fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8013500:	ed8d 1b00 	vstr	d1, [sp]
 8013504:	da07      	bge.n	8013516 <__kernel_cos+0x26>
 8013506:	ee10 0a10 	vmov	r0, s0
 801350a:	4639      	mov	r1, r7
 801350c:	f7ed fb2c 	bl	8000b68 <__aeabi_d2iz>
 8013510:	2800      	cmp	r0, #0
 8013512:	f000 8088 	beq.w	8013626 <__kernel_cos+0x136>
 8013516:	4632      	mov	r2, r6
 8013518:	463b      	mov	r3, r7
 801351a:	4630      	mov	r0, r6
 801351c:	4639      	mov	r1, r7
 801351e:	f7ed f873 	bl	8000608 <__aeabi_dmul>
 8013522:	4b51      	ldr	r3, [pc, #324]	; (8013668 <__kernel_cos+0x178>)
 8013524:	2200      	movs	r2, #0
 8013526:	4604      	mov	r4, r0
 8013528:	460d      	mov	r5, r1
 801352a:	f7ed f86d 	bl	8000608 <__aeabi_dmul>
 801352e:	a340      	add	r3, pc, #256	; (adr r3, 8013630 <__kernel_cos+0x140>)
 8013530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013534:	4682      	mov	sl, r0
 8013536:	468b      	mov	fp, r1
 8013538:	4620      	mov	r0, r4
 801353a:	4629      	mov	r1, r5
 801353c:	f7ed f864 	bl	8000608 <__aeabi_dmul>
 8013540:	a33d      	add	r3, pc, #244	; (adr r3, 8013638 <__kernel_cos+0x148>)
 8013542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013546:	f7ec fea9 	bl	800029c <__adddf3>
 801354a:	4622      	mov	r2, r4
 801354c:	462b      	mov	r3, r5
 801354e:	f7ed f85b 	bl	8000608 <__aeabi_dmul>
 8013552:	a33b      	add	r3, pc, #236	; (adr r3, 8013640 <__kernel_cos+0x150>)
 8013554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013558:	f7ec fe9e 	bl	8000298 <__aeabi_dsub>
 801355c:	4622      	mov	r2, r4
 801355e:	462b      	mov	r3, r5
 8013560:	f7ed f852 	bl	8000608 <__aeabi_dmul>
 8013564:	a338      	add	r3, pc, #224	; (adr r3, 8013648 <__kernel_cos+0x158>)
 8013566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801356a:	f7ec fe97 	bl	800029c <__adddf3>
 801356e:	4622      	mov	r2, r4
 8013570:	462b      	mov	r3, r5
 8013572:	f7ed f849 	bl	8000608 <__aeabi_dmul>
 8013576:	a336      	add	r3, pc, #216	; (adr r3, 8013650 <__kernel_cos+0x160>)
 8013578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801357c:	f7ec fe8c 	bl	8000298 <__aeabi_dsub>
 8013580:	4622      	mov	r2, r4
 8013582:	462b      	mov	r3, r5
 8013584:	f7ed f840 	bl	8000608 <__aeabi_dmul>
 8013588:	a333      	add	r3, pc, #204	; (adr r3, 8013658 <__kernel_cos+0x168>)
 801358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801358e:	f7ec fe85 	bl	800029c <__adddf3>
 8013592:	4622      	mov	r2, r4
 8013594:	462b      	mov	r3, r5
 8013596:	f7ed f837 	bl	8000608 <__aeabi_dmul>
 801359a:	4622      	mov	r2, r4
 801359c:	462b      	mov	r3, r5
 801359e:	f7ed f833 	bl	8000608 <__aeabi_dmul>
 80135a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80135a6:	4604      	mov	r4, r0
 80135a8:	460d      	mov	r5, r1
 80135aa:	4630      	mov	r0, r6
 80135ac:	4639      	mov	r1, r7
 80135ae:	f7ed f82b 	bl	8000608 <__aeabi_dmul>
 80135b2:	460b      	mov	r3, r1
 80135b4:	4602      	mov	r2, r0
 80135b6:	4629      	mov	r1, r5
 80135b8:	4620      	mov	r0, r4
 80135ba:	f7ec fe6d 	bl	8000298 <__aeabi_dsub>
 80135be:	4b2b      	ldr	r3, [pc, #172]	; (801366c <__kernel_cos+0x17c>)
 80135c0:	4598      	cmp	r8, r3
 80135c2:	4606      	mov	r6, r0
 80135c4:	460f      	mov	r7, r1
 80135c6:	dc10      	bgt.n	80135ea <__kernel_cos+0xfa>
 80135c8:	4602      	mov	r2, r0
 80135ca:	460b      	mov	r3, r1
 80135cc:	4650      	mov	r0, sl
 80135ce:	4659      	mov	r1, fp
 80135d0:	f7ec fe62 	bl	8000298 <__aeabi_dsub>
 80135d4:	460b      	mov	r3, r1
 80135d6:	4926      	ldr	r1, [pc, #152]	; (8013670 <__kernel_cos+0x180>)
 80135d8:	4602      	mov	r2, r0
 80135da:	2000      	movs	r0, #0
 80135dc:	f7ec fe5c 	bl	8000298 <__aeabi_dsub>
 80135e0:	ec41 0b10 	vmov	d0, r0, r1
 80135e4:	b003      	add	sp, #12
 80135e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ea:	4b22      	ldr	r3, [pc, #136]	; (8013674 <__kernel_cos+0x184>)
 80135ec:	4920      	ldr	r1, [pc, #128]	; (8013670 <__kernel_cos+0x180>)
 80135ee:	4598      	cmp	r8, r3
 80135f0:	bfcc      	ite	gt
 80135f2:	4d21      	ldrgt	r5, [pc, #132]	; (8013678 <__kernel_cos+0x188>)
 80135f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80135f8:	2400      	movs	r4, #0
 80135fa:	4622      	mov	r2, r4
 80135fc:	462b      	mov	r3, r5
 80135fe:	2000      	movs	r0, #0
 8013600:	f7ec fe4a 	bl	8000298 <__aeabi_dsub>
 8013604:	4622      	mov	r2, r4
 8013606:	4680      	mov	r8, r0
 8013608:	4689      	mov	r9, r1
 801360a:	462b      	mov	r3, r5
 801360c:	4650      	mov	r0, sl
 801360e:	4659      	mov	r1, fp
 8013610:	f7ec fe42 	bl	8000298 <__aeabi_dsub>
 8013614:	4632      	mov	r2, r6
 8013616:	463b      	mov	r3, r7
 8013618:	f7ec fe3e 	bl	8000298 <__aeabi_dsub>
 801361c:	4602      	mov	r2, r0
 801361e:	460b      	mov	r3, r1
 8013620:	4640      	mov	r0, r8
 8013622:	4649      	mov	r1, r9
 8013624:	e7da      	b.n	80135dc <__kernel_cos+0xec>
 8013626:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8013660 <__kernel_cos+0x170>
 801362a:	e7db      	b.n	80135e4 <__kernel_cos+0xf4>
 801362c:	f3af 8000 	nop.w
 8013630:	be8838d4 	.word	0xbe8838d4
 8013634:	bda8fae9 	.word	0xbda8fae9
 8013638:	bdb4b1c4 	.word	0xbdb4b1c4
 801363c:	3e21ee9e 	.word	0x3e21ee9e
 8013640:	809c52ad 	.word	0x809c52ad
 8013644:	3e927e4f 	.word	0x3e927e4f
 8013648:	19cb1590 	.word	0x19cb1590
 801364c:	3efa01a0 	.word	0x3efa01a0
 8013650:	16c15177 	.word	0x16c15177
 8013654:	3f56c16c 	.word	0x3f56c16c
 8013658:	5555554c 	.word	0x5555554c
 801365c:	3fa55555 	.word	0x3fa55555
 8013660:	00000000 	.word	0x00000000
 8013664:	3ff00000 	.word	0x3ff00000
 8013668:	3fe00000 	.word	0x3fe00000
 801366c:	3fd33332 	.word	0x3fd33332
 8013670:	3ff00000 	.word	0x3ff00000
 8013674:	3fe90000 	.word	0x3fe90000
 8013678:	3fd20000 	.word	0x3fd20000
 801367c:	00000000 	.word	0x00000000

08013680 <__kernel_rem_pio2>:
 8013680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013684:	ed2d 8b02 	vpush	{d8}
 8013688:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801368c:	f112 0f14 	cmn.w	r2, #20
 8013690:	9308      	str	r3, [sp, #32]
 8013692:	9101      	str	r1, [sp, #4]
 8013694:	4bc6      	ldr	r3, [pc, #792]	; (80139b0 <__kernel_rem_pio2+0x330>)
 8013696:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8013698:	9009      	str	r0, [sp, #36]	; 0x24
 801369a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801369e:	9304      	str	r3, [sp, #16]
 80136a0:	9b08      	ldr	r3, [sp, #32]
 80136a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80136a6:	bfa8      	it	ge
 80136a8:	1ed4      	subge	r4, r2, #3
 80136aa:	9306      	str	r3, [sp, #24]
 80136ac:	bfb2      	itee	lt
 80136ae:	2400      	movlt	r4, #0
 80136b0:	2318      	movge	r3, #24
 80136b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80136b6:	f06f 0317 	mvn.w	r3, #23
 80136ba:	fb04 3303 	mla	r3, r4, r3, r3
 80136be:	eb03 0a02 	add.w	sl, r3, r2
 80136c2:	9b04      	ldr	r3, [sp, #16]
 80136c4:	9a06      	ldr	r2, [sp, #24]
 80136c6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80139a0 <__kernel_rem_pio2+0x320>
 80136ca:	eb03 0802 	add.w	r8, r3, r2
 80136ce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80136d0:	1aa7      	subs	r7, r4, r2
 80136d2:	ae20      	add	r6, sp, #128	; 0x80
 80136d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80136d8:	2500      	movs	r5, #0
 80136da:	4545      	cmp	r5, r8
 80136dc:	dd18      	ble.n	8013710 <__kernel_rem_pio2+0x90>
 80136de:	9b08      	ldr	r3, [sp, #32]
 80136e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80136e4:	aa20      	add	r2, sp, #128	; 0x80
 80136e6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80139a0 <__kernel_rem_pio2+0x320>
 80136ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80136ee:	f1c3 0301 	rsb	r3, r3, #1
 80136f2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80136f6:	9307      	str	r3, [sp, #28]
 80136f8:	9b07      	ldr	r3, [sp, #28]
 80136fa:	9a04      	ldr	r2, [sp, #16]
 80136fc:	4443      	add	r3, r8
 80136fe:	429a      	cmp	r2, r3
 8013700:	db2f      	blt.n	8013762 <__kernel_rem_pio2+0xe2>
 8013702:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013706:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801370a:	462f      	mov	r7, r5
 801370c:	2600      	movs	r6, #0
 801370e:	e01b      	b.n	8013748 <__kernel_rem_pio2+0xc8>
 8013710:	42ef      	cmn	r7, r5
 8013712:	d407      	bmi.n	8013724 <__kernel_rem_pio2+0xa4>
 8013714:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013718:	f7ec ff0c 	bl	8000534 <__aeabi_i2d>
 801371c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013720:	3501      	adds	r5, #1
 8013722:	e7da      	b.n	80136da <__kernel_rem_pio2+0x5a>
 8013724:	ec51 0b18 	vmov	r0, r1, d8
 8013728:	e7f8      	b.n	801371c <__kernel_rem_pio2+0x9c>
 801372a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801372e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013732:	f7ec ff69 	bl	8000608 <__aeabi_dmul>
 8013736:	4602      	mov	r2, r0
 8013738:	460b      	mov	r3, r1
 801373a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801373e:	f7ec fdad 	bl	800029c <__adddf3>
 8013742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013746:	3601      	adds	r6, #1
 8013748:	9b06      	ldr	r3, [sp, #24]
 801374a:	429e      	cmp	r6, r3
 801374c:	f1a7 0708 	sub.w	r7, r7, #8
 8013750:	ddeb      	ble.n	801372a <__kernel_rem_pio2+0xaa>
 8013752:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013756:	3508      	adds	r5, #8
 8013758:	ecab 7b02 	vstmia	fp!, {d7}
 801375c:	f108 0801 	add.w	r8, r8, #1
 8013760:	e7ca      	b.n	80136f8 <__kernel_rem_pio2+0x78>
 8013762:	9b04      	ldr	r3, [sp, #16]
 8013764:	aa0c      	add	r2, sp, #48	; 0x30
 8013766:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801376a:	930b      	str	r3, [sp, #44]	; 0x2c
 801376c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801376e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013772:	9c04      	ldr	r4, [sp, #16]
 8013774:	930a      	str	r3, [sp, #40]	; 0x28
 8013776:	ab98      	add	r3, sp, #608	; 0x260
 8013778:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801377c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8013780:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8013784:	f8cd b008 	str.w	fp, [sp, #8]
 8013788:	4625      	mov	r5, r4
 801378a:	2d00      	cmp	r5, #0
 801378c:	dc78      	bgt.n	8013880 <__kernel_rem_pio2+0x200>
 801378e:	ec47 6b10 	vmov	d0, r6, r7
 8013792:	4650      	mov	r0, sl
 8013794:	f000 fbfc 	bl	8013f90 <scalbn>
 8013798:	ec57 6b10 	vmov	r6, r7, d0
 801379c:	2200      	movs	r2, #0
 801379e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80137a2:	ee10 0a10 	vmov	r0, s0
 80137a6:	4639      	mov	r1, r7
 80137a8:	f7ec ff2e 	bl	8000608 <__aeabi_dmul>
 80137ac:	ec41 0b10 	vmov	d0, r0, r1
 80137b0:	f000 fb66 	bl	8013e80 <floor>
 80137b4:	4b7f      	ldr	r3, [pc, #508]	; (80139b4 <__kernel_rem_pio2+0x334>)
 80137b6:	ec51 0b10 	vmov	r0, r1, d0
 80137ba:	2200      	movs	r2, #0
 80137bc:	f7ec ff24 	bl	8000608 <__aeabi_dmul>
 80137c0:	4602      	mov	r2, r0
 80137c2:	460b      	mov	r3, r1
 80137c4:	4630      	mov	r0, r6
 80137c6:	4639      	mov	r1, r7
 80137c8:	f7ec fd66 	bl	8000298 <__aeabi_dsub>
 80137cc:	460f      	mov	r7, r1
 80137ce:	4606      	mov	r6, r0
 80137d0:	f7ed f9ca 	bl	8000b68 <__aeabi_d2iz>
 80137d4:	9007      	str	r0, [sp, #28]
 80137d6:	f7ec fead 	bl	8000534 <__aeabi_i2d>
 80137da:	4602      	mov	r2, r0
 80137dc:	460b      	mov	r3, r1
 80137de:	4630      	mov	r0, r6
 80137e0:	4639      	mov	r1, r7
 80137e2:	f7ec fd59 	bl	8000298 <__aeabi_dsub>
 80137e6:	f1ba 0f00 	cmp.w	sl, #0
 80137ea:	4606      	mov	r6, r0
 80137ec:	460f      	mov	r7, r1
 80137ee:	dd70      	ble.n	80138d2 <__kernel_rem_pio2+0x252>
 80137f0:	1e62      	subs	r2, r4, #1
 80137f2:	ab0c      	add	r3, sp, #48	; 0x30
 80137f4:	9d07      	ldr	r5, [sp, #28]
 80137f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80137fa:	f1ca 0118 	rsb	r1, sl, #24
 80137fe:	fa40 f301 	asr.w	r3, r0, r1
 8013802:	441d      	add	r5, r3
 8013804:	408b      	lsls	r3, r1
 8013806:	1ac0      	subs	r0, r0, r3
 8013808:	ab0c      	add	r3, sp, #48	; 0x30
 801380a:	9507      	str	r5, [sp, #28]
 801380c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013810:	f1ca 0317 	rsb	r3, sl, #23
 8013814:	fa40 f303 	asr.w	r3, r0, r3
 8013818:	9302      	str	r3, [sp, #8]
 801381a:	9b02      	ldr	r3, [sp, #8]
 801381c:	2b00      	cmp	r3, #0
 801381e:	dd66      	ble.n	80138ee <__kernel_rem_pio2+0x26e>
 8013820:	9b07      	ldr	r3, [sp, #28]
 8013822:	2200      	movs	r2, #0
 8013824:	3301      	adds	r3, #1
 8013826:	9307      	str	r3, [sp, #28]
 8013828:	4615      	mov	r5, r2
 801382a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801382e:	4294      	cmp	r4, r2
 8013830:	f300 8099 	bgt.w	8013966 <__kernel_rem_pio2+0x2e6>
 8013834:	f1ba 0f00 	cmp.w	sl, #0
 8013838:	dd07      	ble.n	801384a <__kernel_rem_pio2+0x1ca>
 801383a:	f1ba 0f01 	cmp.w	sl, #1
 801383e:	f000 80a5 	beq.w	801398c <__kernel_rem_pio2+0x30c>
 8013842:	f1ba 0f02 	cmp.w	sl, #2
 8013846:	f000 80c1 	beq.w	80139cc <__kernel_rem_pio2+0x34c>
 801384a:	9b02      	ldr	r3, [sp, #8]
 801384c:	2b02      	cmp	r3, #2
 801384e:	d14e      	bne.n	80138ee <__kernel_rem_pio2+0x26e>
 8013850:	4632      	mov	r2, r6
 8013852:	463b      	mov	r3, r7
 8013854:	4958      	ldr	r1, [pc, #352]	; (80139b8 <__kernel_rem_pio2+0x338>)
 8013856:	2000      	movs	r0, #0
 8013858:	f7ec fd1e 	bl	8000298 <__aeabi_dsub>
 801385c:	4606      	mov	r6, r0
 801385e:	460f      	mov	r7, r1
 8013860:	2d00      	cmp	r5, #0
 8013862:	d044      	beq.n	80138ee <__kernel_rem_pio2+0x26e>
 8013864:	4650      	mov	r0, sl
 8013866:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80139a8 <__kernel_rem_pio2+0x328>
 801386a:	f000 fb91 	bl	8013f90 <scalbn>
 801386e:	4630      	mov	r0, r6
 8013870:	4639      	mov	r1, r7
 8013872:	ec53 2b10 	vmov	r2, r3, d0
 8013876:	f7ec fd0f 	bl	8000298 <__aeabi_dsub>
 801387a:	4606      	mov	r6, r0
 801387c:	460f      	mov	r7, r1
 801387e:	e036      	b.n	80138ee <__kernel_rem_pio2+0x26e>
 8013880:	4b4e      	ldr	r3, [pc, #312]	; (80139bc <__kernel_rem_pio2+0x33c>)
 8013882:	2200      	movs	r2, #0
 8013884:	4630      	mov	r0, r6
 8013886:	4639      	mov	r1, r7
 8013888:	f7ec febe 	bl	8000608 <__aeabi_dmul>
 801388c:	f7ed f96c 	bl	8000b68 <__aeabi_d2iz>
 8013890:	f7ec fe50 	bl	8000534 <__aeabi_i2d>
 8013894:	4b4a      	ldr	r3, [pc, #296]	; (80139c0 <__kernel_rem_pio2+0x340>)
 8013896:	2200      	movs	r2, #0
 8013898:	4680      	mov	r8, r0
 801389a:	4689      	mov	r9, r1
 801389c:	f7ec feb4 	bl	8000608 <__aeabi_dmul>
 80138a0:	4602      	mov	r2, r0
 80138a2:	460b      	mov	r3, r1
 80138a4:	4630      	mov	r0, r6
 80138a6:	4639      	mov	r1, r7
 80138a8:	f7ec fcf6 	bl	8000298 <__aeabi_dsub>
 80138ac:	f7ed f95c 	bl	8000b68 <__aeabi_d2iz>
 80138b0:	9b02      	ldr	r3, [sp, #8]
 80138b2:	f843 0b04 	str.w	r0, [r3], #4
 80138b6:	3d01      	subs	r5, #1
 80138b8:	9302      	str	r3, [sp, #8]
 80138ba:	ab70      	add	r3, sp, #448	; 0x1c0
 80138bc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80138c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138c4:	4640      	mov	r0, r8
 80138c6:	4649      	mov	r1, r9
 80138c8:	f7ec fce8 	bl	800029c <__adddf3>
 80138cc:	4606      	mov	r6, r0
 80138ce:	460f      	mov	r7, r1
 80138d0:	e75b      	b.n	801378a <__kernel_rem_pio2+0x10a>
 80138d2:	d105      	bne.n	80138e0 <__kernel_rem_pio2+0x260>
 80138d4:	1e63      	subs	r3, r4, #1
 80138d6:	aa0c      	add	r2, sp, #48	; 0x30
 80138d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80138dc:	15c3      	asrs	r3, r0, #23
 80138de:	e79b      	b.n	8013818 <__kernel_rem_pio2+0x198>
 80138e0:	4b38      	ldr	r3, [pc, #224]	; (80139c4 <__kernel_rem_pio2+0x344>)
 80138e2:	2200      	movs	r2, #0
 80138e4:	f7ed f916 	bl	8000b14 <__aeabi_dcmpge>
 80138e8:	2800      	cmp	r0, #0
 80138ea:	d139      	bne.n	8013960 <__kernel_rem_pio2+0x2e0>
 80138ec:	9002      	str	r0, [sp, #8]
 80138ee:	2200      	movs	r2, #0
 80138f0:	2300      	movs	r3, #0
 80138f2:	4630      	mov	r0, r6
 80138f4:	4639      	mov	r1, r7
 80138f6:	f7ed f8ef 	bl	8000ad8 <__aeabi_dcmpeq>
 80138fa:	2800      	cmp	r0, #0
 80138fc:	f000 80b4 	beq.w	8013a68 <__kernel_rem_pio2+0x3e8>
 8013900:	f104 3bff 	add.w	fp, r4, #4294967295
 8013904:	465b      	mov	r3, fp
 8013906:	2200      	movs	r2, #0
 8013908:	9904      	ldr	r1, [sp, #16]
 801390a:	428b      	cmp	r3, r1
 801390c:	da65      	bge.n	80139da <__kernel_rem_pio2+0x35a>
 801390e:	2a00      	cmp	r2, #0
 8013910:	d07b      	beq.n	8013a0a <__kernel_rem_pio2+0x38a>
 8013912:	ab0c      	add	r3, sp, #48	; 0x30
 8013914:	f1aa 0a18 	sub.w	sl, sl, #24
 8013918:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801391c:	2b00      	cmp	r3, #0
 801391e:	f000 80a0 	beq.w	8013a62 <__kernel_rem_pio2+0x3e2>
 8013922:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80139a8 <__kernel_rem_pio2+0x328>
 8013926:	4650      	mov	r0, sl
 8013928:	f000 fb32 	bl	8013f90 <scalbn>
 801392c:	4f23      	ldr	r7, [pc, #140]	; (80139bc <__kernel_rem_pio2+0x33c>)
 801392e:	ec55 4b10 	vmov	r4, r5, d0
 8013932:	46d8      	mov	r8, fp
 8013934:	2600      	movs	r6, #0
 8013936:	f1b8 0f00 	cmp.w	r8, #0
 801393a:	f280 80cf 	bge.w	8013adc <__kernel_rem_pio2+0x45c>
 801393e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80139a0 <__kernel_rem_pio2+0x320>
 8013942:	465f      	mov	r7, fp
 8013944:	f04f 0800 	mov.w	r8, #0
 8013948:	2f00      	cmp	r7, #0
 801394a:	f2c0 80fd 	blt.w	8013b48 <__kernel_rem_pio2+0x4c8>
 801394e:	ab70      	add	r3, sp, #448	; 0x1c0
 8013950:	f8df a074 	ldr.w	sl, [pc, #116]	; 80139c8 <__kernel_rem_pio2+0x348>
 8013954:	ec55 4b18 	vmov	r4, r5, d8
 8013958:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801395c:	2600      	movs	r6, #0
 801395e:	e0e5      	b.n	8013b2c <__kernel_rem_pio2+0x4ac>
 8013960:	2302      	movs	r3, #2
 8013962:	9302      	str	r3, [sp, #8]
 8013964:	e75c      	b.n	8013820 <__kernel_rem_pio2+0x1a0>
 8013966:	f8db 3000 	ldr.w	r3, [fp]
 801396a:	b955      	cbnz	r5, 8013982 <__kernel_rem_pio2+0x302>
 801396c:	b123      	cbz	r3, 8013978 <__kernel_rem_pio2+0x2f8>
 801396e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013972:	f8cb 3000 	str.w	r3, [fp]
 8013976:	2301      	movs	r3, #1
 8013978:	3201      	adds	r2, #1
 801397a:	f10b 0b04 	add.w	fp, fp, #4
 801397e:	461d      	mov	r5, r3
 8013980:	e755      	b.n	801382e <__kernel_rem_pio2+0x1ae>
 8013982:	1acb      	subs	r3, r1, r3
 8013984:	f8cb 3000 	str.w	r3, [fp]
 8013988:	462b      	mov	r3, r5
 801398a:	e7f5      	b.n	8013978 <__kernel_rem_pio2+0x2f8>
 801398c:	1e62      	subs	r2, r4, #1
 801398e:	ab0c      	add	r3, sp, #48	; 0x30
 8013990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013994:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013998:	a90c      	add	r1, sp, #48	; 0x30
 801399a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801399e:	e754      	b.n	801384a <__kernel_rem_pio2+0x1ca>
	...
 80139ac:	3ff00000 	.word	0x3ff00000
 80139b0:	08014b50 	.word	0x08014b50
 80139b4:	40200000 	.word	0x40200000
 80139b8:	3ff00000 	.word	0x3ff00000
 80139bc:	3e700000 	.word	0x3e700000
 80139c0:	41700000 	.word	0x41700000
 80139c4:	3fe00000 	.word	0x3fe00000
 80139c8:	08014b10 	.word	0x08014b10
 80139cc:	1e62      	subs	r2, r4, #1
 80139ce:	ab0c      	add	r3, sp, #48	; 0x30
 80139d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80139d8:	e7de      	b.n	8013998 <__kernel_rem_pio2+0x318>
 80139da:	a90c      	add	r1, sp, #48	; 0x30
 80139dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80139e0:	3b01      	subs	r3, #1
 80139e2:	430a      	orrs	r2, r1
 80139e4:	e790      	b.n	8013908 <__kernel_rem_pio2+0x288>
 80139e6:	3301      	adds	r3, #1
 80139e8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80139ec:	2900      	cmp	r1, #0
 80139ee:	d0fa      	beq.n	80139e6 <__kernel_rem_pio2+0x366>
 80139f0:	9a08      	ldr	r2, [sp, #32]
 80139f2:	18e3      	adds	r3, r4, r3
 80139f4:	18a6      	adds	r6, r4, r2
 80139f6:	aa20      	add	r2, sp, #128	; 0x80
 80139f8:	1c65      	adds	r5, r4, #1
 80139fa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80139fe:	9302      	str	r3, [sp, #8]
 8013a00:	9b02      	ldr	r3, [sp, #8]
 8013a02:	42ab      	cmp	r3, r5
 8013a04:	da04      	bge.n	8013a10 <__kernel_rem_pio2+0x390>
 8013a06:	461c      	mov	r4, r3
 8013a08:	e6b5      	b.n	8013776 <__kernel_rem_pio2+0xf6>
 8013a0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	e7eb      	b.n	80139e8 <__kernel_rem_pio2+0x368>
 8013a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013a16:	f7ec fd8d 	bl	8000534 <__aeabi_i2d>
 8013a1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a20:	46b3      	mov	fp, r6
 8013a22:	461c      	mov	r4, r3
 8013a24:	2700      	movs	r7, #0
 8013a26:	f04f 0800 	mov.w	r8, #0
 8013a2a:	f04f 0900 	mov.w	r9, #0
 8013a2e:	9b06      	ldr	r3, [sp, #24]
 8013a30:	429f      	cmp	r7, r3
 8013a32:	dd06      	ble.n	8013a42 <__kernel_rem_pio2+0x3c2>
 8013a34:	ab70      	add	r3, sp, #448	; 0x1c0
 8013a36:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013a3a:	e9c3 8900 	strd	r8, r9, [r3]
 8013a3e:	3501      	adds	r5, #1
 8013a40:	e7de      	b.n	8013a00 <__kernel_rem_pio2+0x380>
 8013a42:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013a46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013a4a:	f7ec fddd 	bl	8000608 <__aeabi_dmul>
 8013a4e:	4602      	mov	r2, r0
 8013a50:	460b      	mov	r3, r1
 8013a52:	4640      	mov	r0, r8
 8013a54:	4649      	mov	r1, r9
 8013a56:	f7ec fc21 	bl	800029c <__adddf3>
 8013a5a:	3701      	adds	r7, #1
 8013a5c:	4680      	mov	r8, r0
 8013a5e:	4689      	mov	r9, r1
 8013a60:	e7e5      	b.n	8013a2e <__kernel_rem_pio2+0x3ae>
 8013a62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013a66:	e754      	b.n	8013912 <__kernel_rem_pio2+0x292>
 8013a68:	ec47 6b10 	vmov	d0, r6, r7
 8013a6c:	f1ca 0000 	rsb	r0, sl, #0
 8013a70:	f000 fa8e 	bl	8013f90 <scalbn>
 8013a74:	ec57 6b10 	vmov	r6, r7, d0
 8013a78:	4b9f      	ldr	r3, [pc, #636]	; (8013cf8 <__kernel_rem_pio2+0x678>)
 8013a7a:	ee10 0a10 	vmov	r0, s0
 8013a7e:	2200      	movs	r2, #0
 8013a80:	4639      	mov	r1, r7
 8013a82:	f7ed f847 	bl	8000b14 <__aeabi_dcmpge>
 8013a86:	b300      	cbz	r0, 8013aca <__kernel_rem_pio2+0x44a>
 8013a88:	4b9c      	ldr	r3, [pc, #624]	; (8013cfc <__kernel_rem_pio2+0x67c>)
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	4630      	mov	r0, r6
 8013a8e:	4639      	mov	r1, r7
 8013a90:	f7ec fdba 	bl	8000608 <__aeabi_dmul>
 8013a94:	f7ed f868 	bl	8000b68 <__aeabi_d2iz>
 8013a98:	4605      	mov	r5, r0
 8013a9a:	f7ec fd4b 	bl	8000534 <__aeabi_i2d>
 8013a9e:	4b96      	ldr	r3, [pc, #600]	; (8013cf8 <__kernel_rem_pio2+0x678>)
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	f7ec fdb1 	bl	8000608 <__aeabi_dmul>
 8013aa6:	460b      	mov	r3, r1
 8013aa8:	4602      	mov	r2, r0
 8013aaa:	4639      	mov	r1, r7
 8013aac:	4630      	mov	r0, r6
 8013aae:	f7ec fbf3 	bl	8000298 <__aeabi_dsub>
 8013ab2:	f7ed f859 	bl	8000b68 <__aeabi_d2iz>
 8013ab6:	f104 0b01 	add.w	fp, r4, #1
 8013aba:	ab0c      	add	r3, sp, #48	; 0x30
 8013abc:	f10a 0a18 	add.w	sl, sl, #24
 8013ac0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013ac4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8013ac8:	e72b      	b.n	8013922 <__kernel_rem_pio2+0x2a2>
 8013aca:	4630      	mov	r0, r6
 8013acc:	4639      	mov	r1, r7
 8013ace:	f7ed f84b 	bl	8000b68 <__aeabi_d2iz>
 8013ad2:	ab0c      	add	r3, sp, #48	; 0x30
 8013ad4:	46a3      	mov	fp, r4
 8013ad6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013ada:	e722      	b.n	8013922 <__kernel_rem_pio2+0x2a2>
 8013adc:	ab70      	add	r3, sp, #448	; 0x1c0
 8013ade:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8013ae2:	ab0c      	add	r3, sp, #48	; 0x30
 8013ae4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013ae8:	f7ec fd24 	bl	8000534 <__aeabi_i2d>
 8013aec:	4622      	mov	r2, r4
 8013aee:	462b      	mov	r3, r5
 8013af0:	f7ec fd8a 	bl	8000608 <__aeabi_dmul>
 8013af4:	4632      	mov	r2, r6
 8013af6:	e9c9 0100 	strd	r0, r1, [r9]
 8013afa:	463b      	mov	r3, r7
 8013afc:	4620      	mov	r0, r4
 8013afe:	4629      	mov	r1, r5
 8013b00:	f7ec fd82 	bl	8000608 <__aeabi_dmul>
 8013b04:	f108 38ff 	add.w	r8, r8, #4294967295
 8013b08:	4604      	mov	r4, r0
 8013b0a:	460d      	mov	r5, r1
 8013b0c:	e713      	b.n	8013936 <__kernel_rem_pio2+0x2b6>
 8013b0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8013b12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8013b16:	f7ec fd77 	bl	8000608 <__aeabi_dmul>
 8013b1a:	4602      	mov	r2, r0
 8013b1c:	460b      	mov	r3, r1
 8013b1e:	4620      	mov	r0, r4
 8013b20:	4629      	mov	r1, r5
 8013b22:	f7ec fbbb 	bl	800029c <__adddf3>
 8013b26:	3601      	adds	r6, #1
 8013b28:	4604      	mov	r4, r0
 8013b2a:	460d      	mov	r5, r1
 8013b2c:	9b04      	ldr	r3, [sp, #16]
 8013b2e:	429e      	cmp	r6, r3
 8013b30:	dc01      	bgt.n	8013b36 <__kernel_rem_pio2+0x4b6>
 8013b32:	45b0      	cmp	r8, r6
 8013b34:	daeb      	bge.n	8013b0e <__kernel_rem_pio2+0x48e>
 8013b36:	ab48      	add	r3, sp, #288	; 0x120
 8013b38:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013b3c:	e9c3 4500 	strd	r4, r5, [r3]
 8013b40:	3f01      	subs	r7, #1
 8013b42:	f108 0801 	add.w	r8, r8, #1
 8013b46:	e6ff      	b.n	8013948 <__kernel_rem_pio2+0x2c8>
 8013b48:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013b4a:	2b02      	cmp	r3, #2
 8013b4c:	dc0b      	bgt.n	8013b66 <__kernel_rem_pio2+0x4e6>
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	dc6e      	bgt.n	8013c30 <__kernel_rem_pio2+0x5b0>
 8013b52:	d045      	beq.n	8013be0 <__kernel_rem_pio2+0x560>
 8013b54:	9b07      	ldr	r3, [sp, #28]
 8013b56:	f003 0007 	and.w	r0, r3, #7
 8013b5a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8013b5e:	ecbd 8b02 	vpop	{d8}
 8013b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b66:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013b68:	2b03      	cmp	r3, #3
 8013b6a:	d1f3      	bne.n	8013b54 <__kernel_rem_pio2+0x4d4>
 8013b6c:	ab48      	add	r3, sp, #288	; 0x120
 8013b6e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8013b72:	46d0      	mov	r8, sl
 8013b74:	46d9      	mov	r9, fp
 8013b76:	f1b9 0f00 	cmp.w	r9, #0
 8013b7a:	f1a8 0808 	sub.w	r8, r8, #8
 8013b7e:	dc64      	bgt.n	8013c4a <__kernel_rem_pio2+0x5ca>
 8013b80:	465c      	mov	r4, fp
 8013b82:	2c01      	cmp	r4, #1
 8013b84:	f1aa 0a08 	sub.w	sl, sl, #8
 8013b88:	dc7e      	bgt.n	8013c88 <__kernel_rem_pio2+0x608>
 8013b8a:	2000      	movs	r0, #0
 8013b8c:	2100      	movs	r1, #0
 8013b8e:	f1bb 0f01 	cmp.w	fp, #1
 8013b92:	f300 8097 	bgt.w	8013cc4 <__kernel_rem_pio2+0x644>
 8013b96:	9b02      	ldr	r3, [sp, #8]
 8013b98:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8013b9c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	f040 8099 	bne.w	8013cd8 <__kernel_rem_pio2+0x658>
 8013ba6:	9b01      	ldr	r3, [sp, #4]
 8013ba8:	e9c3 5600 	strd	r5, r6, [r3]
 8013bac:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8013bb0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013bb4:	e7ce      	b.n	8013b54 <__kernel_rem_pio2+0x4d4>
 8013bb6:	ab48      	add	r3, sp, #288	; 0x120
 8013bb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bc0:	f7ec fb6c 	bl	800029c <__adddf3>
 8013bc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013bc8:	f1bb 0f00 	cmp.w	fp, #0
 8013bcc:	daf3      	bge.n	8013bb6 <__kernel_rem_pio2+0x536>
 8013bce:	9b02      	ldr	r3, [sp, #8]
 8013bd0:	b113      	cbz	r3, 8013bd8 <__kernel_rem_pio2+0x558>
 8013bd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013bd6:	4619      	mov	r1, r3
 8013bd8:	9b01      	ldr	r3, [sp, #4]
 8013bda:	e9c3 0100 	strd	r0, r1, [r3]
 8013bde:	e7b9      	b.n	8013b54 <__kernel_rem_pio2+0x4d4>
 8013be0:	2000      	movs	r0, #0
 8013be2:	2100      	movs	r1, #0
 8013be4:	e7f0      	b.n	8013bc8 <__kernel_rem_pio2+0x548>
 8013be6:	ab48      	add	r3, sp, #288	; 0x120
 8013be8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bf0:	f7ec fb54 	bl	800029c <__adddf3>
 8013bf4:	3c01      	subs	r4, #1
 8013bf6:	2c00      	cmp	r4, #0
 8013bf8:	daf5      	bge.n	8013be6 <__kernel_rem_pio2+0x566>
 8013bfa:	9b02      	ldr	r3, [sp, #8]
 8013bfc:	b1e3      	cbz	r3, 8013c38 <__kernel_rem_pio2+0x5b8>
 8013bfe:	4602      	mov	r2, r0
 8013c00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013c04:	9c01      	ldr	r4, [sp, #4]
 8013c06:	e9c4 2300 	strd	r2, r3, [r4]
 8013c0a:	4602      	mov	r2, r0
 8013c0c:	460b      	mov	r3, r1
 8013c0e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8013c12:	f7ec fb41 	bl	8000298 <__aeabi_dsub>
 8013c16:	ad4a      	add	r5, sp, #296	; 0x128
 8013c18:	2401      	movs	r4, #1
 8013c1a:	45a3      	cmp	fp, r4
 8013c1c:	da0f      	bge.n	8013c3e <__kernel_rem_pio2+0x5be>
 8013c1e:	9b02      	ldr	r3, [sp, #8]
 8013c20:	b113      	cbz	r3, 8013c28 <__kernel_rem_pio2+0x5a8>
 8013c22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013c26:	4619      	mov	r1, r3
 8013c28:	9b01      	ldr	r3, [sp, #4]
 8013c2a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013c2e:	e791      	b.n	8013b54 <__kernel_rem_pio2+0x4d4>
 8013c30:	465c      	mov	r4, fp
 8013c32:	2000      	movs	r0, #0
 8013c34:	2100      	movs	r1, #0
 8013c36:	e7de      	b.n	8013bf6 <__kernel_rem_pio2+0x576>
 8013c38:	4602      	mov	r2, r0
 8013c3a:	460b      	mov	r3, r1
 8013c3c:	e7e2      	b.n	8013c04 <__kernel_rem_pio2+0x584>
 8013c3e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8013c42:	f7ec fb2b 	bl	800029c <__adddf3>
 8013c46:	3401      	adds	r4, #1
 8013c48:	e7e7      	b.n	8013c1a <__kernel_rem_pio2+0x59a>
 8013c4a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8013c4e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8013c52:	4620      	mov	r0, r4
 8013c54:	4632      	mov	r2, r6
 8013c56:	463b      	mov	r3, r7
 8013c58:	4629      	mov	r1, r5
 8013c5a:	f7ec fb1f 	bl	800029c <__adddf3>
 8013c5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c62:	4602      	mov	r2, r0
 8013c64:	460b      	mov	r3, r1
 8013c66:	4620      	mov	r0, r4
 8013c68:	4629      	mov	r1, r5
 8013c6a:	f7ec fb15 	bl	8000298 <__aeabi_dsub>
 8013c6e:	4632      	mov	r2, r6
 8013c70:	463b      	mov	r3, r7
 8013c72:	f7ec fb13 	bl	800029c <__adddf3>
 8013c76:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013c7a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8013c7e:	ed88 7b00 	vstr	d7, [r8]
 8013c82:	f109 39ff 	add.w	r9, r9, #4294967295
 8013c86:	e776      	b.n	8013b76 <__kernel_rem_pio2+0x4f6>
 8013c88:	e9da 8900 	ldrd	r8, r9, [sl]
 8013c8c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013c90:	4640      	mov	r0, r8
 8013c92:	4632      	mov	r2, r6
 8013c94:	463b      	mov	r3, r7
 8013c96:	4649      	mov	r1, r9
 8013c98:	f7ec fb00 	bl	800029c <__adddf3>
 8013c9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ca0:	4602      	mov	r2, r0
 8013ca2:	460b      	mov	r3, r1
 8013ca4:	4640      	mov	r0, r8
 8013ca6:	4649      	mov	r1, r9
 8013ca8:	f7ec faf6 	bl	8000298 <__aeabi_dsub>
 8013cac:	4632      	mov	r2, r6
 8013cae:	463b      	mov	r3, r7
 8013cb0:	f7ec faf4 	bl	800029c <__adddf3>
 8013cb4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013cb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013cbc:	ed8a 7b00 	vstr	d7, [sl]
 8013cc0:	3c01      	subs	r4, #1
 8013cc2:	e75e      	b.n	8013b82 <__kernel_rem_pio2+0x502>
 8013cc4:	ab48      	add	r3, sp, #288	; 0x120
 8013cc6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cce:	f7ec fae5 	bl	800029c <__adddf3>
 8013cd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013cd6:	e75a      	b.n	8013b8e <__kernel_rem_pio2+0x50e>
 8013cd8:	9b01      	ldr	r3, [sp, #4]
 8013cda:	9a01      	ldr	r2, [sp, #4]
 8013cdc:	601d      	str	r5, [r3, #0]
 8013cde:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8013ce2:	605c      	str	r4, [r3, #4]
 8013ce4:	609f      	str	r7, [r3, #8]
 8013ce6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8013cea:	60d3      	str	r3, [r2, #12]
 8013cec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013cf0:	6110      	str	r0, [r2, #16]
 8013cf2:	6153      	str	r3, [r2, #20]
 8013cf4:	e72e      	b.n	8013b54 <__kernel_rem_pio2+0x4d4>
 8013cf6:	bf00      	nop
 8013cf8:	41700000 	.word	0x41700000
 8013cfc:	3e700000 	.word	0x3e700000

08013d00 <__kernel_sin>:
 8013d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d04:	ed2d 8b04 	vpush	{d8-d9}
 8013d08:	eeb0 8a41 	vmov.f32	s16, s2
 8013d0c:	eef0 8a61 	vmov.f32	s17, s3
 8013d10:	ec55 4b10 	vmov	r4, r5, d0
 8013d14:	b083      	sub	sp, #12
 8013d16:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013d1a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013d1e:	9001      	str	r0, [sp, #4]
 8013d20:	da06      	bge.n	8013d30 <__kernel_sin+0x30>
 8013d22:	ee10 0a10 	vmov	r0, s0
 8013d26:	4629      	mov	r1, r5
 8013d28:	f7ec ff1e 	bl	8000b68 <__aeabi_d2iz>
 8013d2c:	2800      	cmp	r0, #0
 8013d2e:	d051      	beq.n	8013dd4 <__kernel_sin+0xd4>
 8013d30:	4622      	mov	r2, r4
 8013d32:	462b      	mov	r3, r5
 8013d34:	4620      	mov	r0, r4
 8013d36:	4629      	mov	r1, r5
 8013d38:	f7ec fc66 	bl	8000608 <__aeabi_dmul>
 8013d3c:	4682      	mov	sl, r0
 8013d3e:	468b      	mov	fp, r1
 8013d40:	4602      	mov	r2, r0
 8013d42:	460b      	mov	r3, r1
 8013d44:	4620      	mov	r0, r4
 8013d46:	4629      	mov	r1, r5
 8013d48:	f7ec fc5e 	bl	8000608 <__aeabi_dmul>
 8013d4c:	a341      	add	r3, pc, #260	; (adr r3, 8013e54 <__kernel_sin+0x154>)
 8013d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d52:	4680      	mov	r8, r0
 8013d54:	4689      	mov	r9, r1
 8013d56:	4650      	mov	r0, sl
 8013d58:	4659      	mov	r1, fp
 8013d5a:	f7ec fc55 	bl	8000608 <__aeabi_dmul>
 8013d5e:	a33f      	add	r3, pc, #252	; (adr r3, 8013e5c <__kernel_sin+0x15c>)
 8013d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d64:	f7ec fa98 	bl	8000298 <__aeabi_dsub>
 8013d68:	4652      	mov	r2, sl
 8013d6a:	465b      	mov	r3, fp
 8013d6c:	f7ec fc4c 	bl	8000608 <__aeabi_dmul>
 8013d70:	a33c      	add	r3, pc, #240	; (adr r3, 8013e64 <__kernel_sin+0x164>)
 8013d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d76:	f7ec fa91 	bl	800029c <__adddf3>
 8013d7a:	4652      	mov	r2, sl
 8013d7c:	465b      	mov	r3, fp
 8013d7e:	f7ec fc43 	bl	8000608 <__aeabi_dmul>
 8013d82:	a33a      	add	r3, pc, #232	; (adr r3, 8013e6c <__kernel_sin+0x16c>)
 8013d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d88:	f7ec fa86 	bl	8000298 <__aeabi_dsub>
 8013d8c:	4652      	mov	r2, sl
 8013d8e:	465b      	mov	r3, fp
 8013d90:	f7ec fc3a 	bl	8000608 <__aeabi_dmul>
 8013d94:	a337      	add	r3, pc, #220	; (adr r3, 8013e74 <__kernel_sin+0x174>)
 8013d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d9a:	f7ec fa7f 	bl	800029c <__adddf3>
 8013d9e:	9b01      	ldr	r3, [sp, #4]
 8013da0:	4606      	mov	r6, r0
 8013da2:	460f      	mov	r7, r1
 8013da4:	b9eb      	cbnz	r3, 8013de2 <__kernel_sin+0xe2>
 8013da6:	4602      	mov	r2, r0
 8013da8:	460b      	mov	r3, r1
 8013daa:	4650      	mov	r0, sl
 8013dac:	4659      	mov	r1, fp
 8013dae:	f7ec fc2b 	bl	8000608 <__aeabi_dmul>
 8013db2:	a325      	add	r3, pc, #148	; (adr r3, 8013e48 <__kernel_sin+0x148>)
 8013db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db8:	f7ec fa6e 	bl	8000298 <__aeabi_dsub>
 8013dbc:	4642      	mov	r2, r8
 8013dbe:	464b      	mov	r3, r9
 8013dc0:	f7ec fc22 	bl	8000608 <__aeabi_dmul>
 8013dc4:	4602      	mov	r2, r0
 8013dc6:	460b      	mov	r3, r1
 8013dc8:	4620      	mov	r0, r4
 8013dca:	4629      	mov	r1, r5
 8013dcc:	f7ec fa66 	bl	800029c <__adddf3>
 8013dd0:	4604      	mov	r4, r0
 8013dd2:	460d      	mov	r5, r1
 8013dd4:	ec45 4b10 	vmov	d0, r4, r5
 8013dd8:	b003      	add	sp, #12
 8013dda:	ecbd 8b04 	vpop	{d8-d9}
 8013dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013de2:	4b1b      	ldr	r3, [pc, #108]	; (8013e50 <__kernel_sin+0x150>)
 8013de4:	ec51 0b18 	vmov	r0, r1, d8
 8013de8:	2200      	movs	r2, #0
 8013dea:	f7ec fc0d 	bl	8000608 <__aeabi_dmul>
 8013dee:	4632      	mov	r2, r6
 8013df0:	ec41 0b19 	vmov	d9, r0, r1
 8013df4:	463b      	mov	r3, r7
 8013df6:	4640      	mov	r0, r8
 8013df8:	4649      	mov	r1, r9
 8013dfa:	f7ec fc05 	bl	8000608 <__aeabi_dmul>
 8013dfe:	4602      	mov	r2, r0
 8013e00:	460b      	mov	r3, r1
 8013e02:	ec51 0b19 	vmov	r0, r1, d9
 8013e06:	f7ec fa47 	bl	8000298 <__aeabi_dsub>
 8013e0a:	4652      	mov	r2, sl
 8013e0c:	465b      	mov	r3, fp
 8013e0e:	f7ec fbfb 	bl	8000608 <__aeabi_dmul>
 8013e12:	ec53 2b18 	vmov	r2, r3, d8
 8013e16:	f7ec fa3f 	bl	8000298 <__aeabi_dsub>
 8013e1a:	a30b      	add	r3, pc, #44	; (adr r3, 8013e48 <__kernel_sin+0x148>)
 8013e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e20:	4606      	mov	r6, r0
 8013e22:	460f      	mov	r7, r1
 8013e24:	4640      	mov	r0, r8
 8013e26:	4649      	mov	r1, r9
 8013e28:	f7ec fbee 	bl	8000608 <__aeabi_dmul>
 8013e2c:	4602      	mov	r2, r0
 8013e2e:	460b      	mov	r3, r1
 8013e30:	4630      	mov	r0, r6
 8013e32:	4639      	mov	r1, r7
 8013e34:	f7ec fa32 	bl	800029c <__adddf3>
 8013e38:	4602      	mov	r2, r0
 8013e3a:	460b      	mov	r3, r1
 8013e3c:	4620      	mov	r0, r4
 8013e3e:	4629      	mov	r1, r5
 8013e40:	f7ec fa2a 	bl	8000298 <__aeabi_dsub>
 8013e44:	e7c4      	b.n	8013dd0 <__kernel_sin+0xd0>
 8013e46:	bf00      	nop
 8013e48:	55555549 	.word	0x55555549
 8013e4c:	3fc55555 	.word	0x3fc55555
 8013e50:	3fe00000 	.word	0x3fe00000
 8013e54:	5acfd57c 	.word	0x5acfd57c
 8013e58:	3de5d93a 	.word	0x3de5d93a
 8013e5c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013e60:	3e5ae5e6 	.word	0x3e5ae5e6
 8013e64:	57b1fe7d 	.word	0x57b1fe7d
 8013e68:	3ec71de3 	.word	0x3ec71de3
 8013e6c:	19c161d5 	.word	0x19c161d5
 8013e70:	3f2a01a0 	.word	0x3f2a01a0
 8013e74:	1110f8a6 	.word	0x1110f8a6
 8013e78:	3f811111 	.word	0x3f811111
 8013e7c:	00000000 	.word	0x00000000

08013e80 <floor>:
 8013e80:	ec51 0b10 	vmov	r0, r1, d0
 8013e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013e8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013e90:	2e13      	cmp	r6, #19
 8013e92:	ee10 5a10 	vmov	r5, s0
 8013e96:	ee10 8a10 	vmov	r8, s0
 8013e9a:	460c      	mov	r4, r1
 8013e9c:	dc32      	bgt.n	8013f04 <floor+0x84>
 8013e9e:	2e00      	cmp	r6, #0
 8013ea0:	da14      	bge.n	8013ecc <floor+0x4c>
 8013ea2:	a333      	add	r3, pc, #204	; (adr r3, 8013f70 <floor+0xf0>)
 8013ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ea8:	f7ec f9f8 	bl	800029c <__adddf3>
 8013eac:	2200      	movs	r2, #0
 8013eae:	2300      	movs	r3, #0
 8013eb0:	f7ec fe3a 	bl	8000b28 <__aeabi_dcmpgt>
 8013eb4:	b138      	cbz	r0, 8013ec6 <floor+0x46>
 8013eb6:	2c00      	cmp	r4, #0
 8013eb8:	da57      	bge.n	8013f6a <floor+0xea>
 8013eba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013ebe:	431d      	orrs	r5, r3
 8013ec0:	d001      	beq.n	8013ec6 <floor+0x46>
 8013ec2:	4c2d      	ldr	r4, [pc, #180]	; (8013f78 <floor+0xf8>)
 8013ec4:	2500      	movs	r5, #0
 8013ec6:	4621      	mov	r1, r4
 8013ec8:	4628      	mov	r0, r5
 8013eca:	e025      	b.n	8013f18 <floor+0x98>
 8013ecc:	4f2b      	ldr	r7, [pc, #172]	; (8013f7c <floor+0xfc>)
 8013ece:	4137      	asrs	r7, r6
 8013ed0:	ea01 0307 	and.w	r3, r1, r7
 8013ed4:	4303      	orrs	r3, r0
 8013ed6:	d01f      	beq.n	8013f18 <floor+0x98>
 8013ed8:	a325      	add	r3, pc, #148	; (adr r3, 8013f70 <floor+0xf0>)
 8013eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ede:	f7ec f9dd 	bl	800029c <__adddf3>
 8013ee2:	2200      	movs	r2, #0
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	f7ec fe1f 	bl	8000b28 <__aeabi_dcmpgt>
 8013eea:	2800      	cmp	r0, #0
 8013eec:	d0eb      	beq.n	8013ec6 <floor+0x46>
 8013eee:	2c00      	cmp	r4, #0
 8013ef0:	bfbe      	ittt	lt
 8013ef2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013ef6:	fa43 f606 	asrlt.w	r6, r3, r6
 8013efa:	19a4      	addlt	r4, r4, r6
 8013efc:	ea24 0407 	bic.w	r4, r4, r7
 8013f00:	2500      	movs	r5, #0
 8013f02:	e7e0      	b.n	8013ec6 <floor+0x46>
 8013f04:	2e33      	cmp	r6, #51	; 0x33
 8013f06:	dd0b      	ble.n	8013f20 <floor+0xa0>
 8013f08:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013f0c:	d104      	bne.n	8013f18 <floor+0x98>
 8013f0e:	ee10 2a10 	vmov	r2, s0
 8013f12:	460b      	mov	r3, r1
 8013f14:	f7ec f9c2 	bl	800029c <__adddf3>
 8013f18:	ec41 0b10 	vmov	d0, r0, r1
 8013f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f20:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013f24:	f04f 33ff 	mov.w	r3, #4294967295
 8013f28:	fa23 f707 	lsr.w	r7, r3, r7
 8013f2c:	4207      	tst	r7, r0
 8013f2e:	d0f3      	beq.n	8013f18 <floor+0x98>
 8013f30:	a30f      	add	r3, pc, #60	; (adr r3, 8013f70 <floor+0xf0>)
 8013f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f36:	f7ec f9b1 	bl	800029c <__adddf3>
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	f7ec fdf3 	bl	8000b28 <__aeabi_dcmpgt>
 8013f42:	2800      	cmp	r0, #0
 8013f44:	d0bf      	beq.n	8013ec6 <floor+0x46>
 8013f46:	2c00      	cmp	r4, #0
 8013f48:	da02      	bge.n	8013f50 <floor+0xd0>
 8013f4a:	2e14      	cmp	r6, #20
 8013f4c:	d103      	bne.n	8013f56 <floor+0xd6>
 8013f4e:	3401      	adds	r4, #1
 8013f50:	ea25 0507 	bic.w	r5, r5, r7
 8013f54:	e7b7      	b.n	8013ec6 <floor+0x46>
 8013f56:	2301      	movs	r3, #1
 8013f58:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013f5c:	fa03 f606 	lsl.w	r6, r3, r6
 8013f60:	4435      	add	r5, r6
 8013f62:	4545      	cmp	r5, r8
 8013f64:	bf38      	it	cc
 8013f66:	18e4      	addcc	r4, r4, r3
 8013f68:	e7f2      	b.n	8013f50 <floor+0xd0>
 8013f6a:	2500      	movs	r5, #0
 8013f6c:	462c      	mov	r4, r5
 8013f6e:	e7aa      	b.n	8013ec6 <floor+0x46>
 8013f70:	8800759c 	.word	0x8800759c
 8013f74:	7e37e43c 	.word	0x7e37e43c
 8013f78:	bff00000 	.word	0xbff00000
 8013f7c:	000fffff 	.word	0x000fffff

08013f80 <nan>:
 8013f80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013f88 <nan+0x8>
 8013f84:	4770      	bx	lr
 8013f86:	bf00      	nop
 8013f88:	00000000 	.word	0x00000000
 8013f8c:	7ff80000 	.word	0x7ff80000

08013f90 <scalbn>:
 8013f90:	b570      	push	{r4, r5, r6, lr}
 8013f92:	ec55 4b10 	vmov	r4, r5, d0
 8013f96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013f9a:	4606      	mov	r6, r0
 8013f9c:	462b      	mov	r3, r5
 8013f9e:	b99a      	cbnz	r2, 8013fc8 <scalbn+0x38>
 8013fa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013fa4:	4323      	orrs	r3, r4
 8013fa6:	d036      	beq.n	8014016 <scalbn+0x86>
 8013fa8:	4b39      	ldr	r3, [pc, #228]	; (8014090 <scalbn+0x100>)
 8013faa:	4629      	mov	r1, r5
 8013fac:	ee10 0a10 	vmov	r0, s0
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	f7ec fb29 	bl	8000608 <__aeabi_dmul>
 8013fb6:	4b37      	ldr	r3, [pc, #220]	; (8014094 <scalbn+0x104>)
 8013fb8:	429e      	cmp	r6, r3
 8013fba:	4604      	mov	r4, r0
 8013fbc:	460d      	mov	r5, r1
 8013fbe:	da10      	bge.n	8013fe2 <scalbn+0x52>
 8013fc0:	a32b      	add	r3, pc, #172	; (adr r3, 8014070 <scalbn+0xe0>)
 8013fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc6:	e03a      	b.n	801403e <scalbn+0xae>
 8013fc8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013fcc:	428a      	cmp	r2, r1
 8013fce:	d10c      	bne.n	8013fea <scalbn+0x5a>
 8013fd0:	ee10 2a10 	vmov	r2, s0
 8013fd4:	4620      	mov	r0, r4
 8013fd6:	4629      	mov	r1, r5
 8013fd8:	f7ec f960 	bl	800029c <__adddf3>
 8013fdc:	4604      	mov	r4, r0
 8013fde:	460d      	mov	r5, r1
 8013fe0:	e019      	b.n	8014016 <scalbn+0x86>
 8013fe2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013fe6:	460b      	mov	r3, r1
 8013fe8:	3a36      	subs	r2, #54	; 0x36
 8013fea:	4432      	add	r2, r6
 8013fec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013ff0:	428a      	cmp	r2, r1
 8013ff2:	dd08      	ble.n	8014006 <scalbn+0x76>
 8013ff4:	2d00      	cmp	r5, #0
 8013ff6:	a120      	add	r1, pc, #128	; (adr r1, 8014078 <scalbn+0xe8>)
 8013ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ffc:	da1c      	bge.n	8014038 <scalbn+0xa8>
 8013ffe:	a120      	add	r1, pc, #128	; (adr r1, 8014080 <scalbn+0xf0>)
 8014000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014004:	e018      	b.n	8014038 <scalbn+0xa8>
 8014006:	2a00      	cmp	r2, #0
 8014008:	dd08      	ble.n	801401c <scalbn+0x8c>
 801400a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801400e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014012:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014016:	ec45 4b10 	vmov	d0, r4, r5
 801401a:	bd70      	pop	{r4, r5, r6, pc}
 801401c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014020:	da19      	bge.n	8014056 <scalbn+0xc6>
 8014022:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014026:	429e      	cmp	r6, r3
 8014028:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801402c:	dd0a      	ble.n	8014044 <scalbn+0xb4>
 801402e:	a112      	add	r1, pc, #72	; (adr r1, 8014078 <scalbn+0xe8>)
 8014030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d1e2      	bne.n	8013ffe <scalbn+0x6e>
 8014038:	a30f      	add	r3, pc, #60	; (adr r3, 8014078 <scalbn+0xe8>)
 801403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801403e:	f7ec fae3 	bl	8000608 <__aeabi_dmul>
 8014042:	e7cb      	b.n	8013fdc <scalbn+0x4c>
 8014044:	a10a      	add	r1, pc, #40	; (adr r1, 8014070 <scalbn+0xe0>)
 8014046:	e9d1 0100 	ldrd	r0, r1, [r1]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d0b8      	beq.n	8013fc0 <scalbn+0x30>
 801404e:	a10e      	add	r1, pc, #56	; (adr r1, 8014088 <scalbn+0xf8>)
 8014050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014054:	e7b4      	b.n	8013fc0 <scalbn+0x30>
 8014056:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801405a:	3236      	adds	r2, #54	; 0x36
 801405c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014060:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014064:	4620      	mov	r0, r4
 8014066:	4b0c      	ldr	r3, [pc, #48]	; (8014098 <scalbn+0x108>)
 8014068:	2200      	movs	r2, #0
 801406a:	e7e8      	b.n	801403e <scalbn+0xae>
 801406c:	f3af 8000 	nop.w
 8014070:	c2f8f359 	.word	0xc2f8f359
 8014074:	01a56e1f 	.word	0x01a56e1f
 8014078:	8800759c 	.word	0x8800759c
 801407c:	7e37e43c 	.word	0x7e37e43c
 8014080:	8800759c 	.word	0x8800759c
 8014084:	fe37e43c 	.word	0xfe37e43c
 8014088:	c2f8f359 	.word	0xc2f8f359
 801408c:	81a56e1f 	.word	0x81a56e1f
 8014090:	43500000 	.word	0x43500000
 8014094:	ffff3cb0 	.word	0xffff3cb0
 8014098:	3c900000 	.word	0x3c900000

0801409c <_init>:
 801409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801409e:	bf00      	nop
 80140a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140a2:	bc08      	pop	{r3}
 80140a4:	469e      	mov	lr, r3
 80140a6:	4770      	bx	lr

080140a8 <_fini>:
 80140a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140aa:	bf00      	nop
 80140ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140ae:	bc08      	pop	{r3}
 80140b0:	469e      	mov	lr, r3
 80140b2:	4770      	bx	lr
