
Robochess_2021_mainboard_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800fe10  0800fe10  0001fe10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010264  08010264  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08010264  08010264  00020264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801026c  0801026c  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801026c  0801026c  0002026c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010270  08010270  00020270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08010274  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000adfc  20000080  080102f4  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ae7c  080102f4  0003ae7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000273cc  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057cd  00000000  00000000  0005747c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  0005cc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af0  00000000  00000000  0005e948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d676  00000000  00000000  00060438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022847  00000000  00000000  0007daae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8953  00000000  00000000  000a02f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00148c48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008168  00000000  00000000  00148c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fdf8 	.word	0x0800fdf8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800fdf8 	.word	0x0800fdf8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <HAL_I2C_ErrorCallback>:
uint16_t data_AS5600_M1,data_AS5600_M2;

bool FLAG_AS5600_M1 = HAL_OK, FLAG_AS5600_M2 = HAL_OK;

// Handler I2C Error
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==AS5600_1_I2C){
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <HAL_I2C_ErrorCallback+0x34>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d102      	bne.n	8000f08 <HAL_I2C_ErrorCallback+0x18>
       FLAG_AS5600_M1 = HAL_ERROR;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_I2C_ErrorCallback+0x38>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
	}
	if(hi2c->Instance==AS5600_2_I2C){
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_I2C_ErrorCallback+0x3c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d102      	bne.n	8000f18 <HAL_I2C_ErrorCallback+0x28>
		FLAG_AS5600_M2 = HAL_ERROR;
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <HAL_I2C_ErrorCallback+0x40>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
	}
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	40005400 	.word	0x40005400
 8000f28:	2000009c 	.word	0x2000009c
 8000f2c:	40005c00 	.word	0x40005c00
 8000f30:	2000009d 	.word	0x2000009d

08000f34 <AS5600_M1_getPOS>:

void AS5600_M1_getPOS(){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1,0x36<<1,_RAWANGLEAddressLSB,1,(uint8_t*)&data_AS5600_M1,2);
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <AS5600_M1_getPOS+0x20>)
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2301      	movs	r3, #1
 8000f44:	220d      	movs	r2, #13
 8000f46:	216c      	movs	r1, #108	; 0x6c
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <AS5600_M1_getPOS+0x24>)
 8000f4a:	f005 fb53 	bl	80065f4 <HAL_I2C_Mem_Read_DMA>
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	2000a5f6 	.word	0x2000a5f6
 8000f58:	2000a974 	.word	0x2000a974

08000f5c <AS5600_M2_getPOS>:
void AS5600_M2_getPOS(){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c3,0x36<<1,_RAWANGLEAddressLSB,1,(uint8_t *)&data_AS5600_M2,2);
 8000f62:	2302      	movs	r3, #2
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <AS5600_M2_getPOS+0x20>)
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	220d      	movs	r2, #13
 8000f6e:	216c      	movs	r1, #108	; 0x6c
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <AS5600_M2_getPOS+0x24>)
 8000f72:	f005 fb3f 	bl	80065f4 <HAL_I2C_Mem_Read_DMA>
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2000a5f4 	.word	0x2000a5f4
 8000f80:	2000a8c0 	.word	0x2000a8c0

08000f84 <AS5600_Start_Update>:
		case 55: return 2;  //phat hien nam cham binh thuong
		case 23: return 3; //phat hien nam cham yeu
	}
	return data_status[0];
}
void AS5600_Start_Update(){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	TIM_AS5600->ARR = 1000;         //for frequency = 100hz
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <AS5600_Start_Update+0x18>)
 8000f8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&TIM_AS5600_UPDATE);
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <AS5600_Start_Update+0x1c>)
 8000f92:	f008 fbf3 	bl	800977c <HAL_TIM_Base_Start_IT>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40014400 	.word	0x40014400
 8000fa0:	2000ac8c 	.word	0x2000ac8c

08000fa4 <AS5600_Start_Update_Low>:
void AS5600_Start_Update_Low(){
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
	TIM_AS5600->ARR = 1000;         //for frequency = 100hz
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <AS5600_Start_Update_Low+0x18>)
 8000faa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40014400 	.word	0x40014400

08000fc0 <AS5600_Start_Update_High>:
void AS5600_Start_Update_High(){
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
	TIM_AS5600->ARR = 800;          //for frequency = 8khz
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <AS5600_Start_Update_High+0x18>)
 8000fc6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40014400 	.word	0x40014400

08000fdc <AccelStepper_init>:

#include "AccelStepper.h"
#include "config.h"

void AccelStepper_init(struct AccelStepperData * AccelMotor,TIM_HandleTypeDef htim,uint16_t startPosition, uint32_t maxSpeed,uint32_t maxAccel){
 8000fdc:	b084      	sub	sp, #16
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	f107 0014 	add.w	r0, r7, #20
 8000fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  //khoi tao thu vien
	AccelMotor->_currentPos = 0;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	631a      	str	r2, [r3, #48]	; 0x30
	AccelMotor->_targetPos = 0;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
	AccelMotor->_speed = 0.0f;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
	AccelMotor->_maxSpeed = 1.0f;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001008:	609a      	str	r2, [r3, #8]
	AccelMotor->_acceleration = 0.0f;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
	AccelMotor->_sqrt_twoa = 1.0f;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001018:	611a      	str	r2, [r3, #16]
	AccelMotor->_stepInterval = 0;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
	AccelMotor->_lastStepTime = 0;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
	AccelMotor->_n = 0;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
	AccelMotor->_c0 = 0.0f;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
	AccelMotor->_cn = 0.0f;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	; 0x24
	AccelMotor->_cmin = 1.0f;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
	AccelMotor->_direction = DIRECTION_CCW;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	setMaxSpeed(AccelMotor,maxSpeed);  
 800104c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001056:	eeb0 0a67 	vmov.f32	s0, s15
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f83e 	bl	80010dc <setMaxSpeed>
	setAcceleration(AccelMotor,maxAccel);
 8001060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800106a:	eeb0 0a67 	vmov.f32	s0, s15
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f882 	bl	8001178 <setAcceleration>
	AccelMotor->_currentPos = startPosition;  //setup vi tri ban dau
 8001074:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	631a      	str	r2, [r3, #48]	; 0x30
	AccelMotor->_targetPos=AccelMotor->_currentPos;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	601a      	str	r2, [r3, #0]
	computeNewSpeed(AccelMotor);  //tinh toan buoc dau tien
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f8eb 	bl	8001260 <computeNewSpeed>
	run(AccelMotor);          
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f9e2 	bl	8001454 <run>
  if(AccelMotor->usingTimChanelN==ON) 	
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001096:	2b01      	cmp	r3, #1
 8001098:	d108      	bne.n	80010ac <AccelStepper_init+0xd0>
		HAL_TIMEx_PWMN_Start_IT(&htim,AccelMotor->TIM_CHANEL); 
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f009 fb3f 	bl	800a728 <HAL_TIMEx_PWMN_Start_IT>
 80010aa:	e007      	b.n	80010bc <AccelStepper_init+0xe0>
	else
	HAL_TIM_PWM_Start_IT(&htim,AccelMotor->TIM_CHANEL);  //khoi dong TIMER tao xung STEP
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f008 fccc 	bl	8009a54 <HAL_TIM_PWM_Start_IT>
	HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_SET);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80010c6:	2201      	movs	r2, #1
 80010c8:	4619      	mov	r1, r3
 80010ca:	f005 f91b 	bl	8006304 <HAL_GPIO_WritePin>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010d8:	b004      	add	sp, #16
 80010da:	4770      	bx	lr

080010dc <setMaxSpeed>:

void setMaxSpeed(struct AccelStepperData * AccelMotor,float speed)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	ed87 0a00 	vstr	s0, [r7]
    if (speed < 0.0f)
 80010e8:	edd7 7a00 	vldr	s15, [r7]
 80010ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f4:	d505      	bpl.n	8001102 <setMaxSpeed+0x26>
       speed = -speed;
 80010f6:	edd7 7a00 	vldr	s15, [r7]
 80010fa:	eef1 7a67 	vneg.f32	s15, s15
 80010fe:	edc7 7a00 	vstr	s15, [r7]
    if (AccelMotor->_maxSpeed != speed)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	edd3 7a02 	vldr	s15, [r3, #8]
 8001108:	ed97 7a00 	vldr	s14, [r7]
 800110c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	d027      	beq.n	8001166 <setMaxSpeed+0x8a>
    {
	AccelMotor->_maxSpeed = speed;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	609a      	str	r2, [r3, #8]
	AccelMotor->_cmin = 1000000.0f / speed;
 800111c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001170 <setMaxSpeed+0x94>
 8001120:	ed97 7a00 	vldr	s14, [r7]
 8001124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	// Recompute _n from current speed and adjust speed if accelerating or cruising
	if (AccelMotor->_n > 0)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	2b00      	cmp	r3, #0
 8001134:	dd17      	ble.n	8001166 <setMaxSpeed+0x8a>
	{
	    AccelMotor->_n = (long)((AccelMotor->_speed * AccelMotor->_speed) / (2.0f * AccelMotor->_acceleration)); // Equation 16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	ed93 7a01 	vldr	s14, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001142:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	edd3 7a03 	vldr	s15, [r3, #12]
 800114c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001158:	ee17 2a90 	vmov	r2, s15
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	61da      	str	r2, [r3, #28]
	    computeNewSpeed(AccelMotor);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 f87d 	bl	8001260 <computeNewSpeed>
	}
    }
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	49742400 	.word	0x49742400
 8001174:	00000000 	.word	0x00000000

08001178 <setAcceleration>:
void setAcceleration(struct AccelStepperData * AccelMotor,float acceleration)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	ed87 0a00 	vstr	s0, [r7]
    if (acceleration == 0.0f)
 8001184:	edd7 7a00 	vldr	s15, [r7]
 8001188:	eef5 7a40 	vcmp.f32	s15, #0.0
 800118c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001190:	d058      	beq.n	8001244 <setAcceleration+0xcc>
	return;
    if (acceleration < 0.0f)
 8001192:	edd7 7a00 	vldr	s15, [r7]
 8001196:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119e:	d505      	bpl.n	80011ac <setAcceleration+0x34>
      acceleration = -acceleration;
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	eef1 7a67 	vneg.f32	s15, s15
 80011a8:	edc7 7a00 	vstr	s15, [r7]
    if (AccelMotor->_acceleration != acceleration)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b2:	ed97 7a00 	vldr	s14, [r7]
 80011b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80011ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011be:	d042      	beq.n	8001246 <setAcceleration+0xce>
    {
	// Recompute _n per Equation 17
	AccelMotor->_n = AccelMotor->_n * (AccelMotor->_acceleration / acceleration);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	ed93 6a03 	vldr	s12, [r3, #12]
 80011d2:	edd7 6a00 	vldr	s13, [r7]
 80011d6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80011da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e2:	ee17 2a90 	vmov	r2, s15
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	61da      	str	r2, [r3, #28]
	// New c0 per Equation 7, with correction per Equation 15
	AccelMotor->_c0 = 0.676f * sqrt(2.0f / acceleration) * 1000000.0f; // Equation 15
 80011ea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80011ee:	edd7 7a00 	vldr	s15, [r7]
 80011f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011f6:	ee16 0a90 	vmov	r0, s13
 80011fa:	f7ff f9a5 	bl	8000548 <__aeabi_f2d>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	ec43 2b10 	vmov	d0, r2, r3
 8001206:	f00e fd0f 	bl	800fc28 <sqrt>
 800120a:	ec51 0b10 	vmov	r0, r1, d0
 800120e:	a310      	add	r3, pc, #64	; (adr r3, 8001250 <setAcceleration+0xd8>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7ff f9f0 	bl	80005f8 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	a30d      	add	r3, pc, #52	; (adr r3, 8001258 <setAcceleration+0xe0>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff f9e7 	bl	80005f8 <__aeabi_dmul>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fc91 	bl	8000b58 <__aeabi_d2f>
 8001236:	4602      	mov	r2, r0
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	621a      	str	r2, [r3, #32]
	AccelMotor->_acceleration = acceleration;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	e000      	b.n	8001246 <setAcceleration+0xce>
	return;
 8001244:	bf00      	nop
	//computeNewSpeed(AccelMotor);
    }
}
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	f3af 8000 	nop.w
 8001250:	c0000000 	.word	0xc0000000
 8001254:	3fe5a1ca 	.word	0x3fe5a1ca
 8001258:	00000000 	.word	0x00000000
 800125c:	412e8480 	.word	0x412e8480

08001260 <computeNewSpeed>:

void computeNewSpeed(struct AccelStepperData * AccelMotor)  //tinh toan 1 toc do moi
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  long distanceTo = distanceToGo(AccelMotor); // +ve is clockwise from curent location - duong neu cung chieu kim dong ho tu vi tri hien tai
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f8e3 	bl	8001434 <distanceToGo>
 800126e:	60f8      	str	r0, [r7, #12]

  long stepsToStop = (long)((AccelMotor->_speed * AccelMotor->_speed) / (2.0f * AccelMotor->_acceleration)); // Equation 16 - phuong trinh 16 theo giai thuat By David Austin
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	ed93 7a01 	vldr	s14, [r3, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	edd3 7a01 	vldr	s15, [r3, #4]
 800127c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	edd3 7a03 	vldr	s15, [r3, #12]
 8001286:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800128a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800128e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001292:	ee17 3a90 	vmov	r3, s15
 8001296:	60bb      	str	r3, [r7, #8]

  if (distanceTo == 0 && stepsToStop <= 1){
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10d      	bne.n	80012ba <computeNewSpeed+0x5a>
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	dc0a      	bgt.n	80012ba <computeNewSpeed+0x5a>
	// We are at the target and its time to stop -  da den vi tri muc tieu va bay gio dung lai
	  AccelMotor->_stepInterval = 0;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
	  AccelMotor->_speed = 0.0f;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	605a      	str	r2, [r3, #4]
	  AccelMotor->_n = 0;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	61da      	str	r2, [r3, #28]
	  return;
 80012b8:	e0b7      	b.n	800142a <computeNewSpeed+0x1ca>
  }

  if (distanceTo > 0){
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	dd24      	ble.n	800130a <computeNewSpeed+0xaa>
	  // We are anticlockwise from the target  -  chung ta dang o vi tri nguoc chieu kim dong ho 
	  // Need to go clockwise from here, maybe decelerate now  -  can quay theo chieu kim dong ho, co th giam toc ngay
	  if (AccelMotor->_n > 0){
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	dd0d      	ble.n	80012e4 <computeNewSpeed+0x84>
	    // Currently accelerating, need to decel now? Or maybe going the wrong way?
			// hien tai dang tang toc,can giam toc bay ngay? hoac co the di sai huong
	    if ((stepsToStop >= distanceTo) || AccelMotor->_direction == DIRECTION_CCW)
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	da04      	bge.n	80012da <computeNewSpeed+0x7a>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d140      	bne.n	800135c <computeNewSpeed+0xfc>
		     AccelMotor->_n = -stepsToStop; // Start deceleration - bat dau giam toc
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	425a      	negs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	61da      	str	r2, [r3, #28]
 80012e2:	e03b      	b.n	800135c <computeNewSpeed+0xfc>
	  }
	  else if (AccelMotor->_n < 0){
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	da37      	bge.n	800135c <computeNewSpeed+0xfc>
	    // Currently decelerating, need to accel again? - hien tai dang giam toc ,can tang toc lai
	    if ((stepsToStop < distanceTo) && AccelMotor->_direction == DIRECTION_CW)
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	da33      	bge.n	800135c <computeNewSpeed+0xfc>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d12e      	bne.n	800135c <computeNewSpeed+0xfc>
		     AccelMotor->_n = -AccelMotor->_n; // Start accceleration  //bat dau tang toc
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	425a      	negs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	61da      	str	r2, [r3, #28]
 8001308:	e028      	b.n	800135c <computeNewSpeed+0xfc>
	  }
  }
  else if (distanceTo < 0){
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	da25      	bge.n	800135c <computeNewSpeed+0xfc>
	// We are clockwise from the target - chung ta dang o vi tri cung chieu kim dong ho
	// Need to go anticlockwise from here, maybe decelerate - can quay theo chieu nguoc lai ,co the giam toc
	   if (AccelMotor->_n > 0){
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	2b00      	cmp	r3, #0
 8001316:	dd0e      	ble.n	8001336 <computeNewSpeed+0xd6>
	      // Currently accelerating, need to decel now? Or maybe going the wrong way?
			  // hien dang tang toc,can giam toc ngay? hoac dang di sai huong?
	      if ((stepsToStop >= -distanceTo) || AccelMotor->_direction == DIRECTION_CW)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	425b      	negs	r3, r3
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	429a      	cmp	r2, r3
 8001320:	da04      	bge.n	800132c <computeNewSpeed+0xcc>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001328:	2b01      	cmp	r3, #1
 800132a:	d117      	bne.n	800135c <computeNewSpeed+0xfc>
		        AccelMotor->_n = -stepsToStop; // Start deceleration - bat dau giam toc
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	425a      	negs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	61da      	str	r2, [r3, #28]
 8001334:	e012      	b.n	800135c <computeNewSpeed+0xfc>
	   }
	   else if (AccelMotor->_n < 0){
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	2b00      	cmp	r3, #0
 800133c:	da0e      	bge.n	800135c <computeNewSpeed+0xfc>
	       // Currently decelerating, need to accel again?
			   // hien dang giam toc, can tang toc lai?
	       if ((stepsToStop < -distanceTo) && AccelMotor->_direction == DIRECTION_CCW)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	425b      	negs	r3, r3
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	429a      	cmp	r2, r3
 8001346:	da09      	bge.n	800135c <computeNewSpeed+0xfc>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800134e:	2b00      	cmp	r3, #0
 8001350:	d104      	bne.n	800135c <computeNewSpeed+0xfc>
		        AccelMotor->_n = -AccelMotor->_n; // Start accceleration  //bat dau tang toc
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	425a      	negs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	61da      	str	r2, [r3, #28]
	   }
  }
    // Need to accelerate or decelerate - can tang toc hoac giam toc
  if (AccelMotor->_n == 0){
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10e      	bne.n	8001382 <computeNewSpeed+0x122>
	   // First step from stopped  -  buoc dau tien tu vi tri stop
	   AccelMotor->_cn = AccelMotor->_c0;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1a      	ldr	r2, [r3, #32]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
	   AccelMotor->_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	bfcc      	ite	gt
 8001372:	2301      	movgt	r3, #1
 8001374:	2300      	movle	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001380:	e02e      	b.n	80013e0 <computeNewSpeed+0x180>
  }
	else{
	   // Subsequent step. Works for accel (n is +_ve) and decel (n is -ve).
		 //buoc tiep theo. hoat dong cho tang toc (n la duong) va giam toc (n la am)
	   AccelMotor->_cn = AccelMotor->_cn - ((2.0f * AccelMotor->_cn) / ((4.0f * AccelMotor->_n) + 1)); // Equation 13 - phuong trinh 13 
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800138e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80013a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80013aa:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80013ae:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80013b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	   AccelMotor->_cn = max(AccelMotor->_cn, AccelMotor->_cmin);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80013c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d0:	dd02      	ble.n	80013d8 <computeNewSpeed+0x178>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	e001      	b.n	80013dc <computeNewSpeed+0x17c>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6253      	str	r3, [r2, #36]	; 0x24
  }
  AccelMotor->_n++;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	61da      	str	r2, [r3, #28]
  AccelMotor->_stepInterval = AccelMotor->_cn;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80013f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f4:	ee17 2a90 	vmov	r2, s15
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	615a      	str	r2, [r3, #20]
  AccelMotor->_speed = 1000000.0f / AccelMotor->_cn;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001402:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001430 <computeNewSpeed+0x1d0>
 8001406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	edc3 7a01 	vstr	s15, [r3, #4]
  if (AccelMotor->_direction == DIRECTION_CCW) AccelMotor->_speed = -AccelMotor->_speed;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001416:	2b00      	cmp	r3, #0
 8001418:	d107      	bne.n	800142a <computeNewSpeed+0x1ca>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001420:	eef1 7a67 	vneg.f32	s15, s15
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	49742400 	.word	0x49742400

08001434 <distanceToGo>:

long distanceToGo(struct AccelStepperData * AccelMotor)  //tra lai khoang cach giua vi tri muc tieu va hien tai
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
    return AccelMotor->_targetPos - AccelMotor->_currentPos;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	1ad3      	subs	r3, r2, r3
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <run>:

void run(struct AccelStepperData * AccelMotor)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	if(AccelMotor->isStop){
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001462:	2b00      	cmp	r3, #0
 8001464:	d037      	beq.n	80014d6 <run+0x82>
		switch(AccelMotor->TIM_CHANEL){
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	2b0c      	cmp	r3, #12
 800146c:	f200 80cd 	bhi.w	800160a <run+0x1b6>
 8001470:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <run+0x24>)
 8001472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001476:	bf00      	nop
 8001478:	080014ad 	.word	0x080014ad
 800147c:	0800160b 	.word	0x0800160b
 8001480:	0800160b 	.word	0x0800160b
 8001484:	0800160b 	.word	0x0800160b
 8001488:	080014b7 	.word	0x080014b7
 800148c:	0800160b 	.word	0x0800160b
 8001490:	0800160b 	.word	0x0800160b
 8001494:	0800160b 	.word	0x0800160b
 8001498:	080014c1 	.word	0x080014c1
 800149c:	0800160b 	.word	0x0800160b
 80014a0:	0800160b 	.word	0x0800160b
 80014a4:	0800160b 	.word	0x0800160b
 80014a8:	080014cb 	.word	0x080014cb
			case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b0:	2200      	movs	r2, #0
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34
 80014b4:	e00e      	b.n	80014d4 <run+0x80>
			case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ba:	2200      	movs	r2, #0
 80014bc:	639a      	str	r2, [r3, #56]	; 0x38
 80014be:	e009      	b.n	80014d4 <run+0x80>
			case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c4:	2200      	movs	r2, #0
 80014c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80014c8:	e004      	b.n	80014d4 <run+0x80>
			case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ce:	2200      	movs	r2, #0
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
 80014d2:	bf00      	nop
		}
		return;
 80014d4:	e099      	b.n	800160a <run+0x1b6>
	}
  if(runSpeed(AccelMotor)){
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f89c 	bl	8001614 <runSpeed>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d043      	beq.n	800156a <run+0x116>
	computeNewSpeed(AccelMotor);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff febc 	bl	8001260 <computeNewSpeed>
	if(AccelMotor->_stepInterval==0){
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d135      	bne.n	800155c <run+0x108>
			switch(AccelMotor->TIM_CHANEL){
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f4:	2b0c      	cmp	r3, #12
 80014f6:	f200 8089 	bhi.w	800160c <run+0x1b8>
 80014fa:	a201      	add	r2, pc, #4	; (adr r2, 8001500 <run+0xac>)
 80014fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001500:	08001535 	.word	0x08001535
 8001504:	0800160d 	.word	0x0800160d
 8001508:	0800160d 	.word	0x0800160d
 800150c:	0800160d 	.word	0x0800160d
 8001510:	0800153f 	.word	0x0800153f
 8001514:	0800160d 	.word	0x0800160d
 8001518:	0800160d 	.word	0x0800160d
 800151c:	0800160d 	.word	0x0800160d
 8001520:	08001549 	.word	0x08001549
 8001524:	0800160d 	.word	0x0800160d
 8001528:	0800160d 	.word	0x0800160d
 800152c:	0800160d 	.word	0x0800160d
 8001530:	08001553 	.word	0x08001553
				case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001538:	2200      	movs	r2, #0
 800153a:	635a      	str	r2, [r3, #52]	; 0x34
 800153c:	e066      	b.n	800160c <run+0x1b8>
				case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001542:	2200      	movs	r2, #0
 8001544:	639a      	str	r2, [r3, #56]	; 0x38
 8001546:	e061      	b.n	800160c <run+0x1b8>
				case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154c:	2200      	movs	r2, #0
 800154e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001550:	e05c      	b.n	800160c <run+0x1b8>
				case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001556:	2200      	movs	r2, #0
 8001558:	641a      	str	r2, [r3, #64]	; 0x40
 800155a:	e057      	b.n	800160c <run+0x1b8>
			}
//			AccelMotor->sumComplete++;
		}
  	else{		
	    AccelMotor->USER_TIMER->ARR=(uint16_t)AccelMotor->_stepInterval;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	b29a      	uxth	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
 8001568:	e050      	b.n	800160c <run+0x1b8>
//		if((distanceToGo(AccelMotor)>3) || (distanceToGo(AccelMotor)>-3)) AccelMotor->sumComplete =0;
		}
	}
	else if((distanceToGo(AccelMotor)>0) || (distanceToGo(AccelMotor)<0)){
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ff62 	bl	8001434 <distanceToGo>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	dc05      	bgt.n	8001582 <run+0x12e>
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ff5c 	bl	8001434 <distanceToGo>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	da44      	bge.n	800160c <run+0x1b8>
		computeNewSpeed(AccelMotor);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fe6c 	bl	8001260 <computeNewSpeed>
		if(AccelMotor->_stepInterval==0){
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d135      	bne.n	80015fc <run+0x1a8>
				switch(AccelMotor->TIM_CHANEL){
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001594:	2b0c      	cmp	r3, #12
 8001596:	d839      	bhi.n	800160c <run+0x1b8>
 8001598:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <run+0x14c>)
 800159a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159e:	bf00      	nop
 80015a0:	080015d5 	.word	0x080015d5
 80015a4:	0800160d 	.word	0x0800160d
 80015a8:	0800160d 	.word	0x0800160d
 80015ac:	0800160d 	.word	0x0800160d
 80015b0:	080015df 	.word	0x080015df
 80015b4:	0800160d 	.word	0x0800160d
 80015b8:	0800160d 	.word	0x0800160d
 80015bc:	0800160d 	.word	0x0800160d
 80015c0:	080015e9 	.word	0x080015e9
 80015c4:	0800160d 	.word	0x0800160d
 80015c8:	0800160d 	.word	0x0800160d
 80015cc:	0800160d 	.word	0x0800160d
 80015d0:	080015f3 	.word	0x080015f3
				case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d8:	2200      	movs	r2, #0
 80015da:	635a      	str	r2, [r3, #52]	; 0x34
 80015dc:	e016      	b.n	800160c <run+0x1b8>
				case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e2:	2200      	movs	r2, #0
 80015e4:	639a      	str	r2, [r3, #56]	; 0x38
 80015e6:	e011      	b.n	800160c <run+0x1b8>
				case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ec:	2200      	movs	r2, #0
 80015ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80015f0:	e00c      	b.n	800160c <run+0x1b8>
				case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f6:	2200      	movs	r2, #0
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
 80015fa:	e007      	b.n	800160c <run+0x1b8>
			}
//				AccelMotor->sumComplete++;
		}
	  else{
	      AccelMotor->USER_TIMER->ARR=(uint16_t)AccelMotor->_stepInterval;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	b29a      	uxth	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001606:	62da      	str	r2, [r3, #44]	; 0x2c
 8001608:	e000      	b.n	800160c <run+0x1b8>
		return;
 800160a:	bf00      	nop
//			  if((distanceToGo(AccelMotor)>3) || (distanceToGo(AccelMotor)>-3)) AccelMotor->sumComplete =0;
		}
	}
//	if(AccelMotor->sumComplete>50) AccelMotor->isComplete=true;
}
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop

08001614 <runSpeed>:

char runSpeed(struct AccelStepperData * AccelMotor)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
    // Dont do anything unless we actually have a step interval
	  // khong lam gi neu nhu gia tri _stepInterval = 0
  if (!AccelMotor->_stepInterval){
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d137      	bne.n	8001694 <runSpeed+0x80>
		switch(AccelMotor->TIM_CHANEL){
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001628:	2b0c      	cmp	r3, #12
 800162a:	d831      	bhi.n	8001690 <runSpeed+0x7c>
 800162c:	a201      	add	r2, pc, #4	; (adr r2, 8001634 <runSpeed+0x20>)
 800162e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001632:	bf00      	nop
 8001634:	08001669 	.word	0x08001669
 8001638:	08001691 	.word	0x08001691
 800163c:	08001691 	.word	0x08001691
 8001640:	08001691 	.word	0x08001691
 8001644:	08001673 	.word	0x08001673
 8001648:	08001691 	.word	0x08001691
 800164c:	08001691 	.word	0x08001691
 8001650:	08001691 	.word	0x08001691
 8001654:	0800167d 	.word	0x0800167d
 8001658:	08001691 	.word	0x08001691
 800165c:	08001691 	.word	0x08001691
 8001660:	08001691 	.word	0x08001691
 8001664:	08001687 	.word	0x08001687
			case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166c:	2200      	movs	r2, #0
 800166e:	635a      	str	r2, [r3, #52]	; 0x34
 8001670:	e00e      	b.n	8001690 <runSpeed+0x7c>
			case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001676:	2200      	movs	r2, #0
 8001678:	639a      	str	r2, [r3, #56]	; 0x38
 800167a:	e009      	b.n	8001690 <runSpeed+0x7c>
			case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001680:	2200      	movs	r2, #0
 8001682:	63da      	str	r2, [r3, #60]	; 0x3c
 8001684:	e004      	b.n	8001690 <runSpeed+0x7c>
			case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168a:	2200      	movs	r2, #0
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
 800168e:	bf00      	nop
		}
//		AccelMotor->isComplete = 1;
		return 0;
 8001690:	2300      	movs	r3, #0
 8001692:	e013      	b.n	80016bc <runSpeed+0xa8>
	}
	
	if (AccelMotor->_direction == DIRECTION_CW){ // Clockwise    
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800169a:	2b01      	cmp	r3, #1
 800169c:	d105      	bne.n	80016aa <runSpeed+0x96>
	    AccelMotor->_currentPos += 1;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30
 80016a8:	e004      	b.n	80016b4 <runSpeed+0xa0>
	  }
	else{
	    // Anticlockwise
	    AccelMotor->_currentPos -= 1;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	1e5a      	subs	r2, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	631a      	str	r2, [r3, #48]	; 0x30
	  }
	step(AccelMotor);  //tao 1 step pulse
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f805 	bl	80016c4 <step>

	return 1;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <step>:

void step(struct AccelStepperData * AccelMotor)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	if(AccelMotor->_direction) 
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d009      	beq.n	80016ea <step+0x26>
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Dir,AccelMotor->GPIO_PIN_Dir,GPIO_PIN_RESET); 
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016e0:	2200      	movs	r2, #0
 80016e2:	4619      	mov	r1, r3
 80016e4:	f004 fe0e 	bl	8006304 <HAL_GPIO_WritePin>
 80016e8:	e008      	b.n	80016fc <step+0x38>
	else 
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Dir,AccelMotor->GPIO_PIN_Dir,GPIO_PIN_SET);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016f4:	2201      	movs	r2, #1
 80016f6:	4619      	mov	r1, r3
 80016f8:	f004 fe04 	bl	8006304 <HAL_GPIO_WritePin>
	if(AccelMotor->enable==1){
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001702:	2b01      	cmp	r3, #1
 8001704:	d108      	bne.n	8001718 <step+0x54>
			HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_SET);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001710:	2201      	movs	r2, #1
 8001712:	4619      	mov	r1, r3
 8001714:	f004 fdf6 	bl	8006304 <HAL_GPIO_WritePin>
	}
	switch(AccelMotor->TIM_CHANEL){
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171c:	2b0c      	cmp	r3, #12
 800171e:	d831      	bhi.n	8001784 <step+0xc0>
 8001720:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <step+0x64>)
 8001722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001726:	bf00      	nop
 8001728:	0800175d 	.word	0x0800175d
 800172c:	08001785 	.word	0x08001785
 8001730:	08001785 	.word	0x08001785
 8001734:	08001785 	.word	0x08001785
 8001738:	08001767 	.word	0x08001767
 800173c:	08001785 	.word	0x08001785
 8001740:	08001785 	.word	0x08001785
 8001744:	08001785 	.word	0x08001785
 8001748:	08001771 	.word	0x08001771
 800174c:	08001785 	.word	0x08001785
 8001750:	08001785 	.word	0x08001785
 8001754:	08001785 	.word	0x08001785
 8001758:	0800177b 	.word	0x0800177b
			case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=2; break;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001760:	2202      	movs	r2, #2
 8001762:	635a      	str	r2, [r3, #52]	; 0x34
 8001764:	e00e      	b.n	8001784 <step+0xc0>
			case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=2; break;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176a:	2202      	movs	r2, #2
 800176c:	639a      	str	r2, [r3, #56]	; 0x38
 800176e:	e009      	b.n	8001784 <step+0xc0>
			case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=2; break;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001774:	2202      	movs	r2, #2
 8001776:	63da      	str	r2, [r3, #60]	; 0x3c
 8001778:	e004      	b.n	8001784 <step+0xc0>
			case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=2; break;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177e:	2202      	movs	r2, #2
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
 8001782:	bf00      	nop
		}
//	AccelMotor->isComplete = 0;
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <isRunning>:

char isRunning(struct AccelStepperData * AccelMotor)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
    return !(AccelMotor->_speed == 0.0f && AccelMotor->_targetPos == AccelMotor->_currentPos);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	edd3 7a01 	vldr	s15, [r3, #4]
 800179a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800179e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a2:	d105      	bne.n	80017b0 <isRunning+0x24>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <isRunning+0x28>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <isRunning+0x2a>
 80017b4:	2300      	movs	r3, #0
 80017b6:	b2db      	uxtb	r3, r3
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <moveTo>:
void setCurentPos(struct AccelStepperData * AccelMotor,long position){
 AccelMotor->_currentPos=position;
}

void moveTo(struct AccelStepperData * AccelMotor,long absoluted)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
	AccelMotor->isStop = false;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	if(AccelMotor->_targetPos != absoluted){
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d005      	beq.n	80017ec <moveTo+0x28>
	   AccelMotor->_targetPos = absoluted;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	601a      	str	r2, [r3, #0]
	   computeNewSpeed(AccelMotor);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fd3a 	bl	8001260 <computeNewSpeed>
//		AccelMotor->USER_TIMER->CNT=0;
  }
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <enableStepper>:
	AccelMotor->_stepInterval = fabs(1000000.0f / speed);
	AccelMotor->_direction = (speed > 0.0f) ? DIRECTION_CW : DIRECTION_CCW;
    }
    AccelMotor->_speed = speed;
}
void enableStepper(struct AccelStepperData * AccelMotor,enum boolean onOff){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	70fb      	strb	r3, [r7, #3]
	if(onOff==OFF) 
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <enableStepper+0x26>
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_SET);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001810:	2201      	movs	r2, #1
 8001812:	4619      	mov	r1, r3
 8001814:	f004 fd76 	bl	8006304 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_RESET);
}
 8001818:	e008      	b.n	800182c <enableStepper+0x38>
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_RESET);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001824:	2200      	movs	r2, #0
 8001826:	4619      	mov	r1, r3
 8001828:	f004 fd6c 	bl	8006304 <HAL_GPIO_WritePin>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800183a:	463b      	mov	r3, r7
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <MX_ADC1_Init+0x9c>)
 8001848:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <MX_ADC1_Init+0xa0>)
 800184a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800184c:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <MX_ADC1_Init+0x9c>)
 800184e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001852:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <MX_ADC1_Init+0x9c>)
 8001856:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800185a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800185c:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <MX_ADC1_Init+0x9c>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <MX_ADC1_Init+0x9c>)
 8001864:	2201      	movs	r2, #1
 8001866:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <MX_ADC1_Init+0x9c>)
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_ADC1_Init+0x9c>)
 8001872:	2200      	movs	r2, #0
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <MX_ADC1_Init+0x9c>)
 8001878:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <MX_ADC1_Init+0xa4>)
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_ADC1_Init+0x9c>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <MX_ADC1_Init+0x9c>)
 8001884:	2201      	movs	r2, #1
 8001886:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_ADC1_Init+0x9c>)
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_ADC1_Init+0x9c>)
 8001892:	2200      	movs	r2, #0
 8001894:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <MX_ADC1_Init+0x9c>)
 8001898:	f002 ff42 	bl	8004720 <HAL_ADC_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80018a2:	f002 f81d 	bl	80038e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018a6:	2304      	movs	r3, #4
 80018a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80018ae:	2307      	movs	r3, #7
 80018b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b2:	463b      	mov	r3, r7
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <MX_ADC1_Init+0x9c>)
 80018b8:	f003 f98a 	bl	8004bd0 <HAL_ADC_ConfigChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80018c2:	f002 f80d 	bl	80038e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000a5f8 	.word	0x2000a5f8
 80018d4:	40012000 	.word	0x40012000
 80018d8:	0f000001 	.word	0x0f000001

080018dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a32      	ldr	r2, [pc, #200]	; (80019c4 <HAL_ADC_MspInit+0xe8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d15e      	bne.n	80019bc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <HAL_ADC_MspInit+0xec>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a30      	ldr	r2, [pc, #192]	; (80019c8 <HAL_ADC_MspInit+0xec>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <HAL_ADC_MspInit+0xec>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <HAL_ADC_MspInit+0xec>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a29      	ldr	r2, [pc, #164]	; (80019c8 <HAL_ADC_MspInit+0xec>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HAL_ADC_MspInit+0xec>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_VOLT_SENSOR_Pin;
 8001936:	2310      	movs	r3, #16
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193a:	2303      	movs	r3, #3
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VOLT_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4820      	ldr	r0, [pc, #128]	; (80019cc <HAL_ADC_MspInit+0xf0>)
 800194a:	f004 fb3f 	bl	8005fcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <HAL_ADC_MspInit+0xf4>)
 8001950:	4a20      	ldr	r2, [pc, #128]	; (80019d4 <HAL_ADC_MspInit+0xf8>)
 8001952:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001954:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <HAL_ADC_MspInit+0xf4>)
 8001956:	2200      	movs	r2, #0
 8001958:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <HAL_ADC_MspInit+0xf4>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_ADC_MspInit+0xf4>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <HAL_ADC_MspInit+0xf4>)
 8001968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800196c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_ADC_MspInit+0xf4>)
 8001970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001974:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_ADC_MspInit+0xf4>)
 8001978:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800197c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <HAL_ADC_MspInit+0xf4>)
 8001980:	2200      	movs	r2, #0
 8001982:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_ADC_MspInit+0xf4>)
 8001986:	2200      	movs	r2, #0
 8001988:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_ADC_MspInit+0xf4>)
 800198c:	2200      	movs	r2, #0
 800198e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001990:	480f      	ldr	r0, [pc, #60]	; (80019d0 <HAL_ADC_MspInit+0xf4>)
 8001992:	f003 fc27 	bl	80051e4 <HAL_DMA_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800199c:	f001 ffa0 	bl	80038e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <HAL_ADC_MspInit+0xf4>)
 80019a4:	639a      	str	r2, [r3, #56]	; 0x38
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <HAL_ADC_MspInit+0xf4>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	210f      	movs	r1, #15
 80019b0:	2012      	movs	r0, #18
 80019b2:	f003 fbed 	bl	8005190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80019b6:	2012      	movs	r0, #18
 80019b8:	f003 fc06 	bl	80051c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80019bc:	bf00      	nop
 80019be:	3728      	adds	r7, #40	; 0x28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40012000 	.word	0x40012000
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020000 	.word	0x40020000
 80019d0:	2000a640 	.word	0x2000a640
 80019d4:	40026410 	.word	0x40026410

080019d8 <HAL_ADC_ConvCpltCallback>:

uint32_t battery_sum;								// Variable for Calculator Battery
uint16_t battery,battery_tik;						// Variable Battery: ex. battery=1623 => 16.23v

/* Ham Callback khi chuyen doi ADC hoan tat */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	battery_sum += ADC1->DR;						// tinh gia tri ADC trung binh trong 65000 lan lay mau , de dat duoc ket qua chinh xac
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_ADC_ConvCpltCallback+0x6c>)
 80019e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_ADC_ConvCpltCallback+0x70>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4413      	add	r3, r2
 80019ea:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_ADC_ConvCpltCallback+0x70>)
 80019ec:	6013      	str	r3, [r2, #0]
	battery_tik ++;
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_ADC_ConvCpltCallback+0x74>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	3301      	adds	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_ADC_ConvCpltCallback+0x74>)
 80019f8:	801a      	strh	r2, [r3, #0]
	if(battery_tik==65000){
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <HAL_ADC_ConvCpltCallback+0x74>)
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d117      	bne.n	8001a36 <HAL_ADC_ConvCpltCallback+0x5e>
		battery = ((battery_sum/battery_tik)*510)/100;  	//  Ratio ADC = 16,3/1,04 => Vbattery = Val_ADC*(3,3/1024)*(16,3/1,04) with ADC is 10bit
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_ADC_ConvCpltCallback+0x70>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_ADC_ConvCpltCallback+0x74>)
 8001a0c:	8812      	ldrh	r2, [r2, #0]
 8001a0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a12:	4613      	mov	r3, r2
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_ADC_ConvCpltCallback+0x78>)
 8001a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001a28:	801a      	strh	r2, [r3, #0]
		battery_sum =0;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <HAL_ADC_ConvCpltCallback+0x70>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
		battery_tik=0;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_ADC_ConvCpltCallback+0x74>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	801a      	strh	r2, [r3, #0]
	}
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40012000 	.word	0x40012000
 8001a48:	2000a6a0 	.word	0x2000a6a0
 8001a4c:	2000a6a6 	.word	0x2000a6a6
 8001a50:	51eb851f 	.word	0x51eb851f
 8001a54:	2000a6a4 	.word	0x2000a6a4

08001a58 <batteryVoltInit>:

void batteryVoltInit()
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);						// Start ADC to get Battery Votl
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <batteryVoltInit+0x10>)
 8001a5e:	f002 fea3 	bl	80047a8 <HAL_ADC_Start_IT>
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2000a5f8 	.word	0x2000a5f8

08001a6c <batteryGet>:
uint16_t batteryGet()
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
	return battery;
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <batteryGet+0x14>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	2000a6a4 	.word	0x2000a6a4

08001a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <MX_DMA_Init+0xb8>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a2a      	ldr	r2, [pc, #168]	; (8001b3c <MX_DMA_Init+0xb8>)
 8001a94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <MX_DMA_Init+0xb8>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <MX_DMA_Init+0xb8>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <MX_DMA_Init+0xb8>)
 8001ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <MX_DMA_Init+0xb8>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2105      	movs	r1, #5
 8001ac6:	200b      	movs	r0, #11
 8001ac8:	f003 fb62 	bl	8005190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001acc:	200b      	movs	r0, #11
 8001ace:	f003 fb7b 	bl	80051c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2105      	movs	r1, #5
 8001ad6:	200c      	movs	r0, #12
 8001ad8:	f003 fb5a 	bl	8005190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001adc:	200c      	movs	r0, #12
 8001ade:	f003 fb73 	bl	80051c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	200d      	movs	r0, #13
 8001ae8:	f003 fb52 	bl	8005190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001aec:	200d      	movs	r0, #13
 8001aee:	f003 fb6b 	bl	80051c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2105      	movs	r1, #5
 8001af6:	2010      	movs	r0, #16
 8001af8:	f003 fb4a 	bl	8005190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001afc:	2010      	movs	r0, #16
 8001afe:	f003 fb63 	bl	80051c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2105      	movs	r1, #5
 8001b06:	202f      	movs	r0, #47	; 0x2f
 8001b08:	f003 fb42 	bl	8005190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001b0c:	202f      	movs	r0, #47	; 0x2f
 8001b0e:	f003 fb5b 	bl	80051c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2105      	movs	r1, #5
 8001b16:	2038      	movs	r0, #56	; 0x38
 8001b18:	f003 fb3a 	bl	8005190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b1c:	2038      	movs	r0, #56	; 0x38
 8001b1e:	f003 fb53 	bl	80051c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2105      	movs	r1, #5
 8001b26:	203a      	movs	r0, #58	; 0x3a
 8001b28:	f003 fb32 	bl	8005190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b2c:	203a      	movs	r0, #58	; 0x3a
 8001b2e:	f003 fb4b 	bl	80051c8 <HAL_NVIC_EnableIRQ>

}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800

08001b40 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001b46:	2306      	movs	r3, #6
 8001b48:	847b      	strh	r3, [r7, #34]	; 0x22
 8001b4a:	2306      	movs	r3, #6
 8001b4c:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	83fb      	strh	r3, [r7, #30]
 8001b56:	2300      	movs	r3, #0
 8001b58:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8001b5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b5e:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001b64:	4ba1      	ldr	r3, [pc, #644]	; (8001dec <EE_Init+0x2ac>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001b6a:	4ba1      	ldr	r3, [pc, #644]	; (8001df0 <EE_Init+0x2b0>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001b70:	2300      	movs	r3, #0
 8001b72:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8001b74:	2302      	movs	r3, #2
 8001b76:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8001b80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00b      	beq.n	8001ba2 <EE_Init+0x62>
 8001b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8e:	f280 8196 	bge.w	8001ebe <EE_Init+0x37e>
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80f8 	beq.w	8001d88 <EE_Init+0x248>
 8001b98:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d050      	beq.n	8001c42 <EE_Init+0x102>
 8001ba0:	e18d      	b.n	8001ebe <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8001ba2:	8c3b      	ldrh	r3, [r7, #32]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d116      	bne.n	8001bd6 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001ba8:	4890      	ldr	r0, [pc, #576]	; (8001dec <EE_Init+0x2ac>)
 8001baa:	f000 f9a9 	bl	8001f00 <EE_VerifyPageFullyErased>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f040 818e 	bne.w	8001ed2 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001bb6:	f107 0214 	add.w	r2, r7, #20
 8001bba:	463b      	mov	r3, r7
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f004 f8e2 	bl	8005d88 <HAL_FLASHEx_Erase>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001bc8:	7efb      	ldrb	r3, [r7, #27]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 8181 	beq.w	8001ed2 <EE_Init+0x392>
          {
            return FlashStatus;
 8001bd0:	7efb      	ldrb	r3, [r7, #27]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	e185      	b.n	8001ee2 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8001bd6:	8c3b      	ldrh	r3, [r7, #32]
 8001bd8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d125      	bne.n	8001c2c <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001be0:	4882      	ldr	r0, [pc, #520]	; (8001dec <EE_Init+0x2ac>)
 8001be2:	f000 f98d 	bl	8001f00 <EE_VerifyPageFullyErased>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10e      	bne.n	8001c0a <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001bec:	f107 0214 	add.w	r2, r7, #20
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f004 f8c7 	bl	8005d88 <HAL_FLASHEx_Erase>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001bfe:	7efb      	ldrb	r3, [r7, #27]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <EE_Init+0xca>
          {
            return FlashStatus;
 8001c04:	7efb      	ldrb	r3, [r7, #27]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	e16b      	b.n	8001ee2 <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	4977      	ldr	r1, [pc, #476]	; (8001df0 <EE_Init+0x2b0>)
 8001c14:	2001      	movs	r0, #1
 8001c16:	f003 ff01 	bl	8005a1c <HAL_FLASH_Program>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001c1e:	7efb      	ldrb	r3, [r7, #27]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 8156 	beq.w	8001ed2 <EE_Init+0x392>
        {
          return FlashStatus;
 8001c26:	7efb      	ldrb	r3, [r7, #27]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	e15a      	b.n	8001ee2 <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001c2c:	f000 f9fa 	bl	8002024 <EE_Format>
 8001c30:	4603      	mov	r3, r0
 8001c32:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001c34:	7efb      	ldrb	r3, [r7, #27]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 814b 	beq.w	8001ed2 <EE_Init+0x392>
        {
          return FlashStatus;
 8001c3c:	7efb      	ldrb	r3, [r7, #27]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	e14f      	b.n	8001ee2 <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001c42:	8c3b      	ldrh	r3, [r7, #32]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d163      	bne.n	8001d10 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c4c:	e030      	b.n	8001cb0 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001c4e:	4b69      	ldr	r3, [pc, #420]	; (8001df4 <EE_Init+0x2b4>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c56:	4968      	ldr	r1, [pc, #416]	; (8001df8 <EE_Init+0x2b8>)
 8001c58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d101      	bne.n	8001c64 <EE_Init+0x124>
          {
            x = VarIdx;
 8001c60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c62:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8001c64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001c66:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d01d      	beq.n	8001caa <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001c6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c70:	4a61      	ldr	r2, [pc, #388]	; (8001df8 <EE_Init+0x2b8>)
 8001c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c76:	4961      	ldr	r1, [pc, #388]	; (8001dfc <EE_Init+0x2bc>)
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 f967 	bl	8001f4c <EE_ReadVariable>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001c82:	8bbb      	ldrh	r3, [r7, #28]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d010      	beq.n	8001caa <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001c88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c8a:	4a5b      	ldr	r2, [pc, #364]	; (8001df8 <EE_Init+0x2b8>)
 8001c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c90:	4a5a      	ldr	r2, [pc, #360]	; (8001dfc <EE_Init+0x2bc>)
 8001c92:	8812      	ldrh	r2, [r2, #0]
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 fa5c 	bl	8002154 <EE_VerifyPageFullWriteVariable>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001ca0:	8bfb      	ldrh	r3, [r7, #30]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <EE_Init+0x16a>
              {
                return EepromStatus;
 8001ca6:	8bfb      	ldrh	r3, [r7, #30]
 8001ca8:	e11b      	b.n	8001ee2 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001caa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cac:	3301      	adds	r3, #1
 8001cae:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001cb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d9cb      	bls.n	8001c4e <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	494b      	ldr	r1, [pc, #300]	; (8001dec <EE_Init+0x2ac>)
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f003 feab 	bl	8005a1c <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001cca:	7efb      	ldrb	r3, [r7, #27]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <EE_Init+0x196>
        {
          return FlashStatus;
 8001cd0:	7efb      	ldrb	r3, [r7, #27]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	e105      	b.n	8001ee2 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001ce2:	4843      	ldr	r0, [pc, #268]	; (8001df0 <EE_Init+0x2b0>)
 8001ce4:	f000 f90c 	bl	8001f00 <EE_VerifyPageFullyErased>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 80f3 	bne.w	8001ed6 <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001cf0:	f107 0214 	add.w	r2, r7, #20
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f004 f845 	bl	8005d88 <HAL_FLASHEx_Erase>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001d02:	7efb      	ldrb	r3, [r7, #27]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80e6 	beq.w	8001ed6 <EE_Init+0x396>
          {
            return FlashStatus;
 8001d0a:	7efb      	ldrb	r3, [r7, #27]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	e0e8      	b.n	8001ee2 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8001d10:	8c3b      	ldrh	r3, [r7, #32]
 8001d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d12b      	bne.n	8001d72 <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001d22:	2302      	movs	r3, #2
 8001d24:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001d26:	4832      	ldr	r0, [pc, #200]	; (8001df0 <EE_Init+0x2b0>)
 8001d28:	f000 f8ea 	bl	8001f00 <EE_VerifyPageFullyErased>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10e      	bne.n	8001d50 <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001d32:	f107 0214 	add.w	r2, r7, #20
 8001d36:	463b      	mov	r3, r7
 8001d38:	4611      	mov	r1, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f004 f824 	bl	8005d88 <HAL_FLASHEx_Erase>
 8001d40:	4603      	mov	r3, r0
 8001d42:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001d44:	7efb      	ldrb	r3, [r7, #27]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <EE_Init+0x210>
          {
            return FlashStatus;
 8001d4a:	7efb      	ldrb	r3, [r7, #27]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	e0c8      	b.n	8001ee2 <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	4924      	ldr	r1, [pc, #144]	; (8001dec <EE_Init+0x2ac>)
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f003 fe5e 	bl	8005a1c <HAL_FLASH_Program>
 8001d60:	4603      	mov	r3, r0
 8001d62:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001d64:	7efb      	ldrb	r3, [r7, #27]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80b5 	beq.w	8001ed6 <EE_Init+0x396>
        {
          return FlashStatus;
 8001d6c:	7efb      	ldrb	r3, [r7, #27]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	e0b7      	b.n	8001ee2 <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001d72:	f000 f957 	bl	8002024 <EE_Format>
 8001d76:	4603      	mov	r3, r0
 8001d78:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001d7a:	7efb      	ldrb	r3, [r7, #27]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80aa 	beq.w	8001ed6 <EE_Init+0x396>
        {
          return FlashStatus;
 8001d82:	7efb      	ldrb	r3, [r7, #27]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	e0ac      	b.n	8001ee2 <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8001d88:	8c3b      	ldrh	r3, [r7, #32]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10a      	bne.n	8001da4 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001d8e:	f000 f949 	bl	8002024 <EE_Format>
 8001d92:	4603      	mov	r3, r0
 8001d94:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001d96:	7efb      	ldrb	r3, [r7, #27]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 809e 	beq.w	8001eda <EE_Init+0x39a>
        {
          return FlashStatus;
 8001d9e:	7efb      	ldrb	r3, [r7, #27]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	e09e      	b.n	8001ee2 <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8001da4:	8c3b      	ldrh	r3, [r7, #32]
 8001da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d11b      	bne.n	8001de6 <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001dae:	2303      	movs	r3, #3
 8001db0:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001db6:	2302      	movs	r3, #2
 8001db8:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001dba:	480d      	ldr	r0, [pc, #52]	; (8001df0 <EE_Init+0x2b0>)
 8001dbc:	f000 f8a0 	bl	8001f00 <EE_VerifyPageFullyErased>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 8089 	bne.w	8001eda <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001dc8:	f107 0214 	add.w	r2, r7, #20
 8001dcc:	463b      	mov	r3, r7
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 ffd9 	bl	8005d88 <HAL_FLASHEx_Erase>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001dda:	7efb      	ldrb	r3, [r7, #27]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d07c      	beq.n	8001eda <EE_Init+0x39a>
          {
            return FlashStatus;
 8001de0:	7efb      	ldrb	r3, [r7, #27]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	e07d      	b.n	8001ee2 <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001dea:	e03a      	b.n	8001e62 <EE_Init+0x322>
 8001dec:	08030000 	.word	0x08030000
 8001df0:	08034000 	.word	0x08034000
 8001df4:	08030006 	.word	0x08030006
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	2000009e 	.word	0x2000009e
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001e00:	4b3a      	ldr	r3, [pc, #232]	; (8001eec <EE_Init+0x3ac>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e08:	4939      	ldr	r1, [pc, #228]	; (8001ef0 <EE_Init+0x3b0>)
 8001e0a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d101      	bne.n	8001e16 <EE_Init+0x2d6>
          {
            x = VarIdx;
 8001e12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e14:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8001e16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001e18:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d01d      	beq.n	8001e5c <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001e20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e22:	4a33      	ldr	r2, [pc, #204]	; (8001ef0 <EE_Init+0x3b0>)
 8001e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e28:	4932      	ldr	r1, [pc, #200]	; (8001ef4 <EE_Init+0x3b4>)
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 f88e 	bl	8001f4c <EE_ReadVariable>
 8001e30:	4603      	mov	r3, r0
 8001e32:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001e34:	8bbb      	ldrh	r3, [r7, #28]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d010      	beq.n	8001e5c <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001e3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e3c:	4a2c      	ldr	r2, [pc, #176]	; (8001ef0 <EE_Init+0x3b0>)
 8001e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e42:	4a2c      	ldr	r2, [pc, #176]	; (8001ef4 <EE_Init+0x3b4>)
 8001e44:	8812      	ldrh	r2, [r2, #0]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f983 	bl	8002154 <EE_VerifyPageFullWriteVariable>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001e52:	8bfb      	ldrh	r3, [r7, #30]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <EE_Init+0x31c>
              {
                return EepromStatus;
 8001e58:	8bfb      	ldrh	r3, [r7, #30]
 8001e5a:	e042      	b.n	8001ee2 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001e5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e5e:	3301      	adds	r3, #1
 8001e60:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001e62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d9cb      	bls.n	8001e00 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	4921      	ldr	r1, [pc, #132]	; (8001ef8 <EE_Init+0x3b8>)
 8001e72:	2001      	movs	r0, #1
 8001e74:	f003 fdd2 	bl	8005a1c <HAL_FLASH_Program>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001e7c:	7efb      	ldrb	r3, [r7, #27]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d002      	beq.n	8001e88 <EE_Init+0x348>
        {
          return FlashStatus;
 8001e82:	7efb      	ldrb	r3, [r7, #27]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	e02c      	b.n	8001ee2 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001e90:	2302      	movs	r3, #2
 8001e92:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001e94:	4819      	ldr	r0, [pc, #100]	; (8001efc <EE_Init+0x3bc>)
 8001e96:	f000 f833 	bl	8001f00 <EE_VerifyPageFullyErased>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d11c      	bne.n	8001eda <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001ea0:	f107 0214 	add.w	r2, r7, #20
 8001ea4:	463b      	mov	r3, r7
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f003 ff6d 	bl	8005d88 <HAL_FLASHEx_Erase>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001eb2:	7efb      	ldrb	r3, [r7, #27]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d010      	beq.n	8001eda <EE_Init+0x39a>
          {
            return FlashStatus;
 8001eb8:	7efb      	ldrb	r3, [r7, #27]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	e011      	b.n	8001ee2 <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001ebe:	f000 f8b1 	bl	8002024 <EE_Format>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001ec6:	7efb      	ldrb	r3, [r7, #27]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d008      	beq.n	8001ede <EE_Init+0x39e>
      {
        return FlashStatus;
 8001ecc:	7efb      	ldrb	r3, [r7, #27]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	e007      	b.n	8001ee2 <EE_Init+0x3a2>
      break;
 8001ed2:	bf00      	nop
 8001ed4:	e004      	b.n	8001ee0 <EE_Init+0x3a0>
      break;
 8001ed6:	bf00      	nop
 8001ed8:	e002      	b.n	8001ee0 <EE_Init+0x3a0>
      break;
 8001eda:	bf00      	nop
 8001edc:	e000      	b.n	8001ee0 <EE_Init+0x3a0>
      }
      break;
 8001ede:	bf00      	nop
  }

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3728      	adds	r7, #40	; 0x28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	08034006 	.word	0x08034006
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	2000009e 	.word	0x2000009e
 8001ef8:	08034000 	.word	0x08034000
 8001efc:	08030000 	.word	0x08030000

08001f00 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8001f0c:	f245 5355 	movw	r3, #21845	; 0x5555
 8001f10:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8001f12:	e00d      	b.n	8001f30 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d002      	beq.n	8001f2a <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]

      break;
 8001f28:	e006      	b.n	8001f38 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <EE_VerifyPageFullyErased+0x48>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d3ed      	bcc.n	8001f14 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	b29b      	uxth	r3, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	08034000 	.word	0x08034000

08001f4c <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001f5c:	f245 5355 	movw	r3, #21845	; 0x5555
 8001f60:	81bb      	strh	r3, [r7, #12]
 8001f62:	2301      	movs	r3, #1
 8001f64:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <EE_ReadVariable+0x8c>)
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <EE_ReadVariable+0x8c>)
 8001f6c:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 f8aa 	bl	80020c8 <EE_FindValidPage>
 8001f74:	4603      	mov	r3, r0
 8001f76:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001f78:	89fb      	ldrh	r3, [r7, #14]
 8001f7a:	2bab      	cmp	r3, #171	; 0xab
 8001f7c:	d101      	bne.n	8001f82 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8001f7e:	23ab      	movs	r3, #171	; 0xab
 8001f80:	e025      	b.n	8001fce <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001f82:	89fb      	ldrh	r3, [r7, #14]
 8001f84:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f88:	330c      	adds	r3, #12
 8001f8a:	039b      	lsls	r3, r3, #14
 8001f8c:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001f8e:	89fb      	ldrh	r3, [r7, #14]
 8001f90:	3301      	adds	r3, #1
 8001f92:	039a      	lsls	r2, r3, #14
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <EE_ReadVariable+0x90>)
 8001f96:	4413      	add	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8001f9a:	e012      	b.n	8001fc2 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8001fa2:	89ba      	ldrh	r2, [r7, #12]
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d108      	bne.n	8001fbc <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	3b02      	subs	r3, #2
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	82fb      	strh	r3, [r7, #22]

      break;
 8001fba:	e007      	b.n	8001fcc <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	3b04      	subs	r3, #4
 8001fc0:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d8e7      	bhi.n	8001f9c <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001fcc:	8afb      	ldrh	r3, [r7, #22]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	08030000 	.word	0x08030000
 8001fdc:	0802fffe 	.word	0x0802fffe

08001fe0 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	460a      	mov	r2, r1
 8001fea:	80fb      	strh	r3, [r7, #6]
 8001fec:	4613      	mov	r3, r2
 8001fee:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001ff4:	88ba      	ldrh	r2, [r7, #4]
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f8aa 	bl	8002154 <EE_VerifyPageFullWriteVariable>
 8002000:	4603      	mov	r3, r0
 8002002:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8002004:	89fb      	ldrh	r3, [r7, #14]
 8002006:	2b80      	cmp	r3, #128	; 0x80
 8002008:	d107      	bne.n	800201a <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 800200a:	88ba      	ldrh	r2, [r7, #4]
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f000 f8f9 	bl	8002208 <EE_PageTransfer>
 8002016:	4603      	mov	r3, r0
 8002018:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 800201a:	89fb      	ldrh	r3, [r7, #14]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8002036:	2302      	movs	r3, #2
 8002038:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 800203a:	2301      	movs	r3, #1
 800203c:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800203e:	2302      	movs	r3, #2
 8002040:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8002042:	481f      	ldr	r0, [pc, #124]	; (80020c0 <EE_Format+0x9c>)
 8002044:	f7ff ff5c 	bl	8001f00 <EE_VerifyPageFullyErased>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10d      	bne.n	800206a <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 800204e:	f107 0218 	add.w	r2, r7, #24
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f003 fe96 	bl	8005d88 <HAL_FLASHEx_Erase>
 800205c:	4603      	mov	r3, r0
 800205e:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8002060:	7ffb      	ldrb	r3, [r7, #31]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <EE_Format+0x46>
    {
      return FlashStatus;
 8002066:	7ffb      	ldrb	r3, [r7, #31]
 8002068:	e025      	b.n	80020b6 <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	4913      	ldr	r1, [pc, #76]	; (80020c0 <EE_Format+0x9c>)
 8002074:	2001      	movs	r0, #1
 8002076:	f003 fcd1 	bl	8005a1c <HAL_FLASH_Program>
 800207a:	4603      	mov	r3, r0
 800207c:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800207e:	7ffb      	ldrb	r3, [r7, #31]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <EE_Format+0x64>
  {
    return FlashStatus;
 8002084:	7ffb      	ldrb	r3, [r7, #31]
 8002086:	e016      	b.n	80020b6 <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8002088:	2303      	movs	r3, #3
 800208a:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800208c:	480d      	ldr	r0, [pc, #52]	; (80020c4 <EE_Format+0xa0>)
 800208e:	f7ff ff37 	bl	8001f00 <EE_VerifyPageFullyErased>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10d      	bne.n	80020b4 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8002098:	f107 0218 	add.w	r2, r7, #24
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f003 fe71 	bl	8005d88 <HAL_FLASHEx_Erase>
 80020a6:	4603      	mov	r3, r0
 80020a8:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80020aa:	7ffb      	ldrb	r3, [r7, #31]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <EE_Format+0x90>
    {
      return FlashStatus;
 80020b0:	7ffb      	ldrb	r3, [r7, #31]
 80020b2:	e000      	b.n	80020b6 <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3720      	adds	r7, #32
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	08030000 	.word	0x08030000
 80020c4:	08034000 	.word	0x08034000

080020c8 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80020d2:	2306      	movs	r3, #6
 80020d4:	81fb      	strh	r3, [r7, #14]
 80020d6:	2306      	movs	r3, #6
 80020d8:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80020da:	4b1c      	ldr	r3, [pc, #112]	; (800214c <EE_FindValidPage+0x84>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80020e0:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <EE_FindValidPage+0x88>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01b      	beq.n	8002124 <EE_FindValidPage+0x5c>
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d125      	bne.n	800213c <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 80020f0:	89bb      	ldrh	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d108      	bne.n	8002108 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 80020f6:	89fb      	ldrh	r3, [r7, #14]
 80020f8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d101      	bne.n	8002104 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8002100:	2300      	movs	r3, #0
 8002102:	e01c      	b.n	800213e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8002104:	2301      	movs	r3, #1
 8002106:	e01a      	b.n	800213e <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8002108:	89fb      	ldrh	r3, [r7, #14]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d108      	bne.n	8002120 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800210e:	89bb      	ldrh	r3, [r7, #12]
 8002110:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002114:	4293      	cmp	r3, r2
 8002116:	d101      	bne.n	800211c <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8002118:	2301      	movs	r3, #1
 800211a:	e010      	b.n	800213e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 800211c:	2300      	movs	r3, #0
 800211e:	e00e      	b.n	800213e <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8002120:	23ab      	movs	r3, #171	; 0xab
 8002122:	e00c      	b.n	800213e <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8002124:	89fb      	ldrh	r3, [r7, #14]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800212a:	2300      	movs	r3, #0
 800212c:	e007      	b.n	800213e <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800212e:	89bb      	ldrh	r3, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8002134:	2301      	movs	r3, #1
 8002136:	e002      	b.n	800213e <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8002138:	23ab      	movs	r3, #171	; 0xab
 800213a:	e000      	b.n	800213e <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 800213c:	2300      	movs	r3, #0
  }
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	08030000 	.word	0x08030000
 8002150:	08034000 	.word	0x08034000

08002154 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	460a      	mov	r2, r1
 800215e:	80fb      	strh	r3, [r7, #6]
 8002160:	4613      	mov	r3, r2
 8002162:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8002168:	2300      	movs	r3, #0
 800216a:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 800216c:	4b23      	ldr	r3, [pc, #140]	; (80021fc <EE_VerifyPageFullWriteVariable+0xa8>)
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	4b23      	ldr	r3, [pc, #140]	; (8002200 <EE_VerifyPageFullWriteVariable+0xac>)
 8002172:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8002174:	2001      	movs	r0, #1
 8002176:	f7ff ffa7 	bl	80020c8 <EE_FindValidPage>
 800217a:	4603      	mov	r3, r0
 800217c:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800217e:	8a3b      	ldrh	r3, [r7, #16]
 8002180:	2bab      	cmp	r3, #171	; 0xab
 8002182:	d101      	bne.n	8002188 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8002184:	23ab      	movs	r3, #171	; 0xab
 8002186:	e035      	b.n	80021f4 <EE_VerifyPageFullWriteVariable+0xa0>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8002188:	8a3b      	ldrh	r3, [r7, #16]
 800218a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800218e:	330c      	adds	r3, #12
 8002190:	039b      	lsls	r3, r3, #14
 8002192:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8002194:	8a3b      	ldrh	r3, [r7, #16]
 8002196:	3301      	adds	r3, #1
 8002198:	039a      	lsls	r2, r3, #14
 800219a:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <EE_VerifyPageFullWriteVariable+0xb0>)
 800219c:	4413      	add	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 80021a0:	e023      	b.n	80021ea <EE_VerifyPageFullWriteVariable+0x96>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021aa:	d11b      	bne.n	80021e4 <EE_VerifyPageFullWriteVariable+0x90>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 80021ac:	88ba      	ldrh	r2, [r7, #4]
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	6979      	ldr	r1, [r7, #20]
 80021b4:	2001      	movs	r0, #1
 80021b6:	f003 fc31 	bl	8005a1c <HAL_FLASH_Program>
 80021ba:	4603      	mov	r3, r0
 80021bc:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80021be:	7cfb      	ldrb	r3, [r7, #19]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <EE_VerifyPageFullWriteVariable+0x76>
      {
        return FlashStatus;
 80021c4:	7cfb      	ldrb	r3, [r7, #19]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	e014      	b.n	80021f4 <EE_VerifyPageFullWriteVariable+0xa0>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	1c99      	adds	r1, r3, #2
 80021ce:	88fa      	ldrh	r2, [r7, #6]
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	2001      	movs	r0, #1
 80021d6:	f003 fc21 	bl	8005a1c <HAL_FLASH_Program>
 80021da:	4603      	mov	r3, r0
 80021dc:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 80021de:	7cfb      	ldrb	r3, [r7, #19]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	e007      	b.n	80021f4 <EE_VerifyPageFullWriteVariable+0xa0>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	3304      	adds	r3, #4
 80021e8:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d3d7      	bcc.n	80021a2 <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80021f2:	2380      	movs	r3, #128	; 0x80
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	08030000 	.word	0x08030000
 8002200:	08034000 	.word	0x08034000
 8002204:	0802ffff 	.word	0x0802ffff

08002208 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08c      	sub	sp, #48	; 0x30
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	460a      	mov	r2, r1
 8002212:	80fb      	strh	r3, [r7, #6]
 8002214:	4613      	mov	r3, r2
 8002216:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 800221e:	4b54      	ldr	r3, [pc, #336]	; (8002370 <EE_PageTransfer+0x168>)
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 8002222:	2300      	movs	r3, #0
 8002224:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	84bb      	strh	r3, [r7, #36]	; 0x24
 800222a:	2300      	movs	r3, #0
 800222c:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	847b      	strh	r3, [r7, #34]	; 0x22
 8002232:	2300      	movs	r3, #0
 8002234:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800223a:	2000      	movs	r0, #0
 800223c:	f7ff ff44 	bl	80020c8 <EE_FindValidPage>
 8002240:	4603      	mov	r3, r0
 8002242:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8002244:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002246:	2b01      	cmp	r3, #1
 8002248:	d104      	bne.n	8002254 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 800224a:	4b49      	ldr	r3, [pc, #292]	; (8002370 <EE_PageTransfer+0x168>)
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 800224e:	2303      	movs	r3, #3
 8002250:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002252:	e009      	b.n	8002268 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8002254:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002256:	2b00      	cmp	r3, #0
 8002258:	d104      	bne.n	8002264 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 800225a:	4b46      	ldr	r3, [pc, #280]	; (8002374 <EE_PageTransfer+0x16c>)
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 800225e:	2302      	movs	r3, #2
 8002260:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002262:	e001      	b.n	8002268 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8002264:	23ab      	movs	r3, #171	; 0xab
 8002266:	e07e      	b.n	8002366 <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8002268:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002272:	2001      	movs	r0, #1
 8002274:	f003 fbd2 	bl	8005a1c <HAL_FLASH_Program>
 8002278:	4603      	mov	r3, r0
 800227a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800227e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8002286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800228a:	b29b      	uxth	r3, r3
 800228c:	e06b      	b.n	8002366 <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800228e:	88ba      	ldrh	r2, [r7, #4]
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff5d 	bl	8002154 <EE_VerifyPageFullWriteVariable>
 800229a:	4603      	mov	r3, r0
 800229c:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800229e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 80022a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022a6:	e05e      	b.n	8002366 <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80022a8:	2300      	movs	r3, #0
 80022aa:	853b      	strh	r3, [r7, #40]	; 0x28
 80022ac:	e027      	b.n	80022fe <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80022ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022b0:	4a31      	ldr	r2, [pc, #196]	; (8002378 <EE_PageTransfer+0x170>)
 80022b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022b6:	88fa      	ldrh	r2, [r7, #6]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d01d      	beq.n	80022f8 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80022bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022be:	4a2e      	ldr	r2, [pc, #184]	; (8002378 <EE_PageTransfer+0x170>)
 80022c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022c4:	492d      	ldr	r1, [pc, #180]	; (800237c <EE_PageTransfer+0x174>)
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fe40 	bl	8001f4c <EE_ReadVariable>
 80022cc:	4603      	mov	r3, r0
 80022ce:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 80022d0:	8c3b      	ldrh	r3, [r7, #32]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d010      	beq.n	80022f8 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80022d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022d8:	4a27      	ldr	r2, [pc, #156]	; (8002378 <EE_PageTransfer+0x170>)
 80022da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022de:	4a27      	ldr	r2, [pc, #156]	; (800237c <EE_PageTransfer+0x174>)
 80022e0:	8812      	ldrh	r2, [r2, #0]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff35 	bl	8002154 <EE_VerifyPageFullWriteVariable>
 80022ea:	4603      	mov	r3, r0
 80022ec:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 80022ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 80022f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022f6:	e036      	b.n	8002366 <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80022f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022fa:	3301      	adds	r3, #1
 80022fc:	853b      	strh	r3, [r7, #40]	; 0x28
 80022fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002300:	2b02      	cmp	r3, #2
 8002302:	d9d4      	bls.n	80022ae <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8002308:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800230a:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 800230c:	2301      	movs	r3, #1
 800230e:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002310:	2302      	movs	r3, #2
 8002312:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8002314:	f107 021c 	add.w	r2, r7, #28
 8002318:	f107 0308 	add.w	r3, r7, #8
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f003 fd32 	bl	8005d88 <HAL_FLASHEx_Erase>
 8002324:	4603      	mov	r3, r0
 8002326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800232a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8002332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002336:	b29b      	uxth	r3, r3
 8002338:	e015      	b.n	8002366 <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002344:	2001      	movs	r0, #1
 8002346:	f003 fb69 	bl	8005a1c <HAL_FLASH_Program>
 800234a:	4603      	mov	r3, r0
 800234c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8002350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8002358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800235c:	b29b      	uxth	r3, r3
 800235e:	e002      	b.n	8002366 <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8002360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002364:	b29b      	uxth	r3, r3
}
 8002366:	4618      	mov	r0, r3
 8002368:	3730      	adds	r7, #48	; 0x30
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	08030000 	.word	0x08030000
 8002374:	08034000 	.word	0x08034000
 8002378:	20000000 	.word	0x20000000
 800237c:	2000009e 	.word	0x2000009e

08002380 <HAL_TIM_PWM_PulseFinishedCallback>:
/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

// for Motor J1 J2
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)								// Stepper J1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a33      	ldr	r2, [pc, #204]	; (800245c <HAL_TIM_PWM_PulseFinishedCallback+0xdc>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d12d      	bne.n	80023ee <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
	{
		motor_j1_data._currentPos = data_AS5600_M1;			// Set Current Position
 8002392:	4b33      	ldr	r3, [pc, #204]	; (8002460 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	4b32      	ldr	r3, [pc, #200]	; (8002464 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
		osSemaphoreRelease(binarySem_motorJ1Handle);		// Release Semaphore for Calculator Stepper (run)
 800239c:	4b32      	ldr	r3, [pc, #200]	; (8002468 <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f009 fbd5 	bl	800bb50 <osSemaphoreRelease>
		accel_j1_tik++;
 80023a6:	4b31      	ldr	r3, [pc, #196]	; (800246c <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	3301      	adds	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	4b2f      	ldr	r3, [pc, #188]	; (800246c <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 80023b0:	801a      	strh	r2, [r3, #0]
		if(accel_j1_tik==1000)								// Changer Accel
 80023b2:	4b2e      	ldr	r3, [pc, #184]	; (800246c <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ba:	d118      	bne.n	80023ee <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
		{
			accel_j1_tik=0;
 80023bc:	4b2b      	ldr	r3, [pc, #172]	; (800246c <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 80023be:	2200      	movs	r2, #0
 80023c0:	801a      	strh	r2, [r3, #0]
			long distance = distanceToGo(&motor_j1_data);
 80023c2:	4828      	ldr	r0, [pc, #160]	; (8002464 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 80023c4:	f7ff f836 	bl	8001434 <distanceToGo>
 80023c8:	60f8      	str	r0, [r7, #12]
			if(labs(distance) < 100){
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80023d0:	db08      	blt.n	80023e4 <HAL_TIM_PWM_PulseFinishedCallback+0x64>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2b63      	cmp	r3, #99	; 0x63
 80023d6:	dc05      	bgt.n	80023e4 <HAL_TIM_PWM_PulseFinishedCallback+0x64>
				setAcceleration(&motor_j1_data, j1_ACCEL_MIN);
 80023d8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002470 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>
 80023dc:	4821      	ldr	r0, [pc, #132]	; (8002464 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 80023de:	f7fe fecb 	bl	8001178 <setAcceleration>
 80023e2:	e004      	b.n	80023ee <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			}else{
				setAcceleration(&motor_j1_data, J1_ACCEL_MAX);
 80023e4:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8002474 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>
 80023e8:	481e      	ldr	r0, [pc, #120]	; (8002464 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 80023ea:	f7fe fec5 	bl	8001178 <setAcceleration>
			}
		}
	}
	if(htim->Instance==TIM2)								// Stepper J2
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f6:	d12d      	bne.n	8002454 <HAL_TIM_PWM_PulseFinishedCallback+0xd4>
		{
			motor_j2_data._currentPos = data_AS5600_M2;		// Set Current Position
 80023f8:	4b1f      	ldr	r3, [pc, #124]	; (8002478 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b1f      	ldr	r3, [pc, #124]	; (800247c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
			osSemaphoreRelease(binarySem_motorJ2Handle);	// Release Semaphore for Calculator Stepper (run)
 8002402:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f009 fba2 	bl	800bb50 <osSemaphoreRelease>
			accel_j2_tik++;
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002416:	801a      	strh	r2, [r3, #0]
			if(accel_j2_tik==500)
 8002418:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002420:	d118      	bne.n	8002454 <HAL_TIM_PWM_PulseFinishedCallback+0xd4>
			{
				accel_j2_tik=0;
 8002422:	4b18      	ldr	r3, [pc, #96]	; (8002484 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002424:	2200      	movs	r2, #0
 8002426:	801a      	strh	r2, [r3, #0]
				long distance = distanceToGo(&motor_j2_data);
 8002428:	4814      	ldr	r0, [pc, #80]	; (800247c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800242a:	f7ff f803 	bl	8001434 <distanceToGo>
 800242e:	60b8      	str	r0, [r7, #8]
				if(labs(distance) < 100){
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002436:	db08      	blt.n	800244a <HAL_TIM_PWM_PulseFinishedCallback+0xca>
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b63      	cmp	r3, #99	; 0x63
 800243c:	dc05      	bgt.n	800244a <HAL_TIM_PWM_PulseFinishedCallback+0xca>
					setAcceleration(&motor_j2_data, J2_ACCEL_MIN);
 800243e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8002470 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>
 8002442:	480e      	ldr	r0, [pc, #56]	; (800247c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002444:	f7fe fe98 	bl	8001178 <setAcceleration>
				}else{
					setAcceleration(&motor_j2_data, J2_ACCEL_MAX);
				}
			}
		}
}
 8002448:	e004      	b.n	8002454 <HAL_TIM_PWM_PulseFinishedCallback+0xd4>
					setAcceleration(&motor_j2_data, J2_ACCEL_MAX);
 800244a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002488 <HAL_TIM_PWM_PulseFinishedCallback+0x108>
 800244e:	480b      	ldr	r0, [pc, #44]	; (800247c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002450:	f7fe fe92 	bl	8001178 <setAcceleration>
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40000400 	.word	0x40000400
 8002460:	2000a5f6 	.word	0x2000a5f6
 8002464:	2000a860 	.word	0x2000a860
 8002468:	2000a6b8 	.word	0x2000a6b8
 800246c:	200000a4 	.word	0x200000a4
 8002470:	47c35000 	.word	0x47c35000
 8002474:	48f42400 	.word	0x48f42400
 8002478:	2000a5f4 	.word	0x2000a5f4
 800247c:	2000a800 	.word	0x2000a800
 8002480:	2000a85c 	.word	0x2000a85c
 8002484:	200000a6 	.word	0x200000a6
 8002488:	48c35000 	.word	0x48c35000

0800248c <HAL_I2C_AddrCallback>:

// I2C-Interface
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
 8002498:	4613      	mov	r3, r2
 800249a:	803b      	strh	r3, [r7, #0]
	if(hi2c->Instance==I2C2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <HAL_I2C_AddrCallback+0x48>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d112      	bne.n	80024cc <HAL_I2C_AddrCallback+0x40>
	{
		if(TransferDirection == I2C_DIRECTION_TRANSMIT)
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d106      	bne.n	80024ba <HAL_I2C_AddrCallback+0x2e>
		{
			HAL_I2C_Slave_Seq_Receive_DMA(&hi2c2,data_rev_master,4,I2C_FIRST_AND_LAST_FRAME);
 80024ac:	2308      	movs	r3, #8
 80024ae:	2204      	movs	r2, #4
 80024b0:	4909      	ldr	r1, [pc, #36]	; (80024d8 <HAL_I2C_AddrCallback+0x4c>)
 80024b2:	480a      	ldr	r0, [pc, #40]	; (80024dc <HAL_I2C_AddrCallback+0x50>)
 80024b4:	f004 fb5e 	bl	8006b74 <HAL_I2C_Slave_Seq_Receive_DMA>
		}else if(TransferDirection == I2C_DIRECTION_RECEIVE)
		{
			HAL_I2C_Slave_Seq_Transmit_DMA(&hi2c2, data_trans_master, 7, I2C_LAST_FRAME);
		}
	}
}
 80024b8:	e008      	b.n	80024cc <HAL_I2C_AddrCallback+0x40>
		}else if(TransferDirection == I2C_DIRECTION_RECEIVE)
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d105      	bne.n	80024cc <HAL_I2C_AddrCallback+0x40>
			HAL_I2C_Slave_Seq_Transmit_DMA(&hi2c2, data_trans_master, 7, I2C_LAST_FRAME);
 80024c0:	2320      	movs	r3, #32
 80024c2:	2207      	movs	r2, #7
 80024c4:	4906      	ldr	r1, [pc, #24]	; (80024e0 <HAL_I2C_AddrCallback+0x54>)
 80024c6:	4805      	ldr	r0, [pc, #20]	; (80024dc <HAL_I2C_AddrCallback+0x50>)
 80024c8:	f004 fa1a 	bl	8006900 <HAL_I2C_Slave_Seq_Transmit_DMA>
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40005800 	.word	0x40005800
 80024d8:	2000a6b0 	.word	0x2000a6b0
 80024dc:	2000a9c8 	.word	0x2000a9c8
 80024e0:	2000a854 	.word	0x2000a854

080024e4 <HAL_I2C_ListenCpltCallback>:
// 	I2C2 for interface
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(&hi2c2);
 80024ec:	4803      	ldr	r0, [pc, #12]	; (80024fc <HAL_I2C_ListenCpltCallback+0x18>)
 80024ee:	f004 fc7b 	bl	8006de8 <HAL_I2C_EnableListen_IT>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000a9c8 	.word	0x2000a9c8

08002500 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==I2C2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a05      	ldr	r2, [pc, #20]	; (8002524 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d104      	bne.n	800251c <HAL_I2C_SlaveRxCpltCallback+0x1c>
	{
		osSemaphoreRelease(binarySem_masterCmdHandle);// sau khi nhan duoc lenh tu master
 8002512:	4b05      	ldr	r3, [pc, #20]	; (8002528 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f009 fb1a 	bl	800bb50 <osSemaphoreRelease>
	}
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40005800 	.word	0x40005800
 8002528:	2000a8b4 	.word	0x2000a8b4

0800252c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4a07      	ldr	r2, [pc, #28]	; (8002558 <vApplicationGetIdleTaskMemory+0x2c>)
 800253c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	4a06      	ldr	r2, [pc, #24]	; (800255c <vApplicationGetIdleTaskMemory+0x30>)
 8002542:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	200000ac 	.word	0x200000ac
 800255c:	20000100 	.word	0x20000100

08002560 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a07      	ldr	r2, [pc, #28]	; (800258c <vApplicationGetTimerTaskMemory+0x2c>)
 8002570:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4a06      	ldr	r2, [pc, #24]	; (8002590 <vApplicationGetTimerTaskMemory+0x30>)
 8002576:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	20000300 	.word	0x20000300
 8002590:	20000354 	.word	0x20000354

08002594 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002594:	b5b0      	push	{r4, r5, r7, lr}
 8002596:	b0a2      	sub	sp, #136	; 0x88
 8002598:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySem_motorJ1 */
  osSemaphoreDef(binarySem_motorJ1);
 800259a:	2300      	movs	r3, #0
 800259c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  binarySem_motorJ1Handle = osSemaphoreCreate(osSemaphore(binarySem_motorJ1), 1);
 80025a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025aa:	2101      	movs	r1, #1
 80025ac:	4618      	mov	r0, r3
 80025ae:	f009 fa4e 	bl	800ba4e <osSemaphoreCreate>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4a34      	ldr	r2, [pc, #208]	; (8002688 <MX_FREERTOS_Init+0xf4>)
 80025b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySem_motorJ2 */
  osSemaphoreDef(binarySem_motorJ2);
 80025b8:	2300      	movs	r3, #0
 80025ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80025bc:	2300      	movs	r3, #0
 80025be:	67fb      	str	r3, [r7, #124]	; 0x7c
  binarySem_motorJ2Handle = osSemaphoreCreate(osSemaphore(binarySem_motorJ2), 1);
 80025c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025c4:	2101      	movs	r1, #1
 80025c6:	4618      	mov	r0, r3
 80025c8:	f009 fa41 	bl	800ba4e <osSemaphoreCreate>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4a2f      	ldr	r2, [pc, #188]	; (800268c <MX_FREERTOS_Init+0xf8>)
 80025d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySem_masterCmd */
  osSemaphoreDef(binarySem_masterCmd);
 80025d2:	2300      	movs	r3, #0
 80025d4:	673b      	str	r3, [r7, #112]	; 0x70
 80025d6:	2300      	movs	r3, #0
 80025d8:	677b      	str	r3, [r7, #116]	; 0x74
  binarySem_masterCmdHandle = osSemaphoreCreate(osSemaphore(binarySem_masterCmd), 1);
 80025da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025de:	2101      	movs	r1, #1
 80025e0:	4618      	mov	r0, r3
 80025e2:	f009 fa34 	bl	800ba4e <osSemaphoreCreate>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4a29      	ldr	r2, [pc, #164]	; (8002690 <MX_FREERTOS_Init+0xfc>)
 80025ea:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 4096);
 80025ec:	4b29      	ldr	r3, [pc, #164]	; (8002694 <MX_FREERTOS_Init+0x100>)
 80025ee:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80025f2:	461d      	mov	r5, r3
 80025f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002600:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f009 f9c1 	bl	800b98e <osThreadCreate>
 800260c:	4603      	mov	r3, r0
 800260e:	4a22      	ldr	r2, [pc, #136]	; (8002698 <MX_FREERTOS_Init+0x104>)
 8002610:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorJ1Task */
  osThreadDef(motorJ1Task, StartTaskMotorJ1, osPriorityHigh, 0, 2048);
 8002612:	4b22      	ldr	r3, [pc, #136]	; (800269c <MX_FREERTOS_Init+0x108>)
 8002614:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002618:	461d      	mov	r5, r3
 800261a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800261c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800261e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorJ1TaskHandle = osThreadCreate(osThread(motorJ1Task), NULL);
 8002626:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f009 f9ae 	bl	800b98e <osThreadCreate>
 8002632:	4603      	mov	r3, r0
 8002634:	4a1a      	ldr	r2, [pc, #104]	; (80026a0 <MX_FREERTOS_Init+0x10c>)
 8002636:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorJ2Task */
  osThreadDef(motorJ2Task, StartTaskMotorJ2, osPriorityHigh, 0, 2048);
 8002638:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <MX_FREERTOS_Init+0x110>)
 800263a:	f107 041c 	add.w	r4, r7, #28
 800263e:	461d      	mov	r5, r3
 8002640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002644:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorJ2TaskHandle = osThreadCreate(osThread(motorJ2Task), NULL);
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f009 f99b 	bl	800b98e <osThreadCreate>
 8002658:	4603      	mov	r3, r0
 800265a:	4a13      	ldr	r2, [pc, #76]	; (80026a8 <MX_FREERTOS_Init+0x114>)
 800265c:	6013      	str	r3, [r2, #0]

  /* definition and creation of moveTask */
  osThreadDef(moveTask, StartTaskMove, osPriorityRealtime, 0, 1024);
 800265e:	4b13      	ldr	r3, [pc, #76]	; (80026ac <MX_FREERTOS_Init+0x118>)
 8002660:	463c      	mov	r4, r7
 8002662:	461d      	mov	r5, r3
 8002664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002668:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800266c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  moveTaskHandle = osThreadCreate(osThread(moveTask), NULL);
 8002670:	463b      	mov	r3, r7
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f009 f98a 	bl	800b98e <osThreadCreate>
 800267a:	4603      	mov	r3, r0
 800267c:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <MX_FREERTOS_Init+0x11c>)
 800267e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002680:	bf00      	nop
 8002682:	3788      	adds	r7, #136	; 0x88
 8002684:	46bd      	mov	sp, r7
 8002686:	bdb0      	pop	{r4, r5, r7, pc}
 8002688:	2000a6b8 	.word	0x2000a6b8
 800268c:	2000a85c 	.word	0x2000a85c
 8002690:	2000a8b4 	.word	0x2000a8b4
 8002694:	0800fe40 	.word	0x0800fe40
 8002698:	2000a6ac 	.word	0x2000a6ac
 800269c:	0800fe5c 	.word	0x0800fe5c
 80026a0:	2000a6a8 	.word	0x2000a6a8
 80026a4:	0800fe78 	.word	0x0800fe78
 80026a8:	2000a8bc 	.word	0x2000a8bc
 80026ac:	0800fe94 	.word	0x0800fe94
 80026b0:	2000a6b4 	.word	0x2000a6b4

080026b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void const * argument)
{
 80026b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026b8:	b096      	sub	sp, #88	; 0x58
 80026ba:	af04      	add	r7, sp, #16
 80026bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
#ifdef MDEBUG
	printf("Robochess 2021\r\n");
 80026be:	48a8      	ldr	r0, [pc, #672]	; (8002960 <StartDefaultTask+0x2ac>)
 80026c0:	f00c fade 	bl	800ec80 <puts>
#endif
	readSquarePosition();
 80026c4:	f000 fc6a 	bl	8002f9c <readSquarePosition>
	HAL_I2C_EnableListen_IT(&hi2c2);	// I2C2 for interface
 80026c8:	48a6      	ldr	r0, [pc, #664]	; (8002964 <StartDefaultTask+0x2b0>)
 80026ca:	f004 fb8d 	bl	8006de8 <HAL_I2C_EnableListen_IT>
	AS5600_Start_Update();				// Start Tim10 & get data of AS5600
 80026ce:	f7fe fc59 	bl	8000f84 <AS5600_Start_Update>
	batteryVoltInit();
 80026d2:	f7ff f9c1 	bl	8001a58 <batteryVoltInit>
	pickAndDropInit();
 80026d6:	f001 f909 	bl	80038ec <pickAndDropInit>
  /* Infinite loop */
  for(;;)
  {
	  updateInfo();
 80026da:	f000 fbb7 	bl	8002e4c <updateInfo>

#ifdef MDEBUG
	  if(uart2_onData){
 80026de:	4ba2      	ldr	r3, [pc, #648]	; (8002968 <StartDefaultTask+0x2b4>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 818c 	beq.w	8002a00 <StartDefaultTask+0x34c>
		  uart2_onData=false; //realease
 80026e8:	4b9f      	ldr	r3, [pc, #636]	; (8002968 <StartDefaultTask+0x2b4>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]
		  printf("Rev %dBYTE: %s\r\n",uart2_data_length,uart2_main_buf);
 80026ee:	4b9f      	ldr	r3, [pc, #636]	; (800296c <StartDefaultTask+0x2b8>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	4a9f      	ldr	r2, [pc, #636]	; (8002970 <StartDefaultTask+0x2bc>)
 80026f4:	4619      	mov	r1, r3
 80026f6:	489f      	ldr	r0, [pc, #636]	; (8002974 <StartDefaultTask+0x2c0>)
 80026f8:	f00c fa3c 	bl	800eb74 <iprintf>
		  // Gripper
		  if(uart2_main_buf[0]==CMD_GRIPPER){
 80026fc:	4b9c      	ldr	r3, [pc, #624]	; (8002970 <StartDefaultTask+0x2bc>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b47      	cmp	r3, #71	; 0x47
 8002702:	d120      	bne.n	8002746 <StartDefaultTask+0x92>
			  char sval[1];
			  sval[0]=uart2_main_buf[1];
 8002704:	4b9a      	ldr	r3, [pc, #616]	; (8002970 <StartDefaultTask+0x2bc>)
 8002706:	785b      	ldrb	r3, [r3, #1]
 8002708:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			  int val=atoi(sval);
 800270c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002710:	4618      	mov	r0, r3
 8002712:	f00c f9eb 	bl	800eaec <atoi>
 8002716:	62b8      	str	r0, [r7, #40]	; 0x28
			  if(val==0){
 8002718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271a:	2b00      	cmp	r3, #0
 800271c:	d107      	bne.n	800272e <StartDefaultTask+0x7a>
				  SERVO_DROP;
 800271e:	4b96      	ldr	r3, [pc, #600]	; (8002978 <StartDefaultTask+0x2c4>)
 8002720:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002724:	63da      	str	r2, [r3, #60]	; 0x3c
				  printf("Gripper open\r\n");
 8002726:	4895      	ldr	r0, [pc, #596]	; (800297c <StartDefaultTask+0x2c8>)
 8002728:	f00c faaa 	bl	800ec80 <puts>
 800272c:	e163      	b.n	80029f6 <StartDefaultTask+0x342>
			  }else if(val==1){
 800272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002730:	2b01      	cmp	r3, #1
 8002732:	f040 8160 	bne.w	80029f6 <StartDefaultTask+0x342>
				  SERVO_PICKUP;
 8002736:	4b90      	ldr	r3, [pc, #576]	; (8002978 <StartDefaultTask+0x2c4>)
 8002738:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800273c:	63da      	str	r2, [r3, #60]	; 0x3c
				  printf("Gripper close\r\n");
 800273e:	4890      	ldr	r0, [pc, #576]	; (8002980 <StartDefaultTask+0x2cc>)
 8002740:	f00c fa9e 	bl	800ec80 <puts>
 8002744:	e157      	b.n	80029f6 <StartDefaultTask+0x342>
			  }
		// Info
		  }else if(uart2_main_buf[0]==CMD_INFO){
 8002746:	4b8a      	ldr	r3, [pc, #552]	; (8002970 <StartDefaultTask+0x2bc>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b49      	cmp	r3, #73	; 0x49
 800274c:	d123      	bne.n	8002796 <StartDefaultTask+0xe2>
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 800274e:	4b8d      	ldr	r3, [pc, #564]	; (8002984 <StartDefaultTask+0x2d0>)
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	461d      	mov	r5, r3
 8002754:	4b8c      	ldr	r3, [pc, #560]	; (8002988 <StartDefaultTask+0x2d4>)
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	461e      	mov	r6, r3
		 			  data_AS5600_M1,data_AS5600_M2,HAL_SENSOR_UP_GET,HAL_SENSOR_DOWN_GET,
 800275a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800275e:	488b      	ldr	r0, [pc, #556]	; (800298c <StartDefaultTask+0x2d8>)
 8002760:	f003 fdb8 	bl	80062d4 <HAL_GPIO_ReadPin>
 8002764:	4603      	mov	r3, r0
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 8002766:	4698      	mov	r8, r3
		 			  data_AS5600_M1,data_AS5600_M2,HAL_SENSOR_UP_GET,HAL_SENSOR_DOWN_GET,
 8002768:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800276c:	4887      	ldr	r0, [pc, #540]	; (800298c <StartDefaultTask+0x2d8>)
 800276e:	f003 fdb1 	bl	80062d4 <HAL_GPIO_ReadPin>
 8002772:	4603      	mov	r3, r0
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 8002774:	461c      	mov	r4, r3
					  batteryGet(),data_trans_master[6]);
 8002776:	f7ff f979 	bl	8001a6c <batteryGet>
 800277a:	4603      	mov	r3, r0
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 800277c:	461a      	mov	r2, r3
					  batteryGet(),data_trans_master[6]);
 800277e:	4b84      	ldr	r3, [pc, #528]	; (8002990 <StartDefaultTask+0x2dc>)
 8002780:	799b      	ldrb	r3, [r3, #6]
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 8002782:	9302      	str	r3, [sp, #8]
 8002784:	9201      	str	r2, [sp, #4]
 8002786:	9400      	str	r4, [sp, #0]
 8002788:	4643      	mov	r3, r8
 800278a:	4632      	mov	r2, r6
 800278c:	4629      	mov	r1, r5
 800278e:	4881      	ldr	r0, [pc, #516]	; (8002994 <StartDefaultTask+0x2e0>)
 8002790:	f00c f9f0 	bl	800eb74 <iprintf>
 8002794:	e12f      	b.n	80029f6 <StartDefaultTask+0x342>
		// PICK
		  }else if(uart2_main_buf[0]==CMD_PICK){
 8002796:	4b76      	ldr	r3, [pc, #472]	; (8002970 <StartDefaultTask+0x2bc>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b70      	cmp	r3, #112	; 0x70
 800279c:	d11c      	bne.n	80027d8 <StartDefaultTask+0x124>
			  char sval[1];
			  sval[0]=uart2_main_buf[1];
 800279e:	4b74      	ldr	r3, [pc, #464]	; (8002970 <StartDefaultTask+0x2bc>)
 80027a0:	785b      	ldrb	r3, [r3, #1]
 80027a2:	f887 3020 	strb.w	r3, [r7, #32]
			  int val=atoi(sval);
 80027a6:	f107 0320 	add.w	r3, r7, #32
 80027aa:	4618      	mov	r0, r3
 80027ac:	f00c f99e 	bl	800eaec <atoi>
 80027b0:	62f8      	str	r0, [r7, #44]	; 0x2c
			  if(val==0){
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <StartDefaultTask+0x110>
				  printf("J3 MOVE UP\r\n");
 80027b8:	4877      	ldr	r0, [pc, #476]	; (8002998 <StartDefaultTask+0x2e4>)
 80027ba:	f00c fa61 	bl	800ec80 <puts>
				  j3MoveUp();
 80027be:	f001 f8d7 	bl	8003970 <j3MoveUp>
 80027c2:	e118      	b.n	80029f6 <StartDefaultTask+0x342>
			  }else if(val==1){
 80027c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	f040 8115 	bne.w	80029f6 <StartDefaultTask+0x342>
				  printf("J3 MOVE DOWN\r\n");
 80027cc:	4873      	ldr	r0, [pc, #460]	; (800299c <StartDefaultTask+0x2e8>)
 80027ce:	f00c fa57 	bl	800ec80 <puts>
				  j3MoveDown();
 80027d2:	f001 f8f3 	bl	80039bc <j3MoveDown>
 80027d6:	e10e      	b.n	80029f6 <StartDefaultTask+0x342>
			  }
		// PICK PIECE
		  }else if(uart2_main_buf[0]==CMD_PICKPIECE){
 80027d8:	4b65      	ldr	r3, [pc, #404]	; (8002970 <StartDefaultTask+0x2bc>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b50      	cmp	r3, #80	; 0x50
 80027de:	d11b      	bne.n	8002818 <StartDefaultTask+0x164>
			  char sval[1];
			  sval[0]=uart2_main_buf[1];
 80027e0:	4b63      	ldr	r3, [pc, #396]	; (8002970 <StartDefaultTask+0x2bc>)
 80027e2:	785b      	ldrb	r3, [r3, #1]
 80027e4:	773b      	strb	r3, [r7, #28]
			  int val=atoi(sval);
 80027e6:	f107 031c 	add.w	r3, r7, #28
 80027ea:	4618      	mov	r0, r3
 80027ec:	f00c f97e 	bl	800eaec <atoi>
 80027f0:	6338      	str	r0, [r7, #48]	; 0x30
			  if(val==0){
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <StartDefaultTask+0x150>
				  printf("DROP PIECE\r\n");
 80027f8:	4869      	ldr	r0, [pc, #420]	; (80029a0 <StartDefaultTask+0x2ec>)
 80027fa:	f00c fa41 	bl	800ec80 <puts>
				  dropPiece();
 80027fe:	f001 f91b 	bl	8003a38 <dropPiece>
 8002802:	e0f8      	b.n	80029f6 <StartDefaultTask+0x342>
			  }else if(val==1){
 8002804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002806:	2b01      	cmp	r3, #1
 8002808:	f040 80f5 	bne.w	80029f6 <StartDefaultTask+0x342>
				  printf("PICKUP PIECE\r\n");
 800280c:	4865      	ldr	r0, [pc, #404]	; (80029a4 <StartDefaultTask+0x2f0>)
 800280e:	f00c fa37 	bl	800ec80 <puts>
				  pickupPiece();
 8002812:	f001 f8f9 	bl	8003a08 <pickupPiece>
 8002816:	e0ee      	b.n	80029f6 <StartDefaultTask+0x342>
			  }
		// MOVE
		  }else if(uart2_main_buf[0]==CMD_MOVE){
 8002818:	4b55      	ldr	r3, [pc, #340]	; (8002970 <StartDefaultTask+0x2bc>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b6d      	cmp	r3, #109	; 0x6d
 800281e:	d12b      	bne.n	8002878 <StartDefaultTask+0x1c4>
			  char sval[2];
			  if(uart2_data_length>2){
 8002820:	4b52      	ldr	r3, [pc, #328]	; (800296c <StartDefaultTask+0x2b8>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d906      	bls.n	8002836 <StartDefaultTask+0x182>
				  sval[0]=uart2_main_buf[1];
 8002828:	4b51      	ldr	r3, [pc, #324]	; (8002970 <StartDefaultTask+0x2bc>)
 800282a:	785b      	ldrb	r3, [r3, #1]
 800282c:	763b      	strb	r3, [r7, #24]
				  sval[1]=uart2_main_buf[2];
 800282e:	4b50      	ldr	r3, [pc, #320]	; (8002970 <StartDefaultTask+0x2bc>)
 8002830:	789b      	ldrb	r3, [r3, #2]
 8002832:	767b      	strb	r3, [r7, #25]
 8002834:	e004      	b.n	8002840 <StartDefaultTask+0x18c>
			  }else{
				  sval[0]='0';
 8002836:	2330      	movs	r3, #48	; 0x30
 8002838:	763b      	strb	r3, [r7, #24]
				  sval[1]=uart2_main_buf[1];
 800283a:	4b4d      	ldr	r3, [pc, #308]	; (8002970 <StartDefaultTask+0x2bc>)
 800283c:	785b      	ldrb	r3, [r3, #1]
 800283e:	767b      	strb	r3, [r7, #25]
			  }
			  int val=atoi(sval);
 8002840:	f107 0318 	add.w	r3, r7, #24
 8002844:	4618      	mov	r0, r3
 8002846:	f00c f951 	bl	800eaec <atoi>
 800284a:	6378      	str	r0, [r7, #52]	; 0x34
			  if(val>=0 && val<80){
 800284c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284e:	2b00      	cmp	r3, #0
 8002850:	db0d      	blt.n	800286e <StartDefaultTask+0x1ba>
 8002852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002854:	2b4f      	cmp	r3, #79	; 0x4f
 8002856:	dc0a      	bgt.n	800286e <StartDefaultTask+0x1ba>
				  printf("MOVE TO SQUARE:%d\r\n",val);
 8002858:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800285a:	4853      	ldr	r0, [pc, #332]	; (80029a8 <StartDefaultTask+0x2f4>)
 800285c:	f00c f98a 	bl	800eb74 <iprintf>
				  moveToSquare(val, false);
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f9d4 	bl	8002c14 <moveToSquare>
 800286c:	e0c3      	b.n	80029f6 <StartDefaultTask+0x342>
			  }else{
				  printf("ERROR! Cannot move to square %d\r\n",val);
 800286e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002870:	484e      	ldr	r0, [pc, #312]	; (80029ac <StartDefaultTask+0x2f8>)
 8002872:	f00c f97f 	bl	800eb74 <iprintf>
 8002876:	e0be      	b.n	80029f6 <StartDefaultTask+0x342>
			  }
		// MOVE PIECE
		  }else if(uart2_main_buf[0]==CMD_MOVEPIECE){
 8002878:	4b3d      	ldr	r3, [pc, #244]	; (8002970 <StartDefaultTask+0x2bc>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b4d      	cmp	r3, #77	; 0x4d
 800287e:	d140      	bne.n	8002902 <StartDefaultTask+0x24e>
			  char sFrom[2],sTo[2],sOption[1];
			  sFrom[0]=uart2_main_buf[1];
 8002880:	4b3b      	ldr	r3, [pc, #236]	; (8002970 <StartDefaultTask+0x2bc>)
 8002882:	785b      	ldrb	r3, [r3, #1]
 8002884:	753b      	strb	r3, [r7, #20]
			  sFrom[1]=uart2_main_buf[2];
 8002886:	4b3a      	ldr	r3, [pc, #232]	; (8002970 <StartDefaultTask+0x2bc>)
 8002888:	789b      	ldrb	r3, [r3, #2]
 800288a:	757b      	strb	r3, [r7, #21]
			  sTo[0]=uart2_main_buf[3];
 800288c:	4b38      	ldr	r3, [pc, #224]	; (8002970 <StartDefaultTask+0x2bc>)
 800288e:	78db      	ldrb	r3, [r3, #3]
 8002890:	743b      	strb	r3, [r7, #16]
			  sTo[1]=uart2_main_buf[4];
 8002892:	4b37      	ldr	r3, [pc, #220]	; (8002970 <StartDefaultTask+0x2bc>)
 8002894:	791b      	ldrb	r3, [r3, #4]
 8002896:	747b      	strb	r3, [r7, #17]
			  sOption[0]=uart2_main_buf[5];
 8002898:	4b35      	ldr	r3, [pc, #212]	; (8002970 <StartDefaultTask+0x2bc>)
 800289a:	795b      	ldrb	r3, [r3, #5]
 800289c:	733b      	strb	r3, [r7, #12]
			  int _from=atoi(sFrom);
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	4618      	mov	r0, r3
 80028a4:	f00c f922 	bl	800eaec <atoi>
 80028a8:	6438      	str	r0, [r7, #64]	; 0x40
			  int _to =atoi(sTo);
 80028aa:	f107 0310 	add.w	r3, r7, #16
 80028ae:	4618      	mov	r0, r3
 80028b0:	f00c f91c 	bl	800eaec <atoi>
 80028b4:	63f8      	str	r0, [r7, #60]	; 0x3c
			  int _option =atoi(sOption);
 80028b6:	f107 030c 	add.w	r3, r7, #12
 80028ba:	4618      	mov	r0, r3
 80028bc:	f00c f916 	bl	800eaec <atoi>
 80028c0:	63b8      	str	r0, [r7, #56]	; 0x38
			  if((_from>=0 && _from<80) && (_to>=0 && _to<80)){
 80028c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	db18      	blt.n	80028fa <StartDefaultTask+0x246>
 80028c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ca:	2b4f      	cmp	r3, #79	; 0x4f
 80028cc:	dc15      	bgt.n	80028fa <StartDefaultTask+0x246>
 80028ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	db12      	blt.n	80028fa <StartDefaultTask+0x246>
 80028d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d6:	2b4f      	cmp	r3, #79	; 0x4f
 80028d8:	dc0f      	bgt.n	80028fa <StartDefaultTask+0x246>
				  printf("MOVEPIECE %d->%d Option:%d\r\n",_from,_to,_option);
 80028da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028e0:	4833      	ldr	r0, [pc, #204]	; (80029b0 <StartDefaultTask+0x2fc>)
 80028e2:	f00c f947 	bl	800eb74 <iprintf>
				  movePiece(_from, _to, _option);
 80028e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028ec:	b2d1      	uxtb	r1, r2
 80028ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fa22 	bl	8002d3c <movePiece>
 80028f8:	e07d      	b.n	80029f6 <StartDefaultTask+0x342>
			  }else{
				  printf("ERROR! Out Range of square\r\n");
 80028fa:	482e      	ldr	r0, [pc, #184]	; (80029b4 <StartDefaultTask+0x300>)
 80028fc:	f00c f9c0 	bl	800ec80 <puts>
 8002900:	e079      	b.n	80029f6 <StartDefaultTask+0x342>
			  }
		  }else if(uart2_main_buf[0]==CMD_MOVEHOME){
 8002902:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <StartDefaultTask+0x2bc>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b48      	cmp	r3, #72	; 0x48
 8002908:	d105      	bne.n	8002916 <StartDefaultTask+0x262>
			  printf("MOVE HOME\r\n");
 800290a:	482b      	ldr	r0, [pc, #172]	; (80029b8 <StartDefaultTask+0x304>)
 800290c:	f00c f9b8 	bl	800ec80 <puts>
			  moveToHome();
 8002910:	f000 f9f8 	bl	8002d04 <moveToHome>
 8002914:	e06f      	b.n	80029f6 <StartDefaultTask+0x342>
		  }else if(uart2_main_buf[0]=='w'){
 8002916:	4b16      	ldr	r3, [pc, #88]	; (8002970 <StartDefaultTask+0x2bc>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b77      	cmp	r3, #119	; 0x77
 800291c:	d118      	bne.n	8002950 <StartDefaultTask+0x29c>
			  char sdat[3];
			  sdat[0]=uart2_main_buf[1];
 800291e:	4b14      	ldr	r3, [pc, #80]	; (8002970 <StartDefaultTask+0x2bc>)
 8002920:	785b      	ldrb	r3, [r3, #1]
 8002922:	723b      	strb	r3, [r7, #8]
			  sdat[1]=uart2_main_buf[2];
 8002924:	4b12      	ldr	r3, [pc, #72]	; (8002970 <StartDefaultTask+0x2bc>)
 8002926:	789b      	ldrb	r3, [r3, #2]
 8002928:	727b      	strb	r3, [r7, #9]
			  uint16_t squa = atoi(sdat);
 800292a:	f107 0308 	add.w	r3, r7, #8
 800292e:	4618      	mov	r0, r3
 8002930:	f00c f8dc 	bl	800eaec <atoi>
 8002934:	4603      	mov	r3, r0
 8002936:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			  num_squa = squa;
 800293a:	4a20      	ldr	r2, [pc, #128]	; (80029bc <StartDefaultTask+0x308>)
 800293c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002940:	8013      	strh	r3, [r2, #0]
			  printf("set square to %d\r\n",num_squa);
 8002942:	4b1e      	ldr	r3, [pc, #120]	; (80029bc <StartDefaultTask+0x308>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	4619      	mov	r1, r3
 8002948:	481d      	ldr	r0, [pc, #116]	; (80029c0 <StartDefaultTask+0x30c>)
 800294a:	f00c f913 	bl	800eb74 <iprintf>
 800294e:	e052      	b.n	80029f6 <StartDefaultTask+0x342>
		  }else if(uart2_main_buf[0]=='r'){
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <StartDefaultTask+0x2bc>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b72      	cmp	r3, #114	; 0x72
 8002956:	d135      	bne.n	80029c4 <StartDefaultTask+0x310>
			  readSquarePosition();
 8002958:	f000 fb20 	bl	8002f9c <readSquarePosition>
 800295c:	e04b      	b.n	80029f6 <StartDefaultTask+0x342>
 800295e:	bf00      	nop
 8002960:	0800feb0 	.word	0x0800feb0
 8002964:	2000a9c8 	.word	0x2000a9c8
 8002968:	20000754 	.word	0x20000754
 800296c:	2000aba8 	.word	0x2000aba8
 8002970:	2000ab9c 	.word	0x2000ab9c
 8002974:	0800fec0 	.word	0x0800fec0
 8002978:	40000800 	.word	0x40000800
 800297c:	0800fed4 	.word	0x0800fed4
 8002980:	0800fee4 	.word	0x0800fee4
 8002984:	2000a5f6 	.word	0x2000a5f6
 8002988:	2000a5f4 	.word	0x2000a5f4
 800298c:	40020800 	.word	0x40020800
 8002990:	2000a854 	.word	0x2000a854
 8002994:	0800fef4 	.word	0x0800fef4
 8002998:	0800ff30 	.word	0x0800ff30
 800299c:	0800ff3c 	.word	0x0800ff3c
 80029a0:	0800ff4c 	.word	0x0800ff4c
 80029a4:	0800ff58 	.word	0x0800ff58
 80029a8:	0800ff68 	.word	0x0800ff68
 80029ac:	0800ff7c 	.word	0x0800ff7c
 80029b0:	0800ffa0 	.word	0x0800ffa0
 80029b4:	0800ffc0 	.word	0x0800ffc0
 80029b8:	0800ffdc 	.word	0x0800ffdc
 80029bc:	200000a2 	.word	0x200000a2
 80029c0:	0800ffe8 	.word	0x0800ffe8
		  }
		  else if(uart2_main_buf[0]=='W'){
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <StartDefaultTask+0x360>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b57      	cmp	r3, #87	; 0x57
 80029ca:	d114      	bne.n	80029f6 <StartDefaultTask+0x342>
			  if(num_squa>=80) return;
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <StartDefaultTask+0x364>)
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	2b4f      	cmp	r3, #79	; 0x4f
 80029d2:	d819      	bhi.n	8002a08 <StartDefaultTask+0x354>
		  	updateSquarePosition(num_squa);
 80029d4:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <StartDefaultTask+0x364>)
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fab5 	bl	8002f48 <updateSquarePosition>
		  	num_squa++;
 80029de:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <StartDefaultTask+0x364>)
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <StartDefaultTask+0x364>)
 80029e8:	801a      	strh	r2, [r3, #0]
		  	printf("next square:%d\r\n",num_squa);
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <StartDefaultTask+0x364>)
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	4619      	mov	r1, r3
 80029f0:	480a      	ldr	r0, [pc, #40]	; (8002a1c <StartDefaultTask+0x368>)
 80029f2:	f00c f8bf 	bl	800eb74 <iprintf>
			{
				square_getpos++;
				printf("Square:%d\r\n",square_getpos);
			}
#endif
		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80029f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029fa:	4809      	ldr	r0, [pc, #36]	; (8002a20 <StartDefaultTask+0x36c>)
 80029fc:	f003 fc9b 	bl	8006336 <HAL_GPIO_TogglePin>
	  }
#endif
	 	  osDelay(100);
 8002a00:	2064      	movs	r0, #100	; 0x64
 8002a02:	f009 f810 	bl	800ba26 <osDelay>
	  updateInfo();
 8002a06:	e668      	b.n	80026da <StartDefaultTask+0x26>
			  if(num_squa>=80) return;
 8002a08:	bf00      	nop
  }
  /* USER CODE END StartDefaultTask */
}
 8002a0a:	3748      	adds	r7, #72	; 0x48
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a12:	bf00      	nop
 8002a14:	2000ab9c 	.word	0x2000ab9c
 8002a18:	200000a2 	.word	0x200000a2
 8002a1c:	0800fffc 	.word	0x0800fffc
 8002a20:	40020000 	.word	0x40020000

08002a24 <StartTaskMotorJ1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMotorJ1 */
__weak void StartTaskMotorJ1(void const * argument)
{
 8002a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a26:	b095      	sub	sp, #84	; 0x54
 8002a28:	af12      	add	r7, sp, #72	; 0x48
 8002a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMotorJ1 */
		osDelay(2000);						// Wait for finish Init
 8002a2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a30:	f008 fff9 	bl	800ba26 <osDelay>
		motor_j1_data.GPIO_PIN_Dir		= J1_DIR_Pin;
 8002a34:	4b1e      	ldr	r3, [pc, #120]	; (8002ab0 <StartTaskMotorJ1+0x8c>)
 8002a36:	2202      	movs	r2, #2
 8002a38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		motor_j1_data.GPIO_PORT_Dir		= J1_DIR_GPIO_Port;
 8002a3c:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <StartTaskMotorJ1+0x8c>)
 8002a3e:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <StartTaskMotorJ1+0x90>)
 8002a40:	63da      	str	r2, [r3, #60]	; 0x3c
		motor_j1_data.GPIO_PORT_Enable	= J1_EN_GPIO_Port;
 8002a42:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <StartTaskMotorJ1+0x8c>)
 8002a44:	4a1b      	ldr	r2, [pc, #108]	; (8002ab4 <StartTaskMotorJ1+0x90>)
 8002a46:	641a      	str	r2, [r3, #64]	; 0x40
		motor_j1_data.GPIO_PIN_Enable	= J1_EN_Pin;
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <StartTaskMotorJ1+0x8c>)
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		motor_j1_data.USER_TIMER		= TIM3;
 8002a50:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <StartTaskMotorJ1+0x8c>)
 8002a52:	4a19      	ldr	r2, [pc, #100]	; (8002ab8 <StartTaskMotorJ1+0x94>)
 8002a54:	649a      	str	r2, [r3, #72]	; 0x48
		motor_j1_data.TIM_CHANEL		= TIM_CHANNEL_3;
 8002a56:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <StartTaskMotorJ1+0x8c>)
 8002a58:	2208      	movs	r2, #8
 8002a5a:	64da      	str	r2, [r3, #76]	; 0x4c
		motor_j1_data.isStop			= false;
 8002a5c:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <StartTaskMotorJ1+0x8c>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		AccelStepper_init(&motor_j1_data, htim3, data_AS5600_M1, J1_SPEED, J1_ACCEL_MAX);
 8002a64:	4b15      	ldr	r3, [pc, #84]	; (8002abc <StartTaskMotorJ1+0x98>)
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	4e15      	ldr	r6, [pc, #84]	; (8002ac0 <StartTaskMotorJ1+0x9c>)
 8002a6a:	4a16      	ldr	r2, [pc, #88]	; (8002ac4 <StartTaskMotorJ1+0xa0>)
 8002a6c:	9211      	str	r2, [sp, #68]	; 0x44
 8002a6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a72:	9210      	str	r2, [sp, #64]	; 0x40
 8002a74:	930f      	str	r3, [sp, #60]	; 0x3c
 8002a76:	466d      	mov	r5, sp
 8002a78:	f106 040c 	add.w	r4, r6, #12
 8002a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a88:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002a8c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002a90:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002a94:	4806      	ldr	r0, [pc, #24]	; (8002ab0 <StartTaskMotorJ1+0x8c>)
 8002a96:	f7fe faa1 	bl	8000fdc <AccelStepper_init>
	}
#endif
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(binarySem_motorJ1Handle, osWaitForever);
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <StartTaskMotorJ1+0xa4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f009 f806 	bl	800bab4 <osSemaphoreWait>
	  	  run(&motor_j1_data);
 8002aa8:	4801      	ldr	r0, [pc, #4]	; (8002ab0 <StartTaskMotorJ1+0x8c>)
 8002aaa:	f7fe fcd3 	bl	8001454 <run>
	  osSemaphoreWait(binarySem_motorJ1Handle, osWaitForever);
 8002aae:	e7f4      	b.n	8002a9a <StartTaskMotorJ1+0x76>
 8002ab0:	2000a860 	.word	0x2000a860
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	40000400 	.word	0x40000400
 8002abc:	2000a5f6 	.word	0x2000a5f6
 8002ac0:	2000acd4 	.word	0x2000acd4
 8002ac4:	0007a120 	.word	0x0007a120
 8002ac8:	2000a6b8 	.word	0x2000a6b8

08002acc <StartTaskMotorJ2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMotorJ2 */
__weak void StartTaskMotorJ2(void const * argument)
{
 8002acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ace:	b095      	sub	sp, #84	; 0x54
 8002ad0:	af12      	add	r7, sp, #72	; 0x48
 8002ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMotorJ2 */

		osDelay(2000);						// Wait for finish Init
 8002ad4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ad8:	f008 ffa5 	bl	800ba26 <osDelay>
		motor_j2_data.GPIO_PIN_Dir		= J2_DIR_Pin;
 8002adc:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <StartTaskMotorJ2+0x90>)
 8002ade:	2240      	movs	r2, #64	; 0x40
 8002ae0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		motor_j2_data.GPIO_PORT_Dir		= J2_DIR_GPIO_Port;
 8002ae4:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <StartTaskMotorJ2+0x90>)
 8002ae6:	4a1e      	ldr	r2, [pc, #120]	; (8002b60 <StartTaskMotorJ2+0x94>)
 8002ae8:	63da      	str	r2, [r3, #60]	; 0x3c
		motor_j2_data.GPIO_PORT_Enable	= J2_EN_GPIO_Port;
 8002aea:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <StartTaskMotorJ2+0x90>)
 8002aec:	4a1c      	ldr	r2, [pc, #112]	; (8002b60 <StartTaskMotorJ2+0x94>)
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
		motor_j2_data.GPIO_PIN_Enable	= J2_EN_Pin;
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <StartTaskMotorJ2+0x90>)
 8002af2:	2280      	movs	r2, #128	; 0x80
 8002af4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		motor_j2_data.USER_TIMER		= TIM2;
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <StartTaskMotorJ2+0x90>)
 8002afa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002afe:	649a      	str	r2, [r3, #72]	; 0x48
		motor_j2_data.TIM_CHANEL		= TIM_CHANNEL_1;
 8002b00:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <StartTaskMotorJ2+0x90>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	64da      	str	r2, [r3, #76]	; 0x4c
		motor_j2_data.isStop			= false;
 8002b06:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <StartTaskMotorJ2+0x90>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		AccelStepper_init(&motor_j2_data, htim2, data_AS5600_M2, J2_SPEED, J2_ACCEL_MAX);
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <StartTaskMotorJ2+0x98>)
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	4e15      	ldr	r6, [pc, #84]	; (8002b68 <StartTaskMotorJ2+0x9c>)
 8002b14:	4a15      	ldr	r2, [pc, #84]	; (8002b6c <StartTaskMotorJ2+0xa0>)
 8002b16:	9211      	str	r2, [sp, #68]	; 0x44
 8002b18:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b1c:	9210      	str	r2, [sp, #64]	; 0x40
 8002b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8002b20:	466d      	mov	r5, sp
 8002b22:	f106 040c 	add.w	r4, r6, #12
 8002b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b32:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002b36:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002b3a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002b3e:	4807      	ldr	r0, [pc, #28]	; (8002b5c <StartTaskMotorJ2+0x90>)
 8002b40:	f7fe fa4c 	bl	8000fdc <AccelStepper_init>
	}
#endif
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(binarySem_motorJ2Handle, osWaitForever);
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <StartTaskMotorJ2+0xa4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f008 ffb1 	bl	800bab4 <osSemaphoreWait>
	  run(&motor_j2_data);
 8002b52:	4802      	ldr	r0, [pc, #8]	; (8002b5c <StartTaskMotorJ2+0x90>)
 8002b54:	f7fe fc7e 	bl	8001454 <run>
	  osSemaphoreWait(binarySem_motorJ2Handle, osWaitForever);
 8002b58:	e7f4      	b.n	8002b44 <StartTaskMotorJ2+0x78>
 8002b5a:	bf00      	nop
 8002b5c:	2000a800 	.word	0x2000a800
 8002b60:	40020000 	.word	0x40020000
 8002b64:	2000a5f4 	.word	0x2000a5f4
 8002b68:	2000ad1c 	.word	0x2000ad1c
 8002b6c:	00061a80 	.word	0x00061a80
 8002b70:	2000a85c 	.word	0x2000a85c

08002b74 <StartTaskMove>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMove */
__weak void StartTaskMove(void const * argument)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMove */
	osDelay(2500);
 8002b7c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002b80:	f008 ff51 	bl	800ba26 <osDelay>
  /* Infinite loop */
	for (;;) {
		osSemaphoreWait(binarySem_masterCmdHandle, osWaitForever);
 8002b84:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <StartTaskMove+0x8c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f008 ff91 	bl	800bab4 <osSemaphoreWait>
		moveIsFinish = false;
 8002b92:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <StartTaskMove+0x90>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
		if (data_rev_master[0] == CMD_I2C_MOVE_PIECE) {
 8002b98:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <StartTaskMove+0x94>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d114      	bne.n	8002bca <StartTaskMove+0x56>
#ifdef MDEBUG
			printf("I2C-MOVE-%d->%d OP:%d\r\n",data_rev_master[1],data_rev_master[2],data_rev_master[3]);
 8002ba0:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <StartTaskMove+0x94>)
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <StartTaskMove+0x94>)
 8002ba8:	789b      	ldrb	r3, [r3, #2]
 8002baa:	461a      	mov	r2, r3
 8002bac:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <StartTaskMove+0x94>)
 8002bae:	78db      	ldrb	r3, [r3, #3]
 8002bb0:	4816      	ldr	r0, [pc, #88]	; (8002c0c <StartTaskMove+0x98>)
 8002bb2:	f00b ffdf 	bl	800eb74 <iprintf>
#endif
			movePiece(data_rev_master[1], data_rev_master[2],data_rev_master[3]);
 8002bb6:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <StartTaskMove+0x94>)
 8002bb8:	785b      	ldrb	r3, [r3, #1]
 8002bba:	4a13      	ldr	r2, [pc, #76]	; (8002c08 <StartTaskMove+0x94>)
 8002bbc:	7891      	ldrb	r1, [r2, #2]
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <StartTaskMove+0x94>)
 8002bc0:	78d2      	ldrb	r2, [r2, #3]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f8ba 	bl	8002d3c <movePiece>
 8002bc8:	e016      	b.n	8002bf8 <StartTaskMove+0x84>
		} else if (data_rev_master[0] == CMD_I2C_MOVE_HOME) {
 8002bca:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <StartTaskMove+0x94>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d108      	bne.n	8002be4 <StartTaskMove+0x70>
#ifdef MDEBUG
			printf("I2C-MOVEHOME\r\n");
 8002bd2:	480f      	ldr	r0, [pc, #60]	; (8002c10 <StartTaskMove+0x9c>)
 8002bd4:	f00c f854 	bl	800ec80 <puts>
#endif
			moveToHome();
 8002bd8:	f000 f894 	bl	8002d04 <moveToHome>
			moveIsFinish = true;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <StartTaskMove+0x90>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e009      	b.n	8002bf8 <StartTaskMove+0x84>
		}else if(data_rev_master[0] == CMD_I2C_SETPOS_SQUARE){
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <StartTaskMove+0x94>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b06      	cmp	r3, #6
 8002bea:	d105      	bne.n	8002bf8 <StartTaskMove+0x84>
			updateSquarePosition(data_rev_master[1]);
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <StartTaskMove+0x94>)
 8002bee:	785b      	ldrb	r3, [r3, #1]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 f9a8 	bl	8002f48 <updateSquarePosition>
		}
		osDelay(10);
 8002bf8:	200a      	movs	r0, #10
 8002bfa:	f008 ff14 	bl	800ba26 <osDelay>
		osSemaphoreWait(binarySem_masterCmdHandle, osWaitForever);
 8002bfe:	e7c1      	b.n	8002b84 <StartTaskMove+0x10>
 8002c00:	2000a8b4 	.word	0x2000a8b4
 8002c04:	200000a8 	.word	0x200000a8
 8002c08:	2000a6b0 	.word	0x2000a6b0
 8002c0c:	08010010 	.word	0x08010010
 8002c10:	08010028 	.word	0x08010028

08002c14 <moveToSquare>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void moveToSquare(uint8_t point,bool continues)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	460a      	mov	r2, r1
 8002c1e:	71fb      	strb	r3, [r7, #7]
 8002c20:	4613      	mov	r3, r2
 8002c22:	71bb      	strb	r3, [r7, #6]
	AS5600_Start_Update_High();
 8002c24:	f7fe f9cc 	bl	8000fc0 <AS5600_Start_Update_High>
	enableStepper(&motor_j1_data, ON);
 8002c28:	2101      	movs	r1, #1
 8002c2a:	4833      	ldr	r0, [pc, #204]	; (8002cf8 <moveToSquare+0xe4>)
 8002c2c:	f7fe fde2 	bl	80017f4 <enableStepper>
	enableStepper(&motor_j2_data, ON);
 8002c30:	2101      	movs	r1, #1
 8002c32:	4832      	ldr	r0, [pc, #200]	; (8002cfc <moveToSquare+0xe8>)
 8002c34:	f7fe fdde 	bl	80017f4 <enableStepper>
	moveTo(&motor_j1_data,square[point].j1);
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	4a31      	ldr	r2, [pc, #196]	; (8002d00 <moveToSquare+0xec>)
 8002c3c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8002c40:	4619      	mov	r1, r3
 8002c42:	482d      	ldr	r0, [pc, #180]	; (8002cf8 <moveToSquare+0xe4>)
 8002c44:	f7fe fdbe 	bl	80017c4 <moveTo>
	run(&motor_j1_data);
 8002c48:	482b      	ldr	r0, [pc, #172]	; (8002cf8 <moveToSquare+0xe4>)
 8002c4a:	f7fe fc03 	bl	8001454 <run>
	moveTo(&motor_j2_data,square[point].j2);
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	4a2b      	ldr	r2, [pc, #172]	; (8002d00 <moveToSquare+0xec>)
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	885b      	ldrh	r3, [r3, #2]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4828      	ldr	r0, [pc, #160]	; (8002cfc <moveToSquare+0xe8>)
 8002c5c:	f7fe fdb2 	bl	80017c4 <moveTo>
	run(&motor_j2_data);
 8002c60:	4826      	ldr	r0, [pc, #152]	; (8002cfc <moveToSquare+0xe8>)
 8002c62:	f7fe fbf7 	bl	8001454 <run>
	uint16_t check_time_out=0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	81fb      	strh	r3, [r7, #14]
	while( isRunning(&motor_j1_data) || isRunning(&motor_j2_data) ){	// Waiting for move finish
 8002c6a:	e01a      	b.n	8002ca2 <moveToSquare+0x8e>
		if( labs(distanceToGo(&motor_j1_data)) < 2  &&  labs(distanceToGo(&motor_j2_data)) < 2 ){		// neu dung sai la nho thi thoat trong khoang 500ms
 8002c6c:	4822      	ldr	r0, [pc, #136]	; (8002cf8 <moveToSquare+0xe4>)
 8002c6e:	f7fe fbe1 	bl	8001434 <distanceToGo>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bfb8      	it	lt
 8002c78:	425b      	neglt	r3, r3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	dc0e      	bgt.n	8002c9c <moveToSquare+0x88>
 8002c7e:	481f      	ldr	r0, [pc, #124]	; (8002cfc <moveToSquare+0xe8>)
 8002c80:	f7fe fbd8 	bl	8001434 <distanceToGo>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bfb8      	it	lt
 8002c8a:	425b      	neglt	r3, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	dc05      	bgt.n	8002c9c <moveToSquare+0x88>
			check_time_out++;
 8002c90:	89fb      	ldrh	r3, [r7, #14]
 8002c92:	3301      	adds	r3, #1
 8002c94:	81fb      	strh	r3, [r7, #14]
			if(check_time_out > 100) break;
 8002c96:	89fb      	ldrh	r3, [r7, #14]
 8002c98:	2b64      	cmp	r3, #100	; 0x64
 8002c9a:	d80f      	bhi.n	8002cbc <moveToSquare+0xa8>
		}
		osDelay(10);
 8002c9c:	200a      	movs	r0, #10
 8002c9e:	f008 fec2 	bl	800ba26 <osDelay>
	while( isRunning(&motor_j1_data) || isRunning(&motor_j2_data) ){	// Waiting for move finish
 8002ca2:	4815      	ldr	r0, [pc, #84]	; (8002cf8 <moveToSquare+0xe4>)
 8002ca4:	f7fe fd72 	bl	800178c <isRunning>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1de      	bne.n	8002c6c <moveToSquare+0x58>
 8002cae:	4813      	ldr	r0, [pc, #76]	; (8002cfc <moveToSquare+0xe8>)
 8002cb0:	f7fe fd6c 	bl	800178c <isRunning>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1d8      	bne.n	8002c6c <moveToSquare+0x58>
 8002cba:	e000      	b.n	8002cbe <moveToSquare+0xaa>
			if(check_time_out > 100) break;
 8002cbc:	bf00      	nop
	}
	motor_j1_data.isStop = true;
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <moveToSquare+0xe4>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	motor_j2_data.isStop = true;
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <moveToSquare+0xe8>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	if(continues==false)
 8002cce:	79bb      	ldrb	r3, [r7, #6]
 8002cd0:	f083 0301 	eor.w	r3, r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <moveToSquare+0xda>
	{
		enableStepper(&motor_j1_data, OFF);
 8002cda:	2100      	movs	r1, #0
 8002cdc:	4806      	ldr	r0, [pc, #24]	; (8002cf8 <moveToSquare+0xe4>)
 8002cde:	f7fe fd89 	bl	80017f4 <enableStepper>
		enableStepper(&motor_j2_data, OFF);
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4805      	ldr	r0, [pc, #20]	; (8002cfc <moveToSquare+0xe8>)
 8002ce6:	f7fe fd85 	bl	80017f4 <enableStepper>
		AS5600_Start_Update_Low();
 8002cea:	f7fe f95b 	bl	8000fa4 <AS5600_Start_Update_Low>
	}
}
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	2000a860 	.word	0x2000a860
 8002cfc:	2000a800 	.word	0x2000a800
 8002d00:	2000a6c0 	.word	0x2000a6c0

08002d04 <moveToHome>:

void moveToHome()
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
	moveToSquare(79, false);
 8002d08:	2100      	movs	r1, #0
 8002d0a:	204f      	movs	r0, #79	; 0x4f
 8002d0c:	f7ff ff82 	bl	8002c14 <moveToSquare>
}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <moveToKill>:
void moveToKill()
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
	moveToSquare(square_kill_number + 64, true);
 8002d18:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <moveToKill+0x24>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	3340      	adds	r3, #64	; 0x40
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2101      	movs	r1, #1
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff ff76 	bl	8002c14 <moveToSquare>
	square_kill_number++;
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <moveToKill+0x24>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	4b01      	ldr	r3, [pc, #4]	; (8002d38 <moveToKill+0x24>)
 8002d32:	701a      	strb	r2, [r3, #0]
}
 8002d34:	bf00      	nop
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	200000a0 	.word	0x200000a0

08002d3c <movePiece>:
void movePiece(uint8_t qFrom,uint8_t qTo,uint8_t option)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	71fb      	strb	r3, [r7, #7]
 8002d46:	460b      	mov	r3, r1
 8002d48:	71bb      	strb	r3, [r7, #6]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	717b      	strb	r3, [r7, #5]
	if(option == CMD_I2C_MOVE_KILL)										// Neu la nuoc di an quan thi gap piece ra khoi ban co
 8002d4e:	797b      	ldrb	r3, [r7, #5]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d10b      	bne.n	8002d6c <movePiece+0x30>
	{
		moveToSquare(qTo, true);		// move to piece kill
 8002d54:	79bb      	ldrb	r3, [r7, #6]
 8002d56:	2101      	movs	r1, #1
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff5b 	bl	8002c14 <moveToSquare>
		pickupPiece();					// pickup
 8002d5e:	f000 fe53 	bl	8003a08 <pickupPiece>
		moveToKill();		// move to square die
 8002d62:	f7ff ffd7 	bl	8002d14 <moveToKill>
		dropPiece();					// drop
 8002d66:	f000 fe67 	bl	8003a38 <dropPiece>
 8002d6a:	e05c      	b.n	8002e26 <movePiece+0xea>
	}else if(option == CMD_I2C_MOVE_CASLLING_KING)
 8002d6c:	797b      	ldrb	r3, [r7, #5]
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d11a      	bne.n	8002da8 <movePiece+0x6c>
	{
		moveToSquare(4, true);
 8002d72:	2101      	movs	r1, #1
 8002d74:	2004      	movs	r0, #4
 8002d76:	f7ff ff4d 	bl	8002c14 <moveToSquare>
		pickupPiece();
 8002d7a:	f000 fe45 	bl	8003a08 <pickupPiece>
		moveToSquare(6, true);
 8002d7e:	2101      	movs	r1, #1
 8002d80:	2006      	movs	r0, #6
 8002d82:	f7ff ff47 	bl	8002c14 <moveToSquare>
		dropPiece();
 8002d86:	f000 fe57 	bl	8003a38 <dropPiece>
		moveToSquare(7, true);
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	2007      	movs	r0, #7
 8002d8e:	f7ff ff41 	bl	8002c14 <moveToSquare>
		pickupPiece();
 8002d92:	f000 fe39 	bl	8003a08 <pickupPiece>
		moveToSquare(5, true);
 8002d96:	2101      	movs	r1, #1
 8002d98:	2005      	movs	r0, #5
 8002d9a:	f7ff ff3b 	bl	8002c14 <moveToSquare>
		dropPiece();
 8002d9e:	f000 fe4b 	bl	8003a38 <dropPiece>
		moveToHome();
 8002da2:	f7ff ffaf 	bl	8002d04 <moveToHome>
		return;
 8002da6:	e04e      	b.n	8002e46 <movePiece+0x10a>
	}else if(option == CMD_I2C_MOVE_CASLLINGG_QUEEN)
 8002da8:	797b      	ldrb	r3, [r7, #5]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d11a      	bne.n	8002de4 <movePiece+0xa8>
	{
		moveToSquare(4, true);
 8002dae:	2101      	movs	r1, #1
 8002db0:	2004      	movs	r0, #4
 8002db2:	f7ff ff2f 	bl	8002c14 <moveToSquare>
		pickupPiece();
 8002db6:	f000 fe27 	bl	8003a08 <pickupPiece>
		moveToSquare(2, true);
 8002dba:	2101      	movs	r1, #1
 8002dbc:	2002      	movs	r0, #2
 8002dbe:	f7ff ff29 	bl	8002c14 <moveToSquare>
		dropPiece();
 8002dc2:	f000 fe39 	bl	8003a38 <dropPiece>
		moveToSquare(0, true);
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f7ff ff23 	bl	8002c14 <moveToSquare>
		pickupPiece();
 8002dce:	f000 fe1b 	bl	8003a08 <pickupPiece>
		moveToSquare(3, true);
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	2003      	movs	r0, #3
 8002dd6:	f7ff ff1d 	bl	8002c14 <moveToSquare>
		dropPiece();
 8002dda:	f000 fe2d 	bl	8003a38 <dropPiece>
		moveToHome();
 8002dde:	f7ff ff91 	bl	8002d04 <moveToHome>
		return;
 8002de2:	e030      	b.n	8002e46 <movePiece+0x10a>
	}else if(option == CMD_I2C_MOVE_PASSANT){
 8002de4:	797b      	ldrb	r3, [r7, #5]
 8002de6:	2b05      	cmp	r3, #5
 8002de8:	d11d      	bne.n	8002e26 <movePiece+0xea>
		moveToSquare(qTo-8, true);
 8002dea:	79bb      	ldrb	r3, [r7, #6]
 8002dec:	3b08      	subs	r3, #8
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2101      	movs	r1, #1
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ff0e 	bl	8002c14 <moveToSquare>
		pickupPiece();
 8002df8:	f000 fe06 	bl	8003a08 <pickupPiece>
		moveToKill();
 8002dfc:	f7ff ff8a 	bl	8002d14 <moveToKill>
		dropPiece();
 8002e00:	f000 fe1a 	bl	8003a38 <dropPiece>
		moveToSquare(qFrom, true);
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	2101      	movs	r1, #1
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff03 	bl	8002c14 <moveToSquare>
		pickupPiece();
 8002e0e:	f000 fdfb 	bl	8003a08 <pickupPiece>
		moveToSquare(qTo, true);
 8002e12:	79bb      	ldrb	r3, [r7, #6]
 8002e14:	2101      	movs	r1, #1
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fefc 	bl	8002c14 <moveToSquare>
		dropPiece();
 8002e1c:	f000 fe0c 	bl	8003a38 <dropPiece>
		moveToHome();
 8002e20:	f7ff ff70 	bl	8002d04 <moveToHome>
		return;
 8002e24:	e00f      	b.n	8002e46 <movePiece+0x10a>
	}
	moveToSquare(qFrom, true);
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	2101      	movs	r1, #1
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fef2 	bl	8002c14 <moveToSquare>
	pickupPiece();
 8002e30:	f000 fdea 	bl	8003a08 <pickupPiece>
	moveToSquare(qTo, true);
 8002e34:	79bb      	ldrb	r3, [r7, #6]
 8002e36:	2101      	movs	r1, #1
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff feeb 	bl	8002c14 <moveToSquare>
	dropPiece();
 8002e3e:	f000 fdfb 	bl	8003a38 <dropPiece>
	moveToHome();
 8002e42:	f7ff ff5f 	bl	8002d04 <moveToHome>
}
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <updateInfo>:

void updateInfo(){
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
	  int bat_volt	= batteryGet();
 8002e52:	f7fe fe0b 	bl	8001a6c <batteryGet>
 8002e56:	4603      	mov	r3, r0
 8002e58:	603b      	str	r3, [r7, #0]
	  uint8_t status=0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	71fb      	strb	r3, [r7, #7]
	  data_trans_master[0] = (uint8_t)(data_AS5600_M1 & 0xFF);
 8002e5e:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <updateInfo+0xe4>)
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	4b33      	ldr	r3, [pc, #204]	; (8002f34 <updateInfo+0xe8>)
 8002e66:	701a      	strb	r2, [r3, #0]
	  data_trans_master[1] = (uint8_t)((data_AS5600_M1>>8) & 0xFF);
 8002e68:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <updateInfo+0xe4>)
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4b30      	ldr	r3, [pc, #192]	; (8002f34 <updateInfo+0xe8>)
 8002e74:	705a      	strb	r2, [r3, #1]
	  data_trans_master[2] = (uint8_t)(data_AS5600_M2 & 0xFF);
 8002e76:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <updateInfo+0xec>)
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <updateInfo+0xe8>)
 8002e7e:	709a      	strb	r2, [r3, #2]
	  data_trans_master[3] = (uint8_t)((data_AS5600_M2>>8) & 0xFF);
 8002e80:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <updateInfo+0xec>)
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <updateInfo+0xe8>)
 8002e8c:	70da      	strb	r2, [r3, #3]
	  data_trans_master[4] = (uint8_t)(bat_volt & 0xFF);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4b28      	ldr	r3, [pc, #160]	; (8002f34 <updateInfo+0xe8>)
 8002e94:	711a      	strb	r2, [r3, #4]
	  data_trans_master[5] = (uint8_t)((bat_volt>>8) & 0xFF);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	121b      	asrs	r3, r3, #8
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <updateInfo+0xe8>)
 8002e9e:	715a      	strb	r2, [r3, #5]
	  if(HAL_SENSOR_UP_GET) status|=(1<<0); else status &=~(1<<0);																// Hal_sensor_up
 8002ea0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ea4:	4825      	ldr	r0, [pc, #148]	; (8002f3c <updateInfo+0xf0>)
 8002ea6:	f003 fa15 	bl	80062d4 <HAL_GPIO_ReadPin>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <updateInfo+0x6e>
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	71fb      	strb	r3, [r7, #7]
 8002eb8:	e003      	b.n	8002ec2 <updateInfo+0x76>
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	71fb      	strb	r3, [r7, #7]
	  if(HAL_SENSOR_DOWN_GET) status |= (1<<1); else status &=~(1<<1);															// Hal_sensor_down
 8002ec2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ec6:	481d      	ldr	r0, [pc, #116]	; (8002f3c <updateInfo+0xf0>)
 8002ec8:	f003 fa04 	bl	80062d4 <HAL_GPIO_ReadPin>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d004      	beq.n	8002edc <updateInfo+0x90>
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	f043 0302 	orr.w	r3, r3, #2
 8002ed8:	71fb      	strb	r3, [r7, #7]
 8002eda:	e003      	b.n	8002ee4 <updateInfo+0x98>
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	f023 0302 	bic.w	r3, r3, #2
 8002ee2:	71fb      	strb	r3, [r7, #7]
	  if(HAL_GPIO_ReadPin(BATTERY_CHANGER_GPIO_Port, BATTERY_CHANGER_Pin)==GPIO_PIN_RESET) status |=(1<<2); else status &=~(1<<2);  	// Battery Chnager
 8002ee4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ee8:	4815      	ldr	r0, [pc, #84]	; (8002f40 <updateInfo+0xf4>)
 8002eea:	f003 f9f3 	bl	80062d4 <HAL_GPIO_ReadPin>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d104      	bne.n	8002efe <updateInfo+0xb2>
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	f043 0304 	orr.w	r3, r3, #4
 8002efa:	71fb      	strb	r3, [r7, #7]
 8002efc:	e003      	b.n	8002f06 <updateInfo+0xba>
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	f023 0304 	bic.w	r3, r3, #4
 8002f04:	71fb      	strb	r3, [r7, #7]
	  if(moveIsFinish == true) status |=(1<<3); else status &=~(1<<3);
 8002f06:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <updateInfo+0xf8>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <updateInfo+0xcc>
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	f043 0308 	orr.w	r3, r3, #8
 8002f14:	71fb      	strb	r3, [r7, #7]
 8002f16:	e003      	b.n	8002f20 <updateInfo+0xd4>
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	f023 0308 	bic.w	r3, r3, #8
 8002f1e:	71fb      	strb	r3, [r7, #7]
	  data_trans_master[6] = status;
 8002f20:	4a04      	ldr	r2, [pc, #16]	; (8002f34 <updateInfo+0xe8>)
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	7193      	strb	r3, [r2, #6]
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	2000a5f6 	.word	0x2000a5f6
 8002f34:	2000a854 	.word	0x2000a854
 8002f38:	2000a5f4 	.word	0x2000a5f4
 8002f3c:	40020800 	.word	0x40020800
 8002f40:	40020400 	.word	0x40020400
 8002f44:	200000a8 	.word	0x200000a8

08002f48 <updateSquarePosition>:

void updateSquarePosition(uint16_t squa){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	80fb      	strh	r3, [r7, #6]
	EE_WriteVariable(ADDR_EE_POSJ1 + squa, data_AS5600_M1);
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8002f58:	3355      	adds	r3, #85	; 0x55
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <updateSquarePosition+0x48>)
 8002f5e:	8812      	ldrh	r2, [r2, #0]
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff f83c 	bl	8001fe0 <EE_WriteVariable>
	EE_WriteVariable(ADDR_EE_POSJ2 + squa, data_AS5600_M2);
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	f503 43ee 	add.w	r3, r3, #30464	; 0x7700
 8002f6e:	3377      	adds	r3, #119	; 0x77
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <updateSquarePosition+0x4c>)
 8002f74:	8812      	ldrh	r2, [r2, #0]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff f831 	bl	8001fe0 <EE_WriteVariable>
	printf("Saved square %d to EEPROM\r\n",squa);
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	4619      	mov	r1, r3
 8002f82:	4805      	ldr	r0, [pc, #20]	; (8002f98 <updateSquarePosition+0x50>)
 8002f84:	f00b fdf6 	bl	800eb74 <iprintf>
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	2000a5f6 	.word	0x2000a5f6
 8002f94:	2000a5f4 	.word	0x2000a5f4
 8002f98:	08010038 	.word	0x08010038

08002f9c <readSquarePosition>:
void readSquarePosition(){
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
#ifdef MDEBUG
	printf("reading...\r\n");
 8002fa2:	482f      	ldr	r0, [pc, #188]	; (8003060 <readSquarePosition+0xc4>)
 8002fa4:	f00b fe6c 	bl	800ec80 <puts>
#endif
	uint16_t posj1,posj2;
	for(int i=0;i<80;i++){
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	e024      	b.n	8002ff8 <readSquarePosition+0x5c>
		EE_ReadVariable(ADDR_EE_POSJ1 + i, &posj1);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8002fb6:	3355      	adds	r3, #85	; 0x55
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	1cba      	adds	r2, r7, #2
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe ffc4 	bl	8001f4c <EE_ReadVariable>
		EE_ReadVariable(ADDR_EE_POSJ2 + i, &posj2);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f503 43ee 	add.w	r3, r3, #30464	; 0x7700
 8002fcc:	3377      	adds	r3, #119	; 0x77
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	463a      	mov	r2, r7
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fe ffb9 	bl	8001f4c <EE_ReadVariable>
		square[i].j1 = posj1;
 8002fda:	8879      	ldrh	r1, [r7, #2]
 8002fdc:	4a21      	ldr	r2, [pc, #132]	; (8003064 <readSquarePosition+0xc8>)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		square[i].j2 = posj2;
 8002fe4:	8839      	ldrh	r1, [r7, #0]
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <readSquarePosition+0xc8>)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	460a      	mov	r2, r1
 8002ff0:	805a      	strh	r2, [r3, #2]
	for(int i=0;i<80;i++){
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b4f      	cmp	r3, #79	; 0x4f
 8002ffc:	ddd7      	ble.n	8002fae <readSquarePosition+0x12>
	}
#ifdef MDEBUG
	for(int x=0;x<10;x++){
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	e022      	b.n	800304a <readSquarePosition+0xae>
		for(int y=0;y<8;y++){
 8003004:	2300      	movs	r3, #0
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	e016      	b.n	8003038 <readSquarePosition+0x9c>
			printf("{%d,%d},",square[x*8 +y].j1,square[x*8 +y].j2);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	00da      	lsls	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	4a14      	ldr	r2, [pc, #80]	; (8003064 <readSquarePosition+0xc8>)
 8003014:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8003018:	4619      	mov	r1, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	00da      	lsls	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	4a10      	ldr	r2, [pc, #64]	; (8003064 <readSquarePosition+0xc8>)
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	885b      	ldrh	r3, [r3, #2]
 800302a:	461a      	mov	r2, r3
 800302c:	480e      	ldr	r0, [pc, #56]	; (8003068 <readSquarePosition+0xcc>)
 800302e:	f00b fda1 	bl	800eb74 <iprintf>
		for(int y=0;y<8;y++){
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3301      	adds	r3, #1
 8003036:	607b      	str	r3, [r7, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b07      	cmp	r3, #7
 800303c:	dde5      	ble.n	800300a <readSquarePosition+0x6e>
		}
		printf("\r\n");
 800303e:	480b      	ldr	r0, [pc, #44]	; (800306c <readSquarePosition+0xd0>)
 8003040:	f00b fe1e 	bl	800ec80 <puts>
	for(int x=0;x<10;x++){
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	3301      	adds	r3, #1
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b09      	cmp	r3, #9
 800304e:	ddd9      	ble.n	8003004 <readSquarePosition+0x68>
	}
	printf("read finish\r\n");
 8003050:	4807      	ldr	r0, [pc, #28]	; (8003070 <readSquarePosition+0xd4>)
 8003052:	f00b fe15 	bl	800ec80 <puts>
#endif
}
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	08010054 	.word	0x08010054
 8003064:	2000a6c0 	.word	0x2000a6c0
 8003068:	08010060 	.word	0x08010060
 800306c:	0801006c 	.word	0x0801006c
 8003070:	08010070 	.word	0x08010070

08003074 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307a:	f107 0314 	add.w	r3, r7, #20
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	60da      	str	r2, [r3, #12]
 8003088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	4b45      	ldr	r3, [pc, #276]	; (80031a4 <MX_GPIO_Init+0x130>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	4a44      	ldr	r2, [pc, #272]	; (80031a4 <MX_GPIO_Init+0x130>)
 8003094:	f043 0304 	orr.w	r3, r3, #4
 8003098:	6313      	str	r3, [r2, #48]	; 0x30
 800309a:	4b42      	ldr	r3, [pc, #264]	; (80031a4 <MX_GPIO_Init+0x130>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	4b3e      	ldr	r3, [pc, #248]	; (80031a4 <MX_GPIO_Init+0x130>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	4a3d      	ldr	r2, [pc, #244]	; (80031a4 <MX_GPIO_Init+0x130>)
 80030b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b4:	6313      	str	r3, [r2, #48]	; 0x30
 80030b6:	4b3b      	ldr	r3, [pc, #236]	; (80031a4 <MX_GPIO_Init+0x130>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <MX_GPIO_Init+0x130>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	4a36      	ldr	r2, [pc, #216]	; (80031a4 <MX_GPIO_Init+0x130>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6313      	str	r3, [r2, #48]	; 0x30
 80030d2:	4b34      	ldr	r3, [pc, #208]	; (80031a4 <MX_GPIO_Init+0x130>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	4b30      	ldr	r3, [pc, #192]	; (80031a4 <MX_GPIO_Init+0x130>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a2f      	ldr	r2, [pc, #188]	; (80031a4 <MX_GPIO_Init+0x130>)
 80030e8:	f043 0302 	orr.w	r3, r3, #2
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <MX_GPIO_Init+0x130>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	607b      	str	r3, [r7, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, J3_A_Pin|J3_B_Pin|J2_DIR_Pin|J2_EN_Pin
 80030fa:	2200      	movs	r2, #0
 80030fc:	f248 01c3 	movw	r1, #32963	; 0x80c3
 8003100:	4829      	ldr	r0, [pc, #164]	; (80031a8 <MX_GPIO_Init+0x134>)
 8003102:	f003 f8ff 	bl	8006304 <HAL_GPIO_WritePin>
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, J1_DIR_Pin|J1_EN_Pin|OUT_GND_Pin, GPIO_PIN_RESET);
 8003106:	2200      	movs	r2, #0
 8003108:	f248 0106 	movw	r1, #32774	; 0x8006
 800310c:	4827      	ldr	r0, [pc, #156]	; (80031ac <MX_GPIO_Init+0x138>)
 800310e:	f003 f8f9 	bl	8006304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8003112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003118:	2300      	movs	r3, #0
 800311a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800311c:	2301      	movs	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	4619      	mov	r1, r3
 8003126:	4822      	ldr	r0, [pc, #136]	; (80031b0 <MX_GPIO_Init+0x13c>)
 8003128:	f002 ff50 	bl	8005fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = HAL_SENSOR_B_Pin|HAL_SENSOR_A_Pin;
 800312c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003132:	2300      	movs	r3, #0
 8003134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800313a:	f107 0314 	add.w	r3, r7, #20
 800313e:	4619      	mov	r1, r3
 8003140:	481b      	ldr	r0, [pc, #108]	; (80031b0 <MX_GPIO_Init+0x13c>)
 8003142:	f002 ff43 	bl	8005fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = J3_A_Pin|J3_B_Pin|J2_DIR_Pin|J2_EN_Pin
 8003146:	f248 03c3 	movw	r3, #32963	; 0x80c3
 800314a:	617b      	str	r3, [r7, #20]
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314c:	2301      	movs	r3, #1
 800314e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003154:	2300      	movs	r3, #0
 8003156:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	4619      	mov	r1, r3
 800315e:	4812      	ldr	r0, [pc, #72]	; (80031a8 <MX_GPIO_Init+0x134>)
 8003160:	f002 ff34 	bl	8005fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = J1_DIR_Pin|J1_EN_Pin|OUT_GND_Pin;
 8003164:	f248 0306 	movw	r3, #32774	; 0x8006
 8003168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800316a:	2301      	movs	r3, #1
 800316c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003172:	2300      	movs	r3, #0
 8003174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003176:	f107 0314 	add.w	r3, r7, #20
 800317a:	4619      	mov	r1, r3
 800317c:	480b      	ldr	r0, [pc, #44]	; (80031ac <MX_GPIO_Init+0x138>)
 800317e:	f002 ff25 	bl	8005fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BTN2_Pin|BATTERY_CHANGER_Pin;
 8003182:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003188:	2300      	movs	r3, #0
 800318a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800318c:	2301      	movs	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003190:	f107 0314 	add.w	r3, r7, #20
 8003194:	4619      	mov	r1, r3
 8003196:	4805      	ldr	r0, [pc, #20]	; (80031ac <MX_GPIO_Init+0x138>)
 8003198:	f002 ff18 	bl	8005fcc <HAL_GPIO_Init>

}
 800319c:	bf00      	nop
 800319e:	3728      	adds	r7, #40	; 0x28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40020000 	.word	0x40020000
 80031ac:	40020400 	.word	0x40020400
 80031b0:	40020800 	.word	0x40020800

080031b4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_tx;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031b8:	4b12      	ldr	r3, [pc, #72]	; (8003204 <MX_I2C1_Init+0x50>)
 80031ba:	4a13      	ldr	r2, [pc, #76]	; (8003208 <MX_I2C1_Init+0x54>)
 80031bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <MX_I2C1_Init+0x50>)
 80031c0:	4a12      	ldr	r2, [pc, #72]	; (800320c <MX_I2C1_Init+0x58>)
 80031c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <MX_I2C1_Init+0x50>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80031ca:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <MX_I2C1_Init+0x50>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <MX_I2C1_Init+0x50>)
 80031d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <MX_I2C1_Init+0x50>)
 80031da:	2200      	movs	r2, #0
 80031dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <MX_I2C1_Init+0x50>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031e4:	4b07      	ldr	r3, [pc, #28]	; (8003204 <MX_I2C1_Init+0x50>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <MX_I2C1_Init+0x50>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031f0:	4804      	ldr	r0, [pc, #16]	; (8003204 <MX_I2C1_Init+0x50>)
 80031f2:	f003 f8bb 	bl	800636c <HAL_I2C_Init>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80031fc:	f000 fb70 	bl	80038e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}
 8003204:	2000a974 	.word	0x2000a974
 8003208:	40005400 	.word	0x40005400
 800320c:	000186a0 	.word	0x000186a0

08003210 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <MX_I2C2_Init+0x50>)
 8003216:	4a13      	ldr	r2, [pc, #76]	; (8003264 <MX_I2C2_Init+0x54>)
 8003218:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800321a:	4b11      	ldr	r3, [pc, #68]	; (8003260 <MX_I2C2_Init+0x50>)
 800321c:	4a12      	ldr	r2, [pc, #72]	; (8003268 <MX_I2C2_Init+0x58>)
 800321e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003220:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <MX_I2C2_Init+0x50>)
 8003222:	2200      	movs	r2, #0
 8003224:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 32;
 8003226:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <MX_I2C2_Init+0x50>)
 8003228:	2220      	movs	r2, #32
 800322a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <MX_I2C2_Init+0x50>)
 800322e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003232:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <MX_I2C2_Init+0x50>)
 8003236:	2200      	movs	r2, #0
 8003238:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800323a:	4b09      	ldr	r3, [pc, #36]	; (8003260 <MX_I2C2_Init+0x50>)
 800323c:	2200      	movs	r2, #0
 800323e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003240:	4b07      	ldr	r3, [pc, #28]	; (8003260 <MX_I2C2_Init+0x50>)
 8003242:	2200      	movs	r2, #0
 8003244:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003246:	4b06      	ldr	r3, [pc, #24]	; (8003260 <MX_I2C2_Init+0x50>)
 8003248:	2200      	movs	r2, #0
 800324a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800324c:	4804      	ldr	r0, [pc, #16]	; (8003260 <MX_I2C2_Init+0x50>)
 800324e:	f003 f88d 	bl	800636c <HAL_I2C_Init>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003258:	f000 fb42 	bl	80038e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800325c:	bf00      	nop
 800325e:	bd80      	pop	{r7, pc}
 8003260:	2000a9c8 	.word	0x2000a9c8
 8003264:	40005800 	.word	0x40005800
 8003268:	00061a80 	.word	0x00061a80

0800326c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003270:	4b12      	ldr	r3, [pc, #72]	; (80032bc <MX_I2C3_Init+0x50>)
 8003272:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <MX_I2C3_Init+0x54>)
 8003274:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003276:	4b11      	ldr	r3, [pc, #68]	; (80032bc <MX_I2C3_Init+0x50>)
 8003278:	4a12      	ldr	r2, [pc, #72]	; (80032c4 <MX_I2C3_Init+0x58>)
 800327a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <MX_I2C3_Init+0x50>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003282:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <MX_I2C3_Init+0x50>)
 8003284:	2200      	movs	r2, #0
 8003286:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <MX_I2C3_Init+0x50>)
 800328a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800328e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003290:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <MX_I2C3_Init+0x50>)
 8003292:	2200      	movs	r2, #0
 8003294:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <MX_I2C3_Init+0x50>)
 8003298:	2200      	movs	r2, #0
 800329a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800329c:	4b07      	ldr	r3, [pc, #28]	; (80032bc <MX_I2C3_Init+0x50>)
 800329e:	2200      	movs	r2, #0
 80032a0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <MX_I2C3_Init+0x50>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80032a8:	4804      	ldr	r0, [pc, #16]	; (80032bc <MX_I2C3_Init+0x50>)
 80032aa:	f003 f85f 	bl	800636c <HAL_I2C_Init>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80032b4:	f000 fb14 	bl	80038e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80032b8:	bf00      	nop
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	2000a8c0 	.word	0x2000a8c0
 80032c0:	40005c00 	.word	0x40005c00
 80032c4:	000186a0 	.word	0x000186a0

080032c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08e      	sub	sp, #56	; 0x38
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a90      	ldr	r2, [pc, #576]	; (8003528 <HAL_I2C_MspInit+0x260>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d16b      	bne.n	80033c2 <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	623b      	str	r3, [r7, #32]
 80032ee:	4b8f      	ldr	r3, [pc, #572]	; (800352c <HAL_I2C_MspInit+0x264>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	4a8e      	ldr	r2, [pc, #568]	; (800352c <HAL_I2C_MspInit+0x264>)
 80032f4:	f043 0302 	orr.w	r3, r3, #2
 80032f8:	6313      	str	r3, [r2, #48]	; 0x30
 80032fa:	4b8c      	ldr	r3, [pc, #560]	; (800352c <HAL_I2C_MspInit+0x264>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	623b      	str	r3, [r7, #32]
 8003304:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AS5600_1_SCL_Pin|AS5600_1_SDA_Pin;
 8003306:	23c0      	movs	r3, #192	; 0xc0
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800330a:	2312      	movs	r3, #18
 800330c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800330e:	2301      	movs	r3, #1
 8003310:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003312:	2303      	movs	r3, #3
 8003314:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003316:	2304      	movs	r3, #4
 8003318:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800331e:	4619      	mov	r1, r3
 8003320:	4883      	ldr	r0, [pc, #524]	; (8003530 <HAL_I2C_MspInit+0x268>)
 8003322:	f002 fe53 	bl	8005fcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
 800332a:	4b80      	ldr	r3, [pc, #512]	; (800352c <HAL_I2C_MspInit+0x264>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	4a7f      	ldr	r2, [pc, #508]	; (800352c <HAL_I2C_MspInit+0x264>)
 8003330:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003334:	6413      	str	r3, [r2, #64]	; 0x40
 8003336:	4b7d      	ldr	r3, [pc, #500]	; (800352c <HAL_I2C_MspInit+0x264>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800333e:	61fb      	str	r3, [r7, #28]
 8003340:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003342:	4b7c      	ldr	r3, [pc, #496]	; (8003534 <HAL_I2C_MspInit+0x26c>)
 8003344:	4a7c      	ldr	r2, [pc, #496]	; (8003538 <HAL_I2C_MspInit+0x270>)
 8003346:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003348:	4b7a      	ldr	r3, [pc, #488]	; (8003534 <HAL_I2C_MspInit+0x26c>)
 800334a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800334e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003350:	4b78      	ldr	r3, [pc, #480]	; (8003534 <HAL_I2C_MspInit+0x26c>)
 8003352:	2200      	movs	r2, #0
 8003354:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003356:	4b77      	ldr	r3, [pc, #476]	; (8003534 <HAL_I2C_MspInit+0x26c>)
 8003358:	2200      	movs	r2, #0
 800335a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800335c:	4b75      	ldr	r3, [pc, #468]	; (8003534 <HAL_I2C_MspInit+0x26c>)
 800335e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003362:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003364:	4b73      	ldr	r3, [pc, #460]	; (8003534 <HAL_I2C_MspInit+0x26c>)
 8003366:	2200      	movs	r2, #0
 8003368:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800336a:	4b72      	ldr	r3, [pc, #456]	; (8003534 <HAL_I2C_MspInit+0x26c>)
 800336c:	2200      	movs	r2, #0
 800336e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003370:	4b70      	ldr	r3, [pc, #448]	; (8003534 <HAL_I2C_MspInit+0x26c>)
 8003372:	2200      	movs	r2, #0
 8003374:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003376:	4b6f      	ldr	r3, [pc, #444]	; (8003534 <HAL_I2C_MspInit+0x26c>)
 8003378:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800337c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800337e:	4b6d      	ldr	r3, [pc, #436]	; (8003534 <HAL_I2C_MspInit+0x26c>)
 8003380:	2200      	movs	r2, #0
 8003382:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003384:	486b      	ldr	r0, [pc, #428]	; (8003534 <HAL_I2C_MspInit+0x26c>)
 8003386:	f001 ff2d 	bl	80051e4 <HAL_DMA_Init>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8003390:	f000 faa6 	bl	80038e0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a67      	ldr	r2, [pc, #412]	; (8003534 <HAL_I2C_MspInit+0x26c>)
 8003398:	639a      	str	r2, [r3, #56]	; 0x38
 800339a:	4a66      	ldr	r2, [pc, #408]	; (8003534 <HAL_I2C_MspInit+0x26c>)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80033a0:	2200      	movs	r2, #0
 80033a2:	2105      	movs	r1, #5
 80033a4:	201f      	movs	r0, #31
 80033a6:	f001 fef3 	bl	8005190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80033aa:	201f      	movs	r0, #31
 80033ac:	f001 ff0c 	bl	80051c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 15, 0);
 80033b0:	2200      	movs	r2, #0
 80033b2:	210f      	movs	r1, #15
 80033b4:	2020      	movs	r0, #32
 80033b6:	f001 feeb 	bl	8005190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80033ba:	2020      	movs	r0, #32
 80033bc:	f001 ff04 	bl	80051c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80033c0:	e156      	b.n	8003670 <HAL_I2C_MspInit+0x3a8>
  else if(i2cHandle->Instance==I2C2)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a5d      	ldr	r2, [pc, #372]	; (800353c <HAL_I2C_MspInit+0x274>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	f040 80c1 	bne.w	8003550 <HAL_I2C_MspInit+0x288>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	4b56      	ldr	r3, [pc, #344]	; (800352c <HAL_I2C_MspInit+0x264>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	4a55      	ldr	r2, [pc, #340]	; (800352c <HAL_I2C_MspInit+0x264>)
 80033d8:	f043 0302 	orr.w	r3, r3, #2
 80033dc:	6313      	str	r3, [r2, #48]	; 0x30
 80033de:	4b53      	ldr	r3, [pc, #332]	; (800352c <HAL_I2C_MspInit+0x264>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033f0:	2312      	movs	r3, #18
 80033f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033f4:	2301      	movs	r3, #1
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f8:	2303      	movs	r3, #3
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80033fc:	2304      	movs	r3, #4
 80033fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003404:	4619      	mov	r1, r3
 8003406:	484a      	ldr	r0, [pc, #296]	; (8003530 <HAL_I2C_MspInit+0x268>)
 8003408:	f002 fde0 	bl	8005fcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800340c:	2308      	movs	r3, #8
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003410:	2312      	movs	r3, #18
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003414:	2301      	movs	r3, #1
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003418:	2303      	movs	r3, #3
 800341a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800341c:	2309      	movs	r3, #9
 800341e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003424:	4619      	mov	r1, r3
 8003426:	4842      	ldr	r0, [pc, #264]	; (8003530 <HAL_I2C_MspInit+0x268>)
 8003428:	f002 fdd0 	bl	8005fcc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	4b3e      	ldr	r3, [pc, #248]	; (800352c <HAL_I2C_MspInit+0x264>)
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	4a3d      	ldr	r2, [pc, #244]	; (800352c <HAL_I2C_MspInit+0x264>)
 8003436:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800343a:	6413      	str	r3, [r2, #64]	; 0x40
 800343c:	4b3b      	ldr	r3, [pc, #236]	; (800352c <HAL_I2C_MspInit+0x264>)
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	697b      	ldr	r3, [r7, #20]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8003448:	4b3d      	ldr	r3, [pc, #244]	; (8003540 <HAL_I2C_MspInit+0x278>)
 800344a:	4a3e      	ldr	r2, [pc, #248]	; (8003544 <HAL_I2C_MspInit+0x27c>)
 800344c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800344e:	4b3c      	ldr	r3, [pc, #240]	; (8003540 <HAL_I2C_MspInit+0x278>)
 8003450:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003454:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003456:	4b3a      	ldr	r3, [pc, #232]	; (8003540 <HAL_I2C_MspInit+0x278>)
 8003458:	2200      	movs	r2, #0
 800345a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800345c:	4b38      	ldr	r3, [pc, #224]	; (8003540 <HAL_I2C_MspInit+0x278>)
 800345e:	2200      	movs	r2, #0
 8003460:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003462:	4b37      	ldr	r3, [pc, #220]	; (8003540 <HAL_I2C_MspInit+0x278>)
 8003464:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003468:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800346a:	4b35      	ldr	r3, [pc, #212]	; (8003540 <HAL_I2C_MspInit+0x278>)
 800346c:	2200      	movs	r2, #0
 800346e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003470:	4b33      	ldr	r3, [pc, #204]	; (8003540 <HAL_I2C_MspInit+0x278>)
 8003472:	2200      	movs	r2, #0
 8003474:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8003476:	4b32      	ldr	r3, [pc, #200]	; (8003540 <HAL_I2C_MspInit+0x278>)
 8003478:	2200      	movs	r2, #0
 800347a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800347c:	4b30      	ldr	r3, [pc, #192]	; (8003540 <HAL_I2C_MspInit+0x278>)
 800347e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003482:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003484:	4b2e      	ldr	r3, [pc, #184]	; (8003540 <HAL_I2C_MspInit+0x278>)
 8003486:	2200      	movs	r2, #0
 8003488:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800348a:	482d      	ldr	r0, [pc, #180]	; (8003540 <HAL_I2C_MspInit+0x278>)
 800348c:	f001 feaa 	bl	80051e4 <HAL_DMA_Init>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 8003496:	f000 fa23 	bl	80038e0 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a28      	ldr	r2, [pc, #160]	; (8003540 <HAL_I2C_MspInit+0x278>)
 800349e:	639a      	str	r2, [r3, #56]	; 0x38
 80034a0:	4a27      	ldr	r2, [pc, #156]	; (8003540 <HAL_I2C_MspInit+0x278>)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80034a6:	4b28      	ldr	r3, [pc, #160]	; (8003548 <HAL_I2C_MspInit+0x280>)
 80034a8:	4a28      	ldr	r2, [pc, #160]	; (800354c <HAL_I2C_MspInit+0x284>)
 80034aa:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80034ac:	4b26      	ldr	r3, [pc, #152]	; (8003548 <HAL_I2C_MspInit+0x280>)
 80034ae:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80034b2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034b4:	4b24      	ldr	r3, [pc, #144]	; (8003548 <HAL_I2C_MspInit+0x280>)
 80034b6:	2240      	movs	r2, #64	; 0x40
 80034b8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ba:	4b23      	ldr	r3, [pc, #140]	; (8003548 <HAL_I2C_MspInit+0x280>)
 80034bc:	2200      	movs	r2, #0
 80034be:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034c0:	4b21      	ldr	r3, [pc, #132]	; (8003548 <HAL_I2C_MspInit+0x280>)
 80034c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034c6:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034c8:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <HAL_I2C_MspInit+0x280>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034ce:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <HAL_I2C_MspInit+0x280>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80034d4:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <HAL_I2C_MspInit+0x280>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_I2C_MspInit+0x280>)
 80034dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034e0:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034e2:	4b19      	ldr	r3, [pc, #100]	; (8003548 <HAL_I2C_MspInit+0x280>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80034e8:	4817      	ldr	r0, [pc, #92]	; (8003548 <HAL_I2C_MspInit+0x280>)
 80034ea:	f001 fe7b 	bl	80051e4 <HAL_DMA_Init>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_I2C_MspInit+0x230>
      Error_Handler();
 80034f4:	f000 f9f4 	bl	80038e0 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a13      	ldr	r2, [pc, #76]	; (8003548 <HAL_I2C_MspInit+0x280>)
 80034fc:	635a      	str	r2, [r3, #52]	; 0x34
 80034fe:	4a12      	ldr	r2, [pc, #72]	; (8003548 <HAL_I2C_MspInit+0x280>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8003504:	2200      	movs	r2, #0
 8003506:	2105      	movs	r1, #5
 8003508:	2021      	movs	r0, #33	; 0x21
 800350a:	f001 fe41 	bl	8005190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800350e:	2021      	movs	r0, #33	; 0x21
 8003510:	f001 fe5a 	bl	80051c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 15, 0);
 8003514:	2200      	movs	r2, #0
 8003516:	210f      	movs	r1, #15
 8003518:	2022      	movs	r0, #34	; 0x22
 800351a:	f001 fe39 	bl	8005190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800351e:	2022      	movs	r0, #34	; 0x22
 8003520:	f001 fe52 	bl	80051c8 <HAL_NVIC_EnableIRQ>
}
 8003524:	e0a4      	b.n	8003670 <HAL_I2C_MspInit+0x3a8>
 8003526:	bf00      	nop
 8003528:	40005400 	.word	0x40005400
 800352c:	40023800 	.word	0x40023800
 8003530:	40020400 	.word	0x40020400
 8003534:	2000aadc 	.word	0x2000aadc
 8003538:	40026010 	.word	0x40026010
 800353c:	40005800 	.word	0x40005800
 8003540:	2000aa1c 	.word	0x2000aa1c
 8003544:	40026040 	.word	0x40026040
 8003548:	2000aa7c 	.word	0x2000aa7c
 800354c:	400260b8 	.word	0x400260b8
  else if(i2cHandle->Instance==I2C3)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a48      	ldr	r2, [pc, #288]	; (8003678 <HAL_I2C_MspInit+0x3b0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	f040 808a 	bne.w	8003670 <HAL_I2C_MspInit+0x3a8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	4b46      	ldr	r3, [pc, #280]	; (800367c <HAL_I2C_MspInit+0x3b4>)
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	4a45      	ldr	r2, [pc, #276]	; (800367c <HAL_I2C_MspInit+0x3b4>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6313      	str	r3, [r2, #48]	; 0x30
 800356c:	4b43      	ldr	r3, [pc, #268]	; (800367c <HAL_I2C_MspInit+0x3b4>)
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	4b3f      	ldr	r3, [pc, #252]	; (800367c <HAL_I2C_MspInit+0x3b4>)
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	4a3e      	ldr	r2, [pc, #248]	; (800367c <HAL_I2C_MspInit+0x3b4>)
 8003582:	f043 0302 	orr.w	r3, r3, #2
 8003586:	6313      	str	r3, [r2, #48]	; 0x30
 8003588:	4b3c      	ldr	r3, [pc, #240]	; (800367c <HAL_I2C_MspInit+0x3b4>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AS5600_2_SCL_Pin;
 8003594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800359a:	2312      	movs	r3, #18
 800359c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800359e:	2301      	movs	r3, #1
 80035a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a2:	2303      	movs	r3, #3
 80035a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80035a6:	2304      	movs	r3, #4
 80035a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AS5600_2_SCL_GPIO_Port, &GPIO_InitStruct);
 80035aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ae:	4619      	mov	r1, r3
 80035b0:	4833      	ldr	r0, [pc, #204]	; (8003680 <HAL_I2C_MspInit+0x3b8>)
 80035b2:	f002 fd0b 	bl	8005fcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AS5600_2_SDA_Pin;
 80035b6:	2310      	movs	r3, #16
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035ba:	2312      	movs	r3, #18
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035be:	2301      	movs	r3, #1
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c2:	2303      	movs	r3, #3
 80035c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80035c6:	2309      	movs	r3, #9
 80035c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AS5600_2_SDA_GPIO_Port, &GPIO_InitStruct);
 80035ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ce:	4619      	mov	r1, r3
 80035d0:	482c      	ldr	r0, [pc, #176]	; (8003684 <HAL_I2C_MspInit+0x3bc>)
 80035d2:	f002 fcfb 	bl	8005fcc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	4b28      	ldr	r3, [pc, #160]	; (800367c <HAL_I2C_MspInit+0x3b4>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	4a27      	ldr	r2, [pc, #156]	; (800367c <HAL_I2C_MspInit+0x3b4>)
 80035e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035e4:	6413      	str	r3, [r2, #64]	; 0x40
 80035e6:	4b25      	ldr	r3, [pc, #148]	; (800367c <HAL_I2C_MspInit+0x3b4>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 80035f2:	4b25      	ldr	r3, [pc, #148]	; (8003688 <HAL_I2C_MspInit+0x3c0>)
 80035f4:	4a25      	ldr	r2, [pc, #148]	; (800368c <HAL_I2C_MspInit+0x3c4>)
 80035f6:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 80035f8:	4b23      	ldr	r3, [pc, #140]	; (8003688 <HAL_I2C_MspInit+0x3c0>)
 80035fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035fe:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003600:	4b21      	ldr	r3, [pc, #132]	; (8003688 <HAL_I2C_MspInit+0x3c0>)
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003606:	4b20      	ldr	r3, [pc, #128]	; (8003688 <HAL_I2C_MspInit+0x3c0>)
 8003608:	2200      	movs	r2, #0
 800360a:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800360c:	4b1e      	ldr	r3, [pc, #120]	; (8003688 <HAL_I2C_MspInit+0x3c0>)
 800360e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003612:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003614:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <HAL_I2C_MspInit+0x3c0>)
 8003616:	2200      	movs	r2, #0
 8003618:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800361a:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <HAL_I2C_MspInit+0x3c0>)
 800361c:	2200      	movs	r2, #0
 800361e:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8003620:	4b19      	ldr	r3, [pc, #100]	; (8003688 <HAL_I2C_MspInit+0x3c0>)
 8003622:	2200      	movs	r2, #0
 8003624:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003626:	4b18      	ldr	r3, [pc, #96]	; (8003688 <HAL_I2C_MspInit+0x3c0>)
 8003628:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800362c:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800362e:	4b16      	ldr	r3, [pc, #88]	; (8003688 <HAL_I2C_MspInit+0x3c0>)
 8003630:	2200      	movs	r2, #0
 8003632:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8003634:	4814      	ldr	r0, [pc, #80]	; (8003688 <HAL_I2C_MspInit+0x3c0>)
 8003636:	f001 fdd5 	bl	80051e4 <HAL_DMA_Init>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_MspInit+0x37c>
      Error_Handler();
 8003640:	f000 f94e 	bl	80038e0 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a10      	ldr	r2, [pc, #64]	; (8003688 <HAL_I2C_MspInit+0x3c0>)
 8003648:	639a      	str	r2, [r3, #56]	; 0x38
 800364a:	4a0f      	ldr	r2, [pc, #60]	; (8003688 <HAL_I2C_MspInit+0x3c0>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8003650:	2200      	movs	r2, #0
 8003652:	2105      	movs	r1, #5
 8003654:	2048      	movs	r0, #72	; 0x48
 8003656:	f001 fd9b 	bl	8005190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800365a:	2048      	movs	r0, #72	; 0x48
 800365c:	f001 fdb4 	bl	80051c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 15, 0);
 8003660:	2200      	movs	r2, #0
 8003662:	210f      	movs	r1, #15
 8003664:	2049      	movs	r0, #73	; 0x49
 8003666:	f001 fd93 	bl	8005190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800366a:	2049      	movs	r0, #73	; 0x49
 800366c:	f001 fdac 	bl	80051c8 <HAL_NVIC_EnableIRQ>
}
 8003670:	bf00      	nop
 8003672:	3738      	adds	r7, #56	; 0x38
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40005c00 	.word	0x40005c00
 800367c:	40023800 	.word	0x40023800
 8003680:	40020000 	.word	0x40020000
 8003684:	40020400 	.word	0x40020400
 8003688:	2000a914 	.word	0x2000a914
 800368c:	40026028 	.word	0x40026028

08003690 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 1000);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	b29a      	uxth	r2, r3
 80036a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	4804      	ldr	r0, [pc, #16]	; (80036b8 <_write+0x28>)
 80036a8:	f007 fa0e 	bl	800aac8 <HAL_UART_Transmit>
  return len;
 80036ac:	687b      	ldr	r3, [r7, #4]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	2000abb8 	.word	0x2000abb8

080036bc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART2){
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a0d      	ldr	r2, [pc, #52]	; (8003704 <HAL_UARTEx_RxEventCallback+0x48>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d113      	bne.n	80036fa <HAL_UARTEx_RxEventCallback+0x3e>
		memcpy(uart2_main_buf,uart2_rx_buf,UART2_BUFFER_LENGTH);
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <HAL_UARTEx_RxEventCallback+0x4c>)
 80036d4:	4a0d      	ldr	r2, [pc, #52]	; (800370c <HAL_UARTEx_RxEventCallback+0x50>)
 80036d6:	6810      	ldr	r0, [r2, #0]
 80036d8:	6851      	ldr	r1, [r2, #4]
 80036da:	6018      	str	r0, [r3, #0]
 80036dc:	6059      	str	r1, [r3, #4]
 80036de:	8912      	ldrh	r2, [r2, #8]
 80036e0:	811a      	strh	r2, [r3, #8]
		uart2_onData=true;
 80036e2:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_UARTEx_RxEventCallback+0x54>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	701a      	strb	r2, [r3, #0]
		uart2_data_length=Size;
 80036e8:	887b      	ldrh	r3, [r7, #2]
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	4b09      	ldr	r3, [pc, #36]	; (8003714 <HAL_UARTEx_RxEventCallback+0x58>)
 80036ee:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart2_rx_buf, UART2_BUFFER_LENGTH);
 80036f0:	220a      	movs	r2, #10
 80036f2:	4906      	ldr	r1, [pc, #24]	; (800370c <HAL_UARTEx_RxEventCallback+0x50>)
 80036f4:	4808      	ldr	r0, [pc, #32]	; (8003718 <HAL_UARTEx_RxEventCallback+0x5c>)
 80036f6:	f007 fa79 	bl	800abec <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40004400 	.word	0x40004400
 8003708:	2000ab9c 	.word	0x2000ab9c
 800370c:	2000abac 	.word	0x2000abac
 8003710:	20000754 	.word	0x20000754
 8003714:	2000aba8 	.word	0x2000aba8
 8003718:	2000abb8 	.word	0x2000abb8

0800371c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003720:	f000 ff98 	bl	8004654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003724:	f000 f844 	bl	80037b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_FLASH_Unlock();
 8003728:	f002 f9cc 	bl	8005ac4 <HAL_FLASH_Unlock>
  if( EE_Init() != EE_OK)
 800372c:	f7fe fa08 	bl	8001b40 <EE_Init>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <main+0x1e>
  {
    Error_Handler();
 8003736:	f000 f8d3 	bl	80038e0 <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800373a:	f7ff fc9b 	bl	8003074 <MX_GPIO_Init>
  MX_DMA_Init();
 800373e:	f7fe f9a1 	bl	8001a84 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003742:	f000 fe17 	bl	8004374 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8003746:	f7fe f875 	bl	8001834 <MX_ADC1_Init>
  MX_TIM2_Init();
 800374a:	f000 fb83 	bl	8003e54 <MX_TIM2_Init>
  MX_TIM3_Init();
 800374e:	f000 fbf7 	bl	8003f40 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003752:	f000 fc6b 	bl	800402c <MX_TIM4_Init>
  MX_TIM10_Init();
 8003756:	f000 fceb 	bl	8004130 <MX_TIM10_Init>
  MX_I2C1_Init();
 800375a:	f7ff fd2b 	bl	80031b4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800375e:	f7ff fd57 	bl	8003210 <MX_I2C2_Init>
  MX_I2C3_Init();
 8003762:	f7ff fd83 	bl	800326c <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8003766:	f000 fe2f 	bl	80043c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart2_rx_buf, UART2_BUFFER_LENGTH);
 800376a:	220a      	movs	r2, #10
 800376c:	490c      	ldr	r1, [pc, #48]	; (80037a0 <main+0x84>)
 800376e:	480d      	ldr	r0, [pc, #52]	; (80037a4 <main+0x88>)
 8003770:	f007 fa3c 	bl	800abec <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <main+0x8c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <main+0x8c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0208 	bic.w	r2, r2, #8
 8003782:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003784:	f7fe ff06 	bl	8002594 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003788:	f008 f8fa 	bl	800b980 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800378c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003790:	4806      	ldr	r0, [pc, #24]	; (80037ac <main+0x90>)
 8003792:	f002 fdd0 	bl	8006336 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003796:	2064      	movs	r0, #100	; 0x64
 8003798:	f000 ff9e 	bl	80046d8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800379c:	e7f6      	b.n	800378c <main+0x70>
 800379e:	bf00      	nop
 80037a0:	2000abac 	.word	0x2000abac
 80037a4:	2000abb8 	.word	0x2000abb8
 80037a8:	2000ab3c 	.word	0x2000ab3c
 80037ac:	40020000 	.word	0x40020000

080037b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b094      	sub	sp, #80	; 0x50
 80037b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037b6:	f107 0320 	add.w	r3, r7, #32
 80037ba:	2230      	movs	r2, #48	; 0x30
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f00b f9d0 	bl	800eb64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037c4:	f107 030c 	add.w	r3, r7, #12
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	60da      	str	r2, [r3, #12]
 80037d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037d4:	2300      	movs	r3, #0
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	4b28      	ldr	r3, [pc, #160]	; (800387c <SystemClock_Config+0xcc>)
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	4a27      	ldr	r2, [pc, #156]	; (800387c <SystemClock_Config+0xcc>)
 80037de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e2:	6413      	str	r3, [r2, #64]	; 0x40
 80037e4:	4b25      	ldr	r3, [pc, #148]	; (800387c <SystemClock_Config+0xcc>)
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80037f0:	2300      	movs	r3, #0
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	4b22      	ldr	r3, [pc, #136]	; (8003880 <SystemClock_Config+0xd0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80037fc:	4a20      	ldr	r2, [pc, #128]	; (8003880 <SystemClock_Config+0xd0>)
 80037fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <SystemClock_Config+0xd0>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003810:	2301      	movs	r3, #1
 8003812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800381a:	2302      	movs	r3, #2
 800381c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800381e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 24;
 8003824:	2318      	movs	r3, #24
 8003826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003828:	23a8      	movs	r3, #168	; 0xa8
 800382a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800382c:	2302      	movs	r3, #2
 800382e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003830:	2304      	movs	r3, #4
 8003832:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003834:	f107 0320 	add.w	r3, r7, #32
 8003838:	4618      	mov	r0, r3
 800383a:	f005 fad5 	bl	8008de8 <HAL_RCC_OscConfig>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003844:	f000 f84c 	bl	80038e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003848:	230f      	movs	r3, #15
 800384a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800384c:	2302      	movs	r3, #2
 800384e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003858:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800385e:	f107 030c 	add.w	r3, r7, #12
 8003862:	2102      	movs	r1, #2
 8003864:	4618      	mov	r0, r3
 8003866:	f005 fd37 	bl	80092d8 <HAL_RCC_ClockConfig>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003870:	f000 f836 	bl	80038e0 <Error_Handler>
  }
}
 8003874:	bf00      	nop
 8003876:	3750      	adds	r7, #80	; 0x50
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40023800 	.word	0x40023800
 8003880:	40007000 	.word	0x40007000

08003884 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a0f      	ldr	r2, [pc, #60]	; (80038d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003896:	f000 feff 	bl	8004698 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM10){ // UPDATE AS5600
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d111      	bne.n	80038c8 <HAL_TIM_PeriodElapsedCallback+0x44>
           if(FLAG_AS5600_M1==HAL_OK){
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	f083 0301 	eor.w	r3, r3, #1
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_TIM_PeriodElapsedCallback+0x32>
          	 AS5600_M1_getPOS();
 80038b2:	f7fd fb3f 	bl	8000f34 <AS5600_M1_getPOS>
           }
           if(FLAG_AS5600_M2 == HAL_OK){
 80038b6:	4b09      	ldr	r3, [pc, #36]	; (80038dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	f083 0301 	eor.w	r3, r3, #1
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_TIM_PeriodElapsedCallback+0x44>
          	 AS5600_M2_getPOS();
 80038c4:	f7fd fb4a 	bl	8000f5c <AS5600_M2_getPOS>
           }
    }
  /* USER CODE END Callback 1 */
}
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40014800 	.word	0x40014800
 80038d4:	40014400 	.word	0x40014400
 80038d8:	2000009c 	.word	0x2000009c
 80038dc:	2000009d 	.word	0x2000009d

080038e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038e4:	b672      	cpsid	i
}
 80038e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038e8:	e7fe      	b.n	80038e8 <Error_Handler+0x8>
	...

080038ec <pickAndDropInit>:
extern TIM_HandleTypeDef htim4;	// For Servo
extern TIM_HandleTypeDef htim5;	// For Motor_J3


void pickAndDropInit()
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);	// Start PWM for Servo
 80038f0:	2108      	movs	r1, #8
 80038f2:	4809      	ldr	r0, [pc, #36]	; (8003918 <pickAndDropInit+0x2c>)
 80038f4:	f005 fffe 	bl	80098f4 <HAL_TIM_PWM_Start>
	osDelay(100);
 80038f8:	2064      	movs	r0, #100	; 0x64
 80038fa:	f008 f894 	bl	800ba26 <osDelay>
	SERVO_DROP;
 80038fe:	4b07      	ldr	r3, [pc, #28]	; (800391c <pickAndDropInit+0x30>)
 8003900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003904:	63da      	str	r2, [r3, #60]	; 0x3c
	j3Stop();
 8003906:	f000 f827 	bl	8003958 <j3Stop>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);	// Start PWM for Servo_J3
 800390a:	210c      	movs	r1, #12
 800390c:	4802      	ldr	r0, [pc, #8]	; (8003918 <pickAndDropInit+0x2c>)
 800390e:	f005 fff1 	bl	80098f4 <HAL_TIM_PWM_Start>
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	2000ac44 	.word	0x2000ac44
 800391c:	40000800 	.word	0x40000800

08003920 <j3Up>:
/* Control Motor J3 (0 < speed <= 1000) */
void j3Up()
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(J3_A_GPIO_Port, J3_A_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(J3_B_GPIO_Port, J3_B_Pin, GPIO_PIN_RESET);
	TIM4->CCR4=2000;
 8003924:	4b04      	ldr	r3, [pc, #16]	; (8003938 <j3Up+0x18>)
 8003926:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800392a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40000800 	.word	0x40000800

0800393c <j3Down>:
void j3Down(){
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(J3_A_GPIO_Port, J3_A_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(J3_B_GPIO_Port, J3_B_Pin, GPIO_PIN_SET);
	TIM4->CCR4=1580;
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <j3Down+0x18>)
 8003942:	f240 622c 	movw	r2, #1580	; 0x62c
 8003946:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40000800 	.word	0x40000800

08003958 <j3Stop>:
void j3Stop()
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(J3_A_GPIO_Port, J3_A_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(J3_B_GPIO_Port, J3_B_Pin, GPIO_PIN_RESET);
	TIM4->CCR4=0;
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <j3Stop+0x14>)
 800395e:	2200      	movs	r2, #0
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	40000800 	.word	0x40000800

08003970 <j3MoveUp>:
void j3MoveUp()
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
	uint16_t left = 1000; 	// thoi gian dichuyen laf 1000ms
 8003976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800397a:	80fb      	strh	r3, [r7, #6]
	j3Up();							// Move Up
 800397c:	f7ff ffd0 	bl	8003920 <j3Up>
	while(HAL_SENSOR_UP_GET==1 && left>0){
 8003980:	e005      	b.n	800398e <j3MoveUp+0x1e>
		osDelay(1);		// Wait for finish
 8003982:	2001      	movs	r0, #1
 8003984:	f008 f84f 	bl	800ba26 <osDelay>
		left--;
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	3b01      	subs	r3, #1
 800398c:	80fb      	strh	r3, [r7, #6]
	while(HAL_SENSOR_UP_GET==1 && left>0){
 800398e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003992:	4809      	ldr	r0, [pc, #36]	; (80039b8 <j3MoveUp+0x48>)
 8003994:	f002 fc9e 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003998:	4603      	mov	r3, r0
 800399a:	2b01      	cmp	r3, #1
 800399c:	d102      	bne.n	80039a4 <j3MoveUp+0x34>
 800399e:	88fb      	ldrh	r3, [r7, #6]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1ee      	bne.n	8003982 <j3MoveUp+0x12>
	}
	j3Stop();									// Stop
 80039a4:	f7ff ffd8 	bl	8003958 <j3Stop>
	osDelay(300);
 80039a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80039ac:	f008 f83b 	bl	800ba26 <osDelay>
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40020800 	.word	0x40020800

080039bc <j3MoveDown>:
void j3MoveDown()
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
	uint16_t lefttim = 1000; 	// thoi gian dichuyen laf 1000ms
 80039c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039c6:	80fb      	strh	r3, [r7, #6]
	j3Down();							// Move Down
 80039c8:	f7ff ffb8 	bl	800393c <j3Down>
	while(HAL_SENSOR_DOWN_GET==1 && lefttim>0){
 80039cc:	e005      	b.n	80039da <j3MoveDown+0x1e>
		osDelay(1);		// Wait for finish
 80039ce:	2001      	movs	r0, #1
 80039d0:	f008 f829 	bl	800ba26 <osDelay>
		lefttim--;
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	80fb      	strh	r3, [r7, #6]
	while(HAL_SENSOR_DOWN_GET==1 && lefttim>0){
 80039da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039de:	4809      	ldr	r0, [pc, #36]	; (8003a04 <j3MoveDown+0x48>)
 80039e0:	f002 fc78 	bl	80062d4 <HAL_GPIO_ReadPin>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d102      	bne.n	80039f0 <j3MoveDown+0x34>
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1ee      	bne.n	80039ce <j3MoveDown+0x12>
	}
	j3Stop();									// Stop
 80039f0:	f7ff ffb2 	bl	8003958 <j3Stop>
	osDelay(300);
 80039f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80039f8:	f008 f815 	bl	800ba26 <osDelay>
}
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40020800 	.word	0x40020800

08003a08 <pickupPiece>:
void pickupPiece()
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
	SERVO_DROP;
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <pickupPiece+0x2c>)
 8003a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a12:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(200);
 8003a14:	20c8      	movs	r0, #200	; 0xc8
 8003a16:	f008 f806 	bl	800ba26 <osDelay>
	j3MoveDown();
 8003a1a:	f7ff ffcf 	bl	80039bc <j3MoveDown>
	SERVO_PICKUP;
 8003a1e:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <pickupPiece+0x2c>)
 8003a20:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003a24:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(200);
 8003a26:	20c8      	movs	r0, #200	; 0xc8
 8003a28:	f007 fffd 	bl	800ba26 <osDelay>
	j3MoveUp();
 8003a2c:	f7ff ffa0 	bl	8003970 <j3MoveUp>
}
 8003a30:	bf00      	nop
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40000800 	.word	0x40000800

08003a38 <dropPiece>:
void dropPiece()
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
	j3MoveDown();
 8003a3c:	f7ff ffbe 	bl	80039bc <j3MoveDown>
	SERVO_DROP;
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <dropPiece+0x20>)
 8003a42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a46:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(200);
 8003a48:	20c8      	movs	r0, #200	; 0xc8
 8003a4a:	f007 ffec 	bl	800ba26 <osDelay>
	j3MoveUp();
 8003a4e:	f7ff ff8f 	bl	8003970 <j3MoveUp>
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40000800 	.word	0x40000800

08003a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	607b      	str	r3, [r7, #4]
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <HAL_MspInit+0x54>)
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	4a11      	ldr	r2, [pc, #68]	; (8003ab0 <HAL_MspInit+0x54>)
 8003a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a70:	6453      	str	r3, [r2, #68]	; 0x44
 8003a72:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <HAL_MspInit+0x54>)
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a7a:	607b      	str	r3, [r7, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_MspInit+0x54>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <HAL_MspInit+0x54>)
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <HAL_MspInit+0x54>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	210f      	movs	r1, #15
 8003a9e:	f06f 0001 	mvn.w	r0, #1
 8003aa2:	f001 fb75 	bl	8005190 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800

08003ab4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08c      	sub	sp, #48	; 0x30
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	201a      	movs	r0, #26
 8003aca:	f001 fb61 	bl	8005190 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003ace:	201a      	movs	r0, #26
 8003ad0:	f001 fb7a 	bl	80051c8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <HAL_InitTick+0xa0>)
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	4a1d      	ldr	r2, [pc, #116]	; (8003b54 <HAL_InitTick+0xa0>)
 8003ade:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ae2:	6453      	str	r3, [r2, #68]	; 0x44
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <HAL_InitTick+0xa0>)
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003af0:	f107 0210 	add.w	r2, r7, #16
 8003af4:	f107 0314 	add.w	r3, r7, #20
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f005 fdbc 	bl	8009678 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003b00:	f005 fda6 	bl	8009650 <HAL_RCC_GetPCLK2Freq>
 8003b04:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b08:	4a13      	ldr	r2, [pc, #76]	; (8003b58 <HAL_InitTick+0xa4>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	0c9b      	lsrs	r3, r3, #18
 8003b10:	3b01      	subs	r3, #1
 8003b12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8003b14:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <HAL_InitTick+0xa8>)
 8003b16:	4a12      	ldr	r2, [pc, #72]	; (8003b60 <HAL_InitTick+0xac>)
 8003b18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <HAL_InitTick+0xa8>)
 8003b1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b20:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8003b22:	4a0e      	ldr	r2, [pc, #56]	; (8003b5c <HAL_InitTick+0xa8>)
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8003b28:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <HAL_InitTick+0xa8>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_InitTick+0xa8>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8003b34:	4809      	ldr	r0, [pc, #36]	; (8003b5c <HAL_InitTick+0xa8>)
 8003b36:	f005 fdd1 	bl	80096dc <HAL_TIM_Base_Init>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d104      	bne.n	8003b4a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8003b40:	4806      	ldr	r0, [pc, #24]	; (8003b5c <HAL_InitTick+0xa8>)
 8003b42:	f005 fe1b 	bl	800977c <HAL_TIM_Base_Start_IT>
 8003b46:	4603      	mov	r3, r0
 8003b48:	e000      	b.n	8003b4c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3730      	adds	r7, #48	; 0x30
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40023800 	.word	0x40023800
 8003b58:	431bde83 	.word	0x431bde83
 8003b5c:	2000abfc 	.word	0x2000abfc
 8003b60:	40014800 	.word	0x40014800

08003b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b68:	e7fe      	b.n	8003b68 <NMI_Handler+0x4>

08003b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b6e:	e7fe      	b.n	8003b6e <HardFault_Handler+0x4>

08003b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b74:	e7fe      	b.n	8003b74 <MemManage_Handler+0x4>

08003b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b76:	b480      	push	{r7}
 8003b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b7a:	e7fe      	b.n	8003b7a <BusFault_Handler+0x4>

08003b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b80:	e7fe      	b.n	8003b80 <UsageFault_Handler+0x4>

08003b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b82:	b480      	push	{r7}
 8003b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b86:	bf00      	nop
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003b94:	4802      	ldr	r0, [pc, #8]	; (8003ba0 <DMA1_Stream0_IRQHandler+0x10>)
 8003b96:	f001 fcbd 	bl	8005514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	2000aadc 	.word	0x2000aadc

08003ba4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8003ba8:	4802      	ldr	r0, [pc, #8]	; (8003bb4 <DMA1_Stream1_IRQHandler+0x10>)
 8003baa:	f001 fcb3 	bl	8005514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	2000a914 	.word	0x2000a914

08003bb8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8003bbc:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <DMA1_Stream2_IRQHandler+0x10>)
 8003bbe:	f001 fca9 	bl	8005514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	2000aa1c 	.word	0x2000aa1c

08003bcc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003bd0:	4802      	ldr	r0, [pc, #8]	; (8003bdc <DMA1_Stream5_IRQHandler+0x10>)
 8003bd2:	f001 fc9f 	bl	8005514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	2000ab3c 	.word	0x2000ab3c

08003be0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003be4:	4802      	ldr	r0, [pc, #8]	; (8003bf0 <ADC_IRQHandler+0x10>)
 8003be6:	f000 fe9d 	bl	8004924 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	2000a5f8 	.word	0x2000a5f8

08003bf4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003bf8:	4802      	ldr	r0, [pc, #8]	; (8003c04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003bfa:	f006 f821 	bl	8009c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	2000ac8c 	.word	0x2000ac8c

08003c08 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003c0c:	4802      	ldr	r0, [pc, #8]	; (8003c18 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003c0e:	f006 f817 	bl	8009c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	2000abfc 	.word	0x2000abfc

08003c1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c20:	4802      	ldr	r0, [pc, #8]	; (8003c2c <TIM2_IRQHandler+0x10>)
 8003c22:	f006 f80d 	bl	8009c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	2000ad1c 	.word	0x2000ad1c

08003c30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c34:	4802      	ldr	r0, [pc, #8]	; (8003c40 <TIM3_IRQHandler+0x10>)
 8003c36:	f006 f803 	bl	8009c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	2000acd4 	.word	0x2000acd4

08003c44 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003c48:	4802      	ldr	r0, [pc, #8]	; (8003c54 <I2C1_EV_IRQHandler+0x10>)
 8003c4a:	f003 f903 	bl	8006e54 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	2000a974 	.word	0x2000a974

08003c58 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003c5c:	4802      	ldr	r0, [pc, #8]	; (8003c68 <I2C1_ER_IRQHandler+0x10>)
 8003c5e:	f003 fa66 	bl	800712e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003c62:	bf00      	nop
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	2000a974 	.word	0x2000a974

08003c6c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003c70:	4802      	ldr	r0, [pc, #8]	; (8003c7c <I2C2_EV_IRQHandler+0x10>)
 8003c72:	f003 f8ef 	bl	8006e54 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	2000a9c8 	.word	0x2000a9c8

08003c80 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003c84:	4802      	ldr	r0, [pc, #8]	; (8003c90 <I2C2_ER_IRQHandler+0x10>)
 8003c86:	f003 fa52 	bl	800712e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	2000a9c8 	.word	0x2000a9c8

08003c94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c98:	4802      	ldr	r0, [pc, #8]	; (8003ca4 <USART1_IRQHandler+0x10>)
 8003c9a:	f006 fff7 	bl	800ac8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c9e:	bf00      	nop
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	2000adc4 	.word	0x2000adc4

08003ca8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003cac:	4802      	ldr	r0, [pc, #8]	; (8003cb8 <USART2_IRQHandler+0x10>)
 8003cae:	f006 ffed 	bl	800ac8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003cb2:	bf00      	nop
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	2000abb8 	.word	0x2000abb8

08003cbc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8003cc0:	4802      	ldr	r0, [pc, #8]	; (8003ccc <DMA1_Stream7_IRQHandler+0x10>)
 8003cc2:	f001 fc27 	bl	8005514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003cc6:	bf00      	nop
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	2000aa7c 	.word	0x2000aa7c

08003cd0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003cd4:	4802      	ldr	r0, [pc, #8]	; (8003ce0 <DMA2_Stream0_IRQHandler+0x10>)
 8003cd6:	f001 fc1d 	bl	8005514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003cda:	bf00      	nop
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	2000a640 	.word	0x2000a640

08003ce4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003ce8:	4802      	ldr	r0, [pc, #8]	; (8003cf4 <DMA2_Stream2_IRQHandler+0x10>)
 8003cea:	f001 fc13 	bl	8005514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003cee:	bf00      	nop
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	2000ad64 	.word	0x2000ad64

08003cf8 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003cfc:	4802      	ldr	r0, [pc, #8]	; (8003d08 <I2C3_EV_IRQHandler+0x10>)
 8003cfe:	f003 f8a9 	bl	8006e54 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8003d02:	bf00      	nop
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	2000a8c0 	.word	0x2000a8c0

08003d0c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8003d10:	4802      	ldr	r0, [pc, #8]	; (8003d1c <I2C3_ER_IRQHandler+0x10>)
 8003d12:	f003 fa0c 	bl	800712e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	2000a8c0 	.word	0x2000a8c0

08003d20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	e00a      	b.n	8003d48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d32:	f3af 8000 	nop.w
 8003d36:	4601      	mov	r1, r0
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	60ba      	str	r2, [r7, #8]
 8003d3e:	b2ca      	uxtb	r2, r1
 8003d40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	3301      	adds	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	dbf0      	blt.n	8003d32 <_read+0x12>
	}

return len;
 8003d50:	687b      	ldr	r3, [r7, #4]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <_close>:
	}
	return len;
}

int _close(int file)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
	return -1;
 8003d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d82:	605a      	str	r2, [r3, #4]
	return 0;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <_isatty>:

int _isatty(int file)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
	return 1;
 8003d9a:	2301      	movs	r3, #1
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
	return 0;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dcc:	4a14      	ldr	r2, [pc, #80]	; (8003e20 <_sbrk+0x5c>)
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <_sbrk+0x60>)
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dd8:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <_sbrk+0x64>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <_sbrk+0x64>)
 8003de2:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <_sbrk+0x68>)
 8003de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <_sbrk+0x64>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d207      	bcs.n	8003e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003df4:	f00a fe7e 	bl	800eaf4 <__errno>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	220c      	movs	r2, #12
 8003dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e02:	e009      	b.n	8003e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e04:	4b08      	ldr	r3, [pc, #32]	; (8003e28 <_sbrk+0x64>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e0a:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <_sbrk+0x64>)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <_sbrk+0x64>)
 8003e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e16:	68fb      	ldr	r3, [r7, #12]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20010000 	.word	0x20010000
 8003e24:	00000400 	.word	0x00000400
 8003e28:	20000758 	.word	0x20000758
 8003e2c:	2000ae80 	.word	0x2000ae80

08003e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <SystemInit+0x20>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3a:	4a05      	ldr	r2, [pc, #20]	; (8003e50 <SystemInit+0x20>)
 8003e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e44:	bf00      	nop
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	e000ed00 	.word	0xe000ed00

08003e54 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08e      	sub	sp, #56	; 0x38
 8003e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	605a      	str	r2, [r3, #4]
 8003e64:	609a      	str	r2, [r3, #8]
 8003e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e68:	f107 0320 	add.w	r3, r7, #32
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e72:	1d3b      	adds	r3, r7, #4
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	609a      	str	r2, [r3, #8]
 8003e7c:	60da      	str	r2, [r3, #12]
 8003e7e:	611a      	str	r2, [r3, #16]
 8003e80:	615a      	str	r2, [r3, #20]
 8003e82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e84:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <MX_TIM2_Init+0xe8>)
 8003e86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8003e8c:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <MX_TIM2_Init+0xe8>)
 8003e8e:	2253      	movs	r2, #83	; 0x53
 8003e90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e92:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <MX_TIM2_Init+0xe8>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8003e98:	4b28      	ldr	r3, [pc, #160]	; (8003f3c <MX_TIM2_Init+0xe8>)
 8003e9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ea0:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <MX_TIM2_Init+0xe8>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ea6:	4b25      	ldr	r3, [pc, #148]	; (8003f3c <MX_TIM2_Init+0xe8>)
 8003ea8:	2280      	movs	r2, #128	; 0x80
 8003eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003eac:	4823      	ldr	r0, [pc, #140]	; (8003f3c <MX_TIM2_Init+0xe8>)
 8003eae:	f005 fc15 	bl	80096dc <HAL_TIM_Base_Init>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003eb8:	f7ff fd12 	bl	80038e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	481c      	ldr	r0, [pc, #112]	; (8003f3c <MX_TIM2_Init+0xe8>)
 8003eca:	f006 f87f 	bl	8009fcc <HAL_TIM_ConfigClockSource>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003ed4:	f7ff fd04 	bl	80038e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003ed8:	4818      	ldr	r0, [pc, #96]	; (8003f3c <MX_TIM2_Init+0xe8>)
 8003eda:	f005 fcb1 	bl	8009840 <HAL_TIM_PWM_Init>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003ee4:	f7ff fcfc 	bl	80038e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ef0:	f107 0320 	add.w	r3, r7, #32
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4811      	ldr	r0, [pc, #68]	; (8003f3c <MX_TIM2_Init+0xe8>)
 8003ef8:	f006 fcf2 	bl	800a8e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003f02:	f7ff fced 	bl	80038e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f06:	2360      	movs	r3, #96	; 0x60
 8003f08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f16:	1d3b      	adds	r3, r7, #4
 8003f18:	2200      	movs	r2, #0
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4807      	ldr	r0, [pc, #28]	; (8003f3c <MX_TIM2_Init+0xe8>)
 8003f1e:	f005 ff97 	bl	8009e50 <HAL_TIM_PWM_ConfigChannel>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003f28:	f7ff fcda 	bl	80038e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003f2c:	4803      	ldr	r0, [pc, #12]	; (8003f3c <MX_TIM2_Init+0xe8>)
 8003f2e:	f000 f99b 	bl	8004268 <HAL_TIM_MspPostInit>

}
 8003f32:	bf00      	nop
 8003f34:	3738      	adds	r7, #56	; 0x38
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	2000ad1c 	.word	0x2000ad1c

08003f40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08e      	sub	sp, #56	; 0x38
 8003f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	605a      	str	r2, [r3, #4]
 8003f50:	609a      	str	r2, [r3, #8]
 8003f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f54:	f107 0320 	add.w	r3, r7, #32
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f5e:	1d3b      	adds	r3, r7, #4
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	60da      	str	r2, [r3, #12]
 8003f6a:	611a      	str	r2, [r3, #16]
 8003f6c:	615a      	str	r2, [r3, #20]
 8003f6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f70:	4b2c      	ldr	r3, [pc, #176]	; (8004024 <MX_TIM3_Init+0xe4>)
 8003f72:	4a2d      	ldr	r2, [pc, #180]	; (8004028 <MX_TIM3_Init+0xe8>)
 8003f74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8003f76:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <MX_TIM3_Init+0xe4>)
 8003f78:	2253      	movs	r2, #83	; 0x53
 8003f7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f7c:	4b29      	ldr	r3, [pc, #164]	; (8004024 <MX_TIM3_Init+0xe4>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8003f82:	4b28      	ldr	r3, [pc, #160]	; (8004024 <MX_TIM3_Init+0xe4>)
 8003f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f8a:	4b26      	ldr	r3, [pc, #152]	; (8004024 <MX_TIM3_Init+0xe4>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f90:	4b24      	ldr	r3, [pc, #144]	; (8004024 <MX_TIM3_Init+0xe4>)
 8003f92:	2280      	movs	r2, #128	; 0x80
 8003f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f96:	4823      	ldr	r0, [pc, #140]	; (8004024 <MX_TIM3_Init+0xe4>)
 8003f98:	f005 fba0 	bl	80096dc <HAL_TIM_Base_Init>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003fa2:	f7ff fc9d 	bl	80038e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003fac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	481c      	ldr	r0, [pc, #112]	; (8004024 <MX_TIM3_Init+0xe4>)
 8003fb4:	f006 f80a 	bl	8009fcc <HAL_TIM_ConfigClockSource>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003fbe:	f7ff fc8f 	bl	80038e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003fc2:	4818      	ldr	r0, [pc, #96]	; (8004024 <MX_TIM3_Init+0xe4>)
 8003fc4:	f005 fc3c 	bl	8009840 <HAL_TIM_PWM_Init>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003fce:	f7ff fc87 	bl	80038e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fda:	f107 0320 	add.w	r3, r7, #32
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4810      	ldr	r0, [pc, #64]	; (8004024 <MX_TIM3_Init+0xe4>)
 8003fe2:	f006 fc7d 	bl	800a8e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003fec:	f7ff fc78 	bl	80038e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ff0:	2360      	movs	r3, #96	; 0x60
 8003ff2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004000:	1d3b      	adds	r3, r7, #4
 8004002:	2208      	movs	r2, #8
 8004004:	4619      	mov	r1, r3
 8004006:	4807      	ldr	r0, [pc, #28]	; (8004024 <MX_TIM3_Init+0xe4>)
 8004008:	f005 ff22 	bl	8009e50 <HAL_TIM_PWM_ConfigChannel>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004012:	f7ff fc65 	bl	80038e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004016:	4803      	ldr	r0, [pc, #12]	; (8004024 <MX_TIM3_Init+0xe4>)
 8004018:	f000 f926 	bl	8004268 <HAL_TIM_MspPostInit>

}
 800401c:	bf00      	nop
 800401e:	3738      	adds	r7, #56	; 0x38
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	2000acd4 	.word	0x2000acd4
 8004028:	40000400 	.word	0x40000400

0800402c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08e      	sub	sp, #56	; 0x38
 8004030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	605a      	str	r2, [r3, #4]
 800403c:	609a      	str	r2, [r3, #8]
 800403e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004040:	f107 0320 	add.w	r3, r7, #32
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800404a:	1d3b      	adds	r3, r7, #4
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	611a      	str	r2, [r3, #16]
 8004058:	615a      	str	r2, [r3, #20]
 800405a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800405c:	4b32      	ldr	r3, [pc, #200]	; (8004128 <MX_TIM4_Init+0xfc>)
 800405e:	4a33      	ldr	r2, [pc, #204]	; (800412c <MX_TIM4_Init+0x100>)
 8004060:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8004062:	4b31      	ldr	r3, [pc, #196]	; (8004128 <MX_TIM4_Init+0xfc>)
 8004064:	2253      	movs	r2, #83	; 0x53
 8004066:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004068:	4b2f      	ldr	r3, [pc, #188]	; (8004128 <MX_TIM4_Init+0xfc>)
 800406a:	2200      	movs	r2, #0
 800406c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 800406e:	4b2e      	ldr	r3, [pc, #184]	; (8004128 <MX_TIM4_Init+0xfc>)
 8004070:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004074:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004076:	4b2c      	ldr	r3, [pc, #176]	; (8004128 <MX_TIM4_Init+0xfc>)
 8004078:	2200      	movs	r2, #0
 800407a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800407c:	4b2a      	ldr	r3, [pc, #168]	; (8004128 <MX_TIM4_Init+0xfc>)
 800407e:	2200      	movs	r2, #0
 8004080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004082:	4829      	ldr	r0, [pc, #164]	; (8004128 <MX_TIM4_Init+0xfc>)
 8004084:	f005 fb2a 	bl	80096dc <HAL_TIM_Base_Init>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800408e:	f7ff fc27 	bl	80038e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004096:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800409c:	4619      	mov	r1, r3
 800409e:	4822      	ldr	r0, [pc, #136]	; (8004128 <MX_TIM4_Init+0xfc>)
 80040a0:	f005 ff94 	bl	8009fcc <HAL_TIM_ConfigClockSource>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80040aa:	f7ff fc19 	bl	80038e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80040ae:	481e      	ldr	r0, [pc, #120]	; (8004128 <MX_TIM4_Init+0xfc>)
 80040b0:	f005 fbc6 	bl	8009840 <HAL_TIM_PWM_Init>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80040ba:	f7ff fc11 	bl	80038e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040be:	2300      	movs	r3, #0
 80040c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80040c6:	f107 0320 	add.w	r3, r7, #32
 80040ca:	4619      	mov	r1, r3
 80040cc:	4816      	ldr	r0, [pc, #88]	; (8004128 <MX_TIM4_Init+0xfc>)
 80040ce:	f006 fc07 	bl	800a8e0 <HAL_TIMEx_MasterConfigSynchronization>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80040d8:	f7ff fc02 	bl	80038e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040dc:	2360      	movs	r3, #96	; 0x60
 80040de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80040e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80040ee:	1d3b      	adds	r3, r7, #4
 80040f0:	2208      	movs	r2, #8
 80040f2:	4619      	mov	r1, r3
 80040f4:	480c      	ldr	r0, [pc, #48]	; (8004128 <MX_TIM4_Init+0xfc>)
 80040f6:	f005 feab 	bl	8009e50 <HAL_TIM_PWM_ConfigChannel>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004100:	f7ff fbee 	bl	80038e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004104:	1d3b      	adds	r3, r7, #4
 8004106:	220c      	movs	r2, #12
 8004108:	4619      	mov	r1, r3
 800410a:	4807      	ldr	r0, [pc, #28]	; (8004128 <MX_TIM4_Init+0xfc>)
 800410c:	f005 fea0 	bl	8009e50 <HAL_TIM_PWM_ConfigChannel>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8004116:	f7ff fbe3 	bl	80038e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800411a:	4803      	ldr	r0, [pc, #12]	; (8004128 <MX_TIM4_Init+0xfc>)
 800411c:	f000 f8a4 	bl	8004268 <HAL_TIM_MspPostInit>

}
 8004120:	bf00      	nop
 8004122:	3738      	adds	r7, #56	; 0x38
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	2000ac44 	.word	0x2000ac44
 800412c:	40000800 	.word	0x40000800

08004130 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004134:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <MX_TIM10_Init+0x40>)
 8004136:	4a0f      	ldr	r2, [pc, #60]	; (8004174 <MX_TIM10_Init+0x44>)
 8004138:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 800413a:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <MX_TIM10_Init+0x40>)
 800413c:	2253      	movs	r2, #83	; 0x53
 800413e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <MX_TIM10_Init+0x40>)
 8004142:	2200      	movs	r2, #0
 8004144:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 8004146:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <MX_TIM10_Init+0x40>)
 8004148:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800414c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800414e:	4b08      	ldr	r3, [pc, #32]	; (8004170 <MX_TIM10_Init+0x40>)
 8004150:	2200      	movs	r2, #0
 8004152:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <MX_TIM10_Init+0x40>)
 8004156:	2280      	movs	r2, #128	; 0x80
 8004158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800415a:	4805      	ldr	r0, [pc, #20]	; (8004170 <MX_TIM10_Init+0x40>)
 800415c:	f005 fabe 	bl	80096dc <HAL_TIM_Base_Init>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8004166:	f7ff fbbb 	bl	80038e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800416a:	bf00      	nop
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	2000ac8c 	.word	0x2000ac8c
 8004174:	40014400 	.word	0x40014400

08004178 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004188:	d116      	bne.n	80041b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	4b32      	ldr	r3, [pc, #200]	; (8004258 <HAL_TIM_Base_MspInit+0xe0>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	4a31      	ldr	r2, [pc, #196]	; (8004258 <HAL_TIM_Base_MspInit+0xe0>)
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	6413      	str	r3, [r2, #64]	; 0x40
 800419a:	4b2f      	ldr	r3, [pc, #188]	; (8004258 <HAL_TIM_Base_MspInit+0xe0>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80041a6:	2200      	movs	r2, #0
 80041a8:	2105      	movs	r1, #5
 80041aa:	201c      	movs	r0, #28
 80041ac:	f000 fff0 	bl	8005190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041b0:	201c      	movs	r0, #28
 80041b2:	f001 f809 	bl	80051c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80041b6:	e04a      	b.n	800424e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a27      	ldr	r2, [pc, #156]	; (800425c <HAL_TIM_Base_MspInit+0xe4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d116      	bne.n	80041f0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <HAL_TIM_Base_MspInit+0xe0>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	4a23      	ldr	r2, [pc, #140]	; (8004258 <HAL_TIM_Base_MspInit+0xe0>)
 80041cc:	f043 0302 	orr.w	r3, r3, #2
 80041d0:	6413      	str	r3, [r2, #64]	; 0x40
 80041d2:	4b21      	ldr	r3, [pc, #132]	; (8004258 <HAL_TIM_Base_MspInit+0xe0>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80041de:	2200      	movs	r2, #0
 80041e0:	2105      	movs	r1, #5
 80041e2:	201d      	movs	r0, #29
 80041e4:	f000 ffd4 	bl	8005190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80041e8:	201d      	movs	r0, #29
 80041ea:	f000 ffed 	bl	80051c8 <HAL_NVIC_EnableIRQ>
}
 80041ee:	e02e      	b.n	800424e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1a      	ldr	r2, [pc, #104]	; (8004260 <HAL_TIM_Base_MspInit+0xe8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d10e      	bne.n	8004218 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	4b16      	ldr	r3, [pc, #88]	; (8004258 <HAL_TIM_Base_MspInit+0xe0>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	4a15      	ldr	r2, [pc, #84]	; (8004258 <HAL_TIM_Base_MspInit+0xe0>)
 8004204:	f043 0304 	orr.w	r3, r3, #4
 8004208:	6413      	str	r3, [r2, #64]	; 0x40
 800420a:	4b13      	ldr	r3, [pc, #76]	; (8004258 <HAL_TIM_Base_MspInit+0xe0>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
}
 8004216:	e01a      	b.n	800424e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM10)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a11      	ldr	r2, [pc, #68]	; (8004264 <HAL_TIM_Base_MspInit+0xec>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d115      	bne.n	800424e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004222:	2300      	movs	r3, #0
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <HAL_TIM_Base_MspInit+0xe0>)
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	4a0b      	ldr	r2, [pc, #44]	; (8004258 <HAL_TIM_Base_MspInit+0xe0>)
 800422c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004230:	6453      	str	r3, [r2, #68]	; 0x44
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <HAL_TIM_Base_MspInit+0xe0>)
 8004234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800423e:	2200      	movs	r2, #0
 8004240:	2105      	movs	r1, #5
 8004242:	2019      	movs	r0, #25
 8004244:	f000 ffa4 	bl	8005190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004248:	2019      	movs	r0, #25
 800424a:	f000 ffbd 	bl	80051c8 <HAL_NVIC_EnableIRQ>
}
 800424e:	bf00      	nop
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800
 8004264:	40014400 	.word	0x40014400

08004268 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08a      	sub	sp, #40	; 0x28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004270:	f107 0314 	add.w	r3, r7, #20
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	60da      	str	r2, [r3, #12]
 800427e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004288:	d11e      	bne.n	80042c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	4b34      	ldr	r3, [pc, #208]	; (8004360 <HAL_TIM_MspPostInit+0xf8>)
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	4a33      	ldr	r2, [pc, #204]	; (8004360 <HAL_TIM_MspPostInit+0xf8>)
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	6313      	str	r3, [r2, #48]	; 0x30
 800429a:	4b31      	ldr	r3, [pc, #196]	; (8004360 <HAL_TIM_MspPostInit+0xf8>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = J2_STEP_TIM2_CH1_Pin;
 80042a6:	2320      	movs	r3, #32
 80042a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042aa:	2302      	movs	r3, #2
 80042ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b2:	2300      	movs	r3, #0
 80042b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042b6:	2301      	movs	r3, #1
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(J2_STEP_TIM2_CH1_GPIO_Port, &GPIO_InitStruct);
 80042ba:	f107 0314 	add.w	r3, r7, #20
 80042be:	4619      	mov	r1, r3
 80042c0:	4828      	ldr	r0, [pc, #160]	; (8004364 <HAL_TIM_MspPostInit+0xfc>)
 80042c2:	f001 fe83 	bl	8005fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80042c6:	e047      	b.n	8004358 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a26      	ldr	r2, [pc, #152]	; (8004368 <HAL_TIM_MspPostInit+0x100>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d11e      	bne.n	8004310 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	4b22      	ldr	r3, [pc, #136]	; (8004360 <HAL_TIM_MspPostInit+0xf8>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	4a21      	ldr	r2, [pc, #132]	; (8004360 <HAL_TIM_MspPostInit+0xf8>)
 80042dc:	f043 0302 	orr.w	r3, r3, #2
 80042e0:	6313      	str	r3, [r2, #48]	; 0x30
 80042e2:	4b1f      	ldr	r3, [pc, #124]	; (8004360 <HAL_TIM_MspPostInit+0xf8>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = J1_STEP_TIM3_CH3_Pin;
 80042ee:	2301      	movs	r3, #1
 80042f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f2:	2302      	movs	r3, #2
 80042f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042fa:	2300      	movs	r3, #0
 80042fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042fe:	2302      	movs	r3, #2
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(J1_STEP_TIM3_CH3_GPIO_Port, &GPIO_InitStruct);
 8004302:	f107 0314 	add.w	r3, r7, #20
 8004306:	4619      	mov	r1, r3
 8004308:	4818      	ldr	r0, [pc, #96]	; (800436c <HAL_TIM_MspPostInit+0x104>)
 800430a:	f001 fe5f 	bl	8005fcc <HAL_GPIO_Init>
}
 800430e:	e023      	b.n	8004358 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a16      	ldr	r2, [pc, #88]	; (8004370 <HAL_TIM_MspPostInit+0x108>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d11e      	bne.n	8004358 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	4b10      	ldr	r3, [pc, #64]	; (8004360 <HAL_TIM_MspPostInit+0xf8>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	4a0f      	ldr	r2, [pc, #60]	; (8004360 <HAL_TIM_MspPostInit+0xf8>)
 8004324:	f043 0302 	orr.w	r3, r3, #2
 8004328:	6313      	str	r3, [r2, #48]	; 0x30
 800432a:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <HAL_TIM_MspPostInit+0xf8>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO1_TIM4_CH3_Pin|SERVO_J3_TIM4_CH4_Pin;
 8004336:	f44f 7340 	mov.w	r3, #768	; 0x300
 800433a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433c:	2302      	movs	r3, #2
 800433e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004340:	2300      	movs	r3, #0
 8004342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004344:	2300      	movs	r3, #0
 8004346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004348:	2302      	movs	r3, #2
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800434c:	f107 0314 	add.w	r3, r7, #20
 8004350:	4619      	mov	r1, r3
 8004352:	4806      	ldr	r0, [pc, #24]	; (800436c <HAL_TIM_MspPostInit+0x104>)
 8004354:	f001 fe3a 	bl	8005fcc <HAL_GPIO_Init>
}
 8004358:	bf00      	nop
 800435a:	3728      	adds	r7, #40	; 0x28
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40023800 	.word	0x40023800
 8004364:	40020000 	.word	0x40020000
 8004368:	40000400 	.word	0x40000400
 800436c:	40020400 	.word	0x40020400
 8004370:	40000800 	.word	0x40000800

08004374 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004378:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <MX_USART1_UART_Init+0x4c>)
 800437a:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <MX_USART1_UART_Init+0x50>)
 800437c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800437e:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <MX_USART1_UART_Init+0x4c>)
 8004380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004384:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004386:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <MX_USART1_UART_Init+0x4c>)
 8004388:	2200      	movs	r2, #0
 800438a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800438c:	4b0c      	ldr	r3, [pc, #48]	; (80043c0 <MX_USART1_UART_Init+0x4c>)
 800438e:	2200      	movs	r2, #0
 8004390:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004392:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <MX_USART1_UART_Init+0x4c>)
 8004394:	2200      	movs	r2, #0
 8004396:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004398:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <MX_USART1_UART_Init+0x4c>)
 800439a:	220c      	movs	r2, #12
 800439c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800439e:	4b08      	ldr	r3, [pc, #32]	; (80043c0 <MX_USART1_UART_Init+0x4c>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <MX_USART1_UART_Init+0x4c>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043aa:	4805      	ldr	r0, [pc, #20]	; (80043c0 <MX_USART1_UART_Init+0x4c>)
 80043ac:	f006 fb3f 	bl	800aa2e <HAL_UART_Init>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80043b6:	f7ff fa93 	bl	80038e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	2000adc4 	.word	0x2000adc4
 80043c4:	40011000 	.word	0x40011000

080043c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80043cc:	4b11      	ldr	r3, [pc, #68]	; (8004414 <MX_USART2_UART_Init+0x4c>)
 80043ce:	4a12      	ldr	r2, [pc, #72]	; (8004418 <MX_USART2_UART_Init+0x50>)
 80043d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80043d2:	4b10      	ldr	r3, [pc, #64]	; (8004414 <MX_USART2_UART_Init+0x4c>)
 80043d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80043da:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <MX_USART2_UART_Init+0x4c>)
 80043dc:	2200      	movs	r2, #0
 80043de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <MX_USART2_UART_Init+0x4c>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <MX_USART2_UART_Init+0x4c>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <MX_USART2_UART_Init+0x4c>)
 80043ee:	220c      	movs	r2, #12
 80043f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043f2:	4b08      	ldr	r3, [pc, #32]	; (8004414 <MX_USART2_UART_Init+0x4c>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <MX_USART2_UART_Init+0x4c>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80043fe:	4805      	ldr	r0, [pc, #20]	; (8004414 <MX_USART2_UART_Init+0x4c>)
 8004400:	f006 fb15 	bl	800aa2e <HAL_UART_Init>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800440a:	f7ff fa69 	bl	80038e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800440e:	bf00      	nop
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	2000abb8 	.word	0x2000abb8
 8004418:	40004400 	.word	0x40004400

0800441c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08c      	sub	sp, #48	; 0x30
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004424:	f107 031c 	add.w	r3, r7, #28
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	60da      	str	r2, [r3, #12]
 8004432:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a69      	ldr	r2, [pc, #420]	; (80045e0 <HAL_UART_MspInit+0x1c4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d164      	bne.n	8004508 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	4b68      	ldr	r3, [pc, #416]	; (80045e4 <HAL_UART_MspInit+0x1c8>)
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	4a67      	ldr	r2, [pc, #412]	; (80045e4 <HAL_UART_MspInit+0x1c8>)
 8004448:	f043 0310 	orr.w	r3, r3, #16
 800444c:	6453      	str	r3, [r2, #68]	; 0x44
 800444e:	4b65      	ldr	r3, [pc, #404]	; (80045e4 <HAL_UART_MspInit+0x1c8>)
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	4b61      	ldr	r3, [pc, #388]	; (80045e4 <HAL_UART_MspInit+0x1c8>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	4a60      	ldr	r2, [pc, #384]	; (80045e4 <HAL_UART_MspInit+0x1c8>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	6313      	str	r3, [r2, #48]	; 0x30
 800446a:	4b5e      	ldr	r3, [pc, #376]	; (80045e4 <HAL_UART_MspInit+0x1c8>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004476:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800447a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447c:	2302      	movs	r3, #2
 800447e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004480:	2300      	movs	r3, #0
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004484:	2303      	movs	r3, #3
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004488:	2307      	movs	r3, #7
 800448a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800448c:	f107 031c 	add.w	r3, r7, #28
 8004490:	4619      	mov	r1, r3
 8004492:	4855      	ldr	r0, [pc, #340]	; (80045e8 <HAL_UART_MspInit+0x1cc>)
 8004494:	f001 fd9a 	bl	8005fcc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004498:	4b54      	ldr	r3, [pc, #336]	; (80045ec <HAL_UART_MspInit+0x1d0>)
 800449a:	4a55      	ldr	r2, [pc, #340]	; (80045f0 <HAL_UART_MspInit+0x1d4>)
 800449c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800449e:	4b53      	ldr	r3, [pc, #332]	; (80045ec <HAL_UART_MspInit+0x1d0>)
 80044a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044a4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044a6:	4b51      	ldr	r3, [pc, #324]	; (80045ec <HAL_UART_MspInit+0x1d0>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044ac:	4b4f      	ldr	r3, [pc, #316]	; (80045ec <HAL_UART_MspInit+0x1d0>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044b2:	4b4e      	ldr	r3, [pc, #312]	; (80045ec <HAL_UART_MspInit+0x1d0>)
 80044b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044b8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044ba:	4b4c      	ldr	r3, [pc, #304]	; (80045ec <HAL_UART_MspInit+0x1d0>)
 80044bc:	2200      	movs	r2, #0
 80044be:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044c0:	4b4a      	ldr	r3, [pc, #296]	; (80045ec <HAL_UART_MspInit+0x1d0>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80044c6:	4b49      	ldr	r3, [pc, #292]	; (80045ec <HAL_UART_MspInit+0x1d0>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80044cc:	4b47      	ldr	r3, [pc, #284]	; (80045ec <HAL_UART_MspInit+0x1d0>)
 80044ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80044d2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044d4:	4b45      	ldr	r3, [pc, #276]	; (80045ec <HAL_UART_MspInit+0x1d0>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80044da:	4844      	ldr	r0, [pc, #272]	; (80045ec <HAL_UART_MspInit+0x1d0>)
 80044dc:	f000 fe82 	bl	80051e4 <HAL_DMA_Init>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80044e6:	f7ff f9fb 	bl	80038e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a3f      	ldr	r2, [pc, #252]	; (80045ec <HAL_UART_MspInit+0x1d0>)
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38
 80044f0:	4a3e      	ldr	r2, [pc, #248]	; (80045ec <HAL_UART_MspInit+0x1d0>)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80044f6:	2200      	movs	r2, #0
 80044f8:	2105      	movs	r1, #5
 80044fa:	2025      	movs	r0, #37	; 0x25
 80044fc:	f000 fe48 	bl	8005190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004500:	2025      	movs	r0, #37	; 0x25
 8004502:	f000 fe61 	bl	80051c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004506:	e067      	b.n	80045d8 <HAL_UART_MspInit+0x1bc>
  else if(uartHandle->Instance==USART2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a39      	ldr	r2, [pc, #228]	; (80045f4 <HAL_UART_MspInit+0x1d8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d162      	bne.n	80045d8 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004512:	2300      	movs	r3, #0
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	4b33      	ldr	r3, [pc, #204]	; (80045e4 <HAL_UART_MspInit+0x1c8>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	4a32      	ldr	r2, [pc, #200]	; (80045e4 <HAL_UART_MspInit+0x1c8>)
 800451c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004520:	6413      	str	r3, [r2, #64]	; 0x40
 8004522:	4b30      	ldr	r3, [pc, #192]	; (80045e4 <HAL_UART_MspInit+0x1c8>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452a:	613b      	str	r3, [r7, #16]
 800452c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <HAL_UART_MspInit+0x1c8>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	4a2b      	ldr	r2, [pc, #172]	; (80045e4 <HAL_UART_MspInit+0x1c8>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	6313      	str	r3, [r2, #48]	; 0x30
 800453e:	4b29      	ldr	r3, [pc, #164]	; (80045e4 <HAL_UART_MspInit+0x1c8>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800454a:	230c      	movs	r3, #12
 800454c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454e:	2302      	movs	r3, #2
 8004550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004552:	2300      	movs	r3, #0
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004556:	2303      	movs	r3, #3
 8004558:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800455a:	2307      	movs	r3, #7
 800455c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800455e:	f107 031c 	add.w	r3, r7, #28
 8004562:	4619      	mov	r1, r3
 8004564:	4820      	ldr	r0, [pc, #128]	; (80045e8 <HAL_UART_MspInit+0x1cc>)
 8004566:	f001 fd31 	bl	8005fcc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800456a:	4b23      	ldr	r3, [pc, #140]	; (80045f8 <HAL_UART_MspInit+0x1dc>)
 800456c:	4a23      	ldr	r2, [pc, #140]	; (80045fc <HAL_UART_MspInit+0x1e0>)
 800456e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004570:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <HAL_UART_MspInit+0x1dc>)
 8004572:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004576:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004578:	4b1f      	ldr	r3, [pc, #124]	; (80045f8 <HAL_UART_MspInit+0x1dc>)
 800457a:	2200      	movs	r2, #0
 800457c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800457e:	4b1e      	ldr	r3, [pc, #120]	; (80045f8 <HAL_UART_MspInit+0x1dc>)
 8004580:	2200      	movs	r2, #0
 8004582:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004584:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <HAL_UART_MspInit+0x1dc>)
 8004586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800458a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <HAL_UART_MspInit+0x1dc>)
 800458e:	2200      	movs	r2, #0
 8004590:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004592:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <HAL_UART_MspInit+0x1dc>)
 8004594:	2200      	movs	r2, #0
 8004596:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004598:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <HAL_UART_MspInit+0x1dc>)
 800459a:	2200      	movs	r2, #0
 800459c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800459e:	4b16      	ldr	r3, [pc, #88]	; (80045f8 <HAL_UART_MspInit+0x1dc>)
 80045a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045a4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045a6:	4b14      	ldr	r3, [pc, #80]	; (80045f8 <HAL_UART_MspInit+0x1dc>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80045ac:	4812      	ldr	r0, [pc, #72]	; (80045f8 <HAL_UART_MspInit+0x1dc>)
 80045ae:	f000 fe19 	bl	80051e4 <HAL_DMA_Init>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80045b8:	f7ff f992 	bl	80038e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a0e      	ldr	r2, [pc, #56]	; (80045f8 <HAL_UART_MspInit+0x1dc>)
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38
 80045c2:	4a0d      	ldr	r2, [pc, #52]	; (80045f8 <HAL_UART_MspInit+0x1dc>)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80045c8:	2200      	movs	r2, #0
 80045ca:	2105      	movs	r1, #5
 80045cc:	2026      	movs	r0, #38	; 0x26
 80045ce:	f000 fddf 	bl	8005190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80045d2:	2026      	movs	r0, #38	; 0x26
 80045d4:	f000 fdf8 	bl	80051c8 <HAL_NVIC_EnableIRQ>
}
 80045d8:	bf00      	nop
 80045da:	3730      	adds	r7, #48	; 0x30
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40011000 	.word	0x40011000
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40020000 	.word	0x40020000
 80045ec:	2000ad64 	.word	0x2000ad64
 80045f0:	40026440 	.word	0x40026440
 80045f4:	40004400 	.word	0x40004400
 80045f8:	2000ab3c 	.word	0x2000ab3c
 80045fc:	40026088 	.word	0x40026088

08004600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004638 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004604:	480d      	ldr	r0, [pc, #52]	; (800463c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004606:	490e      	ldr	r1, [pc, #56]	; (8004640 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004608:	4a0e      	ldr	r2, [pc, #56]	; (8004644 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800460a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800460c:	e002      	b.n	8004614 <LoopCopyDataInit>

0800460e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800460e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004612:	3304      	adds	r3, #4

08004614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004618:	d3f9      	bcc.n	800460e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800461a:	4a0b      	ldr	r2, [pc, #44]	; (8004648 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800461c:	4c0b      	ldr	r4, [pc, #44]	; (800464c <LoopFillZerobss+0x26>)
  movs r3, #0
 800461e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004620:	e001      	b.n	8004626 <LoopFillZerobss>

08004622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004624:	3204      	adds	r2, #4

08004626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004628:	d3fb      	bcc.n	8004622 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800462a:	f7ff fc01 	bl	8003e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800462e:	f00a fa67 	bl	800eb00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004632:	f7ff f873 	bl	800371c <main>
  bx  lr    
 8004636:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004638:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800463c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004640:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8004644:	08010274 	.word	0x08010274
  ldr r2, =_sbss
 8004648:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800464c:	2000ae7c 	.word	0x2000ae7c

08004650 <DMA1_Stream3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004650:	e7fe      	b.n	8004650 <DMA1_Stream3_IRQHandler>
	...

08004654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004658:	4b0e      	ldr	r3, [pc, #56]	; (8004694 <HAL_Init+0x40>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a0d      	ldr	r2, [pc, #52]	; (8004694 <HAL_Init+0x40>)
 800465e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004664:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <HAL_Init+0x40>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a0a      	ldr	r2, [pc, #40]	; (8004694 <HAL_Init+0x40>)
 800466a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800466e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004670:	4b08      	ldr	r3, [pc, #32]	; (8004694 <HAL_Init+0x40>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a07      	ldr	r2, [pc, #28]	; (8004694 <HAL_Init+0x40>)
 8004676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800467a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800467c:	2003      	movs	r0, #3
 800467e:	f000 fd7c 	bl	800517a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004682:	2000      	movs	r0, #0
 8004684:	f7ff fa16 	bl	8003ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004688:	f7ff f9e8 	bl	8003a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40023c00 	.word	0x40023c00

08004698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <HAL_IncTick+0x20>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <HAL_IncTick+0x24>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4413      	add	r3, r2
 80046a8:	4a04      	ldr	r2, [pc, #16]	; (80046bc <HAL_IncTick+0x24>)
 80046aa:	6013      	str	r3, [r2, #0]
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20000010 	.word	0x20000010
 80046bc:	2000ae08 	.word	0x2000ae08

080046c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return uwTick;
 80046c4:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <HAL_GetTick+0x14>)
 80046c6:	681b      	ldr	r3, [r3, #0]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	2000ae08 	.word	0x2000ae08

080046d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046e0:	f7ff ffee 	bl	80046c0 <HAL_GetTick>
 80046e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046f0:	d005      	beq.n	80046fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046f2:	4b0a      	ldr	r3, [pc, #40]	; (800471c <HAL_Delay+0x44>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046fe:	bf00      	nop
 8004700:	f7ff ffde 	bl	80046c0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	429a      	cmp	r2, r3
 800470e:	d8f7      	bhi.n	8004700 <HAL_Delay+0x28>
  {
  }
}
 8004710:	bf00      	nop
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000010 	.word	0x20000010

08004720 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e033      	b.n	800479e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fd f8cc 	bl	80018dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b00      	cmp	r3, #0
 800475c:	d118      	bne.n	8004790 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004766:	f023 0302 	bic.w	r3, r3, #2
 800476a:	f043 0202 	orr.w	r2, r3, #2
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fb4e 	bl	8004e14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f023 0303 	bic.w	r3, r3, #3
 8004786:	f043 0201 	orr.w	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40
 800478e:	e001      	b.n	8004794 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800479c:	7bfb      	ldrb	r3, [r7, #15]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_ADC_Start_IT+0x1a>
 80047be:	2302      	movs	r3, #2
 80047c0:	e0a1      	b.n	8004906 <HAL_ADC_Start_IT+0x15e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d018      	beq.n	800480a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80047e8:	4b4a      	ldr	r3, [pc, #296]	; (8004914 <HAL_ADC_Start_IT+0x16c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a4a      	ldr	r2, [pc, #296]	; (8004918 <HAL_ADC_Start_IT+0x170>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	0c9a      	lsrs	r2, r3, #18
 80047f4:	4613      	mov	r3, r2
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	4413      	add	r3, r2
 80047fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80047fc:	e002      	b.n	8004804 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	3b01      	subs	r3, #1
 8004802:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f9      	bne.n	80047fe <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b01      	cmp	r3, #1
 8004816:	d169      	bne.n	80048ec <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004836:	2b00      	cmp	r3, #0
 8004838:	d007      	beq.n	800484a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004842:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004856:	d106      	bne.n	8004866 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485c:	f023 0206 	bic.w	r2, r3, #6
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	645a      	str	r2, [r3, #68]	; 0x44
 8004864:	e002      	b.n	800486c <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004874:	4b29      	ldr	r3, [pc, #164]	; (800491c <HAL_ADC_Start_IT+0x174>)
 8004876:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004880:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004890:	f043 0320 	orr.w	r3, r3, #32
 8004894:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f003 031f 	and.w	r3, r3, #31
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10f      	bne.n	80048c2 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d129      	bne.n	8004904 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	e020      	b.n	8004904 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a16      	ldr	r2, [pc, #88]	; (8004920 <HAL_ADC_Start_IT+0x178>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d11b      	bne.n	8004904 <HAL_ADC_Start_IT+0x15c>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d114      	bne.n	8004904 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048e8:	609a      	str	r2, [r3, #8]
 80048ea:	e00b      	b.n	8004904 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	f043 0210 	orr.w	r2, r3, #16
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fc:	f043 0201 	orr.w	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000008 	.word	0x20000008
 8004918:	431bde83 	.word	0x431bde83
 800491c:	40012300 	.word	0x40012300
 8004920:	40012000 	.word	0x40012000

08004924 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	2300      	movs	r3, #0
 8004932:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b02      	cmp	r3, #2
 8004940:	bf0c      	ite	eq
 8004942:	2301      	moveq	r3, #1
 8004944:	2300      	movne	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b20      	cmp	r3, #32
 8004956:	bf0c      	ite	eq
 8004958:	2301      	moveq	r3, #1
 800495a:	2300      	movne	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d049      	beq.n	80049fa <HAL_ADC_IRQHandler+0xd6>
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d046      	beq.n	80049fa <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b00      	cmp	r3, #0
 8004976:	d105      	bne.n	8004984 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d12b      	bne.n	80049ea <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004996:	2b00      	cmp	r3, #0
 8004998:	d127      	bne.n	80049ea <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d006      	beq.n	80049b6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d119      	bne.n	80049ea <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0220 	bic.w	r2, r2, #32
 80049c4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d105      	bne.n	80049ea <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f043 0201 	orr.w	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fc fff4 	bl	80019d8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0212 	mvn.w	r2, #18
 80049f8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	bf0c      	ite	eq
 8004a08:	2301      	moveq	r3, #1
 8004a0a:	2300      	movne	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1a:	2b80      	cmp	r3, #128	; 0x80
 8004a1c:	bf0c      	ite	eq
 8004a1e:	2301      	moveq	r3, #1
 8004a20:	2300      	movne	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d057      	beq.n	8004adc <HAL_ADC_IRQHandler+0x1b8>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d054      	beq.n	8004adc <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f003 0310 	and.w	r3, r3, #16
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d105      	bne.n	8004a4a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d139      	bne.n	8004acc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d006      	beq.n	8004a74 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d12b      	bne.n	8004acc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d124      	bne.n	8004acc <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d11d      	bne.n	8004acc <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d119      	bne.n	8004acc <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aa6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d105      	bne.n	8004acc <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	f043 0201 	orr.w	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fa9d 	bl	800500c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f06f 020c 	mvn.w	r2, #12
 8004ada:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	bf0c      	ite	eq
 8004aea:	2301      	moveq	r3, #1
 8004aec:	2300      	movne	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d017      	beq.n	8004b3e <HAL_ADC_IRQHandler+0x21a>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d014      	beq.n	8004b3e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d10d      	bne.n	8004b3e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f839 	bl	8004ba6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0201 	mvn.w	r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	bf0c      	ite	eq
 8004b4c:	2301      	moveq	r3, #1
 8004b4e:	2300      	movne	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b62:	bf0c      	ite	eq
 8004b64:	2301      	moveq	r3, #1
 8004b66:	2300      	movne	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d015      	beq.n	8004b9e <HAL_ADC_IRQHandler+0x27a>
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d012      	beq.n	8004b9e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7c:	f043 0202 	orr.w	r2, r3, #2
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0220 	mvn.w	r2, #32
 8004b8c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f813 	bl	8004bba <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0220 	mvn.w	r2, #32
 8004b9c:	601a      	str	r2, [r3, #0]
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_ADC_ConfigChannel+0x1c>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e105      	b.n	8004df8 <HAL_ADC_ConfigChannel+0x228>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b09      	cmp	r3, #9
 8004bfa:	d925      	bls.n	8004c48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68d9      	ldr	r1, [r3, #12]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	4413      	add	r3, r2
 8004c10:	3b1e      	subs	r3, #30
 8004c12:	2207      	movs	r2, #7
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	43da      	mvns	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	400a      	ands	r2, r1
 8004c20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68d9      	ldr	r1, [r3, #12]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	4618      	mov	r0, r3
 8004c34:	4603      	mov	r3, r0
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	4403      	add	r3, r0
 8004c3a:	3b1e      	subs	r3, #30
 8004c3c:	409a      	lsls	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	60da      	str	r2, [r3, #12]
 8004c46:	e022      	b.n	8004c8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6919      	ldr	r1, [r3, #16]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	4613      	mov	r3, r2
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	4413      	add	r3, r2
 8004c5c:	2207      	movs	r2, #7
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43da      	mvns	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	400a      	ands	r2, r1
 8004c6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6919      	ldr	r1, [r3, #16]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	4403      	add	r3, r0
 8004c84:	409a      	lsls	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b06      	cmp	r3, #6
 8004c94:	d824      	bhi.n	8004ce0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3b05      	subs	r3, #5
 8004ca8:	221f      	movs	r2, #31
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43da      	mvns	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	400a      	ands	r2, r1
 8004cb6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	3b05      	subs	r3, #5
 8004cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8004cde:	e04c      	b.n	8004d7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b0c      	cmp	r3, #12
 8004ce6:	d824      	bhi.n	8004d32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3b23      	subs	r3, #35	; 0x23
 8004cfa:	221f      	movs	r2, #31
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	43da      	mvns	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	400a      	ands	r2, r1
 8004d08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	4618      	mov	r0, r3
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	3b23      	subs	r3, #35	; 0x23
 8004d24:	fa00 f203 	lsl.w	r2, r0, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8004d30:	e023      	b.n	8004d7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	3b41      	subs	r3, #65	; 0x41
 8004d44:	221f      	movs	r2, #31
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43da      	mvns	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	400a      	ands	r2, r1
 8004d52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	4618      	mov	r0, r3
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	3b41      	subs	r3, #65	; 0x41
 8004d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d7a:	4b22      	ldr	r3, [pc, #136]	; (8004e04 <HAL_ADC_ConfigChannel+0x234>)
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a21      	ldr	r2, [pc, #132]	; (8004e08 <HAL_ADC_ConfigChannel+0x238>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d109      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x1cc>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b12      	cmp	r3, #18
 8004d8e:	d105      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a19      	ldr	r2, [pc, #100]	; (8004e08 <HAL_ADC_ConfigChannel+0x238>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d123      	bne.n	8004dee <HAL_ADC_ConfigChannel+0x21e>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b10      	cmp	r3, #16
 8004dac:	d003      	beq.n	8004db6 <HAL_ADC_ConfigChannel+0x1e6>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b11      	cmp	r3, #17
 8004db4:	d11b      	bne.n	8004dee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b10      	cmp	r3, #16
 8004dc8:	d111      	bne.n	8004dee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004dca:	4b10      	ldr	r3, [pc, #64]	; (8004e0c <HAL_ADC_ConfigChannel+0x23c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a10      	ldr	r2, [pc, #64]	; (8004e10 <HAL_ADC_ConfigChannel+0x240>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	0c9a      	lsrs	r2, r3, #18
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004de0:	e002      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f9      	bne.n	8004de2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	40012300 	.word	0x40012300
 8004e08:	40012000 	.word	0x40012000
 8004e0c:	20000008 	.word	0x20000008
 8004e10:	431bde83 	.word	0x431bde83

08004e14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e1c:	4b79      	ldr	r3, [pc, #484]	; (8005004 <ADC_Init+0x1f0>)
 8004e1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	431a      	orrs	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6859      	ldr	r1, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	021a      	lsls	r2, r3, #8
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004e6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6859      	ldr	r1, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6899      	ldr	r1, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	4a58      	ldr	r2, [pc, #352]	; (8005008 <ADC_Init+0x1f4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d022      	beq.n	8004ef2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004eba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6899      	ldr	r1, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004edc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6899      	ldr	r1, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	609a      	str	r2, [r3, #8]
 8004ef0:	e00f      	b.n	8004f12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0202 	bic.w	r2, r2, #2
 8004f20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6899      	ldr	r1, [r3, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	7e1b      	ldrb	r3, [r3, #24]
 8004f2c:	005a      	lsls	r2, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01b      	beq.n	8004f78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004f5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6859      	ldr	r1, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	035a      	lsls	r2, r3, #13
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	605a      	str	r2, [r3, #4]
 8004f76:	e007      	b.n	8004f88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004f96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	051a      	lsls	r2, r3, #20
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004fbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6899      	ldr	r1, [r3, #8]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fca:	025a      	lsls	r2, r3, #9
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6899      	ldr	r1, [r3, #8]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	029a      	lsls	r2, r3, #10
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	609a      	str	r2, [r3, #8]
}
 8004ff8:	bf00      	nop
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	40012300 	.word	0x40012300
 8005008:	0f000001 	.word	0x0f000001

0800500c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005030:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <__NVIC_SetPriorityGrouping+0x44>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800503c:	4013      	ands	r3, r2
 800503e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800504c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005052:	4a04      	ldr	r2, [pc, #16]	; (8005064 <__NVIC_SetPriorityGrouping+0x44>)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	60d3      	str	r3, [r2, #12]
}
 8005058:	bf00      	nop
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	e000ed00 	.word	0xe000ed00

08005068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800506c:	4b04      	ldr	r3, [pc, #16]	; (8005080 <__NVIC_GetPriorityGrouping+0x18>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	0a1b      	lsrs	r3, r3, #8
 8005072:	f003 0307 	and.w	r3, r3, #7
}
 8005076:	4618      	mov	r0, r3
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	e000ed00 	.word	0xe000ed00

08005084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	4603      	mov	r3, r0
 800508c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800508e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005092:	2b00      	cmp	r3, #0
 8005094:	db0b      	blt.n	80050ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	f003 021f 	and.w	r2, r3, #31
 800509c:	4907      	ldr	r1, [pc, #28]	; (80050bc <__NVIC_EnableIRQ+0x38>)
 800509e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	2001      	movs	r0, #1
 80050a6:	fa00 f202 	lsl.w	r2, r0, r2
 80050aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	e000e100 	.word	0xe000e100

080050c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	6039      	str	r1, [r7, #0]
 80050ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	db0a      	blt.n	80050ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	490c      	ldr	r1, [pc, #48]	; (800510c <__NVIC_SetPriority+0x4c>)
 80050da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050de:	0112      	lsls	r2, r2, #4
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	440b      	add	r3, r1
 80050e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050e8:	e00a      	b.n	8005100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	4908      	ldr	r1, [pc, #32]	; (8005110 <__NVIC_SetPriority+0x50>)
 80050f0:	79fb      	ldrb	r3, [r7, #7]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	3b04      	subs	r3, #4
 80050f8:	0112      	lsls	r2, r2, #4
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	440b      	add	r3, r1
 80050fe:	761a      	strb	r2, [r3, #24]
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	e000e100 	.word	0xe000e100
 8005110:	e000ed00 	.word	0xe000ed00

08005114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005114:	b480      	push	{r7}
 8005116:	b089      	sub	sp, #36	; 0x24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f1c3 0307 	rsb	r3, r3, #7
 800512e:	2b04      	cmp	r3, #4
 8005130:	bf28      	it	cs
 8005132:	2304      	movcs	r3, #4
 8005134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	3304      	adds	r3, #4
 800513a:	2b06      	cmp	r3, #6
 800513c:	d902      	bls.n	8005144 <NVIC_EncodePriority+0x30>
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	3b03      	subs	r3, #3
 8005142:	e000      	b.n	8005146 <NVIC_EncodePriority+0x32>
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43da      	mvns	r2, r3
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	401a      	ands	r2, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800515c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	fa01 f303 	lsl.w	r3, r1, r3
 8005166:	43d9      	mvns	r1, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800516c:	4313      	orrs	r3, r2
         );
}
 800516e:	4618      	mov	r0, r3
 8005170:	3724      	adds	r7, #36	; 0x24
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b082      	sub	sp, #8
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff ff4c 	bl	8005020 <__NVIC_SetPriorityGrouping>
}
 8005188:	bf00      	nop
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	4603      	mov	r3, r0
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051a2:	f7ff ff61 	bl	8005068 <__NVIC_GetPriorityGrouping>
 80051a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	68b9      	ldr	r1, [r7, #8]
 80051ac:	6978      	ldr	r0, [r7, #20]
 80051ae:	f7ff ffb1 	bl	8005114 <NVIC_EncodePriority>
 80051b2:	4602      	mov	r2, r0
 80051b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051b8:	4611      	mov	r1, r2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff ff80 	bl	80050c0 <__NVIC_SetPriority>
}
 80051c0:	bf00      	nop
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff ff54 	bl	8005084 <__NVIC_EnableIRQ>
}
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80051f0:	f7ff fa66 	bl	80046c0 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e099      	b.n	8005334 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0201 	bic.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005220:	e00f      	b.n	8005242 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005222:	f7ff fa4d 	bl	80046c0 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b05      	cmp	r3, #5
 800522e:	d908      	bls.n	8005242 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2220      	movs	r2, #32
 8005234:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2203      	movs	r2, #3
 800523a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e078      	b.n	8005334 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e8      	bne.n	8005222 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	4b38      	ldr	r3, [pc, #224]	; (800533c <HAL_DMA_Init+0x158>)
 800525c:	4013      	ands	r3, r2
 800525e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800526e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800527a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005286:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	2b04      	cmp	r3, #4
 800529a:	d107      	bne.n	80052ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	4313      	orrs	r3, r2
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 0307 	bic.w	r3, r3, #7
 80052c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d117      	bne.n	8005306 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00e      	beq.n	8005306 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 fb1b 	bl	8005924 <DMA_CheckFifoParam>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d008      	beq.n	8005306 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2240      	movs	r2, #64	; 0x40
 80052f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005302:	2301      	movs	r3, #1
 8005304:	e016      	b.n	8005334 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fad2 	bl	80058b8 <DMA_CalcBaseAndBitshift>
 8005314:	4603      	mov	r3, r0
 8005316:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531c:	223f      	movs	r2, #63	; 0x3f
 800531e:	409a      	lsls	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	f010803f 	.word	0xf010803f

08005340 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005356:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_DMA_Start_IT+0x26>
 8005362:	2302      	movs	r3, #2
 8005364:	e040      	b.n	80053e8 <HAL_DMA_Start_IT+0xa8>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b01      	cmp	r3, #1
 8005378:	d12f      	bne.n	80053da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fa64 	bl	800585c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005398:	223f      	movs	r2, #63	; 0x3f
 800539a:	409a      	lsls	r2, r3
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0216 	orr.w	r2, r2, #22
 80053ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d007      	beq.n	80053c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0208 	orr.w	r2, r2, #8
 80053c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e005      	b.n	80053e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80053e2:	2302      	movs	r3, #2
 80053e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80053fe:	f7ff f95f 	bl	80046c0 <HAL_GetTick>
 8005402:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d008      	beq.n	8005422 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2280      	movs	r2, #128	; 0x80
 8005414:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e052      	b.n	80054c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0216 	bic.w	r2, r2, #22
 8005430:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695a      	ldr	r2, [r3, #20]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005440:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	d103      	bne.n	8005452 <HAL_DMA_Abort+0x62>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800544e:	2b00      	cmp	r3, #0
 8005450:	d007      	beq.n	8005462 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0208 	bic.w	r2, r2, #8
 8005460:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0201 	bic.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005472:	e013      	b.n	800549c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005474:	f7ff f924 	bl	80046c0 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b05      	cmp	r3, #5
 8005480:	d90c      	bls.n	800549c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2220      	movs	r2, #32
 8005486:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2203      	movs	r2, #3
 8005494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e015      	b.n	80054c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e4      	bne.n	8005474 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ae:	223f      	movs	r2, #63	; 0x3f
 80054b0:	409a      	lsls	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d004      	beq.n	80054ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2280      	movs	r2, #128	; 0x80
 80054e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e00c      	b.n	8005508 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2205      	movs	r2, #5
 80054f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0201 	bic.w	r2, r2, #1
 8005504:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005520:	4b92      	ldr	r3, [pc, #584]	; (800576c <HAL_DMA_IRQHandler+0x258>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a92      	ldr	r2, [pc, #584]	; (8005770 <HAL_DMA_IRQHandler+0x25c>)
 8005526:	fba2 2303 	umull	r2, r3, r2, r3
 800552a:	0a9b      	lsrs	r3, r3, #10
 800552c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005532:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800553e:	2208      	movs	r2, #8
 8005540:	409a      	lsls	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4013      	ands	r3, r2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01a      	beq.n	8005580 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d013      	beq.n	8005580 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0204 	bic.w	r2, r2, #4
 8005566:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556c:	2208      	movs	r2, #8
 800556e:	409a      	lsls	r2, r3
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005578:	f043 0201 	orr.w	r2, r3, #1
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005584:	2201      	movs	r2, #1
 8005586:	409a      	lsls	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4013      	ands	r3, r2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d012      	beq.n	80055b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00b      	beq.n	80055b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a2:	2201      	movs	r2, #1
 80055a4:	409a      	lsls	r2, r3
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ae:	f043 0202 	orr.w	r2, r3, #2
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ba:	2204      	movs	r2, #4
 80055bc:	409a      	lsls	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4013      	ands	r3, r2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d012      	beq.n	80055ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00b      	beq.n	80055ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d8:	2204      	movs	r2, #4
 80055da:	409a      	lsls	r2, r3
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e4:	f043 0204 	orr.w	r2, r3, #4
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f0:	2210      	movs	r2, #16
 80055f2:	409a      	lsls	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4013      	ands	r3, r2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d043      	beq.n	8005684 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0308 	and.w	r3, r3, #8
 8005606:	2b00      	cmp	r3, #0
 8005608:	d03c      	beq.n	8005684 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560e:	2210      	movs	r2, #16
 8005610:	409a      	lsls	r2, r3
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d018      	beq.n	8005656 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d108      	bne.n	8005644 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d024      	beq.n	8005684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	4798      	blx	r3
 8005642:	e01f      	b.n	8005684 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01b      	beq.n	8005684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	4798      	blx	r3
 8005654:	e016      	b.n	8005684 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	d107      	bne.n	8005674 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0208 	bic.w	r2, r2, #8
 8005672:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005688:	2220      	movs	r2, #32
 800568a:	409a      	lsls	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4013      	ands	r3, r2
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 808e 	beq.w	80057b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0310 	and.w	r3, r3, #16
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 8086 	beq.w	80057b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056aa:	2220      	movs	r2, #32
 80056ac:	409a      	lsls	r2, r3
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b05      	cmp	r3, #5
 80056bc:	d136      	bne.n	800572c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0216 	bic.w	r2, r2, #22
 80056cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695a      	ldr	r2, [r3, #20]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <HAL_DMA_IRQHandler+0x1da>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d007      	beq.n	80056fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0208 	bic.w	r2, r2, #8
 80056fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005702:	223f      	movs	r2, #63	; 0x3f
 8005704:	409a      	lsls	r2, r3
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800571e:	2b00      	cmp	r3, #0
 8005720:	d07d      	beq.n	800581e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	4798      	blx	r3
        }
        return;
 800572a:	e078      	b.n	800581e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d01c      	beq.n	8005774 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d108      	bne.n	800575a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574c:	2b00      	cmp	r3, #0
 800574e:	d030      	beq.n	80057b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	4798      	blx	r3
 8005758:	e02b      	b.n	80057b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575e:	2b00      	cmp	r3, #0
 8005760:	d027      	beq.n	80057b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	4798      	blx	r3
 800576a:	e022      	b.n	80057b2 <HAL_DMA_IRQHandler+0x29e>
 800576c:	20000008 	.word	0x20000008
 8005770:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10f      	bne.n	80057a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 0210 	bic.w	r2, r2, #16
 8005790:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d032      	beq.n	8005820 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d022      	beq.n	800580c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2205      	movs	r2, #5
 80057ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0201 	bic.w	r2, r2, #1
 80057dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60bb      	str	r3, [r7, #8]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d307      	bcc.n	80057fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1f2      	bne.n	80057de <HAL_DMA_IRQHandler+0x2ca>
 80057f8:	e000      	b.n	80057fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80057fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d005      	beq.n	8005820 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	4798      	blx	r3
 800581c:	e000      	b.n	8005820 <HAL_DMA_IRQHandler+0x30c>
        return;
 800581e:	bf00      	nop
    }
  }
}
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop

08005828 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005836:	b2db      	uxtb	r3, r3
}
 8005838:	4618      	mov	r0, r3
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005878:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	d108      	bne.n	800589c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800589a:	e007      	b.n	80058ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	60da      	str	r2, [r3, #12]
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	3b10      	subs	r3, #16
 80058c8:	4a14      	ldr	r2, [pc, #80]	; (800591c <DMA_CalcBaseAndBitshift+0x64>)
 80058ca:	fba2 2303 	umull	r2, r3, r2, r3
 80058ce:	091b      	lsrs	r3, r3, #4
 80058d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80058d2:	4a13      	ldr	r2, [pc, #76]	; (8005920 <DMA_CalcBaseAndBitshift+0x68>)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d909      	bls.n	80058fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80058ee:	f023 0303 	bic.w	r3, r3, #3
 80058f2:	1d1a      	adds	r2, r3, #4
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	659a      	str	r2, [r3, #88]	; 0x58
 80058f8:	e007      	b.n	800590a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005902:	f023 0303 	bic.w	r3, r3, #3
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	aaaaaaab 	.word	0xaaaaaaab
 8005920:	080100c0 	.word	0x080100c0

08005924 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d11f      	bne.n	800597e <DMA_CheckFifoParam+0x5a>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b03      	cmp	r3, #3
 8005942:	d856      	bhi.n	80059f2 <DMA_CheckFifoParam+0xce>
 8005944:	a201      	add	r2, pc, #4	; (adr r2, 800594c <DMA_CheckFifoParam+0x28>)
 8005946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594a:	bf00      	nop
 800594c:	0800595d 	.word	0x0800595d
 8005950:	0800596f 	.word	0x0800596f
 8005954:	0800595d 	.word	0x0800595d
 8005958:	080059f3 	.word	0x080059f3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d046      	beq.n	80059f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800596c:	e043      	b.n	80059f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005972:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005976:	d140      	bne.n	80059fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800597c:	e03d      	b.n	80059fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005986:	d121      	bne.n	80059cc <DMA_CheckFifoParam+0xa8>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b03      	cmp	r3, #3
 800598c:	d837      	bhi.n	80059fe <DMA_CheckFifoParam+0xda>
 800598e:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <DMA_CheckFifoParam+0x70>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	080059a5 	.word	0x080059a5
 8005998:	080059ab 	.word	0x080059ab
 800599c:	080059a5 	.word	0x080059a5
 80059a0:	080059bd 	.word	0x080059bd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	73fb      	strb	r3, [r7, #15]
      break;
 80059a8:	e030      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d025      	beq.n	8005a02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059ba:	e022      	b.n	8005a02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059c4:	d11f      	bne.n	8005a06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80059ca:	e01c      	b.n	8005a06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d903      	bls.n	80059da <DMA_CheckFifoParam+0xb6>
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d003      	beq.n	80059e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80059d8:	e018      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	73fb      	strb	r3, [r7, #15]
      break;
 80059de:	e015      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00e      	beq.n	8005a0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
      break;
 80059f0:	e00b      	b.n	8005a0a <DMA_CheckFifoParam+0xe6>
      break;
 80059f2:	bf00      	nop
 80059f4:	e00a      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
      break;
 80059f6:	bf00      	nop
 80059f8:	e008      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
      break;
 80059fa:	bf00      	nop
 80059fc:	e006      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
      break;
 80059fe:	bf00      	nop
 8005a00:	e004      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
      break;
 8005a02:	bf00      	nop
 8005a04:	e002      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
      break;   
 8005a06:	bf00      	nop
 8005a08:	e000      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
      break;
 8005a0a:	bf00      	nop
    }
  } 
  
  return status; 
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop

08005a1c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005a2e:	4b23      	ldr	r3, [pc, #140]	; (8005abc <HAL_FLASH_Program+0xa0>)
 8005a30:	7e1b      	ldrb	r3, [r3, #24]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <HAL_FLASH_Program+0x1e>
 8005a36:	2302      	movs	r3, #2
 8005a38:	e03b      	b.n	8005ab2 <HAL_FLASH_Program+0x96>
 8005a3a:	4b20      	ldr	r3, [pc, #128]	; (8005abc <HAL_FLASH_Program+0xa0>)
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a44:	f000 f860 	bl	8005b08 <FLASH_WaitForLastOperation>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d12b      	bne.n	8005aaa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d105      	bne.n	8005a64 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005a58:	783b      	ldrb	r3, [r7, #0]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	68b8      	ldr	r0, [r7, #8]
 8005a5e:	f000 f90b 	bl	8005c78 <FLASH_Program_Byte>
 8005a62:	e016      	b.n	8005a92 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d105      	bne.n	8005a76 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005a6a:	883b      	ldrh	r3, [r7, #0]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	68b8      	ldr	r0, [r7, #8]
 8005a70:	f000 f8de 	bl	8005c30 <FLASH_Program_HalfWord>
 8005a74:	e00d      	b.n	8005a92 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d105      	bne.n	8005a88 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	4619      	mov	r1, r3
 8005a80:	68b8      	ldr	r0, [r7, #8]
 8005a82:	f000 f8b3 	bl	8005bec <FLASH_Program_Word>
 8005a86:	e004      	b.n	8005a92 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a8c:	68b8      	ldr	r0, [r7, #8]
 8005a8e:	f000 f87b 	bl	8005b88 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a92:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a96:	f000 f837 	bl	8005b08 <FLASH_WaitForLastOperation>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005a9e:	4b08      	ldr	r3, [pc, #32]	; (8005ac0 <HAL_FLASH_Program+0xa4>)
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	4a07      	ldr	r2, [pc, #28]	; (8005ac0 <HAL_FLASH_Program+0xa4>)
 8005aa4:	f023 0301 	bic.w	r3, r3, #1
 8005aa8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005aaa:	4b04      	ldr	r3, [pc, #16]	; (8005abc <HAL_FLASH_Program+0xa0>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	2000ae0c 	.word	0x2000ae0c
 8005ac0:	40023c00 	.word	0x40023c00

08005ac4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005ace:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <HAL_FLASH_Unlock+0x38>)
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	da0b      	bge.n	8005aee <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005ad6:	4b09      	ldr	r3, [pc, #36]	; (8005afc <HAL_FLASH_Unlock+0x38>)
 8005ad8:	4a09      	ldr	r2, [pc, #36]	; (8005b00 <HAL_FLASH_Unlock+0x3c>)
 8005ada:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005adc:	4b07      	ldr	r3, [pc, #28]	; (8005afc <HAL_FLASH_Unlock+0x38>)
 8005ade:	4a09      	ldr	r2, [pc, #36]	; (8005b04 <HAL_FLASH_Unlock+0x40>)
 8005ae0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005ae2:	4b06      	ldr	r3, [pc, #24]	; (8005afc <HAL_FLASH_Unlock+0x38>)
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	da01      	bge.n	8005aee <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005aee:	79fb      	ldrb	r3, [r7, #7]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	40023c00 	.word	0x40023c00
 8005b00:	45670123 	.word	0x45670123
 8005b04:	cdef89ab 	.word	0xcdef89ab

08005b08 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b14:	4b1a      	ldr	r3, [pc, #104]	; (8005b80 <FLASH_WaitForLastOperation+0x78>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005b1a:	f7fe fdd1 	bl	80046c0 <HAL_GetTick>
 8005b1e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005b20:	e010      	b.n	8005b44 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b28:	d00c      	beq.n	8005b44 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <FLASH_WaitForLastOperation+0x38>
 8005b30:	f7fe fdc6 	bl	80046c0 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d201      	bcs.n	8005b44 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e019      	b.n	8005b78 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005b44:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <FLASH_WaitForLastOperation+0x7c>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e8      	bne.n	8005b22 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005b50:	4b0c      	ldr	r3, [pc, #48]	; (8005b84 <FLASH_WaitForLastOperation+0x7c>)
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005b5c:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <FLASH_WaitForLastOperation+0x7c>)
 8005b5e:	2201      	movs	r2, #1
 8005b60:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005b62:	4b08      	ldr	r3, [pc, #32]	; (8005b84 <FLASH_WaitForLastOperation+0x7c>)
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005b6e:	f000 f8a5 	bl	8005cbc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
  
}  
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	2000ae0c 	.word	0x2000ae0c
 8005b84:	40023c00 	.word	0x40023c00

08005b88 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b94:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <FLASH_Program_DoubleWord+0x60>)
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	4a13      	ldr	r2, [pc, #76]	; (8005be8 <FLASH_Program_DoubleWord+0x60>)
 8005b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005ba0:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <FLASH_Program_DoubleWord+0x60>)
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	4a10      	ldr	r2, [pc, #64]	; (8005be8 <FLASH_Program_DoubleWord+0x60>)
 8005ba6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005baa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005bac:	4b0e      	ldr	r3, [pc, #56]	; (8005be8 <FLASH_Program_DoubleWord+0x60>)
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	4a0d      	ldr	r2, [pc, #52]	; (8005be8 <FLASH_Program_DoubleWord+0x60>)
 8005bb2:	f043 0301 	orr.w	r3, r3, #1
 8005bb6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005bbe:	f3bf 8f6f 	isb	sy
}
 8005bc2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005bc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bc8:	f04f 0200 	mov.w	r2, #0
 8005bcc:	f04f 0300 	mov.w	r3, #0
 8005bd0:	000a      	movs	r2, r1
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	68f9      	ldr	r1, [r7, #12]
 8005bd6:	3104      	adds	r1, #4
 8005bd8:	4613      	mov	r3, r2
 8005bda:	600b      	str	r3, [r1, #0]
}
 8005bdc:	bf00      	nop
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	40023c00 	.word	0x40023c00

08005bec <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <FLASH_Program_Word+0x40>)
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <FLASH_Program_Word+0x40>)
 8005bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005c02:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <FLASH_Program_Word+0x40>)
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	4a09      	ldr	r2, [pc, #36]	; (8005c2c <FLASH_Program_Word+0x40>)
 8005c08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c0c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005c0e:	4b07      	ldr	r3, [pc, #28]	; (8005c2c <FLASH_Program_Word+0x40>)
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	4a06      	ldr	r2, [pc, #24]	; (8005c2c <FLASH_Program_Word+0x40>)
 8005c14:	f043 0301 	orr.w	r3, r3, #1
 8005c18:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	601a      	str	r2, [r3, #0]
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40023c00 	.word	0x40023c00

08005c30 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c3c:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <FLASH_Program_HalfWord+0x44>)
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	4a0c      	ldr	r2, [pc, #48]	; (8005c74 <FLASH_Program_HalfWord+0x44>)
 8005c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005c48:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <FLASH_Program_HalfWord+0x44>)
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	4a09      	ldr	r2, [pc, #36]	; (8005c74 <FLASH_Program_HalfWord+0x44>)
 8005c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005c54:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <FLASH_Program_HalfWord+0x44>)
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	4a06      	ldr	r2, [pc, #24]	; (8005c74 <FLASH_Program_HalfWord+0x44>)
 8005c5a:	f043 0301 	orr.w	r3, r3, #1
 8005c5e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	887a      	ldrh	r2, [r7, #2]
 8005c64:	801a      	strh	r2, [r3, #0]
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	40023c00 	.word	0x40023c00

08005c78 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c84:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <FLASH_Program_Byte+0x40>)
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	4a0b      	ldr	r2, [pc, #44]	; (8005cb8 <FLASH_Program_Byte+0x40>)
 8005c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005c90:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <FLASH_Program_Byte+0x40>)
 8005c92:	4a09      	ldr	r2, [pc, #36]	; (8005cb8 <FLASH_Program_Byte+0x40>)
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005c98:	4b07      	ldr	r3, [pc, #28]	; (8005cb8 <FLASH_Program_Byte+0x40>)
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	4a06      	ldr	r2, [pc, #24]	; (8005cb8 <FLASH_Program_Byte+0x40>)
 8005c9e:	f043 0301 	orr.w	r3, r3, #1
 8005ca2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	78fa      	ldrb	r2, [r7, #3]
 8005ca8:	701a      	strb	r2, [r3, #0]
}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	40023c00 	.word	0x40023c00

08005cbc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005cc0:	4b2f      	ldr	r3, [pc, #188]	; (8005d80 <FLASH_SetErrorCode+0xc4>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005ccc:	4b2d      	ldr	r3, [pc, #180]	; (8005d84 <FLASH_SetErrorCode+0xc8>)
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	f043 0310 	orr.w	r3, r3, #16
 8005cd4:	4a2b      	ldr	r2, [pc, #172]	; (8005d84 <FLASH_SetErrorCode+0xc8>)
 8005cd6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005cd8:	4b29      	ldr	r3, [pc, #164]	; (8005d80 <FLASH_SetErrorCode+0xc4>)
 8005cda:	2210      	movs	r2, #16
 8005cdc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005cde:	4b28      	ldr	r3, [pc, #160]	; (8005d80 <FLASH_SetErrorCode+0xc4>)
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d008      	beq.n	8005cfc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005cea:	4b26      	ldr	r3, [pc, #152]	; (8005d84 <FLASH_SetErrorCode+0xc8>)
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f043 0308 	orr.w	r3, r3, #8
 8005cf2:	4a24      	ldr	r2, [pc, #144]	; (8005d84 <FLASH_SetErrorCode+0xc8>)
 8005cf4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005cf6:	4b22      	ldr	r3, [pc, #136]	; (8005d80 <FLASH_SetErrorCode+0xc4>)
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005cfc:	4b20      	ldr	r3, [pc, #128]	; (8005d80 <FLASH_SetErrorCode+0xc4>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005d08:	4b1e      	ldr	r3, [pc, #120]	; (8005d84 <FLASH_SetErrorCode+0xc8>)
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	f043 0304 	orr.w	r3, r3, #4
 8005d10:	4a1c      	ldr	r2, [pc, #112]	; (8005d84 <FLASH_SetErrorCode+0xc8>)
 8005d12:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005d14:	4b1a      	ldr	r3, [pc, #104]	; (8005d80 <FLASH_SetErrorCode+0xc4>)
 8005d16:	2240      	movs	r2, #64	; 0x40
 8005d18:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005d1a:	4b19      	ldr	r3, [pc, #100]	; (8005d80 <FLASH_SetErrorCode+0xc4>)
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005d26:	4b17      	ldr	r3, [pc, #92]	; (8005d84 <FLASH_SetErrorCode+0xc8>)
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f043 0302 	orr.w	r3, r3, #2
 8005d2e:	4a15      	ldr	r2, [pc, #84]	; (8005d84 <FLASH_SetErrorCode+0xc8>)
 8005d30:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005d32:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <FLASH_SetErrorCode+0xc4>)
 8005d34:	2280      	movs	r2, #128	; 0x80
 8005d36:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005d38:	4b11      	ldr	r3, [pc, #68]	; (8005d80 <FLASH_SetErrorCode+0xc4>)
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d009      	beq.n	8005d58 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005d44:	4b0f      	ldr	r3, [pc, #60]	; (8005d84 <FLASH_SetErrorCode+0xc8>)
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	f043 0301 	orr.w	r3, r3, #1
 8005d4c:	4a0d      	ldr	r2, [pc, #52]	; (8005d84 <FLASH_SetErrorCode+0xc8>)
 8005d4e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005d50:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <FLASH_SetErrorCode+0xc4>)
 8005d52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d56:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005d58:	4b09      	ldr	r3, [pc, #36]	; (8005d80 <FLASH_SetErrorCode+0xc4>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d008      	beq.n	8005d76 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005d64:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <FLASH_SetErrorCode+0xc8>)
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f043 0320 	orr.w	r3, r3, #32
 8005d6c:	4a05      	ldr	r2, [pc, #20]	; (8005d84 <FLASH_SetErrorCode+0xc8>)
 8005d6e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005d70:	4b03      	ldr	r3, [pc, #12]	; (8005d80 <FLASH_SetErrorCode+0xc4>)
 8005d72:	2202      	movs	r2, #2
 8005d74:	60da      	str	r2, [r3, #12]
  }
}
 8005d76:	bf00      	nop
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	40023c00 	.word	0x40023c00
 8005d84:	2000ae0c 	.word	0x2000ae0c

08005d88 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005d9a:	4b31      	ldr	r3, [pc, #196]	; (8005e60 <HAL_FLASHEx_Erase+0xd8>)
 8005d9c:	7e1b      	ldrb	r3, [r3, #24]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_FLASHEx_Erase+0x1e>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e058      	b.n	8005e58 <HAL_FLASHEx_Erase+0xd0>
 8005da6:	4b2e      	ldr	r3, [pc, #184]	; (8005e60 <HAL_FLASHEx_Erase+0xd8>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005dac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005db0:	f7ff feaa 	bl	8005b08 <FLASH_WaitForLastOperation>
 8005db4:	4603      	mov	r3, r0
 8005db6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d148      	bne.n	8005e50 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dc4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d115      	bne.n	8005dfa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	f000 f844 	bl	8005e68 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005de0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005de4:	f7ff fe90 	bl	8005b08 <FLASH_WaitForLastOperation>
 8005de8:	4603      	mov	r3, r0
 8005dea:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005dec:	4b1d      	ldr	r3, [pc, #116]	; (8005e64 <HAL_FLASHEx_Erase+0xdc>)
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	4a1c      	ldr	r2, [pc, #112]	; (8005e64 <HAL_FLASHEx_Erase+0xdc>)
 8005df2:	f023 0304 	bic.w	r3, r3, #4
 8005df6:	6113      	str	r3, [r2, #16]
 8005df8:	e028      	b.n	8005e4c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	60bb      	str	r3, [r7, #8]
 8005e00:	e01c      	b.n	8005e3c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	4619      	mov	r1, r3
 8005e0a:	68b8      	ldr	r0, [r7, #8]
 8005e0c:	f000 f850 	bl	8005eb0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e14:	f7ff fe78 	bl	8005b08 <FLASH_WaitForLastOperation>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005e1c:	4b11      	ldr	r3, [pc, #68]	; (8005e64 <HAL_FLASHEx_Erase+0xdc>)
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	4a10      	ldr	r2, [pc, #64]	; (8005e64 <HAL_FLASHEx_Erase+0xdc>)
 8005e22:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005e26:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	601a      	str	r2, [r3, #0]
          break;
 8005e34:	e00a      	b.n	8005e4c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	60bb      	str	r3, [r7, #8]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	4413      	add	r3, r2
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d3da      	bcc.n	8005e02 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8005e4c:	f000 f878 	bl	8005f40 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005e50:	4b03      	ldr	r3, [pc, #12]	; (8005e60 <HAL_FLASHEx_Erase+0xd8>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	761a      	strb	r2, [r3, #24]

  return status;
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	2000ae0c 	.word	0x2000ae0c
 8005e64:	40023c00 	.word	0x40023c00

08005e68 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	6039      	str	r1, [r7, #0]
 8005e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005e74:	4b0d      	ldr	r3, [pc, #52]	; (8005eac <FLASH_MassErase+0x44>)
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	4a0c      	ldr	r2, [pc, #48]	; (8005eac <FLASH_MassErase+0x44>)
 8005e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005e80:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <FLASH_MassErase+0x44>)
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	4a09      	ldr	r2, [pc, #36]	; (8005eac <FLASH_MassErase+0x44>)
 8005e86:	f043 0304 	orr.w	r3, r3, #4
 8005e8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8005e8c:	4b07      	ldr	r3, [pc, #28]	; (8005eac <FLASH_MassErase+0x44>)
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	79fb      	ldrb	r3, [r7, #7]
 8005e92:	021b      	lsls	r3, r3, #8
 8005e94:	4313      	orrs	r3, r2
 8005e96:	4a05      	ldr	r2, [pc, #20]	; (8005eac <FLASH_MassErase+0x44>)
 8005e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e9c:	6113      	str	r3, [r2, #16]
}
 8005e9e:	bf00      	nop
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40023c00 	.word	0x40023c00

08005eb0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d102      	bne.n	8005ecc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e010      	b.n	8005eee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d103      	bne.n	8005eda <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	e009      	b.n	8005eee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005eda:	78fb      	ldrb	r3, [r7, #3]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d103      	bne.n	8005ee8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	e002      	b.n	8005eee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005ee8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005eec:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005eee:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <FLASH_Erase_Sector+0x8c>)
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	4a12      	ldr	r2, [pc, #72]	; (8005f3c <FLASH_Erase_Sector+0x8c>)
 8005ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005efa:	4b10      	ldr	r3, [pc, #64]	; (8005f3c <FLASH_Erase_Sector+0x8c>)
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	490f      	ldr	r1, [pc, #60]	; (8005f3c <FLASH_Erase_Sector+0x8c>)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005f06:	4b0d      	ldr	r3, [pc, #52]	; (8005f3c <FLASH_Erase_Sector+0x8c>)
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	4a0c      	ldr	r2, [pc, #48]	; (8005f3c <FLASH_Erase_Sector+0x8c>)
 8005f0c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005f10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005f12:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <FLASH_Erase_Sector+0x8c>)
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	4a07      	ldr	r2, [pc, #28]	; (8005f3c <FLASH_Erase_Sector+0x8c>)
 8005f1e:	f043 0302 	orr.w	r3, r3, #2
 8005f22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005f24:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <FLASH_Erase_Sector+0x8c>)
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	4a04      	ldr	r2, [pc, #16]	; (8005f3c <FLASH_Erase_Sector+0x8c>)
 8005f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f2e:	6113      	str	r3, [r2, #16]
}
 8005f30:	bf00      	nop
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	40023c00 	.word	0x40023c00

08005f40 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8005f44:	4b20      	ldr	r3, [pc, #128]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d017      	beq.n	8005f80 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005f50:	4b1d      	ldr	r3, [pc, #116]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a1c      	ldr	r2, [pc, #112]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005f56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f5a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005f5c:	4b1a      	ldr	r3, [pc, #104]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a19      	ldr	r2, [pc, #100]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005f62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	4b17      	ldr	r3, [pc, #92]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a16      	ldr	r2, [pc, #88]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f72:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f74:	4b14      	ldr	r3, [pc, #80]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a13      	ldr	r2, [pc, #76]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f7e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005f80:	4b11      	ldr	r3, [pc, #68]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d017      	beq.n	8005fbc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005f8c:	4b0e      	ldr	r3, [pc, #56]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a0d      	ldr	r2, [pc, #52]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005f92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f96:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005f98:	4b0b      	ldr	r3, [pc, #44]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a0a      	ldr	r2, [pc, #40]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005f9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	4b08      	ldr	r3, [pc, #32]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a07      	ldr	r2, [pc, #28]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005fb0:	4b05      	ldr	r3, [pc, #20]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a04      	ldr	r2, [pc, #16]	; (8005fc8 <FLASH_FlushCaches+0x88>)
 8005fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fba:	6013      	str	r3, [r2, #0]
  }
}
 8005fbc:	bf00      	nop
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	40023c00 	.word	0x40023c00

08005fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b089      	sub	sp, #36	; 0x24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61fb      	str	r3, [r7, #28]
 8005fe6:	e159      	b.n	800629c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005fe8:	2201      	movs	r2, #1
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	429a      	cmp	r2, r3
 8006002:	f040 8148 	bne.w	8006296 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	2b01      	cmp	r3, #1
 8006010:	d005      	beq.n	800601e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800601a:	2b02      	cmp	r3, #2
 800601c:	d130      	bne.n	8006080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	2203      	movs	r2, #3
 800602a:	fa02 f303 	lsl.w	r3, r2, r3
 800602e:	43db      	mvns	r3, r3
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	4013      	ands	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	fa02 f303 	lsl.w	r3, r2, r3
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	4313      	orrs	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006054:	2201      	movs	r2, #1
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	fa02 f303 	lsl.w	r3, r2, r3
 800605c:	43db      	mvns	r3, r3
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	4013      	ands	r3, r2
 8006062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	091b      	lsrs	r3, r3, #4
 800606a:	f003 0201 	and.w	r2, r3, #1
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	fa02 f303 	lsl.w	r3, r2, r3
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	4313      	orrs	r3, r2
 8006078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f003 0303 	and.w	r3, r3, #3
 8006088:	2b03      	cmp	r3, #3
 800608a:	d017      	beq.n	80060bc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	2203      	movs	r2, #3
 8006098:	fa02 f303 	lsl.w	r3, r2, r3
 800609c:	43db      	mvns	r3, r3
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	4013      	ands	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f003 0303 	and.w	r3, r3, #3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d123      	bne.n	8006110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	08da      	lsrs	r2, r3, #3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3208      	adds	r2, #8
 80060d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	220f      	movs	r2, #15
 80060e0:	fa02 f303 	lsl.w	r3, r2, r3
 80060e4:	43db      	mvns	r3, r3
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	4013      	ands	r3, r2
 80060ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4313      	orrs	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	08da      	lsrs	r2, r3, #3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	3208      	adds	r2, #8
 800610a:	69b9      	ldr	r1, [r7, #24]
 800610c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	2203      	movs	r2, #3
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	43db      	mvns	r3, r3
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	4013      	ands	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f003 0203 	and.w	r2, r3, #3
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	4313      	orrs	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 80a2 	beq.w	8006296 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]
 8006156:	4b57      	ldr	r3, [pc, #348]	; (80062b4 <HAL_GPIO_Init+0x2e8>)
 8006158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615a:	4a56      	ldr	r2, [pc, #344]	; (80062b4 <HAL_GPIO_Init+0x2e8>)
 800615c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006160:	6453      	str	r3, [r2, #68]	; 0x44
 8006162:	4b54      	ldr	r3, [pc, #336]	; (80062b4 <HAL_GPIO_Init+0x2e8>)
 8006164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800616e:	4a52      	ldr	r2, [pc, #328]	; (80062b8 <HAL_GPIO_Init+0x2ec>)
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	089b      	lsrs	r3, r3, #2
 8006174:	3302      	adds	r3, #2
 8006176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800617a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	220f      	movs	r2, #15
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	43db      	mvns	r3, r3
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	4013      	ands	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a49      	ldr	r2, [pc, #292]	; (80062bc <HAL_GPIO_Init+0x2f0>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d019      	beq.n	80061ce <HAL_GPIO_Init+0x202>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a48      	ldr	r2, [pc, #288]	; (80062c0 <HAL_GPIO_Init+0x2f4>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d013      	beq.n	80061ca <HAL_GPIO_Init+0x1fe>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a47      	ldr	r2, [pc, #284]	; (80062c4 <HAL_GPIO_Init+0x2f8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00d      	beq.n	80061c6 <HAL_GPIO_Init+0x1fa>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a46      	ldr	r2, [pc, #280]	; (80062c8 <HAL_GPIO_Init+0x2fc>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d007      	beq.n	80061c2 <HAL_GPIO_Init+0x1f6>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a45      	ldr	r2, [pc, #276]	; (80062cc <HAL_GPIO_Init+0x300>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d101      	bne.n	80061be <HAL_GPIO_Init+0x1f2>
 80061ba:	2304      	movs	r3, #4
 80061bc:	e008      	b.n	80061d0 <HAL_GPIO_Init+0x204>
 80061be:	2307      	movs	r3, #7
 80061c0:	e006      	b.n	80061d0 <HAL_GPIO_Init+0x204>
 80061c2:	2303      	movs	r3, #3
 80061c4:	e004      	b.n	80061d0 <HAL_GPIO_Init+0x204>
 80061c6:	2302      	movs	r3, #2
 80061c8:	e002      	b.n	80061d0 <HAL_GPIO_Init+0x204>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <HAL_GPIO_Init+0x204>
 80061ce:	2300      	movs	r3, #0
 80061d0:	69fa      	ldr	r2, [r7, #28]
 80061d2:	f002 0203 	and.w	r2, r2, #3
 80061d6:	0092      	lsls	r2, r2, #2
 80061d8:	4093      	lsls	r3, r2
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	4313      	orrs	r3, r2
 80061de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061e0:	4935      	ldr	r1, [pc, #212]	; (80062b8 <HAL_GPIO_Init+0x2ec>)
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	089b      	lsrs	r3, r3, #2
 80061e6:	3302      	adds	r3, #2
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061ee:	4b38      	ldr	r3, [pc, #224]	; (80062d0 <HAL_GPIO_Init+0x304>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	43db      	mvns	r3, r3
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	4013      	ands	r3, r2
 80061fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	4313      	orrs	r3, r2
 8006210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006212:	4a2f      	ldr	r2, [pc, #188]	; (80062d0 <HAL_GPIO_Init+0x304>)
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006218:	4b2d      	ldr	r3, [pc, #180]	; (80062d0 <HAL_GPIO_Init+0x304>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	43db      	mvns	r3, r3
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	4013      	ands	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800623c:	4a24      	ldr	r2, [pc, #144]	; (80062d0 <HAL_GPIO_Init+0x304>)
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006242:	4b23      	ldr	r3, [pc, #140]	; (80062d0 <HAL_GPIO_Init+0x304>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	43db      	mvns	r3, r3
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	4013      	ands	r3, r2
 8006250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	4313      	orrs	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006266:	4a1a      	ldr	r2, [pc, #104]	; (80062d0 <HAL_GPIO_Init+0x304>)
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800626c:	4b18      	ldr	r3, [pc, #96]	; (80062d0 <HAL_GPIO_Init+0x304>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	43db      	mvns	r3, r3
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	4013      	ands	r3, r2
 800627a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006290:	4a0f      	ldr	r2, [pc, #60]	; (80062d0 <HAL_GPIO_Init+0x304>)
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	3301      	adds	r3, #1
 800629a:	61fb      	str	r3, [r7, #28]
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	2b0f      	cmp	r3, #15
 80062a0:	f67f aea2 	bls.w	8005fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop
 80062a8:	3724      	adds	r7, #36	; 0x24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	40023800 	.word	0x40023800
 80062b8:	40013800 	.word	0x40013800
 80062bc:	40020000 	.word	0x40020000
 80062c0:	40020400 	.word	0x40020400
 80062c4:	40020800 	.word	0x40020800
 80062c8:	40020c00 	.word	0x40020c00
 80062cc:	40021000 	.word	0x40021000
 80062d0:	40013c00 	.word	0x40013c00

080062d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691a      	ldr	r2, [r3, #16]
 80062e4:	887b      	ldrh	r3, [r7, #2]
 80062e6:	4013      	ands	r3, r2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
 80062f0:	e001      	b.n	80062f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062f2:	2300      	movs	r3, #0
 80062f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	807b      	strh	r3, [r7, #2]
 8006310:	4613      	mov	r3, r2
 8006312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006314:	787b      	ldrb	r3, [r7, #1]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800631a:	887a      	ldrh	r2, [r7, #2]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006320:	e003      	b.n	800632a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006322:	887b      	ldrh	r3, [r7, #2]
 8006324:	041a      	lsls	r2, r3, #16
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	619a      	str	r2, [r3, #24]
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	460b      	mov	r3, r1
 8006340:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006348:	887a      	ldrh	r2, [r7, #2]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4013      	ands	r3, r2
 800634e:	041a      	lsls	r2, r3, #16
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	43d9      	mvns	r1, r3
 8006354:	887b      	ldrh	r3, [r7, #2]
 8006356:	400b      	ands	r3, r1
 8006358:	431a      	orrs	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	619a      	str	r2, [r3, #24]
}
 800635e:	bf00      	nop
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
	...

0800636c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e12b      	b.n	80065d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7fc ff98 	bl	80032c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2224      	movs	r2, #36	; 0x24
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0201 	bic.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80063d0:	f003 f92a 	bl	8009628 <HAL_RCC_GetPCLK1Freq>
 80063d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	4a81      	ldr	r2, [pc, #516]	; (80065e0 <HAL_I2C_Init+0x274>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d807      	bhi.n	80063f0 <HAL_I2C_Init+0x84>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4a80      	ldr	r2, [pc, #512]	; (80065e4 <HAL_I2C_Init+0x278>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	bf94      	ite	ls
 80063e8:	2301      	movls	r3, #1
 80063ea:	2300      	movhi	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	e006      	b.n	80063fe <HAL_I2C_Init+0x92>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4a7d      	ldr	r2, [pc, #500]	; (80065e8 <HAL_I2C_Init+0x27c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	bf94      	ite	ls
 80063f8:	2301      	movls	r3, #1
 80063fa:	2300      	movhi	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e0e7      	b.n	80065d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4a78      	ldr	r2, [pc, #480]	; (80065ec <HAL_I2C_Init+0x280>)
 800640a:	fba2 2303 	umull	r2, r3, r2, r3
 800640e:	0c9b      	lsrs	r3, r3, #18
 8006410:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	430a      	orrs	r2, r1
 8006424:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	4a6a      	ldr	r2, [pc, #424]	; (80065e0 <HAL_I2C_Init+0x274>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d802      	bhi.n	8006440 <HAL_I2C_Init+0xd4>
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	3301      	adds	r3, #1
 800643e:	e009      	b.n	8006454 <HAL_I2C_Init+0xe8>
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006446:	fb02 f303 	mul.w	r3, r2, r3
 800644a:	4a69      	ldr	r2, [pc, #420]	; (80065f0 <HAL_I2C_Init+0x284>)
 800644c:	fba2 2303 	umull	r2, r3, r2, r3
 8006450:	099b      	lsrs	r3, r3, #6
 8006452:	3301      	adds	r3, #1
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6812      	ldr	r2, [r2, #0]
 8006458:	430b      	orrs	r3, r1
 800645a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006466:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	495c      	ldr	r1, [pc, #368]	; (80065e0 <HAL_I2C_Init+0x274>)
 8006470:	428b      	cmp	r3, r1
 8006472:	d819      	bhi.n	80064a8 <HAL_I2C_Init+0x13c>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	1e59      	subs	r1, r3, #1
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006482:	1c59      	adds	r1, r3, #1
 8006484:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006488:	400b      	ands	r3, r1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <HAL_I2C_Init+0x138>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	1e59      	subs	r1, r3, #1
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	fbb1 f3f3 	udiv	r3, r1, r3
 800649c:	3301      	adds	r3, #1
 800649e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064a2:	e051      	b.n	8006548 <HAL_I2C_Init+0x1dc>
 80064a4:	2304      	movs	r3, #4
 80064a6:	e04f      	b.n	8006548 <HAL_I2C_Init+0x1dc>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d111      	bne.n	80064d4 <HAL_I2C_Init+0x168>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	1e58      	subs	r0, r3, #1
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6859      	ldr	r1, [r3, #4]
 80064b8:	460b      	mov	r3, r1
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	440b      	add	r3, r1
 80064be:	fbb0 f3f3 	udiv	r3, r0, r3
 80064c2:	3301      	adds	r3, #1
 80064c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	bf0c      	ite	eq
 80064cc:	2301      	moveq	r3, #1
 80064ce:	2300      	movne	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	e012      	b.n	80064fa <HAL_I2C_Init+0x18e>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	1e58      	subs	r0, r3, #1
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6859      	ldr	r1, [r3, #4]
 80064dc:	460b      	mov	r3, r1
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	440b      	add	r3, r1
 80064e2:	0099      	lsls	r1, r3, #2
 80064e4:	440b      	add	r3, r1
 80064e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80064ea:	3301      	adds	r3, #1
 80064ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	bf0c      	ite	eq
 80064f4:	2301      	moveq	r3, #1
 80064f6:	2300      	movne	r3, #0
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <HAL_I2C_Init+0x196>
 80064fe:	2301      	movs	r3, #1
 8006500:	e022      	b.n	8006548 <HAL_I2C_Init+0x1dc>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10e      	bne.n	8006528 <HAL_I2C_Init+0x1bc>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	1e58      	subs	r0, r3, #1
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6859      	ldr	r1, [r3, #4]
 8006512:	460b      	mov	r3, r1
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	440b      	add	r3, r1
 8006518:	fbb0 f3f3 	udiv	r3, r0, r3
 800651c:	3301      	adds	r3, #1
 800651e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006526:	e00f      	b.n	8006548 <HAL_I2C_Init+0x1dc>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	1e58      	subs	r0, r3, #1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6859      	ldr	r1, [r3, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	0099      	lsls	r1, r3, #2
 8006538:	440b      	add	r3, r1
 800653a:	fbb0 f3f3 	udiv	r3, r0, r3
 800653e:	3301      	adds	r3, #1
 8006540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006548:	6879      	ldr	r1, [r7, #4]
 800654a:	6809      	ldr	r1, [r1, #0]
 800654c:	4313      	orrs	r3, r2
 800654e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69da      	ldr	r2, [r3, #28]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006576:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6911      	ldr	r1, [r2, #16]
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	68d2      	ldr	r2, [r2, #12]
 8006582:	4311      	orrs	r1, r2
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	430b      	orrs	r3, r1
 800658a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695a      	ldr	r2, [r3, #20]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	431a      	orrs	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	000186a0 	.word	0x000186a0
 80065e4:	001e847f 	.word	0x001e847f
 80065e8:	003d08ff 	.word	0x003d08ff
 80065ec:	431bde83 	.word	0x431bde83
 80065f0:	10624dd3 	.word	0x10624dd3

080065f4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08c      	sub	sp, #48	; 0x30
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	4608      	mov	r0, r1
 80065fe:	4611      	mov	r1, r2
 8006600:	461a      	mov	r2, r3
 8006602:	4603      	mov	r3, r0
 8006604:	817b      	strh	r3, [r7, #10]
 8006606:	460b      	mov	r3, r1
 8006608:	813b      	strh	r3, [r7, #8]
 800660a:	4613      	mov	r3, r2
 800660c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800660e:	f7fe f857 	bl	80046c0 <HAL_GetTick>
 8006612:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b20      	cmp	r3, #32
 8006622:	f040 8168 	bne.w	80068f6 <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006626:	4b98      	ldr	r3, [pc, #608]	; (8006888 <HAL_I2C_Mem_Read_DMA+0x294>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	08db      	lsrs	r3, r3, #3
 800662c:	4a97      	ldr	r2, [pc, #604]	; (800688c <HAL_I2C_Mem_Read_DMA+0x298>)
 800662e:	fba2 2303 	umull	r2, r3, r2, r3
 8006632:	0a1a      	lsrs	r2, r3, #8
 8006634:	4613      	mov	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	009a      	lsls	r2, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	3b01      	subs	r3, #1
 8006644:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d116      	bne.n	800667a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2220      	movs	r2, #32
 8006656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	f043 0220 	orr.w	r2, r3, #32
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e13e      	b.n	80068f8 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b02      	cmp	r3, #2
 8006686:	d0db      	beq.n	8006640 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800668e:	2b01      	cmp	r3, #1
 8006690:	d101      	bne.n	8006696 <HAL_I2C_Mem_Read_DMA+0xa2>
 8006692:	2302      	movs	r3, #2
 8006694:	e130      	b.n	80068f8 <HAL_I2C_Mem_Read_DMA+0x304>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d007      	beq.n	80066bc <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0201 	orr.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2222      	movs	r2, #34	; 0x22
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2240      	movs	r2, #64	; 0x40
 80066d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80066ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4a65      	ldr	r2, [pc, #404]	; (8006890 <HAL_I2C_Mem_Read_DMA+0x29c>)
 80066fc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 80ca 	beq.w	800689c <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670c:	2b00      	cmp	r3, #0
 800670e:	d02c      	beq.n	800676a <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006714:	4a5f      	ldr	r2, [pc, #380]	; (8006894 <HAL_I2C_Mem_Read_DMA+0x2a0>)
 8006716:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	4a5e      	ldr	r2, [pc, #376]	; (8006898 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 800671e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	2200      	movs	r2, #0
 8006726:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	2200      	movs	r2, #0
 800672e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006734:	2200      	movs	r2, #0
 8006736:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	2200      	movs	r2, #0
 800673e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3310      	adds	r3, #16
 800674a:	4619      	mov	r1, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	461a      	mov	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006756:	f7fe fdf3 	bl	8005340 <HAL_DMA_Start_IT>
 800675a:	4603      	mov	r3, r0
 800675c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006760:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006764:	2b00      	cmp	r3, #0
 8006766:	d17b      	bne.n	8006860 <HAL_I2C_Mem_Read_DMA+0x26c>
 8006768:	e013      	b.n	8006792 <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2220      	movs	r2, #32
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e0b2      	b.n	80068f8 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006792:	88f8      	ldrh	r0, [r7, #6]
 8006794:	893a      	ldrh	r2, [r7, #8]
 8006796:	8979      	ldrh	r1, [r7, #10]
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	2323      	movs	r3, #35	; 0x23
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	4603      	mov	r3, r0
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f001 feea 	bl	800857c <I2C_RequestMemoryRead>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d023      	beq.n	80067f6 <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fe fe8c 	bl	80054d0 <HAL_DMA_Abort_IT>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c2:	2200      	movs	r2, #0
 80067c4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d4:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0201 	bic.w	r2, r2, #1
 80067f0:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e080      	b.n	80068f8 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d108      	bne.n	8006810 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	e007      	b.n	8006820 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800681e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006820:	2300      	movs	r3, #0
 8006822:	61bb      	str	r3, [r7, #24]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	61bb      	str	r3, [r7, #24]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	61bb      	str	r3, [r7, #24]
 8006834:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800684c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800685c:	605a      	str	r2, [r3, #4]
 800685e:	e048      	b.n	80068f2 <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	f043 0210 	orr.w	r2, r3, #16
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e037      	b.n	80068f8 <HAL_I2C_Mem_Read_DMA+0x304>
 8006888:	20000008 	.word	0x20000008
 800688c:	14f8b589 	.word	0x14f8b589
 8006890:	ffff0000 	.word	0xffff0000
 8006894:	0800874d 	.word	0x0800874d
 8006898:	080088f7 	.word	0x080088f7
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800689c:	88f8      	ldrh	r0, [r7, #6]
 800689e:	893a      	ldrh	r2, [r7, #8]
 80068a0:	8979      	ldrh	r1, [r7, #10]
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	2323      	movs	r3, #35	; 0x23
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	4603      	mov	r3, r0
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f001 fe65 	bl	800857c <I2C_RequestMemoryRead>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e01d      	b.n	80068f8 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068bc:	2300      	movs	r3, #0
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068e0:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2220      	movs	r2, #32
 80068e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	e000      	b.n	80068f8 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 80068f6:	2302      	movs	r3, #2
  }
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3728      	adds	r7, #40	; 0x28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	4613      	mov	r3, r2
 800690e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006916:	b2db      	uxtb	r3, r3
 8006918:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800691c:	2b28      	cmp	r3, #40	; 0x28
 800691e:	f040 811e 	bne.w	8006b5e <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 8006928:	88fb      	ldrh	r3, [r7, #6]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e116      	b.n	8006b60 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006938:	2b01      	cmp	r3, #1
 800693a:	d101      	bne.n	8006940 <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 800693c:	2302      	movs	r3, #2
 800693e:	e10f      	b.n	8006b60 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006956:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b2a      	cmp	r3, #42	; 0x2a
 8006962:	d127      	bne.n	80069b4 <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800696e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006972:	d14c      	bne.n	8006a0e <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	2b00      	cmp	r3, #0
 800697a:	d048      	beq.n	8006a0e <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800698a:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006990:	4a75      	ldr	r2, [pc, #468]	; (8006b68 <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
 8006992:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006998:	4618      	mov	r0, r3
 800699a:	f7fe fd99 	bl	80054d0 <HAL_DMA_Abort_IT>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d034      	beq.n	8006a0e <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069ae:	4610      	mov	r0, r2
 80069b0:	4798      	blx	r3
 80069b2:	e02c      	b.n	8006a0e <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b29      	cmp	r3, #41	; 0x29
 80069be:	d126      	bne.n	8006a0e <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ce:	d11e      	bne.n	8006a0e <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069de:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d012      	beq.n	8006a0e <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ec:	4a5e      	ldr	r2, [pc, #376]	; (8006b68 <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
 80069ee:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe fd6b 	bl	80054d0 <HAL_DMA_Abort_IT>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d006      	beq.n	8006a0e <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d007      	beq.n	8006a2c <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2229      	movs	r2, #41	; 0x29
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	88fa      	ldrh	r2, [r7, #6]
 8006a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d022      	beq.n	8006abc <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7a:	4a3c      	ldr	r2, [pc, #240]	; (8006b6c <HAL_I2C_Slave_Seq_Transmit_DMA+0x26c>)
 8006a7c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a82:	4a3b      	ldr	r2, [pc, #236]	; (8006b70 <HAL_I2C_Slave_Seq_Transmit_DMA+0x270>)
 8006a84:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a92:	2200      	movs	r2, #0
 8006a94:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3310      	adds	r3, #16
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aac:	f7fe fc48 	bl	8005340 <HAL_DMA_Start_IT>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d13d      	bne.n	8006b36 <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 8006aba:	e013      	b.n	8006ae4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2228      	movs	r2, #40	; 0x28
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e03d      	b.n	8006b60 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006af2:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006af4:	2300      	movs	r3, #0
 8006af6:	613b      	str	r3, [r7, #16]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	613b      	str	r3, [r7, #16]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	613b      	str	r3, [r7, #16]
 8006b08:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006b20:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b30:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e014      	b.n	8006b60 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	f043 0210 	orr.w	r2, r3, #16
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e000      	b.n	8006b60 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 8006b5e:	2302      	movs	r3, #2
  }
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	08008971 	.word	0x08008971
 8006b6c:	0800874d 	.word	0x0800874d
 8006b70:	080088f7 	.word	0x080088f7

08006b74 <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	4613      	mov	r3, r2
 8006b82:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b90:	2b28      	cmp	r3, #40	; 0x28
 8006b92:	f040 811e 	bne.w	8006dd2 <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 8006b9c:	88fb      	ldrh	r3, [r7, #6]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e116      	b.n	8006dd4 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d101      	bne.n	8006bb4 <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	e10f      	b.n	8006dd4 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006bca:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd6:	d127      	bne.n	8006c28 <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be6:	d14c      	bne.n	8006c82 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d048      	beq.n	8006c82 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bfe:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	4a75      	ldr	r2, [pc, #468]	; (8006ddc <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 8006c06:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fe fc5f 	bl	80054d0 <HAL_DMA_Abort_IT>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d034      	beq.n	8006c82 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c22:	4610      	mov	r0, r2
 8006c24:	4798      	blx	r3
 8006c26:	e02c      	b.n	8006c82 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b29      	cmp	r3, #41	; 0x29
 8006c32:	d126      	bne.n	8006c82 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c42:	d11e      	bne.n	8006c82 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c52:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d012      	beq.n	8006c82 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c60:	4a5e      	ldr	r2, [pc, #376]	; (8006ddc <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 8006c62:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7fe fc31 	bl	80054d0 <HAL_DMA_Abort_IT>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d006      	beq.n	8006c82 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c7e:	4610      	mov	r0, r2
 8006c80:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d007      	beq.n	8006ca0 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0201 	orr.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	222a      	movs	r2, #42	; 0x2a
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	88fa      	ldrh	r2, [r7, #6]
 8006cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d022      	beq.n	8006d30 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	4a3c      	ldr	r2, [pc, #240]	; (8006de0 <HAL_I2C_Slave_Seq_Receive_DMA+0x26c>)
 8006cf0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	4a3b      	ldr	r2, [pc, #236]	; (8006de4 <HAL_I2C_Slave_Seq_Receive_DMA+0x270>)
 8006cf8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfe:	2200      	movs	r2, #0
 8006d00:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d06:	2200      	movs	r2, #0
 8006d08:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3310      	adds	r3, #16
 8006d14:	4619      	mov	r1, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d20:	f7fe fb0e 	bl	8005340 <HAL_DMA_Start_IT>
 8006d24:	4603      	mov	r3, r0
 8006d26:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d13d      	bne.n	8006daa <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 8006d2e:	e013      	b.n	8006d58 <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2228      	movs	r2, #40	; 0x28
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e03d      	b.n	8006dd4 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d66:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d68:	2300      	movs	r3, #0
 8006d6a:	613b      	str	r3, [r7, #16]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	613b      	str	r3, [r7, #16]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	613b      	str	r3, [r7, #16]
 8006d7c:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d94:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006da4:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	e014      	b.n	8006dd4 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f043 0210 	orr.w	r2, r3, #16
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e000      	b.n	8006dd4 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 8006dd2:	2302      	movs	r3, #2
  }
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	08008971 	.word	0x08008971
 8006de0:	0800874d 	.word	0x0800874d
 8006de4:	080088f7 	.word	0x080088f7

08006de8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	d124      	bne.n	8006e46 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2228      	movs	r2, #40	; 0x28
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d007      	beq.n	8006e22 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f042 0201 	orr.w	r2, r2, #1
 8006e20:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e30:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006e40:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	e000      	b.n	8006e48 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006e46:	2302      	movs	r3, #2
  }
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e74:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e7c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	2b10      	cmp	r3, #16
 8006e82:	d003      	beq.n	8006e8c <HAL_I2C_EV_IRQHandler+0x38>
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	2b40      	cmp	r3, #64	; 0x40
 8006e88:	f040 80bd 	bne.w	8007006 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10d      	bne.n	8006ec2 <HAL_I2C_EV_IRQHandler+0x6e>
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006eac:	d003      	beq.n	8006eb6 <HAL_I2C_EV_IRQHandler+0x62>
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006eb4:	d101      	bne.n	8006eba <HAL_I2C_EV_IRQHandler+0x66>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <HAL_I2C_EV_IRQHandler+0x68>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	f000 812e 	beq.w	800711e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00c      	beq.n	8006ee6 <HAL_I2C_EV_IRQHandler+0x92>
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	0a5b      	lsrs	r3, r3, #9
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d006      	beq.n	8006ee6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f001 ff6a 	bl	8008db2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fd36 	bl	8007950 <I2C_Master_SB>
 8006ee4:	e08e      	b.n	8007004 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	08db      	lsrs	r3, r3, #3
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d009      	beq.n	8006f06 <HAL_I2C_EV_IRQHandler+0xb2>
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	0a5b      	lsrs	r3, r3, #9
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fdac 	bl	8007a5c <I2C_Master_ADD10>
 8006f04:	e07e      	b.n	8007004 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	085b      	lsrs	r3, r3, #1
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d009      	beq.n	8006f26 <HAL_I2C_EV_IRQHandler+0xd2>
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	0a5b      	lsrs	r3, r3, #9
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fdc6 	bl	8007ab0 <I2C_Master_ADDR>
 8006f24:	e06e      	b.n	8007004 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	089b      	lsrs	r3, r3, #2
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d037      	beq.n	8006fa2 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f40:	f000 80ef 	beq.w	8007122 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	09db      	lsrs	r3, r3, #7
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00f      	beq.n	8006f70 <HAL_I2C_EV_IRQHandler+0x11c>
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	0a9b      	lsrs	r3, r3, #10
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d009      	beq.n	8006f70 <HAL_I2C_EV_IRQHandler+0x11c>
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	089b      	lsrs	r3, r3, #2
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d103      	bne.n	8006f70 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f9c3 	bl	80072f4 <I2C_MasterTransmit_TXE>
 8006f6e:	e049      	b.n	8007004 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	089b      	lsrs	r3, r3, #2
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 80d2 	beq.w	8007122 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	0a5b      	lsrs	r3, r3, #9
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 80cb 	beq.w	8007122 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
 8006f8e:	2b10      	cmp	r3, #16
 8006f90:	d103      	bne.n	8006f9a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa4a 	bl	800742c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f98:	e0c3      	b.n	8007122 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 faae 	bl	80074fc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fa0:	e0bf      	b.n	8007122 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fb0:	f000 80b7 	beq.w	8007122 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	099b      	lsrs	r3, r3, #6
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00f      	beq.n	8006fe0 <HAL_I2C_EV_IRQHandler+0x18c>
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	0a9b      	lsrs	r3, r3, #10
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d009      	beq.n	8006fe0 <HAL_I2C_EV_IRQHandler+0x18c>
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	089b      	lsrs	r3, r3, #2
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d103      	bne.n	8006fe0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fb1e 	bl	800761a <I2C_MasterReceive_RXNE>
 8006fde:	e011      	b.n	8007004 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	089b      	lsrs	r3, r3, #2
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 809a 	beq.w	8007122 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	0a5b      	lsrs	r3, r3, #9
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 8093 	beq.w	8007122 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fbbd 	bl	800777c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007002:	e08e      	b.n	8007122 <HAL_I2C_EV_IRQHandler+0x2ce>
 8007004:	e08d      	b.n	8007122 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	2b00      	cmp	r3, #0
 800700c:	d004      	beq.n	8007018 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	61fb      	str	r3, [r7, #28]
 8007016:	e007      	b.n	8007028 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	085b      	lsrs	r3, r3, #1
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	d012      	beq.n	800705a <HAL_I2C_EV_IRQHandler+0x206>
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	0a5b      	lsrs	r3, r3, #9
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00c      	beq.n	800705a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007050:	69b9      	ldr	r1, [r7, #24]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 ff7b 	bl	8007f4e <I2C_Slave_ADDR>
 8007058:	e066      	b.n	8007128 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	091b      	lsrs	r3, r3, #4
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d009      	beq.n	800707a <HAL_I2C_EV_IRQHandler+0x226>
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	0a5b      	lsrs	r3, r3, #9
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 ffb0 	bl	8007fd8 <I2C_Slave_STOPF>
 8007078:	e056      	b.n	8007128 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	2b21      	cmp	r3, #33	; 0x21
 800707e:	d002      	beq.n	8007086 <HAL_I2C_EV_IRQHandler+0x232>
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	2b29      	cmp	r3, #41	; 0x29
 8007084:	d125      	bne.n	80070d2 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	09db      	lsrs	r3, r3, #7
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00f      	beq.n	80070b2 <HAL_I2C_EV_IRQHandler+0x25e>
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	0a9b      	lsrs	r3, r3, #10
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d009      	beq.n	80070b2 <HAL_I2C_EV_IRQHandler+0x25e>
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	089b      	lsrs	r3, r3, #2
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d103      	bne.n	80070b2 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fe91 	bl	8007dd2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070b0:	e039      	b.n	8007126 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	089b      	lsrs	r3, r3, #2
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d033      	beq.n	8007126 <HAL_I2C_EV_IRQHandler+0x2d2>
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	0a5b      	lsrs	r3, r3, #9
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d02d      	beq.n	8007126 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 febe 	bl	8007e4c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070d0:	e029      	b.n	8007126 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	099b      	lsrs	r3, r3, #6
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00f      	beq.n	80070fe <HAL_I2C_EV_IRQHandler+0x2aa>
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	0a9b      	lsrs	r3, r3, #10
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d009      	beq.n	80070fe <HAL_I2C_EV_IRQHandler+0x2aa>
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	089b      	lsrs	r3, r3, #2
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d103      	bne.n	80070fe <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fec9 	bl	8007e8e <I2C_SlaveReceive_RXNE>
 80070fc:	e014      	b.n	8007128 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	089b      	lsrs	r3, r3, #2
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00e      	beq.n	8007128 <HAL_I2C_EV_IRQHandler+0x2d4>
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	0a5b      	lsrs	r3, r3, #9
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b00      	cmp	r3, #0
 8007114:	d008      	beq.n	8007128 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fef7 	bl	8007f0a <I2C_SlaveReceive_BTF>
 800711c:	e004      	b.n	8007128 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800711e:	bf00      	nop
 8007120:	e002      	b.n	8007128 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007122:	bf00      	nop
 8007124:	e000      	b.n	8007128 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007126:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007128:	3720      	adds	r7, #32
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b08a      	sub	sp, #40	; 0x28
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007146:	2300      	movs	r3, #0
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007150:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	0a1b      	lsrs	r3, r3, #8
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00e      	beq.n	800717c <HAL_I2C_ER_IRQHandler+0x4e>
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	0a1b      	lsrs	r3, r3, #8
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d008      	beq.n	800717c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	f043 0301 	orr.w	r3, r3, #1
 8007170:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800717a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	0a5b      	lsrs	r3, r3, #9
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00e      	beq.n	80071a6 <HAL_I2C_ER_IRQHandler+0x78>
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	0a1b      	lsrs	r3, r3, #8
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d008      	beq.n	80071a6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	f043 0302 	orr.w	r3, r3, #2
 800719a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80071a4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	0a9b      	lsrs	r3, r3, #10
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d03f      	beq.n	8007232 <HAL_I2C_ER_IRQHandler+0x104>
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	0a1b      	lsrs	r3, r3, #8
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d039      	beq.n	8007232 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80071be:	7efb      	ldrb	r3, [r7, #27]
 80071c0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80071d8:	7ebb      	ldrb	r3, [r7, #26]
 80071da:	2b20      	cmp	r3, #32
 80071dc:	d112      	bne.n	8007204 <HAL_I2C_ER_IRQHandler+0xd6>
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10f      	bne.n	8007204 <HAL_I2C_ER_IRQHandler+0xd6>
 80071e4:	7cfb      	ldrb	r3, [r7, #19]
 80071e6:	2b21      	cmp	r3, #33	; 0x21
 80071e8:	d008      	beq.n	80071fc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80071ea:	7cfb      	ldrb	r3, [r7, #19]
 80071ec:	2b29      	cmp	r3, #41	; 0x29
 80071ee:	d005      	beq.n	80071fc <HAL_I2C_ER_IRQHandler+0xce>
 80071f0:	7cfb      	ldrb	r3, [r7, #19]
 80071f2:	2b28      	cmp	r3, #40	; 0x28
 80071f4:	d106      	bne.n	8007204 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b21      	cmp	r3, #33	; 0x21
 80071fa:	d103      	bne.n	8007204 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 f81b 	bl	8008238 <I2C_Slave_AF>
 8007202:	e016      	b.n	8007232 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800720c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	f043 0304 	orr.w	r3, r3, #4
 8007214:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007216:	7efb      	ldrb	r3, [r7, #27]
 8007218:	2b10      	cmp	r3, #16
 800721a:	d002      	beq.n	8007222 <HAL_I2C_ER_IRQHandler+0xf4>
 800721c:	7efb      	ldrb	r3, [r7, #27]
 800721e:	2b40      	cmp	r3, #64	; 0x40
 8007220:	d107      	bne.n	8007232 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007230:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	0adb      	lsrs	r3, r3, #11
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00e      	beq.n	800725c <HAL_I2C_ER_IRQHandler+0x12e>
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	0a1b      	lsrs	r3, r3, #8
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d008      	beq.n	800725c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	f043 0308 	orr.w	r3, r3, #8
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800725a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	2b00      	cmp	r3, #0
 8007260:	d008      	beq.n	8007274 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	431a      	orrs	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 f852 	bl	8008318 <I2C_ITError>
  }
}
 8007274:	bf00      	nop
 8007276:	3728      	adds	r7, #40	; 0x28
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007302:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800730a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007316:	2b00      	cmp	r3, #0
 8007318:	d150      	bne.n	80073bc <I2C_MasterTransmit_TXE+0xc8>
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	2b21      	cmp	r3, #33	; 0x21
 800731e:	d14d      	bne.n	80073bc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2b08      	cmp	r3, #8
 8007324:	d01d      	beq.n	8007362 <I2C_MasterTransmit_TXE+0x6e>
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b20      	cmp	r3, #32
 800732a:	d01a      	beq.n	8007362 <I2C_MasterTransmit_TXE+0x6e>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007332:	d016      	beq.n	8007362 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007342:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2211      	movs	r2, #17
 8007348:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2220      	movs	r2, #32
 8007356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff ff8e 	bl	800727c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007360:	e060      	b.n	8007424 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007370:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007380:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2220      	movs	r2, #32
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b40      	cmp	r3, #64	; 0x40
 800739a:	d107      	bne.n	80073ac <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f7ff ff87 	bl	80072b8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80073aa:	e03b      	b.n	8007424 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7ff ff61 	bl	800727c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80073ba:	e033      	b.n	8007424 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	2b21      	cmp	r3, #33	; 0x21
 80073c0:	d005      	beq.n	80073ce <I2C_MasterTransmit_TXE+0xda>
 80073c2:	7bbb      	ldrb	r3, [r7, #14]
 80073c4:	2b40      	cmp	r3, #64	; 0x40
 80073c6:	d12d      	bne.n	8007424 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	2b22      	cmp	r3, #34	; 0x22
 80073cc:	d12a      	bne.n	8007424 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d108      	bne.n	80073ea <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80073e8:	e01c      	b.n	8007424 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b40      	cmp	r3, #64	; 0x40
 80073f4:	d103      	bne.n	80073fe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f880 	bl	80074fc <I2C_MemoryTransmit_TXE_BTF>
}
 80073fc:	e012      	b.n	8007424 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	781a      	ldrb	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007418:	b29b      	uxth	r3, r3
 800741a:	3b01      	subs	r3, #1
 800741c:	b29a      	uxth	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007422:	e7ff      	b.n	8007424 <I2C_MasterTransmit_TXE+0x130>
 8007424:	bf00      	nop
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007438:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b21      	cmp	r3, #33	; 0x21
 8007444:	d156      	bne.n	80074f4 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744a:	b29b      	uxth	r3, r3
 800744c:	2b00      	cmp	r3, #0
 800744e:	d012      	beq.n	8007476 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	781a      	ldrb	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800746a:	b29b      	uxth	r3, r3
 800746c:	3b01      	subs	r3, #1
 800746e:	b29a      	uxth	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007474:	e03e      	b.n	80074f4 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b08      	cmp	r3, #8
 800747a:	d01d      	beq.n	80074b8 <I2C_MasterTransmit_BTF+0x8c>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b20      	cmp	r3, #32
 8007480:	d01a      	beq.n	80074b8 <I2C_MasterTransmit_BTF+0x8c>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007488:	d016      	beq.n	80074b8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007498:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2211      	movs	r2, #17
 800749e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7ff fee3 	bl	800727c <HAL_I2C_MasterTxCpltCallback>
}
 80074b6:	e01d      	b.n	80074f4 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074c6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074d6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff fec4 	bl	800727c <HAL_I2C_MasterTxCpltCallback>
}
 80074f4:	bf00      	nop
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800750a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007510:	2b00      	cmp	r3, #0
 8007512:	d11d      	bne.n	8007550 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007518:	2b01      	cmp	r3, #1
 800751a:	d10b      	bne.n	8007534 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007520:	b2da      	uxtb	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800752c:	1c9a      	adds	r2, r3, #2
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007532:	e06e      	b.n	8007612 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007538:	b29b      	uxth	r3, r3
 800753a:	121b      	asrs	r3, r3, #8
 800753c:	b2da      	uxtb	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800754e:	e060      	b.n	8007612 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007554:	2b01      	cmp	r3, #1
 8007556:	d10b      	bne.n	8007570 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800755c:	b2da      	uxtb	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800756e:	e050      	b.n	8007612 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007574:	2b02      	cmp	r3, #2
 8007576:	d14c      	bne.n	8007612 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	2b22      	cmp	r3, #34	; 0x22
 800757c:	d108      	bne.n	8007590 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800758c:	601a      	str	r2, [r3, #0]
}
 800758e:	e040      	b.n	8007612 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007594:	b29b      	uxth	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d015      	beq.n	80075c6 <I2C_MemoryTransmit_TXE_BTF+0xca>
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	2b21      	cmp	r3, #33	; 0x21
 800759e:	d112      	bne.n	80075c6 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	781a      	ldrb	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	1c5a      	adds	r2, r3, #1
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	b29a      	uxth	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80075c4:	e025      	b.n	8007612 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d120      	bne.n	8007612 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
 80075d2:	2b21      	cmp	r3, #33	; 0x21
 80075d4:	d11d      	bne.n	8007612 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075e4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075f4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7ff fe53 	bl	80072b8 <HAL_I2C_MemTxCpltCallback>
}
 8007612:	bf00      	nop
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b22      	cmp	r3, #34	; 0x22
 800762c:	f040 80a2 	bne.w	8007774 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007634:	b29b      	uxth	r3, r3
 8007636:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2b03      	cmp	r3, #3
 800763c:	d921      	bls.n	8007682 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	b2d2      	uxtb	r2, r2
 800764a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b03      	cmp	r3, #3
 800766c:	f040 8082 	bne.w	8007774 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800767e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8007680:	e078      	b.n	8007774 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007686:	2b02      	cmp	r3, #2
 8007688:	d074      	beq.n	8007774 <I2C_MasterReceive_RXNE+0x15a>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d002      	beq.n	8007696 <I2C_MasterReceive_RXNE+0x7c>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d16e      	bne.n	8007774 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 fb2a 	bl	8008cf0 <I2C_WaitOnSTOPRequestThroughIT>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d142      	bne.n	8007728 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076b0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80076c0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	691a      	ldr	r2, [r3, #16]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	b2d2      	uxtb	r2, r2
 80076ce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076de:	b29b      	uxth	r3, r3
 80076e0:	3b01      	subs	r3, #1
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b40      	cmp	r3, #64	; 0x40
 80076fa:	d10a      	bne.n	8007712 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7ff fdde 	bl	80072cc <HAL_I2C_MemRxCpltCallback>
}
 8007710:	e030      	b.n	8007774 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2212      	movs	r2, #18
 800771e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff fdb5 	bl	8007290 <HAL_I2C_MasterRxCpltCallback>
}
 8007726:	e025      	b.n	8007774 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007736:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691a      	ldr	r2, [r3, #16]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007742:	b2d2      	uxtb	r2, r2
 8007744:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007754:	b29b      	uxth	r3, r3
 8007756:	3b01      	subs	r3, #1
 8007758:	b29a      	uxth	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2220      	movs	r2, #32
 8007762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7f9 fbbe 	bl	8000ef0 <HAL_I2C_ErrorCallback>
}
 8007774:	bf00      	nop
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007788:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800778e:	b29b      	uxth	r3, r3
 8007790:	2b04      	cmp	r3, #4
 8007792:	d11b      	bne.n	80077cc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077a2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691a      	ldr	r2, [r3, #16]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	b2d2      	uxtb	r2, r2
 80077b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	1c5a      	adds	r2, r3, #1
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	3b01      	subs	r3, #1
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80077ca:	e0bd      	b.n	8007948 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d129      	bne.n	800782a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077e4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	d00a      	beq.n	8007802 <I2C_MasterReceive_BTF+0x86>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d007      	beq.n	8007802 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007800:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	691a      	ldr	r2, [r3, #16]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780c:	b2d2      	uxtb	r2, r2
 800780e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781e:	b29b      	uxth	r3, r3
 8007820:	3b01      	subs	r3, #1
 8007822:	b29a      	uxth	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007828:	e08e      	b.n	8007948 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782e:	b29b      	uxth	r3, r3
 8007830:	2b02      	cmp	r3, #2
 8007832:	d176      	bne.n	8007922 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d002      	beq.n	8007840 <I2C_MasterReceive_BTF+0xc4>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2b10      	cmp	r3, #16
 800783e:	d108      	bne.n	8007852 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	e019      	b.n	8007886 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2b04      	cmp	r3, #4
 8007856:	d002      	beq.n	800785e <I2C_MasterReceive_BTF+0xe2>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2b02      	cmp	r3, #2
 800785c:	d108      	bne.n	8007870 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	e00a      	b.n	8007886 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2b10      	cmp	r3, #16
 8007874:	d007      	beq.n	8007886 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007884:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	691a      	ldr	r2, [r3, #16]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007890:	b2d2      	uxtb	r2, r2
 8007892:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	3b01      	subs	r3, #1
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	691a      	ldr	r2, [r3, #16]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078be:	1c5a      	adds	r2, r3, #1
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	3b01      	subs	r3, #1
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80078e0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2220      	movs	r2, #32
 80078e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b40      	cmp	r3, #64	; 0x40
 80078f4:	d10a      	bne.n	800790c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7ff fce1 	bl	80072cc <HAL_I2C_MemRxCpltCallback>
}
 800790a:	e01d      	b.n	8007948 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2212      	movs	r2, #18
 8007918:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7ff fcb8 	bl	8007290 <HAL_I2C_MasterRxCpltCallback>
}
 8007920:	e012      	b.n	8007948 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	b2d2      	uxtb	r2, r2
 800792e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007948:	bf00      	nop
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b40      	cmp	r3, #64	; 0x40
 8007962:	d117      	bne.n	8007994 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007968:	2b00      	cmp	r3, #0
 800796a:	d109      	bne.n	8007980 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007970:	b2db      	uxtb	r3, r3
 8007972:	461a      	mov	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800797c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800797e:	e067      	b.n	8007a50 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007984:	b2db      	uxtb	r3, r3
 8007986:	f043 0301 	orr.w	r3, r3, #1
 800798a:	b2da      	uxtb	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	611a      	str	r2, [r3, #16]
}
 8007992:	e05d      	b.n	8007a50 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800799c:	d133      	bne.n	8007a06 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b21      	cmp	r3, #33	; 0x21
 80079a8:	d109      	bne.n	80079be <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	461a      	mov	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079ba:	611a      	str	r2, [r3, #16]
 80079bc:	e008      	b.n	80079d0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	f043 0301 	orr.w	r3, r3, #1
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d004      	beq.n	80079e2 <I2C_Master_SB+0x92>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d108      	bne.n	80079f4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d032      	beq.n	8007a50 <I2C_Master_SB+0x100>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d02d      	beq.n	8007a50 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a02:	605a      	str	r2, [r3, #4]
}
 8007a04:	e024      	b.n	8007a50 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10e      	bne.n	8007a2c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	11db      	asrs	r3, r3, #7
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	f003 0306 	and.w	r3, r3, #6
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	f063 030f 	orn	r3, r3, #15
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	611a      	str	r2, [r3, #16]
}
 8007a2a:	e011      	b.n	8007a50 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d10d      	bne.n	8007a50 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	11db      	asrs	r3, r3, #7
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	f003 0306 	and.w	r3, r3, #6
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	f063 030e 	orn	r3, r3, #14
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	611a      	str	r2, [r3, #16]
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d004      	beq.n	8007a82 <I2C_Master_ADD10+0x26>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d108      	bne.n	8007a94 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00c      	beq.n	8007aa4 <I2C_Master_ADD10+0x48>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d007      	beq.n	8007aa4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aa2:	605a      	str	r2, [r3, #4]
  }
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b091      	sub	sp, #68	; 0x44
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007abe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007acc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b22      	cmp	r3, #34	; 0x22
 8007ad8:	f040 8169 	bne.w	8007dae <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10f      	bne.n	8007b04 <I2C_Master_ADDR+0x54>
 8007ae4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ae8:	2b40      	cmp	r3, #64	; 0x40
 8007aea:	d10b      	bne.n	8007b04 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aec:	2300      	movs	r3, #0
 8007aee:	633b      	str	r3, [r7, #48]	; 0x30
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	633b      	str	r3, [r7, #48]	; 0x30
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	633b      	str	r3, [r7, #48]	; 0x30
 8007b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b02:	e160      	b.n	8007dc6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d11d      	bne.n	8007b48 <I2C_Master_ADDR+0x98>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b14:	d118      	bne.n	8007b48 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b16:	2300      	movs	r3, #0
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b3a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	651a      	str	r2, [r3, #80]	; 0x50
 8007b46:	e13e      	b.n	8007dc6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d113      	bne.n	8007b7a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b52:	2300      	movs	r3, #0
 8007b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b66:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	e115      	b.n	8007da6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	f040 808a 	bne.w	8007c9a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b8c:	d137      	bne.n	8007bfe <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b9c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bac:	d113      	bne.n	8007bd6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bbc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	e0e7      	b.n	8007da6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	623b      	str	r3, [r7, #32]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	623b      	str	r3, [r7, #32]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	623b      	str	r3, [r7, #32]
 8007bea:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	e0d3      	b.n	8007da6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c00:	2b08      	cmp	r3, #8
 8007c02:	d02e      	beq.n	8007c62 <I2C_Master_ADDR+0x1b2>
 8007c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c06:	2b20      	cmp	r3, #32
 8007c08:	d02b      	beq.n	8007c62 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0c:	2b12      	cmp	r3, #18
 8007c0e:	d102      	bne.n	8007c16 <I2C_Master_ADDR+0x166>
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d125      	bne.n	8007c62 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d00e      	beq.n	8007c3a <I2C_Master_ADDR+0x18a>
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d00b      	beq.n	8007c3a <I2C_Master_ADDR+0x18a>
 8007c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c24:	2b10      	cmp	r3, #16
 8007c26:	d008      	beq.n	8007c3a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	e007      	b.n	8007c4a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c48:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	61fb      	str	r3, [r7, #28]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	61fb      	str	r3, [r7, #28]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	61fb      	str	r3, [r7, #28]
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	e0a1      	b.n	8007da6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c70:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c72:	2300      	movs	r3, #0
 8007c74:	61bb      	str	r3, [r7, #24]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	61bb      	str	r3, [r7, #24]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	61bb      	str	r3, [r7, #24]
 8007c86:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	e085      	b.n	8007da6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d14d      	bne.n	8007d40 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca6:	2b04      	cmp	r3, #4
 8007ca8:	d016      	beq.n	8007cd8 <I2C_Master_ADDR+0x228>
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d013      	beq.n	8007cd8 <I2C_Master_ADDR+0x228>
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb2:	2b10      	cmp	r3, #16
 8007cb4:	d010      	beq.n	8007cd8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cc4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	e007      	b.n	8007ce8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ce6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cf6:	d117      	bne.n	8007d28 <I2C_Master_ADDR+0x278>
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cfe:	d00b      	beq.n	8007d18 <I2C_Master_ADDR+0x268>
 8007d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d008      	beq.n	8007d18 <I2C_Master_ADDR+0x268>
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	2b08      	cmp	r3, #8
 8007d0a:	d005      	beq.n	8007d18 <I2C_Master_ADDR+0x268>
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0e:	2b10      	cmp	r3, #16
 8007d10:	d002      	beq.n	8007d18 <I2C_Master_ADDR+0x268>
 8007d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d14:	2b20      	cmp	r3, #32
 8007d16:	d107      	bne.n	8007d28 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d26:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d28:	2300      	movs	r3, #0
 8007d2a:	617b      	str	r3, [r7, #20]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	617b      	str	r3, [r7, #20]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	e032      	b.n	8007da6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d4e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d5e:	d117      	bne.n	8007d90 <I2C_Master_ADDR+0x2e0>
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d66:	d00b      	beq.n	8007d80 <I2C_Master_ADDR+0x2d0>
 8007d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d008      	beq.n	8007d80 <I2C_Master_ADDR+0x2d0>
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	d005      	beq.n	8007d80 <I2C_Master_ADDR+0x2d0>
 8007d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d76:	2b10      	cmp	r3, #16
 8007d78:	d002      	beq.n	8007d80 <I2C_Master_ADDR+0x2d0>
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	2b20      	cmp	r3, #32
 8007d7e:	d107      	bne.n	8007d90 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d8e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d90:	2300      	movs	r3, #0
 8007d92:	613b      	str	r3, [r7, #16]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	695b      	ldr	r3, [r3, #20]
 8007d9a:	613b      	str	r3, [r7, #16]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	613b      	str	r3, [r7, #16]
 8007da4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007dac:	e00b      	b.n	8007dc6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dae:	2300      	movs	r3, #0
 8007db0:	60fb      	str	r3, [r7, #12]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	60fb      	str	r3, [r7, #12]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
}
 8007dc4:	e7ff      	b.n	8007dc6 <I2C_Master_ADDR+0x316>
 8007dc6:	bf00      	nop
 8007dc8:	3744      	adds	r7, #68	; 0x44
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d02b      	beq.n	8007e44 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	781a      	ldrb	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d114      	bne.n	8007e44 <I2C_SlaveTransmit_TXE+0x72>
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	2b29      	cmp	r3, #41	; 0x29
 8007e1e:	d111      	bne.n	8007e44 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e2e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2221      	movs	r2, #33	; 0x21
 8007e34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2228      	movs	r2, #40	; 0x28
 8007e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7ff fa30 	bl	80072a4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007e44:	bf00      	nop
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d011      	beq.n	8007e82 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	781a      	ldrb	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007e82:	bf00      	nop
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e9c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d02c      	beq.n	8007f02 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691a      	ldr	r2, [r3, #16]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	b2d2      	uxtb	r2, r2
 8007eb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d114      	bne.n	8007f02 <I2C_SlaveReceive_RXNE+0x74>
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	2b2a      	cmp	r3, #42	; 0x2a
 8007edc:	d111      	bne.n	8007f02 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2222      	movs	r2, #34	; 0x22
 8007ef2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2228      	movs	r2, #40	; 0x28
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7fa faff 	bl	8002500 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007f02:	bf00      	nop
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d012      	beq.n	8007f42 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	691a      	ldr	r2, [r3, #16]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	b2d2      	uxtb	r2, r2
 8007f28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007f42:	bf00      	nop
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f68:	2b28      	cmp	r3, #40	; 0x28
 8007f6a:	d127      	bne.n	8007fbc <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f7a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	089b      	lsrs	r3, r3, #2
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d101      	bne.n	8007f8c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	09db      	lsrs	r3, r3, #7
 8007f90:	f003 0301 	and.w	r3, r3, #1
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d103      	bne.n	8007fa0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	81bb      	strh	r3, [r7, #12]
 8007f9e:	e002      	b.n	8007fa6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007fae:	89ba      	ldrh	r2, [r7, #12]
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7fa fa69 	bl	800248c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007fba:	e008      	b.n	8007fce <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f06f 0202 	mvn.w	r2, #2
 8007fc4:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007fce:	bf00      	nop
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
	...

08007fd8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ff6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	60bb      	str	r3, [r7, #8]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	60bb      	str	r3, [r7, #8]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0201 	orr.w	r2, r2, #1
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008024:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008034:	d172      	bne.n	800811c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008036:	7bfb      	ldrb	r3, [r7, #15]
 8008038:	2b22      	cmp	r3, #34	; 0x22
 800803a:	d002      	beq.n	8008042 <I2C_Slave_STOPF+0x6a>
 800803c:	7bfb      	ldrb	r3, [r7, #15]
 800803e:	2b2a      	cmp	r3, #42	; 0x2a
 8008040:	d135      	bne.n	80080ae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	b29a      	uxth	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008054:	b29b      	uxth	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d005      	beq.n	8008066 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805e:	f043 0204 	orr.w	r2, r3, #4
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008074:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807a:	4618      	mov	r0, r3
 800807c:	f7fd fbd4 	bl	8005828 <HAL_DMA_GetState>
 8008080:	4603      	mov	r3, r0
 8008082:	2b01      	cmp	r3, #1
 8008084:	d049      	beq.n	800811a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808a:	4a69      	ldr	r2, [pc, #420]	; (8008230 <I2C_Slave_STOPF+0x258>)
 800808c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008092:	4618      	mov	r0, r3
 8008094:	f7fd fa1c 	bl	80054d0 <HAL_DMA_Abort_IT>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d03d      	beq.n	800811a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080a8:	4610      	mov	r0, r2
 80080aa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80080ac:	e035      	b.n	800811a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d005      	beq.n	80080d2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ca:	f043 0204 	orr.w	r2, r3, #4
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fd fb9e 	bl	8005828 <HAL_DMA_GetState>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d014      	beq.n	800811c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f6:	4a4e      	ldr	r2, [pc, #312]	; (8008230 <I2C_Slave_STOPF+0x258>)
 80080f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fd f9e6 	bl	80054d0 <HAL_DMA_Abort_IT>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d008      	beq.n	800811c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008114:	4610      	mov	r0, r2
 8008116:	4798      	blx	r3
 8008118:	e000      	b.n	800811c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800811a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008120:	b29b      	uxth	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d03e      	beq.n	80081a4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	f003 0304 	and.w	r3, r3, #4
 8008130:	2b04      	cmp	r3, #4
 8008132:	d112      	bne.n	800815a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691a      	ldr	r2, [r3, #16]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	b2d2      	uxtb	r2, r2
 8008140:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	1c5a      	adds	r2, r3, #1
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008150:	b29b      	uxth	r3, r3
 8008152:	3b01      	subs	r3, #1
 8008154:	b29a      	uxth	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008164:	2b40      	cmp	r3, #64	; 0x40
 8008166:	d112      	bne.n	800818e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	691a      	ldr	r2, [r3, #16]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008172:	b2d2      	uxtb	r2, r2
 8008174:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817a:	1c5a      	adds	r2, r3, #1
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008184:	b29b      	uxth	r3, r3
 8008186:	3b01      	subs	r3, #1
 8008188:	b29a      	uxth	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008192:	b29b      	uxth	r3, r3
 8008194:	2b00      	cmp	r3, #0
 8008196:	d005      	beq.n	80081a4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819c:	f043 0204 	orr.w	r2, r3, #4
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f8b3 	bl	8008318 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80081b2:	e039      	b.n	8008228 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	2b2a      	cmp	r3, #42	; 0x2a
 80081b8:	d109      	bne.n	80081ce <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2228      	movs	r2, #40	; 0x28
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7fa f999 	bl	8002500 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b28      	cmp	r3, #40	; 0x28
 80081d8:	d111      	bne.n	80081fe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a15      	ldr	r2, [pc, #84]	; (8008234 <I2C_Slave_STOPF+0x25c>)
 80081de:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2220      	movs	r2, #32
 80081ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7fa f974 	bl	80024e4 <HAL_I2C_ListenCpltCallback>
}
 80081fc:	e014      	b.n	8008228 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008202:	2b22      	cmp	r3, #34	; 0x22
 8008204:	d002      	beq.n	800820c <I2C_Slave_STOPF+0x234>
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	2b22      	cmp	r3, #34	; 0x22
 800820a:	d10d      	bne.n	8008228 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2220      	movs	r2, #32
 8008216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7fa f96c 	bl	8002500 <HAL_I2C_SlaveRxCpltCallback>
}
 8008228:	bf00      	nop
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	08008971 	.word	0x08008971
 8008234:	ffff0000 	.word	0xffff0000

08008238 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008246:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	2b08      	cmp	r3, #8
 8008252:	d002      	beq.n	800825a <I2C_Slave_AF+0x22>
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2b20      	cmp	r3, #32
 8008258:	d129      	bne.n	80082ae <I2C_Slave_AF+0x76>
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	2b28      	cmp	r3, #40	; 0x28
 800825e:	d126      	bne.n	80082ae <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a2c      	ldr	r2, [pc, #176]	; (8008314 <I2C_Slave_AF+0xdc>)
 8008264:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008274:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800827e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800828e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2220      	movs	r2, #32
 800829a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7fa f91c 	bl	80024e4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80082ac:	e02e      	b.n	800830c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
 80082b0:	2b21      	cmp	r3, #33	; 0x21
 80082b2:	d126      	bne.n	8008302 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a17      	ldr	r2, [pc, #92]	; (8008314 <I2C_Slave_AF+0xdc>)
 80082b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2221      	movs	r2, #33	; 0x21
 80082be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2220      	movs	r2, #32
 80082c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082de:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082e8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082f8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7fe ffd2 	bl	80072a4 <HAL_I2C_SlaveTxCpltCallback>
}
 8008300:	e004      	b.n	800830c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800830a:	615a      	str	r2, [r3, #20]
}
 800830c:	bf00      	nop
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	ffff0000 	.word	0xffff0000

08008318 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008326:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800832e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008330:	7bbb      	ldrb	r3, [r7, #14]
 8008332:	2b10      	cmp	r3, #16
 8008334:	d002      	beq.n	800833c <I2C_ITError+0x24>
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	2b40      	cmp	r3, #64	; 0x40
 800833a:	d10a      	bne.n	8008352 <I2C_ITError+0x3a>
 800833c:	7bfb      	ldrb	r3, [r7, #15]
 800833e:	2b22      	cmp	r3, #34	; 0x22
 8008340:	d107      	bne.n	8008352 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008350:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008352:	7bfb      	ldrb	r3, [r7, #15]
 8008354:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008358:	2b28      	cmp	r3, #40	; 0x28
 800835a:	d107      	bne.n	800836c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2228      	movs	r2, #40	; 0x28
 8008366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800836a:	e015      	b.n	8008398 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800837a:	d00a      	beq.n	8008392 <I2C_ITError+0x7a>
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	2b60      	cmp	r3, #96	; 0x60
 8008380:	d007      	beq.n	8008392 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2220      	movs	r2, #32
 8008386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083a6:	d162      	bne.n	800846e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083b6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d020      	beq.n	8008408 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ca:	4a6a      	ldr	r2, [pc, #424]	; (8008574 <I2C_ITError+0x25c>)
 80083cc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fd f87c 	bl	80054d0 <HAL_DMA_Abort_IT>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 8089 	beq.w	80084f2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f022 0201 	bic.w	r2, r2, #1
 80083ee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2220      	movs	r2, #32
 80083f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008402:	4610      	mov	r0, r2
 8008404:	4798      	blx	r3
 8008406:	e074      	b.n	80084f2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	4a59      	ldr	r2, [pc, #356]	; (8008574 <I2C_ITError+0x25c>)
 800840e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008414:	4618      	mov	r0, r3
 8008416:	f7fd f85b 	bl	80054d0 <HAL_DMA_Abort_IT>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d068      	beq.n	80084f2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842a:	2b40      	cmp	r3, #64	; 0x40
 800842c:	d10b      	bne.n	8008446 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	691a      	ldr	r2, [r3, #16]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	b2d2      	uxtb	r2, r2
 800843a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f022 0201 	bic.w	r2, r2, #1
 8008454:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008468:	4610      	mov	r0, r2
 800846a:	4798      	blx	r3
 800846c:	e041      	b.n	80084f2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b60      	cmp	r3, #96	; 0x60
 8008478:	d125      	bne.n	80084c6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2220      	movs	r2, #32
 800847e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008492:	2b40      	cmp	r3, #64	; 0x40
 8008494:	d10b      	bne.n	80084ae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	691a      	ldr	r2, [r3, #16]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	b2d2      	uxtb	r2, r2
 80084a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a8:	1c5a      	adds	r2, r3, #1
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f022 0201 	bic.w	r2, r2, #1
 80084bc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7fe ff0e 	bl	80072e0 <HAL_I2C_AbortCpltCallback>
 80084c4:	e015      	b.n	80084f2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d0:	2b40      	cmp	r3, #64	; 0x40
 80084d2:	d10b      	bne.n	80084ec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	691a      	ldr	r2, [r3, #16]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084de:	b2d2      	uxtb	r2, r2
 80084e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f7f8 fcff 	bl	8000ef0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10e      	bne.n	8008520 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008508:	2b00      	cmp	r3, #0
 800850a:	d109      	bne.n	8008520 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008512:	2b00      	cmp	r3, #0
 8008514:	d104      	bne.n	8008520 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800851c:	2b00      	cmp	r3, #0
 800851e:	d007      	beq.n	8008530 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800852e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008536:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b04      	cmp	r3, #4
 8008542:	d113      	bne.n	800856c <I2C_ITError+0x254>
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	2b28      	cmp	r3, #40	; 0x28
 8008548:	d110      	bne.n	800856c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a0a      	ldr	r2, [pc, #40]	; (8008578 <I2C_ITError+0x260>)
 800854e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2220      	movs	r2, #32
 800855a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7f9 ffbc 	bl	80024e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800856c:	bf00      	nop
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	08008971 	.word	0x08008971
 8008578:	ffff0000 	.word	0xffff0000

0800857c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b088      	sub	sp, #32
 8008580:	af02      	add	r7, sp, #8
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	4608      	mov	r0, r1
 8008586:	4611      	mov	r1, r2
 8008588:	461a      	mov	r2, r3
 800858a:	4603      	mov	r3, r0
 800858c:	817b      	strh	r3, [r7, #10]
 800858e:	460b      	mov	r3, r1
 8008590:	813b      	strh	r3, [r7, #8]
 8008592:	4613      	mov	r3, r2
 8008594:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	2200      	movs	r2, #0
 80085be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 fa7c 	bl	8008ac0 <I2C_WaitOnFlagUntilTimeout>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00d      	beq.n	80085ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085dc:	d103      	bne.n	80085e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e0aa      	b.n	8008740 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085ea:	897b      	ldrh	r3, [r7, #10]
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	461a      	mov	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80085f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	6a3a      	ldr	r2, [r7, #32]
 80085fe:	4952      	ldr	r1, [pc, #328]	; (8008748 <I2C_RequestMemoryRead+0x1cc>)
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 fab4 	bl	8008b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e097      	b.n	8008740 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008610:	2300      	movs	r3, #0
 8008612:	617b      	str	r3, [r7, #20]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	617b      	str	r3, [r7, #20]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008628:	6a39      	ldr	r1, [r7, #32]
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 fb1e 	bl	8008c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00d      	beq.n	8008652 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	2b04      	cmp	r3, #4
 800863c:	d107      	bne.n	800864e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800864c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e076      	b.n	8008740 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008652:	88fb      	ldrh	r3, [r7, #6]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d105      	bne.n	8008664 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008658:	893b      	ldrh	r3, [r7, #8]
 800865a:	b2da      	uxtb	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	611a      	str	r2, [r3, #16]
 8008662:	e021      	b.n	80086a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008664:	893b      	ldrh	r3, [r7, #8]
 8008666:	0a1b      	lsrs	r3, r3, #8
 8008668:	b29b      	uxth	r3, r3
 800866a:	b2da      	uxtb	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008674:	6a39      	ldr	r1, [r7, #32]
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f000 faf8 	bl	8008c6c <I2C_WaitOnTXEFlagUntilTimeout>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00d      	beq.n	800869e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008686:	2b04      	cmp	r3, #4
 8008688:	d107      	bne.n	800869a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008698:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e050      	b.n	8008740 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800869e:	893b      	ldrh	r3, [r7, #8]
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086aa:	6a39      	ldr	r1, [r7, #32]
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 fadd 	bl	8008c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00d      	beq.n	80086d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086bc:	2b04      	cmp	r3, #4
 80086be:	d107      	bne.n	80086d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e035      	b.n	8008740 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	6a3b      	ldr	r3, [r7, #32]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 f9e5 	bl	8008ac0 <I2C_WaitOnFlagUntilTimeout>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00d      	beq.n	8008718 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800870a:	d103      	bne.n	8008714 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008712:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e013      	b.n	8008740 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008718:	897b      	ldrh	r3, [r7, #10]
 800871a:	b2db      	uxtb	r3, r3
 800871c:	f043 0301 	orr.w	r3, r3, #1
 8008720:	b2da      	uxtb	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	6a3a      	ldr	r2, [r7, #32]
 800872c:	4906      	ldr	r1, [pc, #24]	; (8008748 <I2C_RequestMemoryRead+0x1cc>)
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f000 fa1d 	bl	8008b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e000      	b.n	8008740 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3718      	adds	r7, #24
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	00010002 	.word	0x00010002

0800874c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008758:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008760:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008768:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800877e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008784:	2b00      	cmp	r3, #0
 8008786:	d003      	beq.n	8008790 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878c:	2200      	movs	r2, #0
 800878e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879c:	2200      	movs	r2, #0
 800879e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80087a0:	7cfb      	ldrb	r3, [r7, #19]
 80087a2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80087a6:	2b21      	cmp	r3, #33	; 0x21
 80087a8:	d007      	beq.n	80087ba <I2C_DMAXferCplt+0x6e>
 80087aa:	7cfb      	ldrb	r3, [r7, #19]
 80087ac:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80087b0:	2b22      	cmp	r3, #34	; 0x22
 80087b2:	d131      	bne.n	8008818 <I2C_DMAXferCplt+0xcc>
 80087b4:	7cbb      	ldrb	r3, [r7, #18]
 80087b6:	2b20      	cmp	r3, #32
 80087b8:	d12e      	bne.n	8008818 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087c8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2200      	movs	r2, #0
 80087ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80087d0:	7cfb      	ldrb	r3, [r7, #19]
 80087d2:	2b29      	cmp	r3, #41	; 0x29
 80087d4:	d10a      	bne.n	80087ec <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2221      	movs	r2, #33	; 0x21
 80087da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2228      	movs	r2, #40	; 0x28
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80087e4:	6978      	ldr	r0, [r7, #20]
 80087e6:	f7fe fd5d 	bl	80072a4 <HAL_I2C_SlaveTxCpltCallback>
 80087ea:	e00c      	b.n	8008806 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80087ec:	7cfb      	ldrb	r3, [r7, #19]
 80087ee:	2b2a      	cmp	r3, #42	; 0x2a
 80087f0:	d109      	bne.n	8008806 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2222      	movs	r2, #34	; 0x22
 80087f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2228      	movs	r2, #40	; 0x28
 80087fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008800:	6978      	ldr	r0, [r7, #20]
 8008802:	f7f9 fe7d 	bl	8002500 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008814:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008816:	e06a      	b.n	80088ee <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d064      	beq.n	80088ee <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008828:	b29b      	uxth	r3, r3
 800882a:	2b01      	cmp	r3, #1
 800882c:	d107      	bne.n	800883e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800883c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685a      	ldr	r2, [r3, #4]
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800884c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008854:	d009      	beq.n	800886a <I2C_DMAXferCplt+0x11e>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2b08      	cmp	r3, #8
 800885a:	d006      	beq.n	800886a <I2C_DMAXferCplt+0x11e>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008862:	d002      	beq.n	800886a <I2C_DMAXferCplt+0x11e>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b20      	cmp	r3, #32
 8008868:	d107      	bne.n	800887a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008878:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008888:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	685a      	ldr	r2, [r3, #4]
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008898:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	2200      	movs	r2, #0
 800889e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d003      	beq.n	80088b0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80088a8:	6978      	ldr	r0, [r7, #20]
 80088aa:	f7f8 fb21 	bl	8000ef0 <HAL_I2C_ErrorCallback>
}
 80088ae:	e01e      	b.n	80088ee <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	2220      	movs	r2, #32
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b40      	cmp	r3, #64	; 0x40
 80088c2:	d10a      	bne.n	80088da <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2200      	movs	r2, #0
 80088d0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80088d2:	6978      	ldr	r0, [r7, #20]
 80088d4:	f7fe fcfa 	bl	80072cc <HAL_I2C_MemRxCpltCallback>
}
 80088d8:	e009      	b.n	80088ee <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	2212      	movs	r2, #18
 80088e6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80088e8:	6978      	ldr	r0, [r7, #20]
 80088ea:	f7fe fcd1 	bl	8007290 <HAL_I2C_MasterRxCpltCallback>
}
 80088ee:	bf00      	nop
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008902:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008908:	2b00      	cmp	r3, #0
 800890a:	d003      	beq.n	8008914 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008910:	2200      	movs	r2, #0
 8008912:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008918:	2b00      	cmp	r3, #0
 800891a:	d003      	beq.n	8008924 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008920:	2200      	movs	r2, #0
 8008922:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7fc ff8d 	bl	8005844 <HAL_DMA_GetError>
 800892a:	4603      	mov	r3, r0
 800892c:	2b02      	cmp	r3, #2
 800892e:	d01b      	beq.n	8008968 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800893e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2220      	movs	r2, #32
 800894a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895a:	f043 0210 	orr.w	r2, r3, #16
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f7f8 fac4 	bl	8000ef0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008968:	bf00      	nop
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008980:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008988:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800898a:	4b4b      	ldr	r3, [pc, #300]	; (8008ab8 <I2C_DMAAbort+0x148>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	08db      	lsrs	r3, r3, #3
 8008990:	4a4a      	ldr	r2, [pc, #296]	; (8008abc <I2C_DMAAbort+0x14c>)
 8008992:	fba2 2303 	umull	r2, r3, r2, r3
 8008996:	0a1a      	lsrs	r2, r3, #8
 8008998:	4613      	mov	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	00da      	lsls	r2, r3, #3
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d106      	bne.n	80089b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	f043 0220 	orr.w	r2, r3, #32
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80089b6:	e00a      	b.n	80089ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3b01      	subs	r3, #1
 80089bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089cc:	d0ea      	beq.n	80089a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089da:	2200      	movs	r2, #0
 80089dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d003      	beq.n	80089ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ea:	2200      	movs	r2, #0
 80089ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2200      	movs	r2, #0
 8008a02:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a10:	2200      	movs	r2, #0
 8008a12:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d003      	beq.n	8008a24 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	2200      	movs	r2, #0
 8008a22:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f022 0201 	bic.w	r2, r2, #1
 8008a32:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b60      	cmp	r3, #96	; 0x60
 8008a3e:	d10e      	bne.n	8008a5e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2220      	movs	r2, #32
 8008a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2200      	movs	r2, #0
 8008a54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008a56:	6978      	ldr	r0, [r7, #20]
 8008a58:	f7fe fc42 	bl	80072e0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008a5c:	e027      	b.n	8008aae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a5e:	7cfb      	ldrb	r3, [r7, #19]
 8008a60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008a64:	2b28      	cmp	r3, #40	; 0x28
 8008a66:	d117      	bne.n	8008a98 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f042 0201 	orr.w	r2, r2, #1
 8008a76:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a86:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2228      	movs	r2, #40	; 0x28
 8008a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008a96:	e007      	b.n	8008aa8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008aa8:	6978      	ldr	r0, [r7, #20]
 8008aaa:	f7f8 fa21 	bl	8000ef0 <HAL_I2C_ErrorCallback>
}
 8008aae:	bf00      	nop
 8008ab0:	3718      	adds	r7, #24
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20000008 	.word	0x20000008
 8008abc:	14f8b589 	.word	0x14f8b589

08008ac0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	603b      	str	r3, [r7, #0]
 8008acc:	4613      	mov	r3, r2
 8008ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ad0:	e025      	b.n	8008b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ad8:	d021      	beq.n	8008b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ada:	f7fb fdf1 	bl	80046c0 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d302      	bcc.n	8008af0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d116      	bne.n	8008b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2220      	movs	r2, #32
 8008afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0a:	f043 0220 	orr.w	r2, r3, #32
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e023      	b.n	8008b66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	0c1b      	lsrs	r3, r3, #16
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d10d      	bne.n	8008b44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	43da      	mvns	r2, r3
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	4013      	ands	r3, r2
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	bf0c      	ite	eq
 8008b3a:	2301      	moveq	r3, #1
 8008b3c:	2300      	movne	r3, #0
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	461a      	mov	r2, r3
 8008b42:	e00c      	b.n	8008b5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	43da      	mvns	r2, r3
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	bf0c      	ite	eq
 8008b56:	2301      	moveq	r3, #1
 8008b58:	2300      	movne	r3, #0
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	79fb      	ldrb	r3, [r7, #7]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d0b6      	beq.n	8008ad2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	60f8      	str	r0, [r7, #12]
 8008b76:	60b9      	str	r1, [r7, #8]
 8008b78:	607a      	str	r2, [r7, #4]
 8008b7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008b7c:	e051      	b.n	8008c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b8c:	d123      	bne.n	8008bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ba6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2220      	movs	r2, #32
 8008bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc2:	f043 0204 	orr.w	r2, r3, #4
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e046      	b.n	8008c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bdc:	d021      	beq.n	8008c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bde:	f7fb fd6f 	bl	80046c0 <HAL_GetTick>
 8008be2:	4602      	mov	r2, r0
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d302      	bcc.n	8008bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d116      	bne.n	8008c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0e:	f043 0220 	orr.w	r2, r3, #32
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e020      	b.n	8008c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	0c1b      	lsrs	r3, r3, #16
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d10c      	bne.n	8008c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	43da      	mvns	r2, r3
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	4013      	ands	r3, r2
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	bf14      	ite	ne
 8008c3e:	2301      	movne	r3, #1
 8008c40:	2300      	moveq	r3, #0
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	e00b      	b.n	8008c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	43da      	mvns	r2, r3
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	4013      	ands	r3, r2
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	bf14      	ite	ne
 8008c58:	2301      	movne	r3, #1
 8008c5a:	2300      	moveq	r3, #0
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d18d      	bne.n	8008b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c78:	e02d      	b.n	8008cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f000 f86a 	bl	8008d54 <I2C_IsAcknowledgeFailed>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e02d      	b.n	8008ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c90:	d021      	beq.n	8008cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c92:	f7fb fd15 	bl	80046c0 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d302      	bcc.n	8008ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d116      	bne.n	8008cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc2:	f043 0220 	orr.w	r2, r3, #32
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e007      	b.n	8008ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	695b      	ldr	r3, [r3, #20]
 8008cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce0:	2b80      	cmp	r3, #128	; 0x80
 8008ce2:	d1ca      	bne.n	8008c7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008cfc:	4b13      	ldr	r3, [pc, #76]	; (8008d4c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	08db      	lsrs	r3, r3, #3
 8008d02:	4a13      	ldr	r2, [pc, #76]	; (8008d50 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008d04:	fba2 2303 	umull	r2, r3, r2, r3
 8008d08:	0a1a      	lsrs	r2, r3, #8
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3b01      	subs	r3, #1
 8008d16:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d107      	bne.n	8008d2e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d22:	f043 0220 	orr.w	r2, r3, #32
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e008      	b.n	8008d40 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d3c:	d0e9      	beq.n	8008d12 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	20000008 	.word	0x20000008
 8008d50:	14f8b589 	.word	0x14f8b589

08008d54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d6a:	d11b      	bne.n	8008da4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2220      	movs	r2, #32
 8008d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d90:	f043 0204 	orr.w	r2, r3, #4
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	e000      	b.n	8008da6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b083      	sub	sp, #12
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008dc2:	d103      	bne.n	8008dcc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008dca:	e007      	b.n	8008ddc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008dd4:	d102      	bne.n	8008ddc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2208      	movs	r2, #8
 8008dda:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e264      	b.n	80092c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 0301 	and.w	r3, r3, #1
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d075      	beq.n	8008ef2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e06:	4ba3      	ldr	r3, [pc, #652]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f003 030c 	and.w	r3, r3, #12
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	d00c      	beq.n	8008e2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e12:	4ba0      	ldr	r3, [pc, #640]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e1a:	2b08      	cmp	r3, #8
 8008e1c:	d112      	bne.n	8008e44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e1e:	4b9d      	ldr	r3, [pc, #628]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e2a:	d10b      	bne.n	8008e44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e2c:	4b99      	ldr	r3, [pc, #612]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d05b      	beq.n	8008ef0 <HAL_RCC_OscConfig+0x108>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d157      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e23f      	b.n	80092c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e4c:	d106      	bne.n	8008e5c <HAL_RCC_OscConfig+0x74>
 8008e4e:	4b91      	ldr	r3, [pc, #580]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a90      	ldr	r2, [pc, #576]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	e01d      	b.n	8008e98 <HAL_RCC_OscConfig+0xb0>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e64:	d10c      	bne.n	8008e80 <HAL_RCC_OscConfig+0x98>
 8008e66:	4b8b      	ldr	r3, [pc, #556]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a8a      	ldr	r2, [pc, #552]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	4b88      	ldr	r3, [pc, #544]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a87      	ldr	r2, [pc, #540]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e7c:	6013      	str	r3, [r2, #0]
 8008e7e:	e00b      	b.n	8008e98 <HAL_RCC_OscConfig+0xb0>
 8008e80:	4b84      	ldr	r3, [pc, #528]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a83      	ldr	r2, [pc, #524]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e8a:	6013      	str	r3, [r2, #0]
 8008e8c:	4b81      	ldr	r3, [pc, #516]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a80      	ldr	r2, [pc, #512]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d013      	beq.n	8008ec8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ea0:	f7fb fc0e 	bl	80046c0 <HAL_GetTick>
 8008ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ea6:	e008      	b.n	8008eba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ea8:	f7fb fc0a 	bl	80046c0 <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	2b64      	cmp	r3, #100	; 0x64
 8008eb4:	d901      	bls.n	8008eba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e204      	b.n	80092c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008eba:	4b76      	ldr	r3, [pc, #472]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d0f0      	beq.n	8008ea8 <HAL_RCC_OscConfig+0xc0>
 8008ec6:	e014      	b.n	8008ef2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ec8:	f7fb fbfa 	bl	80046c0 <HAL_GetTick>
 8008ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ece:	e008      	b.n	8008ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ed0:	f7fb fbf6 	bl	80046c0 <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	2b64      	cmp	r3, #100	; 0x64
 8008edc:	d901      	bls.n	8008ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e1f0      	b.n	80092c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ee2:	4b6c      	ldr	r3, [pc, #432]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1f0      	bne.n	8008ed0 <HAL_RCC_OscConfig+0xe8>
 8008eee:	e000      	b.n	8008ef2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0302 	and.w	r3, r3, #2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d063      	beq.n	8008fc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008efe:	4b65      	ldr	r3, [pc, #404]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f003 030c 	and.w	r3, r3, #12
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00b      	beq.n	8008f22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f0a:	4b62      	ldr	r3, [pc, #392]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f12:	2b08      	cmp	r3, #8
 8008f14:	d11c      	bne.n	8008f50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f16:	4b5f      	ldr	r3, [pc, #380]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d116      	bne.n	8008f50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f22:	4b5c      	ldr	r3, [pc, #368]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 0302 	and.w	r3, r3, #2
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d005      	beq.n	8008f3a <HAL_RCC_OscConfig+0x152>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d001      	beq.n	8008f3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e1c4      	b.n	80092c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f3a:	4b56      	ldr	r3, [pc, #344]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	00db      	lsls	r3, r3, #3
 8008f48:	4952      	ldr	r1, [pc, #328]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f4e:	e03a      	b.n	8008fc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d020      	beq.n	8008f9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f58:	4b4f      	ldr	r3, [pc, #316]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f5e:	f7fb fbaf 	bl	80046c0 <HAL_GetTick>
 8008f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f64:	e008      	b.n	8008f78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f66:	f7fb fbab 	bl	80046c0 <HAL_GetTick>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d901      	bls.n	8008f78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008f74:	2303      	movs	r3, #3
 8008f76:	e1a5      	b.n	80092c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f78:	4b46      	ldr	r3, [pc, #280]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 0302 	and.w	r3, r3, #2
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d0f0      	beq.n	8008f66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f84:	4b43      	ldr	r3, [pc, #268]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	00db      	lsls	r3, r3, #3
 8008f92:	4940      	ldr	r1, [pc, #256]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008f94:	4313      	orrs	r3, r2
 8008f96:	600b      	str	r3, [r1, #0]
 8008f98:	e015      	b.n	8008fc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f9a:	4b3f      	ldr	r3, [pc, #252]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fa0:	f7fb fb8e 	bl	80046c0 <HAL_GetTick>
 8008fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fa6:	e008      	b.n	8008fba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fa8:	f7fb fb8a 	bl	80046c0 <HAL_GetTick>
 8008fac:	4602      	mov	r2, r0
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d901      	bls.n	8008fba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e184      	b.n	80092c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fba:	4b36      	ldr	r3, [pc, #216]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0302 	and.w	r3, r3, #2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1f0      	bne.n	8008fa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 0308 	and.w	r3, r3, #8
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d030      	beq.n	8009034 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d016      	beq.n	8009008 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fda:	4b30      	ldr	r3, [pc, #192]	; (800909c <HAL_RCC_OscConfig+0x2b4>)
 8008fdc:	2201      	movs	r2, #1
 8008fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fe0:	f7fb fb6e 	bl	80046c0 <HAL_GetTick>
 8008fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008fe6:	e008      	b.n	8008ffa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008fe8:	f7fb fb6a 	bl	80046c0 <HAL_GetTick>
 8008fec:	4602      	mov	r2, r0
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d901      	bls.n	8008ffa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e164      	b.n	80092c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ffa:	4b26      	ldr	r3, [pc, #152]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0f0      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x200>
 8009006:	e015      	b.n	8009034 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009008:	4b24      	ldr	r3, [pc, #144]	; (800909c <HAL_RCC_OscConfig+0x2b4>)
 800900a:	2200      	movs	r2, #0
 800900c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800900e:	f7fb fb57 	bl	80046c0 <HAL_GetTick>
 8009012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009014:	e008      	b.n	8009028 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009016:	f7fb fb53 	bl	80046c0 <HAL_GetTick>
 800901a:	4602      	mov	r2, r0
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	2b02      	cmp	r3, #2
 8009022:	d901      	bls.n	8009028 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009024:	2303      	movs	r3, #3
 8009026:	e14d      	b.n	80092c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009028:	4b1a      	ldr	r3, [pc, #104]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 800902a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800902c:	f003 0302 	and.w	r3, r3, #2
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1f0      	bne.n	8009016 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0304 	and.w	r3, r3, #4
 800903c:	2b00      	cmp	r3, #0
 800903e:	f000 80a0 	beq.w	8009182 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009042:	2300      	movs	r3, #0
 8009044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009046:	4b13      	ldr	r3, [pc, #76]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8009048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10f      	bne.n	8009072 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009052:	2300      	movs	r3, #0
 8009054:	60bb      	str	r3, [r7, #8]
 8009056:	4b0f      	ldr	r3, [pc, #60]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	4a0e      	ldr	r2, [pc, #56]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 800905c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009060:	6413      	str	r3, [r2, #64]	; 0x40
 8009062:	4b0c      	ldr	r3, [pc, #48]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8009064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800906a:	60bb      	str	r3, [r7, #8]
 800906c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800906e:	2301      	movs	r3, #1
 8009070:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009072:	4b0b      	ldr	r3, [pc, #44]	; (80090a0 <HAL_RCC_OscConfig+0x2b8>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800907a:	2b00      	cmp	r3, #0
 800907c:	d121      	bne.n	80090c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800907e:	4b08      	ldr	r3, [pc, #32]	; (80090a0 <HAL_RCC_OscConfig+0x2b8>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a07      	ldr	r2, [pc, #28]	; (80090a0 <HAL_RCC_OscConfig+0x2b8>)
 8009084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800908a:	f7fb fb19 	bl	80046c0 <HAL_GetTick>
 800908e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009090:	e011      	b.n	80090b6 <HAL_RCC_OscConfig+0x2ce>
 8009092:	bf00      	nop
 8009094:	40023800 	.word	0x40023800
 8009098:	42470000 	.word	0x42470000
 800909c:	42470e80 	.word	0x42470e80
 80090a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090a4:	f7fb fb0c 	bl	80046c0 <HAL_GetTick>
 80090a8:	4602      	mov	r2, r0
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d901      	bls.n	80090b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e106      	b.n	80092c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090b6:	4b85      	ldr	r3, [pc, #532]	; (80092cc <HAL_RCC_OscConfig+0x4e4>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d0f0      	beq.n	80090a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d106      	bne.n	80090d8 <HAL_RCC_OscConfig+0x2f0>
 80090ca:	4b81      	ldr	r3, [pc, #516]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 80090cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ce:	4a80      	ldr	r2, [pc, #512]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 80090d0:	f043 0301 	orr.w	r3, r3, #1
 80090d4:	6713      	str	r3, [r2, #112]	; 0x70
 80090d6:	e01c      	b.n	8009112 <HAL_RCC_OscConfig+0x32a>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	2b05      	cmp	r3, #5
 80090de:	d10c      	bne.n	80090fa <HAL_RCC_OscConfig+0x312>
 80090e0:	4b7b      	ldr	r3, [pc, #492]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 80090e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e4:	4a7a      	ldr	r2, [pc, #488]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 80090e6:	f043 0304 	orr.w	r3, r3, #4
 80090ea:	6713      	str	r3, [r2, #112]	; 0x70
 80090ec:	4b78      	ldr	r3, [pc, #480]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 80090ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f0:	4a77      	ldr	r2, [pc, #476]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 80090f2:	f043 0301 	orr.w	r3, r3, #1
 80090f6:	6713      	str	r3, [r2, #112]	; 0x70
 80090f8:	e00b      	b.n	8009112 <HAL_RCC_OscConfig+0x32a>
 80090fa:	4b75      	ldr	r3, [pc, #468]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 80090fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090fe:	4a74      	ldr	r2, [pc, #464]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 8009100:	f023 0301 	bic.w	r3, r3, #1
 8009104:	6713      	str	r3, [r2, #112]	; 0x70
 8009106:	4b72      	ldr	r3, [pc, #456]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 8009108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800910a:	4a71      	ldr	r2, [pc, #452]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 800910c:	f023 0304 	bic.w	r3, r3, #4
 8009110:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d015      	beq.n	8009146 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800911a:	f7fb fad1 	bl	80046c0 <HAL_GetTick>
 800911e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009120:	e00a      	b.n	8009138 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009122:	f7fb facd 	bl	80046c0 <HAL_GetTick>
 8009126:	4602      	mov	r2, r0
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	1ad3      	subs	r3, r2, r3
 800912c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009130:	4293      	cmp	r3, r2
 8009132:	d901      	bls.n	8009138 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e0c5      	b.n	80092c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009138:	4b65      	ldr	r3, [pc, #404]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 800913a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913c:	f003 0302 	and.w	r3, r3, #2
 8009140:	2b00      	cmp	r3, #0
 8009142:	d0ee      	beq.n	8009122 <HAL_RCC_OscConfig+0x33a>
 8009144:	e014      	b.n	8009170 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009146:	f7fb fabb 	bl	80046c0 <HAL_GetTick>
 800914a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800914c:	e00a      	b.n	8009164 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800914e:	f7fb fab7 	bl	80046c0 <HAL_GetTick>
 8009152:	4602      	mov	r2, r0
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	f241 3288 	movw	r2, #5000	; 0x1388
 800915c:	4293      	cmp	r3, r2
 800915e:	d901      	bls.n	8009164 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009160:	2303      	movs	r3, #3
 8009162:	e0af      	b.n	80092c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009164:	4b5a      	ldr	r3, [pc, #360]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 8009166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009168:	f003 0302 	and.w	r3, r3, #2
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1ee      	bne.n	800914e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009170:	7dfb      	ldrb	r3, [r7, #23]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d105      	bne.n	8009182 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009176:	4b56      	ldr	r3, [pc, #344]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 8009178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917a:	4a55      	ldr	r2, [pc, #340]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 800917c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009180:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 809b 	beq.w	80092c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800918c:	4b50      	ldr	r3, [pc, #320]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f003 030c 	and.w	r3, r3, #12
 8009194:	2b08      	cmp	r3, #8
 8009196:	d05c      	beq.n	8009252 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	2b02      	cmp	r3, #2
 800919e:	d141      	bne.n	8009224 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091a0:	4b4c      	ldr	r3, [pc, #304]	; (80092d4 <HAL_RCC_OscConfig+0x4ec>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091a6:	f7fb fa8b 	bl	80046c0 <HAL_GetTick>
 80091aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091ac:	e008      	b.n	80091c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091ae:	f7fb fa87 	bl	80046c0 <HAL_GetTick>
 80091b2:	4602      	mov	r2, r0
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d901      	bls.n	80091c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	e081      	b.n	80092c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091c0:	4b43      	ldr	r3, [pc, #268]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1f0      	bne.n	80091ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	69da      	ldr	r2, [r3, #28]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	431a      	orrs	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091da:	019b      	lsls	r3, r3, #6
 80091dc:	431a      	orrs	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e2:	085b      	lsrs	r3, r3, #1
 80091e4:	3b01      	subs	r3, #1
 80091e6:	041b      	lsls	r3, r3, #16
 80091e8:	431a      	orrs	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ee:	061b      	lsls	r3, r3, #24
 80091f0:	4937      	ldr	r1, [pc, #220]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80091f6:	4b37      	ldr	r3, [pc, #220]	; (80092d4 <HAL_RCC_OscConfig+0x4ec>)
 80091f8:	2201      	movs	r2, #1
 80091fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091fc:	f7fb fa60 	bl	80046c0 <HAL_GetTick>
 8009200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009202:	e008      	b.n	8009216 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009204:	f7fb fa5c 	bl	80046c0 <HAL_GetTick>
 8009208:	4602      	mov	r2, r0
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	2b02      	cmp	r3, #2
 8009210:	d901      	bls.n	8009216 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	e056      	b.n	80092c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009216:	4b2e      	ldr	r3, [pc, #184]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d0f0      	beq.n	8009204 <HAL_RCC_OscConfig+0x41c>
 8009222:	e04e      	b.n	80092c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009224:	4b2b      	ldr	r3, [pc, #172]	; (80092d4 <HAL_RCC_OscConfig+0x4ec>)
 8009226:	2200      	movs	r2, #0
 8009228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800922a:	f7fb fa49 	bl	80046c0 <HAL_GetTick>
 800922e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009230:	e008      	b.n	8009244 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009232:	f7fb fa45 	bl	80046c0 <HAL_GetTick>
 8009236:	4602      	mov	r2, r0
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	2b02      	cmp	r3, #2
 800923e:	d901      	bls.n	8009244 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e03f      	b.n	80092c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009244:	4b22      	ldr	r3, [pc, #136]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1f0      	bne.n	8009232 <HAL_RCC_OscConfig+0x44a>
 8009250:	e037      	b.n	80092c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d101      	bne.n	800925e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e032      	b.n	80092c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800925e:	4b1c      	ldr	r3, [pc, #112]	; (80092d0 <HAL_RCC_OscConfig+0x4e8>)
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d028      	beq.n	80092be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009276:	429a      	cmp	r2, r3
 8009278:	d121      	bne.n	80092be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009284:	429a      	cmp	r2, r3
 8009286:	d11a      	bne.n	80092be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800928e:	4013      	ands	r3, r2
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009294:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009296:	4293      	cmp	r3, r2
 8009298:	d111      	bne.n	80092be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a4:	085b      	lsrs	r3, r3, #1
 80092a6:	3b01      	subs	r3, #1
 80092a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d107      	bne.n	80092be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d001      	beq.n	80092c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	e000      	b.n	80092c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3718      	adds	r7, #24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	40007000 	.word	0x40007000
 80092d0:	40023800 	.word	0x40023800
 80092d4:	42470060 	.word	0x42470060

080092d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d101      	bne.n	80092ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	e0cc      	b.n	8009486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80092ec:	4b68      	ldr	r3, [pc, #416]	; (8009490 <HAL_RCC_ClockConfig+0x1b8>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 0307 	and.w	r3, r3, #7
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d90c      	bls.n	8009314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092fa:	4b65      	ldr	r3, [pc, #404]	; (8009490 <HAL_RCC_ClockConfig+0x1b8>)
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	b2d2      	uxtb	r2, r2
 8009300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009302:	4b63      	ldr	r3, [pc, #396]	; (8009490 <HAL_RCC_ClockConfig+0x1b8>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f003 0307 	and.w	r3, r3, #7
 800930a:	683a      	ldr	r2, [r7, #0]
 800930c:	429a      	cmp	r2, r3
 800930e:	d001      	beq.n	8009314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	e0b8      	b.n	8009486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	2b00      	cmp	r3, #0
 800931e:	d020      	beq.n	8009362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0304 	and.w	r3, r3, #4
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800932c:	4b59      	ldr	r3, [pc, #356]	; (8009494 <HAL_RCC_ClockConfig+0x1bc>)
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	4a58      	ldr	r2, [pc, #352]	; (8009494 <HAL_RCC_ClockConfig+0x1bc>)
 8009332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0308 	and.w	r3, r3, #8
 8009340:	2b00      	cmp	r3, #0
 8009342:	d005      	beq.n	8009350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009344:	4b53      	ldr	r3, [pc, #332]	; (8009494 <HAL_RCC_ClockConfig+0x1bc>)
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	4a52      	ldr	r2, [pc, #328]	; (8009494 <HAL_RCC_ClockConfig+0x1bc>)
 800934a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800934e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009350:	4b50      	ldr	r3, [pc, #320]	; (8009494 <HAL_RCC_ClockConfig+0x1bc>)
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	494d      	ldr	r1, [pc, #308]	; (8009494 <HAL_RCC_ClockConfig+0x1bc>)
 800935e:	4313      	orrs	r3, r2
 8009360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0301 	and.w	r3, r3, #1
 800936a:	2b00      	cmp	r3, #0
 800936c:	d044      	beq.n	80093f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d107      	bne.n	8009386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009376:	4b47      	ldr	r3, [pc, #284]	; (8009494 <HAL_RCC_ClockConfig+0x1bc>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d119      	bne.n	80093b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e07f      	b.n	8009486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	2b02      	cmp	r3, #2
 800938c:	d003      	beq.n	8009396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009392:	2b03      	cmp	r3, #3
 8009394:	d107      	bne.n	80093a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009396:	4b3f      	ldr	r3, [pc, #252]	; (8009494 <HAL_RCC_ClockConfig+0x1bc>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d109      	bne.n	80093b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e06f      	b.n	8009486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093a6:	4b3b      	ldr	r3, [pc, #236]	; (8009494 <HAL_RCC_ClockConfig+0x1bc>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0302 	and.w	r3, r3, #2
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e067      	b.n	8009486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80093b6:	4b37      	ldr	r3, [pc, #220]	; (8009494 <HAL_RCC_ClockConfig+0x1bc>)
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	f023 0203 	bic.w	r2, r3, #3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	4934      	ldr	r1, [pc, #208]	; (8009494 <HAL_RCC_ClockConfig+0x1bc>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80093c8:	f7fb f97a 	bl	80046c0 <HAL_GetTick>
 80093cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093ce:	e00a      	b.n	80093e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093d0:	f7fb f976 	bl	80046c0 <HAL_GetTick>
 80093d4:	4602      	mov	r2, r0
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	f241 3288 	movw	r2, #5000	; 0x1388
 80093de:	4293      	cmp	r3, r2
 80093e0:	d901      	bls.n	80093e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80093e2:	2303      	movs	r3, #3
 80093e4:	e04f      	b.n	8009486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093e6:	4b2b      	ldr	r3, [pc, #172]	; (8009494 <HAL_RCC_ClockConfig+0x1bc>)
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f003 020c 	and.w	r2, r3, #12
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d1eb      	bne.n	80093d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80093f8:	4b25      	ldr	r3, [pc, #148]	; (8009490 <HAL_RCC_ClockConfig+0x1b8>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 0307 	and.w	r3, r3, #7
 8009400:	683a      	ldr	r2, [r7, #0]
 8009402:	429a      	cmp	r2, r3
 8009404:	d20c      	bcs.n	8009420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009406:	4b22      	ldr	r3, [pc, #136]	; (8009490 <HAL_RCC_ClockConfig+0x1b8>)
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	b2d2      	uxtb	r2, r2
 800940c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800940e:	4b20      	ldr	r3, [pc, #128]	; (8009490 <HAL_RCC_ClockConfig+0x1b8>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0307 	and.w	r3, r3, #7
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	429a      	cmp	r2, r3
 800941a:	d001      	beq.n	8009420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e032      	b.n	8009486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 0304 	and.w	r3, r3, #4
 8009428:	2b00      	cmp	r3, #0
 800942a:	d008      	beq.n	800943e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800942c:	4b19      	ldr	r3, [pc, #100]	; (8009494 <HAL_RCC_ClockConfig+0x1bc>)
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	4916      	ldr	r1, [pc, #88]	; (8009494 <HAL_RCC_ClockConfig+0x1bc>)
 800943a:	4313      	orrs	r3, r2
 800943c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 0308 	and.w	r3, r3, #8
 8009446:	2b00      	cmp	r3, #0
 8009448:	d009      	beq.n	800945e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800944a:	4b12      	ldr	r3, [pc, #72]	; (8009494 <HAL_RCC_ClockConfig+0x1bc>)
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	00db      	lsls	r3, r3, #3
 8009458:	490e      	ldr	r1, [pc, #56]	; (8009494 <HAL_RCC_ClockConfig+0x1bc>)
 800945a:	4313      	orrs	r3, r2
 800945c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800945e:	f000 f821 	bl	80094a4 <HAL_RCC_GetSysClockFreq>
 8009462:	4602      	mov	r2, r0
 8009464:	4b0b      	ldr	r3, [pc, #44]	; (8009494 <HAL_RCC_ClockConfig+0x1bc>)
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	091b      	lsrs	r3, r3, #4
 800946a:	f003 030f 	and.w	r3, r3, #15
 800946e:	490a      	ldr	r1, [pc, #40]	; (8009498 <HAL_RCC_ClockConfig+0x1c0>)
 8009470:	5ccb      	ldrb	r3, [r1, r3]
 8009472:	fa22 f303 	lsr.w	r3, r2, r3
 8009476:	4a09      	ldr	r2, [pc, #36]	; (800949c <HAL_RCC_ClockConfig+0x1c4>)
 8009478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800947a:	4b09      	ldr	r3, [pc, #36]	; (80094a0 <HAL_RCC_ClockConfig+0x1c8>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4618      	mov	r0, r3
 8009480:	f7fa fb18 	bl	8003ab4 <HAL_InitTick>

  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	40023c00 	.word	0x40023c00
 8009494:	40023800 	.word	0x40023800
 8009498:	080100a8 	.word	0x080100a8
 800949c:	20000008 	.word	0x20000008
 80094a0:	2000000c 	.word	0x2000000c

080094a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094a4:	b5b0      	push	{r4, r5, r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80094aa:	2100      	movs	r1, #0
 80094ac:	6079      	str	r1, [r7, #4]
 80094ae:	2100      	movs	r1, #0
 80094b0:	60f9      	str	r1, [r7, #12]
 80094b2:	2100      	movs	r1, #0
 80094b4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80094b6:	2100      	movs	r1, #0
 80094b8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094ba:	4952      	ldr	r1, [pc, #328]	; (8009604 <HAL_RCC_GetSysClockFreq+0x160>)
 80094bc:	6889      	ldr	r1, [r1, #8]
 80094be:	f001 010c 	and.w	r1, r1, #12
 80094c2:	2908      	cmp	r1, #8
 80094c4:	d00d      	beq.n	80094e2 <HAL_RCC_GetSysClockFreq+0x3e>
 80094c6:	2908      	cmp	r1, #8
 80094c8:	f200 8094 	bhi.w	80095f4 <HAL_RCC_GetSysClockFreq+0x150>
 80094cc:	2900      	cmp	r1, #0
 80094ce:	d002      	beq.n	80094d6 <HAL_RCC_GetSysClockFreq+0x32>
 80094d0:	2904      	cmp	r1, #4
 80094d2:	d003      	beq.n	80094dc <HAL_RCC_GetSysClockFreq+0x38>
 80094d4:	e08e      	b.n	80095f4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80094d6:	4b4c      	ldr	r3, [pc, #304]	; (8009608 <HAL_RCC_GetSysClockFreq+0x164>)
 80094d8:	60bb      	str	r3, [r7, #8]
       break;
 80094da:	e08e      	b.n	80095fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80094dc:	4b4b      	ldr	r3, [pc, #300]	; (800960c <HAL_RCC_GetSysClockFreq+0x168>)
 80094de:	60bb      	str	r3, [r7, #8]
      break;
 80094e0:	e08b      	b.n	80095fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80094e2:	4948      	ldr	r1, [pc, #288]	; (8009604 <HAL_RCC_GetSysClockFreq+0x160>)
 80094e4:	6849      	ldr	r1, [r1, #4]
 80094e6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80094ea:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80094ec:	4945      	ldr	r1, [pc, #276]	; (8009604 <HAL_RCC_GetSysClockFreq+0x160>)
 80094ee:	6849      	ldr	r1, [r1, #4]
 80094f0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80094f4:	2900      	cmp	r1, #0
 80094f6:	d024      	beq.n	8009542 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094f8:	4942      	ldr	r1, [pc, #264]	; (8009604 <HAL_RCC_GetSysClockFreq+0x160>)
 80094fa:	6849      	ldr	r1, [r1, #4]
 80094fc:	0989      	lsrs	r1, r1, #6
 80094fe:	4608      	mov	r0, r1
 8009500:	f04f 0100 	mov.w	r1, #0
 8009504:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009508:	f04f 0500 	mov.w	r5, #0
 800950c:	ea00 0204 	and.w	r2, r0, r4
 8009510:	ea01 0305 	and.w	r3, r1, r5
 8009514:	493d      	ldr	r1, [pc, #244]	; (800960c <HAL_RCC_GetSysClockFreq+0x168>)
 8009516:	fb01 f003 	mul.w	r0, r1, r3
 800951a:	2100      	movs	r1, #0
 800951c:	fb01 f102 	mul.w	r1, r1, r2
 8009520:	1844      	adds	r4, r0, r1
 8009522:	493a      	ldr	r1, [pc, #232]	; (800960c <HAL_RCC_GetSysClockFreq+0x168>)
 8009524:	fba2 0101 	umull	r0, r1, r2, r1
 8009528:	1863      	adds	r3, r4, r1
 800952a:	4619      	mov	r1, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	461a      	mov	r2, r3
 8009530:	f04f 0300 	mov.w	r3, #0
 8009534:	f7f7 fb60 	bl	8000bf8 <__aeabi_uldivmod>
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	4613      	mov	r3, r2
 800953e:	60fb      	str	r3, [r7, #12]
 8009540:	e04a      	b.n	80095d8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009542:	4b30      	ldr	r3, [pc, #192]	; (8009604 <HAL_RCC_GetSysClockFreq+0x160>)
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	099b      	lsrs	r3, r3, #6
 8009548:	461a      	mov	r2, r3
 800954a:	f04f 0300 	mov.w	r3, #0
 800954e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009552:	f04f 0100 	mov.w	r1, #0
 8009556:	ea02 0400 	and.w	r4, r2, r0
 800955a:	ea03 0501 	and.w	r5, r3, r1
 800955e:	4620      	mov	r0, r4
 8009560:	4629      	mov	r1, r5
 8009562:	f04f 0200 	mov.w	r2, #0
 8009566:	f04f 0300 	mov.w	r3, #0
 800956a:	014b      	lsls	r3, r1, #5
 800956c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009570:	0142      	lsls	r2, r0, #5
 8009572:	4610      	mov	r0, r2
 8009574:	4619      	mov	r1, r3
 8009576:	1b00      	subs	r0, r0, r4
 8009578:	eb61 0105 	sbc.w	r1, r1, r5
 800957c:	f04f 0200 	mov.w	r2, #0
 8009580:	f04f 0300 	mov.w	r3, #0
 8009584:	018b      	lsls	r3, r1, #6
 8009586:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800958a:	0182      	lsls	r2, r0, #6
 800958c:	1a12      	subs	r2, r2, r0
 800958e:	eb63 0301 	sbc.w	r3, r3, r1
 8009592:	f04f 0000 	mov.w	r0, #0
 8009596:	f04f 0100 	mov.w	r1, #0
 800959a:	00d9      	lsls	r1, r3, #3
 800959c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80095a0:	00d0      	lsls	r0, r2, #3
 80095a2:	4602      	mov	r2, r0
 80095a4:	460b      	mov	r3, r1
 80095a6:	1912      	adds	r2, r2, r4
 80095a8:	eb45 0303 	adc.w	r3, r5, r3
 80095ac:	f04f 0000 	mov.w	r0, #0
 80095b0:	f04f 0100 	mov.w	r1, #0
 80095b4:	0299      	lsls	r1, r3, #10
 80095b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80095ba:	0290      	lsls	r0, r2, #10
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	4610      	mov	r0, r2
 80095c2:	4619      	mov	r1, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	461a      	mov	r2, r3
 80095c8:	f04f 0300 	mov.w	r3, #0
 80095cc:	f7f7 fb14 	bl	8000bf8 <__aeabi_uldivmod>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4613      	mov	r3, r2
 80095d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80095d8:	4b0a      	ldr	r3, [pc, #40]	; (8009604 <HAL_RCC_GetSysClockFreq+0x160>)
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	0c1b      	lsrs	r3, r3, #16
 80095de:	f003 0303 	and.w	r3, r3, #3
 80095e2:	3301      	adds	r3, #1
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80095f0:	60bb      	str	r3, [r7, #8]
      break;
 80095f2:	e002      	b.n	80095fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80095f4:	4b04      	ldr	r3, [pc, #16]	; (8009608 <HAL_RCC_GetSysClockFreq+0x164>)
 80095f6:	60bb      	str	r3, [r7, #8]
      break;
 80095f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80095fa:	68bb      	ldr	r3, [r7, #8]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bdb0      	pop	{r4, r5, r7, pc}
 8009604:	40023800 	.word	0x40023800
 8009608:	00f42400 	.word	0x00f42400
 800960c:	016e3600 	.word	0x016e3600

08009610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009610:	b480      	push	{r7}
 8009612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009614:	4b03      	ldr	r3, [pc, #12]	; (8009624 <HAL_RCC_GetHCLKFreq+0x14>)
 8009616:	681b      	ldr	r3, [r3, #0]
}
 8009618:	4618      	mov	r0, r3
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	20000008 	.word	0x20000008

08009628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800962c:	f7ff fff0 	bl	8009610 <HAL_RCC_GetHCLKFreq>
 8009630:	4602      	mov	r2, r0
 8009632:	4b05      	ldr	r3, [pc, #20]	; (8009648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	0a9b      	lsrs	r3, r3, #10
 8009638:	f003 0307 	and.w	r3, r3, #7
 800963c:	4903      	ldr	r1, [pc, #12]	; (800964c <HAL_RCC_GetPCLK1Freq+0x24>)
 800963e:	5ccb      	ldrb	r3, [r1, r3]
 8009640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009644:	4618      	mov	r0, r3
 8009646:	bd80      	pop	{r7, pc}
 8009648:	40023800 	.word	0x40023800
 800964c:	080100b8 	.word	0x080100b8

08009650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009654:	f7ff ffdc 	bl	8009610 <HAL_RCC_GetHCLKFreq>
 8009658:	4602      	mov	r2, r0
 800965a:	4b05      	ldr	r3, [pc, #20]	; (8009670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	0b5b      	lsrs	r3, r3, #13
 8009660:	f003 0307 	and.w	r3, r3, #7
 8009664:	4903      	ldr	r1, [pc, #12]	; (8009674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009666:	5ccb      	ldrb	r3, [r1, r3]
 8009668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800966c:	4618      	mov	r0, r3
 800966e:	bd80      	pop	{r7, pc}
 8009670:	40023800 	.word	0x40023800
 8009674:	080100b8 	.word	0x080100b8

08009678 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	220f      	movs	r2, #15
 8009686:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009688:	4b12      	ldr	r3, [pc, #72]	; (80096d4 <HAL_RCC_GetClockConfig+0x5c>)
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f003 0203 	and.w	r2, r3, #3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009694:	4b0f      	ldr	r3, [pc, #60]	; (80096d4 <HAL_RCC_GetClockConfig+0x5c>)
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80096a0:	4b0c      	ldr	r3, [pc, #48]	; (80096d4 <HAL_RCC_GetClockConfig+0x5c>)
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80096ac:	4b09      	ldr	r3, [pc, #36]	; (80096d4 <HAL_RCC_GetClockConfig+0x5c>)
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	08db      	lsrs	r3, r3, #3
 80096b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80096ba:	4b07      	ldr	r3, [pc, #28]	; (80096d8 <HAL_RCC_GetClockConfig+0x60>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0207 	and.w	r2, r3, #7
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	601a      	str	r2, [r3, #0]
}
 80096c6:	bf00      	nop
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	40023800 	.word	0x40023800
 80096d8:	40023c00 	.word	0x40023c00

080096dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d101      	bne.n	80096ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e041      	b.n	8009772 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d106      	bne.n	8009708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7fa fd38 	bl	8004178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2202      	movs	r2, #2
 800970c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	3304      	adds	r3, #4
 8009718:	4619      	mov	r1, r3
 800971a:	4610      	mov	r0, r2
 800971c:	f000 fd38 	bl	800a190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3708      	adds	r7, #8
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
	...

0800977c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b01      	cmp	r3, #1
 800978e:	d001      	beq.n	8009794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e044      	b.n	800981e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68da      	ldr	r2, [r3, #12]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f042 0201 	orr.w	r2, r2, #1
 80097aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a1e      	ldr	r2, [pc, #120]	; (800982c <HAL_TIM_Base_Start_IT+0xb0>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d018      	beq.n	80097e8 <HAL_TIM_Base_Start_IT+0x6c>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097be:	d013      	beq.n	80097e8 <HAL_TIM_Base_Start_IT+0x6c>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a1a      	ldr	r2, [pc, #104]	; (8009830 <HAL_TIM_Base_Start_IT+0xb4>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d00e      	beq.n	80097e8 <HAL_TIM_Base_Start_IT+0x6c>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a19      	ldr	r2, [pc, #100]	; (8009834 <HAL_TIM_Base_Start_IT+0xb8>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d009      	beq.n	80097e8 <HAL_TIM_Base_Start_IT+0x6c>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a17      	ldr	r2, [pc, #92]	; (8009838 <HAL_TIM_Base_Start_IT+0xbc>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d004      	beq.n	80097e8 <HAL_TIM_Base_Start_IT+0x6c>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a16      	ldr	r2, [pc, #88]	; (800983c <HAL_TIM_Base_Start_IT+0xc0>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d111      	bne.n	800980c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f003 0307 	and.w	r3, r3, #7
 80097f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2b06      	cmp	r3, #6
 80097f8:	d010      	beq.n	800981c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f042 0201 	orr.w	r2, r2, #1
 8009808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800980a:	e007      	b.n	800981c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f042 0201 	orr.w	r2, r2, #1
 800981a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	40010000 	.word	0x40010000
 8009830:	40000400 	.word	0x40000400
 8009834:	40000800 	.word	0x40000800
 8009838:	40000c00 	.word	0x40000c00
 800983c:	40014000 	.word	0x40014000

08009840 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e041      	b.n	80098d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d106      	bne.n	800986c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f839 	bl	80098de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2202      	movs	r2, #2
 8009870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3304      	adds	r3, #4
 800987c:	4619      	mov	r1, r3
 800987e:	4610      	mov	r0, r2
 8009880:	f000 fc86 	bl	800a190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80098de:	b480      	push	{r7}
 80098e0:	b083      	sub	sp, #12
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80098e6:	bf00      	nop
 80098e8:	370c      	adds	r7, #12
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
	...

080098f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d109      	bne.n	8009918 <HAL_TIM_PWM_Start+0x24>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b01      	cmp	r3, #1
 800990e:	bf14      	ite	ne
 8009910:	2301      	movne	r3, #1
 8009912:	2300      	moveq	r3, #0
 8009914:	b2db      	uxtb	r3, r3
 8009916:	e022      	b.n	800995e <HAL_TIM_PWM_Start+0x6a>
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	2b04      	cmp	r3, #4
 800991c:	d109      	bne.n	8009932 <HAL_TIM_PWM_Start+0x3e>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b01      	cmp	r3, #1
 8009928:	bf14      	ite	ne
 800992a:	2301      	movne	r3, #1
 800992c:	2300      	moveq	r3, #0
 800992e:	b2db      	uxtb	r3, r3
 8009930:	e015      	b.n	800995e <HAL_TIM_PWM_Start+0x6a>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	2b08      	cmp	r3, #8
 8009936:	d109      	bne.n	800994c <HAL_TIM_PWM_Start+0x58>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800993e:	b2db      	uxtb	r3, r3
 8009940:	2b01      	cmp	r3, #1
 8009942:	bf14      	ite	ne
 8009944:	2301      	movne	r3, #1
 8009946:	2300      	moveq	r3, #0
 8009948:	b2db      	uxtb	r3, r3
 800994a:	e008      	b.n	800995e <HAL_TIM_PWM_Start+0x6a>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b01      	cmp	r3, #1
 8009956:	bf14      	ite	ne
 8009958:	2301      	movne	r3, #1
 800995a:	2300      	moveq	r3, #0
 800995c:	b2db      	uxtb	r3, r3
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e068      	b.n	8009a38 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d104      	bne.n	8009976 <HAL_TIM_PWM_Start+0x82>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2202      	movs	r2, #2
 8009970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009974:	e013      	b.n	800999e <HAL_TIM_PWM_Start+0xaa>
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	2b04      	cmp	r3, #4
 800997a:	d104      	bne.n	8009986 <HAL_TIM_PWM_Start+0x92>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2202      	movs	r2, #2
 8009980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009984:	e00b      	b.n	800999e <HAL_TIM_PWM_Start+0xaa>
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b08      	cmp	r3, #8
 800998a:	d104      	bne.n	8009996 <HAL_TIM_PWM_Start+0xa2>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2202      	movs	r2, #2
 8009990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009994:	e003      	b.n	800999e <HAL_TIM_PWM_Start+0xaa>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2202      	movs	r2, #2
 800999a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2201      	movs	r2, #1
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 fe98 	bl	800a6dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a23      	ldr	r2, [pc, #140]	; (8009a40 <HAL_TIM_PWM_Start+0x14c>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d107      	bne.n	80099c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a1d      	ldr	r2, [pc, #116]	; (8009a40 <HAL_TIM_PWM_Start+0x14c>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d018      	beq.n	8009a02 <HAL_TIM_PWM_Start+0x10e>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099d8:	d013      	beq.n	8009a02 <HAL_TIM_PWM_Start+0x10e>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a19      	ldr	r2, [pc, #100]	; (8009a44 <HAL_TIM_PWM_Start+0x150>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d00e      	beq.n	8009a02 <HAL_TIM_PWM_Start+0x10e>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a17      	ldr	r2, [pc, #92]	; (8009a48 <HAL_TIM_PWM_Start+0x154>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d009      	beq.n	8009a02 <HAL_TIM_PWM_Start+0x10e>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a16      	ldr	r2, [pc, #88]	; (8009a4c <HAL_TIM_PWM_Start+0x158>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d004      	beq.n	8009a02 <HAL_TIM_PWM_Start+0x10e>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a14      	ldr	r2, [pc, #80]	; (8009a50 <HAL_TIM_PWM_Start+0x15c>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d111      	bne.n	8009a26 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	f003 0307 	and.w	r3, r3, #7
 8009a0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2b06      	cmp	r3, #6
 8009a12:	d010      	beq.n	8009a36 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f042 0201 	orr.w	r2, r2, #1
 8009a22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a24:	e007      	b.n	8009a36 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f042 0201 	orr.w	r2, r2, #1
 8009a34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	40010000 	.word	0x40010000
 8009a44:	40000400 	.word	0x40000400
 8009a48:	40000800 	.word	0x40000800
 8009a4c:	40000c00 	.word	0x40000c00
 8009a50:	40014000 	.word	0x40014000

08009a54 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d109      	bne.n	8009a78 <HAL_TIM_PWM_Start_IT+0x24>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	bf14      	ite	ne
 8009a70:	2301      	movne	r3, #1
 8009a72:	2300      	moveq	r3, #0
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	e022      	b.n	8009abe <HAL_TIM_PWM_Start_IT+0x6a>
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	d109      	bne.n	8009a92 <HAL_TIM_PWM_Start_IT+0x3e>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	bf14      	ite	ne
 8009a8a:	2301      	movne	r3, #1
 8009a8c:	2300      	moveq	r3, #0
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	e015      	b.n	8009abe <HAL_TIM_PWM_Start_IT+0x6a>
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b08      	cmp	r3, #8
 8009a96:	d109      	bne.n	8009aac <HAL_TIM_PWM_Start_IT+0x58>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	bf14      	ite	ne
 8009aa4:	2301      	movne	r3, #1
 8009aa6:	2300      	moveq	r3, #0
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	e008      	b.n	8009abe <HAL_TIM_PWM_Start_IT+0x6a>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	bf14      	ite	ne
 8009ab8:	2301      	movne	r3, #1
 8009aba:	2300      	moveq	r3, #0
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e0ae      	b.n	8009c24 <HAL_TIM_PWM_Start_IT+0x1d0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d104      	bne.n	8009ad6 <HAL_TIM_PWM_Start_IT+0x82>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2202      	movs	r2, #2
 8009ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ad4:	e013      	b.n	8009afe <HAL_TIM_PWM_Start_IT+0xaa>
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	2b04      	cmp	r3, #4
 8009ada:	d104      	bne.n	8009ae6 <HAL_TIM_PWM_Start_IT+0x92>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2202      	movs	r2, #2
 8009ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ae4:	e00b      	b.n	8009afe <HAL_TIM_PWM_Start_IT+0xaa>
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	2b08      	cmp	r3, #8
 8009aea:	d104      	bne.n	8009af6 <HAL_TIM_PWM_Start_IT+0xa2>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2202      	movs	r2, #2
 8009af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009af4:	e003      	b.n	8009afe <HAL_TIM_PWM_Start_IT+0xaa>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2202      	movs	r2, #2
 8009afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	2b0c      	cmp	r3, #12
 8009b02:	d841      	bhi.n	8009b88 <HAL_TIM_PWM_Start_IT+0x134>
 8009b04:	a201      	add	r2, pc, #4	; (adr r2, 8009b0c <HAL_TIM_PWM_Start_IT+0xb8>)
 8009b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0a:	bf00      	nop
 8009b0c:	08009b41 	.word	0x08009b41
 8009b10:	08009b89 	.word	0x08009b89
 8009b14:	08009b89 	.word	0x08009b89
 8009b18:	08009b89 	.word	0x08009b89
 8009b1c:	08009b53 	.word	0x08009b53
 8009b20:	08009b89 	.word	0x08009b89
 8009b24:	08009b89 	.word	0x08009b89
 8009b28:	08009b89 	.word	0x08009b89
 8009b2c:	08009b65 	.word	0x08009b65
 8009b30:	08009b89 	.word	0x08009b89
 8009b34:	08009b89 	.word	0x08009b89
 8009b38:	08009b89 	.word	0x08009b89
 8009b3c:	08009b77 	.word	0x08009b77
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68da      	ldr	r2, [r3, #12]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f042 0202 	orr.w	r2, r2, #2
 8009b4e:	60da      	str	r2, [r3, #12]
      break;
 8009b50:	e01b      	b.n	8009b8a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f042 0204 	orr.w	r2, r2, #4
 8009b60:	60da      	str	r2, [r3, #12]
      break;
 8009b62:	e012      	b.n	8009b8a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68da      	ldr	r2, [r3, #12]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f042 0208 	orr.w	r2, r2, #8
 8009b72:	60da      	str	r2, [r3, #12]
      break;
 8009b74:	e009      	b.n	8009b8a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	68da      	ldr	r2, [r3, #12]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f042 0210 	orr.w	r2, r2, #16
 8009b84:	60da      	str	r2, [r3, #12]
      break;
 8009b86:	e000      	b.n	8009b8a <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8009b88:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f000 fda2 	bl	800a6dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a23      	ldr	r2, [pc, #140]	; (8009c2c <HAL_TIM_PWM_Start_IT+0x1d8>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d107      	bne.n	8009bb2 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a1d      	ldr	r2, [pc, #116]	; (8009c2c <HAL_TIM_PWM_Start_IT+0x1d8>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d018      	beq.n	8009bee <HAL_TIM_PWM_Start_IT+0x19a>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bc4:	d013      	beq.n	8009bee <HAL_TIM_PWM_Start_IT+0x19a>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a19      	ldr	r2, [pc, #100]	; (8009c30 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d00e      	beq.n	8009bee <HAL_TIM_PWM_Start_IT+0x19a>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a17      	ldr	r2, [pc, #92]	; (8009c34 <HAL_TIM_PWM_Start_IT+0x1e0>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d009      	beq.n	8009bee <HAL_TIM_PWM_Start_IT+0x19a>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a16      	ldr	r2, [pc, #88]	; (8009c38 <HAL_TIM_PWM_Start_IT+0x1e4>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d004      	beq.n	8009bee <HAL_TIM_PWM_Start_IT+0x19a>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a14      	ldr	r2, [pc, #80]	; (8009c3c <HAL_TIM_PWM_Start_IT+0x1e8>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d111      	bne.n	8009c12 <HAL_TIM_PWM_Start_IT+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f003 0307 	and.w	r3, r3, #7
 8009bf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b06      	cmp	r3, #6
 8009bfe:	d010      	beq.n	8009c22 <HAL_TIM_PWM_Start_IT+0x1ce>
    {
      __HAL_TIM_ENABLE(htim);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f042 0201 	orr.w	r2, r2, #1
 8009c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c10:	e007      	b.n	8009c22 <HAL_TIM_PWM_Start_IT+0x1ce>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f042 0201 	orr.w	r2, r2, #1
 8009c20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	40010000 	.word	0x40010000
 8009c30:	40000400 	.word	0x40000400
 8009c34:	40000800 	.word	0x40000800
 8009c38:	40000c00 	.word	0x40000c00
 8009c3c:	40014000 	.word	0x40014000

08009c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	f003 0302 	and.w	r3, r3, #2
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d122      	bne.n	8009c9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	f003 0302 	and.w	r3, r3, #2
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d11b      	bne.n	8009c9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f06f 0202 	mvn.w	r2, #2
 8009c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2201      	movs	r2, #1
 8009c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	f003 0303 	and.w	r3, r3, #3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d003      	beq.n	8009c8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fa70 	bl	800a168 <HAL_TIM_IC_CaptureCallback>
 8009c88:	e005      	b.n	8009c96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fa62 	bl	800a154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7f8 fb75 	bl	8002380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	f003 0304 	and.w	r3, r3, #4
 8009ca6:	2b04      	cmp	r3, #4
 8009ca8:	d122      	bne.n	8009cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	f003 0304 	and.w	r3, r3, #4
 8009cb4:	2b04      	cmp	r3, #4
 8009cb6:	d11b      	bne.n	8009cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f06f 0204 	mvn.w	r2, #4
 8009cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d003      	beq.n	8009cde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fa46 	bl	800a168 <HAL_TIM_IC_CaptureCallback>
 8009cdc:	e005      	b.n	8009cea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fa38 	bl	800a154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7f8 fb4b 	bl	8002380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	f003 0308 	and.w	r3, r3, #8
 8009cfa:	2b08      	cmp	r3, #8
 8009cfc:	d122      	bne.n	8009d44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	f003 0308 	and.w	r3, r3, #8
 8009d08:	2b08      	cmp	r3, #8
 8009d0a:	d11b      	bne.n	8009d44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f06f 0208 	mvn.w	r2, #8
 8009d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2204      	movs	r2, #4
 8009d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	69db      	ldr	r3, [r3, #28]
 8009d22:	f003 0303 	and.w	r3, r3, #3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d003      	beq.n	8009d32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fa1c 	bl	800a168 <HAL_TIM_IC_CaptureCallback>
 8009d30:	e005      	b.n	8009d3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fa0e 	bl	800a154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7f8 fb21 	bl	8002380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	f003 0310 	and.w	r3, r3, #16
 8009d4e:	2b10      	cmp	r3, #16
 8009d50:	d122      	bne.n	8009d98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	f003 0310 	and.w	r3, r3, #16
 8009d5c:	2b10      	cmp	r3, #16
 8009d5e:	d11b      	bne.n	8009d98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f06f 0210 	mvn.w	r2, #16
 8009d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2208      	movs	r2, #8
 8009d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	69db      	ldr	r3, [r3, #28]
 8009d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d003      	beq.n	8009d86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f9f2 	bl	800a168 <HAL_TIM_IC_CaptureCallback>
 8009d84:	e005      	b.n	8009d92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f9e4 	bl	800a154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f7f8 faf7 	bl	8002380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	f003 0301 	and.w	r3, r3, #1
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d10e      	bne.n	8009dc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	f003 0301 	and.w	r3, r3, #1
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d107      	bne.n	8009dc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f06f 0201 	mvn.w	r2, #1
 8009dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7f9 fd60 	bl	8003884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dce:	2b80      	cmp	r3, #128	; 0x80
 8009dd0:	d10e      	bne.n	8009df0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ddc:	2b80      	cmp	r3, #128	; 0x80
 8009dde:	d107      	bne.n	8009df0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 fdf0 	bl	800a9d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dfa:	2b40      	cmp	r3, #64	; 0x40
 8009dfc:	d10e      	bne.n	8009e1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e08:	2b40      	cmp	r3, #64	; 0x40
 8009e0a:	d107      	bne.n	8009e1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f9b0 	bl	800a17c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	f003 0320 	and.w	r3, r3, #32
 8009e26:	2b20      	cmp	r3, #32
 8009e28:	d10e      	bne.n	8009e48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	f003 0320 	and.w	r3, r3, #32
 8009e34:	2b20      	cmp	r3, #32
 8009e36:	d107      	bne.n	8009e48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f06f 0220 	mvn.w	r2, #32
 8009e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fdba 	bl	800a9bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e48:	bf00      	nop
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d101      	bne.n	8009e6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009e66:	2302      	movs	r3, #2
 8009e68:	e0ac      	b.n	8009fc4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2b0c      	cmp	r3, #12
 8009e76:	f200 809f 	bhi.w	8009fb8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8009e7a:	a201      	add	r2, pc, #4	; (adr r2, 8009e80 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e80:	08009eb5 	.word	0x08009eb5
 8009e84:	08009fb9 	.word	0x08009fb9
 8009e88:	08009fb9 	.word	0x08009fb9
 8009e8c:	08009fb9 	.word	0x08009fb9
 8009e90:	08009ef5 	.word	0x08009ef5
 8009e94:	08009fb9 	.word	0x08009fb9
 8009e98:	08009fb9 	.word	0x08009fb9
 8009e9c:	08009fb9 	.word	0x08009fb9
 8009ea0:	08009f37 	.word	0x08009f37
 8009ea4:	08009fb9 	.word	0x08009fb9
 8009ea8:	08009fb9 	.word	0x08009fb9
 8009eac:	08009fb9 	.word	0x08009fb9
 8009eb0:	08009f77 	.word	0x08009f77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68b9      	ldr	r1, [r7, #8]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 f9e8 	bl	800a290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	699a      	ldr	r2, [r3, #24]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f042 0208 	orr.w	r2, r2, #8
 8009ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	699a      	ldr	r2, [r3, #24]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f022 0204 	bic.w	r2, r2, #4
 8009ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6999      	ldr	r1, [r3, #24]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	691a      	ldr	r2, [r3, #16]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	619a      	str	r2, [r3, #24]
      break;
 8009ef2:	e062      	b.n	8009fba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68b9      	ldr	r1, [r7, #8]
 8009efa:	4618      	mov	r0, r3
 8009efc:	f000 fa2e 	bl	800a35c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	699a      	ldr	r2, [r3, #24]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	699a      	ldr	r2, [r3, #24]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6999      	ldr	r1, [r3, #24]
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	021a      	lsls	r2, r3, #8
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	430a      	orrs	r2, r1
 8009f32:	619a      	str	r2, [r3, #24]
      break;
 8009f34:	e041      	b.n	8009fba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68b9      	ldr	r1, [r7, #8]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f000 fa79 	bl	800a434 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	69da      	ldr	r2, [r3, #28]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f042 0208 	orr.w	r2, r2, #8
 8009f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	69da      	ldr	r2, [r3, #28]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f022 0204 	bic.w	r2, r2, #4
 8009f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	69d9      	ldr	r1, [r3, #28]
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	691a      	ldr	r2, [r3, #16]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	430a      	orrs	r2, r1
 8009f72:	61da      	str	r2, [r3, #28]
      break;
 8009f74:	e021      	b.n	8009fba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68b9      	ldr	r1, [r7, #8]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 fac3 	bl	800a508 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	69da      	ldr	r2, [r3, #28]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	69da      	ldr	r2, [r3, #28]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	69d9      	ldr	r1, [r3, #28]
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	021a      	lsls	r2, r3, #8
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	61da      	str	r2, [r3, #28]
      break;
 8009fb6:	e000      	b.n	8009fba <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009fb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3710      	adds	r7, #16
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d101      	bne.n	8009fe4 <HAL_TIM_ConfigClockSource+0x18>
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	e0b3      	b.n	800a14c <HAL_TIM_ConfigClockSource+0x180>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2202      	movs	r2, #2
 8009ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a002:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a00a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a01c:	d03e      	beq.n	800a09c <HAL_TIM_ConfigClockSource+0xd0>
 800a01e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a022:	f200 8087 	bhi.w	800a134 <HAL_TIM_ConfigClockSource+0x168>
 800a026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a02a:	f000 8085 	beq.w	800a138 <HAL_TIM_ConfigClockSource+0x16c>
 800a02e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a032:	d87f      	bhi.n	800a134 <HAL_TIM_ConfigClockSource+0x168>
 800a034:	2b70      	cmp	r3, #112	; 0x70
 800a036:	d01a      	beq.n	800a06e <HAL_TIM_ConfigClockSource+0xa2>
 800a038:	2b70      	cmp	r3, #112	; 0x70
 800a03a:	d87b      	bhi.n	800a134 <HAL_TIM_ConfigClockSource+0x168>
 800a03c:	2b60      	cmp	r3, #96	; 0x60
 800a03e:	d050      	beq.n	800a0e2 <HAL_TIM_ConfigClockSource+0x116>
 800a040:	2b60      	cmp	r3, #96	; 0x60
 800a042:	d877      	bhi.n	800a134 <HAL_TIM_ConfigClockSource+0x168>
 800a044:	2b50      	cmp	r3, #80	; 0x50
 800a046:	d03c      	beq.n	800a0c2 <HAL_TIM_ConfigClockSource+0xf6>
 800a048:	2b50      	cmp	r3, #80	; 0x50
 800a04a:	d873      	bhi.n	800a134 <HAL_TIM_ConfigClockSource+0x168>
 800a04c:	2b40      	cmp	r3, #64	; 0x40
 800a04e:	d058      	beq.n	800a102 <HAL_TIM_ConfigClockSource+0x136>
 800a050:	2b40      	cmp	r3, #64	; 0x40
 800a052:	d86f      	bhi.n	800a134 <HAL_TIM_ConfigClockSource+0x168>
 800a054:	2b30      	cmp	r3, #48	; 0x30
 800a056:	d064      	beq.n	800a122 <HAL_TIM_ConfigClockSource+0x156>
 800a058:	2b30      	cmp	r3, #48	; 0x30
 800a05a:	d86b      	bhi.n	800a134 <HAL_TIM_ConfigClockSource+0x168>
 800a05c:	2b20      	cmp	r3, #32
 800a05e:	d060      	beq.n	800a122 <HAL_TIM_ConfigClockSource+0x156>
 800a060:	2b20      	cmp	r3, #32
 800a062:	d867      	bhi.n	800a134 <HAL_TIM_ConfigClockSource+0x168>
 800a064:	2b00      	cmp	r3, #0
 800a066:	d05c      	beq.n	800a122 <HAL_TIM_ConfigClockSource+0x156>
 800a068:	2b10      	cmp	r3, #16
 800a06a:	d05a      	beq.n	800a122 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a06c:	e062      	b.n	800a134 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6818      	ldr	r0, [r3, #0]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	6899      	ldr	r1, [r3, #8]
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	f000 fb0d 	bl	800a69c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a090:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	609a      	str	r2, [r3, #8]
      break;
 800a09a:	e04e      	b.n	800a13a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6818      	ldr	r0, [r3, #0]
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	6899      	ldr	r1, [r3, #8]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	685a      	ldr	r2, [r3, #4]
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	f000 faf6 	bl	800a69c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	689a      	ldr	r2, [r3, #8]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0be:	609a      	str	r2, [r3, #8]
      break;
 800a0c0:	e03b      	b.n	800a13a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6818      	ldr	r0, [r3, #0]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	6859      	ldr	r1, [r3, #4]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	f000 fa6a 	bl	800a5a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2150      	movs	r1, #80	; 0x50
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f000 fac3 	bl	800a666 <TIM_ITRx_SetConfig>
      break;
 800a0e0:	e02b      	b.n	800a13a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6818      	ldr	r0, [r3, #0]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	6859      	ldr	r1, [r3, #4]
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	f000 fa89 	bl	800a606 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2160      	movs	r1, #96	; 0x60
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 fab3 	bl	800a666 <TIM_ITRx_SetConfig>
      break;
 800a100:	e01b      	b.n	800a13a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6818      	ldr	r0, [r3, #0]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	6859      	ldr	r1, [r3, #4]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	461a      	mov	r2, r3
 800a110:	f000 fa4a 	bl	800a5a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2140      	movs	r1, #64	; 0x40
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 faa3 	bl	800a666 <TIM_ITRx_SetConfig>
      break;
 800a120:	e00b      	b.n	800a13a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4619      	mov	r1, r3
 800a12c:	4610      	mov	r0, r2
 800a12e:	f000 fa9a 	bl	800a666 <TIM_ITRx_SetConfig>
        break;
 800a132:	e002      	b.n	800a13a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a134:	bf00      	nop
 800a136:	e000      	b.n	800a13a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a138:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a34      	ldr	r2, [pc, #208]	; (800a274 <TIM_Base_SetConfig+0xe4>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d00f      	beq.n	800a1c8 <TIM_Base_SetConfig+0x38>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ae:	d00b      	beq.n	800a1c8 <TIM_Base_SetConfig+0x38>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a31      	ldr	r2, [pc, #196]	; (800a278 <TIM_Base_SetConfig+0xe8>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d007      	beq.n	800a1c8 <TIM_Base_SetConfig+0x38>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	4a30      	ldr	r2, [pc, #192]	; (800a27c <TIM_Base_SetConfig+0xec>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d003      	beq.n	800a1c8 <TIM_Base_SetConfig+0x38>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a2f      	ldr	r2, [pc, #188]	; (800a280 <TIM_Base_SetConfig+0xf0>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d108      	bne.n	800a1da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a25      	ldr	r2, [pc, #148]	; (800a274 <TIM_Base_SetConfig+0xe4>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d01b      	beq.n	800a21a <TIM_Base_SetConfig+0x8a>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1e8:	d017      	beq.n	800a21a <TIM_Base_SetConfig+0x8a>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a22      	ldr	r2, [pc, #136]	; (800a278 <TIM_Base_SetConfig+0xe8>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d013      	beq.n	800a21a <TIM_Base_SetConfig+0x8a>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4a21      	ldr	r2, [pc, #132]	; (800a27c <TIM_Base_SetConfig+0xec>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d00f      	beq.n	800a21a <TIM_Base_SetConfig+0x8a>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4a20      	ldr	r2, [pc, #128]	; (800a280 <TIM_Base_SetConfig+0xf0>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d00b      	beq.n	800a21a <TIM_Base_SetConfig+0x8a>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a1f      	ldr	r2, [pc, #124]	; (800a284 <TIM_Base_SetConfig+0xf4>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d007      	beq.n	800a21a <TIM_Base_SetConfig+0x8a>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4a1e      	ldr	r2, [pc, #120]	; (800a288 <TIM_Base_SetConfig+0xf8>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d003      	beq.n	800a21a <TIM_Base_SetConfig+0x8a>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a1d      	ldr	r2, [pc, #116]	; (800a28c <TIM_Base_SetConfig+0xfc>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d108      	bne.n	800a22c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	4313      	orrs	r3, r2
 800a22a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	695b      	ldr	r3, [r3, #20]
 800a236:	4313      	orrs	r3, r2
 800a238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	689a      	ldr	r2, [r3, #8]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	4a08      	ldr	r2, [pc, #32]	; (800a274 <TIM_Base_SetConfig+0xe4>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d103      	bne.n	800a260 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	691a      	ldr	r2, [r3, #16]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	615a      	str	r2, [r3, #20]
}
 800a266:	bf00      	nop
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	40010000 	.word	0x40010000
 800a278:	40000400 	.word	0x40000400
 800a27c:	40000800 	.word	0x40000800
 800a280:	40000c00 	.word	0x40000c00
 800a284:	40014000 	.word	0x40014000
 800a288:	40014400 	.word	0x40014400
 800a28c:	40014800 	.word	0x40014800

0800a290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a290:	b480      	push	{r7}
 800a292:	b087      	sub	sp, #28
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	f023 0201 	bic.w	r2, r3, #1
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a1b      	ldr	r3, [r3, #32]
 800a2aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f023 0303 	bic.w	r3, r3, #3
 800a2c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f023 0302 	bic.w	r3, r3, #2
 800a2d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4a1c      	ldr	r2, [pc, #112]	; (800a358 <TIM_OC1_SetConfig+0xc8>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d10c      	bne.n	800a306 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	f023 0308 	bic.w	r3, r3, #8
 800a2f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	f023 0304 	bic.w	r3, r3, #4
 800a304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a13      	ldr	r2, [pc, #76]	; (800a358 <TIM_OC1_SetConfig+0xc8>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d111      	bne.n	800a332 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a31c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	4313      	orrs	r3, r2
 800a326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	699b      	ldr	r3, [r3, #24]
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	4313      	orrs	r3, r2
 800a330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	685a      	ldr	r2, [r3, #4]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	697a      	ldr	r2, [r7, #20]
 800a34a:	621a      	str	r2, [r3, #32]
}
 800a34c:	bf00      	nop
 800a34e:	371c      	adds	r7, #28
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	40010000 	.word	0x40010000

0800a35c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	f023 0210 	bic.w	r2, r3, #16
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a38a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	021b      	lsls	r3, r3, #8
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	f023 0320 	bic.w	r3, r3, #32
 800a3a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	011b      	lsls	r3, r3, #4
 800a3ae:	697a      	ldr	r2, [r7, #20]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a1e      	ldr	r2, [pc, #120]	; (800a430 <TIM_OC2_SetConfig+0xd4>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d10d      	bne.n	800a3d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	011b      	lsls	r3, r3, #4
 800a3ca:	697a      	ldr	r2, [r7, #20]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a15      	ldr	r2, [pc, #84]	; (800a430 <TIM_OC2_SetConfig+0xd4>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d113      	bne.n	800a408 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	695b      	ldr	r3, [r3, #20]
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	4313      	orrs	r3, r2
 800a406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	685a      	ldr	r2, [r3, #4]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	621a      	str	r2, [r3, #32]
}
 800a422:	bf00      	nop
 800a424:	371c      	adds	r7, #28
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	40010000 	.word	0x40010000

0800a434 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a434:	b480      	push	{r7}
 800a436:	b087      	sub	sp, #28
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a1b      	ldr	r3, [r3, #32]
 800a442:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a1b      	ldr	r3, [r3, #32]
 800a44e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f023 0303 	bic.w	r3, r3, #3
 800a46a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	4313      	orrs	r3, r2
 800a474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a47c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	021b      	lsls	r3, r3, #8
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	4313      	orrs	r3, r2
 800a488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a1d      	ldr	r2, [pc, #116]	; (800a504 <TIM_OC3_SetConfig+0xd0>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d10d      	bne.n	800a4ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	021b      	lsls	r3, r3, #8
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a4ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a14      	ldr	r2, [pc, #80]	; (800a504 <TIM_OC3_SetConfig+0xd0>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d113      	bne.n	800a4de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	695b      	ldr	r3, [r3, #20]
 800a4ca:	011b      	lsls	r3, r3, #4
 800a4cc:	693a      	ldr	r2, [r7, #16]
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	699b      	ldr	r3, [r3, #24]
 800a4d6:	011b      	lsls	r3, r3, #4
 800a4d8:	693a      	ldr	r2, [r7, #16]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	693a      	ldr	r2, [r7, #16]
 800a4e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	68fa      	ldr	r2, [r7, #12]
 800a4e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	685a      	ldr	r2, [r3, #4]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	621a      	str	r2, [r3, #32]
}
 800a4f8:	bf00      	nop
 800a4fa:	371c      	adds	r7, #28
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr
 800a504:	40010000 	.word	0x40010000

0800a508 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a508:	b480      	push	{r7}
 800a50a:	b087      	sub	sp, #28
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a1b      	ldr	r3, [r3, #32]
 800a516:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a1b      	ldr	r3, [r3, #32]
 800a522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	69db      	ldr	r3, [r3, #28]
 800a52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a53e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	021b      	lsls	r3, r3, #8
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	4313      	orrs	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	031b      	lsls	r3, r3, #12
 800a55a:	693a      	ldr	r2, [r7, #16]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a10      	ldr	r2, [pc, #64]	; (800a5a4 <TIM_OC4_SetConfig+0x9c>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d109      	bne.n	800a57c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a56e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	695b      	ldr	r3, [r3, #20]
 800a574:	019b      	lsls	r3, r3, #6
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	4313      	orrs	r3, r2
 800a57a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	693a      	ldr	r2, [r7, #16]
 800a594:	621a      	str	r2, [r3, #32]
}
 800a596:	bf00      	nop
 800a598:	371c      	adds	r7, #28
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	40010000 	.word	0x40010000

0800a5a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b087      	sub	sp, #28
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6a1b      	ldr	r3, [r3, #32]
 800a5b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6a1b      	ldr	r3, [r3, #32]
 800a5be:	f023 0201 	bic.w	r2, r3, #1
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	699b      	ldr	r3, [r3, #24]
 800a5ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	011b      	lsls	r3, r3, #4
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	f023 030a 	bic.w	r3, r3, #10
 800a5e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	693a      	ldr	r2, [r7, #16]
 800a5f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	621a      	str	r2, [r3, #32]
}
 800a5fa:	bf00      	nop
 800a5fc:	371c      	adds	r7, #28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a606:	b480      	push	{r7}
 800a608:	b087      	sub	sp, #28
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	60f8      	str	r0, [r7, #12]
 800a60e:	60b9      	str	r1, [r7, #8]
 800a610:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6a1b      	ldr	r3, [r3, #32]
 800a616:	f023 0210 	bic.w	r2, r3, #16
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6a1b      	ldr	r3, [r3, #32]
 800a628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	031b      	lsls	r3, r3, #12
 800a636:	697a      	ldr	r2, [r7, #20]
 800a638:	4313      	orrs	r3, r2
 800a63a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a642:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	011b      	lsls	r3, r3, #4
 800a648:	693a      	ldr	r2, [r7, #16]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	697a      	ldr	r2, [r7, #20]
 800a652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	621a      	str	r2, [r3, #32]
}
 800a65a:	bf00      	nop
 800a65c:	371c      	adds	r7, #28
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr

0800a666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a666:	b480      	push	{r7}
 800a668:	b085      	sub	sp, #20
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
 800a66e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a67c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a67e:	683a      	ldr	r2, [r7, #0]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	4313      	orrs	r3, r2
 800a684:	f043 0307 	orr.w	r3, r3, #7
 800a688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	609a      	str	r2, [r3, #8]
}
 800a690:	bf00      	nop
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
 800a6a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	021a      	lsls	r2, r3, #8
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	431a      	orrs	r2, r3
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	697a      	ldr	r2, [r7, #20]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	609a      	str	r2, [r3, #8]
}
 800a6d0:	bf00      	nop
 800a6d2:	371c      	adds	r7, #28
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	f003 031f 	and.w	r3, r3, #31
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	6a1a      	ldr	r2, [r3, #32]
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	43db      	mvns	r3, r3
 800a6fe:	401a      	ands	r2, r3
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6a1a      	ldr	r2, [r3, #32]
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	f003 031f 	and.w	r3, r3, #31
 800a70e:	6879      	ldr	r1, [r7, #4]
 800a710:	fa01 f303 	lsl.w	r3, r1, r3
 800a714:	431a      	orrs	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	621a      	str	r2, [r3, #32]
}
 800a71a:	bf00      	nop
 800a71c:	371c      	adds	r7, #28
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
	...

0800a728 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d109      	bne.n	800a74c <HAL_TIMEx_PWMN_Start_IT+0x24>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b01      	cmp	r3, #1
 800a742:	bf14      	ite	ne
 800a744:	2301      	movne	r3, #1
 800a746:	2300      	moveq	r3, #0
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	e022      	b.n	800a792 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	2b04      	cmp	r3, #4
 800a750:	d109      	bne.n	800a766 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	bf14      	ite	ne
 800a75e:	2301      	movne	r3, #1
 800a760:	2300      	moveq	r3, #0
 800a762:	b2db      	uxtb	r3, r3
 800a764:	e015      	b.n	800a792 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2b08      	cmp	r3, #8
 800a76a:	d109      	bne.n	800a780 <HAL_TIMEx_PWMN_Start_IT+0x58>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a772:	b2db      	uxtb	r3, r3
 800a774:	2b01      	cmp	r3, #1
 800a776:	bf14      	ite	ne
 800a778:	2301      	movne	r3, #1
 800a77a:	2300      	moveq	r3, #0
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	e008      	b.n	800a792 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a786:	b2db      	uxtb	r3, r3
 800a788:	2b01      	cmp	r3, #1
 800a78a:	bf14      	ite	ne
 800a78c:	2301      	movne	r3, #1
 800a78e:	2300      	moveq	r3, #0
 800a790:	b2db      	uxtb	r3, r3
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <HAL_TIMEx_PWMN_Start_IT+0x72>
  {
    return HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	e094      	b.n	800a8c4 <HAL_TIMEx_PWMN_Start_IT+0x19c>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d104      	bne.n	800a7aa <HAL_TIMEx_PWMN_Start_IT+0x82>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7a8:	e013      	b.n	800a7d2 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	2b04      	cmp	r3, #4
 800a7ae:	d104      	bne.n	800a7ba <HAL_TIMEx_PWMN_Start_IT+0x92>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7b8:	e00b      	b.n	800a7d2 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2b08      	cmp	r3, #8
 800a7be:	d104      	bne.n	800a7ca <HAL_TIMEx_PWMN_Start_IT+0xa2>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7c8:	e003      	b.n	800a7d2 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2202      	movs	r2, #2
 800a7ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	2b08      	cmp	r3, #8
 800a7d6:	d01b      	beq.n	800a810 <HAL_TIMEx_PWMN_Start_IT+0xe8>
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	2b08      	cmp	r3, #8
 800a7dc:	d821      	bhi.n	800a822 <HAL_TIMEx_PWMN_Start_IT+0xfa>
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d003      	beq.n	800a7ec <HAL_TIMEx_PWMN_Start_IT+0xc4>
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	2b04      	cmp	r3, #4
 800a7e8:	d009      	beq.n	800a7fe <HAL_TIMEx_PWMN_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800a7ea:	e01a      	b.n	800a822 <HAL_TIMEx_PWMN_Start_IT+0xfa>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	68da      	ldr	r2, [r3, #12]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f042 0202 	orr.w	r2, r2, #2
 800a7fa:	60da      	str	r2, [r3, #12]
      break;
 800a7fc:	e012      	b.n	800a824 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68da      	ldr	r2, [r3, #12]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f042 0204 	orr.w	r2, r2, #4
 800a80c:	60da      	str	r2, [r3, #12]
      break;
 800a80e:	e009      	b.n	800a824 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68da      	ldr	r2, [r3, #12]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f042 0208 	orr.w	r2, r2, #8
 800a81e:	60da      	str	r2, [r3, #12]
      break;
 800a820:	e000      	b.n	800a824 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      break;
 800a822:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68da      	ldr	r2, [r3, #12]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a832:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2204      	movs	r2, #4
 800a83a:	6839      	ldr	r1, [r7, #0]
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 f8d1 	bl	800a9e4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a850:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a1d      	ldr	r2, [pc, #116]	; (800a8cc <HAL_TIMEx_PWMN_Start_IT+0x1a4>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d018      	beq.n	800a88e <HAL_TIMEx_PWMN_Start_IT+0x166>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a864:	d013      	beq.n	800a88e <HAL_TIMEx_PWMN_Start_IT+0x166>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a19      	ldr	r2, [pc, #100]	; (800a8d0 <HAL_TIMEx_PWMN_Start_IT+0x1a8>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d00e      	beq.n	800a88e <HAL_TIMEx_PWMN_Start_IT+0x166>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a17      	ldr	r2, [pc, #92]	; (800a8d4 <HAL_TIMEx_PWMN_Start_IT+0x1ac>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d009      	beq.n	800a88e <HAL_TIMEx_PWMN_Start_IT+0x166>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a16      	ldr	r2, [pc, #88]	; (800a8d8 <HAL_TIMEx_PWMN_Start_IT+0x1b0>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d004      	beq.n	800a88e <HAL_TIMEx_PWMN_Start_IT+0x166>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a14      	ldr	r2, [pc, #80]	; (800a8dc <HAL_TIMEx_PWMN_Start_IT+0x1b4>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d111      	bne.n	800a8b2 <HAL_TIMEx_PWMN_Start_IT+0x18a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	f003 0307 	and.w	r3, r3, #7
 800a898:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2b06      	cmp	r3, #6
 800a89e:	d010      	beq.n	800a8c2 <HAL_TIMEx_PWMN_Start_IT+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f042 0201 	orr.w	r2, r2, #1
 800a8ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8b0:	e007      	b.n	800a8c2 <HAL_TIMEx_PWMN_Start_IT+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f042 0201 	orr.w	r2, r2, #1
 800a8c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	40010000 	.word	0x40010000
 800a8d0:	40000400 	.word	0x40000400
 800a8d4:	40000800 	.word	0x40000800
 800a8d8:	40000c00 	.word	0x40000c00
 800a8dc:	40014000 	.word	0x40014000

0800a8e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d101      	bne.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8f4:	2302      	movs	r3, #2
 800a8f6:	e050      	b.n	800a99a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2202      	movs	r2, #2
 800a904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a91e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	4313      	orrs	r3, r2
 800a928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a1c      	ldr	r2, [pc, #112]	; (800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d018      	beq.n	800a96e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a944:	d013      	beq.n	800a96e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a18      	ldr	r2, [pc, #96]	; (800a9ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d00e      	beq.n	800a96e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a16      	ldr	r2, [pc, #88]	; (800a9b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d009      	beq.n	800a96e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a15      	ldr	r2, [pc, #84]	; (800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d004      	beq.n	800a96e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a13      	ldr	r2, [pc, #76]	; (800a9b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d10c      	bne.n	800a988 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3714      	adds	r7, #20
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	40010000 	.word	0x40010000
 800a9ac:	40000400 	.word	0x40000400
 800a9b0:	40000800 	.word	0x40000800
 800a9b4:	40000c00 	.word	0x40000c00
 800a9b8:	40014000 	.word	0x40014000

0800a9bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b087      	sub	sp, #28
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	f003 031f 	and.w	r3, r3, #31
 800a9f6:	2204      	movs	r2, #4
 800a9f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6a1a      	ldr	r2, [r3, #32]
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	43db      	mvns	r3, r3
 800aa06:	401a      	ands	r2, r3
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6a1a      	ldr	r2, [r3, #32]
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	f003 031f 	and.w	r3, r3, #31
 800aa16:	6879      	ldr	r1, [r7, #4]
 800aa18:	fa01 f303 	lsl.w	r3, r1, r3
 800aa1c:	431a      	orrs	r2, r3
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	621a      	str	r2, [r3, #32]
}
 800aa22:	bf00      	nop
 800aa24:	371c      	adds	r7, #28
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b082      	sub	sp, #8
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d101      	bne.n	800aa40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	e03f      	b.n	800aac0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d106      	bne.n	800aa5a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7f9 fce1 	bl	800441c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2224      	movs	r2, #36	; 0x24
 800aa5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	68da      	ldr	r2, [r3, #12]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa70:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fd92 	bl	800b59c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	691a      	ldr	r2, [r3, #16]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa86:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	695a      	ldr	r2, [r3, #20]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa96:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	68da      	ldr	r2, [r3, #12]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aaa6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2220      	movs	r2, #32
 800aab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2220      	movs	r2, #32
 800aaba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3708      	adds	r7, #8
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b08a      	sub	sp, #40	; 0x28
 800aacc:	af02      	add	r7, sp, #8
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	603b      	str	r3, [r7, #0]
 800aad4:	4613      	mov	r3, r2
 800aad6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aad8:	2300      	movs	r3, #0
 800aada:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	2b20      	cmp	r3, #32
 800aae6:	d17c      	bne.n	800abe2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d002      	beq.n	800aaf4 <HAL_UART_Transmit+0x2c>
 800aaee:	88fb      	ldrh	r3, [r7, #6]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d101      	bne.n	800aaf8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	e075      	b.n	800abe4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d101      	bne.n	800ab06 <HAL_UART_Transmit+0x3e>
 800ab02:	2302      	movs	r3, #2
 800ab04:	e06e      	b.n	800abe4 <HAL_UART_Transmit+0x11c>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2221      	movs	r2, #33	; 0x21
 800ab18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab1c:	f7f9 fdd0 	bl	80046c0 <HAL_GetTick>
 800ab20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	88fa      	ldrh	r2, [r7, #6]
 800ab26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	88fa      	ldrh	r2, [r7, #6]
 800ab2c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab36:	d108      	bne.n	800ab4a <HAL_UART_Transmit+0x82>
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	691b      	ldr	r3, [r3, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d104      	bne.n	800ab4a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ab40:	2300      	movs	r3, #0
 800ab42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	61bb      	str	r3, [r7, #24]
 800ab48:	e003      	b.n	800ab52 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2200      	movs	r2, #0
 800ab56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ab5a:	e02a      	b.n	800abb2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	2200      	movs	r2, #0
 800ab64:	2180      	movs	r1, #128	; 0x80
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f000 fb14 	bl	800b194 <UART_WaitOnFlagUntilTimeout>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d001      	beq.n	800ab76 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ab72:	2303      	movs	r3, #3
 800ab74:	e036      	b.n	800abe4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10b      	bne.n	800ab94 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	881b      	ldrh	r3, [r3, #0]
 800ab80:	461a      	mov	r2, r3
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab8a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ab8c:	69bb      	ldr	r3, [r7, #24]
 800ab8e:	3302      	adds	r3, #2
 800ab90:	61bb      	str	r3, [r7, #24]
 800ab92:	e007      	b.n	800aba4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	781a      	ldrb	r2, [r3, #0]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	3301      	adds	r3, #1
 800aba2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	3b01      	subs	r3, #1
 800abac:	b29a      	uxth	r2, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1cf      	bne.n	800ab5c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	2200      	movs	r2, #0
 800abc4:	2140      	movs	r1, #64	; 0x40
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f000 fae4 	bl	800b194 <UART_WaitOnFlagUntilTimeout>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800abd2:	2303      	movs	r3, #3
 800abd4:	e006      	b.n	800abe4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2220      	movs	r2, #32
 800abda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	e000      	b.n	800abe4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800abe2:	2302      	movs	r3, #2
  }
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3720      	adds	r7, #32
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b086      	sub	sp, #24
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	4613      	mov	r3, r2
 800abf8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	2b20      	cmp	r3, #32
 800ac04:	d13c      	bne.n	800ac80 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800ac0c:	88fb      	ldrh	r3, [r7, #6]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d101      	bne.n	800ac16 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800ac12:	2301      	movs	r3, #1
 800ac14:	e035      	b.n	800ac82 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d101      	bne.n	800ac24 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800ac20:	2302      	movs	r3, #2
 800ac22:	e02e      	b.n	800ac82 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ac32:	88fb      	ldrh	r3, [r7, #6]
 800ac34:	461a      	mov	r2, r3
 800ac36:	68b9      	ldr	r1, [r7, #8]
 800ac38:	68f8      	ldr	r0, [r7, #12]
 800ac3a:	f000 faf5 	bl	800b228 <UART_Start_Receive_DMA>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800ac42:	7dfb      	ldrb	r3, [r7, #23]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d119      	bne.n	800ac7c <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d113      	bne.n	800ac78 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ac50:	2300      	movs	r3, #0
 800ac52:	613b      	str	r3, [r7, #16]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	613b      	str	r3, [r7, #16]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	613b      	str	r3, [r7, #16]
 800ac64:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	68da      	ldr	r2, [r3, #12]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f042 0210 	orr.w	r2, r2, #16
 800ac74:	60da      	str	r2, [r3, #12]
 800ac76:	e001      	b.n	800ac7c <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800ac7c:	7dfb      	ldrb	r3, [r7, #23]
 800ac7e:	e000      	b.n	800ac82 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 800ac80:	2302      	movs	r3, #2
  }
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3718      	adds	r7, #24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
	...

0800ac8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08a      	sub	sp, #40	; 0x28
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800acac:	2300      	movs	r3, #0
 800acae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800acb0:	2300      	movs	r3, #0
 800acb2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800acb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb6:	f003 030f 	and.w	r3, r3, #15
 800acba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d10d      	bne.n	800acde <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800acc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc4:	f003 0320 	and.w	r3, r3, #32
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d008      	beq.n	800acde <HAL_UART_IRQHandler+0x52>
 800accc:	6a3b      	ldr	r3, [r7, #32]
 800acce:	f003 0320 	and.w	r3, r3, #32
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d003      	beq.n	800acde <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fbc9 	bl	800b46e <UART_Receive_IT>
      return;
 800acdc:	e17c      	b.n	800afd8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 80b1 	beq.w	800ae48 <HAL_UART_IRQHandler+0x1bc>
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	f003 0301 	and.w	r3, r3, #1
 800acec:	2b00      	cmp	r3, #0
 800acee:	d105      	bne.n	800acfc <HAL_UART_IRQHandler+0x70>
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 80a6 	beq.w	800ae48 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfe:	f003 0301 	and.w	r3, r3, #1
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00a      	beq.n	800ad1c <HAL_UART_IRQHandler+0x90>
 800ad06:	6a3b      	ldr	r3, [r7, #32]
 800ad08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d005      	beq.n	800ad1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad14:	f043 0201 	orr.w	r2, r3, #1
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1e:	f003 0304 	and.w	r3, r3, #4
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00a      	beq.n	800ad3c <HAL_UART_IRQHandler+0xb0>
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	f003 0301 	and.w	r3, r3, #1
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d005      	beq.n	800ad3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad34:	f043 0202 	orr.w	r2, r3, #2
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3e:	f003 0302 	and.w	r3, r3, #2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00a      	beq.n	800ad5c <HAL_UART_IRQHandler+0xd0>
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	f003 0301 	and.w	r3, r3, #1
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d005      	beq.n	800ad5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad54:	f043 0204 	orr.w	r2, r3, #4
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5e:	f003 0308 	and.w	r3, r3, #8
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00f      	beq.n	800ad86 <HAL_UART_IRQHandler+0xfa>
 800ad66:	6a3b      	ldr	r3, [r7, #32]
 800ad68:	f003 0320 	and.w	r3, r3, #32
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d104      	bne.n	800ad7a <HAL_UART_IRQHandler+0xee>
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	f003 0301 	and.w	r3, r3, #1
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d005      	beq.n	800ad86 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7e:	f043 0208 	orr.w	r2, r3, #8
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f000 811f 	beq.w	800afce <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	f003 0320 	and.w	r3, r3, #32
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d007      	beq.n	800adaa <HAL_UART_IRQHandler+0x11e>
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	f003 0320 	and.w	r3, r3, #32
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 fb62 	bl	800b46e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	695b      	ldr	r3, [r3, #20]
 800adb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adb4:	2b40      	cmp	r3, #64	; 0x40
 800adb6:	bf0c      	ite	eq
 800adb8:	2301      	moveq	r3, #1
 800adba:	2300      	movne	r3, #0
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc4:	f003 0308 	and.w	r3, r3, #8
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d102      	bne.n	800add2 <HAL_UART_IRQHandler+0x146>
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d031      	beq.n	800ae36 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 faa2 	bl	800b31c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade2:	2b40      	cmp	r3, #64	; 0x40
 800ade4:	d123      	bne.n	800ae2e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	695a      	ldr	r2, [r3, #20]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adf4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d013      	beq.n	800ae26 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae02:	4a77      	ldr	r2, [pc, #476]	; (800afe0 <HAL_UART_IRQHandler+0x354>)
 800ae04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fa fb60 	bl	80054d0 <HAL_DMA_Abort_IT>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d016      	beq.n	800ae44 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae20:	4610      	mov	r0, r2
 800ae22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae24:	e00e      	b.n	800ae44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 f8fa 	bl	800b020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae2c:	e00a      	b.n	800ae44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 f8f6 	bl	800b020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae34:	e006      	b.n	800ae44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f8f2 	bl	800b020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ae42:	e0c4      	b.n	800afce <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae44:	bf00      	nop
    return;
 800ae46:	e0c2      	b.n	800afce <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	f040 80a2 	bne.w	800af96 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800ae52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae54:	f003 0310 	and.w	r3, r3, #16
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f000 809c 	beq.w	800af96 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800ae5e:	6a3b      	ldr	r3, [r7, #32]
 800ae60:	f003 0310 	and.w	r3, r3, #16
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f000 8096 	beq.w	800af96 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	60fb      	str	r3, [r7, #12]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	60fb      	str	r3, [r7, #12]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	60fb      	str	r3, [r7, #12]
 800ae7e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae8a:	2b40      	cmp	r3, #64	; 0x40
 800ae8c:	d14f      	bne.n	800af2e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800ae98:	8a3b      	ldrh	r3, [r7, #16]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 8099 	beq.w	800afd2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aea4:	8a3a      	ldrh	r2, [r7, #16]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	f080 8093 	bcs.w	800afd2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	8a3a      	ldrh	r2, [r7, #16]
 800aeb0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb6:	69db      	ldr	r3, [r3, #28]
 800aeb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aebc:	d02b      	beq.n	800af16 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	68da      	ldr	r2, [r3, #12]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aecc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	695a      	ldr	r2, [r3, #20]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f022 0201 	bic.w	r2, r2, #1
 800aedc:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	695a      	ldr	r2, [r3, #20]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aeec:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2220      	movs	r2, #32
 800aef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68da      	ldr	r2, [r3, #12]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f022 0210 	bic.w	r2, r2, #16
 800af0a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af10:	4618      	mov	r0, r3
 800af12:	f7fa fa6d 	bl	80053f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af1e:	b29b      	uxth	r3, r3
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	b29b      	uxth	r3, r3
 800af24:	4619      	mov	r1, r3
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f7f8 fbc8 	bl	80036bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800af2c:	e051      	b.n	800afd2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af36:	b29b      	uxth	r3, r3
 800af38:	1ad3      	subs	r3, r2, r3
 800af3a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af40:	b29b      	uxth	r3, r3
 800af42:	2b00      	cmp	r3, #0
 800af44:	d047      	beq.n	800afd6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800af46:	8a7b      	ldrh	r3, [r7, #18]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d044      	beq.n	800afd6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68da      	ldr	r2, [r3, #12]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800af5a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	695a      	ldr	r2, [r3, #20]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f022 0201 	bic.w	r2, r2, #1
 800af6a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2220      	movs	r2, #32
 800af70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	68da      	ldr	r2, [r3, #12]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f022 0210 	bic.w	r2, r2, #16
 800af88:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800af8a:	8a7b      	ldrh	r3, [r7, #18]
 800af8c:	4619      	mov	r1, r3
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f7f8 fb94 	bl	80036bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800af94:	e01f      	b.n	800afd6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800af96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d008      	beq.n	800afb2 <HAL_UART_IRQHandler+0x326>
 800afa0:	6a3b      	ldr	r3, [r7, #32]
 800afa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d003      	beq.n	800afb2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f9f7 	bl	800b39e <UART_Transmit_IT>
    return;
 800afb0:	e012      	b.n	800afd8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800afb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00d      	beq.n	800afd8 <HAL_UART_IRQHandler+0x34c>
 800afbc:	6a3b      	ldr	r3, [r7, #32]
 800afbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d008      	beq.n	800afd8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fa39 	bl	800b43e <UART_EndTransmit_IT>
    return;
 800afcc:	e004      	b.n	800afd8 <HAL_UART_IRQHandler+0x34c>
    return;
 800afce:	bf00      	nop
 800afd0:	e002      	b.n	800afd8 <HAL_UART_IRQHandler+0x34c>
      return;
 800afd2:	bf00      	nop
 800afd4:	e000      	b.n	800afd8 <HAL_UART_IRQHandler+0x34c>
      return;
 800afd6:	bf00      	nop
  }
}
 800afd8:	3728      	adds	r7, #40	; 0x28
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	0800b377 	.word	0x0800b377

0800afe4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b014:	bf00      	nop
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b028:	bf00      	nop
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b040:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d12a      	bne.n	800b0a6 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2200      	movs	r2, #0
 800b054:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68da      	ldr	r2, [r3, #12]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b064:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	695a      	ldr	r2, [r3, #20]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f022 0201 	bic.w	r2, r2, #1
 800b074:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	695a      	ldr	r2, [r3, #20]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b084:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2220      	movs	r2, #32
 800b08a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b092:	2b01      	cmp	r3, #1
 800b094:	d107      	bne.n	800b0a6 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	68da      	ldr	r2, [r3, #12]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f022 0210 	bic.w	r2, r2, #16
 800b0a4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d106      	bne.n	800b0bc <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f7f8 fb01 	bl	80036bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0ba:	e002      	b.n	800b0c2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f7ff ff9b 	bl	800aff8 <HAL_UART_RxCpltCallback>
}
 800b0c2:	bf00      	nop
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d108      	bne.n	800b0f2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0e4:	085b      	lsrs	r3, r3, #1
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	f7f8 fae6 	bl	80036bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0f0:	e002      	b.n	800b0f8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f7ff ff8a 	bl	800b00c <HAL_UART_RxHalfCpltCallback>
}
 800b0f8:	bf00      	nop
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b108:	2300      	movs	r3, #0
 800b10a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b110:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	695b      	ldr	r3, [r3, #20]
 800b118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b11c:	2b80      	cmp	r3, #128	; 0x80
 800b11e:	bf0c      	ite	eq
 800b120:	2301      	moveq	r3, #1
 800b122:	2300      	movne	r3, #0
 800b124:	b2db      	uxtb	r3, r3
 800b126:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	2b21      	cmp	r3, #33	; 0x21
 800b132:	d108      	bne.n	800b146 <UART_DMAError+0x46>
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d005      	beq.n	800b146 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	2200      	movs	r2, #0
 800b13e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b140:	68b8      	ldr	r0, [r7, #8]
 800b142:	f000 f8d5 	bl	800b2f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	695b      	ldr	r3, [r3, #20]
 800b14c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b150:	2b40      	cmp	r3, #64	; 0x40
 800b152:	bf0c      	ite	eq
 800b154:	2301      	moveq	r3, #1
 800b156:	2300      	movne	r3, #0
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b162:	b2db      	uxtb	r3, r3
 800b164:	2b22      	cmp	r3, #34	; 0x22
 800b166:	d108      	bne.n	800b17a <UART_DMAError+0x7a>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d005      	beq.n	800b17a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	2200      	movs	r2, #0
 800b172:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b174:	68b8      	ldr	r0, [r7, #8]
 800b176:	f000 f8d1 	bl	800b31c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17e:	f043 0210 	orr.w	r2, r3, #16
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b186:	68b8      	ldr	r0, [r7, #8]
 800b188:	f7ff ff4a 	bl	800b020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b18c:	bf00      	nop
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	603b      	str	r3, [r7, #0]
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1a4:	e02c      	b.n	800b200 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1ac:	d028      	beq.n	800b200 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d007      	beq.n	800b1c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b1b4:	f7f9 fa84 	bl	80046c0 <HAL_GetTick>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	1ad3      	subs	r3, r2, r3
 800b1be:	69ba      	ldr	r2, [r7, #24]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d21d      	bcs.n	800b200 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	68da      	ldr	r2, [r3, #12]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b1d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	695a      	ldr	r2, [r3, #20]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f022 0201 	bic.w	r2, r2, #1
 800b1e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2220      	movs	r2, #32
 800b1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2220      	movs	r2, #32
 800b1f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	e00f      	b.n	800b220 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	4013      	ands	r3, r2
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	bf0c      	ite	eq
 800b210:	2301      	moveq	r3, #1
 800b212:	2300      	movne	r3, #0
 800b214:	b2db      	uxtb	r3, r3
 800b216:	461a      	mov	r2, r3
 800b218:	79fb      	ldrb	r3, [r7, #7]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d0c3      	beq.n	800b1a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b21e:	2300      	movs	r3, #0
}
 800b220:	4618      	mov	r0, r3
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	4613      	mov	r3, r2
 800b234:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b236:	68ba      	ldr	r2, [r7, #8]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	88fa      	ldrh	r2, [r7, #6]
 800b240:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2222      	movs	r2, #34	; 0x22
 800b24c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b254:	4a23      	ldr	r2, [pc, #140]	; (800b2e4 <UART_Start_Receive_DMA+0xbc>)
 800b256:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b25c:	4a22      	ldr	r2, [pc, #136]	; (800b2e8 <UART_Start_Receive_DMA+0xc0>)
 800b25e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b264:	4a21      	ldr	r2, [pc, #132]	; (800b2ec <UART_Start_Receive_DMA+0xc4>)
 800b266:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b26c:	2200      	movs	r2, #0
 800b26e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b270:	f107 0308 	add.w	r3, r7, #8
 800b274:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	3304      	adds	r3, #4
 800b280:	4619      	mov	r1, r3
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	88fb      	ldrh	r3, [r7, #6]
 800b288:	f7fa f85a 	bl	8005340 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b28c:	2300      	movs	r3, #0
 800b28e:	613b      	str	r3, [r7, #16]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	613b      	str	r3, [r7, #16]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	613b      	str	r3, [r7, #16]
 800b2a0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68da      	ldr	r2, [r3, #12]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b2b8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	695a      	ldr	r2, [r3, #20]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f042 0201 	orr.w	r2, r2, #1
 800b2c8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	695a      	ldr	r2, [r3, #20]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2d8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3718      	adds	r7, #24
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	0800b035 	.word	0x0800b035
 800b2e8:	0800b0cb 	.word	0x0800b0cb
 800b2ec:	0800b101 	.word	0x0800b101

0800b2f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68da      	ldr	r2, [r3, #12]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b306:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2220      	movs	r2, #32
 800b30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b310:	bf00      	nop
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68da      	ldr	r2, [r3, #12]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b332:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	695a      	ldr	r2, [r3, #20]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f022 0201 	bic.w	r2, r2, #1
 800b342:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d107      	bne.n	800b35c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	68da      	ldr	r2, [r3, #12]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f022 0210 	bic.w	r2, r2, #16
 800b35a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2220      	movs	r2, #32
 800b360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b36a:	bf00      	nop
 800b36c:	370c      	adds	r7, #12
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr

0800b376 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b376:	b580      	push	{r7, lr}
 800b378:	b084      	sub	sp, #16
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b382:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2200      	movs	r2, #0
 800b388:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2200      	movs	r2, #0
 800b38e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f7ff fe45 	bl	800b020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b396:	bf00      	nop
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b39e:	b480      	push	{r7}
 800b3a0:	b085      	sub	sp, #20
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	2b21      	cmp	r3, #33	; 0x21
 800b3b0:	d13e      	bne.n	800b430 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3ba:	d114      	bne.n	800b3e6 <UART_Transmit_IT+0x48>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	691b      	ldr	r3, [r3, #16]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d110      	bne.n	800b3e6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a1b      	ldr	r3, [r3, #32]
 800b3c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	881b      	ldrh	r3, [r3, #0]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a1b      	ldr	r3, [r3, #32]
 800b3de:	1c9a      	adds	r2, r3, #2
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	621a      	str	r2, [r3, #32]
 800b3e4:	e008      	b.n	800b3f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a1b      	ldr	r3, [r3, #32]
 800b3ea:	1c59      	adds	r1, r3, #1
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	6211      	str	r1, [r2, #32]
 800b3f0:	781a      	ldrb	r2, [r3, #0]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	3b01      	subs	r3, #1
 800b400:	b29b      	uxth	r3, r3
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	4619      	mov	r1, r3
 800b406:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10f      	bne.n	800b42c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	68da      	ldr	r2, [r3, #12]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b41a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68da      	ldr	r2, [r3, #12]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b42a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	e000      	b.n	800b432 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b430:	2302      	movs	r3, #2
  }
}
 800b432:	4618      	mov	r0, r3
 800b434:	3714      	adds	r7, #20
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr

0800b43e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b082      	sub	sp, #8
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	68da      	ldr	r2, [r3, #12]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b454:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2220      	movs	r2, #32
 800b45a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f7ff fdc0 	bl	800afe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3708      	adds	r7, #8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b084      	sub	sp, #16
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	2b22      	cmp	r3, #34	; 0x22
 800b480:	f040 8087 	bne.w	800b592 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b48c:	d117      	bne.n	800b4be <UART_Receive_IT+0x50>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d113      	bne.n	800b4be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b496:	2300      	movs	r3, #0
 800b498:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b49e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b6:	1c9a      	adds	r2, r3, #2
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	629a      	str	r2, [r3, #40]	; 0x28
 800b4bc:	e026      	b.n	800b50c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4d0:	d007      	beq.n	800b4e2 <UART_Receive_IT+0x74>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10a      	bne.n	800b4f0 <UART_Receive_IT+0x82>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	691b      	ldr	r3, [r3, #16]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d106      	bne.n	800b4f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	b2da      	uxtb	r2, r3
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	701a      	strb	r2, [r3, #0]
 800b4ee:	e008      	b.n	800b502 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4fc:	b2da      	uxtb	r2, r3
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b506:	1c5a      	adds	r2, r3, #1
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b510:	b29b      	uxth	r3, r3
 800b512:	3b01      	subs	r3, #1
 800b514:	b29b      	uxth	r3, r3
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	4619      	mov	r1, r3
 800b51a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d136      	bne.n	800b58e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68da      	ldr	r2, [r3, #12]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f022 0220 	bic.w	r2, r2, #32
 800b52e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	68da      	ldr	r2, [r3, #12]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b53e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	695a      	ldr	r2, [r3, #20]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f022 0201 	bic.w	r2, r2, #1
 800b54e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2220      	movs	r2, #32
 800b554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d10e      	bne.n	800b57e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	68da      	ldr	r2, [r3, #12]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f022 0210 	bic.w	r2, r2, #16
 800b56e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b574:	4619      	mov	r1, r3
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f7f8 f8a0 	bl	80036bc <HAL_UARTEx_RxEventCallback>
 800b57c:	e002      	b.n	800b584 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7ff fd3a 	bl	800aff8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800b58a:	2300      	movs	r3, #0
 800b58c:	e002      	b.n	800b594 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	e000      	b.n	800b594 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800b592:	2302      	movs	r3, #2
  }
}
 800b594:	4618      	mov	r0, r3
 800b596:	3710      	adds	r7, #16
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a0:	b09f      	sub	sp, #124	; 0x7c
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	691b      	ldr	r3, [r3, #16]
 800b5ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b5b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5b2:	68d9      	ldr	r1, [r3, #12]
 800b5b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	ea40 0301 	orr.w	r3, r0, r1
 800b5bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b5be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5c0:	689a      	ldr	r2, [r3, #8]
 800b5c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	431a      	orrs	r2, r3
 800b5c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5ca:	695b      	ldr	r3, [r3, #20]
 800b5cc:	431a      	orrs	r2, r3
 800b5ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5d0:	69db      	ldr	r3, [r3, #28]
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b5d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b5e0:	f021 010c 	bic.w	r1, r1, #12
 800b5e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b5ea:	430b      	orrs	r3, r1
 800b5ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b5ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b5f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5fa:	6999      	ldr	r1, [r3, #24]
 800b5fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	ea40 0301 	orr.w	r3, r0, r1
 800b604:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	4bc5      	ldr	r3, [pc, #788]	; (800b920 <UART_SetConfig+0x384>)
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d004      	beq.n	800b61a <UART_SetConfig+0x7e>
 800b610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	4bc3      	ldr	r3, [pc, #780]	; (800b924 <UART_SetConfig+0x388>)
 800b616:	429a      	cmp	r2, r3
 800b618:	d103      	bne.n	800b622 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b61a:	f7fe f819 	bl	8009650 <HAL_RCC_GetPCLK2Freq>
 800b61e:	6778      	str	r0, [r7, #116]	; 0x74
 800b620:	e002      	b.n	800b628 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b622:	f7fe f801 	bl	8009628 <HAL_RCC_GetPCLK1Freq>
 800b626:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b62a:	69db      	ldr	r3, [r3, #28]
 800b62c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b630:	f040 80b6 	bne.w	800b7a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b636:	461c      	mov	r4, r3
 800b638:	f04f 0500 	mov.w	r5, #0
 800b63c:	4622      	mov	r2, r4
 800b63e:	462b      	mov	r3, r5
 800b640:	1891      	adds	r1, r2, r2
 800b642:	6439      	str	r1, [r7, #64]	; 0x40
 800b644:	415b      	adcs	r3, r3
 800b646:	647b      	str	r3, [r7, #68]	; 0x44
 800b648:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b64c:	1912      	adds	r2, r2, r4
 800b64e:	eb45 0303 	adc.w	r3, r5, r3
 800b652:	f04f 0000 	mov.w	r0, #0
 800b656:	f04f 0100 	mov.w	r1, #0
 800b65a:	00d9      	lsls	r1, r3, #3
 800b65c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b660:	00d0      	lsls	r0, r2, #3
 800b662:	4602      	mov	r2, r0
 800b664:	460b      	mov	r3, r1
 800b666:	1911      	adds	r1, r2, r4
 800b668:	6639      	str	r1, [r7, #96]	; 0x60
 800b66a:	416b      	adcs	r3, r5
 800b66c:	667b      	str	r3, [r7, #100]	; 0x64
 800b66e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	461a      	mov	r2, r3
 800b674:	f04f 0300 	mov.w	r3, #0
 800b678:	1891      	adds	r1, r2, r2
 800b67a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b67c:	415b      	adcs	r3, r3
 800b67e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b680:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b684:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b688:	f7f5 fab6 	bl	8000bf8 <__aeabi_uldivmod>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	4ba5      	ldr	r3, [pc, #660]	; (800b928 <UART_SetConfig+0x38c>)
 800b692:	fba3 2302 	umull	r2, r3, r3, r2
 800b696:	095b      	lsrs	r3, r3, #5
 800b698:	011e      	lsls	r6, r3, #4
 800b69a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b69c:	461c      	mov	r4, r3
 800b69e:	f04f 0500 	mov.w	r5, #0
 800b6a2:	4622      	mov	r2, r4
 800b6a4:	462b      	mov	r3, r5
 800b6a6:	1891      	adds	r1, r2, r2
 800b6a8:	6339      	str	r1, [r7, #48]	; 0x30
 800b6aa:	415b      	adcs	r3, r3
 800b6ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b6ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b6b2:	1912      	adds	r2, r2, r4
 800b6b4:	eb45 0303 	adc.w	r3, r5, r3
 800b6b8:	f04f 0000 	mov.w	r0, #0
 800b6bc:	f04f 0100 	mov.w	r1, #0
 800b6c0:	00d9      	lsls	r1, r3, #3
 800b6c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b6c6:	00d0      	lsls	r0, r2, #3
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	1911      	adds	r1, r2, r4
 800b6ce:	65b9      	str	r1, [r7, #88]	; 0x58
 800b6d0:	416b      	adcs	r3, r5
 800b6d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	f04f 0300 	mov.w	r3, #0
 800b6de:	1891      	adds	r1, r2, r2
 800b6e0:	62b9      	str	r1, [r7, #40]	; 0x28
 800b6e2:	415b      	adcs	r3, r3
 800b6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b6ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b6ee:	f7f5 fa83 	bl	8000bf8 <__aeabi_uldivmod>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	4b8c      	ldr	r3, [pc, #560]	; (800b928 <UART_SetConfig+0x38c>)
 800b6f8:	fba3 1302 	umull	r1, r3, r3, r2
 800b6fc:	095b      	lsrs	r3, r3, #5
 800b6fe:	2164      	movs	r1, #100	; 0x64
 800b700:	fb01 f303 	mul.w	r3, r1, r3
 800b704:	1ad3      	subs	r3, r2, r3
 800b706:	00db      	lsls	r3, r3, #3
 800b708:	3332      	adds	r3, #50	; 0x32
 800b70a:	4a87      	ldr	r2, [pc, #540]	; (800b928 <UART_SetConfig+0x38c>)
 800b70c:	fba2 2303 	umull	r2, r3, r2, r3
 800b710:	095b      	lsrs	r3, r3, #5
 800b712:	005b      	lsls	r3, r3, #1
 800b714:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b718:	441e      	add	r6, r3
 800b71a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b71c:	4618      	mov	r0, r3
 800b71e:	f04f 0100 	mov.w	r1, #0
 800b722:	4602      	mov	r2, r0
 800b724:	460b      	mov	r3, r1
 800b726:	1894      	adds	r4, r2, r2
 800b728:	623c      	str	r4, [r7, #32]
 800b72a:	415b      	adcs	r3, r3
 800b72c:	627b      	str	r3, [r7, #36]	; 0x24
 800b72e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b732:	1812      	adds	r2, r2, r0
 800b734:	eb41 0303 	adc.w	r3, r1, r3
 800b738:	f04f 0400 	mov.w	r4, #0
 800b73c:	f04f 0500 	mov.w	r5, #0
 800b740:	00dd      	lsls	r5, r3, #3
 800b742:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b746:	00d4      	lsls	r4, r2, #3
 800b748:	4622      	mov	r2, r4
 800b74a:	462b      	mov	r3, r5
 800b74c:	1814      	adds	r4, r2, r0
 800b74e:	653c      	str	r4, [r7, #80]	; 0x50
 800b750:	414b      	adcs	r3, r1
 800b752:	657b      	str	r3, [r7, #84]	; 0x54
 800b754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	461a      	mov	r2, r3
 800b75a:	f04f 0300 	mov.w	r3, #0
 800b75e:	1891      	adds	r1, r2, r2
 800b760:	61b9      	str	r1, [r7, #24]
 800b762:	415b      	adcs	r3, r3
 800b764:	61fb      	str	r3, [r7, #28]
 800b766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b76a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b76e:	f7f5 fa43 	bl	8000bf8 <__aeabi_uldivmod>
 800b772:	4602      	mov	r2, r0
 800b774:	460b      	mov	r3, r1
 800b776:	4b6c      	ldr	r3, [pc, #432]	; (800b928 <UART_SetConfig+0x38c>)
 800b778:	fba3 1302 	umull	r1, r3, r3, r2
 800b77c:	095b      	lsrs	r3, r3, #5
 800b77e:	2164      	movs	r1, #100	; 0x64
 800b780:	fb01 f303 	mul.w	r3, r1, r3
 800b784:	1ad3      	subs	r3, r2, r3
 800b786:	00db      	lsls	r3, r3, #3
 800b788:	3332      	adds	r3, #50	; 0x32
 800b78a:	4a67      	ldr	r2, [pc, #412]	; (800b928 <UART_SetConfig+0x38c>)
 800b78c:	fba2 2303 	umull	r2, r3, r2, r3
 800b790:	095b      	lsrs	r3, r3, #5
 800b792:	f003 0207 	and.w	r2, r3, #7
 800b796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4432      	add	r2, r6
 800b79c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b79e:	e0b9      	b.n	800b914 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b7a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7a2:	461c      	mov	r4, r3
 800b7a4:	f04f 0500 	mov.w	r5, #0
 800b7a8:	4622      	mov	r2, r4
 800b7aa:	462b      	mov	r3, r5
 800b7ac:	1891      	adds	r1, r2, r2
 800b7ae:	6139      	str	r1, [r7, #16]
 800b7b0:	415b      	adcs	r3, r3
 800b7b2:	617b      	str	r3, [r7, #20]
 800b7b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b7b8:	1912      	adds	r2, r2, r4
 800b7ba:	eb45 0303 	adc.w	r3, r5, r3
 800b7be:	f04f 0000 	mov.w	r0, #0
 800b7c2:	f04f 0100 	mov.w	r1, #0
 800b7c6:	00d9      	lsls	r1, r3, #3
 800b7c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b7cc:	00d0      	lsls	r0, r2, #3
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	eb12 0804 	adds.w	r8, r2, r4
 800b7d6:	eb43 0905 	adc.w	r9, r3, r5
 800b7da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f04f 0100 	mov.w	r1, #0
 800b7e4:	f04f 0200 	mov.w	r2, #0
 800b7e8:	f04f 0300 	mov.w	r3, #0
 800b7ec:	008b      	lsls	r3, r1, #2
 800b7ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b7f2:	0082      	lsls	r2, r0, #2
 800b7f4:	4640      	mov	r0, r8
 800b7f6:	4649      	mov	r1, r9
 800b7f8:	f7f5 f9fe 	bl	8000bf8 <__aeabi_uldivmod>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4b49      	ldr	r3, [pc, #292]	; (800b928 <UART_SetConfig+0x38c>)
 800b802:	fba3 2302 	umull	r2, r3, r3, r2
 800b806:	095b      	lsrs	r3, r3, #5
 800b808:	011e      	lsls	r6, r3, #4
 800b80a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b80c:	4618      	mov	r0, r3
 800b80e:	f04f 0100 	mov.w	r1, #0
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	1894      	adds	r4, r2, r2
 800b818:	60bc      	str	r4, [r7, #8]
 800b81a:	415b      	adcs	r3, r3
 800b81c:	60fb      	str	r3, [r7, #12]
 800b81e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b822:	1812      	adds	r2, r2, r0
 800b824:	eb41 0303 	adc.w	r3, r1, r3
 800b828:	f04f 0400 	mov.w	r4, #0
 800b82c:	f04f 0500 	mov.w	r5, #0
 800b830:	00dd      	lsls	r5, r3, #3
 800b832:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b836:	00d4      	lsls	r4, r2, #3
 800b838:	4622      	mov	r2, r4
 800b83a:	462b      	mov	r3, r5
 800b83c:	1814      	adds	r4, r2, r0
 800b83e:	64bc      	str	r4, [r7, #72]	; 0x48
 800b840:	414b      	adcs	r3, r1
 800b842:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	4618      	mov	r0, r3
 800b84a:	f04f 0100 	mov.w	r1, #0
 800b84e:	f04f 0200 	mov.w	r2, #0
 800b852:	f04f 0300 	mov.w	r3, #0
 800b856:	008b      	lsls	r3, r1, #2
 800b858:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b85c:	0082      	lsls	r2, r0, #2
 800b85e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b862:	f7f5 f9c9 	bl	8000bf8 <__aeabi_uldivmod>
 800b866:	4602      	mov	r2, r0
 800b868:	460b      	mov	r3, r1
 800b86a:	4b2f      	ldr	r3, [pc, #188]	; (800b928 <UART_SetConfig+0x38c>)
 800b86c:	fba3 1302 	umull	r1, r3, r3, r2
 800b870:	095b      	lsrs	r3, r3, #5
 800b872:	2164      	movs	r1, #100	; 0x64
 800b874:	fb01 f303 	mul.w	r3, r1, r3
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	011b      	lsls	r3, r3, #4
 800b87c:	3332      	adds	r3, #50	; 0x32
 800b87e:	4a2a      	ldr	r2, [pc, #168]	; (800b928 <UART_SetConfig+0x38c>)
 800b880:	fba2 2303 	umull	r2, r3, r2, r3
 800b884:	095b      	lsrs	r3, r3, #5
 800b886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b88a:	441e      	add	r6, r3
 800b88c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b88e:	4618      	mov	r0, r3
 800b890:	f04f 0100 	mov.w	r1, #0
 800b894:	4602      	mov	r2, r0
 800b896:	460b      	mov	r3, r1
 800b898:	1894      	adds	r4, r2, r2
 800b89a:	603c      	str	r4, [r7, #0]
 800b89c:	415b      	adcs	r3, r3
 800b89e:	607b      	str	r3, [r7, #4]
 800b8a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8a4:	1812      	adds	r2, r2, r0
 800b8a6:	eb41 0303 	adc.w	r3, r1, r3
 800b8aa:	f04f 0400 	mov.w	r4, #0
 800b8ae:	f04f 0500 	mov.w	r5, #0
 800b8b2:	00dd      	lsls	r5, r3, #3
 800b8b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b8b8:	00d4      	lsls	r4, r2, #3
 800b8ba:	4622      	mov	r2, r4
 800b8bc:	462b      	mov	r3, r5
 800b8be:	eb12 0a00 	adds.w	sl, r2, r0
 800b8c2:	eb43 0b01 	adc.w	fp, r3, r1
 800b8c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f04f 0100 	mov.w	r1, #0
 800b8d0:	f04f 0200 	mov.w	r2, #0
 800b8d4:	f04f 0300 	mov.w	r3, #0
 800b8d8:	008b      	lsls	r3, r1, #2
 800b8da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b8de:	0082      	lsls	r2, r0, #2
 800b8e0:	4650      	mov	r0, sl
 800b8e2:	4659      	mov	r1, fp
 800b8e4:	f7f5 f988 	bl	8000bf8 <__aeabi_uldivmod>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	4b0e      	ldr	r3, [pc, #56]	; (800b928 <UART_SetConfig+0x38c>)
 800b8ee:	fba3 1302 	umull	r1, r3, r3, r2
 800b8f2:	095b      	lsrs	r3, r3, #5
 800b8f4:	2164      	movs	r1, #100	; 0x64
 800b8f6:	fb01 f303 	mul.w	r3, r1, r3
 800b8fa:	1ad3      	subs	r3, r2, r3
 800b8fc:	011b      	lsls	r3, r3, #4
 800b8fe:	3332      	adds	r3, #50	; 0x32
 800b900:	4a09      	ldr	r2, [pc, #36]	; (800b928 <UART_SetConfig+0x38c>)
 800b902:	fba2 2303 	umull	r2, r3, r2, r3
 800b906:	095b      	lsrs	r3, r3, #5
 800b908:	f003 020f 	and.w	r2, r3, #15
 800b90c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4432      	add	r2, r6
 800b912:	609a      	str	r2, [r3, #8]
}
 800b914:	bf00      	nop
 800b916:	377c      	adds	r7, #124	; 0x7c
 800b918:	46bd      	mov	sp, r7
 800b91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b91e:	bf00      	nop
 800b920:	40011000 	.word	0x40011000
 800b924:	40011400 	.word	0x40011400
 800b928:	51eb851f 	.word	0x51eb851f

0800b92c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	4603      	mov	r3, r0
 800b934:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b936:	2300      	movs	r3, #0
 800b938:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b93a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b93e:	2b84      	cmp	r3, #132	; 0x84
 800b940:	d005      	beq.n	800b94e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b942:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	4413      	add	r3, r2
 800b94a:	3303      	adds	r3, #3
 800b94c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b94e:	68fb      	ldr	r3, [r7, #12]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3714      	adds	r7, #20
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b962:	f3ef 8305 	mrs	r3, IPSR
 800b966:	607b      	str	r3, [r7, #4]
  return(result);
 800b968:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	bf14      	ite	ne
 800b96e:	2301      	movne	r3, #1
 800b970:	2300      	moveq	r3, #0
 800b972:	b2db      	uxtb	r3, r3
}
 800b974:	4618      	mov	r0, r3
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b984:	f001 fae8 	bl	800cf58 <vTaskStartScheduler>
  
  return osOK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b98e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b990:	b089      	sub	sp, #36	; 0x24
 800b992:	af04      	add	r7, sp, #16
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	695b      	ldr	r3, [r3, #20]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d020      	beq.n	800b9e2 <osThreadCreate+0x54>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d01c      	beq.n	800b9e2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	685c      	ldr	r4, [r3, #4]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681d      	ldr	r5, [r3, #0]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	691e      	ldr	r6, [r3, #16]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7ff ffb6 	bl	800b92c <makeFreeRtosPriority>
 800b9c0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	695b      	ldr	r3, [r3, #20]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9ca:	9202      	str	r2, [sp, #8]
 800b9cc:	9301      	str	r3, [sp, #4]
 800b9ce:	9100      	str	r1, [sp, #0]
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	4632      	mov	r2, r6
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	f001 f8f6 	bl	800cbc8 <xTaskCreateStatic>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	60fb      	str	r3, [r7, #12]
 800b9e0:	e01c      	b.n	800ba1c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	685c      	ldr	r4, [r3, #4]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9ee:	b29e      	uxth	r6, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7ff ff98 	bl	800b92c <makeFreeRtosPriority>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	f107 030c 	add.w	r3, r7, #12
 800ba02:	9301      	str	r3, [sp, #4]
 800ba04:	9200      	str	r2, [sp, #0]
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	4632      	mov	r2, r6
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	f001 f938 	bl	800cc82 <xTaskCreate>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d001      	beq.n	800ba1c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	e000      	b.n	800ba1e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3714      	adds	r7, #20
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba26 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b084      	sub	sp, #16
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d001      	beq.n	800ba3c <osDelay+0x16>
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	e000      	b.n	800ba3e <osDelay+0x18>
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f001 fa56 	bl	800cef0 <vTaskDelay>
  
  return osOK;
 800ba44:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b086      	sub	sp, #24
 800ba52:	af02      	add	r7, sp, #8
 800ba54:	6078      	str	r0, [r7, #4]
 800ba56:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00f      	beq.n	800ba80 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d10a      	bne.n	800ba7c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	2203      	movs	r2, #3
 800ba6c:	9200      	str	r2, [sp, #0]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	2100      	movs	r1, #0
 800ba72:	2001      	movs	r0, #1
 800ba74:	f000 f9be 	bl	800bdf4 <xQueueGenericCreateStatic>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	e016      	b.n	800baaa <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	e014      	b.n	800baaa <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d110      	bne.n	800baa8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ba86:	2203      	movs	r2, #3
 800ba88:	2100      	movs	r1, #0
 800ba8a:	2001      	movs	r0, #1
 800ba8c:	f000 fa2a 	bl	800bee4 <xQueueGenericCreate>
 800ba90:	60f8      	str	r0, [r7, #12]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d005      	beq.n	800baa4 <osSemaphoreCreate+0x56>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	68f8      	ldr	r0, [r7, #12]
 800baa0:	f000 fa7a 	bl	800bf98 <xQueueGenericSend>
      return sema;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	e000      	b.n	800baaa <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800baa8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
	...

0800bab4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800babe:	2300      	movs	r3, #0
 800bac0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d101      	bne.n	800bacc <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bac8:	2380      	movs	r3, #128	; 0x80
 800baca:	e03a      	b.n	800bb42 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800bacc:	2300      	movs	r3, #0
 800bace:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bad6:	d103      	bne.n	800bae0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800badc:	60fb      	str	r3, [r7, #12]
 800bade:	e009      	b.n	800baf4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d006      	beq.n	800baf4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d101      	bne.n	800baf4 <osSemaphoreWait+0x40>
      ticks = 1;
 800baf0:	2301      	movs	r3, #1
 800baf2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800baf4:	f7ff ff32 	bl	800b95c <inHandlerMode>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d017      	beq.n	800bb2e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bafe:	f107 0308 	add.w	r3, r7, #8
 800bb02:	461a      	mov	r2, r3
 800bb04:	2100      	movs	r1, #0
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 fe58 	bl	800c7bc <xQueueReceiveFromISR>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d001      	beq.n	800bb16 <osSemaphoreWait+0x62>
      return osErrorOS;
 800bb12:	23ff      	movs	r3, #255	; 0xff
 800bb14:	e015      	b.n	800bb42 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d011      	beq.n	800bb40 <osSemaphoreWait+0x8c>
 800bb1c:	4b0b      	ldr	r3, [pc, #44]	; (800bb4c <osSemaphoreWait+0x98>)
 800bb1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb22:	601a      	str	r2, [r3, #0]
 800bb24:	f3bf 8f4f 	dsb	sy
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	e008      	b.n	800bb40 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bb2e:	68f9      	ldr	r1, [r7, #12]
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 fd37 	bl	800c5a4 <xQueueSemaphoreTake>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d001      	beq.n	800bb40 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800bb3c:	23ff      	movs	r3, #255	; 0xff
 800bb3e:	e000      	b.n	800bb42 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3710      	adds	r7, #16
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	e000ed04 	.word	0xe000ed04

0800bb50 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800bb60:	f7ff fefc 	bl	800b95c <inHandlerMode>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d016      	beq.n	800bb98 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bb6a:	f107 0308 	add.w	r3, r7, #8
 800bb6e:	4619      	mov	r1, r3
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 fbaa 	bl	800c2ca <xQueueGiveFromISR>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d001      	beq.n	800bb80 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800bb7c:	23ff      	movs	r3, #255	; 0xff
 800bb7e:	e017      	b.n	800bbb0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d013      	beq.n	800bbae <osSemaphoreRelease+0x5e>
 800bb86:	4b0c      	ldr	r3, [pc, #48]	; (800bbb8 <osSemaphoreRelease+0x68>)
 800bb88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb8c:	601a      	str	r2, [r3, #0]
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	e00a      	b.n	800bbae <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800bb98:	2300      	movs	r3, #0
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 f9fa 	bl	800bf98 <xQueueGenericSend>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d001      	beq.n	800bbae <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800bbaa:	23ff      	movs	r3, #255	; 0xff
 800bbac:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800bbae:	68fb      	ldr	r3, [r7, #12]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	e000ed04 	.word	0xe000ed04

0800bbbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f103 0208 	add.w	r2, r3, #8
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f103 0208 	add.w	r2, r3, #8
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f103 0208 	add.w	r2, r3, #8
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bbf0:	bf00      	nop
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc0a:	bf00      	nop
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr

0800bc16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc16:	b480      	push	{r7}
 800bc18:	b085      	sub	sp, #20
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
 800bc1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	689a      	ldr	r2, [r3, #8]
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	683a      	ldr	r2, [r7, #0]
 800bc3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	1c5a      	adds	r2, r3, #1
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	601a      	str	r2, [r3, #0]
}
 800bc52:	bf00      	nop
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr

0800bc5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc5e:	b480      	push	{r7}
 800bc60:	b085      	sub	sp, #20
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
 800bc66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc74:	d103      	bne.n	800bc7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	60fb      	str	r3, [r7, #12]
 800bc7c:	e00c      	b.n	800bc98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	3308      	adds	r3, #8
 800bc82:	60fb      	str	r3, [r7, #12]
 800bc84:	e002      	b.n	800bc8c <vListInsert+0x2e>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	60fb      	str	r3, [r7, #12]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d2f6      	bcs.n	800bc86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	685a      	ldr	r2, [r3, #4]
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	683a      	ldr	r2, [r7, #0]
 800bca6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	68fa      	ldr	r2, [r7, #12]
 800bcac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	683a      	ldr	r2, [r7, #0]
 800bcb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	1c5a      	adds	r2, r3, #1
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	601a      	str	r2, [r3, #0]
}
 800bcc4:	bf00      	nop
 800bcc6:	3714      	adds	r7, #20
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	6892      	ldr	r2, [r2, #8]
 800bce6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	6852      	ldr	r2, [r2, #4]
 800bcf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d103      	bne.n	800bd04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	689a      	ldr	r2, [r3, #8]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	1e5a      	subs	r2, r3, #1
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3714      	adds	r7, #20
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d10a      	bne.n	800bd4e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3c:	f383 8811 	msr	BASEPRI, r3
 800bd40:	f3bf 8f6f 	isb	sy
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bd4a:	bf00      	nop
 800bd4c:	e7fe      	b.n	800bd4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bd4e:	f002 fbc1 	bl	800e4d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd5a:	68f9      	ldr	r1, [r7, #12]
 800bd5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd5e:	fb01 f303 	mul.w	r3, r1, r3
 800bd62:	441a      	add	r2, r3
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	68f9      	ldr	r1, [r7, #12]
 800bd82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd84:	fb01 f303 	mul.w	r3, r1, r3
 800bd88:	441a      	add	r2, r3
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	22ff      	movs	r2, #255	; 0xff
 800bd92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	22ff      	movs	r2, #255	; 0xff
 800bd9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d114      	bne.n	800bdce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d01a      	beq.n	800bde2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	3310      	adds	r3, #16
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f001 fb55 	bl	800d460 <xTaskRemoveFromEventList>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d012      	beq.n	800bde2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bdbc:	4b0c      	ldr	r3, [pc, #48]	; (800bdf0 <xQueueGenericReset+0xcc>)
 800bdbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	e009      	b.n	800bde2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	3310      	adds	r3, #16
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7ff fef2 	bl	800bbbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	3324      	adds	r3, #36	; 0x24
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7ff feed 	bl	800bbbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bde2:	f002 fba7 	bl	800e534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bde6:	2301      	movs	r3, #1
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	e000ed04 	.word	0xe000ed04

0800bdf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b08e      	sub	sp, #56	; 0x38
 800bdf8:	af02      	add	r7, sp, #8
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
 800be00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10a      	bne.n	800be1e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be1a:	bf00      	nop
 800be1c:	e7fe      	b.n	800be1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10a      	bne.n	800be3a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800be24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be28:	f383 8811 	msr	BASEPRI, r3
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be36:	bf00      	nop
 800be38:	e7fe      	b.n	800be38 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d002      	beq.n	800be46 <xQueueGenericCreateStatic+0x52>
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d001      	beq.n	800be4a <xQueueGenericCreateStatic+0x56>
 800be46:	2301      	movs	r3, #1
 800be48:	e000      	b.n	800be4c <xQueueGenericCreateStatic+0x58>
 800be4a:	2300      	movs	r3, #0
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d10a      	bne.n	800be66 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800be50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be54:	f383 8811 	msr	BASEPRI, r3
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	623b      	str	r3, [r7, #32]
}
 800be62:	bf00      	nop
 800be64:	e7fe      	b.n	800be64 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d102      	bne.n	800be72 <xQueueGenericCreateStatic+0x7e>
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d101      	bne.n	800be76 <xQueueGenericCreateStatic+0x82>
 800be72:	2301      	movs	r3, #1
 800be74:	e000      	b.n	800be78 <xQueueGenericCreateStatic+0x84>
 800be76:	2300      	movs	r3, #0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d10a      	bne.n	800be92 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800be7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be80:	f383 8811 	msr	BASEPRI, r3
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	f3bf 8f4f 	dsb	sy
 800be8c:	61fb      	str	r3, [r7, #28]
}
 800be8e:	bf00      	nop
 800be90:	e7fe      	b.n	800be90 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800be92:	2348      	movs	r3, #72	; 0x48
 800be94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	2b48      	cmp	r3, #72	; 0x48
 800be9a:	d00a      	beq.n	800beb2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea0:	f383 8811 	msr	BASEPRI, r3
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	61bb      	str	r3, [r7, #24]
}
 800beae:	bf00      	nop
 800beb0:	e7fe      	b.n	800beb0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800beb2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800beb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00d      	beq.n	800beda <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec0:	2201      	movs	r2, #1
 800bec2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bec6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800beca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	4613      	mov	r3, r2
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	68b9      	ldr	r1, [r7, #8]
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f000 f83f 	bl	800bf58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800beda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bedc:	4618      	mov	r0, r3
 800bede:	3730      	adds	r7, #48	; 0x30
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b08a      	sub	sp, #40	; 0x28
 800bee8:	af02      	add	r7, sp, #8
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	4613      	mov	r3, r2
 800bef0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <xQueueGenericCreate+0x2a>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	613b      	str	r3, [r7, #16]
}
 800bf0a:	bf00      	nop
 800bf0c:	e7fe      	b.n	800bf0c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	68ba      	ldr	r2, [r7, #8]
 800bf12:	fb02 f303 	mul.w	r3, r2, r3
 800bf16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	3348      	adds	r3, #72	; 0x48
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f002 fbfb 	bl	800e718 <pvPortMalloc>
 800bf22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bf24:	69bb      	ldr	r3, [r7, #24]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d011      	beq.n	800bf4e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	3348      	adds	r3, #72	; 0x48
 800bf32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf3c:	79fa      	ldrb	r2, [r7, #7]
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	4613      	mov	r3, r2
 800bf44:	697a      	ldr	r2, [r7, #20]
 800bf46:	68b9      	ldr	r1, [r7, #8]
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f000 f805 	bl	800bf58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf4e:	69bb      	ldr	r3, [r7, #24]
	}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3720      	adds	r7, #32
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	607a      	str	r2, [r7, #4]
 800bf64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d103      	bne.n	800bf74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	69ba      	ldr	r2, [r7, #24]
 800bf70:	601a      	str	r2, [r3, #0]
 800bf72:	e002      	b.n	800bf7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bf86:	2101      	movs	r1, #1
 800bf88:	69b8      	ldr	r0, [r7, #24]
 800bf8a:	f7ff fecb 	bl	800bd24 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bf8e:	bf00      	nop
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
	...

0800bf98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b08e      	sub	sp, #56	; 0x38
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]
 800bfa4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d10a      	bne.n	800bfca <xQueueGenericSend+0x32>
	__asm volatile
 800bfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb8:	f383 8811 	msr	BASEPRI, r3
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bfc6:	bf00      	nop
 800bfc8:	e7fe      	b.n	800bfc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d103      	bne.n	800bfd8 <xQueueGenericSend+0x40>
 800bfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d101      	bne.n	800bfdc <xQueueGenericSend+0x44>
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e000      	b.n	800bfde <xQueueGenericSend+0x46>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d10a      	bne.n	800bff8 <xQueueGenericSend+0x60>
	__asm volatile
 800bfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bff4:	bf00      	nop
 800bff6:	e7fe      	b.n	800bff6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	2b02      	cmp	r3, #2
 800bffc:	d103      	bne.n	800c006 <xQueueGenericSend+0x6e>
 800bffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c002:	2b01      	cmp	r3, #1
 800c004:	d101      	bne.n	800c00a <xQueueGenericSend+0x72>
 800c006:	2301      	movs	r3, #1
 800c008:	e000      	b.n	800c00c <xQueueGenericSend+0x74>
 800c00a:	2300      	movs	r3, #0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10a      	bne.n	800c026 <xQueueGenericSend+0x8e>
	__asm volatile
 800c010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	623b      	str	r3, [r7, #32]
}
 800c022:	bf00      	nop
 800c024:	e7fe      	b.n	800c024 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c026:	f001 fbd7 	bl	800d7d8 <xTaskGetSchedulerState>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d102      	bne.n	800c036 <xQueueGenericSend+0x9e>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d101      	bne.n	800c03a <xQueueGenericSend+0xa2>
 800c036:	2301      	movs	r3, #1
 800c038:	e000      	b.n	800c03c <xQueueGenericSend+0xa4>
 800c03a:	2300      	movs	r3, #0
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d10a      	bne.n	800c056 <xQueueGenericSend+0xbe>
	__asm volatile
 800c040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c044:	f383 8811 	msr	BASEPRI, r3
 800c048:	f3bf 8f6f 	isb	sy
 800c04c:	f3bf 8f4f 	dsb	sy
 800c050:	61fb      	str	r3, [r7, #28]
}
 800c052:	bf00      	nop
 800c054:	e7fe      	b.n	800c054 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c056:	f002 fa3d 	bl	800e4d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c062:	429a      	cmp	r2, r3
 800c064:	d302      	bcc.n	800c06c <xQueueGenericSend+0xd4>
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	2b02      	cmp	r3, #2
 800c06a:	d129      	bne.n	800c0c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c06c:	683a      	ldr	r2, [r7, #0]
 800c06e:	68b9      	ldr	r1, [r7, #8]
 800c070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c072:	f000 fc3b 	bl	800c8ec <prvCopyDataToQueue>
 800c076:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d010      	beq.n	800c0a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c082:	3324      	adds	r3, #36	; 0x24
 800c084:	4618      	mov	r0, r3
 800c086:	f001 f9eb 	bl	800d460 <xTaskRemoveFromEventList>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d013      	beq.n	800c0b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c090:	4b3f      	ldr	r3, [pc, #252]	; (800c190 <xQueueGenericSend+0x1f8>)
 800c092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c096:	601a      	str	r2, [r3, #0]
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	e00a      	b.n	800c0b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d007      	beq.n	800c0b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c0a8:	4b39      	ldr	r3, [pc, #228]	; (800c190 <xQueueGenericSend+0x1f8>)
 800c0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ae:	601a      	str	r2, [r3, #0]
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c0b8:	f002 fa3c 	bl	800e534 <vPortExitCritical>
				return pdPASS;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e063      	b.n	800c188 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d103      	bne.n	800c0ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c0c6:	f002 fa35 	bl	800e534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	e05c      	b.n	800c188 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d106      	bne.n	800c0e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0d4:	f107 0314 	add.w	r3, r7, #20
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f001 fa23 	bl	800d524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c0e2:	f002 fa27 	bl	800e534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c0e6:	f000 ff9d 	bl	800d024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0ea:	f002 f9f3 	bl	800e4d4 <vPortEnterCritical>
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0f4:	b25b      	sxtb	r3, r3
 800c0f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0fa:	d103      	bne.n	800c104 <xQueueGenericSend+0x16c>
 800c0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c10a:	b25b      	sxtb	r3, r3
 800c10c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c110:	d103      	bne.n	800c11a <xQueueGenericSend+0x182>
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	2200      	movs	r2, #0
 800c116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c11a:	f002 fa0b 	bl	800e534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c11e:	1d3a      	adds	r2, r7, #4
 800c120:	f107 0314 	add.w	r3, r7, #20
 800c124:	4611      	mov	r1, r2
 800c126:	4618      	mov	r0, r3
 800c128:	f001 fa12 	bl	800d550 <xTaskCheckForTimeOut>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d124      	bne.n	800c17c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c132:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c134:	f000 fcd2 	bl	800cadc <prvIsQueueFull>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d018      	beq.n	800c170 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c140:	3310      	adds	r3, #16
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	4611      	mov	r1, r2
 800c146:	4618      	mov	r0, r3
 800c148:	f001 f93a 	bl	800d3c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c14c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c14e:	f000 fc5d 	bl	800ca0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c152:	f000 ff75 	bl	800d040 <xTaskResumeAll>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	f47f af7c 	bne.w	800c056 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c15e:	4b0c      	ldr	r3, [pc, #48]	; (800c190 <xQueueGenericSend+0x1f8>)
 800c160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c164:	601a      	str	r2, [r3, #0]
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	f3bf 8f6f 	isb	sy
 800c16e:	e772      	b.n	800c056 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c172:	f000 fc4b 	bl	800ca0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c176:	f000 ff63 	bl	800d040 <xTaskResumeAll>
 800c17a:	e76c      	b.n	800c056 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c17c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c17e:	f000 fc45 	bl	800ca0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c182:	f000 ff5d 	bl	800d040 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c186:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3738      	adds	r7, #56	; 0x38
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	e000ed04 	.word	0xe000ed04

0800c194 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b090      	sub	sp, #64	; 0x40
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
 800c1a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10a      	bne.n	800c1c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b0:	f383 8811 	msr	BASEPRI, r3
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c1be:	bf00      	nop
 800c1c0:	e7fe      	b.n	800c1c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d103      	bne.n	800c1d0 <xQueueGenericSendFromISR+0x3c>
 800c1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d101      	bne.n	800c1d4 <xQueueGenericSendFromISR+0x40>
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	e000      	b.n	800c1d6 <xQueueGenericSendFromISR+0x42>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10a      	bne.n	800c1f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1de:	f383 8811 	msr	BASEPRI, r3
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c1ec:	bf00      	nop
 800c1ee:	e7fe      	b.n	800c1ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	2b02      	cmp	r3, #2
 800c1f4:	d103      	bne.n	800c1fe <xQueueGenericSendFromISR+0x6a>
 800c1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d101      	bne.n	800c202 <xQueueGenericSendFromISR+0x6e>
 800c1fe:	2301      	movs	r3, #1
 800c200:	e000      	b.n	800c204 <xQueueGenericSendFromISR+0x70>
 800c202:	2300      	movs	r3, #0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d10a      	bne.n	800c21e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20c:	f383 8811 	msr	BASEPRI, r3
 800c210:	f3bf 8f6f 	isb	sy
 800c214:	f3bf 8f4f 	dsb	sy
 800c218:	623b      	str	r3, [r7, #32]
}
 800c21a:	bf00      	nop
 800c21c:	e7fe      	b.n	800c21c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c21e:	f002 fa3b 	bl	800e698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c222:	f3ef 8211 	mrs	r2, BASEPRI
 800c226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22a:	f383 8811 	msr	BASEPRI, r3
 800c22e:	f3bf 8f6f 	isb	sy
 800c232:	f3bf 8f4f 	dsb	sy
 800c236:	61fa      	str	r2, [r7, #28]
 800c238:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c23a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c23c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c246:	429a      	cmp	r2, r3
 800c248:	d302      	bcc.n	800c250 <xQueueGenericSendFromISR+0xbc>
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	2b02      	cmp	r3, #2
 800c24e:	d12f      	bne.n	800c2b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c25e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c260:	683a      	ldr	r2, [r7, #0]
 800c262:	68b9      	ldr	r1, [r7, #8]
 800c264:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c266:	f000 fb41 	bl	800c8ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c26a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c26e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c272:	d112      	bne.n	800c29a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d016      	beq.n	800c2aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27e:	3324      	adds	r3, #36	; 0x24
 800c280:	4618      	mov	r0, r3
 800c282:	f001 f8ed 	bl	800d460 <xTaskRemoveFromEventList>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d00e      	beq.n	800c2aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00b      	beq.n	800c2aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2201      	movs	r2, #1
 800c296:	601a      	str	r2, [r3, #0]
 800c298:	e007      	b.n	800c2aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c29a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c29e:	3301      	adds	r3, #1
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	b25a      	sxtb	r2, r3
 800c2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c2ae:	e001      	b.n	800c2b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c2be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3740      	adds	r7, #64	; 0x40
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b08e      	sub	sp, #56	; 0x38
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
 800c2d2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d10a      	bne.n	800c2f4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e2:	f383 8811 	msr	BASEPRI, r3
 800c2e6:	f3bf 8f6f 	isb	sy
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	623b      	str	r3, [r7, #32]
}
 800c2f0:	bf00      	nop
 800c2f2:	e7fe      	b.n	800c2f2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d00a      	beq.n	800c312 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c300:	f383 8811 	msr	BASEPRI, r3
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	61fb      	str	r3, [r7, #28]
}
 800c30e:	bf00      	nop
 800c310:	e7fe      	b.n	800c310 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d103      	bne.n	800c322 <xQueueGiveFromISR+0x58>
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d101      	bne.n	800c326 <xQueueGiveFromISR+0x5c>
 800c322:	2301      	movs	r3, #1
 800c324:	e000      	b.n	800c328 <xQueueGiveFromISR+0x5e>
 800c326:	2300      	movs	r3, #0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10a      	bne.n	800c342 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	61bb      	str	r3, [r7, #24]
}
 800c33e:	bf00      	nop
 800c340:	e7fe      	b.n	800c340 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c342:	f002 f9a9 	bl	800e698 <vPortValidateInterruptPriority>
	__asm volatile
 800c346:	f3ef 8211 	mrs	r2, BASEPRI
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	f383 8811 	msr	BASEPRI, r3
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	f3bf 8f4f 	dsb	sy
 800c35a:	617a      	str	r2, [r7, #20]
 800c35c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c35e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c360:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c366:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c36c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c36e:	429a      	cmp	r2, r3
 800c370:	d22b      	bcs.n	800c3ca <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37e:	1c5a      	adds	r2, r3, #1
 800c380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c382:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c384:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c38c:	d112      	bne.n	800c3b4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c392:	2b00      	cmp	r3, #0
 800c394:	d016      	beq.n	800c3c4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c398:	3324      	adds	r3, #36	; 0x24
 800c39a:	4618      	mov	r0, r3
 800c39c:	f001 f860 	bl	800d460 <xTaskRemoveFromEventList>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00e      	beq.n	800c3c4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00b      	beq.n	800c3c4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	601a      	str	r2, [r3, #0]
 800c3b2:	e007      	b.n	800c3c4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	b25a      	sxtb	r2, r3
 800c3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	637b      	str	r3, [r7, #52]	; 0x34
 800c3c8:	e001      	b.n	800c3ce <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	637b      	str	r3, [r7, #52]	; 0x34
 800c3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f383 8811 	msr	BASEPRI, r3
}
 800c3d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3738      	adds	r7, #56	; 0x38
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b08c      	sub	sp, #48	; 0x30
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d10a      	bne.n	800c414 <xQueueReceive+0x30>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	623b      	str	r3, [r7, #32]
}
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d103      	bne.n	800c422 <xQueueReceive+0x3e>
 800c41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d101      	bne.n	800c426 <xQueueReceive+0x42>
 800c422:	2301      	movs	r3, #1
 800c424:	e000      	b.n	800c428 <xQueueReceive+0x44>
 800c426:	2300      	movs	r3, #0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d10a      	bne.n	800c442 <xQueueReceive+0x5e>
	__asm volatile
 800c42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c430:	f383 8811 	msr	BASEPRI, r3
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	61fb      	str	r3, [r7, #28]
}
 800c43e:	bf00      	nop
 800c440:	e7fe      	b.n	800c440 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c442:	f001 f9c9 	bl	800d7d8 <xTaskGetSchedulerState>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d102      	bne.n	800c452 <xQueueReceive+0x6e>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d101      	bne.n	800c456 <xQueueReceive+0x72>
 800c452:	2301      	movs	r3, #1
 800c454:	e000      	b.n	800c458 <xQueueReceive+0x74>
 800c456:	2300      	movs	r3, #0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10a      	bne.n	800c472 <xQueueReceive+0x8e>
	__asm volatile
 800c45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c460:	f383 8811 	msr	BASEPRI, r3
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	61bb      	str	r3, [r7, #24]
}
 800c46e:	bf00      	nop
 800c470:	e7fe      	b.n	800c470 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c472:	f002 f82f 	bl	800e4d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d01f      	beq.n	800c4c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c482:	68b9      	ldr	r1, [r7, #8]
 800c484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c486:	f000 fa9b 	bl	800c9c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48c:	1e5a      	subs	r2, r3, #1
 800c48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c490:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c494:	691b      	ldr	r3, [r3, #16]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00f      	beq.n	800c4ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49c:	3310      	adds	r3, #16
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f000 ffde 	bl	800d460 <xTaskRemoveFromEventList>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d007      	beq.n	800c4ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c4aa:	4b3d      	ldr	r3, [pc, #244]	; (800c5a0 <xQueueReceive+0x1bc>)
 800c4ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4b0:	601a      	str	r2, [r3, #0]
 800c4b2:	f3bf 8f4f 	dsb	sy
 800c4b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c4ba:	f002 f83b 	bl	800e534 <vPortExitCritical>
				return pdPASS;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e069      	b.n	800c596 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d103      	bne.n	800c4d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c4c8:	f002 f834 	bl	800e534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	e062      	b.n	800c596 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d106      	bne.n	800c4e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4d6:	f107 0310 	add.w	r3, r7, #16
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f001 f822 	bl	800d524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c4e4:	f002 f826 	bl	800e534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c4e8:	f000 fd9c 	bl	800d024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c4ec:	f001 fff2 	bl	800e4d4 <vPortEnterCritical>
 800c4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4f6:	b25b      	sxtb	r3, r3
 800c4f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4fc:	d103      	bne.n	800c506 <xQueueReceive+0x122>
 800c4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c500:	2200      	movs	r2, #0
 800c502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c50c:	b25b      	sxtb	r3, r3
 800c50e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c512:	d103      	bne.n	800c51c <xQueueReceive+0x138>
 800c514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c516:	2200      	movs	r2, #0
 800c518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c51c:	f002 f80a 	bl	800e534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c520:	1d3a      	adds	r2, r7, #4
 800c522:	f107 0310 	add.w	r3, r7, #16
 800c526:	4611      	mov	r1, r2
 800c528:	4618      	mov	r0, r3
 800c52a:	f001 f811 	bl	800d550 <xTaskCheckForTimeOut>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d123      	bne.n	800c57c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c536:	f000 fabb 	bl	800cab0 <prvIsQueueEmpty>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d017      	beq.n	800c570 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c542:	3324      	adds	r3, #36	; 0x24
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	4611      	mov	r1, r2
 800c548:	4618      	mov	r0, r3
 800c54a:	f000 ff39 	bl	800d3c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c54e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c550:	f000 fa5c 	bl	800ca0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c554:	f000 fd74 	bl	800d040 <xTaskResumeAll>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d189      	bne.n	800c472 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c55e:	4b10      	ldr	r3, [pc, #64]	; (800c5a0 <xQueueReceive+0x1bc>)
 800c560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c564:	601a      	str	r2, [r3, #0]
 800c566:	f3bf 8f4f 	dsb	sy
 800c56a:	f3bf 8f6f 	isb	sy
 800c56e:	e780      	b.n	800c472 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c572:	f000 fa4b 	bl	800ca0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c576:	f000 fd63 	bl	800d040 <xTaskResumeAll>
 800c57a:	e77a      	b.n	800c472 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c57c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c57e:	f000 fa45 	bl	800ca0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c582:	f000 fd5d 	bl	800d040 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c588:	f000 fa92 	bl	800cab0 <prvIsQueueEmpty>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	f43f af6f 	beq.w	800c472 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c594:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c596:	4618      	mov	r0, r3
 800c598:	3730      	adds	r7, #48	; 0x30
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	e000ed04 	.word	0xe000ed04

0800c5a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b08e      	sub	sp, #56	; 0x38
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10a      	bne.n	800c5d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	623b      	str	r3, [r7, #32]
}
 800c5d2:	bf00      	nop
 800c5d4:	e7fe      	b.n	800c5d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00a      	beq.n	800c5f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e2:	f383 8811 	msr	BASEPRI, r3
 800c5e6:	f3bf 8f6f 	isb	sy
 800c5ea:	f3bf 8f4f 	dsb	sy
 800c5ee:	61fb      	str	r3, [r7, #28]
}
 800c5f0:	bf00      	nop
 800c5f2:	e7fe      	b.n	800c5f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5f4:	f001 f8f0 	bl	800d7d8 <xTaskGetSchedulerState>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d102      	bne.n	800c604 <xQueueSemaphoreTake+0x60>
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d101      	bne.n	800c608 <xQueueSemaphoreTake+0x64>
 800c604:	2301      	movs	r3, #1
 800c606:	e000      	b.n	800c60a <xQueueSemaphoreTake+0x66>
 800c608:	2300      	movs	r3, #0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10a      	bne.n	800c624 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	61bb      	str	r3, [r7, #24]
}
 800c620:	bf00      	nop
 800c622:	e7fe      	b.n	800c622 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c624:	f001 ff56 	bl	800e4d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c62c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c630:	2b00      	cmp	r3, #0
 800c632:	d024      	beq.n	800c67e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c636:	1e5a      	subs	r2, r3, #1
 800c638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d104      	bne.n	800c64e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c644:	f001 fa70 	bl	800db28 <pvTaskIncrementMutexHeldCount>
 800c648:	4602      	mov	r2, r0
 800c64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c650:	691b      	ldr	r3, [r3, #16]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d00f      	beq.n	800c676 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c658:	3310      	adds	r3, #16
 800c65a:	4618      	mov	r0, r3
 800c65c:	f000 ff00 	bl	800d460 <xTaskRemoveFromEventList>
 800c660:	4603      	mov	r3, r0
 800c662:	2b00      	cmp	r3, #0
 800c664:	d007      	beq.n	800c676 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c666:	4b54      	ldr	r3, [pc, #336]	; (800c7b8 <xQueueSemaphoreTake+0x214>)
 800c668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c66c:	601a      	str	r2, [r3, #0]
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c676:	f001 ff5d 	bl	800e534 <vPortExitCritical>
				return pdPASS;
 800c67a:	2301      	movs	r3, #1
 800c67c:	e097      	b.n	800c7ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d111      	bne.n	800c6a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c686:	2b00      	cmp	r3, #0
 800c688:	d00a      	beq.n	800c6a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68e:	f383 8811 	msr	BASEPRI, r3
 800c692:	f3bf 8f6f 	isb	sy
 800c696:	f3bf 8f4f 	dsb	sy
 800c69a:	617b      	str	r3, [r7, #20]
}
 800c69c:	bf00      	nop
 800c69e:	e7fe      	b.n	800c69e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c6a0:	f001 ff48 	bl	800e534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	e082      	b.n	800c7ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d106      	bne.n	800c6bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6ae:	f107 030c 	add.w	r3, r7, #12
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f000 ff36 	bl	800d524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6bc:	f001 ff3a 	bl	800e534 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6c0:	f000 fcb0 	bl	800d024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6c4:	f001 ff06 	bl	800e4d4 <vPortEnterCritical>
 800c6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6ce:	b25b      	sxtb	r3, r3
 800c6d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6d4:	d103      	bne.n	800c6de <xQueueSemaphoreTake+0x13a>
 800c6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6e4:	b25b      	sxtb	r3, r3
 800c6e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6ea:	d103      	bne.n	800c6f4 <xQueueSemaphoreTake+0x150>
 800c6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6f4:	f001 ff1e 	bl	800e534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6f8:	463a      	mov	r2, r7
 800c6fa:	f107 030c 	add.w	r3, r7, #12
 800c6fe:	4611      	mov	r1, r2
 800c700:	4618      	mov	r0, r3
 800c702:	f000 ff25 	bl	800d550 <xTaskCheckForTimeOut>
 800c706:	4603      	mov	r3, r0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d132      	bne.n	800c772 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c70c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c70e:	f000 f9cf 	bl	800cab0 <prvIsQueueEmpty>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d026      	beq.n	800c766 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d109      	bne.n	800c734 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c720:	f001 fed8 	bl	800e4d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	4618      	mov	r0, r3
 800c72a:	f001 f873 	bl	800d814 <xTaskPriorityInherit>
 800c72e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c730:	f001 ff00 	bl	800e534 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c736:	3324      	adds	r3, #36	; 0x24
 800c738:	683a      	ldr	r2, [r7, #0]
 800c73a:	4611      	mov	r1, r2
 800c73c:	4618      	mov	r0, r3
 800c73e:	f000 fe3f 	bl	800d3c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c744:	f000 f962 	bl	800ca0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c748:	f000 fc7a 	bl	800d040 <xTaskResumeAll>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	f47f af68 	bne.w	800c624 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c754:	4b18      	ldr	r3, [pc, #96]	; (800c7b8 <xQueueSemaphoreTake+0x214>)
 800c756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c75a:	601a      	str	r2, [r3, #0]
 800c75c:	f3bf 8f4f 	dsb	sy
 800c760:	f3bf 8f6f 	isb	sy
 800c764:	e75e      	b.n	800c624 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c766:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c768:	f000 f950 	bl	800ca0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c76c:	f000 fc68 	bl	800d040 <xTaskResumeAll>
 800c770:	e758      	b.n	800c624 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c772:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c774:	f000 f94a 	bl	800ca0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c778:	f000 fc62 	bl	800d040 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c77c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c77e:	f000 f997 	bl	800cab0 <prvIsQueueEmpty>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	f43f af4d 	beq.w	800c624 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00d      	beq.n	800c7ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c790:	f001 fea0 	bl	800e4d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c796:	f000 f891 	bl	800c8bc <prvGetDisinheritPriorityAfterTimeout>
 800c79a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f001 f932 	bl	800da0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c7a8:	f001 fec4 	bl	800e534 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3738      	adds	r7, #56	; 0x38
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	e000ed04 	.word	0xe000ed04

0800c7bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b08e      	sub	sp, #56	; 0x38
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d10a      	bne.n	800c7e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d6:	f383 8811 	msr	BASEPRI, r3
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	623b      	str	r3, [r7, #32]
}
 800c7e4:	bf00      	nop
 800c7e6:	e7fe      	b.n	800c7e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d103      	bne.n	800c7f6 <xQueueReceiveFromISR+0x3a>
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d101      	bne.n	800c7fa <xQueueReceiveFromISR+0x3e>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e000      	b.n	800c7fc <xQueueReceiveFromISR+0x40>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d10a      	bne.n	800c816 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c804:	f383 8811 	msr	BASEPRI, r3
 800c808:	f3bf 8f6f 	isb	sy
 800c80c:	f3bf 8f4f 	dsb	sy
 800c810:	61fb      	str	r3, [r7, #28]
}
 800c812:	bf00      	nop
 800c814:	e7fe      	b.n	800c814 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c816:	f001 ff3f 	bl	800e698 <vPortValidateInterruptPriority>
	__asm volatile
 800c81a:	f3ef 8211 	mrs	r2, BASEPRI
 800c81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	61ba      	str	r2, [r7, #24]
 800c830:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c832:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c834:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d02f      	beq.n	800c8a2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c84c:	68b9      	ldr	r1, [r7, #8]
 800c84e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c850:	f000 f8b6 	bl	800c9c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c856:	1e5a      	subs	r2, r3, #1
 800c858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c85c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c864:	d112      	bne.n	800c88c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d016      	beq.n	800c89c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c870:	3310      	adds	r3, #16
 800c872:	4618      	mov	r0, r3
 800c874:	f000 fdf4 	bl	800d460 <xTaskRemoveFromEventList>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00e      	beq.n	800c89c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00b      	beq.n	800c89c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2201      	movs	r2, #1
 800c888:	601a      	str	r2, [r3, #0]
 800c88a:	e007      	b.n	800c89c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c88c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c890:	3301      	adds	r3, #1
 800c892:	b2db      	uxtb	r3, r3
 800c894:	b25a      	sxtb	r2, r3
 800c896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c89c:	2301      	movs	r3, #1
 800c89e:	637b      	str	r3, [r7, #52]	; 0x34
 800c8a0:	e001      	b.n	800c8a6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	637b      	str	r3, [r7, #52]	; 0x34
 800c8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	f383 8811 	msr	BASEPRI, r3
}
 800c8b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3738      	adds	r7, #56	; 0x38
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c8bc:	b480      	push	{r7}
 800c8be:	b085      	sub	sp, #20
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d006      	beq.n	800c8da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f1c3 0307 	rsb	r3, r3, #7
 800c8d6:	60fb      	str	r3, [r7, #12]
 800c8d8:	e001      	b.n	800c8de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c8de:	68fb      	ldr	r3, [r7, #12]
	}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3714      	adds	r7, #20
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b086      	sub	sp, #24
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c900:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c906:	2b00      	cmp	r3, #0
 800c908:	d10d      	bne.n	800c926 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d14d      	bne.n	800c9ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	4618      	mov	r0, r3
 800c918:	f000 fff2 	bl	800d900 <xTaskPriorityDisinherit>
 800c91c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2200      	movs	r2, #0
 800c922:	609a      	str	r2, [r3, #8]
 800c924:	e043      	b.n	800c9ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d119      	bne.n	800c960 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	6858      	ldr	r0, [r3, #4]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c934:	461a      	mov	r2, r3
 800c936:	68b9      	ldr	r1, [r7, #8]
 800c938:	f002 f906 	bl	800eb48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	685a      	ldr	r2, [r3, #4]
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c944:	441a      	add	r2, r3
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	685a      	ldr	r2, [r3, #4]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	429a      	cmp	r2, r3
 800c954:	d32b      	bcc.n	800c9ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	605a      	str	r2, [r3, #4]
 800c95e:	e026      	b.n	800c9ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	68d8      	ldr	r0, [r3, #12]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c968:	461a      	mov	r2, r3
 800c96a:	68b9      	ldr	r1, [r7, #8]
 800c96c:	f002 f8ec 	bl	800eb48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	68da      	ldr	r2, [r3, #12]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c978:	425b      	negs	r3, r3
 800c97a:	441a      	add	r2, r3
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	68da      	ldr	r2, [r3, #12]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d207      	bcs.n	800c99c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	689a      	ldr	r2, [r3, #8]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c994:	425b      	negs	r3, r3
 800c996:	441a      	add	r2, r3
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b02      	cmp	r3, #2
 800c9a0:	d105      	bne.n	800c9ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d002      	beq.n	800c9ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	1c5a      	adds	r2, r3, #1
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c9b6:	697b      	ldr	r3, [r7, #20]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3718      	adds	r7, #24
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d018      	beq.n	800ca04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	68da      	ldr	r2, [r3, #12]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9da:	441a      	add	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	68da      	ldr	r2, [r3, #12]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	689b      	ldr	r3, [r3, #8]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d303      	bcc.n	800c9f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	68d9      	ldr	r1, [r3, #12]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	6838      	ldr	r0, [r7, #0]
 800ca00:	f002 f8a2 	bl	800eb48 <memcpy>
	}
}
 800ca04:	bf00      	nop
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ca14:	f001 fd5e 	bl	800e4d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca20:	e011      	b.n	800ca46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d012      	beq.n	800ca50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	3324      	adds	r3, #36	; 0x24
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 fd16 	bl	800d460 <xTaskRemoveFromEventList>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d001      	beq.n	800ca3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ca3a:	f000 fdeb 	bl	800d614 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ca3e:	7bfb      	ldrb	r3, [r7, #15]
 800ca40:	3b01      	subs	r3, #1
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	dce9      	bgt.n	800ca22 <prvUnlockQueue+0x16>
 800ca4e:	e000      	b.n	800ca52 <prvUnlockQueue+0x46>
					break;
 800ca50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	22ff      	movs	r2, #255	; 0xff
 800ca56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ca5a:	f001 fd6b 	bl	800e534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ca5e:	f001 fd39 	bl	800e4d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca6a:	e011      	b.n	800ca90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	691b      	ldr	r3, [r3, #16]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d012      	beq.n	800ca9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	3310      	adds	r3, #16
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f000 fcf1 	bl	800d460 <xTaskRemoveFromEventList>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d001      	beq.n	800ca88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ca84:	f000 fdc6 	bl	800d614 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca88:	7bbb      	ldrb	r3, [r7, #14]
 800ca8a:	3b01      	subs	r3, #1
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	dce9      	bgt.n	800ca6c <prvUnlockQueue+0x60>
 800ca98:	e000      	b.n	800ca9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	22ff      	movs	r2, #255	; 0xff
 800caa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800caa4:	f001 fd46 	bl	800e534 <vPortExitCritical>
}
 800caa8:	bf00      	nop
 800caaa:	3710      	adds	r7, #16
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cab8:	f001 fd0c 	bl	800e4d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d102      	bne.n	800caca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cac4:	2301      	movs	r3, #1
 800cac6:	60fb      	str	r3, [r7, #12]
 800cac8:	e001      	b.n	800cace <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800caca:	2300      	movs	r3, #0
 800cacc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cace:	f001 fd31 	bl	800e534 <vPortExitCritical>

	return xReturn;
 800cad2:	68fb      	ldr	r3, [r7, #12]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cae4:	f001 fcf6 	bl	800e4d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d102      	bne.n	800cafa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800caf4:	2301      	movs	r3, #1
 800caf6:	60fb      	str	r3, [r7, #12]
 800caf8:	e001      	b.n	800cafe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cafa:	2300      	movs	r3, #0
 800cafc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cafe:	f001 fd19 	bl	800e534 <vPortExitCritical>

	return xReturn;
 800cb02:	68fb      	ldr	r3, [r7, #12]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3710      	adds	r7, #16
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b085      	sub	sp, #20
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb16:	2300      	movs	r3, #0
 800cb18:	60fb      	str	r3, [r7, #12]
 800cb1a:	e014      	b.n	800cb46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cb1c:	4a0f      	ldr	r2, [pc, #60]	; (800cb5c <vQueueAddToRegistry+0x50>)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d10b      	bne.n	800cb40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cb28:	490c      	ldr	r1, [pc, #48]	; (800cb5c <vQueueAddToRegistry+0x50>)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	683a      	ldr	r2, [r7, #0]
 800cb2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cb32:	4a0a      	ldr	r2, [pc, #40]	; (800cb5c <vQueueAddToRegistry+0x50>)
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	00db      	lsls	r3, r3, #3
 800cb38:	4413      	add	r3, r2
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cb3e:	e006      	b.n	800cb4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	3301      	adds	r3, #1
 800cb44:	60fb      	str	r3, [r7, #12]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2b07      	cmp	r3, #7
 800cb4a:	d9e7      	bls.n	800cb1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cb4c:	bf00      	nop
 800cb4e:	bf00      	nop
 800cb50:	3714      	adds	r7, #20
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr
 800cb5a:	bf00      	nop
 800cb5c:	2000ae2c 	.word	0x2000ae2c

0800cb60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b086      	sub	sp, #24
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	60f8      	str	r0, [r7, #12]
 800cb68:	60b9      	str	r1, [r7, #8]
 800cb6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cb70:	f001 fcb0 	bl	800e4d4 <vPortEnterCritical>
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb7a:	b25b      	sxtb	r3, r3
 800cb7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb80:	d103      	bne.n	800cb8a <vQueueWaitForMessageRestricted+0x2a>
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb90:	b25b      	sxtb	r3, r3
 800cb92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb96:	d103      	bne.n	800cba0 <vQueueWaitForMessageRestricted+0x40>
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cba0:	f001 fcc8 	bl	800e534 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d106      	bne.n	800cbba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	3324      	adds	r3, #36	; 0x24
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	68b9      	ldr	r1, [r7, #8]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f000 fc27 	bl	800d408 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cbba:	6978      	ldr	r0, [r7, #20]
 800cbbc:	f7ff ff26 	bl	800ca0c <prvUnlockQueue>
	}
 800cbc0:	bf00      	nop
 800cbc2:	3718      	adds	r7, #24
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b08e      	sub	sp, #56	; 0x38
 800cbcc:	af04      	add	r7, sp, #16
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	607a      	str	r2, [r7, #4]
 800cbd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d10a      	bne.n	800cbf2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe0:	f383 8811 	msr	BASEPRI, r3
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	f3bf 8f4f 	dsb	sy
 800cbec:	623b      	str	r3, [r7, #32]
}
 800cbee:	bf00      	nop
 800cbf0:	e7fe      	b.n	800cbf0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10a      	bne.n	800cc0e <xTaskCreateStatic+0x46>
	__asm volatile
 800cbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfc:	f383 8811 	msr	BASEPRI, r3
 800cc00:	f3bf 8f6f 	isb	sy
 800cc04:	f3bf 8f4f 	dsb	sy
 800cc08:	61fb      	str	r3, [r7, #28]
}
 800cc0a:	bf00      	nop
 800cc0c:	e7fe      	b.n	800cc0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cc0e:	2354      	movs	r3, #84	; 0x54
 800cc10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	2b54      	cmp	r3, #84	; 0x54
 800cc16:	d00a      	beq.n	800cc2e <xTaskCreateStatic+0x66>
	__asm volatile
 800cc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1c:	f383 8811 	msr	BASEPRI, r3
 800cc20:	f3bf 8f6f 	isb	sy
 800cc24:	f3bf 8f4f 	dsb	sy
 800cc28:	61bb      	str	r3, [r7, #24]
}
 800cc2a:	bf00      	nop
 800cc2c:	e7fe      	b.n	800cc2c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d01e      	beq.n	800cc74 <xTaskCreateStatic+0xac>
 800cc36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d01b      	beq.n	800cc74 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc48:	2202      	movs	r2, #2
 800cc4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc4e:	2300      	movs	r3, #0
 800cc50:	9303      	str	r3, [sp, #12]
 800cc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc54:	9302      	str	r3, [sp, #8]
 800cc56:	f107 0314 	add.w	r3, r7, #20
 800cc5a:	9301      	str	r3, [sp, #4]
 800cc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5e:	9300      	str	r3, [sp, #0]
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	68b9      	ldr	r1, [r7, #8]
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f000 f850 	bl	800cd0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc6e:	f000 f8d5 	bl	800ce1c <prvAddNewTaskToReadyList>
 800cc72:	e001      	b.n	800cc78 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cc74:	2300      	movs	r3, #0
 800cc76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc78:	697b      	ldr	r3, [r7, #20]
	}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3728      	adds	r7, #40	; 0x28
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b08c      	sub	sp, #48	; 0x30
 800cc86:	af04      	add	r7, sp, #16
 800cc88:	60f8      	str	r0, [r7, #12]
 800cc8a:	60b9      	str	r1, [r7, #8]
 800cc8c:	603b      	str	r3, [r7, #0]
 800cc8e:	4613      	mov	r3, r2
 800cc90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc92:	88fb      	ldrh	r3, [r7, #6]
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	4618      	mov	r0, r3
 800cc98:	f001 fd3e 	bl	800e718 <pvPortMalloc>
 800cc9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00e      	beq.n	800ccc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cca4:	2054      	movs	r0, #84	; 0x54
 800cca6:	f001 fd37 	bl	800e718 <pvPortMalloc>
 800ccaa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d003      	beq.n	800ccba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	697a      	ldr	r2, [r7, #20]
 800ccb6:	631a      	str	r2, [r3, #48]	; 0x30
 800ccb8:	e005      	b.n	800ccc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ccba:	6978      	ldr	r0, [r7, #20]
 800ccbc:	f001 fdf8 	bl	800e8b0 <vPortFree>
 800ccc0:	e001      	b.n	800ccc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d017      	beq.n	800ccfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ccd4:	88fa      	ldrh	r2, [r7, #6]
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	9303      	str	r3, [sp, #12]
 800ccda:	69fb      	ldr	r3, [r7, #28]
 800ccdc:	9302      	str	r3, [sp, #8]
 800ccde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce0:	9301      	str	r3, [sp, #4]
 800cce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce4:	9300      	str	r3, [sp, #0]
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	68b9      	ldr	r1, [r7, #8]
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f000 f80e 	bl	800cd0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ccf0:	69f8      	ldr	r0, [r7, #28]
 800ccf2:	f000 f893 	bl	800ce1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	61bb      	str	r3, [r7, #24]
 800ccfa:	e002      	b.n	800cd02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ccfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cd02:	69bb      	ldr	r3, [r7, #24]
	}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3720      	adds	r7, #32
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b088      	sub	sp, #32
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	607a      	str	r2, [r7, #4]
 800cd18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cd24:	3b01      	subs	r3, #1
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	4413      	add	r3, r2
 800cd2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd2c:	69bb      	ldr	r3, [r7, #24]
 800cd2e:	f023 0307 	bic.w	r3, r3, #7
 800cd32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	f003 0307 	and.w	r3, r3, #7
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d00a      	beq.n	800cd54 <prvInitialiseNewTask+0x48>
	__asm volatile
 800cd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd42:	f383 8811 	msr	BASEPRI, r3
 800cd46:	f3bf 8f6f 	isb	sy
 800cd4a:	f3bf 8f4f 	dsb	sy
 800cd4e:	617b      	str	r3, [r7, #20]
}
 800cd50:	bf00      	nop
 800cd52:	e7fe      	b.n	800cd52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d01f      	beq.n	800cd9a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	61fb      	str	r3, [r7, #28]
 800cd5e:	e012      	b.n	800cd86 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd60:	68ba      	ldr	r2, [r7, #8]
 800cd62:	69fb      	ldr	r3, [r7, #28]
 800cd64:	4413      	add	r3, r2
 800cd66:	7819      	ldrb	r1, [r3, #0]
 800cd68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd6a:	69fb      	ldr	r3, [r7, #28]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	3334      	adds	r3, #52	; 0x34
 800cd70:	460a      	mov	r2, r1
 800cd72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd74:	68ba      	ldr	r2, [r7, #8]
 800cd76:	69fb      	ldr	r3, [r7, #28]
 800cd78:	4413      	add	r3, r2
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d006      	beq.n	800cd8e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd80:	69fb      	ldr	r3, [r7, #28]
 800cd82:	3301      	adds	r3, #1
 800cd84:	61fb      	str	r3, [r7, #28]
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	2b0f      	cmp	r3, #15
 800cd8a:	d9e9      	bls.n	800cd60 <prvInitialiseNewTask+0x54>
 800cd8c:	e000      	b.n	800cd90 <prvInitialiseNewTask+0x84>
			{
				break;
 800cd8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd92:	2200      	movs	r2, #0
 800cd94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd98:	e003      	b.n	800cda2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda4:	2b06      	cmp	r3, #6
 800cda6:	d901      	bls.n	800cdac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cda8:	2306      	movs	r3, #6
 800cdaa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdb6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdba:	2200      	movs	r2, #0
 800cdbc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc0:	3304      	adds	r3, #4
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7fe ff1a 	bl	800bbfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdca:	3318      	adds	r3, #24
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7fe ff15 	bl	800bbfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdda:	f1c3 0207 	rsb	r2, r3, #7
 800cdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cde6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdea:	2200      	movs	r2, #0
 800cdec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cdf6:	683a      	ldr	r2, [r7, #0]
 800cdf8:	68f9      	ldr	r1, [r7, #12]
 800cdfa:	69b8      	ldr	r0, [r7, #24]
 800cdfc:	f001 fa40 	bl	800e280 <pxPortInitialiseStack>
 800ce00:	4602      	mov	r2, r0
 800ce02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ce06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d002      	beq.n	800ce12 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ce0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce12:	bf00      	nop
 800ce14:	3720      	adds	r7, #32
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
	...

0800ce1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce24:	f001 fb56 	bl	800e4d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce28:	4b2a      	ldr	r3, [pc, #168]	; (800ced4 <prvAddNewTaskToReadyList+0xb8>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	4a29      	ldr	r2, [pc, #164]	; (800ced4 <prvAddNewTaskToReadyList+0xb8>)
 800ce30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce32:	4b29      	ldr	r3, [pc, #164]	; (800ced8 <prvAddNewTaskToReadyList+0xbc>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d109      	bne.n	800ce4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce3a:	4a27      	ldr	r2, [pc, #156]	; (800ced8 <prvAddNewTaskToReadyList+0xbc>)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce40:	4b24      	ldr	r3, [pc, #144]	; (800ced4 <prvAddNewTaskToReadyList+0xb8>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d110      	bne.n	800ce6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce48:	f000 fc08 	bl	800d65c <prvInitialiseTaskLists>
 800ce4c:	e00d      	b.n	800ce6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce4e:	4b23      	ldr	r3, [pc, #140]	; (800cedc <prvAddNewTaskToReadyList+0xc0>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d109      	bne.n	800ce6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce56:	4b20      	ldr	r3, [pc, #128]	; (800ced8 <prvAddNewTaskToReadyList+0xbc>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d802      	bhi.n	800ce6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce64:	4a1c      	ldr	r2, [pc, #112]	; (800ced8 <prvAddNewTaskToReadyList+0xbc>)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ce6a:	4b1d      	ldr	r3, [pc, #116]	; (800cee0 <prvAddNewTaskToReadyList+0xc4>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	4a1b      	ldr	r2, [pc, #108]	; (800cee0 <prvAddNewTaskToReadyList+0xc4>)
 800ce72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce78:	2201      	movs	r2, #1
 800ce7a:	409a      	lsls	r2, r3
 800ce7c:	4b19      	ldr	r3, [pc, #100]	; (800cee4 <prvAddNewTaskToReadyList+0xc8>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4313      	orrs	r3, r2
 800ce82:	4a18      	ldr	r2, [pc, #96]	; (800cee4 <prvAddNewTaskToReadyList+0xc8>)
 800ce84:	6013      	str	r3, [r2, #0]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	4413      	add	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	4a15      	ldr	r2, [pc, #84]	; (800cee8 <prvAddNewTaskToReadyList+0xcc>)
 800ce94:	441a      	add	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	3304      	adds	r3, #4
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	f7fe feba 	bl	800bc16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cea2:	f001 fb47 	bl	800e534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cea6:	4b0d      	ldr	r3, [pc, #52]	; (800cedc <prvAddNewTaskToReadyList+0xc0>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d00e      	beq.n	800cecc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ceae:	4b0a      	ldr	r3, [pc, #40]	; (800ced8 <prvAddNewTaskToReadyList+0xbc>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d207      	bcs.n	800cecc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cebc:	4b0b      	ldr	r3, [pc, #44]	; (800ceec <prvAddNewTaskToReadyList+0xd0>)
 800cebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cec2:	601a      	str	r2, [r3, #0]
 800cec4:	f3bf 8f4f 	dsb	sy
 800cec8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cecc:	bf00      	nop
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	2000085c 	.word	0x2000085c
 800ced8:	2000075c 	.word	0x2000075c
 800cedc:	20000868 	.word	0x20000868
 800cee0:	20000878 	.word	0x20000878
 800cee4:	20000864 	.word	0x20000864
 800cee8:	20000760 	.word	0x20000760
 800ceec:	e000ed04 	.word	0xe000ed04

0800cef0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cef8:	2300      	movs	r3, #0
 800cefa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d017      	beq.n	800cf32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cf02:	4b13      	ldr	r3, [pc, #76]	; (800cf50 <vTaskDelay+0x60>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00a      	beq.n	800cf20 <vTaskDelay+0x30>
	__asm volatile
 800cf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0e:	f383 8811 	msr	BASEPRI, r3
 800cf12:	f3bf 8f6f 	isb	sy
 800cf16:	f3bf 8f4f 	dsb	sy
 800cf1a:	60bb      	str	r3, [r7, #8]
}
 800cf1c:	bf00      	nop
 800cf1e:	e7fe      	b.n	800cf1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cf20:	f000 f880 	bl	800d024 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf24:	2100      	movs	r1, #0
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 fe12 	bl	800db50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cf2c:	f000 f888 	bl	800d040 <xTaskResumeAll>
 800cf30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d107      	bne.n	800cf48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cf38:	4b06      	ldr	r3, [pc, #24]	; (800cf54 <vTaskDelay+0x64>)
 800cf3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf3e:	601a      	str	r2, [r3, #0]
 800cf40:	f3bf 8f4f 	dsb	sy
 800cf44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf48:	bf00      	nop
 800cf4a:	3710      	adds	r7, #16
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	20000884 	.word	0x20000884
 800cf54:	e000ed04 	.word	0xe000ed04

0800cf58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b08a      	sub	sp, #40	; 0x28
 800cf5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf62:	2300      	movs	r3, #0
 800cf64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cf66:	463a      	mov	r2, r7
 800cf68:	1d39      	adds	r1, r7, #4
 800cf6a:	f107 0308 	add.w	r3, r7, #8
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7f5 fadc 	bl	800252c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf74:	6839      	ldr	r1, [r7, #0]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	68ba      	ldr	r2, [r7, #8]
 800cf7a:	9202      	str	r2, [sp, #8]
 800cf7c:	9301      	str	r3, [sp, #4]
 800cf7e:	2300      	movs	r3, #0
 800cf80:	9300      	str	r3, [sp, #0]
 800cf82:	2300      	movs	r3, #0
 800cf84:	460a      	mov	r2, r1
 800cf86:	4921      	ldr	r1, [pc, #132]	; (800d00c <vTaskStartScheduler+0xb4>)
 800cf88:	4821      	ldr	r0, [pc, #132]	; (800d010 <vTaskStartScheduler+0xb8>)
 800cf8a:	f7ff fe1d 	bl	800cbc8 <xTaskCreateStatic>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	4a20      	ldr	r2, [pc, #128]	; (800d014 <vTaskStartScheduler+0xbc>)
 800cf92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf94:	4b1f      	ldr	r3, [pc, #124]	; (800d014 <vTaskStartScheduler+0xbc>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d002      	beq.n	800cfa2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	617b      	str	r3, [r7, #20]
 800cfa0:	e001      	b.n	800cfa6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d102      	bne.n	800cfb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cfac:	f000 fe36 	bl	800dc1c <xTimerCreateTimerTask>
 800cfb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d116      	bne.n	800cfe6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800cfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfbc:	f383 8811 	msr	BASEPRI, r3
 800cfc0:	f3bf 8f6f 	isb	sy
 800cfc4:	f3bf 8f4f 	dsb	sy
 800cfc8:	613b      	str	r3, [r7, #16]
}
 800cfca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cfcc:	4b12      	ldr	r3, [pc, #72]	; (800d018 <vTaskStartScheduler+0xc0>)
 800cfce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cfd4:	4b11      	ldr	r3, [pc, #68]	; (800d01c <vTaskStartScheduler+0xc4>)
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cfda:	4b11      	ldr	r3, [pc, #68]	; (800d020 <vTaskStartScheduler+0xc8>)
 800cfdc:	2200      	movs	r2, #0
 800cfde:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cfe0:	f001 f9d6 	bl	800e390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cfe4:	e00e      	b.n	800d004 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfec:	d10a      	bne.n	800d004 <vTaskStartScheduler+0xac>
	__asm volatile
 800cfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	60fb      	str	r3, [r7, #12]
}
 800d000:	bf00      	nop
 800d002:	e7fe      	b.n	800d002 <vTaskStartScheduler+0xaa>
}
 800d004:	bf00      	nop
 800d006:	3718      	adds	r7, #24
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}
 800d00c:	08010090 	.word	0x08010090
 800d010:	0800d62d 	.word	0x0800d62d
 800d014:	20000880 	.word	0x20000880
 800d018:	2000087c 	.word	0x2000087c
 800d01c:	20000868 	.word	0x20000868
 800d020:	20000860 	.word	0x20000860

0800d024 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d024:	b480      	push	{r7}
 800d026:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d028:	4b04      	ldr	r3, [pc, #16]	; (800d03c <vTaskSuspendAll+0x18>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	3301      	adds	r3, #1
 800d02e:	4a03      	ldr	r2, [pc, #12]	; (800d03c <vTaskSuspendAll+0x18>)
 800d030:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d032:	bf00      	nop
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr
 800d03c:	20000884 	.word	0x20000884

0800d040 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d046:	2300      	movs	r3, #0
 800d048:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d04a:	2300      	movs	r3, #0
 800d04c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d04e:	4b41      	ldr	r3, [pc, #260]	; (800d154 <xTaskResumeAll+0x114>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d10a      	bne.n	800d06c <xTaskResumeAll+0x2c>
	__asm volatile
 800d056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d05a:	f383 8811 	msr	BASEPRI, r3
 800d05e:	f3bf 8f6f 	isb	sy
 800d062:	f3bf 8f4f 	dsb	sy
 800d066:	603b      	str	r3, [r7, #0]
}
 800d068:	bf00      	nop
 800d06a:	e7fe      	b.n	800d06a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d06c:	f001 fa32 	bl	800e4d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d070:	4b38      	ldr	r3, [pc, #224]	; (800d154 <xTaskResumeAll+0x114>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	3b01      	subs	r3, #1
 800d076:	4a37      	ldr	r2, [pc, #220]	; (800d154 <xTaskResumeAll+0x114>)
 800d078:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d07a:	4b36      	ldr	r3, [pc, #216]	; (800d154 <xTaskResumeAll+0x114>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d161      	bne.n	800d146 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d082:	4b35      	ldr	r3, [pc, #212]	; (800d158 <xTaskResumeAll+0x118>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d05d      	beq.n	800d146 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d08a:	e02e      	b.n	800d0ea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d08c:	4b33      	ldr	r3, [pc, #204]	; (800d15c <xTaskResumeAll+0x11c>)
 800d08e:	68db      	ldr	r3, [r3, #12]
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	3318      	adds	r3, #24
 800d098:	4618      	mov	r0, r3
 800d09a:	f7fe fe19 	bl	800bcd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3304      	adds	r3, #4
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fe fe14 	bl	800bcd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	409a      	lsls	r2, r3
 800d0b0:	4b2b      	ldr	r3, [pc, #172]	; (800d160 <xTaskResumeAll+0x120>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4313      	orrs	r3, r2
 800d0b6:	4a2a      	ldr	r2, [pc, #168]	; (800d160 <xTaskResumeAll+0x120>)
 800d0b8:	6013      	str	r3, [r2, #0]
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0be:	4613      	mov	r3, r2
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	4413      	add	r3, r2
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	4a27      	ldr	r2, [pc, #156]	; (800d164 <xTaskResumeAll+0x124>)
 800d0c8:	441a      	add	r2, r3
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	4610      	mov	r0, r2
 800d0d2:	f7fe fda0 	bl	800bc16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0da:	4b23      	ldr	r3, [pc, #140]	; (800d168 <xTaskResumeAll+0x128>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d302      	bcc.n	800d0ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d0e4:	4b21      	ldr	r3, [pc, #132]	; (800d16c <xTaskResumeAll+0x12c>)
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0ea:	4b1c      	ldr	r3, [pc, #112]	; (800d15c <xTaskResumeAll+0x11c>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1cc      	bne.n	800d08c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d001      	beq.n	800d0fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d0f8:	f000 fb4e 	bl	800d798 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d0fc:	4b1c      	ldr	r3, [pc, #112]	; (800d170 <xTaskResumeAll+0x130>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d010      	beq.n	800d12a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d108:	f000 f846 	bl	800d198 <xTaskIncrementTick>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d002      	beq.n	800d118 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d112:	4b16      	ldr	r3, [pc, #88]	; (800d16c <xTaskResumeAll+0x12c>)
 800d114:	2201      	movs	r2, #1
 800d116:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	3b01      	subs	r3, #1
 800d11c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1f1      	bne.n	800d108 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d124:	4b12      	ldr	r3, [pc, #72]	; (800d170 <xTaskResumeAll+0x130>)
 800d126:	2200      	movs	r2, #0
 800d128:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d12a:	4b10      	ldr	r3, [pc, #64]	; (800d16c <xTaskResumeAll+0x12c>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d009      	beq.n	800d146 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d132:	2301      	movs	r3, #1
 800d134:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d136:	4b0f      	ldr	r3, [pc, #60]	; (800d174 <xTaskResumeAll+0x134>)
 800d138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d13c:	601a      	str	r2, [r3, #0]
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d146:	f001 f9f5 	bl	800e534 <vPortExitCritical>

	return xAlreadyYielded;
 800d14a:	68bb      	ldr	r3, [r7, #8]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	20000884 	.word	0x20000884
 800d158:	2000085c 	.word	0x2000085c
 800d15c:	2000081c 	.word	0x2000081c
 800d160:	20000864 	.word	0x20000864
 800d164:	20000760 	.word	0x20000760
 800d168:	2000075c 	.word	0x2000075c
 800d16c:	20000870 	.word	0x20000870
 800d170:	2000086c 	.word	0x2000086c
 800d174:	e000ed04 	.word	0xe000ed04

0800d178 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d178:	b480      	push	{r7}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d17e:	4b05      	ldr	r3, [pc, #20]	; (800d194 <xTaskGetTickCount+0x1c>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d184:	687b      	ldr	r3, [r7, #4]
}
 800d186:	4618      	mov	r0, r3
 800d188:	370c      	adds	r7, #12
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop
 800d194:	20000860 	.word	0x20000860

0800d198 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b086      	sub	sp, #24
 800d19c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1a2:	4b4e      	ldr	r3, [pc, #312]	; (800d2dc <xTaskIncrementTick+0x144>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	f040 808e 	bne.w	800d2c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d1ac:	4b4c      	ldr	r3, [pc, #304]	; (800d2e0 <xTaskIncrementTick+0x148>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d1b4:	4a4a      	ldr	r2, [pc, #296]	; (800d2e0 <xTaskIncrementTick+0x148>)
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d120      	bne.n	800d202 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d1c0:	4b48      	ldr	r3, [pc, #288]	; (800d2e4 <xTaskIncrementTick+0x14c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00a      	beq.n	800d1e0 <xTaskIncrementTick+0x48>
	__asm volatile
 800d1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ce:	f383 8811 	msr	BASEPRI, r3
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	603b      	str	r3, [r7, #0]
}
 800d1dc:	bf00      	nop
 800d1de:	e7fe      	b.n	800d1de <xTaskIncrementTick+0x46>
 800d1e0:	4b40      	ldr	r3, [pc, #256]	; (800d2e4 <xTaskIncrementTick+0x14c>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	60fb      	str	r3, [r7, #12]
 800d1e6:	4b40      	ldr	r3, [pc, #256]	; (800d2e8 <xTaskIncrementTick+0x150>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4a3e      	ldr	r2, [pc, #248]	; (800d2e4 <xTaskIncrementTick+0x14c>)
 800d1ec:	6013      	str	r3, [r2, #0]
 800d1ee:	4a3e      	ldr	r2, [pc, #248]	; (800d2e8 <xTaskIncrementTick+0x150>)
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	6013      	str	r3, [r2, #0]
 800d1f4:	4b3d      	ldr	r3, [pc, #244]	; (800d2ec <xTaskIncrementTick+0x154>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	4a3c      	ldr	r2, [pc, #240]	; (800d2ec <xTaskIncrementTick+0x154>)
 800d1fc:	6013      	str	r3, [r2, #0]
 800d1fe:	f000 facb 	bl	800d798 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d202:	4b3b      	ldr	r3, [pc, #236]	; (800d2f0 <xTaskIncrementTick+0x158>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	693a      	ldr	r2, [r7, #16]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d348      	bcc.n	800d29e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d20c:	4b35      	ldr	r3, [pc, #212]	; (800d2e4 <xTaskIncrementTick+0x14c>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d104      	bne.n	800d220 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d216:	4b36      	ldr	r3, [pc, #216]	; (800d2f0 <xTaskIncrementTick+0x158>)
 800d218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d21c:	601a      	str	r2, [r3, #0]
					break;
 800d21e:	e03e      	b.n	800d29e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d220:	4b30      	ldr	r3, [pc, #192]	; (800d2e4 <xTaskIncrementTick+0x14c>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	68db      	ldr	r3, [r3, #12]
 800d226:	68db      	ldr	r3, [r3, #12]
 800d228:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d230:	693a      	ldr	r2, [r7, #16]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	429a      	cmp	r2, r3
 800d236:	d203      	bcs.n	800d240 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d238:	4a2d      	ldr	r2, [pc, #180]	; (800d2f0 <xTaskIncrementTick+0x158>)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d23e:	e02e      	b.n	800d29e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	3304      	adds	r3, #4
 800d244:	4618      	mov	r0, r3
 800d246:	f7fe fd43 	bl	800bcd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d004      	beq.n	800d25c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	3318      	adds	r3, #24
 800d256:	4618      	mov	r0, r3
 800d258:	f7fe fd3a 	bl	800bcd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d260:	2201      	movs	r2, #1
 800d262:	409a      	lsls	r2, r3
 800d264:	4b23      	ldr	r3, [pc, #140]	; (800d2f4 <xTaskIncrementTick+0x15c>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4313      	orrs	r3, r2
 800d26a:	4a22      	ldr	r2, [pc, #136]	; (800d2f4 <xTaskIncrementTick+0x15c>)
 800d26c:	6013      	str	r3, [r2, #0]
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d272:	4613      	mov	r3, r2
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4413      	add	r3, r2
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	4a1f      	ldr	r2, [pc, #124]	; (800d2f8 <xTaskIncrementTick+0x160>)
 800d27c:	441a      	add	r2, r3
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	3304      	adds	r3, #4
 800d282:	4619      	mov	r1, r3
 800d284:	4610      	mov	r0, r2
 800d286:	f7fe fcc6 	bl	800bc16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d28e:	4b1b      	ldr	r3, [pc, #108]	; (800d2fc <xTaskIncrementTick+0x164>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d294:	429a      	cmp	r2, r3
 800d296:	d3b9      	bcc.n	800d20c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d298:	2301      	movs	r3, #1
 800d29a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d29c:	e7b6      	b.n	800d20c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d29e:	4b17      	ldr	r3, [pc, #92]	; (800d2fc <xTaskIncrementTick+0x164>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2a4:	4914      	ldr	r1, [pc, #80]	; (800d2f8 <xTaskIncrementTick+0x160>)
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	4413      	add	r3, r2
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	440b      	add	r3, r1
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d901      	bls.n	800d2ba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d2ba:	4b11      	ldr	r3, [pc, #68]	; (800d300 <xTaskIncrementTick+0x168>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d007      	beq.n	800d2d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	617b      	str	r3, [r7, #20]
 800d2c6:	e004      	b.n	800d2d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d2c8:	4b0e      	ldr	r3, [pc, #56]	; (800d304 <xTaskIncrementTick+0x16c>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	4a0d      	ldr	r2, [pc, #52]	; (800d304 <xTaskIncrementTick+0x16c>)
 800d2d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d2d2:	697b      	ldr	r3, [r7, #20]
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3718      	adds	r7, #24
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	20000884 	.word	0x20000884
 800d2e0:	20000860 	.word	0x20000860
 800d2e4:	20000814 	.word	0x20000814
 800d2e8:	20000818 	.word	0x20000818
 800d2ec:	20000874 	.word	0x20000874
 800d2f0:	2000087c 	.word	0x2000087c
 800d2f4:	20000864 	.word	0x20000864
 800d2f8:	20000760 	.word	0x20000760
 800d2fc:	2000075c 	.word	0x2000075c
 800d300:	20000870 	.word	0x20000870
 800d304:	2000086c 	.word	0x2000086c

0800d308 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d308:	b480      	push	{r7}
 800d30a:	b087      	sub	sp, #28
 800d30c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d30e:	4b27      	ldr	r3, [pc, #156]	; (800d3ac <vTaskSwitchContext+0xa4>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d003      	beq.n	800d31e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d316:	4b26      	ldr	r3, [pc, #152]	; (800d3b0 <vTaskSwitchContext+0xa8>)
 800d318:	2201      	movs	r2, #1
 800d31a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d31c:	e03f      	b.n	800d39e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d31e:	4b24      	ldr	r3, [pc, #144]	; (800d3b0 <vTaskSwitchContext+0xa8>)
 800d320:	2200      	movs	r2, #0
 800d322:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d324:	4b23      	ldr	r3, [pc, #140]	; (800d3b4 <vTaskSwitchContext+0xac>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	fab3 f383 	clz	r3, r3
 800d330:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d332:	7afb      	ldrb	r3, [r7, #11]
 800d334:	f1c3 031f 	rsb	r3, r3, #31
 800d338:	617b      	str	r3, [r7, #20]
 800d33a:	491f      	ldr	r1, [pc, #124]	; (800d3b8 <vTaskSwitchContext+0xb0>)
 800d33c:	697a      	ldr	r2, [r7, #20]
 800d33e:	4613      	mov	r3, r2
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	4413      	add	r3, r2
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	440b      	add	r3, r1
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d10a      	bne.n	800d364 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d352:	f383 8811 	msr	BASEPRI, r3
 800d356:	f3bf 8f6f 	isb	sy
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	607b      	str	r3, [r7, #4]
}
 800d360:	bf00      	nop
 800d362:	e7fe      	b.n	800d362 <vTaskSwitchContext+0x5a>
 800d364:	697a      	ldr	r2, [r7, #20]
 800d366:	4613      	mov	r3, r2
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	4413      	add	r3, r2
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	4a12      	ldr	r2, [pc, #72]	; (800d3b8 <vTaskSwitchContext+0xb0>)
 800d370:	4413      	add	r3, r2
 800d372:	613b      	str	r3, [r7, #16]
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	685b      	ldr	r3, [r3, #4]
 800d378:	685a      	ldr	r2, [r3, #4]
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	605a      	str	r2, [r3, #4]
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	685a      	ldr	r2, [r3, #4]
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	3308      	adds	r3, #8
 800d386:	429a      	cmp	r2, r3
 800d388:	d104      	bne.n	800d394 <vTaskSwitchContext+0x8c>
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	685a      	ldr	r2, [r3, #4]
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	605a      	str	r2, [r3, #4]
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	4a08      	ldr	r2, [pc, #32]	; (800d3bc <vTaskSwitchContext+0xb4>)
 800d39c:	6013      	str	r3, [r2, #0]
}
 800d39e:	bf00      	nop
 800d3a0:	371c      	adds	r7, #28
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop
 800d3ac:	20000884 	.word	0x20000884
 800d3b0:	20000870 	.word	0x20000870
 800d3b4:	20000864 	.word	0x20000864
 800d3b8:	20000760 	.word	0x20000760
 800d3bc:	2000075c 	.word	0x2000075c

0800d3c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d10a      	bne.n	800d3e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d4:	f383 8811 	msr	BASEPRI, r3
 800d3d8:	f3bf 8f6f 	isb	sy
 800d3dc:	f3bf 8f4f 	dsb	sy
 800d3e0:	60fb      	str	r3, [r7, #12]
}
 800d3e2:	bf00      	nop
 800d3e4:	e7fe      	b.n	800d3e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d3e6:	4b07      	ldr	r3, [pc, #28]	; (800d404 <vTaskPlaceOnEventList+0x44>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	3318      	adds	r3, #24
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f7fe fc35 	bl	800bc5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d3f4:	2101      	movs	r1, #1
 800d3f6:	6838      	ldr	r0, [r7, #0]
 800d3f8:	f000 fbaa 	bl	800db50 <prvAddCurrentTaskToDelayedList>
}
 800d3fc:	bf00      	nop
 800d3fe:	3710      	adds	r7, #16
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}
 800d404:	2000075c 	.word	0x2000075c

0800d408 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d10a      	bne.n	800d430 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d41e:	f383 8811 	msr	BASEPRI, r3
 800d422:	f3bf 8f6f 	isb	sy
 800d426:	f3bf 8f4f 	dsb	sy
 800d42a:	617b      	str	r3, [r7, #20]
}
 800d42c:	bf00      	nop
 800d42e:	e7fe      	b.n	800d42e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d430:	4b0a      	ldr	r3, [pc, #40]	; (800d45c <vTaskPlaceOnEventListRestricted+0x54>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	3318      	adds	r3, #24
 800d436:	4619      	mov	r1, r3
 800d438:	68f8      	ldr	r0, [r7, #12]
 800d43a:	f7fe fbec 	bl	800bc16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d002      	beq.n	800d44a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d448:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d44a:	6879      	ldr	r1, [r7, #4]
 800d44c:	68b8      	ldr	r0, [r7, #8]
 800d44e:	f000 fb7f 	bl	800db50 <prvAddCurrentTaskToDelayedList>
	}
 800d452:	bf00      	nop
 800d454:	3718      	adds	r7, #24
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	2000075c 	.word	0x2000075c

0800d460 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b086      	sub	sp, #24
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d10a      	bne.n	800d48c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d47a:	f383 8811 	msr	BASEPRI, r3
 800d47e:	f3bf 8f6f 	isb	sy
 800d482:	f3bf 8f4f 	dsb	sy
 800d486:	60fb      	str	r3, [r7, #12]
}
 800d488:	bf00      	nop
 800d48a:	e7fe      	b.n	800d48a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	3318      	adds	r3, #24
 800d490:	4618      	mov	r0, r3
 800d492:	f7fe fc1d 	bl	800bcd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d496:	4b1d      	ldr	r3, [pc, #116]	; (800d50c <xTaskRemoveFromEventList+0xac>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d11c      	bne.n	800d4d8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	3304      	adds	r3, #4
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7fe fc14 	bl	800bcd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	409a      	lsls	r2, r3
 800d4b0:	4b17      	ldr	r3, [pc, #92]	; (800d510 <xTaskRemoveFromEventList+0xb0>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	4a16      	ldr	r2, [pc, #88]	; (800d510 <xTaskRemoveFromEventList+0xb0>)
 800d4b8:	6013      	str	r3, [r2, #0]
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4be:	4613      	mov	r3, r2
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	4413      	add	r3, r2
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	4a13      	ldr	r2, [pc, #76]	; (800d514 <xTaskRemoveFromEventList+0xb4>)
 800d4c8:	441a      	add	r2, r3
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	4610      	mov	r0, r2
 800d4d2:	f7fe fba0 	bl	800bc16 <vListInsertEnd>
 800d4d6:	e005      	b.n	800d4e4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	3318      	adds	r3, #24
 800d4dc:	4619      	mov	r1, r3
 800d4de:	480e      	ldr	r0, [pc, #56]	; (800d518 <xTaskRemoveFromEventList+0xb8>)
 800d4e0:	f7fe fb99 	bl	800bc16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4e8:	4b0c      	ldr	r3, [pc, #48]	; (800d51c <xTaskRemoveFromEventList+0xbc>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d905      	bls.n	800d4fe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d4f6:	4b0a      	ldr	r3, [pc, #40]	; (800d520 <xTaskRemoveFromEventList+0xc0>)
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	601a      	str	r2, [r3, #0]
 800d4fc:	e001      	b.n	800d502 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d4fe:	2300      	movs	r3, #0
 800d500:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d502:	697b      	ldr	r3, [r7, #20]
}
 800d504:	4618      	mov	r0, r3
 800d506:	3718      	adds	r7, #24
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}
 800d50c:	20000884 	.word	0x20000884
 800d510:	20000864 	.word	0x20000864
 800d514:	20000760 	.word	0x20000760
 800d518:	2000081c 	.word	0x2000081c
 800d51c:	2000075c 	.word	0x2000075c
 800d520:	20000870 	.word	0x20000870

0800d524 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d52c:	4b06      	ldr	r3, [pc, #24]	; (800d548 <vTaskInternalSetTimeOutState+0x24>)
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d534:	4b05      	ldr	r3, [pc, #20]	; (800d54c <vTaskInternalSetTimeOutState+0x28>)
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	605a      	str	r2, [r3, #4]
}
 800d53c:	bf00      	nop
 800d53e:	370c      	adds	r7, #12
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr
 800d548:	20000874 	.word	0x20000874
 800d54c:	20000860 	.word	0x20000860

0800d550 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b088      	sub	sp, #32
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d10a      	bne.n	800d576 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d564:	f383 8811 	msr	BASEPRI, r3
 800d568:	f3bf 8f6f 	isb	sy
 800d56c:	f3bf 8f4f 	dsb	sy
 800d570:	613b      	str	r3, [r7, #16]
}
 800d572:	bf00      	nop
 800d574:	e7fe      	b.n	800d574 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d10a      	bne.n	800d592 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d580:	f383 8811 	msr	BASEPRI, r3
 800d584:	f3bf 8f6f 	isb	sy
 800d588:	f3bf 8f4f 	dsb	sy
 800d58c:	60fb      	str	r3, [r7, #12]
}
 800d58e:	bf00      	nop
 800d590:	e7fe      	b.n	800d590 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d592:	f000 ff9f 	bl	800e4d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d596:	4b1d      	ldr	r3, [pc, #116]	; (800d60c <xTaskCheckForTimeOut+0xbc>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	69ba      	ldr	r2, [r7, #24]
 800d5a2:	1ad3      	subs	r3, r2, r3
 800d5a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d5ae:	d102      	bne.n	800d5b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	61fb      	str	r3, [r7, #28]
 800d5b4:	e023      	b.n	800d5fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	4b15      	ldr	r3, [pc, #84]	; (800d610 <xTaskCheckForTimeOut+0xc0>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d007      	beq.n	800d5d2 <xTaskCheckForTimeOut+0x82>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	69ba      	ldr	r2, [r7, #24]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d302      	bcc.n	800d5d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	61fb      	str	r3, [r7, #28]
 800d5d0:	e015      	b.n	800d5fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	697a      	ldr	r2, [r7, #20]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d20b      	bcs.n	800d5f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	1ad2      	subs	r2, r2, r3
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f7ff ff9b 	bl	800d524 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	61fb      	str	r3, [r7, #28]
 800d5f2:	e004      	b.n	800d5fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d5fe:	f000 ff99 	bl	800e534 <vPortExitCritical>

	return xReturn;
 800d602:	69fb      	ldr	r3, [r7, #28]
}
 800d604:	4618      	mov	r0, r3
 800d606:	3720      	adds	r7, #32
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	20000860 	.word	0x20000860
 800d610:	20000874 	.word	0x20000874

0800d614 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d614:	b480      	push	{r7}
 800d616:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d618:	4b03      	ldr	r3, [pc, #12]	; (800d628 <vTaskMissedYield+0x14>)
 800d61a:	2201      	movs	r2, #1
 800d61c:	601a      	str	r2, [r3, #0]
}
 800d61e:	bf00      	nop
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr
 800d628:	20000870 	.word	0x20000870

0800d62c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d634:	f000 f852 	bl	800d6dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d638:	4b06      	ldr	r3, [pc, #24]	; (800d654 <prvIdleTask+0x28>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d9f9      	bls.n	800d634 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d640:	4b05      	ldr	r3, [pc, #20]	; (800d658 <prvIdleTask+0x2c>)
 800d642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d646:	601a      	str	r2, [r3, #0]
 800d648:	f3bf 8f4f 	dsb	sy
 800d64c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d650:	e7f0      	b.n	800d634 <prvIdleTask+0x8>
 800d652:	bf00      	nop
 800d654:	20000760 	.word	0x20000760
 800d658:	e000ed04 	.word	0xe000ed04

0800d65c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d662:	2300      	movs	r3, #0
 800d664:	607b      	str	r3, [r7, #4]
 800d666:	e00c      	b.n	800d682 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	4613      	mov	r3, r2
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	4413      	add	r3, r2
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4a12      	ldr	r2, [pc, #72]	; (800d6bc <prvInitialiseTaskLists+0x60>)
 800d674:	4413      	add	r3, r2
 800d676:	4618      	mov	r0, r3
 800d678:	f7fe faa0 	bl	800bbbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	3301      	adds	r3, #1
 800d680:	607b      	str	r3, [r7, #4]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2b06      	cmp	r3, #6
 800d686:	d9ef      	bls.n	800d668 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d688:	480d      	ldr	r0, [pc, #52]	; (800d6c0 <prvInitialiseTaskLists+0x64>)
 800d68a:	f7fe fa97 	bl	800bbbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d68e:	480d      	ldr	r0, [pc, #52]	; (800d6c4 <prvInitialiseTaskLists+0x68>)
 800d690:	f7fe fa94 	bl	800bbbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d694:	480c      	ldr	r0, [pc, #48]	; (800d6c8 <prvInitialiseTaskLists+0x6c>)
 800d696:	f7fe fa91 	bl	800bbbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d69a:	480c      	ldr	r0, [pc, #48]	; (800d6cc <prvInitialiseTaskLists+0x70>)
 800d69c:	f7fe fa8e 	bl	800bbbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d6a0:	480b      	ldr	r0, [pc, #44]	; (800d6d0 <prvInitialiseTaskLists+0x74>)
 800d6a2:	f7fe fa8b 	bl	800bbbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d6a6:	4b0b      	ldr	r3, [pc, #44]	; (800d6d4 <prvInitialiseTaskLists+0x78>)
 800d6a8:	4a05      	ldr	r2, [pc, #20]	; (800d6c0 <prvInitialiseTaskLists+0x64>)
 800d6aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d6ac:	4b0a      	ldr	r3, [pc, #40]	; (800d6d8 <prvInitialiseTaskLists+0x7c>)
 800d6ae:	4a05      	ldr	r2, [pc, #20]	; (800d6c4 <prvInitialiseTaskLists+0x68>)
 800d6b0:	601a      	str	r2, [r3, #0]
}
 800d6b2:	bf00      	nop
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	20000760 	.word	0x20000760
 800d6c0:	200007ec 	.word	0x200007ec
 800d6c4:	20000800 	.word	0x20000800
 800d6c8:	2000081c 	.word	0x2000081c
 800d6cc:	20000830 	.word	0x20000830
 800d6d0:	20000848 	.word	0x20000848
 800d6d4:	20000814 	.word	0x20000814
 800d6d8:	20000818 	.word	0x20000818

0800d6dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6e2:	e019      	b.n	800d718 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d6e4:	f000 fef6 	bl	800e4d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6e8:	4b10      	ldr	r3, [pc, #64]	; (800d72c <prvCheckTasksWaitingTermination+0x50>)
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	68db      	ldr	r3, [r3, #12]
 800d6ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	3304      	adds	r3, #4
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7fe faeb 	bl	800bcd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d6fa:	4b0d      	ldr	r3, [pc, #52]	; (800d730 <prvCheckTasksWaitingTermination+0x54>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	3b01      	subs	r3, #1
 800d700:	4a0b      	ldr	r2, [pc, #44]	; (800d730 <prvCheckTasksWaitingTermination+0x54>)
 800d702:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d704:	4b0b      	ldr	r3, [pc, #44]	; (800d734 <prvCheckTasksWaitingTermination+0x58>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	3b01      	subs	r3, #1
 800d70a:	4a0a      	ldr	r2, [pc, #40]	; (800d734 <prvCheckTasksWaitingTermination+0x58>)
 800d70c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d70e:	f000 ff11 	bl	800e534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 f810 	bl	800d738 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d718:	4b06      	ldr	r3, [pc, #24]	; (800d734 <prvCheckTasksWaitingTermination+0x58>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1e1      	bne.n	800d6e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d720:	bf00      	nop
 800d722:	bf00      	nop
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	20000830 	.word	0x20000830
 800d730:	2000085c 	.word	0x2000085c
 800d734:	20000844 	.word	0x20000844

0800d738 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d746:	2b00      	cmp	r3, #0
 800d748:	d108      	bne.n	800d75c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d74e:	4618      	mov	r0, r3
 800d750:	f001 f8ae 	bl	800e8b0 <vPortFree>
				vPortFree( pxTCB );
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f001 f8ab 	bl	800e8b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d75a:	e018      	b.n	800d78e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d762:	2b01      	cmp	r3, #1
 800d764:	d103      	bne.n	800d76e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f001 f8a2 	bl	800e8b0 <vPortFree>
	}
 800d76c:	e00f      	b.n	800d78e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d774:	2b02      	cmp	r3, #2
 800d776:	d00a      	beq.n	800d78e <prvDeleteTCB+0x56>
	__asm volatile
 800d778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77c:	f383 8811 	msr	BASEPRI, r3
 800d780:	f3bf 8f6f 	isb	sy
 800d784:	f3bf 8f4f 	dsb	sy
 800d788:	60fb      	str	r3, [r7, #12]
}
 800d78a:	bf00      	nop
 800d78c:	e7fe      	b.n	800d78c <prvDeleteTCB+0x54>
	}
 800d78e:	bf00      	nop
 800d790:	3710      	adds	r7, #16
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
	...

0800d798 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d79e:	4b0c      	ldr	r3, [pc, #48]	; (800d7d0 <prvResetNextTaskUnblockTime+0x38>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d104      	bne.n	800d7b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d7a8:	4b0a      	ldr	r3, [pc, #40]	; (800d7d4 <prvResetNextTaskUnblockTime+0x3c>)
 800d7aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d7b0:	e008      	b.n	800d7c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7b2:	4b07      	ldr	r3, [pc, #28]	; (800d7d0 <prvResetNextTaskUnblockTime+0x38>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	68db      	ldr	r3, [r3, #12]
 800d7ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	685b      	ldr	r3, [r3, #4]
 800d7c0:	4a04      	ldr	r2, [pc, #16]	; (800d7d4 <prvResetNextTaskUnblockTime+0x3c>)
 800d7c2:	6013      	str	r3, [r2, #0]
}
 800d7c4:	bf00      	nop
 800d7c6:	370c      	adds	r7, #12
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr
 800d7d0:	20000814 	.word	0x20000814
 800d7d4:	2000087c 	.word	0x2000087c

0800d7d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d7d8:	b480      	push	{r7}
 800d7da:	b083      	sub	sp, #12
 800d7dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d7de:	4b0b      	ldr	r3, [pc, #44]	; (800d80c <xTaskGetSchedulerState+0x34>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d102      	bne.n	800d7ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	607b      	str	r3, [r7, #4]
 800d7ea:	e008      	b.n	800d7fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7ec:	4b08      	ldr	r3, [pc, #32]	; (800d810 <xTaskGetSchedulerState+0x38>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d102      	bne.n	800d7fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d7f4:	2302      	movs	r3, #2
 800d7f6:	607b      	str	r3, [r7, #4]
 800d7f8:	e001      	b.n	800d7fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d7fe:	687b      	ldr	r3, [r7, #4]
	}
 800d800:	4618      	mov	r0, r3
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr
 800d80c:	20000868 	.word	0x20000868
 800d810:	20000884 	.word	0x20000884

0800d814 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d820:	2300      	movs	r3, #0
 800d822:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d05e      	beq.n	800d8e8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d82e:	4b31      	ldr	r3, [pc, #196]	; (800d8f4 <xTaskPriorityInherit+0xe0>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d834:	429a      	cmp	r2, r3
 800d836:	d24e      	bcs.n	800d8d6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	699b      	ldr	r3, [r3, #24]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	db06      	blt.n	800d84e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d840:	4b2c      	ldr	r3, [pc, #176]	; (800d8f4 <xTaskPriorityInherit+0xe0>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d846:	f1c3 0207 	rsb	r2, r3, #7
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	6959      	ldr	r1, [r3, #20]
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d856:	4613      	mov	r3, r2
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	4413      	add	r3, r2
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	4a26      	ldr	r2, [pc, #152]	; (800d8f8 <xTaskPriorityInherit+0xe4>)
 800d860:	4413      	add	r3, r2
 800d862:	4299      	cmp	r1, r3
 800d864:	d12f      	bne.n	800d8c6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	3304      	adds	r3, #4
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fe fa30 	bl	800bcd0 <uxListRemove>
 800d870:	4603      	mov	r3, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	d10a      	bne.n	800d88c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87a:	2201      	movs	r2, #1
 800d87c:	fa02 f303 	lsl.w	r3, r2, r3
 800d880:	43da      	mvns	r2, r3
 800d882:	4b1e      	ldr	r3, [pc, #120]	; (800d8fc <xTaskPriorityInherit+0xe8>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4013      	ands	r3, r2
 800d888:	4a1c      	ldr	r2, [pc, #112]	; (800d8fc <xTaskPriorityInherit+0xe8>)
 800d88a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d88c:	4b19      	ldr	r3, [pc, #100]	; (800d8f4 <xTaskPriorityInherit+0xe0>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d89a:	2201      	movs	r2, #1
 800d89c:	409a      	lsls	r2, r3
 800d89e:	4b17      	ldr	r3, [pc, #92]	; (800d8fc <xTaskPriorityInherit+0xe8>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	4a15      	ldr	r2, [pc, #84]	; (800d8fc <xTaskPriorityInherit+0xe8>)
 800d8a6:	6013      	str	r3, [r2, #0]
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ac:	4613      	mov	r3, r2
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	4413      	add	r3, r2
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	4a10      	ldr	r2, [pc, #64]	; (800d8f8 <xTaskPriorityInherit+0xe4>)
 800d8b6:	441a      	add	r2, r3
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	4619      	mov	r1, r3
 800d8be:	4610      	mov	r0, r2
 800d8c0:	f7fe f9a9 	bl	800bc16 <vListInsertEnd>
 800d8c4:	e004      	b.n	800d8d0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d8c6:	4b0b      	ldr	r3, [pc, #44]	; (800d8f4 <xTaskPriorityInherit+0xe0>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	60fb      	str	r3, [r7, #12]
 800d8d4:	e008      	b.n	800d8e8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8da:	4b06      	ldr	r3, [pc, #24]	; (800d8f4 <xTaskPriorityInherit+0xe0>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d201      	bcs.n	800d8e8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
	}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3710      	adds	r7, #16
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	2000075c 	.word	0x2000075c
 800d8f8:	20000760 	.word	0x20000760
 800d8fc:	20000864 	.word	0x20000864

0800d900 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d90c:	2300      	movs	r3, #0
 800d90e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d06e      	beq.n	800d9f4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d916:	4b3a      	ldr	r3, [pc, #232]	; (800da00 <xTaskPriorityDisinherit+0x100>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	693a      	ldr	r2, [r7, #16]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d00a      	beq.n	800d936 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d924:	f383 8811 	msr	BASEPRI, r3
 800d928:	f3bf 8f6f 	isb	sy
 800d92c:	f3bf 8f4f 	dsb	sy
 800d930:	60fb      	str	r3, [r7, #12]
}
 800d932:	bf00      	nop
 800d934:	e7fe      	b.n	800d934 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d10a      	bne.n	800d954 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d942:	f383 8811 	msr	BASEPRI, r3
 800d946:	f3bf 8f6f 	isb	sy
 800d94a:	f3bf 8f4f 	dsb	sy
 800d94e:	60bb      	str	r3, [r7, #8]
}
 800d950:	bf00      	nop
 800d952:	e7fe      	b.n	800d952 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d958:	1e5a      	subs	r2, r3, #1
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d966:	429a      	cmp	r2, r3
 800d968:	d044      	beq.n	800d9f4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d140      	bne.n	800d9f4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	3304      	adds	r3, #4
 800d976:	4618      	mov	r0, r3
 800d978:	f7fe f9aa 	bl	800bcd0 <uxListRemove>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d115      	bne.n	800d9ae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d986:	491f      	ldr	r1, [pc, #124]	; (800da04 <xTaskPriorityDisinherit+0x104>)
 800d988:	4613      	mov	r3, r2
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	4413      	add	r3, r2
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	440b      	add	r3, r1
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d10a      	bne.n	800d9ae <xTaskPriorityDisinherit+0xae>
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99c:	2201      	movs	r2, #1
 800d99e:	fa02 f303 	lsl.w	r3, r2, r3
 800d9a2:	43da      	mvns	r2, r3
 800d9a4:	4b18      	ldr	r3, [pc, #96]	; (800da08 <xTaskPriorityDisinherit+0x108>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4013      	ands	r3, r2
 800d9aa:	4a17      	ldr	r2, [pc, #92]	; (800da08 <xTaskPriorityDisinherit+0x108>)
 800d9ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ba:	f1c3 0207 	rsb	r2, r3, #7
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	409a      	lsls	r2, r3
 800d9ca:	4b0f      	ldr	r3, [pc, #60]	; (800da08 <xTaskPriorityDisinherit+0x108>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	4a0d      	ldr	r2, [pc, #52]	; (800da08 <xTaskPriorityDisinherit+0x108>)
 800d9d2:	6013      	str	r3, [r2, #0]
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9d8:	4613      	mov	r3, r2
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	4413      	add	r3, r2
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	4a08      	ldr	r2, [pc, #32]	; (800da04 <xTaskPriorityDisinherit+0x104>)
 800d9e2:	441a      	add	r2, r3
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	3304      	adds	r3, #4
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	4610      	mov	r0, r2
 800d9ec:	f7fe f913 	bl	800bc16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d9f4:	697b      	ldr	r3, [r7, #20]
	}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3718      	adds	r7, #24
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	2000075c 	.word	0x2000075c
 800da04:	20000760 	.word	0x20000760
 800da08:	20000864 	.word	0x20000864

0800da0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b088      	sub	sp, #32
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800da1a:	2301      	movs	r3, #1
 800da1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d077      	beq.n	800db14 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d10a      	bne.n	800da42 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800da2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da30:	f383 8811 	msr	BASEPRI, r3
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	60fb      	str	r3, [r7, #12]
}
 800da3e:	bf00      	nop
 800da40:	e7fe      	b.n	800da40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800da42:	69bb      	ldr	r3, [r7, #24]
 800da44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da46:	683a      	ldr	r2, [r7, #0]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d902      	bls.n	800da52 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	61fb      	str	r3, [r7, #28]
 800da50:	e002      	b.n	800da58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da5c:	69fa      	ldr	r2, [r7, #28]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d058      	beq.n	800db14 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800da62:	69bb      	ldr	r3, [r7, #24]
 800da64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da66:	697a      	ldr	r2, [r7, #20]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d153      	bne.n	800db14 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800da6c:	4b2b      	ldr	r3, [pc, #172]	; (800db1c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	69ba      	ldr	r2, [r7, #24]
 800da72:	429a      	cmp	r2, r3
 800da74:	d10a      	bne.n	800da8c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800da76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7a:	f383 8811 	msr	BASEPRI, r3
 800da7e:	f3bf 8f6f 	isb	sy
 800da82:	f3bf 8f4f 	dsb	sy
 800da86:	60bb      	str	r3, [r7, #8]
}
 800da88:	bf00      	nop
 800da8a:	e7fe      	b.n	800da8a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800da8c:	69bb      	ldr	r3, [r7, #24]
 800da8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800da92:	69bb      	ldr	r3, [r7, #24]
 800da94:	69fa      	ldr	r2, [r7, #28]
 800da96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	699b      	ldr	r3, [r3, #24]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	db04      	blt.n	800daaa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800daa0:	69fb      	ldr	r3, [r7, #28]
 800daa2:	f1c3 0207 	rsb	r2, r3, #7
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800daaa:	69bb      	ldr	r3, [r7, #24]
 800daac:	6959      	ldr	r1, [r3, #20]
 800daae:	693a      	ldr	r2, [r7, #16]
 800dab0:	4613      	mov	r3, r2
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	4413      	add	r3, r2
 800dab6:	009b      	lsls	r3, r3, #2
 800dab8:	4a19      	ldr	r2, [pc, #100]	; (800db20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800daba:	4413      	add	r3, r2
 800dabc:	4299      	cmp	r1, r3
 800dabe:	d129      	bne.n	800db14 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dac0:	69bb      	ldr	r3, [r7, #24]
 800dac2:	3304      	adds	r3, #4
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7fe f903 	bl	800bcd0 <uxListRemove>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d10a      	bne.n	800dae6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800dad0:	69bb      	ldr	r3, [r7, #24]
 800dad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad4:	2201      	movs	r2, #1
 800dad6:	fa02 f303 	lsl.w	r3, r2, r3
 800dada:	43da      	mvns	r2, r3
 800dadc:	4b11      	ldr	r3, [pc, #68]	; (800db24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4013      	ands	r3, r2
 800dae2:	4a10      	ldr	r2, [pc, #64]	; (800db24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dae4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daea:	2201      	movs	r2, #1
 800daec:	409a      	lsls	r2, r3
 800daee:	4b0d      	ldr	r3, [pc, #52]	; (800db24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4313      	orrs	r3, r2
 800daf4:	4a0b      	ldr	r2, [pc, #44]	; (800db24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800daf6:	6013      	str	r3, [r2, #0]
 800daf8:	69bb      	ldr	r3, [r7, #24]
 800dafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dafc:	4613      	mov	r3, r2
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	4413      	add	r3, r2
 800db02:	009b      	lsls	r3, r3, #2
 800db04:	4a06      	ldr	r2, [pc, #24]	; (800db20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800db06:	441a      	add	r2, r3
 800db08:	69bb      	ldr	r3, [r7, #24]
 800db0a:	3304      	adds	r3, #4
 800db0c:	4619      	mov	r1, r3
 800db0e:	4610      	mov	r0, r2
 800db10:	f7fe f881 	bl	800bc16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db14:	bf00      	nop
 800db16:	3720      	adds	r7, #32
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	2000075c 	.word	0x2000075c
 800db20:	20000760 	.word	0x20000760
 800db24:	20000864 	.word	0x20000864

0800db28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800db28:	b480      	push	{r7}
 800db2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800db2c:	4b07      	ldr	r3, [pc, #28]	; (800db4c <pvTaskIncrementMutexHeldCount+0x24>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d004      	beq.n	800db3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800db34:	4b05      	ldr	r3, [pc, #20]	; (800db4c <pvTaskIncrementMutexHeldCount+0x24>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db3a:	3201      	adds	r2, #1
 800db3c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800db3e:	4b03      	ldr	r3, [pc, #12]	; (800db4c <pvTaskIncrementMutexHeldCount+0x24>)
 800db40:	681b      	ldr	r3, [r3, #0]
	}
 800db42:	4618      	mov	r0, r3
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr
 800db4c:	2000075c 	.word	0x2000075c

0800db50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800db5a:	4b29      	ldr	r3, [pc, #164]	; (800dc00 <prvAddCurrentTaskToDelayedList+0xb0>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db60:	4b28      	ldr	r3, [pc, #160]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	3304      	adds	r3, #4
 800db66:	4618      	mov	r0, r3
 800db68:	f7fe f8b2 	bl	800bcd0 <uxListRemove>
 800db6c:	4603      	mov	r3, r0
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d10b      	bne.n	800db8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800db72:	4b24      	ldr	r3, [pc, #144]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db78:	2201      	movs	r2, #1
 800db7a:	fa02 f303 	lsl.w	r3, r2, r3
 800db7e:	43da      	mvns	r2, r3
 800db80:	4b21      	ldr	r3, [pc, #132]	; (800dc08 <prvAddCurrentTaskToDelayedList+0xb8>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4013      	ands	r3, r2
 800db86:	4a20      	ldr	r2, [pc, #128]	; (800dc08 <prvAddCurrentTaskToDelayedList+0xb8>)
 800db88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db90:	d10a      	bne.n	800dba8 <prvAddCurrentTaskToDelayedList+0x58>
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d007      	beq.n	800dba8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db98:	4b1a      	ldr	r3, [pc, #104]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	3304      	adds	r3, #4
 800db9e:	4619      	mov	r1, r3
 800dba0:	481a      	ldr	r0, [pc, #104]	; (800dc0c <prvAddCurrentTaskToDelayedList+0xbc>)
 800dba2:	f7fe f838 	bl	800bc16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dba6:	e026      	b.n	800dbf6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dba8:	68fa      	ldr	r2, [r7, #12]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	4413      	add	r3, r2
 800dbae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dbb0:	4b14      	ldr	r3, [pc, #80]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	68ba      	ldr	r2, [r7, #8]
 800dbb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dbb8:	68ba      	ldr	r2, [r7, #8]
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d209      	bcs.n	800dbd4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbc0:	4b13      	ldr	r3, [pc, #76]	; (800dc10 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	4b0f      	ldr	r3, [pc, #60]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	3304      	adds	r3, #4
 800dbca:	4619      	mov	r1, r3
 800dbcc:	4610      	mov	r0, r2
 800dbce:	f7fe f846 	bl	800bc5e <vListInsert>
}
 800dbd2:	e010      	b.n	800dbf6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbd4:	4b0f      	ldr	r3, [pc, #60]	; (800dc14 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	4b0a      	ldr	r3, [pc, #40]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	3304      	adds	r3, #4
 800dbde:	4619      	mov	r1, r3
 800dbe0:	4610      	mov	r0, r2
 800dbe2:	f7fe f83c 	bl	800bc5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dbe6:	4b0c      	ldr	r3, [pc, #48]	; (800dc18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d202      	bcs.n	800dbf6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dbf0:	4a09      	ldr	r2, [pc, #36]	; (800dc18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	6013      	str	r3, [r2, #0]
}
 800dbf6:	bf00      	nop
 800dbf8:	3710      	adds	r7, #16
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	20000860 	.word	0x20000860
 800dc04:	2000075c 	.word	0x2000075c
 800dc08:	20000864 	.word	0x20000864
 800dc0c:	20000848 	.word	0x20000848
 800dc10:	20000818 	.word	0x20000818
 800dc14:	20000814 	.word	0x20000814
 800dc18:	2000087c 	.word	0x2000087c

0800dc1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b08a      	sub	sp, #40	; 0x28
 800dc20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dc22:	2300      	movs	r3, #0
 800dc24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dc26:	f000 faeb 	bl	800e200 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dc2a:	4b1c      	ldr	r3, [pc, #112]	; (800dc9c <xTimerCreateTimerTask+0x80>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d021      	beq.n	800dc76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dc32:	2300      	movs	r3, #0
 800dc34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dc36:	2300      	movs	r3, #0
 800dc38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dc3a:	1d3a      	adds	r2, r7, #4
 800dc3c:	f107 0108 	add.w	r1, r7, #8
 800dc40:	f107 030c 	add.w	r3, r7, #12
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7f4 fc8b 	bl	8002560 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dc4a:	6879      	ldr	r1, [r7, #4]
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	68fa      	ldr	r2, [r7, #12]
 800dc50:	9202      	str	r2, [sp, #8]
 800dc52:	9301      	str	r3, [sp, #4]
 800dc54:	2302      	movs	r3, #2
 800dc56:	9300      	str	r3, [sp, #0]
 800dc58:	2300      	movs	r3, #0
 800dc5a:	460a      	mov	r2, r1
 800dc5c:	4910      	ldr	r1, [pc, #64]	; (800dca0 <xTimerCreateTimerTask+0x84>)
 800dc5e:	4811      	ldr	r0, [pc, #68]	; (800dca4 <xTimerCreateTimerTask+0x88>)
 800dc60:	f7fe ffb2 	bl	800cbc8 <xTaskCreateStatic>
 800dc64:	4603      	mov	r3, r0
 800dc66:	4a10      	ldr	r2, [pc, #64]	; (800dca8 <xTimerCreateTimerTask+0x8c>)
 800dc68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dc6a:	4b0f      	ldr	r3, [pc, #60]	; (800dca8 <xTimerCreateTimerTask+0x8c>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d001      	beq.n	800dc76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dc72:	2301      	movs	r3, #1
 800dc74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d10a      	bne.n	800dc92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc80:	f383 8811 	msr	BASEPRI, r3
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	f3bf 8f4f 	dsb	sy
 800dc8c:	613b      	str	r3, [r7, #16]
}
 800dc8e:	bf00      	nop
 800dc90:	e7fe      	b.n	800dc90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dc92:	697b      	ldr	r3, [r7, #20]
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3718      	adds	r7, #24
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	200008b8 	.word	0x200008b8
 800dca0:	08010098 	.word	0x08010098
 800dca4:	0800dde1 	.word	0x0800dde1
 800dca8:	200008bc 	.word	0x200008bc

0800dcac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b08a      	sub	sp, #40	; 0x28
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	60f8      	str	r0, [r7, #12]
 800dcb4:	60b9      	str	r1, [r7, #8]
 800dcb6:	607a      	str	r2, [r7, #4]
 800dcb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d10a      	bne.n	800dcda <xTimerGenericCommand+0x2e>
	__asm volatile
 800dcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc8:	f383 8811 	msr	BASEPRI, r3
 800dccc:	f3bf 8f6f 	isb	sy
 800dcd0:	f3bf 8f4f 	dsb	sy
 800dcd4:	623b      	str	r3, [r7, #32]
}
 800dcd6:	bf00      	nop
 800dcd8:	e7fe      	b.n	800dcd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dcda:	4b1a      	ldr	r3, [pc, #104]	; (800dd44 <xTimerGenericCommand+0x98>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d02a      	beq.n	800dd38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	2b05      	cmp	r3, #5
 800dcf2:	dc18      	bgt.n	800dd26 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dcf4:	f7ff fd70 	bl	800d7d8 <xTaskGetSchedulerState>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b02      	cmp	r3, #2
 800dcfc:	d109      	bne.n	800dd12 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dcfe:	4b11      	ldr	r3, [pc, #68]	; (800dd44 <xTimerGenericCommand+0x98>)
 800dd00:	6818      	ldr	r0, [r3, #0]
 800dd02:	f107 0114 	add.w	r1, r7, #20
 800dd06:	2300      	movs	r3, #0
 800dd08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd0a:	f7fe f945 	bl	800bf98 <xQueueGenericSend>
 800dd0e:	6278      	str	r0, [r7, #36]	; 0x24
 800dd10:	e012      	b.n	800dd38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dd12:	4b0c      	ldr	r3, [pc, #48]	; (800dd44 <xTimerGenericCommand+0x98>)
 800dd14:	6818      	ldr	r0, [r3, #0]
 800dd16:	f107 0114 	add.w	r1, r7, #20
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	f7fe f93b 	bl	800bf98 <xQueueGenericSend>
 800dd22:	6278      	str	r0, [r7, #36]	; 0x24
 800dd24:	e008      	b.n	800dd38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dd26:	4b07      	ldr	r3, [pc, #28]	; (800dd44 <xTimerGenericCommand+0x98>)
 800dd28:	6818      	ldr	r0, [r3, #0]
 800dd2a:	f107 0114 	add.w	r1, r7, #20
 800dd2e:	2300      	movs	r3, #0
 800dd30:	683a      	ldr	r2, [r7, #0]
 800dd32:	f7fe fa2f 	bl	800c194 <xQueueGenericSendFromISR>
 800dd36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3728      	adds	r7, #40	; 0x28
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	200008b8 	.word	0x200008b8

0800dd48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b088      	sub	sp, #32
 800dd4c:	af02      	add	r7, sp, #8
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd52:	4b22      	ldr	r3, [pc, #136]	; (800dddc <prvProcessExpiredTimer+0x94>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	68db      	ldr	r3, [r3, #12]
 800dd58:	68db      	ldr	r3, [r3, #12]
 800dd5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	3304      	adds	r3, #4
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7fd ffb5 	bl	800bcd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dd6c:	f003 0304 	and.w	r3, r3, #4
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d022      	beq.n	800ddba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	699a      	ldr	r2, [r3, #24]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	18d1      	adds	r1, r2, r3
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	683a      	ldr	r2, [r7, #0]
 800dd80:	6978      	ldr	r0, [r7, #20]
 800dd82:	f000 f8d1 	bl	800df28 <prvInsertTimerInActiveList>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d01f      	beq.n	800ddcc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	2300      	movs	r3, #0
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	2100      	movs	r1, #0
 800dd96:	6978      	ldr	r0, [r7, #20]
 800dd98:	f7ff ff88 	bl	800dcac <xTimerGenericCommand>
 800dd9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d113      	bne.n	800ddcc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda8:	f383 8811 	msr	BASEPRI, r3
 800ddac:	f3bf 8f6f 	isb	sy
 800ddb0:	f3bf 8f4f 	dsb	sy
 800ddb4:	60fb      	str	r3, [r7, #12]
}
 800ddb6:	bf00      	nop
 800ddb8:	e7fe      	b.n	800ddb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ddc0:	f023 0301 	bic.w	r3, r3, #1
 800ddc4:	b2da      	uxtb	r2, r3
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	6a1b      	ldr	r3, [r3, #32]
 800ddd0:	6978      	ldr	r0, [r7, #20]
 800ddd2:	4798      	blx	r3
}
 800ddd4:	bf00      	nop
 800ddd6:	3718      	adds	r7, #24
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	200008b0 	.word	0x200008b0

0800dde0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dde8:	f107 0308 	add.w	r3, r7, #8
 800ddec:	4618      	mov	r0, r3
 800ddee:	f000 f857 	bl	800dea0 <prvGetNextExpireTime>
 800ddf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f000 f803 	bl	800de04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ddfe:	f000 f8d5 	bl	800dfac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de02:	e7f1      	b.n	800dde8 <prvTimerTask+0x8>

0800de04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800de0e:	f7ff f909 	bl	800d024 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800de12:	f107 0308 	add.w	r3, r7, #8
 800de16:	4618      	mov	r0, r3
 800de18:	f000 f866 	bl	800dee8 <prvSampleTimeNow>
 800de1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d130      	bne.n	800de86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d10a      	bne.n	800de40 <prvProcessTimerOrBlockTask+0x3c>
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d806      	bhi.n	800de40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800de32:	f7ff f905 	bl	800d040 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800de36:	68f9      	ldr	r1, [r7, #12]
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f7ff ff85 	bl	800dd48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800de3e:	e024      	b.n	800de8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d008      	beq.n	800de58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800de46:	4b13      	ldr	r3, [pc, #76]	; (800de94 <prvProcessTimerOrBlockTask+0x90>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d101      	bne.n	800de54 <prvProcessTimerOrBlockTask+0x50>
 800de50:	2301      	movs	r3, #1
 800de52:	e000      	b.n	800de56 <prvProcessTimerOrBlockTask+0x52>
 800de54:	2300      	movs	r3, #0
 800de56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800de58:	4b0f      	ldr	r3, [pc, #60]	; (800de98 <prvProcessTimerOrBlockTask+0x94>)
 800de5a:	6818      	ldr	r0, [r3, #0]
 800de5c:	687a      	ldr	r2, [r7, #4]
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	1ad3      	subs	r3, r2, r3
 800de62:	683a      	ldr	r2, [r7, #0]
 800de64:	4619      	mov	r1, r3
 800de66:	f7fe fe7b 	bl	800cb60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800de6a:	f7ff f8e9 	bl	800d040 <xTaskResumeAll>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d10a      	bne.n	800de8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800de74:	4b09      	ldr	r3, [pc, #36]	; (800de9c <prvProcessTimerOrBlockTask+0x98>)
 800de76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de7a:	601a      	str	r2, [r3, #0]
 800de7c:	f3bf 8f4f 	dsb	sy
 800de80:	f3bf 8f6f 	isb	sy
}
 800de84:	e001      	b.n	800de8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800de86:	f7ff f8db 	bl	800d040 <xTaskResumeAll>
}
 800de8a:	bf00      	nop
 800de8c:	3710      	adds	r7, #16
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	200008b4 	.word	0x200008b4
 800de98:	200008b8 	.word	0x200008b8
 800de9c:	e000ed04 	.word	0xe000ed04

0800dea0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dea0:	b480      	push	{r7}
 800dea2:	b085      	sub	sp, #20
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dea8:	4b0e      	ldr	r3, [pc, #56]	; (800dee4 <prvGetNextExpireTime+0x44>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d101      	bne.n	800deb6 <prvGetNextExpireTime+0x16>
 800deb2:	2201      	movs	r2, #1
 800deb4:	e000      	b.n	800deb8 <prvGetNextExpireTime+0x18>
 800deb6:	2200      	movs	r2, #0
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d105      	bne.n	800ded0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dec4:	4b07      	ldr	r3, [pc, #28]	; (800dee4 <prvGetNextExpireTime+0x44>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	60fb      	str	r3, [r7, #12]
 800dece:	e001      	b.n	800ded4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ded0:	2300      	movs	r3, #0
 800ded2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ded4:	68fb      	ldr	r3, [r7, #12]
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3714      	adds	r7, #20
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr
 800dee2:	bf00      	nop
 800dee4:	200008b0 	.word	0x200008b0

0800dee8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800def0:	f7ff f942 	bl	800d178 <xTaskGetTickCount>
 800def4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800def6:	4b0b      	ldr	r3, [pc, #44]	; (800df24 <prvSampleTimeNow+0x3c>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	68fa      	ldr	r2, [r7, #12]
 800defc:	429a      	cmp	r2, r3
 800defe:	d205      	bcs.n	800df0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800df00:	f000 f91a 	bl	800e138 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2201      	movs	r2, #1
 800df08:	601a      	str	r2, [r3, #0]
 800df0a:	e002      	b.n	800df12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2200      	movs	r2, #0
 800df10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800df12:	4a04      	ldr	r2, [pc, #16]	; (800df24 <prvSampleTimeNow+0x3c>)
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800df18:	68fb      	ldr	r3, [r7, #12]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3710      	adds	r7, #16
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	200008c0 	.word	0x200008c0

0800df28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b086      	sub	sp, #24
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	607a      	str	r2, [r7, #4]
 800df34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800df36:	2300      	movs	r3, #0
 800df38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	68ba      	ldr	r2, [r7, #8]
 800df3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800df46:	68ba      	ldr	r2, [r7, #8]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d812      	bhi.n	800df74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	1ad2      	subs	r2, r2, r3
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	699b      	ldr	r3, [r3, #24]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d302      	bcc.n	800df62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800df5c:	2301      	movs	r3, #1
 800df5e:	617b      	str	r3, [r7, #20]
 800df60:	e01b      	b.n	800df9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800df62:	4b10      	ldr	r3, [pc, #64]	; (800dfa4 <prvInsertTimerInActiveList+0x7c>)
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	3304      	adds	r3, #4
 800df6a:	4619      	mov	r1, r3
 800df6c:	4610      	mov	r0, r2
 800df6e:	f7fd fe76 	bl	800bc5e <vListInsert>
 800df72:	e012      	b.n	800df9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800df74:	687a      	ldr	r2, [r7, #4]
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d206      	bcs.n	800df8a <prvInsertTimerInActiveList+0x62>
 800df7c:	68ba      	ldr	r2, [r7, #8]
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	429a      	cmp	r2, r3
 800df82:	d302      	bcc.n	800df8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800df84:	2301      	movs	r3, #1
 800df86:	617b      	str	r3, [r7, #20]
 800df88:	e007      	b.n	800df9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df8a:	4b07      	ldr	r3, [pc, #28]	; (800dfa8 <prvInsertTimerInActiveList+0x80>)
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	3304      	adds	r3, #4
 800df92:	4619      	mov	r1, r3
 800df94:	4610      	mov	r0, r2
 800df96:	f7fd fe62 	bl	800bc5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800df9a:	697b      	ldr	r3, [r7, #20]
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3718      	adds	r7, #24
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	200008b4 	.word	0x200008b4
 800dfa8:	200008b0 	.word	0x200008b0

0800dfac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b08c      	sub	sp, #48	; 0x30
 800dfb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dfb2:	e0ae      	b.n	800e112 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f2c0 80aa 	blt.w	800e110 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc2:	695b      	ldr	r3, [r3, #20]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d004      	beq.n	800dfd2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfca:	3304      	adds	r3, #4
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7fd fe7f 	bl	800bcd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dfd2:	1d3b      	adds	r3, r7, #4
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7ff ff87 	bl	800dee8 <prvSampleTimeNow>
 800dfda:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	2b09      	cmp	r3, #9
 800dfe0:	f200 8097 	bhi.w	800e112 <prvProcessReceivedCommands+0x166>
 800dfe4:	a201      	add	r2, pc, #4	; (adr r2, 800dfec <prvProcessReceivedCommands+0x40>)
 800dfe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfea:	bf00      	nop
 800dfec:	0800e015 	.word	0x0800e015
 800dff0:	0800e015 	.word	0x0800e015
 800dff4:	0800e015 	.word	0x0800e015
 800dff8:	0800e089 	.word	0x0800e089
 800dffc:	0800e09d 	.word	0x0800e09d
 800e000:	0800e0e7 	.word	0x0800e0e7
 800e004:	0800e015 	.word	0x0800e015
 800e008:	0800e015 	.word	0x0800e015
 800e00c:	0800e089 	.word	0x0800e089
 800e010:	0800e09d 	.word	0x0800e09d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e016:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e01a:	f043 0301 	orr.w	r3, r3, #1
 800e01e:	b2da      	uxtb	r2, r3
 800e020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e026:	68fa      	ldr	r2, [r7, #12]
 800e028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02a:	699b      	ldr	r3, [r3, #24]
 800e02c:	18d1      	adds	r1, r2, r3
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	6a3a      	ldr	r2, [r7, #32]
 800e032:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e034:	f7ff ff78 	bl	800df28 <prvInsertTimerInActiveList>
 800e038:	4603      	mov	r3, r0
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d069      	beq.n	800e112 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e040:	6a1b      	ldr	r3, [r3, #32]
 800e042:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e044:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e048:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e04c:	f003 0304 	and.w	r3, r3, #4
 800e050:	2b00      	cmp	r3, #0
 800e052:	d05e      	beq.n	800e112 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e054:	68fa      	ldr	r2, [r7, #12]
 800e056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e058:	699b      	ldr	r3, [r3, #24]
 800e05a:	441a      	add	r2, r3
 800e05c:	2300      	movs	r3, #0
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	2300      	movs	r3, #0
 800e062:	2100      	movs	r1, #0
 800e064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e066:	f7ff fe21 	bl	800dcac <xTimerGenericCommand>
 800e06a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d14f      	bne.n	800e112 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800e072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e076:	f383 8811 	msr	BASEPRI, r3
 800e07a:	f3bf 8f6f 	isb	sy
 800e07e:	f3bf 8f4f 	dsb	sy
 800e082:	61bb      	str	r3, [r7, #24]
}
 800e084:	bf00      	nop
 800e086:	e7fe      	b.n	800e086 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e08e:	f023 0301 	bic.w	r3, r3, #1
 800e092:	b2da      	uxtb	r2, r3
 800e094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800e09a:	e03a      	b.n	800e112 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e0a2:	f043 0301 	orr.w	r3, r3, #1
 800e0a6:	b2da      	uxtb	r2, r3
 800e0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e0ae:	68fa      	ldr	r2, [r7, #12]
 800e0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b6:	699b      	ldr	r3, [r3, #24]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d10a      	bne.n	800e0d2 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800e0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c0:	f383 8811 	msr	BASEPRI, r3
 800e0c4:	f3bf 8f6f 	isb	sy
 800e0c8:	f3bf 8f4f 	dsb	sy
 800e0cc:	617b      	str	r3, [r7, #20]
}
 800e0ce:	bf00      	nop
 800e0d0:	e7fe      	b.n	800e0d0 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d4:	699a      	ldr	r2, [r3, #24]
 800e0d6:	6a3b      	ldr	r3, [r7, #32]
 800e0d8:	18d1      	adds	r1, r2, r3
 800e0da:	6a3b      	ldr	r3, [r7, #32]
 800e0dc:	6a3a      	ldr	r2, [r7, #32]
 800e0de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0e0:	f7ff ff22 	bl	800df28 <prvInsertTimerInActiveList>
					break;
 800e0e4:	e015      	b.n	800e112 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e0ec:	f003 0302 	and.w	r3, r3, #2
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d103      	bne.n	800e0fc <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800e0f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0f6:	f000 fbdb 	bl	800e8b0 <vPortFree>
 800e0fa:	e00a      	b.n	800e112 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e102:	f023 0301 	bic.w	r3, r3, #1
 800e106:	b2da      	uxtb	r2, r3
 800e108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e10e:	e000      	b.n	800e112 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e110:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e112:	4b08      	ldr	r3, [pc, #32]	; (800e134 <prvProcessReceivedCommands+0x188>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f107 0108 	add.w	r1, r7, #8
 800e11a:	2200      	movs	r2, #0
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fe f961 	bl	800c3e4 <xQueueReceive>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	f47f af45 	bne.w	800dfb4 <prvProcessReceivedCommands+0x8>
	}
}
 800e12a:	bf00      	nop
 800e12c:	bf00      	nop
 800e12e:	3728      	adds	r7, #40	; 0x28
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	200008b8 	.word	0x200008b8

0800e138 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b088      	sub	sp, #32
 800e13c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e13e:	e048      	b.n	800e1d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e140:	4b2d      	ldr	r3, [pc, #180]	; (800e1f8 <prvSwitchTimerLists+0xc0>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	68db      	ldr	r3, [r3, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e14a:	4b2b      	ldr	r3, [pc, #172]	; (800e1f8 <prvSwitchTimerLists+0xc0>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	68db      	ldr	r3, [r3, #12]
 800e152:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	3304      	adds	r3, #4
 800e158:	4618      	mov	r0, r3
 800e15a:	f7fd fdb9 	bl	800bcd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6a1b      	ldr	r3, [r3, #32]
 800e162:	68f8      	ldr	r0, [r7, #12]
 800e164:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e16c:	f003 0304 	and.w	r3, r3, #4
 800e170:	2b00      	cmp	r3, #0
 800e172:	d02e      	beq.n	800e1d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	699b      	ldr	r3, [r3, #24]
 800e178:	693a      	ldr	r2, [r7, #16]
 800e17a:	4413      	add	r3, r2
 800e17c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e17e:	68ba      	ldr	r2, [r7, #8]
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	429a      	cmp	r2, r3
 800e184:	d90e      	bls.n	800e1a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	68ba      	ldr	r2, [r7, #8]
 800e18a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	68fa      	ldr	r2, [r7, #12]
 800e190:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e192:	4b19      	ldr	r3, [pc, #100]	; (800e1f8 <prvSwitchTimerLists+0xc0>)
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	3304      	adds	r3, #4
 800e19a:	4619      	mov	r1, r3
 800e19c:	4610      	mov	r0, r2
 800e19e:	f7fd fd5e 	bl	800bc5e <vListInsert>
 800e1a2:	e016      	b.n	800e1d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	9300      	str	r3, [sp, #0]
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	693a      	ldr	r2, [r7, #16]
 800e1ac:	2100      	movs	r1, #0
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	f7ff fd7c 	bl	800dcac <xTimerGenericCommand>
 800e1b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d10a      	bne.n	800e1d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c0:	f383 8811 	msr	BASEPRI, r3
 800e1c4:	f3bf 8f6f 	isb	sy
 800e1c8:	f3bf 8f4f 	dsb	sy
 800e1cc:	603b      	str	r3, [r7, #0]
}
 800e1ce:	bf00      	nop
 800e1d0:	e7fe      	b.n	800e1d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e1d2:	4b09      	ldr	r3, [pc, #36]	; (800e1f8 <prvSwitchTimerLists+0xc0>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d1b1      	bne.n	800e140 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e1dc:	4b06      	ldr	r3, [pc, #24]	; (800e1f8 <prvSwitchTimerLists+0xc0>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e1e2:	4b06      	ldr	r3, [pc, #24]	; (800e1fc <prvSwitchTimerLists+0xc4>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4a04      	ldr	r2, [pc, #16]	; (800e1f8 <prvSwitchTimerLists+0xc0>)
 800e1e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e1ea:	4a04      	ldr	r2, [pc, #16]	; (800e1fc <prvSwitchTimerLists+0xc4>)
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	6013      	str	r3, [r2, #0]
}
 800e1f0:	bf00      	nop
 800e1f2:	3718      	adds	r7, #24
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	200008b0 	.word	0x200008b0
 800e1fc:	200008b4 	.word	0x200008b4

0800e200 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e206:	f000 f965 	bl	800e4d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e20a:	4b15      	ldr	r3, [pc, #84]	; (800e260 <prvCheckForValidListAndQueue+0x60>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d120      	bne.n	800e254 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e212:	4814      	ldr	r0, [pc, #80]	; (800e264 <prvCheckForValidListAndQueue+0x64>)
 800e214:	f7fd fcd2 	bl	800bbbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e218:	4813      	ldr	r0, [pc, #76]	; (800e268 <prvCheckForValidListAndQueue+0x68>)
 800e21a:	f7fd fccf 	bl	800bbbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e21e:	4b13      	ldr	r3, [pc, #76]	; (800e26c <prvCheckForValidListAndQueue+0x6c>)
 800e220:	4a10      	ldr	r2, [pc, #64]	; (800e264 <prvCheckForValidListAndQueue+0x64>)
 800e222:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e224:	4b12      	ldr	r3, [pc, #72]	; (800e270 <prvCheckForValidListAndQueue+0x70>)
 800e226:	4a10      	ldr	r2, [pc, #64]	; (800e268 <prvCheckForValidListAndQueue+0x68>)
 800e228:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e22a:	2300      	movs	r3, #0
 800e22c:	9300      	str	r3, [sp, #0]
 800e22e:	4b11      	ldr	r3, [pc, #68]	; (800e274 <prvCheckForValidListAndQueue+0x74>)
 800e230:	4a11      	ldr	r2, [pc, #68]	; (800e278 <prvCheckForValidListAndQueue+0x78>)
 800e232:	210c      	movs	r1, #12
 800e234:	200a      	movs	r0, #10
 800e236:	f7fd fddd 	bl	800bdf4 <xQueueGenericCreateStatic>
 800e23a:	4603      	mov	r3, r0
 800e23c:	4a08      	ldr	r2, [pc, #32]	; (800e260 <prvCheckForValidListAndQueue+0x60>)
 800e23e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e240:	4b07      	ldr	r3, [pc, #28]	; (800e260 <prvCheckForValidListAndQueue+0x60>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d005      	beq.n	800e254 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e248:	4b05      	ldr	r3, [pc, #20]	; (800e260 <prvCheckForValidListAndQueue+0x60>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	490b      	ldr	r1, [pc, #44]	; (800e27c <prvCheckForValidListAndQueue+0x7c>)
 800e24e:	4618      	mov	r0, r3
 800e250:	f7fe fc5c 	bl	800cb0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e254:	f000 f96e 	bl	800e534 <vPortExitCritical>
}
 800e258:	bf00      	nop
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	200008b8 	.word	0x200008b8
 800e264:	20000888 	.word	0x20000888
 800e268:	2000089c 	.word	0x2000089c
 800e26c:	200008b0 	.word	0x200008b0
 800e270:	200008b4 	.word	0x200008b4
 800e274:	2000093c 	.word	0x2000093c
 800e278:	200008c4 	.word	0x200008c4
 800e27c:	080100a0 	.word	0x080100a0

0800e280 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e280:	b480      	push	{r7}
 800e282:	b085      	sub	sp, #20
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	3b04      	subs	r3, #4
 800e290:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	3b04      	subs	r3, #4
 800e29e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	f023 0201 	bic.w	r2, r3, #1
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	3b04      	subs	r3, #4
 800e2ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e2b0:	4a0c      	ldr	r2, [pc, #48]	; (800e2e4 <pxPortInitialiseStack+0x64>)
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	3b14      	subs	r3, #20
 800e2ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e2bc:	687a      	ldr	r2, [r7, #4]
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	3b04      	subs	r3, #4
 800e2c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f06f 0202 	mvn.w	r2, #2
 800e2ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	3b20      	subs	r3, #32
 800e2d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3714      	adds	r7, #20
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr
 800e2e4:	0800e2e9 	.word	0x0800e2e9

0800e2e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e2f2:	4b12      	ldr	r3, [pc, #72]	; (800e33c <prvTaskExitError+0x54>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2fa:	d00a      	beq.n	800e312 <prvTaskExitError+0x2a>
	__asm volatile
 800e2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e300:	f383 8811 	msr	BASEPRI, r3
 800e304:	f3bf 8f6f 	isb	sy
 800e308:	f3bf 8f4f 	dsb	sy
 800e30c:	60fb      	str	r3, [r7, #12]
}
 800e30e:	bf00      	nop
 800e310:	e7fe      	b.n	800e310 <prvTaskExitError+0x28>
	__asm volatile
 800e312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e316:	f383 8811 	msr	BASEPRI, r3
 800e31a:	f3bf 8f6f 	isb	sy
 800e31e:	f3bf 8f4f 	dsb	sy
 800e322:	60bb      	str	r3, [r7, #8]
}
 800e324:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e326:	bf00      	nop
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d0fc      	beq.n	800e328 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e32e:	bf00      	nop
 800e330:	bf00      	nop
 800e332:	3714      	adds	r7, #20
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr
 800e33c:	20000014 	.word	0x20000014

0800e340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e340:	4b07      	ldr	r3, [pc, #28]	; (800e360 <pxCurrentTCBConst2>)
 800e342:	6819      	ldr	r1, [r3, #0]
 800e344:	6808      	ldr	r0, [r1, #0]
 800e346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e34a:	f380 8809 	msr	PSP, r0
 800e34e:	f3bf 8f6f 	isb	sy
 800e352:	f04f 0000 	mov.w	r0, #0
 800e356:	f380 8811 	msr	BASEPRI, r0
 800e35a:	4770      	bx	lr
 800e35c:	f3af 8000 	nop.w

0800e360 <pxCurrentTCBConst2>:
 800e360:	2000075c 	.word	0x2000075c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e364:	bf00      	nop
 800e366:	bf00      	nop

0800e368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e368:	4808      	ldr	r0, [pc, #32]	; (800e38c <prvPortStartFirstTask+0x24>)
 800e36a:	6800      	ldr	r0, [r0, #0]
 800e36c:	6800      	ldr	r0, [r0, #0]
 800e36e:	f380 8808 	msr	MSP, r0
 800e372:	f04f 0000 	mov.w	r0, #0
 800e376:	f380 8814 	msr	CONTROL, r0
 800e37a:	b662      	cpsie	i
 800e37c:	b661      	cpsie	f
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	f3bf 8f6f 	isb	sy
 800e386:	df00      	svc	0
 800e388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e38a:	bf00      	nop
 800e38c:	e000ed08 	.word	0xe000ed08

0800e390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b086      	sub	sp, #24
 800e394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e396:	4b46      	ldr	r3, [pc, #280]	; (800e4b0 <xPortStartScheduler+0x120>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4a46      	ldr	r2, [pc, #280]	; (800e4b4 <xPortStartScheduler+0x124>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d10a      	bne.n	800e3b6 <xPortStartScheduler+0x26>
	__asm volatile
 800e3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a4:	f383 8811 	msr	BASEPRI, r3
 800e3a8:	f3bf 8f6f 	isb	sy
 800e3ac:	f3bf 8f4f 	dsb	sy
 800e3b0:	613b      	str	r3, [r7, #16]
}
 800e3b2:	bf00      	nop
 800e3b4:	e7fe      	b.n	800e3b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e3b6:	4b3e      	ldr	r3, [pc, #248]	; (800e4b0 <xPortStartScheduler+0x120>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4a3f      	ldr	r2, [pc, #252]	; (800e4b8 <xPortStartScheduler+0x128>)
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d10a      	bne.n	800e3d6 <xPortStartScheduler+0x46>
	__asm volatile
 800e3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c4:	f383 8811 	msr	BASEPRI, r3
 800e3c8:	f3bf 8f6f 	isb	sy
 800e3cc:	f3bf 8f4f 	dsb	sy
 800e3d0:	60fb      	str	r3, [r7, #12]
}
 800e3d2:	bf00      	nop
 800e3d4:	e7fe      	b.n	800e3d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e3d6:	4b39      	ldr	r3, [pc, #228]	; (800e4bc <xPortStartScheduler+0x12c>)
 800e3d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	22ff      	movs	r2, #255	; 0xff
 800e3e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	b2db      	uxtb	r3, r3
 800e3ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e3f0:	78fb      	ldrb	r3, [r7, #3]
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e3f8:	b2da      	uxtb	r2, r3
 800e3fa:	4b31      	ldr	r3, [pc, #196]	; (800e4c0 <xPortStartScheduler+0x130>)
 800e3fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e3fe:	4b31      	ldr	r3, [pc, #196]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e400:	2207      	movs	r2, #7
 800e402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e404:	e009      	b.n	800e41a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e406:	4b2f      	ldr	r3, [pc, #188]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	3b01      	subs	r3, #1
 800e40c:	4a2d      	ldr	r2, [pc, #180]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e40e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e410:	78fb      	ldrb	r3, [r7, #3]
 800e412:	b2db      	uxtb	r3, r3
 800e414:	005b      	lsls	r3, r3, #1
 800e416:	b2db      	uxtb	r3, r3
 800e418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e41a:	78fb      	ldrb	r3, [r7, #3]
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e422:	2b80      	cmp	r3, #128	; 0x80
 800e424:	d0ef      	beq.n	800e406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e426:	4b27      	ldr	r3, [pc, #156]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f1c3 0307 	rsb	r3, r3, #7
 800e42e:	2b04      	cmp	r3, #4
 800e430:	d00a      	beq.n	800e448 <xPortStartScheduler+0xb8>
	__asm volatile
 800e432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e436:	f383 8811 	msr	BASEPRI, r3
 800e43a:	f3bf 8f6f 	isb	sy
 800e43e:	f3bf 8f4f 	dsb	sy
 800e442:	60bb      	str	r3, [r7, #8]
}
 800e444:	bf00      	nop
 800e446:	e7fe      	b.n	800e446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e448:	4b1e      	ldr	r3, [pc, #120]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	021b      	lsls	r3, r3, #8
 800e44e:	4a1d      	ldr	r2, [pc, #116]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e452:	4b1c      	ldr	r3, [pc, #112]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e45a:	4a1a      	ldr	r2, [pc, #104]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e45c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	b2da      	uxtb	r2, r3
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e466:	4b18      	ldr	r3, [pc, #96]	; (800e4c8 <xPortStartScheduler+0x138>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	4a17      	ldr	r2, [pc, #92]	; (800e4c8 <xPortStartScheduler+0x138>)
 800e46c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e472:	4b15      	ldr	r3, [pc, #84]	; (800e4c8 <xPortStartScheduler+0x138>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	4a14      	ldr	r2, [pc, #80]	; (800e4c8 <xPortStartScheduler+0x138>)
 800e478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e47c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e47e:	f000 f8dd 	bl	800e63c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e482:	4b12      	ldr	r3, [pc, #72]	; (800e4cc <xPortStartScheduler+0x13c>)
 800e484:	2200      	movs	r2, #0
 800e486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e488:	f000 f8fc 	bl	800e684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e48c:	4b10      	ldr	r3, [pc, #64]	; (800e4d0 <xPortStartScheduler+0x140>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4a0f      	ldr	r2, [pc, #60]	; (800e4d0 <xPortStartScheduler+0x140>)
 800e492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e498:	f7ff ff66 	bl	800e368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e49c:	f7fe ff34 	bl	800d308 <vTaskSwitchContext>
	prvTaskExitError();
 800e4a0:	f7ff ff22 	bl	800e2e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e4a4:	2300      	movs	r3, #0
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3718      	adds	r7, #24
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	e000ed00 	.word	0xe000ed00
 800e4b4:	410fc271 	.word	0x410fc271
 800e4b8:	410fc270 	.word	0x410fc270
 800e4bc:	e000e400 	.word	0xe000e400
 800e4c0:	20000984 	.word	0x20000984
 800e4c4:	20000988 	.word	0x20000988
 800e4c8:	e000ed20 	.word	0xe000ed20
 800e4cc:	20000014 	.word	0x20000014
 800e4d0:	e000ef34 	.word	0xe000ef34

0800e4d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
	__asm volatile
 800e4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4de:	f383 8811 	msr	BASEPRI, r3
 800e4e2:	f3bf 8f6f 	isb	sy
 800e4e6:	f3bf 8f4f 	dsb	sy
 800e4ea:	607b      	str	r3, [r7, #4]
}
 800e4ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e4ee:	4b0f      	ldr	r3, [pc, #60]	; (800e52c <vPortEnterCritical+0x58>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	4a0d      	ldr	r2, [pc, #52]	; (800e52c <vPortEnterCritical+0x58>)
 800e4f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e4f8:	4b0c      	ldr	r3, [pc, #48]	; (800e52c <vPortEnterCritical+0x58>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d10f      	bne.n	800e520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e500:	4b0b      	ldr	r3, [pc, #44]	; (800e530 <vPortEnterCritical+0x5c>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	b2db      	uxtb	r3, r3
 800e506:	2b00      	cmp	r3, #0
 800e508:	d00a      	beq.n	800e520 <vPortEnterCritical+0x4c>
	__asm volatile
 800e50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e50e:	f383 8811 	msr	BASEPRI, r3
 800e512:	f3bf 8f6f 	isb	sy
 800e516:	f3bf 8f4f 	dsb	sy
 800e51a:	603b      	str	r3, [r7, #0]
}
 800e51c:	bf00      	nop
 800e51e:	e7fe      	b.n	800e51e <vPortEnterCritical+0x4a>
	}
}
 800e520:	bf00      	nop
 800e522:	370c      	adds	r7, #12
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr
 800e52c:	20000014 	.word	0x20000014
 800e530:	e000ed04 	.word	0xe000ed04

0800e534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e534:	b480      	push	{r7}
 800e536:	b083      	sub	sp, #12
 800e538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e53a:	4b12      	ldr	r3, [pc, #72]	; (800e584 <vPortExitCritical+0x50>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d10a      	bne.n	800e558 <vPortExitCritical+0x24>
	__asm volatile
 800e542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e546:	f383 8811 	msr	BASEPRI, r3
 800e54a:	f3bf 8f6f 	isb	sy
 800e54e:	f3bf 8f4f 	dsb	sy
 800e552:	607b      	str	r3, [r7, #4]
}
 800e554:	bf00      	nop
 800e556:	e7fe      	b.n	800e556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e558:	4b0a      	ldr	r3, [pc, #40]	; (800e584 <vPortExitCritical+0x50>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	3b01      	subs	r3, #1
 800e55e:	4a09      	ldr	r2, [pc, #36]	; (800e584 <vPortExitCritical+0x50>)
 800e560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e562:	4b08      	ldr	r3, [pc, #32]	; (800e584 <vPortExitCritical+0x50>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d105      	bne.n	800e576 <vPortExitCritical+0x42>
 800e56a:	2300      	movs	r3, #0
 800e56c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	f383 8811 	msr	BASEPRI, r3
}
 800e574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e576:	bf00      	nop
 800e578:	370c      	adds	r7, #12
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr
 800e582:	bf00      	nop
 800e584:	20000014 	.word	0x20000014
	...

0800e590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e590:	f3ef 8009 	mrs	r0, PSP
 800e594:	f3bf 8f6f 	isb	sy
 800e598:	4b15      	ldr	r3, [pc, #84]	; (800e5f0 <pxCurrentTCBConst>)
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	f01e 0f10 	tst.w	lr, #16
 800e5a0:	bf08      	it	eq
 800e5a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e5a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5aa:	6010      	str	r0, [r2, #0]
 800e5ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e5b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e5b4:	f380 8811 	msr	BASEPRI, r0
 800e5b8:	f3bf 8f4f 	dsb	sy
 800e5bc:	f3bf 8f6f 	isb	sy
 800e5c0:	f7fe fea2 	bl	800d308 <vTaskSwitchContext>
 800e5c4:	f04f 0000 	mov.w	r0, #0
 800e5c8:	f380 8811 	msr	BASEPRI, r0
 800e5cc:	bc09      	pop	{r0, r3}
 800e5ce:	6819      	ldr	r1, [r3, #0]
 800e5d0:	6808      	ldr	r0, [r1, #0]
 800e5d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d6:	f01e 0f10 	tst.w	lr, #16
 800e5da:	bf08      	it	eq
 800e5dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e5e0:	f380 8809 	msr	PSP, r0
 800e5e4:	f3bf 8f6f 	isb	sy
 800e5e8:	4770      	bx	lr
 800e5ea:	bf00      	nop
 800e5ec:	f3af 8000 	nop.w

0800e5f0 <pxCurrentTCBConst>:
 800e5f0:	2000075c 	.word	0x2000075c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e5f4:	bf00      	nop
 800e5f6:	bf00      	nop

0800e5f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
	__asm volatile
 800e5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e602:	f383 8811 	msr	BASEPRI, r3
 800e606:	f3bf 8f6f 	isb	sy
 800e60a:	f3bf 8f4f 	dsb	sy
 800e60e:	607b      	str	r3, [r7, #4]
}
 800e610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e612:	f7fe fdc1 	bl	800d198 <xTaskIncrementTick>
 800e616:	4603      	mov	r3, r0
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d003      	beq.n	800e624 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e61c:	4b06      	ldr	r3, [pc, #24]	; (800e638 <SysTick_Handler+0x40>)
 800e61e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e622:	601a      	str	r2, [r3, #0]
 800e624:	2300      	movs	r3, #0
 800e626:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	f383 8811 	msr	BASEPRI, r3
}
 800e62e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e630:	bf00      	nop
 800e632:	3708      	adds	r7, #8
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	e000ed04 	.word	0xe000ed04

0800e63c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e63c:	b480      	push	{r7}
 800e63e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e640:	4b0b      	ldr	r3, [pc, #44]	; (800e670 <vPortSetupTimerInterrupt+0x34>)
 800e642:	2200      	movs	r2, #0
 800e644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e646:	4b0b      	ldr	r3, [pc, #44]	; (800e674 <vPortSetupTimerInterrupt+0x38>)
 800e648:	2200      	movs	r2, #0
 800e64a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e64c:	4b0a      	ldr	r3, [pc, #40]	; (800e678 <vPortSetupTimerInterrupt+0x3c>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a0a      	ldr	r2, [pc, #40]	; (800e67c <vPortSetupTimerInterrupt+0x40>)
 800e652:	fba2 2303 	umull	r2, r3, r2, r3
 800e656:	099b      	lsrs	r3, r3, #6
 800e658:	4a09      	ldr	r2, [pc, #36]	; (800e680 <vPortSetupTimerInterrupt+0x44>)
 800e65a:	3b01      	subs	r3, #1
 800e65c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e65e:	4b04      	ldr	r3, [pc, #16]	; (800e670 <vPortSetupTimerInterrupt+0x34>)
 800e660:	2207      	movs	r2, #7
 800e662:	601a      	str	r2, [r3, #0]
}
 800e664:	bf00      	nop
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr
 800e66e:	bf00      	nop
 800e670:	e000e010 	.word	0xe000e010
 800e674:	e000e018 	.word	0xe000e018
 800e678:	20000008 	.word	0x20000008
 800e67c:	10624dd3 	.word	0x10624dd3
 800e680:	e000e014 	.word	0xe000e014

0800e684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e694 <vPortEnableVFP+0x10>
 800e688:	6801      	ldr	r1, [r0, #0]
 800e68a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e68e:	6001      	str	r1, [r0, #0]
 800e690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e692:	bf00      	nop
 800e694:	e000ed88 	.word	0xe000ed88

0800e698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e698:	b480      	push	{r7}
 800e69a:	b085      	sub	sp, #20
 800e69c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e69e:	f3ef 8305 	mrs	r3, IPSR
 800e6a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2b0f      	cmp	r3, #15
 800e6a8:	d914      	bls.n	800e6d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e6aa:	4a17      	ldr	r2, [pc, #92]	; (800e708 <vPortValidateInterruptPriority+0x70>)
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	4413      	add	r3, r2
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e6b4:	4b15      	ldr	r3, [pc, #84]	; (800e70c <vPortValidateInterruptPriority+0x74>)
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	7afa      	ldrb	r2, [r7, #11]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d20a      	bcs.n	800e6d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	607b      	str	r3, [r7, #4]
}
 800e6d0:	bf00      	nop
 800e6d2:	e7fe      	b.n	800e6d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e6d4:	4b0e      	ldr	r3, [pc, #56]	; (800e710 <vPortValidateInterruptPriority+0x78>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e6dc:	4b0d      	ldr	r3, [pc, #52]	; (800e714 <vPortValidateInterruptPriority+0x7c>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d90a      	bls.n	800e6fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e8:	f383 8811 	msr	BASEPRI, r3
 800e6ec:	f3bf 8f6f 	isb	sy
 800e6f0:	f3bf 8f4f 	dsb	sy
 800e6f4:	603b      	str	r3, [r7, #0]
}
 800e6f6:	bf00      	nop
 800e6f8:	e7fe      	b.n	800e6f8 <vPortValidateInterruptPriority+0x60>
	}
 800e6fa:	bf00      	nop
 800e6fc:	3714      	adds	r7, #20
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr
 800e706:	bf00      	nop
 800e708:	e000e3f0 	.word	0xe000e3f0
 800e70c:	20000984 	.word	0x20000984
 800e710:	e000ed0c 	.word	0xe000ed0c
 800e714:	20000988 	.word	0x20000988

0800e718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b08a      	sub	sp, #40	; 0x28
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e720:	2300      	movs	r3, #0
 800e722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e724:	f7fe fc7e 	bl	800d024 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e728:	4b5b      	ldr	r3, [pc, #364]	; (800e898 <pvPortMalloc+0x180>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d101      	bne.n	800e734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e730:	f000 f920 	bl	800e974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e734:	4b59      	ldr	r3, [pc, #356]	; (800e89c <pvPortMalloc+0x184>)
 800e736:	681a      	ldr	r2, [r3, #0]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4013      	ands	r3, r2
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f040 8093 	bne.w	800e868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d01d      	beq.n	800e784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e748:	2208      	movs	r2, #8
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	4413      	add	r3, r2
 800e74e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f003 0307 	and.w	r3, r3, #7
 800e756:	2b00      	cmp	r3, #0
 800e758:	d014      	beq.n	800e784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f023 0307 	bic.w	r3, r3, #7
 800e760:	3308      	adds	r3, #8
 800e762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f003 0307 	and.w	r3, r3, #7
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00a      	beq.n	800e784 <pvPortMalloc+0x6c>
	__asm volatile
 800e76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e772:	f383 8811 	msr	BASEPRI, r3
 800e776:	f3bf 8f6f 	isb	sy
 800e77a:	f3bf 8f4f 	dsb	sy
 800e77e:	617b      	str	r3, [r7, #20]
}
 800e780:	bf00      	nop
 800e782:	e7fe      	b.n	800e782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d06e      	beq.n	800e868 <pvPortMalloc+0x150>
 800e78a:	4b45      	ldr	r3, [pc, #276]	; (800e8a0 <pvPortMalloc+0x188>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	429a      	cmp	r2, r3
 800e792:	d869      	bhi.n	800e868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e794:	4b43      	ldr	r3, [pc, #268]	; (800e8a4 <pvPortMalloc+0x18c>)
 800e796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e798:	4b42      	ldr	r3, [pc, #264]	; (800e8a4 <pvPortMalloc+0x18c>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e79e:	e004      	b.n	800e7aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d903      	bls.n	800e7bc <pvPortMalloc+0xa4>
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d1f1      	bne.n	800e7a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e7bc:	4b36      	ldr	r3, [pc, #216]	; (800e898 <pvPortMalloc+0x180>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d050      	beq.n	800e868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e7c6:	6a3b      	ldr	r3, [r7, #32]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	2208      	movs	r2, #8
 800e7cc:	4413      	add	r3, r2
 800e7ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	6a3b      	ldr	r3, [r7, #32]
 800e7d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7da:	685a      	ldr	r2, [r3, #4]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	1ad2      	subs	r2, r2, r3
 800e7e0:	2308      	movs	r3, #8
 800e7e2:	005b      	lsls	r3, r3, #1
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d91f      	bls.n	800e828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	f003 0307 	and.w	r3, r3, #7
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00a      	beq.n	800e810 <pvPortMalloc+0xf8>
	__asm volatile
 800e7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fe:	f383 8811 	msr	BASEPRI, r3
 800e802:	f3bf 8f6f 	isb	sy
 800e806:	f3bf 8f4f 	dsb	sy
 800e80a:	613b      	str	r3, [r7, #16]
}
 800e80c:	bf00      	nop
 800e80e:	e7fe      	b.n	800e80e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e812:	685a      	ldr	r2, [r3, #4]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	1ad2      	subs	r2, r2, r3
 800e818:	69bb      	ldr	r3, [r7, #24]
 800e81a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81e:	687a      	ldr	r2, [r7, #4]
 800e820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e822:	69b8      	ldr	r0, [r7, #24]
 800e824:	f000 f908 	bl	800ea38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e828:	4b1d      	ldr	r3, [pc, #116]	; (800e8a0 <pvPortMalloc+0x188>)
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	1ad3      	subs	r3, r2, r3
 800e832:	4a1b      	ldr	r2, [pc, #108]	; (800e8a0 <pvPortMalloc+0x188>)
 800e834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e836:	4b1a      	ldr	r3, [pc, #104]	; (800e8a0 <pvPortMalloc+0x188>)
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	4b1b      	ldr	r3, [pc, #108]	; (800e8a8 <pvPortMalloc+0x190>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	429a      	cmp	r2, r3
 800e840:	d203      	bcs.n	800e84a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e842:	4b17      	ldr	r3, [pc, #92]	; (800e8a0 <pvPortMalloc+0x188>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a18      	ldr	r2, [pc, #96]	; (800e8a8 <pvPortMalloc+0x190>)
 800e848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84c:	685a      	ldr	r2, [r3, #4]
 800e84e:	4b13      	ldr	r3, [pc, #76]	; (800e89c <pvPortMalloc+0x184>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	431a      	orrs	r2, r3
 800e854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85a:	2200      	movs	r2, #0
 800e85c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e85e:	4b13      	ldr	r3, [pc, #76]	; (800e8ac <pvPortMalloc+0x194>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	3301      	adds	r3, #1
 800e864:	4a11      	ldr	r2, [pc, #68]	; (800e8ac <pvPortMalloc+0x194>)
 800e866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e868:	f7fe fbea 	bl	800d040 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e86c:	69fb      	ldr	r3, [r7, #28]
 800e86e:	f003 0307 	and.w	r3, r3, #7
 800e872:	2b00      	cmp	r3, #0
 800e874:	d00a      	beq.n	800e88c <pvPortMalloc+0x174>
	__asm volatile
 800e876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87a:	f383 8811 	msr	BASEPRI, r3
 800e87e:	f3bf 8f6f 	isb	sy
 800e882:	f3bf 8f4f 	dsb	sy
 800e886:	60fb      	str	r3, [r7, #12]
}
 800e888:	bf00      	nop
 800e88a:	e7fe      	b.n	800e88a <pvPortMalloc+0x172>
	return pvReturn;
 800e88c:	69fb      	ldr	r3, [r7, #28]
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3728      	adds	r7, #40	; 0x28
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	2000a5d4 	.word	0x2000a5d4
 800e89c:	2000a5e8 	.word	0x2000a5e8
 800e8a0:	2000a5d8 	.word	0x2000a5d8
 800e8a4:	2000a5cc 	.word	0x2000a5cc
 800e8a8:	2000a5dc 	.word	0x2000a5dc
 800e8ac:	2000a5e0 	.word	0x2000a5e0

0800e8b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b086      	sub	sp, #24
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d04d      	beq.n	800e95e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e8c2:	2308      	movs	r3, #8
 800e8c4:	425b      	negs	r3, r3
 800e8c6:	697a      	ldr	r2, [r7, #20]
 800e8c8:	4413      	add	r3, r2
 800e8ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	685a      	ldr	r2, [r3, #4]
 800e8d4:	4b24      	ldr	r3, [pc, #144]	; (800e968 <vPortFree+0xb8>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4013      	ands	r3, r2
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d10a      	bne.n	800e8f4 <vPortFree+0x44>
	__asm volatile
 800e8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e2:	f383 8811 	msr	BASEPRI, r3
 800e8e6:	f3bf 8f6f 	isb	sy
 800e8ea:	f3bf 8f4f 	dsb	sy
 800e8ee:	60fb      	str	r3, [r7, #12]
}
 800e8f0:	bf00      	nop
 800e8f2:	e7fe      	b.n	800e8f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d00a      	beq.n	800e912 <vPortFree+0x62>
	__asm volatile
 800e8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e900:	f383 8811 	msr	BASEPRI, r3
 800e904:	f3bf 8f6f 	isb	sy
 800e908:	f3bf 8f4f 	dsb	sy
 800e90c:	60bb      	str	r3, [r7, #8]
}
 800e90e:	bf00      	nop
 800e910:	e7fe      	b.n	800e910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	685a      	ldr	r2, [r3, #4]
 800e916:	4b14      	ldr	r3, [pc, #80]	; (800e968 <vPortFree+0xb8>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4013      	ands	r3, r2
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d01e      	beq.n	800e95e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d11a      	bne.n	800e95e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	685a      	ldr	r2, [r3, #4]
 800e92c:	4b0e      	ldr	r3, [pc, #56]	; (800e968 <vPortFree+0xb8>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	43db      	mvns	r3, r3
 800e932:	401a      	ands	r2, r3
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e938:	f7fe fb74 	bl	800d024 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	685a      	ldr	r2, [r3, #4]
 800e940:	4b0a      	ldr	r3, [pc, #40]	; (800e96c <vPortFree+0xbc>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4413      	add	r3, r2
 800e946:	4a09      	ldr	r2, [pc, #36]	; (800e96c <vPortFree+0xbc>)
 800e948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e94a:	6938      	ldr	r0, [r7, #16]
 800e94c:	f000 f874 	bl	800ea38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e950:	4b07      	ldr	r3, [pc, #28]	; (800e970 <vPortFree+0xc0>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	3301      	adds	r3, #1
 800e956:	4a06      	ldr	r2, [pc, #24]	; (800e970 <vPortFree+0xc0>)
 800e958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e95a:	f7fe fb71 	bl	800d040 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e95e:	bf00      	nop
 800e960:	3718      	adds	r7, #24
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	2000a5e8 	.word	0x2000a5e8
 800e96c:	2000a5d8 	.word	0x2000a5d8
 800e970:	2000a5e4 	.word	0x2000a5e4

0800e974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e974:	b480      	push	{r7}
 800e976:	b085      	sub	sp, #20
 800e978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e97a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800e97e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e980:	4b27      	ldr	r3, [pc, #156]	; (800ea20 <prvHeapInit+0xac>)
 800e982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f003 0307 	and.w	r3, r3, #7
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d00c      	beq.n	800e9a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	3307      	adds	r3, #7
 800e992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f023 0307 	bic.w	r3, r3, #7
 800e99a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e99c:	68ba      	ldr	r2, [r7, #8]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	1ad3      	subs	r3, r2, r3
 800e9a2:	4a1f      	ldr	r2, [pc, #124]	; (800ea20 <prvHeapInit+0xac>)
 800e9a4:	4413      	add	r3, r2
 800e9a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e9ac:	4a1d      	ldr	r2, [pc, #116]	; (800ea24 <prvHeapInit+0xb0>)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e9b2:	4b1c      	ldr	r3, [pc, #112]	; (800ea24 <prvHeapInit+0xb0>)
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	68ba      	ldr	r2, [r7, #8]
 800e9bc:	4413      	add	r3, r2
 800e9be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e9c0:	2208      	movs	r2, #8
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	1a9b      	subs	r3, r3, r2
 800e9c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	f023 0307 	bic.w	r3, r3, #7
 800e9ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	4a15      	ldr	r2, [pc, #84]	; (800ea28 <prvHeapInit+0xb4>)
 800e9d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e9d6:	4b14      	ldr	r3, [pc, #80]	; (800ea28 <prvHeapInit+0xb4>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e9de:	4b12      	ldr	r3, [pc, #72]	; (800ea28 <prvHeapInit+0xb4>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	1ad2      	subs	r2, r2, r3
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e9f4:	4b0c      	ldr	r3, [pc, #48]	; (800ea28 <prvHeapInit+0xb4>)
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	4a0a      	ldr	r2, [pc, #40]	; (800ea2c <prvHeapInit+0xb8>)
 800ea02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	4a09      	ldr	r2, [pc, #36]	; (800ea30 <prvHeapInit+0xbc>)
 800ea0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ea0c:	4b09      	ldr	r3, [pc, #36]	; (800ea34 <prvHeapInit+0xc0>)
 800ea0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ea12:	601a      	str	r2, [r3, #0]
}
 800ea14:	bf00      	nop
 800ea16:	3714      	adds	r7, #20
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr
 800ea20:	2000098c 	.word	0x2000098c
 800ea24:	2000a5cc 	.word	0x2000a5cc
 800ea28:	2000a5d4 	.word	0x2000a5d4
 800ea2c:	2000a5dc 	.word	0x2000a5dc
 800ea30:	2000a5d8 	.word	0x2000a5d8
 800ea34:	2000a5e8 	.word	0x2000a5e8

0800ea38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ea40:	4b28      	ldr	r3, [pc, #160]	; (800eae4 <prvInsertBlockIntoFreeList+0xac>)
 800ea42:	60fb      	str	r3, [r7, #12]
 800ea44:	e002      	b.n	800ea4c <prvInsertBlockIntoFreeList+0x14>
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	60fb      	str	r3, [r7, #12]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d8f7      	bhi.n	800ea46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	68ba      	ldr	r2, [r7, #8]
 800ea60:	4413      	add	r3, r2
 800ea62:	687a      	ldr	r2, [r7, #4]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d108      	bne.n	800ea7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	685a      	ldr	r2, [r3, #4]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	441a      	add	r2, r3
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	68ba      	ldr	r2, [r7, #8]
 800ea84:	441a      	add	r2, r3
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d118      	bne.n	800eac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	4b15      	ldr	r3, [pc, #84]	; (800eae8 <prvInsertBlockIntoFreeList+0xb0>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d00d      	beq.n	800eab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	685a      	ldr	r2, [r3, #4]
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	441a      	add	r2, r3
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	601a      	str	r2, [r3, #0]
 800eab4:	e008      	b.n	800eac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eab6:	4b0c      	ldr	r3, [pc, #48]	; (800eae8 <prvInsertBlockIntoFreeList+0xb0>)
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	601a      	str	r2, [r3, #0]
 800eabe:	e003      	b.n	800eac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eac8:	68fa      	ldr	r2, [r7, #12]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d002      	beq.n	800ead6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	687a      	ldr	r2, [r7, #4]
 800ead4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ead6:	bf00      	nop
 800ead8:	3714      	adds	r7, #20
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr
 800eae2:	bf00      	nop
 800eae4:	2000a5cc 	.word	0x2000a5cc
 800eae8:	2000a5d4 	.word	0x2000a5d4

0800eaec <atoi>:
 800eaec:	220a      	movs	r2, #10
 800eaee:	2100      	movs	r1, #0
 800eaf0:	f000 b952 	b.w	800ed98 <strtol>

0800eaf4 <__errno>:
 800eaf4:	4b01      	ldr	r3, [pc, #4]	; (800eafc <__errno+0x8>)
 800eaf6:	6818      	ldr	r0, [r3, #0]
 800eaf8:	4770      	bx	lr
 800eafa:	bf00      	nop
 800eafc:	20000018 	.word	0x20000018

0800eb00 <__libc_init_array>:
 800eb00:	b570      	push	{r4, r5, r6, lr}
 800eb02:	4d0d      	ldr	r5, [pc, #52]	; (800eb38 <__libc_init_array+0x38>)
 800eb04:	4c0d      	ldr	r4, [pc, #52]	; (800eb3c <__libc_init_array+0x3c>)
 800eb06:	1b64      	subs	r4, r4, r5
 800eb08:	10a4      	asrs	r4, r4, #2
 800eb0a:	2600      	movs	r6, #0
 800eb0c:	42a6      	cmp	r6, r4
 800eb0e:	d109      	bne.n	800eb24 <__libc_init_array+0x24>
 800eb10:	4d0b      	ldr	r5, [pc, #44]	; (800eb40 <__libc_init_array+0x40>)
 800eb12:	4c0c      	ldr	r4, [pc, #48]	; (800eb44 <__libc_init_array+0x44>)
 800eb14:	f001 f970 	bl	800fdf8 <_init>
 800eb18:	1b64      	subs	r4, r4, r5
 800eb1a:	10a4      	asrs	r4, r4, #2
 800eb1c:	2600      	movs	r6, #0
 800eb1e:	42a6      	cmp	r6, r4
 800eb20:	d105      	bne.n	800eb2e <__libc_init_array+0x2e>
 800eb22:	bd70      	pop	{r4, r5, r6, pc}
 800eb24:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb28:	4798      	blx	r3
 800eb2a:	3601      	adds	r6, #1
 800eb2c:	e7ee      	b.n	800eb0c <__libc_init_array+0xc>
 800eb2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb32:	4798      	blx	r3
 800eb34:	3601      	adds	r6, #1
 800eb36:	e7f2      	b.n	800eb1e <__libc_init_array+0x1e>
 800eb38:	0801026c 	.word	0x0801026c
 800eb3c:	0801026c 	.word	0x0801026c
 800eb40:	0801026c 	.word	0x0801026c
 800eb44:	08010270 	.word	0x08010270

0800eb48 <memcpy>:
 800eb48:	440a      	add	r2, r1
 800eb4a:	4291      	cmp	r1, r2
 800eb4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800eb50:	d100      	bne.n	800eb54 <memcpy+0xc>
 800eb52:	4770      	bx	lr
 800eb54:	b510      	push	{r4, lr}
 800eb56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb5e:	4291      	cmp	r1, r2
 800eb60:	d1f9      	bne.n	800eb56 <memcpy+0xe>
 800eb62:	bd10      	pop	{r4, pc}

0800eb64 <memset>:
 800eb64:	4402      	add	r2, r0
 800eb66:	4603      	mov	r3, r0
 800eb68:	4293      	cmp	r3, r2
 800eb6a:	d100      	bne.n	800eb6e <memset+0xa>
 800eb6c:	4770      	bx	lr
 800eb6e:	f803 1b01 	strb.w	r1, [r3], #1
 800eb72:	e7f9      	b.n	800eb68 <memset+0x4>

0800eb74 <iprintf>:
 800eb74:	b40f      	push	{r0, r1, r2, r3}
 800eb76:	4b0a      	ldr	r3, [pc, #40]	; (800eba0 <iprintf+0x2c>)
 800eb78:	b513      	push	{r0, r1, r4, lr}
 800eb7a:	681c      	ldr	r4, [r3, #0]
 800eb7c:	b124      	cbz	r4, 800eb88 <iprintf+0x14>
 800eb7e:	69a3      	ldr	r3, [r4, #24]
 800eb80:	b913      	cbnz	r3, 800eb88 <iprintf+0x14>
 800eb82:	4620      	mov	r0, r4
 800eb84:	f000 faec 	bl	800f160 <__sinit>
 800eb88:	ab05      	add	r3, sp, #20
 800eb8a:	9a04      	ldr	r2, [sp, #16]
 800eb8c:	68a1      	ldr	r1, [r4, #8]
 800eb8e:	9301      	str	r3, [sp, #4]
 800eb90:	4620      	mov	r0, r4
 800eb92:	f000 fcbd 	bl	800f510 <_vfiprintf_r>
 800eb96:	b002      	add	sp, #8
 800eb98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb9c:	b004      	add	sp, #16
 800eb9e:	4770      	bx	lr
 800eba0:	20000018 	.word	0x20000018

0800eba4 <_puts_r>:
 800eba4:	b570      	push	{r4, r5, r6, lr}
 800eba6:	460e      	mov	r6, r1
 800eba8:	4605      	mov	r5, r0
 800ebaa:	b118      	cbz	r0, 800ebb4 <_puts_r+0x10>
 800ebac:	6983      	ldr	r3, [r0, #24]
 800ebae:	b90b      	cbnz	r3, 800ebb4 <_puts_r+0x10>
 800ebb0:	f000 fad6 	bl	800f160 <__sinit>
 800ebb4:	69ab      	ldr	r3, [r5, #24]
 800ebb6:	68ac      	ldr	r4, [r5, #8]
 800ebb8:	b913      	cbnz	r3, 800ebc0 <_puts_r+0x1c>
 800ebba:	4628      	mov	r0, r5
 800ebbc:	f000 fad0 	bl	800f160 <__sinit>
 800ebc0:	4b2c      	ldr	r3, [pc, #176]	; (800ec74 <_puts_r+0xd0>)
 800ebc2:	429c      	cmp	r4, r3
 800ebc4:	d120      	bne.n	800ec08 <_puts_r+0x64>
 800ebc6:	686c      	ldr	r4, [r5, #4]
 800ebc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ebca:	07db      	lsls	r3, r3, #31
 800ebcc:	d405      	bmi.n	800ebda <_puts_r+0x36>
 800ebce:	89a3      	ldrh	r3, [r4, #12]
 800ebd0:	0598      	lsls	r0, r3, #22
 800ebd2:	d402      	bmi.n	800ebda <_puts_r+0x36>
 800ebd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebd6:	f000 fb61 	bl	800f29c <__retarget_lock_acquire_recursive>
 800ebda:	89a3      	ldrh	r3, [r4, #12]
 800ebdc:	0719      	lsls	r1, r3, #28
 800ebde:	d51d      	bpl.n	800ec1c <_puts_r+0x78>
 800ebe0:	6923      	ldr	r3, [r4, #16]
 800ebe2:	b1db      	cbz	r3, 800ec1c <_puts_r+0x78>
 800ebe4:	3e01      	subs	r6, #1
 800ebe6:	68a3      	ldr	r3, [r4, #8]
 800ebe8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ebec:	3b01      	subs	r3, #1
 800ebee:	60a3      	str	r3, [r4, #8]
 800ebf0:	bb39      	cbnz	r1, 800ec42 <_puts_r+0x9e>
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	da38      	bge.n	800ec68 <_puts_r+0xc4>
 800ebf6:	4622      	mov	r2, r4
 800ebf8:	210a      	movs	r1, #10
 800ebfa:	4628      	mov	r0, r5
 800ebfc:	f000 f8d6 	bl	800edac <__swbuf_r>
 800ec00:	3001      	adds	r0, #1
 800ec02:	d011      	beq.n	800ec28 <_puts_r+0x84>
 800ec04:	250a      	movs	r5, #10
 800ec06:	e011      	b.n	800ec2c <_puts_r+0x88>
 800ec08:	4b1b      	ldr	r3, [pc, #108]	; (800ec78 <_puts_r+0xd4>)
 800ec0a:	429c      	cmp	r4, r3
 800ec0c:	d101      	bne.n	800ec12 <_puts_r+0x6e>
 800ec0e:	68ac      	ldr	r4, [r5, #8]
 800ec10:	e7da      	b.n	800ebc8 <_puts_r+0x24>
 800ec12:	4b1a      	ldr	r3, [pc, #104]	; (800ec7c <_puts_r+0xd8>)
 800ec14:	429c      	cmp	r4, r3
 800ec16:	bf08      	it	eq
 800ec18:	68ec      	ldreq	r4, [r5, #12]
 800ec1a:	e7d5      	b.n	800ebc8 <_puts_r+0x24>
 800ec1c:	4621      	mov	r1, r4
 800ec1e:	4628      	mov	r0, r5
 800ec20:	f000 f916 	bl	800ee50 <__swsetup_r>
 800ec24:	2800      	cmp	r0, #0
 800ec26:	d0dd      	beq.n	800ebe4 <_puts_r+0x40>
 800ec28:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ec2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec2e:	07da      	lsls	r2, r3, #31
 800ec30:	d405      	bmi.n	800ec3e <_puts_r+0x9a>
 800ec32:	89a3      	ldrh	r3, [r4, #12]
 800ec34:	059b      	lsls	r3, r3, #22
 800ec36:	d402      	bmi.n	800ec3e <_puts_r+0x9a>
 800ec38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec3a:	f000 fb30 	bl	800f29e <__retarget_lock_release_recursive>
 800ec3e:	4628      	mov	r0, r5
 800ec40:	bd70      	pop	{r4, r5, r6, pc}
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	da04      	bge.n	800ec50 <_puts_r+0xac>
 800ec46:	69a2      	ldr	r2, [r4, #24]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	dc06      	bgt.n	800ec5a <_puts_r+0xb6>
 800ec4c:	290a      	cmp	r1, #10
 800ec4e:	d004      	beq.n	800ec5a <_puts_r+0xb6>
 800ec50:	6823      	ldr	r3, [r4, #0]
 800ec52:	1c5a      	adds	r2, r3, #1
 800ec54:	6022      	str	r2, [r4, #0]
 800ec56:	7019      	strb	r1, [r3, #0]
 800ec58:	e7c5      	b.n	800ebe6 <_puts_r+0x42>
 800ec5a:	4622      	mov	r2, r4
 800ec5c:	4628      	mov	r0, r5
 800ec5e:	f000 f8a5 	bl	800edac <__swbuf_r>
 800ec62:	3001      	adds	r0, #1
 800ec64:	d1bf      	bne.n	800ebe6 <_puts_r+0x42>
 800ec66:	e7df      	b.n	800ec28 <_puts_r+0x84>
 800ec68:	6823      	ldr	r3, [r4, #0]
 800ec6a:	250a      	movs	r5, #10
 800ec6c:	1c5a      	adds	r2, r3, #1
 800ec6e:	6022      	str	r2, [r4, #0]
 800ec70:	701d      	strb	r5, [r3, #0]
 800ec72:	e7db      	b.n	800ec2c <_puts_r+0x88>
 800ec74:	080101f0 	.word	0x080101f0
 800ec78:	08010210 	.word	0x08010210
 800ec7c:	080101d0 	.word	0x080101d0

0800ec80 <puts>:
 800ec80:	4b02      	ldr	r3, [pc, #8]	; (800ec8c <puts+0xc>)
 800ec82:	4601      	mov	r1, r0
 800ec84:	6818      	ldr	r0, [r3, #0]
 800ec86:	f7ff bf8d 	b.w	800eba4 <_puts_r>
 800ec8a:	bf00      	nop
 800ec8c:	20000018 	.word	0x20000018

0800ec90 <_strtol_l.isra.0>:
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec96:	d001      	beq.n	800ec9c <_strtol_l.isra.0+0xc>
 800ec98:	2b24      	cmp	r3, #36	; 0x24
 800ec9a:	d906      	bls.n	800ecaa <_strtol_l.isra.0+0x1a>
 800ec9c:	f7ff ff2a 	bl	800eaf4 <__errno>
 800eca0:	2316      	movs	r3, #22
 800eca2:	6003      	str	r3, [r0, #0]
 800eca4:	2000      	movs	r0, #0
 800eca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecaa:	4f3a      	ldr	r7, [pc, #232]	; (800ed94 <_strtol_l.isra.0+0x104>)
 800ecac:	468e      	mov	lr, r1
 800ecae:	4676      	mov	r6, lr
 800ecb0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ecb4:	5de5      	ldrb	r5, [r4, r7]
 800ecb6:	f015 0508 	ands.w	r5, r5, #8
 800ecba:	d1f8      	bne.n	800ecae <_strtol_l.isra.0+0x1e>
 800ecbc:	2c2d      	cmp	r4, #45	; 0x2d
 800ecbe:	d134      	bne.n	800ed2a <_strtol_l.isra.0+0x9a>
 800ecc0:	f89e 4000 	ldrb.w	r4, [lr]
 800ecc4:	f04f 0801 	mov.w	r8, #1
 800ecc8:	f106 0e02 	add.w	lr, r6, #2
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d05c      	beq.n	800ed8a <_strtol_l.isra.0+0xfa>
 800ecd0:	2b10      	cmp	r3, #16
 800ecd2:	d10c      	bne.n	800ecee <_strtol_l.isra.0+0x5e>
 800ecd4:	2c30      	cmp	r4, #48	; 0x30
 800ecd6:	d10a      	bne.n	800ecee <_strtol_l.isra.0+0x5e>
 800ecd8:	f89e 4000 	ldrb.w	r4, [lr]
 800ecdc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ece0:	2c58      	cmp	r4, #88	; 0x58
 800ece2:	d14d      	bne.n	800ed80 <_strtol_l.isra.0+0xf0>
 800ece4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ece8:	2310      	movs	r3, #16
 800ecea:	f10e 0e02 	add.w	lr, lr, #2
 800ecee:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ecf2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800ecf6:	2600      	movs	r6, #0
 800ecf8:	fbbc f9f3 	udiv	r9, ip, r3
 800ecfc:	4635      	mov	r5, r6
 800ecfe:	fb03 ca19 	mls	sl, r3, r9, ip
 800ed02:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ed06:	2f09      	cmp	r7, #9
 800ed08:	d818      	bhi.n	800ed3c <_strtol_l.isra.0+0xac>
 800ed0a:	463c      	mov	r4, r7
 800ed0c:	42a3      	cmp	r3, r4
 800ed0e:	dd24      	ble.n	800ed5a <_strtol_l.isra.0+0xca>
 800ed10:	2e00      	cmp	r6, #0
 800ed12:	db1f      	blt.n	800ed54 <_strtol_l.isra.0+0xc4>
 800ed14:	45a9      	cmp	r9, r5
 800ed16:	d31d      	bcc.n	800ed54 <_strtol_l.isra.0+0xc4>
 800ed18:	d101      	bne.n	800ed1e <_strtol_l.isra.0+0x8e>
 800ed1a:	45a2      	cmp	sl, r4
 800ed1c:	db1a      	blt.n	800ed54 <_strtol_l.isra.0+0xc4>
 800ed1e:	fb05 4503 	mla	r5, r5, r3, r4
 800ed22:	2601      	movs	r6, #1
 800ed24:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ed28:	e7eb      	b.n	800ed02 <_strtol_l.isra.0+0x72>
 800ed2a:	2c2b      	cmp	r4, #43	; 0x2b
 800ed2c:	bf08      	it	eq
 800ed2e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ed32:	46a8      	mov	r8, r5
 800ed34:	bf08      	it	eq
 800ed36:	f106 0e02 	addeq.w	lr, r6, #2
 800ed3a:	e7c7      	b.n	800eccc <_strtol_l.isra.0+0x3c>
 800ed3c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ed40:	2f19      	cmp	r7, #25
 800ed42:	d801      	bhi.n	800ed48 <_strtol_l.isra.0+0xb8>
 800ed44:	3c37      	subs	r4, #55	; 0x37
 800ed46:	e7e1      	b.n	800ed0c <_strtol_l.isra.0+0x7c>
 800ed48:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ed4c:	2f19      	cmp	r7, #25
 800ed4e:	d804      	bhi.n	800ed5a <_strtol_l.isra.0+0xca>
 800ed50:	3c57      	subs	r4, #87	; 0x57
 800ed52:	e7db      	b.n	800ed0c <_strtol_l.isra.0+0x7c>
 800ed54:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800ed58:	e7e4      	b.n	800ed24 <_strtol_l.isra.0+0x94>
 800ed5a:	2e00      	cmp	r6, #0
 800ed5c:	da05      	bge.n	800ed6a <_strtol_l.isra.0+0xda>
 800ed5e:	2322      	movs	r3, #34	; 0x22
 800ed60:	6003      	str	r3, [r0, #0]
 800ed62:	4665      	mov	r5, ip
 800ed64:	b942      	cbnz	r2, 800ed78 <_strtol_l.isra.0+0xe8>
 800ed66:	4628      	mov	r0, r5
 800ed68:	e79d      	b.n	800eca6 <_strtol_l.isra.0+0x16>
 800ed6a:	f1b8 0f00 	cmp.w	r8, #0
 800ed6e:	d000      	beq.n	800ed72 <_strtol_l.isra.0+0xe2>
 800ed70:	426d      	negs	r5, r5
 800ed72:	2a00      	cmp	r2, #0
 800ed74:	d0f7      	beq.n	800ed66 <_strtol_l.isra.0+0xd6>
 800ed76:	b10e      	cbz	r6, 800ed7c <_strtol_l.isra.0+0xec>
 800ed78:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800ed7c:	6011      	str	r1, [r2, #0]
 800ed7e:	e7f2      	b.n	800ed66 <_strtol_l.isra.0+0xd6>
 800ed80:	2430      	movs	r4, #48	; 0x30
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d1b3      	bne.n	800ecee <_strtol_l.isra.0+0x5e>
 800ed86:	2308      	movs	r3, #8
 800ed88:	e7b1      	b.n	800ecee <_strtol_l.isra.0+0x5e>
 800ed8a:	2c30      	cmp	r4, #48	; 0x30
 800ed8c:	d0a4      	beq.n	800ecd8 <_strtol_l.isra.0+0x48>
 800ed8e:	230a      	movs	r3, #10
 800ed90:	e7ad      	b.n	800ecee <_strtol_l.isra.0+0x5e>
 800ed92:	bf00      	nop
 800ed94:	080100cd 	.word	0x080100cd

0800ed98 <strtol>:
 800ed98:	4613      	mov	r3, r2
 800ed9a:	460a      	mov	r2, r1
 800ed9c:	4601      	mov	r1, r0
 800ed9e:	4802      	ldr	r0, [pc, #8]	; (800eda8 <strtol+0x10>)
 800eda0:	6800      	ldr	r0, [r0, #0]
 800eda2:	f7ff bf75 	b.w	800ec90 <_strtol_l.isra.0>
 800eda6:	bf00      	nop
 800eda8:	20000018 	.word	0x20000018

0800edac <__swbuf_r>:
 800edac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edae:	460e      	mov	r6, r1
 800edb0:	4614      	mov	r4, r2
 800edb2:	4605      	mov	r5, r0
 800edb4:	b118      	cbz	r0, 800edbe <__swbuf_r+0x12>
 800edb6:	6983      	ldr	r3, [r0, #24]
 800edb8:	b90b      	cbnz	r3, 800edbe <__swbuf_r+0x12>
 800edba:	f000 f9d1 	bl	800f160 <__sinit>
 800edbe:	4b21      	ldr	r3, [pc, #132]	; (800ee44 <__swbuf_r+0x98>)
 800edc0:	429c      	cmp	r4, r3
 800edc2:	d12b      	bne.n	800ee1c <__swbuf_r+0x70>
 800edc4:	686c      	ldr	r4, [r5, #4]
 800edc6:	69a3      	ldr	r3, [r4, #24]
 800edc8:	60a3      	str	r3, [r4, #8]
 800edca:	89a3      	ldrh	r3, [r4, #12]
 800edcc:	071a      	lsls	r2, r3, #28
 800edce:	d52f      	bpl.n	800ee30 <__swbuf_r+0x84>
 800edd0:	6923      	ldr	r3, [r4, #16]
 800edd2:	b36b      	cbz	r3, 800ee30 <__swbuf_r+0x84>
 800edd4:	6923      	ldr	r3, [r4, #16]
 800edd6:	6820      	ldr	r0, [r4, #0]
 800edd8:	1ac0      	subs	r0, r0, r3
 800edda:	6963      	ldr	r3, [r4, #20]
 800eddc:	b2f6      	uxtb	r6, r6
 800edde:	4283      	cmp	r3, r0
 800ede0:	4637      	mov	r7, r6
 800ede2:	dc04      	bgt.n	800edee <__swbuf_r+0x42>
 800ede4:	4621      	mov	r1, r4
 800ede6:	4628      	mov	r0, r5
 800ede8:	f000 f926 	bl	800f038 <_fflush_r>
 800edec:	bb30      	cbnz	r0, 800ee3c <__swbuf_r+0x90>
 800edee:	68a3      	ldr	r3, [r4, #8]
 800edf0:	3b01      	subs	r3, #1
 800edf2:	60a3      	str	r3, [r4, #8]
 800edf4:	6823      	ldr	r3, [r4, #0]
 800edf6:	1c5a      	adds	r2, r3, #1
 800edf8:	6022      	str	r2, [r4, #0]
 800edfa:	701e      	strb	r6, [r3, #0]
 800edfc:	6963      	ldr	r3, [r4, #20]
 800edfe:	3001      	adds	r0, #1
 800ee00:	4283      	cmp	r3, r0
 800ee02:	d004      	beq.n	800ee0e <__swbuf_r+0x62>
 800ee04:	89a3      	ldrh	r3, [r4, #12]
 800ee06:	07db      	lsls	r3, r3, #31
 800ee08:	d506      	bpl.n	800ee18 <__swbuf_r+0x6c>
 800ee0a:	2e0a      	cmp	r6, #10
 800ee0c:	d104      	bne.n	800ee18 <__swbuf_r+0x6c>
 800ee0e:	4621      	mov	r1, r4
 800ee10:	4628      	mov	r0, r5
 800ee12:	f000 f911 	bl	800f038 <_fflush_r>
 800ee16:	b988      	cbnz	r0, 800ee3c <__swbuf_r+0x90>
 800ee18:	4638      	mov	r0, r7
 800ee1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee1c:	4b0a      	ldr	r3, [pc, #40]	; (800ee48 <__swbuf_r+0x9c>)
 800ee1e:	429c      	cmp	r4, r3
 800ee20:	d101      	bne.n	800ee26 <__swbuf_r+0x7a>
 800ee22:	68ac      	ldr	r4, [r5, #8]
 800ee24:	e7cf      	b.n	800edc6 <__swbuf_r+0x1a>
 800ee26:	4b09      	ldr	r3, [pc, #36]	; (800ee4c <__swbuf_r+0xa0>)
 800ee28:	429c      	cmp	r4, r3
 800ee2a:	bf08      	it	eq
 800ee2c:	68ec      	ldreq	r4, [r5, #12]
 800ee2e:	e7ca      	b.n	800edc6 <__swbuf_r+0x1a>
 800ee30:	4621      	mov	r1, r4
 800ee32:	4628      	mov	r0, r5
 800ee34:	f000 f80c 	bl	800ee50 <__swsetup_r>
 800ee38:	2800      	cmp	r0, #0
 800ee3a:	d0cb      	beq.n	800edd4 <__swbuf_r+0x28>
 800ee3c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ee40:	e7ea      	b.n	800ee18 <__swbuf_r+0x6c>
 800ee42:	bf00      	nop
 800ee44:	080101f0 	.word	0x080101f0
 800ee48:	08010210 	.word	0x08010210
 800ee4c:	080101d0 	.word	0x080101d0

0800ee50 <__swsetup_r>:
 800ee50:	4b32      	ldr	r3, [pc, #200]	; (800ef1c <__swsetup_r+0xcc>)
 800ee52:	b570      	push	{r4, r5, r6, lr}
 800ee54:	681d      	ldr	r5, [r3, #0]
 800ee56:	4606      	mov	r6, r0
 800ee58:	460c      	mov	r4, r1
 800ee5a:	b125      	cbz	r5, 800ee66 <__swsetup_r+0x16>
 800ee5c:	69ab      	ldr	r3, [r5, #24]
 800ee5e:	b913      	cbnz	r3, 800ee66 <__swsetup_r+0x16>
 800ee60:	4628      	mov	r0, r5
 800ee62:	f000 f97d 	bl	800f160 <__sinit>
 800ee66:	4b2e      	ldr	r3, [pc, #184]	; (800ef20 <__swsetup_r+0xd0>)
 800ee68:	429c      	cmp	r4, r3
 800ee6a:	d10f      	bne.n	800ee8c <__swsetup_r+0x3c>
 800ee6c:	686c      	ldr	r4, [r5, #4]
 800ee6e:	89a3      	ldrh	r3, [r4, #12]
 800ee70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee74:	0719      	lsls	r1, r3, #28
 800ee76:	d42c      	bmi.n	800eed2 <__swsetup_r+0x82>
 800ee78:	06dd      	lsls	r5, r3, #27
 800ee7a:	d411      	bmi.n	800eea0 <__swsetup_r+0x50>
 800ee7c:	2309      	movs	r3, #9
 800ee7e:	6033      	str	r3, [r6, #0]
 800ee80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee84:	81a3      	strh	r3, [r4, #12]
 800ee86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee8a:	e03e      	b.n	800ef0a <__swsetup_r+0xba>
 800ee8c:	4b25      	ldr	r3, [pc, #148]	; (800ef24 <__swsetup_r+0xd4>)
 800ee8e:	429c      	cmp	r4, r3
 800ee90:	d101      	bne.n	800ee96 <__swsetup_r+0x46>
 800ee92:	68ac      	ldr	r4, [r5, #8]
 800ee94:	e7eb      	b.n	800ee6e <__swsetup_r+0x1e>
 800ee96:	4b24      	ldr	r3, [pc, #144]	; (800ef28 <__swsetup_r+0xd8>)
 800ee98:	429c      	cmp	r4, r3
 800ee9a:	bf08      	it	eq
 800ee9c:	68ec      	ldreq	r4, [r5, #12]
 800ee9e:	e7e6      	b.n	800ee6e <__swsetup_r+0x1e>
 800eea0:	0758      	lsls	r0, r3, #29
 800eea2:	d512      	bpl.n	800eeca <__swsetup_r+0x7a>
 800eea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eea6:	b141      	cbz	r1, 800eeba <__swsetup_r+0x6a>
 800eea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eeac:	4299      	cmp	r1, r3
 800eeae:	d002      	beq.n	800eeb6 <__swsetup_r+0x66>
 800eeb0:	4630      	mov	r0, r6
 800eeb2:	f000 fa59 	bl	800f368 <_free_r>
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	6363      	str	r3, [r4, #52]	; 0x34
 800eeba:	89a3      	ldrh	r3, [r4, #12]
 800eebc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eec0:	81a3      	strh	r3, [r4, #12]
 800eec2:	2300      	movs	r3, #0
 800eec4:	6063      	str	r3, [r4, #4]
 800eec6:	6923      	ldr	r3, [r4, #16]
 800eec8:	6023      	str	r3, [r4, #0]
 800eeca:	89a3      	ldrh	r3, [r4, #12]
 800eecc:	f043 0308 	orr.w	r3, r3, #8
 800eed0:	81a3      	strh	r3, [r4, #12]
 800eed2:	6923      	ldr	r3, [r4, #16]
 800eed4:	b94b      	cbnz	r3, 800eeea <__swsetup_r+0x9a>
 800eed6:	89a3      	ldrh	r3, [r4, #12]
 800eed8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eedc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eee0:	d003      	beq.n	800eeea <__swsetup_r+0x9a>
 800eee2:	4621      	mov	r1, r4
 800eee4:	4630      	mov	r0, r6
 800eee6:	f000 f9ff 	bl	800f2e8 <__smakebuf_r>
 800eeea:	89a0      	ldrh	r0, [r4, #12]
 800eeec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eef0:	f010 0301 	ands.w	r3, r0, #1
 800eef4:	d00a      	beq.n	800ef0c <__swsetup_r+0xbc>
 800eef6:	2300      	movs	r3, #0
 800eef8:	60a3      	str	r3, [r4, #8]
 800eefa:	6963      	ldr	r3, [r4, #20]
 800eefc:	425b      	negs	r3, r3
 800eefe:	61a3      	str	r3, [r4, #24]
 800ef00:	6923      	ldr	r3, [r4, #16]
 800ef02:	b943      	cbnz	r3, 800ef16 <__swsetup_r+0xc6>
 800ef04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef08:	d1ba      	bne.n	800ee80 <__swsetup_r+0x30>
 800ef0a:	bd70      	pop	{r4, r5, r6, pc}
 800ef0c:	0781      	lsls	r1, r0, #30
 800ef0e:	bf58      	it	pl
 800ef10:	6963      	ldrpl	r3, [r4, #20]
 800ef12:	60a3      	str	r3, [r4, #8]
 800ef14:	e7f4      	b.n	800ef00 <__swsetup_r+0xb0>
 800ef16:	2000      	movs	r0, #0
 800ef18:	e7f7      	b.n	800ef0a <__swsetup_r+0xba>
 800ef1a:	bf00      	nop
 800ef1c:	20000018 	.word	0x20000018
 800ef20:	080101f0 	.word	0x080101f0
 800ef24:	08010210 	.word	0x08010210
 800ef28:	080101d0 	.word	0x080101d0

0800ef2c <__sflush_r>:
 800ef2c:	898a      	ldrh	r2, [r1, #12]
 800ef2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef32:	4605      	mov	r5, r0
 800ef34:	0710      	lsls	r0, r2, #28
 800ef36:	460c      	mov	r4, r1
 800ef38:	d458      	bmi.n	800efec <__sflush_r+0xc0>
 800ef3a:	684b      	ldr	r3, [r1, #4]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	dc05      	bgt.n	800ef4c <__sflush_r+0x20>
 800ef40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	dc02      	bgt.n	800ef4c <__sflush_r+0x20>
 800ef46:	2000      	movs	r0, #0
 800ef48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef4e:	2e00      	cmp	r6, #0
 800ef50:	d0f9      	beq.n	800ef46 <__sflush_r+0x1a>
 800ef52:	2300      	movs	r3, #0
 800ef54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ef58:	682f      	ldr	r7, [r5, #0]
 800ef5a:	602b      	str	r3, [r5, #0]
 800ef5c:	d032      	beq.n	800efc4 <__sflush_r+0x98>
 800ef5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef60:	89a3      	ldrh	r3, [r4, #12]
 800ef62:	075a      	lsls	r2, r3, #29
 800ef64:	d505      	bpl.n	800ef72 <__sflush_r+0x46>
 800ef66:	6863      	ldr	r3, [r4, #4]
 800ef68:	1ac0      	subs	r0, r0, r3
 800ef6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef6c:	b10b      	cbz	r3, 800ef72 <__sflush_r+0x46>
 800ef6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef70:	1ac0      	subs	r0, r0, r3
 800ef72:	2300      	movs	r3, #0
 800ef74:	4602      	mov	r2, r0
 800ef76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef78:	6a21      	ldr	r1, [r4, #32]
 800ef7a:	4628      	mov	r0, r5
 800ef7c:	47b0      	blx	r6
 800ef7e:	1c43      	adds	r3, r0, #1
 800ef80:	89a3      	ldrh	r3, [r4, #12]
 800ef82:	d106      	bne.n	800ef92 <__sflush_r+0x66>
 800ef84:	6829      	ldr	r1, [r5, #0]
 800ef86:	291d      	cmp	r1, #29
 800ef88:	d82c      	bhi.n	800efe4 <__sflush_r+0xb8>
 800ef8a:	4a2a      	ldr	r2, [pc, #168]	; (800f034 <__sflush_r+0x108>)
 800ef8c:	40ca      	lsrs	r2, r1
 800ef8e:	07d6      	lsls	r6, r2, #31
 800ef90:	d528      	bpl.n	800efe4 <__sflush_r+0xb8>
 800ef92:	2200      	movs	r2, #0
 800ef94:	6062      	str	r2, [r4, #4]
 800ef96:	04d9      	lsls	r1, r3, #19
 800ef98:	6922      	ldr	r2, [r4, #16]
 800ef9a:	6022      	str	r2, [r4, #0]
 800ef9c:	d504      	bpl.n	800efa8 <__sflush_r+0x7c>
 800ef9e:	1c42      	adds	r2, r0, #1
 800efa0:	d101      	bne.n	800efa6 <__sflush_r+0x7a>
 800efa2:	682b      	ldr	r3, [r5, #0]
 800efa4:	b903      	cbnz	r3, 800efa8 <__sflush_r+0x7c>
 800efa6:	6560      	str	r0, [r4, #84]	; 0x54
 800efa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800efaa:	602f      	str	r7, [r5, #0]
 800efac:	2900      	cmp	r1, #0
 800efae:	d0ca      	beq.n	800ef46 <__sflush_r+0x1a>
 800efb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800efb4:	4299      	cmp	r1, r3
 800efb6:	d002      	beq.n	800efbe <__sflush_r+0x92>
 800efb8:	4628      	mov	r0, r5
 800efba:	f000 f9d5 	bl	800f368 <_free_r>
 800efbe:	2000      	movs	r0, #0
 800efc0:	6360      	str	r0, [r4, #52]	; 0x34
 800efc2:	e7c1      	b.n	800ef48 <__sflush_r+0x1c>
 800efc4:	6a21      	ldr	r1, [r4, #32]
 800efc6:	2301      	movs	r3, #1
 800efc8:	4628      	mov	r0, r5
 800efca:	47b0      	blx	r6
 800efcc:	1c41      	adds	r1, r0, #1
 800efce:	d1c7      	bne.n	800ef60 <__sflush_r+0x34>
 800efd0:	682b      	ldr	r3, [r5, #0]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d0c4      	beq.n	800ef60 <__sflush_r+0x34>
 800efd6:	2b1d      	cmp	r3, #29
 800efd8:	d001      	beq.n	800efde <__sflush_r+0xb2>
 800efda:	2b16      	cmp	r3, #22
 800efdc:	d101      	bne.n	800efe2 <__sflush_r+0xb6>
 800efde:	602f      	str	r7, [r5, #0]
 800efe0:	e7b1      	b.n	800ef46 <__sflush_r+0x1a>
 800efe2:	89a3      	ldrh	r3, [r4, #12]
 800efe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efe8:	81a3      	strh	r3, [r4, #12]
 800efea:	e7ad      	b.n	800ef48 <__sflush_r+0x1c>
 800efec:	690f      	ldr	r7, [r1, #16]
 800efee:	2f00      	cmp	r7, #0
 800eff0:	d0a9      	beq.n	800ef46 <__sflush_r+0x1a>
 800eff2:	0793      	lsls	r3, r2, #30
 800eff4:	680e      	ldr	r6, [r1, #0]
 800eff6:	bf08      	it	eq
 800eff8:	694b      	ldreq	r3, [r1, #20]
 800effa:	600f      	str	r7, [r1, #0]
 800effc:	bf18      	it	ne
 800effe:	2300      	movne	r3, #0
 800f000:	eba6 0807 	sub.w	r8, r6, r7
 800f004:	608b      	str	r3, [r1, #8]
 800f006:	f1b8 0f00 	cmp.w	r8, #0
 800f00a:	dd9c      	ble.n	800ef46 <__sflush_r+0x1a>
 800f00c:	6a21      	ldr	r1, [r4, #32]
 800f00e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f010:	4643      	mov	r3, r8
 800f012:	463a      	mov	r2, r7
 800f014:	4628      	mov	r0, r5
 800f016:	47b0      	blx	r6
 800f018:	2800      	cmp	r0, #0
 800f01a:	dc06      	bgt.n	800f02a <__sflush_r+0xfe>
 800f01c:	89a3      	ldrh	r3, [r4, #12]
 800f01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f022:	81a3      	strh	r3, [r4, #12]
 800f024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f028:	e78e      	b.n	800ef48 <__sflush_r+0x1c>
 800f02a:	4407      	add	r7, r0
 800f02c:	eba8 0800 	sub.w	r8, r8, r0
 800f030:	e7e9      	b.n	800f006 <__sflush_r+0xda>
 800f032:	bf00      	nop
 800f034:	20400001 	.word	0x20400001

0800f038 <_fflush_r>:
 800f038:	b538      	push	{r3, r4, r5, lr}
 800f03a:	690b      	ldr	r3, [r1, #16]
 800f03c:	4605      	mov	r5, r0
 800f03e:	460c      	mov	r4, r1
 800f040:	b913      	cbnz	r3, 800f048 <_fflush_r+0x10>
 800f042:	2500      	movs	r5, #0
 800f044:	4628      	mov	r0, r5
 800f046:	bd38      	pop	{r3, r4, r5, pc}
 800f048:	b118      	cbz	r0, 800f052 <_fflush_r+0x1a>
 800f04a:	6983      	ldr	r3, [r0, #24]
 800f04c:	b90b      	cbnz	r3, 800f052 <_fflush_r+0x1a>
 800f04e:	f000 f887 	bl	800f160 <__sinit>
 800f052:	4b14      	ldr	r3, [pc, #80]	; (800f0a4 <_fflush_r+0x6c>)
 800f054:	429c      	cmp	r4, r3
 800f056:	d11b      	bne.n	800f090 <_fflush_r+0x58>
 800f058:	686c      	ldr	r4, [r5, #4]
 800f05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d0ef      	beq.n	800f042 <_fflush_r+0xa>
 800f062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f064:	07d0      	lsls	r0, r2, #31
 800f066:	d404      	bmi.n	800f072 <_fflush_r+0x3a>
 800f068:	0599      	lsls	r1, r3, #22
 800f06a:	d402      	bmi.n	800f072 <_fflush_r+0x3a>
 800f06c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f06e:	f000 f915 	bl	800f29c <__retarget_lock_acquire_recursive>
 800f072:	4628      	mov	r0, r5
 800f074:	4621      	mov	r1, r4
 800f076:	f7ff ff59 	bl	800ef2c <__sflush_r>
 800f07a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f07c:	07da      	lsls	r2, r3, #31
 800f07e:	4605      	mov	r5, r0
 800f080:	d4e0      	bmi.n	800f044 <_fflush_r+0xc>
 800f082:	89a3      	ldrh	r3, [r4, #12]
 800f084:	059b      	lsls	r3, r3, #22
 800f086:	d4dd      	bmi.n	800f044 <_fflush_r+0xc>
 800f088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f08a:	f000 f908 	bl	800f29e <__retarget_lock_release_recursive>
 800f08e:	e7d9      	b.n	800f044 <_fflush_r+0xc>
 800f090:	4b05      	ldr	r3, [pc, #20]	; (800f0a8 <_fflush_r+0x70>)
 800f092:	429c      	cmp	r4, r3
 800f094:	d101      	bne.n	800f09a <_fflush_r+0x62>
 800f096:	68ac      	ldr	r4, [r5, #8]
 800f098:	e7df      	b.n	800f05a <_fflush_r+0x22>
 800f09a:	4b04      	ldr	r3, [pc, #16]	; (800f0ac <_fflush_r+0x74>)
 800f09c:	429c      	cmp	r4, r3
 800f09e:	bf08      	it	eq
 800f0a0:	68ec      	ldreq	r4, [r5, #12]
 800f0a2:	e7da      	b.n	800f05a <_fflush_r+0x22>
 800f0a4:	080101f0 	.word	0x080101f0
 800f0a8:	08010210 	.word	0x08010210
 800f0ac:	080101d0 	.word	0x080101d0

0800f0b0 <std>:
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	b510      	push	{r4, lr}
 800f0b4:	4604      	mov	r4, r0
 800f0b6:	e9c0 3300 	strd	r3, r3, [r0]
 800f0ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f0be:	6083      	str	r3, [r0, #8]
 800f0c0:	8181      	strh	r1, [r0, #12]
 800f0c2:	6643      	str	r3, [r0, #100]	; 0x64
 800f0c4:	81c2      	strh	r2, [r0, #14]
 800f0c6:	6183      	str	r3, [r0, #24]
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	2208      	movs	r2, #8
 800f0cc:	305c      	adds	r0, #92	; 0x5c
 800f0ce:	f7ff fd49 	bl	800eb64 <memset>
 800f0d2:	4b05      	ldr	r3, [pc, #20]	; (800f0e8 <std+0x38>)
 800f0d4:	6263      	str	r3, [r4, #36]	; 0x24
 800f0d6:	4b05      	ldr	r3, [pc, #20]	; (800f0ec <std+0x3c>)
 800f0d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800f0da:	4b05      	ldr	r3, [pc, #20]	; (800f0f0 <std+0x40>)
 800f0dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f0de:	4b05      	ldr	r3, [pc, #20]	; (800f0f4 <std+0x44>)
 800f0e0:	6224      	str	r4, [r4, #32]
 800f0e2:	6323      	str	r3, [r4, #48]	; 0x30
 800f0e4:	bd10      	pop	{r4, pc}
 800f0e6:	bf00      	nop
 800f0e8:	0800fab9 	.word	0x0800fab9
 800f0ec:	0800fadb 	.word	0x0800fadb
 800f0f0:	0800fb13 	.word	0x0800fb13
 800f0f4:	0800fb37 	.word	0x0800fb37

0800f0f8 <_cleanup_r>:
 800f0f8:	4901      	ldr	r1, [pc, #4]	; (800f100 <_cleanup_r+0x8>)
 800f0fa:	f000 b8af 	b.w	800f25c <_fwalk_reent>
 800f0fe:	bf00      	nop
 800f100:	0800f039 	.word	0x0800f039

0800f104 <__sfmoreglue>:
 800f104:	b570      	push	{r4, r5, r6, lr}
 800f106:	1e4a      	subs	r2, r1, #1
 800f108:	2568      	movs	r5, #104	; 0x68
 800f10a:	4355      	muls	r5, r2
 800f10c:	460e      	mov	r6, r1
 800f10e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f112:	f000 f979 	bl	800f408 <_malloc_r>
 800f116:	4604      	mov	r4, r0
 800f118:	b140      	cbz	r0, 800f12c <__sfmoreglue+0x28>
 800f11a:	2100      	movs	r1, #0
 800f11c:	e9c0 1600 	strd	r1, r6, [r0]
 800f120:	300c      	adds	r0, #12
 800f122:	60a0      	str	r0, [r4, #8]
 800f124:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f128:	f7ff fd1c 	bl	800eb64 <memset>
 800f12c:	4620      	mov	r0, r4
 800f12e:	bd70      	pop	{r4, r5, r6, pc}

0800f130 <__sfp_lock_acquire>:
 800f130:	4801      	ldr	r0, [pc, #4]	; (800f138 <__sfp_lock_acquire+0x8>)
 800f132:	f000 b8b3 	b.w	800f29c <__retarget_lock_acquire_recursive>
 800f136:	bf00      	nop
 800f138:	2000ae74 	.word	0x2000ae74

0800f13c <__sfp_lock_release>:
 800f13c:	4801      	ldr	r0, [pc, #4]	; (800f144 <__sfp_lock_release+0x8>)
 800f13e:	f000 b8ae 	b.w	800f29e <__retarget_lock_release_recursive>
 800f142:	bf00      	nop
 800f144:	2000ae74 	.word	0x2000ae74

0800f148 <__sinit_lock_acquire>:
 800f148:	4801      	ldr	r0, [pc, #4]	; (800f150 <__sinit_lock_acquire+0x8>)
 800f14a:	f000 b8a7 	b.w	800f29c <__retarget_lock_acquire_recursive>
 800f14e:	bf00      	nop
 800f150:	2000ae6f 	.word	0x2000ae6f

0800f154 <__sinit_lock_release>:
 800f154:	4801      	ldr	r0, [pc, #4]	; (800f15c <__sinit_lock_release+0x8>)
 800f156:	f000 b8a2 	b.w	800f29e <__retarget_lock_release_recursive>
 800f15a:	bf00      	nop
 800f15c:	2000ae6f 	.word	0x2000ae6f

0800f160 <__sinit>:
 800f160:	b510      	push	{r4, lr}
 800f162:	4604      	mov	r4, r0
 800f164:	f7ff fff0 	bl	800f148 <__sinit_lock_acquire>
 800f168:	69a3      	ldr	r3, [r4, #24]
 800f16a:	b11b      	cbz	r3, 800f174 <__sinit+0x14>
 800f16c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f170:	f7ff bff0 	b.w	800f154 <__sinit_lock_release>
 800f174:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f178:	6523      	str	r3, [r4, #80]	; 0x50
 800f17a:	4b13      	ldr	r3, [pc, #76]	; (800f1c8 <__sinit+0x68>)
 800f17c:	4a13      	ldr	r2, [pc, #76]	; (800f1cc <__sinit+0x6c>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	62a2      	str	r2, [r4, #40]	; 0x28
 800f182:	42a3      	cmp	r3, r4
 800f184:	bf04      	itt	eq
 800f186:	2301      	moveq	r3, #1
 800f188:	61a3      	streq	r3, [r4, #24]
 800f18a:	4620      	mov	r0, r4
 800f18c:	f000 f820 	bl	800f1d0 <__sfp>
 800f190:	6060      	str	r0, [r4, #4]
 800f192:	4620      	mov	r0, r4
 800f194:	f000 f81c 	bl	800f1d0 <__sfp>
 800f198:	60a0      	str	r0, [r4, #8]
 800f19a:	4620      	mov	r0, r4
 800f19c:	f000 f818 	bl	800f1d0 <__sfp>
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	60e0      	str	r0, [r4, #12]
 800f1a4:	2104      	movs	r1, #4
 800f1a6:	6860      	ldr	r0, [r4, #4]
 800f1a8:	f7ff ff82 	bl	800f0b0 <std>
 800f1ac:	68a0      	ldr	r0, [r4, #8]
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	2109      	movs	r1, #9
 800f1b2:	f7ff ff7d 	bl	800f0b0 <std>
 800f1b6:	68e0      	ldr	r0, [r4, #12]
 800f1b8:	2202      	movs	r2, #2
 800f1ba:	2112      	movs	r1, #18
 800f1bc:	f7ff ff78 	bl	800f0b0 <std>
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	61a3      	str	r3, [r4, #24]
 800f1c4:	e7d2      	b.n	800f16c <__sinit+0xc>
 800f1c6:	bf00      	nop
 800f1c8:	080100c8 	.word	0x080100c8
 800f1cc:	0800f0f9 	.word	0x0800f0f9

0800f1d0 <__sfp>:
 800f1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d2:	4607      	mov	r7, r0
 800f1d4:	f7ff ffac 	bl	800f130 <__sfp_lock_acquire>
 800f1d8:	4b1e      	ldr	r3, [pc, #120]	; (800f254 <__sfp+0x84>)
 800f1da:	681e      	ldr	r6, [r3, #0]
 800f1dc:	69b3      	ldr	r3, [r6, #24]
 800f1de:	b913      	cbnz	r3, 800f1e6 <__sfp+0x16>
 800f1e0:	4630      	mov	r0, r6
 800f1e2:	f7ff ffbd 	bl	800f160 <__sinit>
 800f1e6:	3648      	adds	r6, #72	; 0x48
 800f1e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f1ec:	3b01      	subs	r3, #1
 800f1ee:	d503      	bpl.n	800f1f8 <__sfp+0x28>
 800f1f0:	6833      	ldr	r3, [r6, #0]
 800f1f2:	b30b      	cbz	r3, 800f238 <__sfp+0x68>
 800f1f4:	6836      	ldr	r6, [r6, #0]
 800f1f6:	e7f7      	b.n	800f1e8 <__sfp+0x18>
 800f1f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f1fc:	b9d5      	cbnz	r5, 800f234 <__sfp+0x64>
 800f1fe:	4b16      	ldr	r3, [pc, #88]	; (800f258 <__sfp+0x88>)
 800f200:	60e3      	str	r3, [r4, #12]
 800f202:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f206:	6665      	str	r5, [r4, #100]	; 0x64
 800f208:	f000 f847 	bl	800f29a <__retarget_lock_init_recursive>
 800f20c:	f7ff ff96 	bl	800f13c <__sfp_lock_release>
 800f210:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f214:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f218:	6025      	str	r5, [r4, #0]
 800f21a:	61a5      	str	r5, [r4, #24]
 800f21c:	2208      	movs	r2, #8
 800f21e:	4629      	mov	r1, r5
 800f220:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f224:	f7ff fc9e 	bl	800eb64 <memset>
 800f228:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f22c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f230:	4620      	mov	r0, r4
 800f232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f234:	3468      	adds	r4, #104	; 0x68
 800f236:	e7d9      	b.n	800f1ec <__sfp+0x1c>
 800f238:	2104      	movs	r1, #4
 800f23a:	4638      	mov	r0, r7
 800f23c:	f7ff ff62 	bl	800f104 <__sfmoreglue>
 800f240:	4604      	mov	r4, r0
 800f242:	6030      	str	r0, [r6, #0]
 800f244:	2800      	cmp	r0, #0
 800f246:	d1d5      	bne.n	800f1f4 <__sfp+0x24>
 800f248:	f7ff ff78 	bl	800f13c <__sfp_lock_release>
 800f24c:	230c      	movs	r3, #12
 800f24e:	603b      	str	r3, [r7, #0]
 800f250:	e7ee      	b.n	800f230 <__sfp+0x60>
 800f252:	bf00      	nop
 800f254:	080100c8 	.word	0x080100c8
 800f258:	ffff0001 	.word	0xffff0001

0800f25c <_fwalk_reent>:
 800f25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f260:	4606      	mov	r6, r0
 800f262:	4688      	mov	r8, r1
 800f264:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f268:	2700      	movs	r7, #0
 800f26a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f26e:	f1b9 0901 	subs.w	r9, r9, #1
 800f272:	d505      	bpl.n	800f280 <_fwalk_reent+0x24>
 800f274:	6824      	ldr	r4, [r4, #0]
 800f276:	2c00      	cmp	r4, #0
 800f278:	d1f7      	bne.n	800f26a <_fwalk_reent+0xe>
 800f27a:	4638      	mov	r0, r7
 800f27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f280:	89ab      	ldrh	r3, [r5, #12]
 800f282:	2b01      	cmp	r3, #1
 800f284:	d907      	bls.n	800f296 <_fwalk_reent+0x3a>
 800f286:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f28a:	3301      	adds	r3, #1
 800f28c:	d003      	beq.n	800f296 <_fwalk_reent+0x3a>
 800f28e:	4629      	mov	r1, r5
 800f290:	4630      	mov	r0, r6
 800f292:	47c0      	blx	r8
 800f294:	4307      	orrs	r7, r0
 800f296:	3568      	adds	r5, #104	; 0x68
 800f298:	e7e9      	b.n	800f26e <_fwalk_reent+0x12>

0800f29a <__retarget_lock_init_recursive>:
 800f29a:	4770      	bx	lr

0800f29c <__retarget_lock_acquire_recursive>:
 800f29c:	4770      	bx	lr

0800f29e <__retarget_lock_release_recursive>:
 800f29e:	4770      	bx	lr

0800f2a0 <__swhatbuf_r>:
 800f2a0:	b570      	push	{r4, r5, r6, lr}
 800f2a2:	460e      	mov	r6, r1
 800f2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2a8:	2900      	cmp	r1, #0
 800f2aa:	b096      	sub	sp, #88	; 0x58
 800f2ac:	4614      	mov	r4, r2
 800f2ae:	461d      	mov	r5, r3
 800f2b0:	da07      	bge.n	800f2c2 <__swhatbuf_r+0x22>
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	602b      	str	r3, [r5, #0]
 800f2b6:	89b3      	ldrh	r3, [r6, #12]
 800f2b8:	061a      	lsls	r2, r3, #24
 800f2ba:	d410      	bmi.n	800f2de <__swhatbuf_r+0x3e>
 800f2bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2c0:	e00e      	b.n	800f2e0 <__swhatbuf_r+0x40>
 800f2c2:	466a      	mov	r2, sp
 800f2c4:	f000 fc5e 	bl	800fb84 <_fstat_r>
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	dbf2      	blt.n	800f2b2 <__swhatbuf_r+0x12>
 800f2cc:	9a01      	ldr	r2, [sp, #4]
 800f2ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f2d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f2d6:	425a      	negs	r2, r3
 800f2d8:	415a      	adcs	r2, r3
 800f2da:	602a      	str	r2, [r5, #0]
 800f2dc:	e7ee      	b.n	800f2bc <__swhatbuf_r+0x1c>
 800f2de:	2340      	movs	r3, #64	; 0x40
 800f2e0:	2000      	movs	r0, #0
 800f2e2:	6023      	str	r3, [r4, #0]
 800f2e4:	b016      	add	sp, #88	; 0x58
 800f2e6:	bd70      	pop	{r4, r5, r6, pc}

0800f2e8 <__smakebuf_r>:
 800f2e8:	898b      	ldrh	r3, [r1, #12]
 800f2ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f2ec:	079d      	lsls	r5, r3, #30
 800f2ee:	4606      	mov	r6, r0
 800f2f0:	460c      	mov	r4, r1
 800f2f2:	d507      	bpl.n	800f304 <__smakebuf_r+0x1c>
 800f2f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f2f8:	6023      	str	r3, [r4, #0]
 800f2fa:	6123      	str	r3, [r4, #16]
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	6163      	str	r3, [r4, #20]
 800f300:	b002      	add	sp, #8
 800f302:	bd70      	pop	{r4, r5, r6, pc}
 800f304:	ab01      	add	r3, sp, #4
 800f306:	466a      	mov	r2, sp
 800f308:	f7ff ffca 	bl	800f2a0 <__swhatbuf_r>
 800f30c:	9900      	ldr	r1, [sp, #0]
 800f30e:	4605      	mov	r5, r0
 800f310:	4630      	mov	r0, r6
 800f312:	f000 f879 	bl	800f408 <_malloc_r>
 800f316:	b948      	cbnz	r0, 800f32c <__smakebuf_r+0x44>
 800f318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f31c:	059a      	lsls	r2, r3, #22
 800f31e:	d4ef      	bmi.n	800f300 <__smakebuf_r+0x18>
 800f320:	f023 0303 	bic.w	r3, r3, #3
 800f324:	f043 0302 	orr.w	r3, r3, #2
 800f328:	81a3      	strh	r3, [r4, #12]
 800f32a:	e7e3      	b.n	800f2f4 <__smakebuf_r+0xc>
 800f32c:	4b0d      	ldr	r3, [pc, #52]	; (800f364 <__smakebuf_r+0x7c>)
 800f32e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f330:	89a3      	ldrh	r3, [r4, #12]
 800f332:	6020      	str	r0, [r4, #0]
 800f334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f338:	81a3      	strh	r3, [r4, #12]
 800f33a:	9b00      	ldr	r3, [sp, #0]
 800f33c:	6163      	str	r3, [r4, #20]
 800f33e:	9b01      	ldr	r3, [sp, #4]
 800f340:	6120      	str	r0, [r4, #16]
 800f342:	b15b      	cbz	r3, 800f35c <__smakebuf_r+0x74>
 800f344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f348:	4630      	mov	r0, r6
 800f34a:	f000 fc2d 	bl	800fba8 <_isatty_r>
 800f34e:	b128      	cbz	r0, 800f35c <__smakebuf_r+0x74>
 800f350:	89a3      	ldrh	r3, [r4, #12]
 800f352:	f023 0303 	bic.w	r3, r3, #3
 800f356:	f043 0301 	orr.w	r3, r3, #1
 800f35a:	81a3      	strh	r3, [r4, #12]
 800f35c:	89a0      	ldrh	r0, [r4, #12]
 800f35e:	4305      	orrs	r5, r0
 800f360:	81a5      	strh	r5, [r4, #12]
 800f362:	e7cd      	b.n	800f300 <__smakebuf_r+0x18>
 800f364:	0800f0f9 	.word	0x0800f0f9

0800f368 <_free_r>:
 800f368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f36a:	2900      	cmp	r1, #0
 800f36c:	d048      	beq.n	800f400 <_free_r+0x98>
 800f36e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f372:	9001      	str	r0, [sp, #4]
 800f374:	2b00      	cmp	r3, #0
 800f376:	f1a1 0404 	sub.w	r4, r1, #4
 800f37a:	bfb8      	it	lt
 800f37c:	18e4      	addlt	r4, r4, r3
 800f37e:	f000 fc35 	bl	800fbec <__malloc_lock>
 800f382:	4a20      	ldr	r2, [pc, #128]	; (800f404 <_free_r+0x9c>)
 800f384:	9801      	ldr	r0, [sp, #4]
 800f386:	6813      	ldr	r3, [r2, #0]
 800f388:	4615      	mov	r5, r2
 800f38a:	b933      	cbnz	r3, 800f39a <_free_r+0x32>
 800f38c:	6063      	str	r3, [r4, #4]
 800f38e:	6014      	str	r4, [r2, #0]
 800f390:	b003      	add	sp, #12
 800f392:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f396:	f000 bc2f 	b.w	800fbf8 <__malloc_unlock>
 800f39a:	42a3      	cmp	r3, r4
 800f39c:	d90b      	bls.n	800f3b6 <_free_r+0x4e>
 800f39e:	6821      	ldr	r1, [r4, #0]
 800f3a0:	1862      	adds	r2, r4, r1
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	bf04      	itt	eq
 800f3a6:	681a      	ldreq	r2, [r3, #0]
 800f3a8:	685b      	ldreq	r3, [r3, #4]
 800f3aa:	6063      	str	r3, [r4, #4]
 800f3ac:	bf04      	itt	eq
 800f3ae:	1852      	addeq	r2, r2, r1
 800f3b0:	6022      	streq	r2, [r4, #0]
 800f3b2:	602c      	str	r4, [r5, #0]
 800f3b4:	e7ec      	b.n	800f390 <_free_r+0x28>
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	b10b      	cbz	r3, 800f3c0 <_free_r+0x58>
 800f3bc:	42a3      	cmp	r3, r4
 800f3be:	d9fa      	bls.n	800f3b6 <_free_r+0x4e>
 800f3c0:	6811      	ldr	r1, [r2, #0]
 800f3c2:	1855      	adds	r5, r2, r1
 800f3c4:	42a5      	cmp	r5, r4
 800f3c6:	d10b      	bne.n	800f3e0 <_free_r+0x78>
 800f3c8:	6824      	ldr	r4, [r4, #0]
 800f3ca:	4421      	add	r1, r4
 800f3cc:	1854      	adds	r4, r2, r1
 800f3ce:	42a3      	cmp	r3, r4
 800f3d0:	6011      	str	r1, [r2, #0]
 800f3d2:	d1dd      	bne.n	800f390 <_free_r+0x28>
 800f3d4:	681c      	ldr	r4, [r3, #0]
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	6053      	str	r3, [r2, #4]
 800f3da:	4421      	add	r1, r4
 800f3dc:	6011      	str	r1, [r2, #0]
 800f3de:	e7d7      	b.n	800f390 <_free_r+0x28>
 800f3e0:	d902      	bls.n	800f3e8 <_free_r+0x80>
 800f3e2:	230c      	movs	r3, #12
 800f3e4:	6003      	str	r3, [r0, #0]
 800f3e6:	e7d3      	b.n	800f390 <_free_r+0x28>
 800f3e8:	6825      	ldr	r5, [r4, #0]
 800f3ea:	1961      	adds	r1, r4, r5
 800f3ec:	428b      	cmp	r3, r1
 800f3ee:	bf04      	itt	eq
 800f3f0:	6819      	ldreq	r1, [r3, #0]
 800f3f2:	685b      	ldreq	r3, [r3, #4]
 800f3f4:	6063      	str	r3, [r4, #4]
 800f3f6:	bf04      	itt	eq
 800f3f8:	1949      	addeq	r1, r1, r5
 800f3fa:	6021      	streq	r1, [r4, #0]
 800f3fc:	6054      	str	r4, [r2, #4]
 800f3fe:	e7c7      	b.n	800f390 <_free_r+0x28>
 800f400:	b003      	add	sp, #12
 800f402:	bd30      	pop	{r4, r5, pc}
 800f404:	2000a5ec 	.word	0x2000a5ec

0800f408 <_malloc_r>:
 800f408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f40a:	1ccd      	adds	r5, r1, #3
 800f40c:	f025 0503 	bic.w	r5, r5, #3
 800f410:	3508      	adds	r5, #8
 800f412:	2d0c      	cmp	r5, #12
 800f414:	bf38      	it	cc
 800f416:	250c      	movcc	r5, #12
 800f418:	2d00      	cmp	r5, #0
 800f41a:	4606      	mov	r6, r0
 800f41c:	db01      	blt.n	800f422 <_malloc_r+0x1a>
 800f41e:	42a9      	cmp	r1, r5
 800f420:	d903      	bls.n	800f42a <_malloc_r+0x22>
 800f422:	230c      	movs	r3, #12
 800f424:	6033      	str	r3, [r6, #0]
 800f426:	2000      	movs	r0, #0
 800f428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f42a:	f000 fbdf 	bl	800fbec <__malloc_lock>
 800f42e:	4921      	ldr	r1, [pc, #132]	; (800f4b4 <_malloc_r+0xac>)
 800f430:	680a      	ldr	r2, [r1, #0]
 800f432:	4614      	mov	r4, r2
 800f434:	b99c      	cbnz	r4, 800f45e <_malloc_r+0x56>
 800f436:	4f20      	ldr	r7, [pc, #128]	; (800f4b8 <_malloc_r+0xb0>)
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	b923      	cbnz	r3, 800f446 <_malloc_r+0x3e>
 800f43c:	4621      	mov	r1, r4
 800f43e:	4630      	mov	r0, r6
 800f440:	f000 fb2a 	bl	800fa98 <_sbrk_r>
 800f444:	6038      	str	r0, [r7, #0]
 800f446:	4629      	mov	r1, r5
 800f448:	4630      	mov	r0, r6
 800f44a:	f000 fb25 	bl	800fa98 <_sbrk_r>
 800f44e:	1c43      	adds	r3, r0, #1
 800f450:	d123      	bne.n	800f49a <_malloc_r+0x92>
 800f452:	230c      	movs	r3, #12
 800f454:	6033      	str	r3, [r6, #0]
 800f456:	4630      	mov	r0, r6
 800f458:	f000 fbce 	bl	800fbf8 <__malloc_unlock>
 800f45c:	e7e3      	b.n	800f426 <_malloc_r+0x1e>
 800f45e:	6823      	ldr	r3, [r4, #0]
 800f460:	1b5b      	subs	r3, r3, r5
 800f462:	d417      	bmi.n	800f494 <_malloc_r+0x8c>
 800f464:	2b0b      	cmp	r3, #11
 800f466:	d903      	bls.n	800f470 <_malloc_r+0x68>
 800f468:	6023      	str	r3, [r4, #0]
 800f46a:	441c      	add	r4, r3
 800f46c:	6025      	str	r5, [r4, #0]
 800f46e:	e004      	b.n	800f47a <_malloc_r+0x72>
 800f470:	6863      	ldr	r3, [r4, #4]
 800f472:	42a2      	cmp	r2, r4
 800f474:	bf0c      	ite	eq
 800f476:	600b      	streq	r3, [r1, #0]
 800f478:	6053      	strne	r3, [r2, #4]
 800f47a:	4630      	mov	r0, r6
 800f47c:	f000 fbbc 	bl	800fbf8 <__malloc_unlock>
 800f480:	f104 000b 	add.w	r0, r4, #11
 800f484:	1d23      	adds	r3, r4, #4
 800f486:	f020 0007 	bic.w	r0, r0, #7
 800f48a:	1ac2      	subs	r2, r0, r3
 800f48c:	d0cc      	beq.n	800f428 <_malloc_r+0x20>
 800f48e:	1a1b      	subs	r3, r3, r0
 800f490:	50a3      	str	r3, [r4, r2]
 800f492:	e7c9      	b.n	800f428 <_malloc_r+0x20>
 800f494:	4622      	mov	r2, r4
 800f496:	6864      	ldr	r4, [r4, #4]
 800f498:	e7cc      	b.n	800f434 <_malloc_r+0x2c>
 800f49a:	1cc4      	adds	r4, r0, #3
 800f49c:	f024 0403 	bic.w	r4, r4, #3
 800f4a0:	42a0      	cmp	r0, r4
 800f4a2:	d0e3      	beq.n	800f46c <_malloc_r+0x64>
 800f4a4:	1a21      	subs	r1, r4, r0
 800f4a6:	4630      	mov	r0, r6
 800f4a8:	f000 faf6 	bl	800fa98 <_sbrk_r>
 800f4ac:	3001      	adds	r0, #1
 800f4ae:	d1dd      	bne.n	800f46c <_malloc_r+0x64>
 800f4b0:	e7cf      	b.n	800f452 <_malloc_r+0x4a>
 800f4b2:	bf00      	nop
 800f4b4:	2000a5ec 	.word	0x2000a5ec
 800f4b8:	2000a5f0 	.word	0x2000a5f0

0800f4bc <__sfputc_r>:
 800f4bc:	6893      	ldr	r3, [r2, #8]
 800f4be:	3b01      	subs	r3, #1
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	b410      	push	{r4}
 800f4c4:	6093      	str	r3, [r2, #8]
 800f4c6:	da08      	bge.n	800f4da <__sfputc_r+0x1e>
 800f4c8:	6994      	ldr	r4, [r2, #24]
 800f4ca:	42a3      	cmp	r3, r4
 800f4cc:	db01      	blt.n	800f4d2 <__sfputc_r+0x16>
 800f4ce:	290a      	cmp	r1, #10
 800f4d0:	d103      	bne.n	800f4da <__sfputc_r+0x1e>
 800f4d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4d6:	f7ff bc69 	b.w	800edac <__swbuf_r>
 800f4da:	6813      	ldr	r3, [r2, #0]
 800f4dc:	1c58      	adds	r0, r3, #1
 800f4de:	6010      	str	r0, [r2, #0]
 800f4e0:	7019      	strb	r1, [r3, #0]
 800f4e2:	4608      	mov	r0, r1
 800f4e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4e8:	4770      	bx	lr

0800f4ea <__sfputs_r>:
 800f4ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ec:	4606      	mov	r6, r0
 800f4ee:	460f      	mov	r7, r1
 800f4f0:	4614      	mov	r4, r2
 800f4f2:	18d5      	adds	r5, r2, r3
 800f4f4:	42ac      	cmp	r4, r5
 800f4f6:	d101      	bne.n	800f4fc <__sfputs_r+0x12>
 800f4f8:	2000      	movs	r0, #0
 800f4fa:	e007      	b.n	800f50c <__sfputs_r+0x22>
 800f4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f500:	463a      	mov	r2, r7
 800f502:	4630      	mov	r0, r6
 800f504:	f7ff ffda 	bl	800f4bc <__sfputc_r>
 800f508:	1c43      	adds	r3, r0, #1
 800f50a:	d1f3      	bne.n	800f4f4 <__sfputs_r+0xa>
 800f50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f510 <_vfiprintf_r>:
 800f510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f514:	460d      	mov	r5, r1
 800f516:	b09d      	sub	sp, #116	; 0x74
 800f518:	4614      	mov	r4, r2
 800f51a:	4698      	mov	r8, r3
 800f51c:	4606      	mov	r6, r0
 800f51e:	b118      	cbz	r0, 800f528 <_vfiprintf_r+0x18>
 800f520:	6983      	ldr	r3, [r0, #24]
 800f522:	b90b      	cbnz	r3, 800f528 <_vfiprintf_r+0x18>
 800f524:	f7ff fe1c 	bl	800f160 <__sinit>
 800f528:	4b89      	ldr	r3, [pc, #548]	; (800f750 <_vfiprintf_r+0x240>)
 800f52a:	429d      	cmp	r5, r3
 800f52c:	d11b      	bne.n	800f566 <_vfiprintf_r+0x56>
 800f52e:	6875      	ldr	r5, [r6, #4]
 800f530:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f532:	07d9      	lsls	r1, r3, #31
 800f534:	d405      	bmi.n	800f542 <_vfiprintf_r+0x32>
 800f536:	89ab      	ldrh	r3, [r5, #12]
 800f538:	059a      	lsls	r2, r3, #22
 800f53a:	d402      	bmi.n	800f542 <_vfiprintf_r+0x32>
 800f53c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f53e:	f7ff fead 	bl	800f29c <__retarget_lock_acquire_recursive>
 800f542:	89ab      	ldrh	r3, [r5, #12]
 800f544:	071b      	lsls	r3, r3, #28
 800f546:	d501      	bpl.n	800f54c <_vfiprintf_r+0x3c>
 800f548:	692b      	ldr	r3, [r5, #16]
 800f54a:	b9eb      	cbnz	r3, 800f588 <_vfiprintf_r+0x78>
 800f54c:	4629      	mov	r1, r5
 800f54e:	4630      	mov	r0, r6
 800f550:	f7ff fc7e 	bl	800ee50 <__swsetup_r>
 800f554:	b1c0      	cbz	r0, 800f588 <_vfiprintf_r+0x78>
 800f556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f558:	07dc      	lsls	r4, r3, #31
 800f55a:	d50e      	bpl.n	800f57a <_vfiprintf_r+0x6a>
 800f55c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f560:	b01d      	add	sp, #116	; 0x74
 800f562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f566:	4b7b      	ldr	r3, [pc, #492]	; (800f754 <_vfiprintf_r+0x244>)
 800f568:	429d      	cmp	r5, r3
 800f56a:	d101      	bne.n	800f570 <_vfiprintf_r+0x60>
 800f56c:	68b5      	ldr	r5, [r6, #8]
 800f56e:	e7df      	b.n	800f530 <_vfiprintf_r+0x20>
 800f570:	4b79      	ldr	r3, [pc, #484]	; (800f758 <_vfiprintf_r+0x248>)
 800f572:	429d      	cmp	r5, r3
 800f574:	bf08      	it	eq
 800f576:	68f5      	ldreq	r5, [r6, #12]
 800f578:	e7da      	b.n	800f530 <_vfiprintf_r+0x20>
 800f57a:	89ab      	ldrh	r3, [r5, #12]
 800f57c:	0598      	lsls	r0, r3, #22
 800f57e:	d4ed      	bmi.n	800f55c <_vfiprintf_r+0x4c>
 800f580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f582:	f7ff fe8c 	bl	800f29e <__retarget_lock_release_recursive>
 800f586:	e7e9      	b.n	800f55c <_vfiprintf_r+0x4c>
 800f588:	2300      	movs	r3, #0
 800f58a:	9309      	str	r3, [sp, #36]	; 0x24
 800f58c:	2320      	movs	r3, #32
 800f58e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f592:	f8cd 800c 	str.w	r8, [sp, #12]
 800f596:	2330      	movs	r3, #48	; 0x30
 800f598:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f75c <_vfiprintf_r+0x24c>
 800f59c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5a0:	f04f 0901 	mov.w	r9, #1
 800f5a4:	4623      	mov	r3, r4
 800f5a6:	469a      	mov	sl, r3
 800f5a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5ac:	b10a      	cbz	r2, 800f5b2 <_vfiprintf_r+0xa2>
 800f5ae:	2a25      	cmp	r2, #37	; 0x25
 800f5b0:	d1f9      	bne.n	800f5a6 <_vfiprintf_r+0x96>
 800f5b2:	ebba 0b04 	subs.w	fp, sl, r4
 800f5b6:	d00b      	beq.n	800f5d0 <_vfiprintf_r+0xc0>
 800f5b8:	465b      	mov	r3, fp
 800f5ba:	4622      	mov	r2, r4
 800f5bc:	4629      	mov	r1, r5
 800f5be:	4630      	mov	r0, r6
 800f5c0:	f7ff ff93 	bl	800f4ea <__sfputs_r>
 800f5c4:	3001      	adds	r0, #1
 800f5c6:	f000 80aa 	beq.w	800f71e <_vfiprintf_r+0x20e>
 800f5ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5cc:	445a      	add	r2, fp
 800f5ce:	9209      	str	r2, [sp, #36]	; 0x24
 800f5d0:	f89a 3000 	ldrb.w	r3, [sl]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	f000 80a2 	beq.w	800f71e <_vfiprintf_r+0x20e>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5e4:	f10a 0a01 	add.w	sl, sl, #1
 800f5e8:	9304      	str	r3, [sp, #16]
 800f5ea:	9307      	str	r3, [sp, #28]
 800f5ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5f0:	931a      	str	r3, [sp, #104]	; 0x68
 800f5f2:	4654      	mov	r4, sl
 800f5f4:	2205      	movs	r2, #5
 800f5f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5fa:	4858      	ldr	r0, [pc, #352]	; (800f75c <_vfiprintf_r+0x24c>)
 800f5fc:	f7f0 fdf0 	bl	80001e0 <memchr>
 800f600:	9a04      	ldr	r2, [sp, #16]
 800f602:	b9d8      	cbnz	r0, 800f63c <_vfiprintf_r+0x12c>
 800f604:	06d1      	lsls	r1, r2, #27
 800f606:	bf44      	itt	mi
 800f608:	2320      	movmi	r3, #32
 800f60a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f60e:	0713      	lsls	r3, r2, #28
 800f610:	bf44      	itt	mi
 800f612:	232b      	movmi	r3, #43	; 0x2b
 800f614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f618:	f89a 3000 	ldrb.w	r3, [sl]
 800f61c:	2b2a      	cmp	r3, #42	; 0x2a
 800f61e:	d015      	beq.n	800f64c <_vfiprintf_r+0x13c>
 800f620:	9a07      	ldr	r2, [sp, #28]
 800f622:	4654      	mov	r4, sl
 800f624:	2000      	movs	r0, #0
 800f626:	f04f 0c0a 	mov.w	ip, #10
 800f62a:	4621      	mov	r1, r4
 800f62c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f630:	3b30      	subs	r3, #48	; 0x30
 800f632:	2b09      	cmp	r3, #9
 800f634:	d94e      	bls.n	800f6d4 <_vfiprintf_r+0x1c4>
 800f636:	b1b0      	cbz	r0, 800f666 <_vfiprintf_r+0x156>
 800f638:	9207      	str	r2, [sp, #28]
 800f63a:	e014      	b.n	800f666 <_vfiprintf_r+0x156>
 800f63c:	eba0 0308 	sub.w	r3, r0, r8
 800f640:	fa09 f303 	lsl.w	r3, r9, r3
 800f644:	4313      	orrs	r3, r2
 800f646:	9304      	str	r3, [sp, #16]
 800f648:	46a2      	mov	sl, r4
 800f64a:	e7d2      	b.n	800f5f2 <_vfiprintf_r+0xe2>
 800f64c:	9b03      	ldr	r3, [sp, #12]
 800f64e:	1d19      	adds	r1, r3, #4
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	9103      	str	r1, [sp, #12]
 800f654:	2b00      	cmp	r3, #0
 800f656:	bfbb      	ittet	lt
 800f658:	425b      	neglt	r3, r3
 800f65a:	f042 0202 	orrlt.w	r2, r2, #2
 800f65e:	9307      	strge	r3, [sp, #28]
 800f660:	9307      	strlt	r3, [sp, #28]
 800f662:	bfb8      	it	lt
 800f664:	9204      	strlt	r2, [sp, #16]
 800f666:	7823      	ldrb	r3, [r4, #0]
 800f668:	2b2e      	cmp	r3, #46	; 0x2e
 800f66a:	d10c      	bne.n	800f686 <_vfiprintf_r+0x176>
 800f66c:	7863      	ldrb	r3, [r4, #1]
 800f66e:	2b2a      	cmp	r3, #42	; 0x2a
 800f670:	d135      	bne.n	800f6de <_vfiprintf_r+0x1ce>
 800f672:	9b03      	ldr	r3, [sp, #12]
 800f674:	1d1a      	adds	r2, r3, #4
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	9203      	str	r2, [sp, #12]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	bfb8      	it	lt
 800f67e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f682:	3402      	adds	r4, #2
 800f684:	9305      	str	r3, [sp, #20]
 800f686:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f76c <_vfiprintf_r+0x25c>
 800f68a:	7821      	ldrb	r1, [r4, #0]
 800f68c:	2203      	movs	r2, #3
 800f68e:	4650      	mov	r0, sl
 800f690:	f7f0 fda6 	bl	80001e0 <memchr>
 800f694:	b140      	cbz	r0, 800f6a8 <_vfiprintf_r+0x198>
 800f696:	2340      	movs	r3, #64	; 0x40
 800f698:	eba0 000a 	sub.w	r0, r0, sl
 800f69c:	fa03 f000 	lsl.w	r0, r3, r0
 800f6a0:	9b04      	ldr	r3, [sp, #16]
 800f6a2:	4303      	orrs	r3, r0
 800f6a4:	3401      	adds	r4, #1
 800f6a6:	9304      	str	r3, [sp, #16]
 800f6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6ac:	482c      	ldr	r0, [pc, #176]	; (800f760 <_vfiprintf_r+0x250>)
 800f6ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6b2:	2206      	movs	r2, #6
 800f6b4:	f7f0 fd94 	bl	80001e0 <memchr>
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	d03f      	beq.n	800f73c <_vfiprintf_r+0x22c>
 800f6bc:	4b29      	ldr	r3, [pc, #164]	; (800f764 <_vfiprintf_r+0x254>)
 800f6be:	bb1b      	cbnz	r3, 800f708 <_vfiprintf_r+0x1f8>
 800f6c0:	9b03      	ldr	r3, [sp, #12]
 800f6c2:	3307      	adds	r3, #7
 800f6c4:	f023 0307 	bic.w	r3, r3, #7
 800f6c8:	3308      	adds	r3, #8
 800f6ca:	9303      	str	r3, [sp, #12]
 800f6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6ce:	443b      	add	r3, r7
 800f6d0:	9309      	str	r3, [sp, #36]	; 0x24
 800f6d2:	e767      	b.n	800f5a4 <_vfiprintf_r+0x94>
 800f6d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6d8:	460c      	mov	r4, r1
 800f6da:	2001      	movs	r0, #1
 800f6dc:	e7a5      	b.n	800f62a <_vfiprintf_r+0x11a>
 800f6de:	2300      	movs	r3, #0
 800f6e0:	3401      	adds	r4, #1
 800f6e2:	9305      	str	r3, [sp, #20]
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	f04f 0c0a 	mov.w	ip, #10
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6f0:	3a30      	subs	r2, #48	; 0x30
 800f6f2:	2a09      	cmp	r2, #9
 800f6f4:	d903      	bls.n	800f6fe <_vfiprintf_r+0x1ee>
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d0c5      	beq.n	800f686 <_vfiprintf_r+0x176>
 800f6fa:	9105      	str	r1, [sp, #20]
 800f6fc:	e7c3      	b.n	800f686 <_vfiprintf_r+0x176>
 800f6fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800f702:	4604      	mov	r4, r0
 800f704:	2301      	movs	r3, #1
 800f706:	e7f0      	b.n	800f6ea <_vfiprintf_r+0x1da>
 800f708:	ab03      	add	r3, sp, #12
 800f70a:	9300      	str	r3, [sp, #0]
 800f70c:	462a      	mov	r2, r5
 800f70e:	4b16      	ldr	r3, [pc, #88]	; (800f768 <_vfiprintf_r+0x258>)
 800f710:	a904      	add	r1, sp, #16
 800f712:	4630      	mov	r0, r6
 800f714:	f3af 8000 	nop.w
 800f718:	4607      	mov	r7, r0
 800f71a:	1c78      	adds	r0, r7, #1
 800f71c:	d1d6      	bne.n	800f6cc <_vfiprintf_r+0x1bc>
 800f71e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f720:	07d9      	lsls	r1, r3, #31
 800f722:	d405      	bmi.n	800f730 <_vfiprintf_r+0x220>
 800f724:	89ab      	ldrh	r3, [r5, #12]
 800f726:	059a      	lsls	r2, r3, #22
 800f728:	d402      	bmi.n	800f730 <_vfiprintf_r+0x220>
 800f72a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f72c:	f7ff fdb7 	bl	800f29e <__retarget_lock_release_recursive>
 800f730:	89ab      	ldrh	r3, [r5, #12]
 800f732:	065b      	lsls	r3, r3, #25
 800f734:	f53f af12 	bmi.w	800f55c <_vfiprintf_r+0x4c>
 800f738:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f73a:	e711      	b.n	800f560 <_vfiprintf_r+0x50>
 800f73c:	ab03      	add	r3, sp, #12
 800f73e:	9300      	str	r3, [sp, #0]
 800f740:	462a      	mov	r2, r5
 800f742:	4b09      	ldr	r3, [pc, #36]	; (800f768 <_vfiprintf_r+0x258>)
 800f744:	a904      	add	r1, sp, #16
 800f746:	4630      	mov	r0, r6
 800f748:	f000 f880 	bl	800f84c <_printf_i>
 800f74c:	e7e4      	b.n	800f718 <_vfiprintf_r+0x208>
 800f74e:	bf00      	nop
 800f750:	080101f0 	.word	0x080101f0
 800f754:	08010210 	.word	0x08010210
 800f758:	080101d0 	.word	0x080101d0
 800f75c:	08010230 	.word	0x08010230
 800f760:	0801023a 	.word	0x0801023a
 800f764:	00000000 	.word	0x00000000
 800f768:	0800f4eb 	.word	0x0800f4eb
 800f76c:	08010236 	.word	0x08010236

0800f770 <_printf_common>:
 800f770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f774:	4616      	mov	r6, r2
 800f776:	4699      	mov	r9, r3
 800f778:	688a      	ldr	r2, [r1, #8]
 800f77a:	690b      	ldr	r3, [r1, #16]
 800f77c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f780:	4293      	cmp	r3, r2
 800f782:	bfb8      	it	lt
 800f784:	4613      	movlt	r3, r2
 800f786:	6033      	str	r3, [r6, #0]
 800f788:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f78c:	4607      	mov	r7, r0
 800f78e:	460c      	mov	r4, r1
 800f790:	b10a      	cbz	r2, 800f796 <_printf_common+0x26>
 800f792:	3301      	adds	r3, #1
 800f794:	6033      	str	r3, [r6, #0]
 800f796:	6823      	ldr	r3, [r4, #0]
 800f798:	0699      	lsls	r1, r3, #26
 800f79a:	bf42      	ittt	mi
 800f79c:	6833      	ldrmi	r3, [r6, #0]
 800f79e:	3302      	addmi	r3, #2
 800f7a0:	6033      	strmi	r3, [r6, #0]
 800f7a2:	6825      	ldr	r5, [r4, #0]
 800f7a4:	f015 0506 	ands.w	r5, r5, #6
 800f7a8:	d106      	bne.n	800f7b8 <_printf_common+0x48>
 800f7aa:	f104 0a19 	add.w	sl, r4, #25
 800f7ae:	68e3      	ldr	r3, [r4, #12]
 800f7b0:	6832      	ldr	r2, [r6, #0]
 800f7b2:	1a9b      	subs	r3, r3, r2
 800f7b4:	42ab      	cmp	r3, r5
 800f7b6:	dc26      	bgt.n	800f806 <_printf_common+0x96>
 800f7b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f7bc:	1e13      	subs	r3, r2, #0
 800f7be:	6822      	ldr	r2, [r4, #0]
 800f7c0:	bf18      	it	ne
 800f7c2:	2301      	movne	r3, #1
 800f7c4:	0692      	lsls	r2, r2, #26
 800f7c6:	d42b      	bmi.n	800f820 <_printf_common+0xb0>
 800f7c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f7cc:	4649      	mov	r1, r9
 800f7ce:	4638      	mov	r0, r7
 800f7d0:	47c0      	blx	r8
 800f7d2:	3001      	adds	r0, #1
 800f7d4:	d01e      	beq.n	800f814 <_printf_common+0xa4>
 800f7d6:	6823      	ldr	r3, [r4, #0]
 800f7d8:	68e5      	ldr	r5, [r4, #12]
 800f7da:	6832      	ldr	r2, [r6, #0]
 800f7dc:	f003 0306 	and.w	r3, r3, #6
 800f7e0:	2b04      	cmp	r3, #4
 800f7e2:	bf08      	it	eq
 800f7e4:	1aad      	subeq	r5, r5, r2
 800f7e6:	68a3      	ldr	r3, [r4, #8]
 800f7e8:	6922      	ldr	r2, [r4, #16]
 800f7ea:	bf0c      	ite	eq
 800f7ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f7f0:	2500      	movne	r5, #0
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	bfc4      	itt	gt
 800f7f6:	1a9b      	subgt	r3, r3, r2
 800f7f8:	18ed      	addgt	r5, r5, r3
 800f7fa:	2600      	movs	r6, #0
 800f7fc:	341a      	adds	r4, #26
 800f7fe:	42b5      	cmp	r5, r6
 800f800:	d11a      	bne.n	800f838 <_printf_common+0xc8>
 800f802:	2000      	movs	r0, #0
 800f804:	e008      	b.n	800f818 <_printf_common+0xa8>
 800f806:	2301      	movs	r3, #1
 800f808:	4652      	mov	r2, sl
 800f80a:	4649      	mov	r1, r9
 800f80c:	4638      	mov	r0, r7
 800f80e:	47c0      	blx	r8
 800f810:	3001      	adds	r0, #1
 800f812:	d103      	bne.n	800f81c <_printf_common+0xac>
 800f814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f81c:	3501      	adds	r5, #1
 800f81e:	e7c6      	b.n	800f7ae <_printf_common+0x3e>
 800f820:	18e1      	adds	r1, r4, r3
 800f822:	1c5a      	adds	r2, r3, #1
 800f824:	2030      	movs	r0, #48	; 0x30
 800f826:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f82a:	4422      	add	r2, r4
 800f82c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f830:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f834:	3302      	adds	r3, #2
 800f836:	e7c7      	b.n	800f7c8 <_printf_common+0x58>
 800f838:	2301      	movs	r3, #1
 800f83a:	4622      	mov	r2, r4
 800f83c:	4649      	mov	r1, r9
 800f83e:	4638      	mov	r0, r7
 800f840:	47c0      	blx	r8
 800f842:	3001      	adds	r0, #1
 800f844:	d0e6      	beq.n	800f814 <_printf_common+0xa4>
 800f846:	3601      	adds	r6, #1
 800f848:	e7d9      	b.n	800f7fe <_printf_common+0x8e>
	...

0800f84c <_printf_i>:
 800f84c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f850:	460c      	mov	r4, r1
 800f852:	4691      	mov	r9, r2
 800f854:	7e27      	ldrb	r7, [r4, #24]
 800f856:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f858:	2f78      	cmp	r7, #120	; 0x78
 800f85a:	4680      	mov	r8, r0
 800f85c:	469a      	mov	sl, r3
 800f85e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f862:	d807      	bhi.n	800f874 <_printf_i+0x28>
 800f864:	2f62      	cmp	r7, #98	; 0x62
 800f866:	d80a      	bhi.n	800f87e <_printf_i+0x32>
 800f868:	2f00      	cmp	r7, #0
 800f86a:	f000 80d8 	beq.w	800fa1e <_printf_i+0x1d2>
 800f86e:	2f58      	cmp	r7, #88	; 0x58
 800f870:	f000 80a3 	beq.w	800f9ba <_printf_i+0x16e>
 800f874:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f878:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f87c:	e03a      	b.n	800f8f4 <_printf_i+0xa8>
 800f87e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f882:	2b15      	cmp	r3, #21
 800f884:	d8f6      	bhi.n	800f874 <_printf_i+0x28>
 800f886:	a001      	add	r0, pc, #4	; (adr r0, 800f88c <_printf_i+0x40>)
 800f888:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f88c:	0800f8e5 	.word	0x0800f8e5
 800f890:	0800f8f9 	.word	0x0800f8f9
 800f894:	0800f875 	.word	0x0800f875
 800f898:	0800f875 	.word	0x0800f875
 800f89c:	0800f875 	.word	0x0800f875
 800f8a0:	0800f875 	.word	0x0800f875
 800f8a4:	0800f8f9 	.word	0x0800f8f9
 800f8a8:	0800f875 	.word	0x0800f875
 800f8ac:	0800f875 	.word	0x0800f875
 800f8b0:	0800f875 	.word	0x0800f875
 800f8b4:	0800f875 	.word	0x0800f875
 800f8b8:	0800fa05 	.word	0x0800fa05
 800f8bc:	0800f929 	.word	0x0800f929
 800f8c0:	0800f9e7 	.word	0x0800f9e7
 800f8c4:	0800f875 	.word	0x0800f875
 800f8c8:	0800f875 	.word	0x0800f875
 800f8cc:	0800fa27 	.word	0x0800fa27
 800f8d0:	0800f875 	.word	0x0800f875
 800f8d4:	0800f929 	.word	0x0800f929
 800f8d8:	0800f875 	.word	0x0800f875
 800f8dc:	0800f875 	.word	0x0800f875
 800f8e0:	0800f9ef 	.word	0x0800f9ef
 800f8e4:	680b      	ldr	r3, [r1, #0]
 800f8e6:	1d1a      	adds	r2, r3, #4
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	600a      	str	r2, [r1, #0]
 800f8ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f8f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	e0a3      	b.n	800fa40 <_printf_i+0x1f4>
 800f8f8:	6825      	ldr	r5, [r4, #0]
 800f8fa:	6808      	ldr	r0, [r1, #0]
 800f8fc:	062e      	lsls	r6, r5, #24
 800f8fe:	f100 0304 	add.w	r3, r0, #4
 800f902:	d50a      	bpl.n	800f91a <_printf_i+0xce>
 800f904:	6805      	ldr	r5, [r0, #0]
 800f906:	600b      	str	r3, [r1, #0]
 800f908:	2d00      	cmp	r5, #0
 800f90a:	da03      	bge.n	800f914 <_printf_i+0xc8>
 800f90c:	232d      	movs	r3, #45	; 0x2d
 800f90e:	426d      	negs	r5, r5
 800f910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f914:	485e      	ldr	r0, [pc, #376]	; (800fa90 <_printf_i+0x244>)
 800f916:	230a      	movs	r3, #10
 800f918:	e019      	b.n	800f94e <_printf_i+0x102>
 800f91a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f91e:	6805      	ldr	r5, [r0, #0]
 800f920:	600b      	str	r3, [r1, #0]
 800f922:	bf18      	it	ne
 800f924:	b22d      	sxthne	r5, r5
 800f926:	e7ef      	b.n	800f908 <_printf_i+0xbc>
 800f928:	680b      	ldr	r3, [r1, #0]
 800f92a:	6825      	ldr	r5, [r4, #0]
 800f92c:	1d18      	adds	r0, r3, #4
 800f92e:	6008      	str	r0, [r1, #0]
 800f930:	0628      	lsls	r0, r5, #24
 800f932:	d501      	bpl.n	800f938 <_printf_i+0xec>
 800f934:	681d      	ldr	r5, [r3, #0]
 800f936:	e002      	b.n	800f93e <_printf_i+0xf2>
 800f938:	0669      	lsls	r1, r5, #25
 800f93a:	d5fb      	bpl.n	800f934 <_printf_i+0xe8>
 800f93c:	881d      	ldrh	r5, [r3, #0]
 800f93e:	4854      	ldr	r0, [pc, #336]	; (800fa90 <_printf_i+0x244>)
 800f940:	2f6f      	cmp	r7, #111	; 0x6f
 800f942:	bf0c      	ite	eq
 800f944:	2308      	moveq	r3, #8
 800f946:	230a      	movne	r3, #10
 800f948:	2100      	movs	r1, #0
 800f94a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f94e:	6866      	ldr	r6, [r4, #4]
 800f950:	60a6      	str	r6, [r4, #8]
 800f952:	2e00      	cmp	r6, #0
 800f954:	bfa2      	ittt	ge
 800f956:	6821      	ldrge	r1, [r4, #0]
 800f958:	f021 0104 	bicge.w	r1, r1, #4
 800f95c:	6021      	strge	r1, [r4, #0]
 800f95e:	b90d      	cbnz	r5, 800f964 <_printf_i+0x118>
 800f960:	2e00      	cmp	r6, #0
 800f962:	d04d      	beq.n	800fa00 <_printf_i+0x1b4>
 800f964:	4616      	mov	r6, r2
 800f966:	fbb5 f1f3 	udiv	r1, r5, r3
 800f96a:	fb03 5711 	mls	r7, r3, r1, r5
 800f96e:	5dc7      	ldrb	r7, [r0, r7]
 800f970:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f974:	462f      	mov	r7, r5
 800f976:	42bb      	cmp	r3, r7
 800f978:	460d      	mov	r5, r1
 800f97a:	d9f4      	bls.n	800f966 <_printf_i+0x11a>
 800f97c:	2b08      	cmp	r3, #8
 800f97e:	d10b      	bne.n	800f998 <_printf_i+0x14c>
 800f980:	6823      	ldr	r3, [r4, #0]
 800f982:	07df      	lsls	r7, r3, #31
 800f984:	d508      	bpl.n	800f998 <_printf_i+0x14c>
 800f986:	6923      	ldr	r3, [r4, #16]
 800f988:	6861      	ldr	r1, [r4, #4]
 800f98a:	4299      	cmp	r1, r3
 800f98c:	bfde      	ittt	le
 800f98e:	2330      	movle	r3, #48	; 0x30
 800f990:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f994:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800f998:	1b92      	subs	r2, r2, r6
 800f99a:	6122      	str	r2, [r4, #16]
 800f99c:	f8cd a000 	str.w	sl, [sp]
 800f9a0:	464b      	mov	r3, r9
 800f9a2:	aa03      	add	r2, sp, #12
 800f9a4:	4621      	mov	r1, r4
 800f9a6:	4640      	mov	r0, r8
 800f9a8:	f7ff fee2 	bl	800f770 <_printf_common>
 800f9ac:	3001      	adds	r0, #1
 800f9ae:	d14c      	bne.n	800fa4a <_printf_i+0x1fe>
 800f9b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9b4:	b004      	add	sp, #16
 800f9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9ba:	4835      	ldr	r0, [pc, #212]	; (800fa90 <_printf_i+0x244>)
 800f9bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f9c0:	6823      	ldr	r3, [r4, #0]
 800f9c2:	680e      	ldr	r6, [r1, #0]
 800f9c4:	061f      	lsls	r7, r3, #24
 800f9c6:	f856 5b04 	ldr.w	r5, [r6], #4
 800f9ca:	600e      	str	r6, [r1, #0]
 800f9cc:	d514      	bpl.n	800f9f8 <_printf_i+0x1ac>
 800f9ce:	07d9      	lsls	r1, r3, #31
 800f9d0:	bf44      	itt	mi
 800f9d2:	f043 0320 	orrmi.w	r3, r3, #32
 800f9d6:	6023      	strmi	r3, [r4, #0]
 800f9d8:	b91d      	cbnz	r5, 800f9e2 <_printf_i+0x196>
 800f9da:	6823      	ldr	r3, [r4, #0]
 800f9dc:	f023 0320 	bic.w	r3, r3, #32
 800f9e0:	6023      	str	r3, [r4, #0]
 800f9e2:	2310      	movs	r3, #16
 800f9e4:	e7b0      	b.n	800f948 <_printf_i+0xfc>
 800f9e6:	6823      	ldr	r3, [r4, #0]
 800f9e8:	f043 0320 	orr.w	r3, r3, #32
 800f9ec:	6023      	str	r3, [r4, #0]
 800f9ee:	2378      	movs	r3, #120	; 0x78
 800f9f0:	4828      	ldr	r0, [pc, #160]	; (800fa94 <_printf_i+0x248>)
 800f9f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f9f6:	e7e3      	b.n	800f9c0 <_printf_i+0x174>
 800f9f8:	065e      	lsls	r6, r3, #25
 800f9fa:	bf48      	it	mi
 800f9fc:	b2ad      	uxthmi	r5, r5
 800f9fe:	e7e6      	b.n	800f9ce <_printf_i+0x182>
 800fa00:	4616      	mov	r6, r2
 800fa02:	e7bb      	b.n	800f97c <_printf_i+0x130>
 800fa04:	680b      	ldr	r3, [r1, #0]
 800fa06:	6826      	ldr	r6, [r4, #0]
 800fa08:	6960      	ldr	r0, [r4, #20]
 800fa0a:	1d1d      	adds	r5, r3, #4
 800fa0c:	600d      	str	r5, [r1, #0]
 800fa0e:	0635      	lsls	r5, r6, #24
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	d501      	bpl.n	800fa18 <_printf_i+0x1cc>
 800fa14:	6018      	str	r0, [r3, #0]
 800fa16:	e002      	b.n	800fa1e <_printf_i+0x1d2>
 800fa18:	0671      	lsls	r1, r6, #25
 800fa1a:	d5fb      	bpl.n	800fa14 <_printf_i+0x1c8>
 800fa1c:	8018      	strh	r0, [r3, #0]
 800fa1e:	2300      	movs	r3, #0
 800fa20:	6123      	str	r3, [r4, #16]
 800fa22:	4616      	mov	r6, r2
 800fa24:	e7ba      	b.n	800f99c <_printf_i+0x150>
 800fa26:	680b      	ldr	r3, [r1, #0]
 800fa28:	1d1a      	adds	r2, r3, #4
 800fa2a:	600a      	str	r2, [r1, #0]
 800fa2c:	681e      	ldr	r6, [r3, #0]
 800fa2e:	6862      	ldr	r2, [r4, #4]
 800fa30:	2100      	movs	r1, #0
 800fa32:	4630      	mov	r0, r6
 800fa34:	f7f0 fbd4 	bl	80001e0 <memchr>
 800fa38:	b108      	cbz	r0, 800fa3e <_printf_i+0x1f2>
 800fa3a:	1b80      	subs	r0, r0, r6
 800fa3c:	6060      	str	r0, [r4, #4]
 800fa3e:	6863      	ldr	r3, [r4, #4]
 800fa40:	6123      	str	r3, [r4, #16]
 800fa42:	2300      	movs	r3, #0
 800fa44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa48:	e7a8      	b.n	800f99c <_printf_i+0x150>
 800fa4a:	6923      	ldr	r3, [r4, #16]
 800fa4c:	4632      	mov	r2, r6
 800fa4e:	4649      	mov	r1, r9
 800fa50:	4640      	mov	r0, r8
 800fa52:	47d0      	blx	sl
 800fa54:	3001      	adds	r0, #1
 800fa56:	d0ab      	beq.n	800f9b0 <_printf_i+0x164>
 800fa58:	6823      	ldr	r3, [r4, #0]
 800fa5a:	079b      	lsls	r3, r3, #30
 800fa5c:	d413      	bmi.n	800fa86 <_printf_i+0x23a>
 800fa5e:	68e0      	ldr	r0, [r4, #12]
 800fa60:	9b03      	ldr	r3, [sp, #12]
 800fa62:	4298      	cmp	r0, r3
 800fa64:	bfb8      	it	lt
 800fa66:	4618      	movlt	r0, r3
 800fa68:	e7a4      	b.n	800f9b4 <_printf_i+0x168>
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	4632      	mov	r2, r6
 800fa6e:	4649      	mov	r1, r9
 800fa70:	4640      	mov	r0, r8
 800fa72:	47d0      	blx	sl
 800fa74:	3001      	adds	r0, #1
 800fa76:	d09b      	beq.n	800f9b0 <_printf_i+0x164>
 800fa78:	3501      	adds	r5, #1
 800fa7a:	68e3      	ldr	r3, [r4, #12]
 800fa7c:	9903      	ldr	r1, [sp, #12]
 800fa7e:	1a5b      	subs	r3, r3, r1
 800fa80:	42ab      	cmp	r3, r5
 800fa82:	dcf2      	bgt.n	800fa6a <_printf_i+0x21e>
 800fa84:	e7eb      	b.n	800fa5e <_printf_i+0x212>
 800fa86:	2500      	movs	r5, #0
 800fa88:	f104 0619 	add.w	r6, r4, #25
 800fa8c:	e7f5      	b.n	800fa7a <_printf_i+0x22e>
 800fa8e:	bf00      	nop
 800fa90:	08010241 	.word	0x08010241
 800fa94:	08010252 	.word	0x08010252

0800fa98 <_sbrk_r>:
 800fa98:	b538      	push	{r3, r4, r5, lr}
 800fa9a:	4d06      	ldr	r5, [pc, #24]	; (800fab4 <_sbrk_r+0x1c>)
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	4604      	mov	r4, r0
 800faa0:	4608      	mov	r0, r1
 800faa2:	602b      	str	r3, [r5, #0]
 800faa4:	f7f4 f98e 	bl	8003dc4 <_sbrk>
 800faa8:	1c43      	adds	r3, r0, #1
 800faaa:	d102      	bne.n	800fab2 <_sbrk_r+0x1a>
 800faac:	682b      	ldr	r3, [r5, #0]
 800faae:	b103      	cbz	r3, 800fab2 <_sbrk_r+0x1a>
 800fab0:	6023      	str	r3, [r4, #0]
 800fab2:	bd38      	pop	{r3, r4, r5, pc}
 800fab4:	2000ae78 	.word	0x2000ae78

0800fab8 <__sread>:
 800fab8:	b510      	push	{r4, lr}
 800faba:	460c      	mov	r4, r1
 800fabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fac0:	f000 f8a0 	bl	800fc04 <_read_r>
 800fac4:	2800      	cmp	r0, #0
 800fac6:	bfab      	itete	ge
 800fac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800faca:	89a3      	ldrhlt	r3, [r4, #12]
 800facc:	181b      	addge	r3, r3, r0
 800face:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fad2:	bfac      	ite	ge
 800fad4:	6563      	strge	r3, [r4, #84]	; 0x54
 800fad6:	81a3      	strhlt	r3, [r4, #12]
 800fad8:	bd10      	pop	{r4, pc}

0800fada <__swrite>:
 800fada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fade:	461f      	mov	r7, r3
 800fae0:	898b      	ldrh	r3, [r1, #12]
 800fae2:	05db      	lsls	r3, r3, #23
 800fae4:	4605      	mov	r5, r0
 800fae6:	460c      	mov	r4, r1
 800fae8:	4616      	mov	r6, r2
 800faea:	d505      	bpl.n	800faf8 <__swrite+0x1e>
 800faec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faf0:	2302      	movs	r3, #2
 800faf2:	2200      	movs	r2, #0
 800faf4:	f000 f868 	bl	800fbc8 <_lseek_r>
 800faf8:	89a3      	ldrh	r3, [r4, #12]
 800fafa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fafe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb02:	81a3      	strh	r3, [r4, #12]
 800fb04:	4632      	mov	r2, r6
 800fb06:	463b      	mov	r3, r7
 800fb08:	4628      	mov	r0, r5
 800fb0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb0e:	f000 b817 	b.w	800fb40 <_write_r>

0800fb12 <__sseek>:
 800fb12:	b510      	push	{r4, lr}
 800fb14:	460c      	mov	r4, r1
 800fb16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb1a:	f000 f855 	bl	800fbc8 <_lseek_r>
 800fb1e:	1c43      	adds	r3, r0, #1
 800fb20:	89a3      	ldrh	r3, [r4, #12]
 800fb22:	bf15      	itete	ne
 800fb24:	6560      	strne	r0, [r4, #84]	; 0x54
 800fb26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fb2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fb2e:	81a3      	strheq	r3, [r4, #12]
 800fb30:	bf18      	it	ne
 800fb32:	81a3      	strhne	r3, [r4, #12]
 800fb34:	bd10      	pop	{r4, pc}

0800fb36 <__sclose>:
 800fb36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb3a:	f000 b813 	b.w	800fb64 <_close_r>
	...

0800fb40 <_write_r>:
 800fb40:	b538      	push	{r3, r4, r5, lr}
 800fb42:	4d07      	ldr	r5, [pc, #28]	; (800fb60 <_write_r+0x20>)
 800fb44:	4604      	mov	r4, r0
 800fb46:	4608      	mov	r0, r1
 800fb48:	4611      	mov	r1, r2
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	602a      	str	r2, [r5, #0]
 800fb4e:	461a      	mov	r2, r3
 800fb50:	f7f3 fd9e 	bl	8003690 <_write>
 800fb54:	1c43      	adds	r3, r0, #1
 800fb56:	d102      	bne.n	800fb5e <_write_r+0x1e>
 800fb58:	682b      	ldr	r3, [r5, #0]
 800fb5a:	b103      	cbz	r3, 800fb5e <_write_r+0x1e>
 800fb5c:	6023      	str	r3, [r4, #0]
 800fb5e:	bd38      	pop	{r3, r4, r5, pc}
 800fb60:	2000ae78 	.word	0x2000ae78

0800fb64 <_close_r>:
 800fb64:	b538      	push	{r3, r4, r5, lr}
 800fb66:	4d06      	ldr	r5, [pc, #24]	; (800fb80 <_close_r+0x1c>)
 800fb68:	2300      	movs	r3, #0
 800fb6a:	4604      	mov	r4, r0
 800fb6c:	4608      	mov	r0, r1
 800fb6e:	602b      	str	r3, [r5, #0]
 800fb70:	f7f4 f8f3 	bl	8003d5a <_close>
 800fb74:	1c43      	adds	r3, r0, #1
 800fb76:	d102      	bne.n	800fb7e <_close_r+0x1a>
 800fb78:	682b      	ldr	r3, [r5, #0]
 800fb7a:	b103      	cbz	r3, 800fb7e <_close_r+0x1a>
 800fb7c:	6023      	str	r3, [r4, #0]
 800fb7e:	bd38      	pop	{r3, r4, r5, pc}
 800fb80:	2000ae78 	.word	0x2000ae78

0800fb84 <_fstat_r>:
 800fb84:	b538      	push	{r3, r4, r5, lr}
 800fb86:	4d07      	ldr	r5, [pc, #28]	; (800fba4 <_fstat_r+0x20>)
 800fb88:	2300      	movs	r3, #0
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	4608      	mov	r0, r1
 800fb8e:	4611      	mov	r1, r2
 800fb90:	602b      	str	r3, [r5, #0]
 800fb92:	f7f4 f8ee 	bl	8003d72 <_fstat>
 800fb96:	1c43      	adds	r3, r0, #1
 800fb98:	d102      	bne.n	800fba0 <_fstat_r+0x1c>
 800fb9a:	682b      	ldr	r3, [r5, #0]
 800fb9c:	b103      	cbz	r3, 800fba0 <_fstat_r+0x1c>
 800fb9e:	6023      	str	r3, [r4, #0]
 800fba0:	bd38      	pop	{r3, r4, r5, pc}
 800fba2:	bf00      	nop
 800fba4:	2000ae78 	.word	0x2000ae78

0800fba8 <_isatty_r>:
 800fba8:	b538      	push	{r3, r4, r5, lr}
 800fbaa:	4d06      	ldr	r5, [pc, #24]	; (800fbc4 <_isatty_r+0x1c>)
 800fbac:	2300      	movs	r3, #0
 800fbae:	4604      	mov	r4, r0
 800fbb0:	4608      	mov	r0, r1
 800fbb2:	602b      	str	r3, [r5, #0]
 800fbb4:	f7f4 f8ed 	bl	8003d92 <_isatty>
 800fbb8:	1c43      	adds	r3, r0, #1
 800fbba:	d102      	bne.n	800fbc2 <_isatty_r+0x1a>
 800fbbc:	682b      	ldr	r3, [r5, #0]
 800fbbe:	b103      	cbz	r3, 800fbc2 <_isatty_r+0x1a>
 800fbc0:	6023      	str	r3, [r4, #0]
 800fbc2:	bd38      	pop	{r3, r4, r5, pc}
 800fbc4:	2000ae78 	.word	0x2000ae78

0800fbc8 <_lseek_r>:
 800fbc8:	b538      	push	{r3, r4, r5, lr}
 800fbca:	4d07      	ldr	r5, [pc, #28]	; (800fbe8 <_lseek_r+0x20>)
 800fbcc:	4604      	mov	r4, r0
 800fbce:	4608      	mov	r0, r1
 800fbd0:	4611      	mov	r1, r2
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	602a      	str	r2, [r5, #0]
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	f7f4 f8e6 	bl	8003da8 <_lseek>
 800fbdc:	1c43      	adds	r3, r0, #1
 800fbde:	d102      	bne.n	800fbe6 <_lseek_r+0x1e>
 800fbe0:	682b      	ldr	r3, [r5, #0]
 800fbe2:	b103      	cbz	r3, 800fbe6 <_lseek_r+0x1e>
 800fbe4:	6023      	str	r3, [r4, #0]
 800fbe6:	bd38      	pop	{r3, r4, r5, pc}
 800fbe8:	2000ae78 	.word	0x2000ae78

0800fbec <__malloc_lock>:
 800fbec:	4801      	ldr	r0, [pc, #4]	; (800fbf4 <__malloc_lock+0x8>)
 800fbee:	f7ff bb55 	b.w	800f29c <__retarget_lock_acquire_recursive>
 800fbf2:	bf00      	nop
 800fbf4:	2000ae70 	.word	0x2000ae70

0800fbf8 <__malloc_unlock>:
 800fbf8:	4801      	ldr	r0, [pc, #4]	; (800fc00 <__malloc_unlock+0x8>)
 800fbfa:	f7ff bb50 	b.w	800f29e <__retarget_lock_release_recursive>
 800fbfe:	bf00      	nop
 800fc00:	2000ae70 	.word	0x2000ae70

0800fc04 <_read_r>:
 800fc04:	b538      	push	{r3, r4, r5, lr}
 800fc06:	4d07      	ldr	r5, [pc, #28]	; (800fc24 <_read_r+0x20>)
 800fc08:	4604      	mov	r4, r0
 800fc0a:	4608      	mov	r0, r1
 800fc0c:	4611      	mov	r1, r2
 800fc0e:	2200      	movs	r2, #0
 800fc10:	602a      	str	r2, [r5, #0]
 800fc12:	461a      	mov	r2, r3
 800fc14:	f7f4 f884 	bl	8003d20 <_read>
 800fc18:	1c43      	adds	r3, r0, #1
 800fc1a:	d102      	bne.n	800fc22 <_read_r+0x1e>
 800fc1c:	682b      	ldr	r3, [r5, #0]
 800fc1e:	b103      	cbz	r3, 800fc22 <_read_r+0x1e>
 800fc20:	6023      	str	r3, [r4, #0]
 800fc22:	bd38      	pop	{r3, r4, r5, pc}
 800fc24:	2000ae78 	.word	0x2000ae78

0800fc28 <sqrt>:
 800fc28:	b538      	push	{r3, r4, r5, lr}
 800fc2a:	ed2d 8b02 	vpush	{d8}
 800fc2e:	ec55 4b10 	vmov	r4, r5, d0
 800fc32:	f000 f82d 	bl	800fc90 <__ieee754_sqrt>
 800fc36:	4b15      	ldr	r3, [pc, #84]	; (800fc8c <sqrt+0x64>)
 800fc38:	eeb0 8a40 	vmov.f32	s16, s0
 800fc3c:	eef0 8a60 	vmov.f32	s17, s1
 800fc40:	f993 3000 	ldrsb.w	r3, [r3]
 800fc44:	3301      	adds	r3, #1
 800fc46:	d019      	beq.n	800fc7c <sqrt+0x54>
 800fc48:	4622      	mov	r2, r4
 800fc4a:	462b      	mov	r3, r5
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	4629      	mov	r1, r5
 800fc50:	f7f0 ff6c 	bl	8000b2c <__aeabi_dcmpun>
 800fc54:	b990      	cbnz	r0, 800fc7c <sqrt+0x54>
 800fc56:	2200      	movs	r2, #0
 800fc58:	2300      	movs	r3, #0
 800fc5a:	4620      	mov	r0, r4
 800fc5c:	4629      	mov	r1, r5
 800fc5e:	f7f0 ff3d 	bl	8000adc <__aeabi_dcmplt>
 800fc62:	b158      	cbz	r0, 800fc7c <sqrt+0x54>
 800fc64:	f7fe ff46 	bl	800eaf4 <__errno>
 800fc68:	2321      	movs	r3, #33	; 0x21
 800fc6a:	6003      	str	r3, [r0, #0]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	2300      	movs	r3, #0
 800fc70:	4610      	mov	r0, r2
 800fc72:	4619      	mov	r1, r3
 800fc74:	f7f0 fdea 	bl	800084c <__aeabi_ddiv>
 800fc78:	ec41 0b18 	vmov	d8, r0, r1
 800fc7c:	eeb0 0a48 	vmov.f32	s0, s16
 800fc80:	eef0 0a68 	vmov.f32	s1, s17
 800fc84:	ecbd 8b02 	vpop	{d8}
 800fc88:	bd38      	pop	{r3, r4, r5, pc}
 800fc8a:	bf00      	nop
 800fc8c:	2000007c 	.word	0x2000007c

0800fc90 <__ieee754_sqrt>:
 800fc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc94:	ec55 4b10 	vmov	r4, r5, d0
 800fc98:	4e56      	ldr	r6, [pc, #344]	; (800fdf4 <__ieee754_sqrt+0x164>)
 800fc9a:	43ae      	bics	r6, r5
 800fc9c:	ee10 0a10 	vmov	r0, s0
 800fca0:	ee10 3a10 	vmov	r3, s0
 800fca4:	4629      	mov	r1, r5
 800fca6:	462a      	mov	r2, r5
 800fca8:	d110      	bne.n	800fccc <__ieee754_sqrt+0x3c>
 800fcaa:	ee10 2a10 	vmov	r2, s0
 800fcae:	462b      	mov	r3, r5
 800fcb0:	f7f0 fca2 	bl	80005f8 <__aeabi_dmul>
 800fcb4:	4602      	mov	r2, r0
 800fcb6:	460b      	mov	r3, r1
 800fcb8:	4620      	mov	r0, r4
 800fcba:	4629      	mov	r1, r5
 800fcbc:	f7f0 fae6 	bl	800028c <__adddf3>
 800fcc0:	4604      	mov	r4, r0
 800fcc2:	460d      	mov	r5, r1
 800fcc4:	ec45 4b10 	vmov	d0, r4, r5
 800fcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fccc:	2d00      	cmp	r5, #0
 800fcce:	dc10      	bgt.n	800fcf2 <__ieee754_sqrt+0x62>
 800fcd0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fcd4:	4330      	orrs	r0, r6
 800fcd6:	d0f5      	beq.n	800fcc4 <__ieee754_sqrt+0x34>
 800fcd8:	b15d      	cbz	r5, 800fcf2 <__ieee754_sqrt+0x62>
 800fcda:	ee10 2a10 	vmov	r2, s0
 800fcde:	462b      	mov	r3, r5
 800fce0:	ee10 0a10 	vmov	r0, s0
 800fce4:	f7f0 fad0 	bl	8000288 <__aeabi_dsub>
 800fce8:	4602      	mov	r2, r0
 800fcea:	460b      	mov	r3, r1
 800fcec:	f7f0 fdae 	bl	800084c <__aeabi_ddiv>
 800fcf0:	e7e6      	b.n	800fcc0 <__ieee754_sqrt+0x30>
 800fcf2:	1509      	asrs	r1, r1, #20
 800fcf4:	d076      	beq.n	800fde4 <__ieee754_sqrt+0x154>
 800fcf6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800fcfa:	07ce      	lsls	r6, r1, #31
 800fcfc:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800fd00:	bf5e      	ittt	pl
 800fd02:	0fda      	lsrpl	r2, r3, #31
 800fd04:	005b      	lslpl	r3, r3, #1
 800fd06:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800fd0a:	0fda      	lsrs	r2, r3, #31
 800fd0c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800fd10:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800fd14:	2000      	movs	r0, #0
 800fd16:	106d      	asrs	r5, r5, #1
 800fd18:	005b      	lsls	r3, r3, #1
 800fd1a:	f04f 0e16 	mov.w	lr, #22
 800fd1e:	4684      	mov	ip, r0
 800fd20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fd24:	eb0c 0401 	add.w	r4, ip, r1
 800fd28:	4294      	cmp	r4, r2
 800fd2a:	bfde      	ittt	le
 800fd2c:	1b12      	suble	r2, r2, r4
 800fd2e:	eb04 0c01 	addle.w	ip, r4, r1
 800fd32:	1840      	addle	r0, r0, r1
 800fd34:	0052      	lsls	r2, r2, #1
 800fd36:	f1be 0e01 	subs.w	lr, lr, #1
 800fd3a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800fd3e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fd42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fd46:	d1ed      	bne.n	800fd24 <__ieee754_sqrt+0x94>
 800fd48:	4671      	mov	r1, lr
 800fd4a:	2720      	movs	r7, #32
 800fd4c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800fd50:	4562      	cmp	r2, ip
 800fd52:	eb04 060e 	add.w	r6, r4, lr
 800fd56:	dc02      	bgt.n	800fd5e <__ieee754_sqrt+0xce>
 800fd58:	d113      	bne.n	800fd82 <__ieee754_sqrt+0xf2>
 800fd5a:	429e      	cmp	r6, r3
 800fd5c:	d811      	bhi.n	800fd82 <__ieee754_sqrt+0xf2>
 800fd5e:	2e00      	cmp	r6, #0
 800fd60:	eb06 0e04 	add.w	lr, r6, r4
 800fd64:	da43      	bge.n	800fdee <__ieee754_sqrt+0x15e>
 800fd66:	f1be 0f00 	cmp.w	lr, #0
 800fd6a:	db40      	blt.n	800fdee <__ieee754_sqrt+0x15e>
 800fd6c:	f10c 0801 	add.w	r8, ip, #1
 800fd70:	eba2 020c 	sub.w	r2, r2, ip
 800fd74:	429e      	cmp	r6, r3
 800fd76:	bf88      	it	hi
 800fd78:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800fd7c:	1b9b      	subs	r3, r3, r6
 800fd7e:	4421      	add	r1, r4
 800fd80:	46c4      	mov	ip, r8
 800fd82:	0052      	lsls	r2, r2, #1
 800fd84:	3f01      	subs	r7, #1
 800fd86:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800fd8a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fd8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fd92:	d1dd      	bne.n	800fd50 <__ieee754_sqrt+0xc0>
 800fd94:	4313      	orrs	r3, r2
 800fd96:	d006      	beq.n	800fda6 <__ieee754_sqrt+0x116>
 800fd98:	1c4c      	adds	r4, r1, #1
 800fd9a:	bf13      	iteet	ne
 800fd9c:	3101      	addne	r1, #1
 800fd9e:	3001      	addeq	r0, #1
 800fda0:	4639      	moveq	r1, r7
 800fda2:	f021 0101 	bicne.w	r1, r1, #1
 800fda6:	1043      	asrs	r3, r0, #1
 800fda8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fdac:	0849      	lsrs	r1, r1, #1
 800fdae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fdb2:	07c2      	lsls	r2, r0, #31
 800fdb4:	bf48      	it	mi
 800fdb6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800fdba:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800fdbe:	460c      	mov	r4, r1
 800fdc0:	463d      	mov	r5, r7
 800fdc2:	e77f      	b.n	800fcc4 <__ieee754_sqrt+0x34>
 800fdc4:	0ada      	lsrs	r2, r3, #11
 800fdc6:	3815      	subs	r0, #21
 800fdc8:	055b      	lsls	r3, r3, #21
 800fdca:	2a00      	cmp	r2, #0
 800fdcc:	d0fa      	beq.n	800fdc4 <__ieee754_sqrt+0x134>
 800fdce:	02d7      	lsls	r7, r2, #11
 800fdd0:	d50a      	bpl.n	800fde8 <__ieee754_sqrt+0x158>
 800fdd2:	f1c1 0420 	rsb	r4, r1, #32
 800fdd6:	fa23 f404 	lsr.w	r4, r3, r4
 800fdda:	1e4d      	subs	r5, r1, #1
 800fddc:	408b      	lsls	r3, r1
 800fdde:	4322      	orrs	r2, r4
 800fde0:	1b41      	subs	r1, r0, r5
 800fde2:	e788      	b.n	800fcf6 <__ieee754_sqrt+0x66>
 800fde4:	4608      	mov	r0, r1
 800fde6:	e7f0      	b.n	800fdca <__ieee754_sqrt+0x13a>
 800fde8:	0052      	lsls	r2, r2, #1
 800fdea:	3101      	adds	r1, #1
 800fdec:	e7ef      	b.n	800fdce <__ieee754_sqrt+0x13e>
 800fdee:	46e0      	mov	r8, ip
 800fdf0:	e7be      	b.n	800fd70 <__ieee754_sqrt+0xe0>
 800fdf2:	bf00      	nop
 800fdf4:	7ff00000 	.word	0x7ff00000

0800fdf8 <_init>:
 800fdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdfa:	bf00      	nop
 800fdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdfe:	bc08      	pop	{r3}
 800fe00:	469e      	mov	lr, r3
 800fe02:	4770      	bx	lr

0800fe04 <_fini>:
 800fe04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe06:	bf00      	nop
 800fe08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe0a:	bc08      	pop	{r3}
 800fe0c:	469e      	mov	lr, r3
 800fe0e:	4770      	bx	lr
