
Robochess_2021_mainboard_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011fb8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  08012158  08012158  00022158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801281c  0801281c  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801281c  0801281c  0002281c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012824  08012824  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012824  08012824  00022824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012828  08012828  00022828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0801282c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b774  200001ec  08012a18  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b960  08012a18  0003b960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026d35  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055da  00000000  00000000  00056f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce8  00000000  00000000  0005c530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ad8  00000000  00000000  0005e218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d3bb  00000000  00000000  0005fcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000220b6  00000000  00000000  0007d0ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a89f0  00000000  00000000  0009f161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00147b51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000893c  00000000  00000000  00147ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012140 	.word	0x08012140

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	08012140 	.word	0x08012140

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <AS5600_M1_getPOS>:
//	if(hi2c->Instance==AS5600_2_I2C){
//		FLAG_AS5600_M2 = HAL_ERROR;
//	}
//}

void AS5600_M1_getPOS(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1,0x36<<1,_RAWANGLEAddressLSB,1,(uint8_t*)&data_AS5600_M1,2);
 8000f56:	2302      	movs	r3, #2
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <AS5600_M1_getPOS+0x20>)
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	220d      	movs	r2, #13
 8000f62:	216c      	movs	r1, #108	; 0x6c
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <AS5600_M1_getPOS+0x24>)
 8000f66:	f005 fdf9 	bl	8006b5c <HAL_I2C_Mem_Read_DMA>
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000af36 	.word	0x2000af36
 8000f74:	2000b344 	.word	0x2000b344

08000f78 <AS5600_M2_getPOS>:
void AS5600_M2_getPOS(){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c3,0x36<<1,_RAWANGLEAddressLSB,1,(uint8_t *)&data_AS5600_M2,2);
 8000f7e:	2302      	movs	r3, #2
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <AS5600_M2_getPOS+0x20>)
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	220d      	movs	r2, #13
 8000f8a:	216c      	movs	r1, #108	; 0x6c
 8000f8c:	4803      	ldr	r0, [pc, #12]	; (8000f9c <AS5600_M2_getPOS+0x24>)
 8000f8e:	f005 fde5 	bl	8006b5c <HAL_I2C_Mem_Read_DMA>
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	2000af34 	.word	0x2000af34
 8000f9c:	2000b290 	.word	0x2000b290

08000fa0 <AS5600_Start_Update>:
		case 55: return 2;  //phat hien nam cham binh thuong
		case 23: return 3; //phat hien nam cham yeu
	}
	return data_status[0];
}
void AS5600_Start_Update(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	TIM_AS5600->ARR = 1000;         //for frequency = 100hz
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <AS5600_Start_Update+0x18>)
 8000fa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000faa:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&TIM_AS5600_UPDATE);
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <AS5600_Start_Update+0x1c>)
 8000fae:	f008 fec5 	bl	8009d3c <HAL_TIM_Base_Start_IT>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40014400 	.word	0x40014400
 8000fbc:	2000b788 	.word	0x2000b788

08000fc0 <AS5600_Start_Update_Low>:
void AS5600_Start_Update_Low(){
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
	TIM_AS5600->ARR = 1000;         //for frequency = 100hz
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <AS5600_Start_Update_Low+0x18>)
 8000fc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40014400 	.word	0x40014400

08000fdc <AS5600_Start_Update_High>:
void AS5600_Start_Update_High(){
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
	TIM_AS5600->ARR = 800;          //for frequency = 8khz
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <AS5600_Start_Update_High+0x18>)
 8000fe2:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000fe6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40014400 	.word	0x40014400

08000ff8 <AccelStepper_init>:

#include "AccelStepper.h"
#include "config.h"

void AccelStepper_init(struct AccelStepperData * AccelMotor,TIM_HandleTypeDef htim,uint16_t startPosition, uint32_t maxSpeed,uint32_t maxAccel){
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	f107 0014 	add.w	r0, r7, #20
 8001006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  //khoi tao thu vien
	AccelMotor->_currentPos = 0;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	631a      	str	r2, [r3, #48]	; 0x30
	AccelMotor->_targetPos = 0;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
	AccelMotor->_speed = 0.0f;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	605a      	str	r2, [r3, #4]
	AccelMotor->_maxSpeed = 1.0f;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001024:	609a      	str	r2, [r3, #8]
	AccelMotor->_acceleration = 0.0f;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
	AccelMotor->_sqrt_twoa = 1.0f;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001034:	611a      	str	r2, [r3, #16]
	AccelMotor->_stepInterval = 0;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
	AccelMotor->_lastStepTime = 0;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
	AccelMotor->_n = 0;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
	AccelMotor->_c0 = 0.0f;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
	AccelMotor->_cn = 0.0f;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	; 0x24
	AccelMotor->_cmin = 1.0f;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800105e:	629a      	str	r2, [r3, #40]	; 0x28
	AccelMotor->_direction = DIRECTION_CCW;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	setMaxSpeed(AccelMotor,maxSpeed);  
 8001068:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800106a:	ee07 3a90 	vmov	s15, r3
 800106e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f83e 	bl	80010f8 <setMaxSpeed>
	setAcceleration(AccelMotor,maxAccel);
 800107c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001086:	eeb0 0a67 	vmov.f32	s0, s15
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f880 	bl	8001190 <setAcceleration>
	AccelMotor->_currentPos = startPosition;  //setup vi tri ban dau
 8001090:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	631a      	str	r2, [r3, #48]	; 0x30
	AccelMotor->_targetPos=AccelMotor->_currentPos;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	601a      	str	r2, [r3, #0]
	computeNewSpeed(AccelMotor);  //tinh toan buoc dau tien
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f8e9 	bl	8001278 <computeNewSpeed>
	run(AccelMotor);          
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 f9e0 	bl	800146c <run>
  if(AccelMotor->usingTimChanelN==ON) 	
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d108      	bne.n	80010c8 <AccelStepper_init+0xd0>
		HAL_TIMEx_PWMN_Start_IT(&htim,AccelMotor->TIM_CHANEL); 
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f009 fe11 	bl	800ace8 <HAL_TIMEx_PWMN_Start_IT>
 80010c6:	e007      	b.n	80010d8 <AccelStepper_init+0xe0>
	else
	HAL_TIM_PWM_Start_IT(&htim,AccelMotor->TIM_CHANEL);  //khoi dong TIMER tao xung STEP
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f008 ff9e 	bl	800a014 <HAL_TIM_PWM_Start_IT>
	HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_SET);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80010e2:	2201      	movs	r2, #1
 80010e4:	4619      	mov	r1, r3
 80010e6:	f005 fbc1 	bl	800686c <HAL_GPIO_WritePin>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010f4:	b004      	add	sp, #16
 80010f6:	4770      	bx	lr

080010f8 <setMaxSpeed>:

void setMaxSpeed(struct AccelStepperData * AccelMotor,float speed)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	ed87 0a00 	vstr	s0, [r7]
    if (speed < 0.0f)
 8001104:	edd7 7a00 	vldr	s15, [r7]
 8001108:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001110:	d505      	bpl.n	800111e <setMaxSpeed+0x26>
       speed = -speed;
 8001112:	edd7 7a00 	vldr	s15, [r7]
 8001116:	eef1 7a67 	vneg.f32	s15, s15
 800111a:	edc7 7a00 	vstr	s15, [r7]
    if (AccelMotor->_maxSpeed != speed)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	edd3 7a02 	vldr	s15, [r3, #8]
 8001124:	ed97 7a00 	vldr	s14, [r7]
 8001128:	eeb4 7a67 	vcmp.f32	s14, s15
 800112c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001130:	d027      	beq.n	8001182 <setMaxSpeed+0x8a>
    {
	AccelMotor->_maxSpeed = speed;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	609a      	str	r2, [r3, #8]
	AccelMotor->_cmin = 1000000.0f / speed;
 8001138:	eddf 6a14 	vldr	s13, [pc, #80]	; 800118c <setMaxSpeed+0x94>
 800113c:	ed97 7a00 	vldr	s14, [r7]
 8001140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	// Recompute _n from current speed and adjust speed if accelerating or cruising
	if (AccelMotor->_n > 0)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	2b00      	cmp	r3, #0
 8001150:	dd17      	ble.n	8001182 <setMaxSpeed+0x8a>
	{
	    AccelMotor->_n = (long)((AccelMotor->_speed * AccelMotor->_speed) / (2.0f * AccelMotor->_acceleration)); // Equation 16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	ed93 7a01 	vldr	s14, [r3, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	edd3 7a01 	vldr	s15, [r3, #4]
 800115e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	edd3 7a03 	vldr	s15, [r3, #12]
 8001168:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800116c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001170:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001174:	ee17 2a90 	vmov	r2, s15
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	61da      	str	r2, [r3, #28]
	    computeNewSpeed(AccelMotor);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f87b 	bl	8001278 <computeNewSpeed>
	}
    }
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	49742400 	.word	0x49742400

08001190 <setAcceleration>:
void setAcceleration(struct AccelStepperData * AccelMotor,float acceleration)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	ed87 0a00 	vstr	s0, [r7]
    if (acceleration == 0.0f)
 800119c:	edd7 7a00 	vldr	s15, [r7]
 80011a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a8:	d058      	beq.n	800125c <setAcceleration+0xcc>
	return;
    if (acceleration < 0.0f)
 80011aa:	edd7 7a00 	vldr	s15, [r7]
 80011ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b6:	d505      	bpl.n	80011c4 <setAcceleration+0x34>
      acceleration = -acceleration;
 80011b8:	edd7 7a00 	vldr	s15, [r7]
 80011bc:	eef1 7a67 	vneg.f32	s15, s15
 80011c0:	edc7 7a00 	vstr	s15, [r7]
    if (AccelMotor->_acceleration != acceleration)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80011ca:	ed97 7a00 	vldr	s14, [r7]
 80011ce:	eeb4 7a67 	vcmp.f32	s14, s15
 80011d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d6:	d042      	beq.n	800125e <setAcceleration+0xce>
    {
	// Recompute _n per Equation 17
	AccelMotor->_n = AccelMotor->_n * (AccelMotor->_acceleration / acceleration);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	ed93 6a03 	vldr	s12, [r3, #12]
 80011ea:	edd7 6a00 	vldr	s13, [r7]
 80011ee:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80011f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011fa:	ee17 2a90 	vmov	r2, s15
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	61da      	str	r2, [r3, #28]
	// New c0 per Equation 7, with correction per Equation 15
	AccelMotor->_c0 = 0.676f * sqrt(2.0f / acceleration) * 1000000.0f; // Equation 15
 8001202:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001206:	edd7 7a00 	vldr	s15, [r7]
 800120a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800120e:	ee16 0a90 	vmov	r0, s13
 8001212:	f7ff f9a1 	bl	8000558 <__aeabi_f2d>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	ec43 2b10 	vmov	d0, r2, r3
 800121e:	f010 fea7 	bl	8011f70 <sqrt>
 8001222:	ec51 0b10 	vmov	r0, r1, d0
 8001226:	a310      	add	r3, pc, #64	; (adr r3, 8001268 <setAcceleration+0xd8>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f9ec 	bl	8000608 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	a30d      	add	r3, pc, #52	; (adr r3, 8001270 <setAcceleration+0xe0>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff f9e3 	bl	8000608 <__aeabi_dmul>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f7ff fcb5 	bl	8000bb8 <__aeabi_d2f>
 800124e:	4602      	mov	r2, r0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	621a      	str	r2, [r3, #32]
	AccelMotor->_acceleration = acceleration;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	e000      	b.n	800125e <setAcceleration+0xce>
	return;
 800125c:	bf00      	nop
	//computeNewSpeed(AccelMotor);
    }
}
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	f3af 8000 	nop.w
 8001268:	c0000000 	.word	0xc0000000
 800126c:	3fe5a1ca 	.word	0x3fe5a1ca
 8001270:	00000000 	.word	0x00000000
 8001274:	412e8480 	.word	0x412e8480

08001278 <computeNewSpeed>:

void computeNewSpeed(struct AccelStepperData * AccelMotor)  //tinh toan 1 toc do moi
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  long distanceTo = distanceToGo(AccelMotor); // +ve is clockwise from curent location - duong neu cung chieu kim dong ho tu vi tri hien tai
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 f8e3 	bl	800144c <distanceToGo>
 8001286:	60f8      	str	r0, [r7, #12]

  long stepsToStop = (long)((AccelMotor->_speed * AccelMotor->_speed) / (2.0f * AccelMotor->_acceleration)); // Equation 16 - phuong trinh 16 theo giai thuat By David Austin
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	ed93 7a01 	vldr	s14, [r3, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	edd3 7a01 	vldr	s15, [r3, #4]
 8001294:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	edd3 7a03 	vldr	s15, [r3, #12]
 800129e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012aa:	ee17 3a90 	vmov	r3, s15
 80012ae:	60bb      	str	r3, [r7, #8]

  if (distanceTo == 0 && stepsToStop <= 1){
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10d      	bne.n	80012d2 <computeNewSpeed+0x5a>
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	dc0a      	bgt.n	80012d2 <computeNewSpeed+0x5a>
	// We are at the target and its time to stop -  da den vi tri muc tieu va bay gio dung lai
	  AccelMotor->_stepInterval = 0;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
	  AccelMotor->_speed = 0.0f;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	605a      	str	r2, [r3, #4]
	  AccelMotor->_n = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	61da      	str	r2, [r3, #28]
	  return;
 80012d0:	e0b7      	b.n	8001442 <computeNewSpeed+0x1ca>
  }

  if (distanceTo > 0){
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	dd24      	ble.n	8001322 <computeNewSpeed+0xaa>
	  // We are anticlockwise from the target  -  chung ta dang o vi tri nguoc chieu kim dong ho 
	  // Need to go clockwise from here, maybe decelerate now  -  can quay theo chieu kim dong ho, co th giam toc ngay
	  if (AccelMotor->_n > 0){
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	dd0d      	ble.n	80012fc <computeNewSpeed+0x84>
	    // Currently accelerating, need to decel now? Or maybe going the wrong way?
			// hien tai dang tang toc,can giam toc bay ngay? hoac co the di sai huong
	    if ((stepsToStop >= distanceTo) || AccelMotor->_direction == DIRECTION_CCW)
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	da04      	bge.n	80012f2 <computeNewSpeed+0x7a>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d140      	bne.n	8001374 <computeNewSpeed+0xfc>
		     AccelMotor->_n = -stepsToStop; // Start deceleration - bat dau giam toc
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	425a      	negs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	61da      	str	r2, [r3, #28]
 80012fa:	e03b      	b.n	8001374 <computeNewSpeed+0xfc>
	  }
	  else if (AccelMotor->_n < 0){
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	2b00      	cmp	r3, #0
 8001302:	da37      	bge.n	8001374 <computeNewSpeed+0xfc>
	    // Currently decelerating, need to accel again? - hien tai dang giam toc ,can tang toc lai
	    if ((stepsToStop < distanceTo) && AccelMotor->_direction == DIRECTION_CW)
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	da33      	bge.n	8001374 <computeNewSpeed+0xfc>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001312:	2b01      	cmp	r3, #1
 8001314:	d12e      	bne.n	8001374 <computeNewSpeed+0xfc>
		     AccelMotor->_n = -AccelMotor->_n; // Start accceleration  //bat dau tang toc
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	425a      	negs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	61da      	str	r2, [r3, #28]
 8001320:	e028      	b.n	8001374 <computeNewSpeed+0xfc>
	  }
  }
  else if (distanceTo < 0){
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2b00      	cmp	r3, #0
 8001326:	da25      	bge.n	8001374 <computeNewSpeed+0xfc>
	// We are clockwise from the target - chung ta dang o vi tri cung chieu kim dong ho
	// Need to go anticlockwise from here, maybe decelerate - can quay theo chieu nguoc lai ,co the giam toc
	   if (AccelMotor->_n > 0){
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	2b00      	cmp	r3, #0
 800132e:	dd0e      	ble.n	800134e <computeNewSpeed+0xd6>
	      // Currently accelerating, need to decel now? Or maybe going the wrong way?
			  // hien dang tang toc,can giam toc ngay? hoac dang di sai huong?
	      if ((stepsToStop >= -distanceTo) || AccelMotor->_direction == DIRECTION_CW)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	425b      	negs	r3, r3
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	429a      	cmp	r2, r3
 8001338:	da04      	bge.n	8001344 <computeNewSpeed+0xcc>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001340:	2b01      	cmp	r3, #1
 8001342:	d117      	bne.n	8001374 <computeNewSpeed+0xfc>
		        AccelMotor->_n = -stepsToStop; // Start deceleration - bat dau giam toc
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	425a      	negs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	61da      	str	r2, [r3, #28]
 800134c:	e012      	b.n	8001374 <computeNewSpeed+0xfc>
	   }
	   else if (AccelMotor->_n < 0){
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	2b00      	cmp	r3, #0
 8001354:	da0e      	bge.n	8001374 <computeNewSpeed+0xfc>
	       // Currently decelerating, need to accel again?
			   // hien dang giam toc, can tang toc lai?
	       if ((stepsToStop < -distanceTo) && AccelMotor->_direction == DIRECTION_CCW)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	425b      	negs	r3, r3
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	429a      	cmp	r2, r3
 800135e:	da09      	bge.n	8001374 <computeNewSpeed+0xfc>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001366:	2b00      	cmp	r3, #0
 8001368:	d104      	bne.n	8001374 <computeNewSpeed+0xfc>
		        AccelMotor->_n = -AccelMotor->_n; // Start accceleration  //bat dau tang toc
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	425a      	negs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	61da      	str	r2, [r3, #28]
	   }
  }
    // Need to accelerate or decelerate - can tang toc hoac giam toc
  if (AccelMotor->_n == 0){
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10e      	bne.n	800139a <computeNewSpeed+0x122>
	   // First step from stopped  -  buoc dau tien tu vi tri stop
	   AccelMotor->_cn = AccelMotor->_c0;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1a      	ldr	r2, [r3, #32]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
	   AccelMotor->_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	bfcc      	ite	gt
 800138a:	2301      	movgt	r3, #1
 800138c:	2300      	movle	r3, #0
 800138e:	b2db      	uxtb	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001398:	e02e      	b.n	80013f8 <computeNewSpeed+0x180>
  }
	else{
	   // Subsequent step. Works for accel (n is +_ve) and decel (n is -ve).
		 //buoc tiep theo. hoat dong cho tang toc (n la duong) va giam toc (n la am)
	   AccelMotor->_cn = AccelMotor->_cn - ((2.0f * AccelMotor->_cn) / ((4.0f * AccelMotor->_n) + 1)); // Equation 13 - phuong trinh 13 
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80013a6:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80013ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80013c2:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80013c6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80013ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	   AccelMotor->_cn = max(AccelMotor->_cn, AccelMotor->_cmin);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80013e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e8:	dd02      	ble.n	80013f0 <computeNewSpeed+0x178>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	e001      	b.n	80013f4 <computeNewSpeed+0x17c>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6253      	str	r3, [r2, #36]	; 0x24
  }
  AccelMotor->_n++;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	61da      	str	r2, [r3, #28]
  AccelMotor->_stepInterval = AccelMotor->_cn;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800140c:	ee17 2a90 	vmov	r2, s15
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	615a      	str	r2, [r3, #20]
  AccelMotor->_speed = 1000000.0f / AccelMotor->_cn;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800141a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001448 <computeNewSpeed+0x1d0>
 800141e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	edc3 7a01 	vstr	s15, [r3, #4]
  if (AccelMotor->_direction == DIRECTION_CCW) AccelMotor->_speed = -AccelMotor->_speed;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800142e:	2b00      	cmp	r3, #0
 8001430:	d107      	bne.n	8001442 <computeNewSpeed+0x1ca>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	edd3 7a01 	vldr	s15, [r3, #4]
 8001438:	eef1 7a67 	vneg.f32	s15, s15
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	49742400 	.word	0x49742400

0800144c <distanceToGo>:

long distanceToGo(struct AccelStepperData * AccelMotor)  //tra lai khoang cach giua vi tri muc tieu va hien tai
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    return AccelMotor->_targetPos - AccelMotor->_currentPos;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	1ad3      	subs	r3, r2, r3
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <run>:

void run(struct AccelStepperData * AccelMotor)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	if(AccelMotor->isStop){
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800147a:	2b00      	cmp	r3, #0
 800147c:	d037      	beq.n	80014ee <run+0x82>
		switch(AccelMotor->TIM_CHANEL){
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	2b0c      	cmp	r3, #12
 8001484:	f200 80cd 	bhi.w	8001622 <run+0x1b6>
 8001488:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <run+0x24>)
 800148a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148e:	bf00      	nop
 8001490:	080014c5 	.word	0x080014c5
 8001494:	08001623 	.word	0x08001623
 8001498:	08001623 	.word	0x08001623
 800149c:	08001623 	.word	0x08001623
 80014a0:	080014cf 	.word	0x080014cf
 80014a4:	08001623 	.word	0x08001623
 80014a8:	08001623 	.word	0x08001623
 80014ac:	08001623 	.word	0x08001623
 80014b0:	080014d9 	.word	0x080014d9
 80014b4:	08001623 	.word	0x08001623
 80014b8:	08001623 	.word	0x08001623
 80014bc:	08001623 	.word	0x08001623
 80014c0:	080014e3 	.word	0x080014e3
			case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c8:	2200      	movs	r2, #0
 80014ca:	635a      	str	r2, [r3, #52]	; 0x34
 80014cc:	e00e      	b.n	80014ec <run+0x80>
			case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d2:	2200      	movs	r2, #0
 80014d4:	639a      	str	r2, [r3, #56]	; 0x38
 80014d6:	e009      	b.n	80014ec <run+0x80>
			case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014dc:	2200      	movs	r2, #0
 80014de:	63da      	str	r2, [r3, #60]	; 0x3c
 80014e0:	e004      	b.n	80014ec <run+0x80>
			case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e6:	2200      	movs	r2, #0
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40
 80014ea:	bf00      	nop
		}
		return;
 80014ec:	e099      	b.n	8001622 <run+0x1b6>
	}
  if(runSpeed(AccelMotor)){
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f89c 	bl	800162c <runSpeed>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d043      	beq.n	8001582 <run+0x116>
	computeNewSpeed(AccelMotor);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff febc 	bl	8001278 <computeNewSpeed>
	if(AccelMotor->_stepInterval==0){
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d135      	bne.n	8001574 <run+0x108>
			switch(AccelMotor->TIM_CHANEL){
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150c:	2b0c      	cmp	r3, #12
 800150e:	f200 8089 	bhi.w	8001624 <run+0x1b8>
 8001512:	a201      	add	r2, pc, #4	; (adr r2, 8001518 <run+0xac>)
 8001514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001518:	0800154d 	.word	0x0800154d
 800151c:	08001625 	.word	0x08001625
 8001520:	08001625 	.word	0x08001625
 8001524:	08001625 	.word	0x08001625
 8001528:	08001557 	.word	0x08001557
 800152c:	08001625 	.word	0x08001625
 8001530:	08001625 	.word	0x08001625
 8001534:	08001625 	.word	0x08001625
 8001538:	08001561 	.word	0x08001561
 800153c:	08001625 	.word	0x08001625
 8001540:	08001625 	.word	0x08001625
 8001544:	08001625 	.word	0x08001625
 8001548:	0800156b 	.word	0x0800156b
				case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001550:	2200      	movs	r2, #0
 8001552:	635a      	str	r2, [r3, #52]	; 0x34
 8001554:	e066      	b.n	8001624 <run+0x1b8>
				case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155a:	2200      	movs	r2, #0
 800155c:	639a      	str	r2, [r3, #56]	; 0x38
 800155e:	e061      	b.n	8001624 <run+0x1b8>
				case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001564:	2200      	movs	r2, #0
 8001566:	63da      	str	r2, [r3, #60]	; 0x3c
 8001568:	e05c      	b.n	8001624 <run+0x1b8>
				case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156e:	2200      	movs	r2, #0
 8001570:	641a      	str	r2, [r3, #64]	; 0x40
 8001572:	e057      	b.n	8001624 <run+0x1b8>
			}
//			AccelMotor->sumComplete++;
	}else{
	    AccelMotor->USER_TIMER->ARR=(uint16_t)AccelMotor->_stepInterval;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	b29a      	uxth	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001580:	e050      	b.n	8001624 <run+0x1b8>
//		if((distanceToGo(AccelMotor)>3) || (distanceToGo(AccelMotor)>-3)) AccelMotor->sumComplete =0;
	}
  }else if((distanceToGo(AccelMotor)>0) || (distanceToGo(AccelMotor)<0)){
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ff62 	bl	800144c <distanceToGo>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	dc05      	bgt.n	800159a <run+0x12e>
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ff5c 	bl	800144c <distanceToGo>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	da44      	bge.n	8001624 <run+0x1b8>
		computeNewSpeed(AccelMotor);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff fe6c 	bl	8001278 <computeNewSpeed>
		if(AccelMotor->_stepInterval==0){
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d135      	bne.n	8001614 <run+0x1a8>
				switch(AccelMotor->TIM_CHANEL){
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ac:	2b0c      	cmp	r3, #12
 80015ae:	d839      	bhi.n	8001624 <run+0x1b8>
 80015b0:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <run+0x14c>)
 80015b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b6:	bf00      	nop
 80015b8:	080015ed 	.word	0x080015ed
 80015bc:	08001625 	.word	0x08001625
 80015c0:	08001625 	.word	0x08001625
 80015c4:	08001625 	.word	0x08001625
 80015c8:	080015f7 	.word	0x080015f7
 80015cc:	08001625 	.word	0x08001625
 80015d0:	08001625 	.word	0x08001625
 80015d4:	08001625 	.word	0x08001625
 80015d8:	08001601 	.word	0x08001601
 80015dc:	08001625 	.word	0x08001625
 80015e0:	08001625 	.word	0x08001625
 80015e4:	08001625 	.word	0x08001625
 80015e8:	0800160b 	.word	0x0800160b
				case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f0:	2200      	movs	r2, #0
 80015f2:	635a      	str	r2, [r3, #52]	; 0x34
 80015f4:	e016      	b.n	8001624 <run+0x1b8>
				case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fa:	2200      	movs	r2, #0
 80015fc:	639a      	str	r2, [r3, #56]	; 0x38
 80015fe:	e011      	b.n	8001624 <run+0x1b8>
				case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001604:	2200      	movs	r2, #0
 8001606:	63da      	str	r2, [r3, #60]	; 0x3c
 8001608:	e00c      	b.n	8001624 <run+0x1b8>
				case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160e:	2200      	movs	r2, #0
 8001610:	641a      	str	r2, [r3, #64]	; 0x40
 8001612:	e007      	b.n	8001624 <run+0x1b8>
			}
//				AccelMotor->sumComplete++;
		}
	  else{
	      AccelMotor->USER_TIMER->ARR=(uint16_t)AccelMotor->_stepInterval;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	b29a      	uxth	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001620:	e000      	b.n	8001624 <run+0x1b8>
		return;
 8001622:	bf00      	nop
//			  if((distanceToGo(AccelMotor)>3) || (distanceToGo(AccelMotor)>-3)) AccelMotor->sumComplete =0;
		}
	}
//	if(AccelMotor->sumComplete>50) AccelMotor->isComplete=true;
}
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop

0800162c <runSpeed>:

char runSpeed(struct AccelStepperData * AccelMotor)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
    // Dont do anything unless we actually have a step interval
	  // khong lam gi neu nhu gia tri _stepInterval = 0
  if (!AccelMotor->_stepInterval){
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d137      	bne.n	80016ac <runSpeed+0x80>
		switch(AccelMotor->TIM_CHANEL){
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001640:	2b0c      	cmp	r3, #12
 8001642:	d831      	bhi.n	80016a8 <runSpeed+0x7c>
 8001644:	a201      	add	r2, pc, #4	; (adr r2, 800164c <runSpeed+0x20>)
 8001646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164a:	bf00      	nop
 800164c:	08001681 	.word	0x08001681
 8001650:	080016a9 	.word	0x080016a9
 8001654:	080016a9 	.word	0x080016a9
 8001658:	080016a9 	.word	0x080016a9
 800165c:	0800168b 	.word	0x0800168b
 8001660:	080016a9 	.word	0x080016a9
 8001664:	080016a9 	.word	0x080016a9
 8001668:	080016a9 	.word	0x080016a9
 800166c:	08001695 	.word	0x08001695
 8001670:	080016a9 	.word	0x080016a9
 8001674:	080016a9 	.word	0x080016a9
 8001678:	080016a9 	.word	0x080016a9
 800167c:	0800169f 	.word	0x0800169f
			case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001684:	2200      	movs	r2, #0
 8001686:	635a      	str	r2, [r3, #52]	; 0x34
 8001688:	e00e      	b.n	80016a8 <runSpeed+0x7c>
			case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168e:	2200      	movs	r2, #0
 8001690:	639a      	str	r2, [r3, #56]	; 0x38
 8001692:	e009      	b.n	80016a8 <runSpeed+0x7c>
			case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001698:	2200      	movs	r2, #0
 800169a:	63da      	str	r2, [r3, #60]	; 0x3c
 800169c:	e004      	b.n	80016a8 <runSpeed+0x7c>
			case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a2:	2200      	movs	r2, #0
 80016a4:	641a      	str	r2, [r3, #64]	; 0x40
 80016a6:	bf00      	nop
		}
//		AccelMotor->isComplete = 1;
		return 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e013      	b.n	80016d4 <runSpeed+0xa8>
	}
	
	if (AccelMotor->_direction == DIRECTION_CW){ // Clockwise    
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d105      	bne.n	80016c2 <runSpeed+0x96>
	    AccelMotor->_currentPos += 1;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	631a      	str	r2, [r3, #48]	; 0x30
 80016c0:	e004      	b.n	80016cc <runSpeed+0xa0>
	  }
	else{
	    // Anticlockwise
	    AccelMotor->_currentPos -= 1;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	1e5a      	subs	r2, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	631a      	str	r2, [r3, #48]	; 0x30
	  }
	step(AccelMotor);  //tao 1 step pulse
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f805 	bl	80016dc <step>

	return 1;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <step>:

void step(struct AccelStepperData * AccelMotor)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	if(AccelMotor->_direction) 
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <step+0x26>
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Dir,AccelMotor->GPIO_PIN_Dir,GPIO_PIN_RESET); 
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016f8:	2200      	movs	r2, #0
 80016fa:	4619      	mov	r1, r3
 80016fc:	f005 f8b6 	bl	800686c <HAL_GPIO_WritePin>
 8001700:	e008      	b.n	8001714 <step+0x38>
	else 
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Dir,AccelMotor->GPIO_PIN_Dir,GPIO_PIN_SET);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800170c:	2201      	movs	r2, #1
 800170e:	4619      	mov	r1, r3
 8001710:	f005 f8ac 	bl	800686c <HAL_GPIO_WritePin>
	if(AccelMotor->enable==1){
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800171a:	2b01      	cmp	r3, #1
 800171c:	d108      	bne.n	8001730 <step+0x54>
			HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_SET);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001728:	2201      	movs	r2, #1
 800172a:	4619      	mov	r1, r3
 800172c:	f005 f89e 	bl	800686c <HAL_GPIO_WritePin>
	}
	switch(AccelMotor->TIM_CHANEL){
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001734:	2b0c      	cmp	r3, #12
 8001736:	d831      	bhi.n	800179c <step+0xc0>
 8001738:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <step+0x64>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	08001775 	.word	0x08001775
 8001744:	0800179d 	.word	0x0800179d
 8001748:	0800179d 	.word	0x0800179d
 800174c:	0800179d 	.word	0x0800179d
 8001750:	0800177f 	.word	0x0800177f
 8001754:	0800179d 	.word	0x0800179d
 8001758:	0800179d 	.word	0x0800179d
 800175c:	0800179d 	.word	0x0800179d
 8001760:	08001789 	.word	0x08001789
 8001764:	0800179d 	.word	0x0800179d
 8001768:	0800179d 	.word	0x0800179d
 800176c:	0800179d 	.word	0x0800179d
 8001770:	08001793 	.word	0x08001793
			case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=2; break;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001778:	2202      	movs	r2, #2
 800177a:	635a      	str	r2, [r3, #52]	; 0x34
 800177c:	e00e      	b.n	800179c <step+0xc0>
			case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=2; break;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001782:	2202      	movs	r2, #2
 8001784:	639a      	str	r2, [r3, #56]	; 0x38
 8001786:	e009      	b.n	800179c <step+0xc0>
			case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=2; break;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178c:	2202      	movs	r2, #2
 800178e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001790:	e004      	b.n	800179c <step+0xc0>
			case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=2; break;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001796:	2202      	movs	r2, #2
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
 800179a:	bf00      	nop
		}
//	AccelMotor->isComplete = 0;
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <isRunning>:

char isRunning(struct AccelStepperData * AccelMotor)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
    return !(AccelMotor->_speed == 0.0f && AccelMotor->_targetPos == AccelMotor->_currentPos);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80017b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ba:	d105      	bne.n	80017c8 <isRunning+0x24>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <isRunning+0x28>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <isRunning+0x2a>
 80017cc:	2300      	movs	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <moveTo>:
void setCurentPos(struct AccelStepperData * AccelMotor,long position){
 AccelMotor->_currentPos=position;
}

void moveTo(struct AccelStepperData * AccelMotor,long absoluted)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
	AccelMotor->isStop = false;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	if(AccelMotor->_targetPos != absoluted){
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d005      	beq.n	8001804 <moveTo+0x28>
	   AccelMotor->_targetPos = absoluted;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	601a      	str	r2, [r3, #0]
	   computeNewSpeed(AccelMotor);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fd3a 	bl	8001278 <computeNewSpeed>
//		AccelMotor->USER_TIMER->CNT=0;
  }
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <setSpeed>:
void setSpeed(struct AccelStepperData * AccelMotor,float speed)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	ed87 0a00 	vstr	s0, [r7]
    if (speed == AccelMotor->_speed)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	edd3 7a01 	vldr	s15, [r3, #4]
 800181e:	ed97 7a00 	vldr	s14, [r7]
 8001822:	eeb4 7a67 	vcmp.f32	s14, s15
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	d04e      	beq.n	80018ca <setSpeed+0xbe>
        return;
    speed = constrain(speed, -AccelMotor->_maxSpeed, AccelMotor->_maxSpeed);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001832:	eef1 7a67 	vneg.f32	s15, s15
 8001836:	ed97 7a00 	vldr	s14, [r7]
 800183a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001842:	d505      	bpl.n	8001850 <setSpeed+0x44>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	edd3 7a02 	vldr	s15, [r3, #8]
 800184a:	eef1 7a67 	vneg.f32	s15, s15
 800184e:	e00f      	b.n	8001870 <setSpeed+0x64>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	edd3 7a02 	vldr	s15, [r3, #8]
 8001856:	ed97 7a00 	vldr	s14, [r7]
 800185a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800185e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001862:	dd03      	ble.n	800186c <setSpeed+0x60>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	edd3 7a02 	vldr	s15, [r3, #8]
 800186a:	e001      	b.n	8001870 <setSpeed+0x64>
 800186c:	edd7 7a00 	vldr	s15, [r7]
 8001870:	edc7 7a00 	vstr	s15, [r7]
    if (speed == 0.0f)
 8001874:	edd7 7a00 	vldr	s15, [r7]
 8001878:	eef5 7a40 	vcmp.f32	s15, #0.0
 800187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001880:	d103      	bne.n	800188a <setSpeed+0x7e>
	AccelMotor->_stepInterval = 0;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	615a      	str	r2, [r3, #20]
 8001888:	e01b      	b.n	80018c2 <setSpeed+0xb6>
    else
    {
	AccelMotor->_stepInterval = fabs(1000000.0f / speed);
 800188a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80018d8 <setSpeed+0xcc>
 800188e:	ed97 7a00 	vldr	s14, [r7]
 8001892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001896:	eef0 7ae7 	vabs.f32	s15, s15
 800189a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800189e:	ee17 2a90 	vmov	r2, s15
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	615a      	str	r2, [r3, #20]
	AccelMotor->_direction = (speed > 0.0f) ? DIRECTION_CW : DIRECTION_CCW;
 80018a6:	edd7 7a00 	vldr	s15, [r7]
 80018aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b2:	bfcc      	ite	gt
 80018b4:	2301      	movgt	r3, #1
 80018b6:	2300      	movle	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }
    AccelMotor->_speed = speed;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	e000      	b.n	80018cc <setSpeed+0xc0>
        return;
 80018ca:	bf00      	nop
}
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	49742400 	.word	0x49742400

080018dc <enableStepper>:
void enableStepper(struct AccelStepperData * AccelMotor,enum boolean onOff){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	70fb      	strb	r3, [r7, #3]
	if(onOff==OFF) 
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <enableStepper+0x26>
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_SET);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80018f8:	2201      	movs	r2, #1
 80018fa:	4619      	mov	r1, r3
 80018fc:	f004 ffb6 	bl	800686c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_RESET);
}
 8001900:	e008      	b.n	8001914 <enableStepper+0x38>
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_RESET);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800190c:	2200      	movs	r2, #0
 800190e:	4619      	mov	r1, r3
 8001910:	f004 ffac 	bl	800686c <HAL_GPIO_WritePin>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001922:	463b      	mov	r3, r7
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800192e:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <MX_ADC1_Init+0x9c>)
 8001930:	4a22      	ldr	r2, [pc, #136]	; (80019bc <MX_ADC1_Init+0xa0>)
 8001932:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001934:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <MX_ADC1_Init+0x9c>)
 8001936:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800193a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800193c:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <MX_ADC1_Init+0x9c>)
 800193e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001942:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001944:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <MX_ADC1_Init+0x9c>)
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800194a:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <MX_ADC1_Init+0x9c>)
 800194c:	2201      	movs	r2, #1
 800194e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001950:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <MX_ADC1_Init+0x9c>)
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <MX_ADC1_Init+0x9c>)
 800195a:	2200      	movs	r2, #0
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <MX_ADC1_Init+0x9c>)
 8001960:	4a17      	ldr	r2, [pc, #92]	; (80019c0 <MX_ADC1_Init+0xa4>)
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_ADC1_Init+0x9c>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <MX_ADC1_Init+0x9c>)
 800196c:	2201      	movs	r2, #1
 800196e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_ADC1_Init+0x9c>)
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_ADC1_Init+0x9c>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800197e:	480e      	ldr	r0, [pc, #56]	; (80019b8 <MX_ADC1_Init+0x9c>)
 8001980:	f003 f966 	bl	8004c50 <HAL_ADC_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800198a:	f002 fa1d 	bl	8003dc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800198e:	2304      	movs	r3, #4
 8001990:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001992:	2301      	movs	r3, #1
 8001994:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001996:	2307      	movs	r3, #7
 8001998:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800199a:	463b      	mov	r3, r7
 800199c:	4619      	mov	r1, r3
 800199e:	4806      	ldr	r0, [pc, #24]	; (80019b8 <MX_ADC1_Init+0x9c>)
 80019a0:	f003 fbae 	bl	8005100 <HAL_ADC_ConfigChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80019aa:	f002 fa0d 	bl	8003dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000af38 	.word	0x2000af38
 80019bc:	40012000 	.word	0x40012000
 80019c0:	0f000001 	.word	0x0f000001

080019c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a32      	ldr	r2, [pc, #200]	; (8001aac <HAL_ADC_MspInit+0xe8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d15e      	bne.n	8001aa4 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <HAL_ADC_MspInit+0xec>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a30      	ldr	r2, [pc, #192]	; (8001ab0 <HAL_ADC_MspInit+0xec>)
 80019f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <HAL_ADC_MspInit+0xec>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <HAL_ADC_MspInit+0xec>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a29      	ldr	r2, [pc, #164]	; (8001ab0 <HAL_ADC_MspInit+0xec>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <HAL_ADC_MspInit+0xec>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_VOLT_SENSOR_Pin;
 8001a1e:	2310      	movs	r3, #16
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a22:	2303      	movs	r3, #3
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VOLT_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4820      	ldr	r0, [pc, #128]	; (8001ab4 <HAL_ADC_MspInit+0xf0>)
 8001a32:	f004 fd7f 	bl	8006534 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <HAL_ADC_MspInit+0xf4>)
 8001a38:	4a20      	ldr	r2, [pc, #128]	; (8001abc <HAL_ADC_MspInit+0xf8>)
 8001a3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <HAL_ADC_MspInit+0xf4>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_ADC_MspInit+0xf4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_ADC_MspInit+0xf4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_ADC_MspInit+0xf4>)
 8001a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_ADC_MspInit+0xf4>)
 8001a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_ADC_MspInit+0xf4>)
 8001a60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_ADC_MspInit+0xf4>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_ADC_MspInit+0xf4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_ADC_MspInit+0xf4>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a78:	480f      	ldr	r0, [pc, #60]	; (8001ab8 <HAL_ADC_MspInit+0xf4>)
 8001a7a:	f003 fe67 	bl	800574c <HAL_DMA_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001a84:	f002 f9a0 	bl	8003dc8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <HAL_ADC_MspInit+0xf4>)
 8001a8c:	639a      	str	r2, [r3, #56]	; 0x38
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <HAL_ADC_MspInit+0xf4>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	210f      	movs	r1, #15
 8001a98:	2012      	movs	r0, #18
 8001a9a:	f003 fe28 	bl	80056ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a9e:	2012      	movs	r0, #18
 8001aa0:	f003 fe41 	bl	8005726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3728      	adds	r7, #40	; 0x28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40012000 	.word	0x40012000
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	2000af80 	.word	0x2000af80
 8001abc:	40026410 	.word	0x40026410

08001ac0 <HAL_ADC_ConvCpltCallback>:

uint32_t battery_sum;								// Variable for Calculator Battery
uint16_t battery,battery_tik;						// Variable Battery: ex. battery=1623 => 16.23v

/* Ham Callback khi chuyen doi ADC hoan tat */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	battery_sum += ADC1->DR;						// tinh gia tri ADC trung binh trong 65000 lan lay mau , de dat duoc ket qua chinh xac
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_ADC_ConvCpltCallback+0x6c>)
 8001aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_ADC_ConvCpltCallback+0x70>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <HAL_ADC_ConvCpltCallback+0x70>)
 8001ad4:	6013      	str	r3, [r2, #0]
	battery_tik ++;
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <HAL_ADC_ConvCpltCallback+0x74>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_ADC_ConvCpltCallback+0x74>)
 8001ae0:	801a      	strh	r2, [r3, #0]
	if(battery_tik==65000){
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <HAL_ADC_ConvCpltCallback+0x74>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d117      	bne.n	8001b1e <HAL_ADC_ConvCpltCallback+0x5e>
		battery = ((battery_sum/battery_tik)*510)/100;  	//  Ratio ADC = 16,3/1,04 => Vbattery = Val_ADC*(3,3/1024)*(16,3/1,04) with ADC is 10bit
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_ADC_ConvCpltCallback+0x70>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <HAL_ADC_ConvCpltCallback+0x74>)
 8001af4:	8812      	ldrh	r2, [r2, #0]
 8001af6:	fbb3 f2f2 	udiv	r2, r3, r2
 8001afa:	4613      	mov	r3, r2
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	461a      	mov	r2, r3
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <HAL_ADC_ConvCpltCallback+0x78>)
 8001b06:	fba3 2302 	umull	r2, r3, r3, r2
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_ADC_ConvCpltCallback+0x7c>)
 8001b10:	801a      	strh	r2, [r3, #0]
		battery_sum =0;
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <HAL_ADC_ConvCpltCallback+0x70>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
		battery_tik=0;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_ADC_ConvCpltCallback+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	801a      	strh	r2, [r3, #0]
	}
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40012000 	.word	0x40012000
 8001b30:	2000afe0 	.word	0x2000afe0
 8001b34:	2000afe6 	.word	0x2000afe6
 8001b38:	51eb851f 	.word	0x51eb851f
 8001b3c:	2000afe4 	.word	0x2000afe4

08001b40 <batteryVoltInit>:

void batteryVoltInit()
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);						// Start ADC to get Battery Votl
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <batteryVoltInit+0x10>)
 8001b46:	f003 f8c7 	bl	8004cd8 <HAL_ADC_Start_IT>
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000af38 	.word	0x2000af38

08001b54 <batteryGet>:
uint16_t batteryGet()
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
	return battery;
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <batteryGet+0x14>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	2000afe4 	.word	0x2000afe4

08001b6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <MX_DMA_Init+0xb8>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a2a      	ldr	r2, [pc, #168]	; (8001c24 <MX_DMA_Init+0xb8>)
 8001b7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <MX_DMA_Init+0xb8>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <MX_DMA_Init+0xb8>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a23      	ldr	r2, [pc, #140]	; (8001c24 <MX_DMA_Init+0xb8>)
 8001b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <MX_DMA_Init+0xb8>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2105      	movs	r1, #5
 8001bae:	200b      	movs	r0, #11
 8001bb0:	f003 fd9d 	bl	80056ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001bb4:	200b      	movs	r0, #11
 8001bb6:	f003 fdb6 	bl	8005726 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	200c      	movs	r0, #12
 8001bc0:	f003 fd95 	bl	80056ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001bc4:	200c      	movs	r0, #12
 8001bc6:	f003 fdae 	bl	8005726 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2105      	movs	r1, #5
 8001bce:	200d      	movs	r0, #13
 8001bd0:	f003 fd8d 	bl	80056ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001bd4:	200d      	movs	r0, #13
 8001bd6:	f003 fda6 	bl	8005726 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2105      	movs	r1, #5
 8001bde:	2010      	movs	r0, #16
 8001be0:	f003 fd85 	bl	80056ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001be4:	2010      	movs	r0, #16
 8001be6:	f003 fd9e 	bl	8005726 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2105      	movs	r1, #5
 8001bee:	202f      	movs	r0, #47	; 0x2f
 8001bf0:	f003 fd7d 	bl	80056ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001bf4:	202f      	movs	r0, #47	; 0x2f
 8001bf6:	f003 fd96 	bl	8005726 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2105      	movs	r1, #5
 8001bfe:	2038      	movs	r0, #56	; 0x38
 8001c00:	f003 fd75 	bl	80056ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c04:	2038      	movs	r0, #56	; 0x38
 8001c06:	f003 fd8e 	bl	8005726 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2105      	movs	r1, #5
 8001c0e:	203a      	movs	r0, #58	; 0x3a
 8001c10:	f003 fd6d 	bl	80056ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001c14:	203a      	movs	r0, #58	; 0x3a
 8001c16:	f003 fd86 	bl	8005726 <HAL_NVIC_EnableIRQ>

}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800

08001c28 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001c2e:	2306      	movs	r3, #6
 8001c30:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c32:	2306      	movs	r3, #6
 8001c34:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	83fb      	strh	r3, [r7, #30]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8001c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c46:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001c4c:	4ba1      	ldr	r3, [pc, #644]	; (8001ed4 <EE_Init+0x2ac>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001c52:	4ba1      	ldr	r3, [pc, #644]	; (8001ed8 <EE_Init+0x2b0>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001c64:	2302      	movs	r3, #2
 8001c66:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8001c68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00b      	beq.n	8001c8a <EE_Init+0x62>
 8001c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c76:	f280 8196 	bge.w	8001fa6 <EE_Init+0x37e>
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80f8 	beq.w	8001e70 <EE_Init+0x248>
 8001c80:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d050      	beq.n	8001d2a <EE_Init+0x102>
 8001c88:	e18d      	b.n	8001fa6 <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8001c8a:	8c3b      	ldrh	r3, [r7, #32]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d116      	bne.n	8001cbe <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001c90:	4890      	ldr	r0, [pc, #576]	; (8001ed4 <EE_Init+0x2ac>)
 8001c92:	f000 f9a9 	bl	8001fe8 <EE_VerifyPageFullyErased>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f040 818e 	bne.w	8001fba <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001c9e:	f107 0214 	add.w	r2, r7, #20
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 fb22 	bl	80062f0 <HAL_FLASHEx_Erase>
 8001cac:	4603      	mov	r3, r0
 8001cae:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001cb0:	7efb      	ldrb	r3, [r7, #27]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8181 	beq.w	8001fba <EE_Init+0x392>
          {
            return FlashStatus;
 8001cb8:	7efb      	ldrb	r3, [r7, #27]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	e185      	b.n	8001fca <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8001cbe:	8c3b      	ldrh	r3, [r7, #32]
 8001cc0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d125      	bne.n	8001d14 <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001cc8:	4882      	ldr	r0, [pc, #520]	; (8001ed4 <EE_Init+0x2ac>)
 8001cca:	f000 f98d 	bl	8001fe8 <EE_VerifyPageFullyErased>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10e      	bne.n	8001cf2 <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001cd4:	f107 0214 	add.w	r2, r7, #20
 8001cd8:	463b      	mov	r3, r7
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f004 fb07 	bl	80062f0 <HAL_FLASHEx_Erase>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001ce6:	7efb      	ldrb	r3, [r7, #27]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <EE_Init+0xca>
          {
            return FlashStatus;
 8001cec:	7efb      	ldrb	r3, [r7, #27]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	e16b      	b.n	8001fca <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	4977      	ldr	r1, [pc, #476]	; (8001ed8 <EE_Init+0x2b0>)
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f004 f941 	bl	8005f84 <HAL_FLASH_Program>
 8001d02:	4603      	mov	r3, r0
 8001d04:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001d06:	7efb      	ldrb	r3, [r7, #27]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8156 	beq.w	8001fba <EE_Init+0x392>
        {
          return FlashStatus;
 8001d0e:	7efb      	ldrb	r3, [r7, #27]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	e15a      	b.n	8001fca <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001d14:	f000 f9fa 	bl	800210c <EE_Format>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001d1c:	7efb      	ldrb	r3, [r7, #27]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 814b 	beq.w	8001fba <EE_Init+0x392>
        {
          return FlashStatus;
 8001d24:	7efb      	ldrb	r3, [r7, #27]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	e14f      	b.n	8001fca <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001d2a:	8c3b      	ldrh	r3, [r7, #32]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d163      	bne.n	8001df8 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001d34:	e030      	b.n	8001d98 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001d36:	4b69      	ldr	r3, [pc, #420]	; (8001edc <EE_Init+0x2b4>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d3e:	4968      	ldr	r1, [pc, #416]	; (8001ee0 <EE_Init+0x2b8>)
 8001d40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d101      	bne.n	8001d4c <EE_Init+0x124>
          {
            x = VarIdx;
 8001d48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d4a:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8001d4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d4e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d01d      	beq.n	8001d92 <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d58:	4a61      	ldr	r2, [pc, #388]	; (8001ee0 <EE_Init+0x2b8>)
 8001d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d5e:	4961      	ldr	r1, [pc, #388]	; (8001ee4 <EE_Init+0x2bc>)
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f967 	bl	8002034 <EE_ReadVariable>
 8001d66:	4603      	mov	r3, r0
 8001d68:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001d6a:	8bbb      	ldrh	r3, [r7, #28]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d010      	beq.n	8001d92 <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d72:	4a5b      	ldr	r2, [pc, #364]	; (8001ee0 <EE_Init+0x2b8>)
 8001d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d78:	4a5a      	ldr	r2, [pc, #360]	; (8001ee4 <EE_Init+0x2bc>)
 8001d7a:	8812      	ldrh	r2, [r2, #0]
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 fa5c 	bl	800223c <EE_VerifyPageFullWriteVariable>
 8001d84:	4603      	mov	r3, r0
 8001d86:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001d88:	8bfb      	ldrh	r3, [r7, #30]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <EE_Init+0x16a>
              {
                return EepromStatus;
 8001d8e:	8bfb      	ldrh	r3, [r7, #30]
 8001d90:	e11b      	b.n	8001fca <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d94:	3301      	adds	r3, #1
 8001d96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001d98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d9cb      	bls.n	8001d36 <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	494b      	ldr	r1, [pc, #300]	; (8001ed4 <EE_Init+0x2ac>)
 8001da8:	2001      	movs	r0, #1
 8001daa:	f004 f8eb 	bl	8005f84 <HAL_FLASH_Program>
 8001dae:	4603      	mov	r3, r0
 8001db0:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001db2:	7efb      	ldrb	r3, [r7, #27]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <EE_Init+0x196>
        {
          return FlashStatus;
 8001db8:	7efb      	ldrb	r3, [r7, #27]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	e105      	b.n	8001fca <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001dca:	4843      	ldr	r0, [pc, #268]	; (8001ed8 <EE_Init+0x2b0>)
 8001dcc:	f000 f90c 	bl	8001fe8 <EE_VerifyPageFullyErased>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 80f3 	bne.w	8001fbe <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001dd8:	f107 0214 	add.w	r2, r7, #20
 8001ddc:	463b      	mov	r3, r7
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 fa85 	bl	80062f0 <HAL_FLASHEx_Erase>
 8001de6:	4603      	mov	r3, r0
 8001de8:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001dea:	7efb      	ldrb	r3, [r7, #27]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80e6 	beq.w	8001fbe <EE_Init+0x396>
          {
            return FlashStatus;
 8001df2:	7efb      	ldrb	r3, [r7, #27]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	e0e8      	b.n	8001fca <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8001df8:	8c3b      	ldrh	r3, [r7, #32]
 8001dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d12b      	bne.n	8001e5a <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001e02:	2303      	movs	r3, #3
 8001e04:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001e06:	2301      	movs	r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001e0e:	4832      	ldr	r0, [pc, #200]	; (8001ed8 <EE_Init+0x2b0>)
 8001e10:	f000 f8ea 	bl	8001fe8 <EE_VerifyPageFullyErased>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10e      	bne.n	8001e38 <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e1a:	f107 0214 	add.w	r2, r7, #20
 8001e1e:	463b      	mov	r3, r7
 8001e20:	4611      	mov	r1, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f004 fa64 	bl	80062f0 <HAL_FLASHEx_Erase>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001e2c:	7efb      	ldrb	r3, [r7, #27]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <EE_Init+0x210>
          {
            return FlashStatus;
 8001e32:	7efb      	ldrb	r3, [r7, #27]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	e0c8      	b.n	8001fca <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	4924      	ldr	r1, [pc, #144]	; (8001ed4 <EE_Init+0x2ac>)
 8001e42:	2001      	movs	r0, #1
 8001e44:	f004 f89e 	bl	8005f84 <HAL_FLASH_Program>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001e4c:	7efb      	ldrb	r3, [r7, #27]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80b5 	beq.w	8001fbe <EE_Init+0x396>
        {
          return FlashStatus;
 8001e54:	7efb      	ldrb	r3, [r7, #27]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	e0b7      	b.n	8001fca <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001e5a:	f000 f957 	bl	800210c <EE_Format>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001e62:	7efb      	ldrb	r3, [r7, #27]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80aa 	beq.w	8001fbe <EE_Init+0x396>
        {
          return FlashStatus;
 8001e6a:	7efb      	ldrb	r3, [r7, #27]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	e0ac      	b.n	8001fca <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8001e70:	8c3b      	ldrh	r3, [r7, #32]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10a      	bne.n	8001e8c <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001e76:	f000 f949 	bl	800210c <EE_Format>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001e7e:	7efb      	ldrb	r3, [r7, #27]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 809e 	beq.w	8001fc2 <EE_Init+0x39a>
        {
          return FlashStatus;
 8001e86:	7efb      	ldrb	r3, [r7, #27]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	e09e      	b.n	8001fca <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8001e8c:	8c3b      	ldrh	r3, [r7, #32]
 8001e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d11b      	bne.n	8001ece <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001e96:	2303      	movs	r3, #3
 8001e98:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001ea2:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <EE_Init+0x2b0>)
 8001ea4:	f000 f8a0 	bl	8001fe8 <EE_VerifyPageFullyErased>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f040 8089 	bne.w	8001fc2 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001eb0:	f107 0214 	add.w	r2, r7, #20
 8001eb4:	463b      	mov	r3, r7
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f004 fa19 	bl	80062f0 <HAL_FLASHEx_Erase>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001ec2:	7efb      	ldrb	r3, [r7, #27]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d07c      	beq.n	8001fc2 <EE_Init+0x39a>
          {
            return FlashStatus;
 8001ec8:	7efb      	ldrb	r3, [r7, #27]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	e07d      	b.n	8001fca <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001ed2:	e03a      	b.n	8001f4a <EE_Init+0x322>
 8001ed4:	08030000 	.word	0x08030000
 8001ed8:	08034000 	.word	0x08034000
 8001edc:	08030006 	.word	0x08030006
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	2000020a 	.word	0x2000020a
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001ee8:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <EE_Init+0x3ac>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ef0:	4939      	ldr	r1, [pc, #228]	; (8001fd8 <EE_Init+0x3b0>)
 8001ef2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d101      	bne.n	8001efe <EE_Init+0x2d6>
          {
            x = VarIdx;
 8001efa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001efc:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8001efe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001f00:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d01d      	beq.n	8001f44 <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001f08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f0a:	4a33      	ldr	r2, [pc, #204]	; (8001fd8 <EE_Init+0x3b0>)
 8001f0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f10:	4932      	ldr	r1, [pc, #200]	; (8001fdc <EE_Init+0x3b4>)
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f88e 	bl	8002034 <EE_ReadVariable>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001f1c:	8bbb      	ldrh	r3, [r7, #28]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d010      	beq.n	8001f44 <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001f22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f24:	4a2c      	ldr	r2, [pc, #176]	; (8001fd8 <EE_Init+0x3b0>)
 8001f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f2a:	4a2c      	ldr	r2, [pc, #176]	; (8001fdc <EE_Init+0x3b4>)
 8001f2c:	8812      	ldrh	r2, [r2, #0]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 f983 	bl	800223c <EE_VerifyPageFullWriteVariable>
 8001f36:	4603      	mov	r3, r0
 8001f38:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001f3a:	8bfb      	ldrh	r3, [r7, #30]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <EE_Init+0x31c>
              {
                return EepromStatus;
 8001f40:	8bfb      	ldrh	r3, [r7, #30]
 8001f42:	e042      	b.n	8001fca <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001f44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f46:	3301      	adds	r3, #1
 8001f48:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001f4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d9cb      	bls.n	8001ee8 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	4921      	ldr	r1, [pc, #132]	; (8001fe0 <EE_Init+0x3b8>)
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f004 f812 	bl	8005f84 <HAL_FLASH_Program>
 8001f60:	4603      	mov	r3, r0
 8001f62:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001f64:	7efb      	ldrb	r3, [r7, #27]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <EE_Init+0x348>
        {
          return FlashStatus;
 8001f6a:	7efb      	ldrb	r3, [r7, #27]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	e02c      	b.n	8001fca <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 8001f70:	2302      	movs	r3, #2
 8001f72:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001f7c:	4819      	ldr	r0, [pc, #100]	; (8001fe4 <EE_Init+0x3bc>)
 8001f7e:	f000 f833 	bl	8001fe8 <EE_VerifyPageFullyErased>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d11c      	bne.n	8001fc2 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001f88:	f107 0214 	add.w	r2, r7, #20
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f004 f9ad 	bl	80062f0 <HAL_FLASHEx_Erase>
 8001f96:	4603      	mov	r3, r0
 8001f98:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001f9a:	7efb      	ldrb	r3, [r7, #27]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d010      	beq.n	8001fc2 <EE_Init+0x39a>
          {
            return FlashStatus;
 8001fa0:	7efb      	ldrb	r3, [r7, #27]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	e011      	b.n	8001fca <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001fa6:	f000 f8b1 	bl	800210c <EE_Format>
 8001faa:	4603      	mov	r3, r0
 8001fac:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001fae:	7efb      	ldrb	r3, [r7, #27]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <EE_Init+0x39e>
      {
        return FlashStatus;
 8001fb4:	7efb      	ldrb	r3, [r7, #27]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	e007      	b.n	8001fca <EE_Init+0x3a2>
      break;
 8001fba:	bf00      	nop
 8001fbc:	e004      	b.n	8001fc8 <EE_Init+0x3a0>
      break;
 8001fbe:	bf00      	nop
 8001fc0:	e002      	b.n	8001fc8 <EE_Init+0x3a0>
      break;
 8001fc2:	bf00      	nop
 8001fc4:	e000      	b.n	8001fc8 <EE_Init+0x3a0>
      }
      break;
 8001fc6:	bf00      	nop
  }

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3728      	adds	r7, #40	; 0x28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	08034006 	.word	0x08034006
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	2000020a 	.word	0x2000020a
 8001fe0:	08034000 	.word	0x08034000
 8001fe4:	08030000 	.word	0x08030000

08001fe8 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8001ff4:	f245 5355 	movw	r3, #21845	; 0x5555
 8001ff8:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8001ffa:	e00d      	b.n	8002018 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8002002:	897b      	ldrh	r3, [r7, #10]
 8002004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002008:	4293      	cmp	r3, r2
 800200a:	d002      	beq.n	8002012 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]

      break;
 8002010:	e006      	b.n	8002020 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3304      	adds	r3, #4
 8002016:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <EE_VerifyPageFullyErased+0x48>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d3ed      	bcc.n	8001ffc <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	b29b      	uxth	r3, r3
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	08034000 	.word	0x08034000

08002034 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8002040:	2300      	movs	r3, #0
 8002042:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8002044:	f245 5355 	movw	r3, #21845	; 0x5555
 8002048:	81bb      	strh	r3, [r7, #12]
 800204a:	2301      	movs	r3, #1
 800204c:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 800204e:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <EE_ReadVariable+0x8c>)
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <EE_ReadVariable+0x8c>)
 8002054:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8002056:	2000      	movs	r0, #0
 8002058:	f000 f8aa 	bl	80021b0 <EE_FindValidPage>
 800205c:	4603      	mov	r3, r0
 800205e:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8002060:	89fb      	ldrh	r3, [r7, #14]
 8002062:	2bab      	cmp	r3, #171	; 0xab
 8002064:	d101      	bne.n	800206a <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8002066:	23ab      	movs	r3, #171	; 0xab
 8002068:	e025      	b.n	80020b6 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800206a:	89fb      	ldrh	r3, [r7, #14]
 800206c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002070:	330c      	adds	r3, #12
 8002072:	039b      	lsls	r3, r3, #14
 8002074:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8002076:	89fb      	ldrh	r3, [r7, #14]
 8002078:	3301      	adds	r3, #1
 800207a:	039a      	lsls	r2, r3, #14
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <EE_ReadVariable+0x90>)
 800207e:	4413      	add	r3, r2
 8002080:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8002082:	e012      	b.n	80020aa <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800208a:	89ba      	ldrh	r2, [r7, #12]
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	429a      	cmp	r2, r3
 8002090:	d108      	bne.n	80020a4 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	3b02      	subs	r3, #2
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b29a      	uxth	r2, r3
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	82fb      	strh	r3, [r7, #22]

      break;
 80020a2:	e007      	b.n	80020b4 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	3b04      	subs	r3, #4
 80020a8:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	3302      	adds	r3, #2
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d8e7      	bhi.n	8002084 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 80020b4:	8afb      	ldrh	r3, [r7, #22]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	08030000 	.word	0x08030000
 80020c4:	0802fffe 	.word	0x0802fffe

080020c8 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	460a      	mov	r2, r1
 80020d2:	80fb      	strh	r3, [r7, #6]
 80020d4:	4613      	mov	r3, r2
 80020d6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80020dc:	88ba      	ldrh	r2, [r7, #4]
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f8aa 	bl	800223c <EE_VerifyPageFullWriteVariable>
 80020e8:	4603      	mov	r3, r0
 80020ea:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80020ec:	89fb      	ldrh	r3, [r7, #14]
 80020ee:	2b80      	cmp	r3, #128	; 0x80
 80020f0:	d107      	bne.n	8002102 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80020f2:	88ba      	ldrh	r2, [r7, #4]
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 f8f9 	bl	80022f0 <EE_PageTransfer>
 80020fe:	4603      	mov	r3, r0
 8002100:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8002102:	89fb      	ldrh	r3, [r7, #14]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 800211e:	2302      	movs	r3, #2
 8002120:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8002122:	2301      	movs	r3, #1
 8002124:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002126:	2302      	movs	r3, #2
 8002128:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800212a:	481f      	ldr	r0, [pc, #124]	; (80021a8 <EE_Format+0x9c>)
 800212c:	f7ff ff5c 	bl	8001fe8 <EE_VerifyPageFullyErased>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10d      	bne.n	8002152 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8002136:	f107 0218 	add.w	r2, r7, #24
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f004 f8d6 	bl	80062f0 <HAL_FLASHEx_Erase>
 8002144:	4603      	mov	r3, r0
 8002146:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8002148:	7ffb      	ldrb	r3, [r7, #31]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <EE_Format+0x46>
    {
      return FlashStatus;
 800214e:	7ffb      	ldrb	r3, [r7, #31]
 8002150:	e025      	b.n	800219e <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	4913      	ldr	r1, [pc, #76]	; (80021a8 <EE_Format+0x9c>)
 800215c:	2001      	movs	r0, #1
 800215e:	f003 ff11 	bl	8005f84 <HAL_FLASH_Program>
 8002162:	4603      	mov	r3, r0
 8002164:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8002166:	7ffb      	ldrb	r3, [r7, #31]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <EE_Format+0x64>
  {
    return FlashStatus;
 800216c:	7ffb      	ldrb	r3, [r7, #31]
 800216e:	e016      	b.n	800219e <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8002170:	2303      	movs	r3, #3
 8002172:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8002174:	480d      	ldr	r0, [pc, #52]	; (80021ac <EE_Format+0xa0>)
 8002176:	f7ff ff37 	bl	8001fe8 <EE_VerifyPageFullyErased>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10d      	bne.n	800219c <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8002180:	f107 0218 	add.w	r2, r7, #24
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f004 f8b1 	bl	80062f0 <HAL_FLASHEx_Erase>
 800218e:	4603      	mov	r3, r0
 8002190:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8002192:	7ffb      	ldrb	r3, [r7, #31]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <EE_Format+0x90>
    {
      return FlashStatus;
 8002198:	7ffb      	ldrb	r3, [r7, #31]
 800219a:	e000      	b.n	800219e <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	08030000 	.word	0x08030000
 80021ac:	08034000 	.word	0x08034000

080021b0 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80021ba:	2306      	movs	r3, #6
 80021bc:	81fb      	strh	r3, [r7, #14]
 80021be:	2306      	movs	r3, #6
 80021c0:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80021c2:	4b1c      	ldr	r3, [pc, #112]	; (8002234 <EE_FindValidPage+0x84>)
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <EE_FindValidPage+0x88>)
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01b      	beq.n	800220c <EE_FindValidPage+0x5c>
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d125      	bne.n	8002224 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 80021d8:	89bb      	ldrh	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d108      	bne.n	80021f0 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 80021de:	89fb      	ldrh	r3, [r7, #14]
 80021e0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d101      	bne.n	80021ec <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 80021e8:	2300      	movs	r3, #0
 80021ea:	e01c      	b.n	8002226 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 80021ec:	2301      	movs	r3, #1
 80021ee:	e01a      	b.n	8002226 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 80021f0:	89fb      	ldrh	r3, [r7, #14]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d108      	bne.n	8002208 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 80021f6:	89bb      	ldrh	r3, [r7, #12]
 80021f8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d101      	bne.n	8002204 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8002200:	2301      	movs	r3, #1
 8002202:	e010      	b.n	8002226 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8002204:	2300      	movs	r3, #0
 8002206:	e00e      	b.n	8002226 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8002208:	23ab      	movs	r3, #171	; 0xab
 800220a:	e00c      	b.n	8002226 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 800220c:	89fb      	ldrh	r3, [r7, #14]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8002212:	2300      	movs	r3, #0
 8002214:	e007      	b.n	8002226 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8002216:	89bb      	ldrh	r3, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 800221c:	2301      	movs	r3, #1
 800221e:	e002      	b.n	8002226 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8002220:	23ab      	movs	r3, #171	; 0xab
 8002222:	e000      	b.n	8002226 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8002224:	2300      	movs	r3, #0
  }
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	08030000 	.word	0x08030000
 8002238:	08034000 	.word	0x08034000

0800223c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	460a      	mov	r2, r1
 8002246:	80fb      	strh	r3, [r7, #6]
 8002248:	4613      	mov	r3, r2
 800224a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8002250:	2300      	movs	r3, #0
 8002252:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8002254:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <EE_VerifyPageFullWriteVariable+0xa8>)
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <EE_VerifyPageFullWriteVariable+0xac>)
 800225a:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800225c:	2001      	movs	r0, #1
 800225e:	f7ff ffa7 	bl	80021b0 <EE_FindValidPage>
 8002262:	4603      	mov	r3, r0
 8002264:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8002266:	8a3b      	ldrh	r3, [r7, #16]
 8002268:	2bab      	cmp	r3, #171	; 0xab
 800226a:	d101      	bne.n	8002270 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 800226c:	23ab      	movs	r3, #171	; 0xab
 800226e:	e035      	b.n	80022dc <EE_VerifyPageFullWriteVariable+0xa0>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8002270:	8a3b      	ldrh	r3, [r7, #16]
 8002272:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002276:	330c      	adds	r3, #12
 8002278:	039b      	lsls	r3, r3, #14
 800227a:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 800227c:	8a3b      	ldrh	r3, [r7, #16]
 800227e:	3301      	adds	r3, #1
 8002280:	039a      	lsls	r2, r3, #14
 8002282:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <EE_VerifyPageFullWriteVariable+0xb0>)
 8002284:	4413      	add	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8002288:	e023      	b.n	80022d2 <EE_VerifyPageFullWriteVariable+0x96>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002292:	d11b      	bne.n	80022cc <EE_VerifyPageFullWriteVariable+0x90>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8002294:	88ba      	ldrh	r2, [r7, #4]
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	6979      	ldr	r1, [r7, #20]
 800229c:	2001      	movs	r0, #1
 800229e:	f003 fe71 	bl	8005f84 <HAL_FLASH_Program>
 80022a2:	4603      	mov	r3, r0
 80022a4:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80022a6:	7cfb      	ldrb	r3, [r7, #19]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <EE_VerifyPageFullWriteVariable+0x76>
      {
        return FlashStatus;
 80022ac:	7cfb      	ldrb	r3, [r7, #19]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	e014      	b.n	80022dc <EE_VerifyPageFullWriteVariable+0xa0>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	1c99      	adds	r1, r3, #2
 80022b6:	88fa      	ldrh	r2, [r7, #6]
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	2001      	movs	r0, #1
 80022be:	f003 fe61 	bl	8005f84 <HAL_FLASH_Program>
 80022c2:	4603      	mov	r3, r0
 80022c4:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 80022c6:	7cfb      	ldrb	r3, [r7, #19]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	e007      	b.n	80022dc <EE_VerifyPageFullWriteVariable+0xa0>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3304      	adds	r3, #4
 80022d0:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d3d7      	bcc.n	800228a <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80022da:	2380      	movs	r3, #128	; 0x80
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	08030000 	.word	0x08030000
 80022e8:	08034000 	.word	0x08034000
 80022ec:	0802ffff 	.word	0x0802ffff

080022f0 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	; 0x30
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	460a      	mov	r2, r1
 80022fa:	80fb      	strh	r3, [r7, #6]
 80022fc:	4613      	mov	r3, r2
 80022fe:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8002306:	4b54      	ldr	r3, [pc, #336]	; (8002458 <EE_PageTransfer+0x168>)
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 800230a:	2300      	movs	r3, #0
 800230c:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002312:	2300      	movs	r3, #0
 8002314:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	847b      	strh	r3, [r7, #34]	; 0x22
 800231a:	2300      	movs	r3, #0
 800231c:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8002322:	2000      	movs	r0, #0
 8002324:	f7ff ff44 	bl	80021b0 <EE_FindValidPage>
 8002328:	4603      	mov	r3, r0
 800232a:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 800232c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800232e:	2b01      	cmp	r3, #1
 8002330:	d104      	bne.n	800233c <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8002332:	4b49      	ldr	r3, [pc, #292]	; (8002458 <EE_PageTransfer+0x168>)
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8002336:	2303      	movs	r3, #3
 8002338:	857b      	strh	r3, [r7, #42]	; 0x2a
 800233a:	e009      	b.n	8002350 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 800233c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800233e:	2b00      	cmp	r3, #0
 8002340:	d104      	bne.n	800234c <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8002342:	4b46      	ldr	r3, [pc, #280]	; (800245c <EE_PageTransfer+0x16c>)
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8002346:	2302      	movs	r3, #2
 8002348:	857b      	strh	r3, [r7, #42]	; 0x2a
 800234a:	e001      	b.n	8002350 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 800234c:	23ab      	movs	r3, #171	; 0xab
 800234e:	e07e      	b.n	800244e <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8002350:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800235a:	2001      	movs	r0, #1
 800235c:	f003 fe12 	bl	8005f84 <HAL_FLASH_Program>
 8002360:	4603      	mov	r3, r0
 8002362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8002366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 800236e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002372:	b29b      	uxth	r3, r3
 8002374:	e06b      	b.n	800244e <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8002376:	88ba      	ldrh	r2, [r7, #4]
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff5d 	bl	800223c <EE_VerifyPageFullWriteVariable>
 8002382:	4603      	mov	r3, r0
 8002384:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8002386:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 800238c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800238e:	e05e      	b.n	800244e <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002390:	2300      	movs	r3, #0
 8002392:	853b      	strh	r3, [r7, #40]	; 0x28
 8002394:	e027      	b.n	80023e6 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8002396:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002398:	4a31      	ldr	r2, [pc, #196]	; (8002460 <EE_PageTransfer+0x170>)
 800239a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800239e:	88fa      	ldrh	r2, [r7, #6]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d01d      	beq.n	80023e0 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80023a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023a6:	4a2e      	ldr	r2, [pc, #184]	; (8002460 <EE_PageTransfer+0x170>)
 80023a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023ac:	492d      	ldr	r1, [pc, #180]	; (8002464 <EE_PageTransfer+0x174>)
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fe40 	bl	8002034 <EE_ReadVariable>
 80023b4:	4603      	mov	r3, r0
 80023b6:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 80023b8:	8c3b      	ldrh	r3, [r7, #32]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d010      	beq.n	80023e0 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80023be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023c0:	4a27      	ldr	r2, [pc, #156]	; (8002460 <EE_PageTransfer+0x170>)
 80023c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023c6:	4a27      	ldr	r2, [pc, #156]	; (8002464 <EE_PageTransfer+0x174>)
 80023c8:	8812      	ldrh	r2, [r2, #0]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff35 	bl	800223c <EE_VerifyPageFullWriteVariable>
 80023d2:	4603      	mov	r3, r0
 80023d4:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 80023d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 80023dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023de:	e036      	b.n	800244e <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80023e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023e2:	3301      	adds	r3, #1
 80023e4:	853b      	strh	r3, [r7, #40]	; 0x28
 80023e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d9d4      	bls.n	8002396 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 80023f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023f2:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 80023f4:	2301      	movs	r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80023f8:	2302      	movs	r3, #2
 80023fa:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 80023fc:	f107 021c 	add.w	r2, r7, #28
 8002400:	f107 0308 	add.w	r3, r7, #8
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f003 ff72 	bl	80062f0 <HAL_FLASHEx_Erase>
 800240c:	4603      	mov	r3, r0
 800240e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8002412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 800241a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800241e:	b29b      	uxth	r3, r3
 8002420:	e015      	b.n	800244e <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800242c:	2001      	movs	r0, #1
 800242e:	f003 fda9 	bl	8005f84 <HAL_FLASH_Program>
 8002432:	4603      	mov	r3, r0
 8002434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8002438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8002440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002444:	b29b      	uxth	r3, r3
 8002446:	e002      	b.n	800244e <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8002448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800244c:	b29b      	uxth	r3, r3
}
 800244e:	4618      	mov	r0, r3
 8002450:	3730      	adds	r7, #48	; 0x30
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	08030000 	.word	0x08030000
 800245c:	08034000 	.word	0x08034000
 8002460:	20000000 	.word	0x20000000
 8002464:	2000020a 	.word	0x2000020a

08002468 <HAL_TIM_PWM_PulseFinishedCallback>:
/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

// for Motor J1 J2
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)								// Stepper J1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a45      	ldr	r2, [pc, #276]	; (800258c <HAL_TIM_PWM_PulseFinishedCallback+0x124>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d138      	bne.n	80024ec <HAL_TIM_PWM_PulseFinishedCallback+0x84>
	{
		if(user_calibase==false) motor_j1_data._currentPos = data_AS5600_M1;			// Set Current Position
 800247a:	4b45      	ldr	r3, [pc, #276]	; (8002590 <HAL_TIM_PWM_PulseFinishedCallback+0x128>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	f083 0301 	eor.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d004      	beq.n	8002492 <HAL_TIM_PWM_PulseFinishedCallback+0x2a>
 8002488:	4b42      	ldr	r3, [pc, #264]	; (8002594 <HAL_TIM_PWM_PulseFinishedCallback+0x12c>)
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	4b42      	ldr	r3, [pc, #264]	; (8002598 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 8002490:	631a      	str	r2, [r3, #48]	; 0x30
		osSemaphoreRelease(binarySem_motorJ1Handle);		// Release Semaphore for Calculator Stepper (run)
 8002492:	4b42      	ldr	r3, [pc, #264]	; (800259c <HAL_TIM_PWM_PulseFinishedCallback+0x134>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f009 fe30 	bl	800c0fc <osSemaphoreRelease>
		if(user_calibase) return;
 800249c:	4b3c      	ldr	r3, [pc, #240]	; (8002590 <HAL_TIM_PWM_PulseFinishedCallback+0x128>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d16c      	bne.n	800257e <HAL_TIM_PWM_PulseFinishedCallback+0x116>
		accel_j1_tik++;
 80024a4:	4b3e      	ldr	r3, [pc, #248]	; (80025a0 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	3301      	adds	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	4b3c      	ldr	r3, [pc, #240]	; (80025a0 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 80024ae:	801a      	strh	r2, [r3, #0]
		if(accel_j1_tik==500)								// Changer Accel
 80024b0:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024b8:	d118      	bne.n	80024ec <HAL_TIM_PWM_PulseFinishedCallback+0x84>
		{
			accel_j1_tik=0;
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 80024bc:	2200      	movs	r2, #0
 80024be:	801a      	strh	r2, [r3, #0]
			long distance = distanceToGo(&motor_j1_data);
 80024c0:	4835      	ldr	r0, [pc, #212]	; (8002598 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 80024c2:	f7fe ffc3 	bl	800144c <distanceToGo>
 80024c6:	60f8      	str	r0, [r7, #12]
			if(labs(distance) < 150){
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f113 0f95 	cmn.w	r3, #149	; 0x95
 80024ce:	db08      	blt.n	80024e2 <HAL_TIM_PWM_PulseFinishedCallback+0x7a>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b95      	cmp	r3, #149	; 0x95
 80024d4:	dc05      	bgt.n	80024e2 <HAL_TIM_PWM_PulseFinishedCallback+0x7a>
				setAcceleration(&motor_j1_data, j1_ACCEL_MIN);
 80024d6:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80025a4 <HAL_TIM_PWM_PulseFinishedCallback+0x13c>
 80024da:	482f      	ldr	r0, [pc, #188]	; (8002598 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 80024dc:	f7fe fe58 	bl	8001190 <setAcceleration>
 80024e0:	e004      	b.n	80024ec <HAL_TIM_PWM_PulseFinishedCallback+0x84>
			}else{
				setAcceleration(&motor_j1_data, J1_ACCEL_MAX);
 80024e2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80025a8 <HAL_TIM_PWM_PulseFinishedCallback+0x140>
 80024e6:	482c      	ldr	r0, [pc, #176]	; (8002598 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 80024e8:	f7fe fe52 	bl	8001190 <setAcceleration>
			}
		}
	}
	if(htim->Instance==TIM2)								// Stepper J2
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f4:	d138      	bne.n	8002568 <HAL_TIM_PWM_PulseFinishedCallback+0x100>
	{
		if(user_calibase == false) motor_j2_data._currentPos = data_AS5600_M2;		// Set Current Position
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_TIM_PWM_PulseFinishedCallback+0x128>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	f083 0301 	eor.w	r3, r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d004      	beq.n	800250e <HAL_TIM_PWM_PulseFinishedCallback+0xa6>
 8002504:	4b29      	ldr	r3, [pc, #164]	; (80025ac <HAL_TIM_PWM_PulseFinishedCallback+0x144>)
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <HAL_TIM_PWM_PulseFinishedCallback+0x148>)
 800250c:	631a      	str	r2, [r3, #48]	; 0x30
		osSemaphoreRelease(binarySem_motorJ2Handle);	// Release Semaphore for Calculator Stepper (run)
 800250e:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <HAL_TIM_PWM_PulseFinishedCallback+0x14c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f009 fdf2 	bl	800c0fc <osSemaphoreRelease>
		if(user_calibase) return;
 8002518:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HAL_TIM_PWM_PulseFinishedCallback+0x128>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d130      	bne.n	8002582 <HAL_TIM_PWM_PulseFinishedCallback+0x11a>
		accel_j2_tik++;
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <HAL_TIM_PWM_PulseFinishedCallback+0x150>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <HAL_TIM_PWM_PulseFinishedCallback+0x150>)
 800252a:	801a      	strh	r2, [r3, #0]
		if(accel_j2_tik==500)
 800252c:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <HAL_TIM_PWM_PulseFinishedCallback+0x150>)
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002534:	d118      	bne.n	8002568 <HAL_TIM_PWM_PulseFinishedCallback+0x100>
		{
			accel_j2_tik=0;
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_TIM_PWM_PulseFinishedCallback+0x150>)
 8002538:	2200      	movs	r2, #0
 800253a:	801a      	strh	r2, [r3, #0]
			long distance = distanceToGo(&motor_j2_data);
 800253c:	481c      	ldr	r0, [pc, #112]	; (80025b0 <HAL_TIM_PWM_PulseFinishedCallback+0x148>)
 800253e:	f7fe ff85 	bl	800144c <distanceToGo>
 8002542:	60b8      	str	r0, [r7, #8]
			if(labs(distance) < 150){
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f113 0f95 	cmn.w	r3, #149	; 0x95
 800254a:	db08      	blt.n	800255e <HAL_TIM_PWM_PulseFinishedCallback+0xf6>
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b95      	cmp	r3, #149	; 0x95
 8002550:	dc05      	bgt.n	800255e <HAL_TIM_PWM_PulseFinishedCallback+0xf6>
				setAcceleration(&motor_j2_data, J2_ACCEL_MIN);
 8002552:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80025bc <HAL_TIM_PWM_PulseFinishedCallback+0x154>
 8002556:	4816      	ldr	r0, [pc, #88]	; (80025b0 <HAL_TIM_PWM_PulseFinishedCallback+0x148>)
 8002558:	f7fe fe1a 	bl	8001190 <setAcceleration>
 800255c:	e004      	b.n	8002568 <HAL_TIM_PWM_PulseFinishedCallback+0x100>
			}else{
				setAcceleration(&motor_j2_data, J2_ACCEL_MAX);
 800255e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80025c0 <HAL_TIM_PWM_PulseFinishedCallback+0x158>
 8002562:	4813      	ldr	r0, [pc, #76]	; (80025b0 <HAL_TIM_PWM_PulseFinishedCallback+0x148>)
 8002564:	f7fe fe14 	bl	8001190 <setAcceleration>
			}
		}
	}
	if(htim->Instance==TIM5)								// Stepper J3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a15      	ldr	r2, [pc, #84]	; (80025c4 <HAL_TIM_PWM_PulseFinishedCallback+0x15c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d108      	bne.n	8002584 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>
	{
		osSemaphoreRelease(binarySem_motorJ3Handle);	// Release Semaphore for Calculator Stepper (run)
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_TIM_PWM_PulseFinishedCallback+0x160>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f009 fdc0 	bl	800c0fc <osSemaphoreRelease>
 800257c:	e002      	b.n	8002584 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>
		if(user_calibase) return;
 800257e:	bf00      	nop
 8002580:	e000      	b.n	8002584 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>
		if(user_calibase) return;
 8002582:	bf00      	nop
	}
}
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40000400 	.word	0x40000400
 8002590:	2000020d 	.word	0x2000020d
 8002594:	2000af36 	.word	0x2000af36
 8002598:	2000b1d8 	.word	0x2000b1d8
 800259c:	2000b004 	.word	0x2000b004
 80025a0:	20000216 	.word	0x20000216
 80025a4:	47c35000 	.word	0x47c35000
 80025a8:	48f42400 	.word	0x48f42400
 80025ac:	2000af34 	.word	0x2000af34
 80025b0:	2000b178 	.word	0x2000b178
 80025b4:	2000b1d4 	.word	0x2000b1d4
 80025b8:	20000218 	.word	0x20000218
 80025bc:	47afc800 	.word	0x47afc800
 80025c0:	47ea6000 	.word	0x47ea6000
 80025c4:	40000c00 	.word	0x40000c00
 80025c8:	2000b15c 	.word	0x2000b15c

080025cc <HAL_I2C_AddrCallback>:

// I2C-Interface
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	70fb      	strb	r3, [r7, #3]
 80025d8:	4613      	mov	r3, r2
 80025da:	803b      	strh	r3, [r7, #0]
	if(hi2c->Instance==I2C2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0c      	ldr	r2, [pc, #48]	; (8002614 <HAL_I2C_AddrCallback+0x48>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d112      	bne.n	800260c <HAL_I2C_AddrCallback+0x40>
	{
		if(TransferDirection == I2C_DIRECTION_TRANSMIT)
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d106      	bne.n	80025fa <HAL_I2C_AddrCallback+0x2e>
		{
			HAL_I2C_Slave_Seq_Receive_DMA(&hi2c2,data_rev_master,4,I2C_FIRST_AND_LAST_FRAME);
 80025ec:	2308      	movs	r3, #8
 80025ee:	2204      	movs	r2, #4
 80025f0:	4909      	ldr	r1, [pc, #36]	; (8002618 <HAL_I2C_AddrCallback+0x4c>)
 80025f2:	480a      	ldr	r0, [pc, #40]	; (800261c <HAL_I2C_AddrCallback+0x50>)
 80025f4:	f004 fd72 	bl	80070dc <HAL_I2C_Slave_Seq_Receive_DMA>
		}else if(TransferDirection == I2C_DIRECTION_RECEIVE)
		{
			HAL_I2C_Slave_Seq_Transmit_DMA(&hi2c2, data_trans_master, 7, I2C_LAST_FRAME);
		}
	}
}
 80025f8:	e008      	b.n	800260c <HAL_I2C_AddrCallback+0x40>
		}else if(TransferDirection == I2C_DIRECTION_RECEIVE)
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d105      	bne.n	800260c <HAL_I2C_AddrCallback+0x40>
			HAL_I2C_Slave_Seq_Transmit_DMA(&hi2c2, data_trans_master, 7, I2C_LAST_FRAME);
 8002600:	2320      	movs	r3, #32
 8002602:	2207      	movs	r2, #7
 8002604:	4906      	ldr	r1, [pc, #24]	; (8002620 <HAL_I2C_AddrCallback+0x54>)
 8002606:	4805      	ldr	r0, [pc, #20]	; (800261c <HAL_I2C_AddrCallback+0x50>)
 8002608:	f004 fc2e 	bl	8006e68 <HAL_I2C_Slave_Seq_Transmit_DMA>
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40005800 	.word	0x40005800
 8002618:	2000affc 	.word	0x2000affc
 800261c:	2000b398 	.word	0x2000b398
 8002620:	2000b1cc 	.word	0x2000b1cc

08002624 <HAL_I2C_ListenCpltCallback>:
// 	I2C2 for interface
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(&hi2c2);
 800262c:	4803      	ldr	r0, [pc, #12]	; (800263c <HAL_I2C_ListenCpltCallback+0x18>)
 800262e:	f004 fe8f 	bl	8007350 <HAL_I2C_EnableListen_IT>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	2000b398 	.word	0x2000b398

08002640 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==I2C2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a05      	ldr	r2, [pc, #20]	; (8002664 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d104      	bne.n	800265c <HAL_I2C_SlaveRxCpltCallback+0x1c>
	{
		osSemaphoreRelease(binarySem_masterCmdHandle);// sau khi nhan duoc lenh tu master
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f009 fd50 	bl	800c0fc <osSemaphoreRelease>
	}
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40005800 	.word	0x40005800
 8002668:	2000b230 	.word	0x2000b230

0800266c <HAL_I2C_ErrorCallback>:

// Handler I2C Error
extern bool FLAG_AS5600_M1, FLAG_AS5600_M2;
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==I2C1){
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a10      	ldr	r2, [pc, #64]	; (80026bc <HAL_I2C_ErrorCallback+0x50>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d102      	bne.n	8002684 <HAL_I2C_ErrorCallback+0x18>
       FLAG_AS5600_M1 = HAL_ERROR;
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <HAL_I2C_ErrorCallback+0x54>)
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
	}
	if(hi2c->Instance==I2C3){
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <HAL_I2C_ErrorCallback+0x58>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d102      	bne.n	8002694 <HAL_I2C_ErrorCallback+0x28>
		FLAG_AS5600_M2 = HAL_ERROR;
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <HAL_I2C_ErrorCallback+0x5c>)
 8002690:	2201      	movs	r2, #1
 8002692:	701a      	strb	r2, [r3, #0]
	}
	 if(hi2c->Instance==I2C2){
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <HAL_I2C_ErrorCallback+0x60>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d109      	bne.n	80026b2 <HAL_I2C_ErrorCallback+0x46>
		 i2c_code_error = hi2c->ErrorCode;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a0b      	ldr	r2, [pc, #44]	; (80026d0 <HAL_I2C_ErrorCallback+0x64>)
 80026a4:	6013      	str	r3, [r2, #0]
		 printf("i2c-2 error:%d\r\n",(int)i2c_code_error);
 80026a6:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <HAL_I2C_ErrorCallback+0x64>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4809      	ldr	r0, [pc, #36]	; (80026d4 <HAL_I2C_ErrorCallback+0x68>)
 80026ae:	f00d f99f 	bl	800f9f0 <iprintf>
	 }
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40005400 	.word	0x40005400
 80026c0:	20000208 	.word	0x20000208
 80026c4:	40005c00 	.word	0x40005c00
 80026c8:	20000209 	.word	0x20000209
 80026cc:	40005800 	.word	0x40005800
 80026d0:	2000b168 	.word	0x2000b168
 80026d4:	08012194 	.word	0x08012194

080026d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a07      	ldr	r2, [pc, #28]	; (8002704 <vApplicationGetIdleTaskMemory+0x2c>)
 80026e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4a06      	ldr	r2, [pc, #24]	; (8002708 <vApplicationGetIdleTaskMemory+0x30>)
 80026ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	2000021c 	.word	0x2000021c
 8002708:	20000270 	.word	0x20000270

0800270c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4a07      	ldr	r2, [pc, #28]	; (8002738 <vApplicationGetTimerTaskMemory+0x2c>)
 800271c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	4a06      	ldr	r2, [pc, #24]	; (800273c <vApplicationGetTimerTaskMemory+0x30>)
 8002722:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800272a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	20000470 	.word	0x20000470
 800273c:	200004c4 	.word	0x200004c4

08002740 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002740:	b5b0      	push	{r4, r5, r7, lr}
 8002742:	b0ac      	sub	sp, #176	; 0xb0
 8002744:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySem_motorJ1 */
  osSemaphoreDef(binarySem_motorJ1);
 8002746:	2300      	movs	r3, #0
 8002748:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800274c:	2300      	movs	r3, #0
 800274e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  binarySem_motorJ1Handle = osSemaphoreCreate(osSemaphore(binarySem_motorJ1), 1);
 8002752:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002756:	2101      	movs	r1, #1
 8002758:	4618      	mov	r0, r3
 800275a:	f009 fc4e 	bl	800bffa <osSemaphoreCreate>
 800275e:	4603      	mov	r3, r0
 8002760:	4a47      	ldr	r2, [pc, #284]	; (8002880 <MX_FREERTOS_Init+0x140>)
 8002762:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySem_motorJ2 */
  osSemaphoreDef(binarySem_motorJ2);
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  binarySem_motorJ2Handle = osSemaphoreCreate(osSemaphore(binarySem_motorJ2), 1);
 8002770:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002774:	2101      	movs	r1, #1
 8002776:	4618      	mov	r0, r3
 8002778:	f009 fc3f 	bl	800bffa <osSemaphoreCreate>
 800277c:	4603      	mov	r3, r0
 800277e:	4a41      	ldr	r2, [pc, #260]	; (8002884 <MX_FREERTOS_Init+0x144>)
 8002780:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySem_masterCmd */
  osSemaphoreDef(binarySem_masterCmd);
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002788:	2300      	movs	r3, #0
 800278a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  binarySem_masterCmdHandle = osSemaphoreCreate(osSemaphore(binarySem_masterCmd), 1);
 800278e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002792:	2101      	movs	r1, #1
 8002794:	4618      	mov	r0, r3
 8002796:	f009 fc30 	bl	800bffa <osSemaphoreCreate>
 800279a:	4603      	mov	r3, r0
 800279c:	4a3a      	ldr	r2, [pc, #232]	; (8002888 <MX_FREERTOS_Init+0x148>)
 800279e:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySem_motorJ3 */
  osSemaphoreDef(binarySem_motorJ3);
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  binarySem_motorJ3Handle = osSemaphoreCreate(osSemaphore(binarySem_motorJ3), 1);
 80027ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027b0:	2101      	movs	r1, #1
 80027b2:	4618      	mov	r0, r3
 80027b4:	f009 fc21 	bl	800bffa <osSemaphoreCreate>
 80027b8:	4603      	mov	r3, r0
 80027ba:	4a34      	ldr	r2, [pc, #208]	; (800288c <MX_FREERTOS_Init+0x14c>)
 80027bc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 4096);
 80027be:	4b34      	ldr	r3, [pc, #208]	; (8002890 <MX_FREERTOS_Init+0x150>)
 80027c0:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80027c4:	461d      	mov	r5, r3
 80027c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80027d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027d6:	2100      	movs	r1, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f009 fbae 	bl	800bf3a <osThreadCreate>
 80027de:	4603      	mov	r3, r0
 80027e0:	4a2c      	ldr	r2, [pc, #176]	; (8002894 <MX_FREERTOS_Init+0x154>)
 80027e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorJ1Task */
  osThreadDef(motorJ1Task, StartTaskMotorJ1, osPriorityHigh, 0, 2048);
 80027e4:	4b2c      	ldr	r3, [pc, #176]	; (8002898 <MX_FREERTOS_Init+0x158>)
 80027e6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80027ea:	461d      	mov	r5, r3
 80027ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorJ1TaskHandle = osThreadCreate(osThread(motorJ1Task), NULL);
 80027f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f009 fb9b 	bl	800bf3a <osThreadCreate>
 8002804:	4603      	mov	r3, r0
 8002806:	4a25      	ldr	r2, [pc, #148]	; (800289c <MX_FREERTOS_Init+0x15c>)
 8002808:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorJ2Task */
  osThreadDef(motorJ2Task, StartTaskMotorJ2, osPriorityHigh, 0, 2048);
 800280a:	4b25      	ldr	r3, [pc, #148]	; (80028a0 <MX_FREERTOS_Init+0x160>)
 800280c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002810:	461d      	mov	r5, r3
 8002812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002816:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800281a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorJ2TaskHandle = osThreadCreate(osThread(motorJ2Task), NULL);
 800281e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f009 fb88 	bl	800bf3a <osThreadCreate>
 800282a:	4603      	mov	r3, r0
 800282c:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <MX_FREERTOS_Init+0x164>)
 800282e:	6013      	str	r3, [r2, #0]

  /* definition and creation of moveTask */
  osThreadDef(moveTask, StartTaskMove, osPriorityRealtime, 0, 1024);
 8002830:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <MX_FREERTOS_Init+0x168>)
 8002832:	f107 0420 	add.w	r4, r7, #32
 8002836:	461d      	mov	r5, r3
 8002838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800283a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800283c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002840:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  moveTaskHandle = osThreadCreate(osThread(moveTask), NULL);
 8002844:	f107 0320 	add.w	r3, r7, #32
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f009 fb75 	bl	800bf3a <osThreadCreate>
 8002850:	4603      	mov	r3, r0
 8002852:	4a16      	ldr	r2, [pc, #88]	; (80028ac <MX_FREERTOS_Init+0x16c>)
 8002854:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorJ3Task */
  osThreadDef(motorJ3Task, StartTaskMotorJ3, osPriorityHigh, 0, 1024);
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <MX_FREERTOS_Init+0x170>)
 8002858:	1d3c      	adds	r4, r7, #4
 800285a:	461d      	mov	r5, r3
 800285c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800285e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002860:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002864:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorJ3TaskHandle = osThreadCreate(osThread(motorJ3Task), NULL);
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f009 fb64 	bl	800bf3a <osThreadCreate>
 8002872:	4603      	mov	r3, r0
 8002874:	4a0f      	ldr	r2, [pc, #60]	; (80028b4 <MX_FREERTOS_Init+0x174>)
 8002876:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002878:	bf00      	nop
 800287a:	37b0      	adds	r7, #176	; 0xb0
 800287c:	46bd      	mov	sp, r7
 800287e:	bdb0      	pop	{r4, r5, r7, pc}
 8002880:	2000b004 	.word	0x2000b004
 8002884:	2000b1d4 	.word	0x2000b1d4
 8002888:	2000b230 	.word	0x2000b230
 800288c:	2000b15c 	.word	0x2000b15c
 8002890:	080121a8 	.word	0x080121a8
 8002894:	2000afec 	.word	0x2000afec
 8002898:	080121c4 	.word	0x080121c4
 800289c:	2000afe8 	.word	0x2000afe8
 80028a0:	080121e0 	.word	0x080121e0
 80028a4:	2000b238 	.word	0x2000b238
 80028a8:	080121fc 	.word	0x080121fc
 80028ac:	2000b000 	.word	0x2000b000
 80028b0:	08012218 	.word	0x08012218
 80028b4:	2000b22c 	.word	0x2000b22c

080028b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void const * argument)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	for(int k=0;k<6;k++){				// nháy LED 3 lần khi khởi động
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	e00a      	b.n	80028dc <StartDefaultTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80028c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ca:	480e      	ldr	r0, [pc, #56]	; (8002904 <StartDefaultTask+0x4c>)
 80028cc:	f003 ffe7 	bl	800689e <HAL_GPIO_TogglePin>
		osDelay(250);
 80028d0:	20fa      	movs	r0, #250	; 0xfa
 80028d2:	f009 fb7e 	bl	800bfd2 <osDelay>
	for(int k=0;k<6;k++){				// nháy LED 3 lần khi khởi động
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3301      	adds	r3, #1
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b05      	cmp	r3, #5
 80028e0:	ddf1      	ble.n	80028c6 <StartDefaultTask+0xe>
	}
#ifdef MDEBUG
	printf("Robochess 2021\r\n");		// in thông báo khởi tạo qua UART2
 80028e2:	4809      	ldr	r0, [pc, #36]	; (8002908 <StartDefaultTask+0x50>)
 80028e4:	f00d f90a 	bl	800fafc <puts>
#endif
	readSquarePosition();				// đọc vị trí Squares từ EEPROM-SIMULATOR
 80028e8:	f000 fc8e 	bl	8003208 <readSquarePosition>
	AS5600_Start_Update();				// Start Tim10 & get data of AS5600
 80028ec:	f7fe fb58 	bl	8000fa0 <AS5600_Start_Update>
	batteryVoltInit();
 80028f0:	f7ff f926 	bl	8001b40 <batteryVoltInit>
	pickAndDropInit();
 80028f4:	f000 fcc6 	bl	8003284 <pickAndDropInit>
  /* Infinite loop */
  for(;;)
  {
	  updateInfo(); // edit -> tách biệt các nhiệm vụ, chỉ cần đọc các thông tin khi có yêu cầu
 80028f8:	f000 fb7a 	bl	8002ff0 <updateInfo>
		  	printf("next square:%d\r\n",num_squa);
		  }
		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  }
#endif
	  osDelay(50);
 80028fc:	2032      	movs	r0, #50	; 0x32
 80028fe:	f009 fb68 	bl	800bfd2 <osDelay>
	  updateInfo(); // edit -> tách biệt các nhiệm vụ, chỉ cần đọc các thông tin khi có yêu cầu
 8002902:	e7f9      	b.n	80028f8 <StartDefaultTask+0x40>
 8002904:	40020000 	.word	0x40020000
 8002908:	08012234 	.word	0x08012234

0800290c <StartTaskMotorJ1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMotorJ1 */
__weak void StartTaskMotorJ1(void const * argument)
{
 800290c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800290e:	b095      	sub	sp, #84	; 0x54
 8002910:	af12      	add	r7, sp, #72	; 0x48
 8002912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMotorJ1 */
	printf("Robochess 2021 -taskJ1\r\n");
 8002914:	4822      	ldr	r0, [pc, #136]	; (80029a0 <StartTaskMotorJ1+0x94>)
 8002916:	f00d f8f1 	bl	800fafc <puts>
		osDelay(2000);						// Wait for finish Init
 800291a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800291e:	f009 fb58 	bl	800bfd2 <osDelay>
		motor_j1_data.GPIO_PIN_Dir		= J1_DIR_Pin;
 8002922:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <StartTaskMotorJ1+0x98>)
 8002924:	2202      	movs	r2, #2
 8002926:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		motor_j1_data.GPIO_PORT_Dir		= J1_DIR_GPIO_Port;
 800292a:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <StartTaskMotorJ1+0x98>)
 800292c:	4a1e      	ldr	r2, [pc, #120]	; (80029a8 <StartTaskMotorJ1+0x9c>)
 800292e:	63da      	str	r2, [r3, #60]	; 0x3c
		motor_j1_data.GPIO_PORT_Enable	= J1_EN_GPIO_Port;
 8002930:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <StartTaskMotorJ1+0x98>)
 8002932:	4a1d      	ldr	r2, [pc, #116]	; (80029a8 <StartTaskMotorJ1+0x9c>)
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
		motor_j1_data.GPIO_PIN_Enable	= J1_EN_Pin;
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <StartTaskMotorJ1+0x98>)
 8002938:	2204      	movs	r2, #4
 800293a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		motor_j1_data.USER_TIMER		= TIM3;
 800293e:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <StartTaskMotorJ1+0x98>)
 8002940:	4a1a      	ldr	r2, [pc, #104]	; (80029ac <StartTaskMotorJ1+0xa0>)
 8002942:	649a      	str	r2, [r3, #72]	; 0x48
		motor_j1_data.TIM_CHANEL		= TIM_CHANNEL_3;
 8002944:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <StartTaskMotorJ1+0x98>)
 8002946:	2208      	movs	r2, #8
 8002948:	64da      	str	r2, [r3, #76]	; 0x4c
		motor_j1_data.isStop			= false;
 800294a:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <StartTaskMotorJ1+0x98>)
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		AccelStepper_init(&motor_j1_data, htim3, data_AS5600_M1, J1_SPEED, J1_ACCEL_MAX);
 8002952:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <StartTaskMotorJ1+0xa4>)
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	4e17      	ldr	r6, [pc, #92]	; (80029b4 <StartTaskMotorJ1+0xa8>)
 8002958:	4a17      	ldr	r2, [pc, #92]	; (80029b8 <StartTaskMotorJ1+0xac>)
 800295a:	9211      	str	r2, [sp, #68]	; 0x44
 800295c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8002960:	9210      	str	r2, [sp, #64]	; 0x40
 8002962:	930f      	str	r3, [sp, #60]	; 0x3c
 8002964:	466d      	mov	r5, sp
 8002966:	f106 040c 	add.w	r4, r6, #12
 800296a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800296c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800296e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002976:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800297a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800297e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002982:	4808      	ldr	r0, [pc, #32]	; (80029a4 <StartTaskMotorJ1+0x98>)
 8002984:	f7fe fb38 	bl	8000ff8 <AccelStepper_init>
	}
#endif
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(binarySem_motorJ1Handle, osWaitForever);
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <StartTaskMotorJ1+0xb0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002990:	4618      	mov	r0, r3
 8002992:	f009 fb65 	bl	800c060 <osSemaphoreWait>
	  	  run(&motor_j1_data);
 8002996:	4803      	ldr	r0, [pc, #12]	; (80029a4 <StartTaskMotorJ1+0x98>)
 8002998:	f7fe fd68 	bl	800146c <run>
	  osSemaphoreWait(binarySem_motorJ1Handle, osWaitForever);
 800299c:	e7f4      	b.n	8002988 <StartTaskMotorJ1+0x7c>
 800299e:	bf00      	nop
 80029a0:	08012244 	.word	0x08012244
 80029a4:	2000b1d8 	.word	0x2000b1d8
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40000400 	.word	0x40000400
 80029b0:	2000af36 	.word	0x2000af36
 80029b4:	2000b818 	.word	0x2000b818
 80029b8:	0007a120 	.word	0x0007a120
 80029bc:	2000b004 	.word	0x2000b004

080029c0 <StartTaskMotorJ2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMotorJ2 */
__weak void StartTaskMotorJ2(void const * argument)
{
 80029c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c2:	b095      	sub	sp, #84	; 0x54
 80029c4:	af12      	add	r7, sp, #72	; 0x48
 80029c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMotorJ2 */

		osDelay(2000);						// Wait for finish Init
 80029c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029cc:	f009 fb01 	bl	800bfd2 <osDelay>
		motor_j2_data.GPIO_PIN_Dir		= J2_DIR_Pin;
 80029d0:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <StartTaskMotorJ2+0x90>)
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		motor_j2_data.GPIO_PORT_Dir		= J2_DIR_GPIO_Port;
 80029d8:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <StartTaskMotorJ2+0x90>)
 80029da:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <StartTaskMotorJ2+0x94>)
 80029dc:	63da      	str	r2, [r3, #60]	; 0x3c
		motor_j2_data.GPIO_PORT_Enable	= J2_EN_GPIO_Port;
 80029de:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <StartTaskMotorJ2+0x90>)
 80029e0:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <StartTaskMotorJ2+0x94>)
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40
		motor_j2_data.GPIO_PIN_Enable	= J2_EN_Pin;
 80029e4:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <StartTaskMotorJ2+0x90>)
 80029e6:	2280      	movs	r2, #128	; 0x80
 80029e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		motor_j2_data.USER_TIMER		= TIM2;
 80029ec:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <StartTaskMotorJ2+0x90>)
 80029ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029f2:	649a      	str	r2, [r3, #72]	; 0x48
		motor_j2_data.TIM_CHANEL		= TIM_CHANNEL_1;
 80029f4:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <StartTaskMotorJ2+0x90>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	64da      	str	r2, [r3, #76]	; 0x4c
		motor_j2_data.isStop			= false;
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <StartTaskMotorJ2+0x90>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		AccelStepper_init(&motor_j2_data, htim2, data_AS5600_M2, J2_SPEED, J2_ACCEL_MAX);
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <StartTaskMotorJ2+0x98>)
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	4e15      	ldr	r6, [pc, #84]	; (8002a5c <StartTaskMotorJ2+0x9c>)
 8002a08:	4a15      	ldr	r2, [pc, #84]	; (8002a60 <StartTaskMotorJ2+0xa0>)
 8002a0a:	9211      	str	r2, [sp, #68]	; 0x44
 8002a0c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002a10:	9210      	str	r2, [sp, #64]	; 0x40
 8002a12:	930f      	str	r3, [sp, #60]	; 0x3c
 8002a14:	466d      	mov	r5, sp
 8002a16:	f106 040c 	add.w	r4, r6, #12
 8002a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a26:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002a2a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002a2e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002a32:	4807      	ldr	r0, [pc, #28]	; (8002a50 <StartTaskMotorJ2+0x90>)
 8002a34:	f7fe fae0 	bl	8000ff8 <AccelStepper_init>
	}
#endif
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(binarySem_motorJ2Handle, osWaitForever);
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <StartTaskMotorJ2+0xa4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a40:	4618      	mov	r0, r3
 8002a42:	f009 fb0d 	bl	800c060 <osSemaphoreWait>
	  run(&motor_j2_data);
 8002a46:	4802      	ldr	r0, [pc, #8]	; (8002a50 <StartTaskMotorJ2+0x90>)
 8002a48:	f7fe fd10 	bl	800146c <run>
	  osSemaphoreWait(binarySem_motorJ2Handle, osWaitForever);
 8002a4c:	e7f4      	b.n	8002a38 <StartTaskMotorJ2+0x78>
 8002a4e:	bf00      	nop
 8002a50:	2000b178 	.word	0x2000b178
 8002a54:	40020000 	.word	0x40020000
 8002a58:	2000af34 	.word	0x2000af34
 8002a5c:	2000b860 	.word	0x2000b860
 8002a60:	0001d4c0 	.word	0x0001d4c0
 8002a64:	2000b1d4 	.word	0x2000b1d4

08002a68 <StartTaskMove>:
 * 	[STATUS] = [HAL_UP] [HAL_DOWN] [CHARGING] [MOVE_FINISH]
 * */
#define TEST_DISABLE_STEPPER
/* USER CODE END Header_StartTaskMove */
__weak void StartTaskMove(void const * argument)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMove */
	HAL_I2C_EnableListen_IT(&hi2c2);	// khởi tạo giao tiếp I2C với SoC (Address = 0x23)
 8002a70:	4862      	ldr	r0, [pc, #392]	; (8002bfc <StartTaskMove+0x194>)
 8002a72:	f004 fc6d 	bl	8007350 <HAL_I2C_EnableListen_IT>
  /* Infinite loop */
	for (;;) {
		osSemaphoreWait(binarySem_masterCmdHandle, osWaitForever);
 8002a76:	4b62      	ldr	r3, [pc, #392]	; (8002c00 <StartTaskMove+0x198>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f009 faee 	bl	800c060 <osSemaphoreWait>

		if (data_rev_master[0] == CMD_GRIPPER){
 8002a84:	4b5f      	ldr	r3, [pc, #380]	; (8002c04 <StartTaskMove+0x19c>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b47      	cmp	r3, #71	; 0x47
 8002a8a:	d117      	bne.n	8002abc <StartTaskMove+0x54>
			  if(data_rev_master[1]==0){
 8002a8c:	4b5d      	ldr	r3, [pc, #372]	; (8002c04 <StartTaskMove+0x19c>)
 8002a8e:	785b      	ldrb	r3, [r3, #1]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d107      	bne.n	8002aa4 <StartTaskMove+0x3c>
				  SERVO_DROP;
 8002a94:	4b5c      	ldr	r3, [pc, #368]	; (8002c08 <StartTaskMove+0x1a0>)
 8002a96:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002a9a:	63da      	str	r2, [r3, #60]	; 0x3c
				  printf("Gripper open\r\n");
 8002a9c:	485b      	ldr	r0, [pc, #364]	; (8002c0c <StartTaskMove+0x1a4>)
 8002a9e:	f00d f82d 	bl	800fafc <puts>
 8002aa2:	e7e8      	b.n	8002a76 <StartTaskMove+0xe>
			  }else if(data_rev_master[1]==1){
 8002aa4:	4b57      	ldr	r3, [pc, #348]	; (8002c04 <StartTaskMove+0x19c>)
 8002aa6:	785b      	ldrb	r3, [r3, #1]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d1e4      	bne.n	8002a76 <StartTaskMove+0xe>
				  SERVO_PICKUP;
 8002aac:	4b56      	ldr	r3, [pc, #344]	; (8002c08 <StartTaskMove+0x1a0>)
 8002aae:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002ab2:	63da      	str	r2, [r3, #60]	; 0x3c
				  printf("Gripper close\r\n");
 8002ab4:	4856      	ldr	r0, [pc, #344]	; (8002c10 <StartTaskMove+0x1a8>)
 8002ab6:	f00d f821 	bl	800fafc <puts>
 8002aba:	e7dc      	b.n	8002a76 <StartTaskMove+0xe>
			  }
		}else if (data_rev_master[0] == CMD_PICK){
 8002abc:	4b51      	ldr	r3, [pc, #324]	; (8002c04 <StartTaskMove+0x19c>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b70      	cmp	r3, #112	; 0x70
 8002ac2:	d114      	bne.n	8002aee <StartTaskMove+0x86>
			if(data_rev_master[1]==0){
 8002ac4:	4b4f      	ldr	r3, [pc, #316]	; (8002c04 <StartTaskMove+0x19c>)
 8002ac6:	785b      	ldrb	r3, [r3, #1]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d105      	bne.n	8002ad8 <StartTaskMove+0x70>
				printf("J3 MOVE DOWN\r\n");
 8002acc:	4851      	ldr	r0, [pc, #324]	; (8002c14 <StartTaskMove+0x1ac>)
 8002ace:	f00d f815 	bl	800fafc <puts>
//#ifndef TEST_DISABLE_STEPPER
				j3MoveDown();
 8002ad2:	f000 fca3 	bl	800341c <j3MoveDown>
 8002ad6:	e7ce      	b.n	8002a76 <StartTaskMove+0xe>
//#endif
			}else if(data_rev_master[1]==1){
 8002ad8:	4b4a      	ldr	r3, [pc, #296]	; (8002c04 <StartTaskMove+0x19c>)
 8002ada:	785b      	ldrb	r3, [r3, #1]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d1ca      	bne.n	8002a76 <StartTaskMove+0xe>
				printf("J3 MOVE UP\r\n");
 8002ae0:	484d      	ldr	r0, [pc, #308]	; (8002c18 <StartTaskMove+0x1b0>)
 8002ae2:	f00d f80b 	bl	800fafc <puts>
//#ifndef TEST_DISABLE_STEPPER
				j3MoveUp(false);
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f000 fc50 	bl	800338c <j3MoveUp>
 8002aec:	e7c3      	b.n	8002a76 <StartTaskMove+0xe>
//#endif
			}
		}else if (data_rev_master[0] == CMD_PICKPIECE){
 8002aee:	4b45      	ldr	r3, [pc, #276]	; (8002c04 <StartTaskMove+0x19c>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b50      	cmp	r3, #80	; 0x50
 8002af4:	d113      	bne.n	8002b1e <StartTaskMove+0xb6>
			if(data_rev_master[1]==0){
 8002af6:	4b43      	ldr	r3, [pc, #268]	; (8002c04 <StartTaskMove+0x19c>)
 8002af8:	785b      	ldrb	r3, [r3, #1]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d105      	bne.n	8002b0a <StartTaskMove+0xa2>
				printf("DROP PIECE\r\n");
 8002afe:	4847      	ldr	r0, [pc, #284]	; (8002c1c <StartTaskMove+0x1b4>)
 8002b00:	f00c fffc 	bl	800fafc <puts>
//#ifndef TEST_DISABLE_STEPPER
				dropPiece();
 8002b04:	f000 fc2e 	bl	8003364 <dropPiece>
 8002b08:	e7b5      	b.n	8002a76 <StartTaskMove+0xe>
//#endif
			}else if(data_rev_master[1]==1){
 8002b0a:	4b3e      	ldr	r3, [pc, #248]	; (8002c04 <StartTaskMove+0x19c>)
 8002b0c:	785b      	ldrb	r3, [r3, #1]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d1b1      	bne.n	8002a76 <StartTaskMove+0xe>
				printf("PICKUP PIECE\r\n");
 8002b12:	4843      	ldr	r0, [pc, #268]	; (8002c20 <StartTaskMove+0x1b8>)
 8002b14:	f00c fff2 	bl	800fafc <puts>
//#ifndef TEST_DISABLE_STEPPER
				pickupPiece();
 8002b18:	f000 fbfc 	bl	8003314 <pickupPiece>
 8002b1c:	e7ab      	b.n	8002a76 <StartTaskMove+0xe>
//#endif
			}
		}else if (data_rev_master[0] == CMD_MOVE){
 8002b1e:	4b39      	ldr	r3, [pc, #228]	; (8002c04 <StartTaskMove+0x19c>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b6d      	cmp	r3, #109	; 0x6d
 8002b24:	d117      	bne.n	8002b56 <StartTaskMove+0xee>
			if(data_rev_master[1]>=0 && data_rev_master[1]<80){
 8002b26:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <StartTaskMove+0x19c>)
 8002b28:	785b      	ldrb	r3, [r3, #1]
 8002b2a:	2b4f      	cmp	r3, #79	; 0x4f
 8002b2c:	d80c      	bhi.n	8002b48 <StartTaskMove+0xe0>
				printf("MOVE TO SQUARE:%d\r\n",data_rev_master[1]);
 8002b2e:	4b35      	ldr	r3, [pc, #212]	; (8002c04 <StartTaskMove+0x19c>)
 8002b30:	785b      	ldrb	r3, [r3, #1]
 8002b32:	4619      	mov	r1, r3
 8002b34:	483b      	ldr	r0, [pc, #236]	; (8002c24 <StartTaskMove+0x1bc>)
 8002b36:	f00c ff5b 	bl	800f9f0 <iprintf>
//#ifndef TEST_DISABLE_STEPPER
				moveToSquare(data_rev_master[1], false);
 8002b3a:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <StartTaskMove+0x19c>)
 8002b3c:	785b      	ldrb	r3, [r3, #1]
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 f8d1 	bl	8002ce8 <moveToSquare>
 8002b46:	e796      	b.n	8002a76 <StartTaskMove+0xe>
//#endif
			}else{
				printf("ERROR! Cannot move to square %d\r\n",data_rev_master[1]);
 8002b48:	4b2e      	ldr	r3, [pc, #184]	; (8002c04 <StartTaskMove+0x19c>)
 8002b4a:	785b      	ldrb	r3, [r3, #1]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4836      	ldr	r0, [pc, #216]	; (8002c28 <StartTaskMove+0x1c0>)
 8002b50:	f00c ff4e 	bl	800f9f0 <iprintf>
 8002b54:	e78f      	b.n	8002a76 <StartTaskMove+0xe>
			}
		}else if (data_rev_master[0] == CMD_MOVEPIECE){
 8002b56:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <StartTaskMove+0x19c>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b4d      	cmp	r3, #77	; 0x4d
 8002b5c:	d126      	bne.n	8002bac <StartTaskMove+0x144>
			moveIsFinish = false;
 8002b5e:	4b33      	ldr	r3, [pc, #204]	; (8002c2c <StartTaskMove+0x1c4>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
			if((data_rev_master[1]>=0 && data_rev_master[1]<80) && (data_rev_master[2]>=0 && data_rev_master[2]<80)){
 8002b64:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <StartTaskMove+0x19c>)
 8002b66:	785b      	ldrb	r3, [r3, #1]
 8002b68:	2b4f      	cmp	r3, #79	; 0x4f
 8002b6a:	d81b      	bhi.n	8002ba4 <StartTaskMove+0x13c>
 8002b6c:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <StartTaskMove+0x19c>)
 8002b6e:	789b      	ldrb	r3, [r3, #2]
 8002b70:	2b4f      	cmp	r3, #79	; 0x4f
 8002b72:	d817      	bhi.n	8002ba4 <StartTaskMove+0x13c>
				printf("MOVEPIECE %d->%d Option:%d\r\n",data_rev_master[1],data_rev_master[2],data_rev_master[3]);
 8002b74:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <StartTaskMove+0x19c>)
 8002b76:	785b      	ldrb	r3, [r3, #1]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <StartTaskMove+0x19c>)
 8002b7c:	789b      	ldrb	r3, [r3, #2]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <StartTaskMove+0x19c>)
 8002b82:	78db      	ldrb	r3, [r3, #3]
 8002b84:	482a      	ldr	r0, [pc, #168]	; (8002c30 <StartTaskMove+0x1c8>)
 8002b86:	f00c ff33 	bl	800f9f0 <iprintf>
//#ifndef TEST_DISABLE_STEPPER
				movePiece(data_rev_master[1], data_rev_master[2], data_rev_master[3]);
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <StartTaskMove+0x19c>)
 8002b8c:	785b      	ldrb	r3, [r3, #1]
 8002b8e:	4a1d      	ldr	r2, [pc, #116]	; (8002c04 <StartTaskMove+0x19c>)
 8002b90:	7891      	ldrb	r1, [r2, #2]
 8002b92:	4a1c      	ldr	r2, [pc, #112]	; (8002c04 <StartTaskMove+0x19c>)
 8002b94:	78d2      	ldrb	r2, [r2, #3]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 f93a 	bl	8002e10 <movePiece>
//#endif
				moveIsFinish = true;
 8002b9c:	4b23      	ldr	r3, [pc, #140]	; (8002c2c <StartTaskMove+0x1c4>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	e029      	b.n	8002bf8 <StartTaskMove+0x190>
			}else{
				printf("ERROR! Out Range of square\r\n");
 8002ba4:	4823      	ldr	r0, [pc, #140]	; (8002c34 <StartTaskMove+0x1cc>)
 8002ba6:	f00c ffa9 	bl	800fafc <puts>
 8002baa:	e764      	b.n	8002a76 <StartTaskMove+0xe>
			}
		}else if (data_rev_master[0] == CMD_WRITEPOS){
 8002bac:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <StartTaskMove+0x19c>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b57      	cmp	r3, #87	; 0x57
 8002bb2:	d10c      	bne.n	8002bce <StartTaskMove+0x166>
			printf("Write Pos %d To EEPROM\r\n",data_rev_master[1]);
 8002bb4:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <StartTaskMove+0x19c>)
 8002bb6:	785b      	ldrb	r3, [r3, #1]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	481f      	ldr	r0, [pc, #124]	; (8002c38 <StartTaskMove+0x1d0>)
 8002bbc:	f00c ff18 	bl	800f9f0 <iprintf>
			updateSquarePosition(data_rev_master[1]);
 8002bc0:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <StartTaskMove+0x19c>)
 8002bc2:	785b      	ldrb	r3, [r3, #1]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fae0 	bl	800318c <updateSquarePosition>
 8002bcc:	e753      	b.n	8002a76 <StartTaskMove+0xe>
		}else if (data_rev_master[0] == CMD_READPOS){
 8002bce:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <StartTaskMove+0x19c>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b52      	cmp	r3, #82	; 0x52
 8002bd4:	d105      	bne.n	8002be2 <StartTaskMove+0x17a>
			printf("Read Pos from EEPROM\r\n");
 8002bd6:	4819      	ldr	r0, [pc, #100]	; (8002c3c <StartTaskMove+0x1d4>)
 8002bd8:	f00c ff90 	bl	800fafc <puts>
			readSquarePosition();
 8002bdc:	f000 fb14 	bl	8003208 <readSquarePosition>
 8002be0:	e749      	b.n	8002a76 <StartTaskMove+0xe>
		}else if(data_rev_master[0] == CMD_RESET_SQUARE_KILL){
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <StartTaskMove+0x19c>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b58      	cmp	r3, #88	; 0x58
 8002be8:	f47f af45 	bne.w	8002a76 <StartTaskMove+0xe>
			square_kill_number = 0;
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <StartTaskMove+0x1d8>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
			printf("Reset Square Kill\r\n");
 8002bf2:	4814      	ldr	r0, [pc, #80]	; (8002c44 <StartTaskMove+0x1dc>)
 8002bf4:	f00c ff82 	bl	800fafc <puts>
		osSemaphoreWait(binarySem_masterCmdHandle, osWaitForever);
 8002bf8:	e73d      	b.n	8002a76 <StartTaskMove+0xe>
 8002bfa:	bf00      	nop
 8002bfc:	2000b398 	.word	0x2000b398
 8002c00:	2000b230 	.word	0x2000b230
 8002c04:	2000affc 	.word	0x2000affc
 8002c08:	40000800 	.word	0x40000800
 8002c0c:	0801225c 	.word	0x0801225c
 8002c10:	0801226c 	.word	0x0801226c
 8002c14:	0801227c 	.word	0x0801227c
 8002c18:	0801228c 	.word	0x0801228c
 8002c1c:	08012298 	.word	0x08012298
 8002c20:	080122a4 	.word	0x080122a4
 8002c24:	080122b4 	.word	0x080122b4
 8002c28:	080122c8 	.word	0x080122c8
 8002c2c:	2000021a 	.word	0x2000021a
 8002c30:	080122ec 	.word	0x080122ec
 8002c34:	0801230c 	.word	0x0801230c
 8002c38:	08012328 	.word	0x08012328
 8002c3c:	08012344 	.word	0x08012344
 8002c40:	2000020c 	.word	0x2000020c
 8002c44:	0801235c 	.word	0x0801235c

08002c48 <StartTaskMotorJ3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMotorJ3 */
__weak void StartTaskMotorJ3(void const * argument)
{
 8002c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c4a:	b095      	sub	sp, #84	; 0x54
 8002c4c:	af12      	add	r7, sp, #72	; 0x48
 8002c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMotorJ3 */
//	osDelay(2000);						// Wait for finish Init
	motor_j3_data.GPIO_PIN_Dir		= J3_DIR_Pin;
 8002c50:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <StartTaskMotorJ3+0x84>)
 8002c52:	2202      	movs	r2, #2
 8002c54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	motor_j3_data.GPIO_PORT_Dir		= J3_DIR_GPIO_Port;
 8002c58:	4b1c      	ldr	r3, [pc, #112]	; (8002ccc <StartTaskMotorJ3+0x84>)
 8002c5a:	4a1d      	ldr	r2, [pc, #116]	; (8002cd0 <StartTaskMotorJ3+0x88>)
 8002c5c:	63da      	str	r2, [r3, #60]	; 0x3c
	motor_j3_data.GPIO_PORT_Enable	= J3_EN_GPIO_Port;
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <StartTaskMotorJ3+0x84>)
 8002c60:	4a1c      	ldr	r2, [pc, #112]	; (8002cd4 <StartTaskMotorJ3+0x8c>)
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40
	motor_j3_data.GPIO_PIN_Enable	= J3_EN_Pin;
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <StartTaskMotorJ3+0x84>)
 8002c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	motor_j3_data.USER_TIMER		= TIM5;
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <StartTaskMotorJ3+0x84>)
 8002c70:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <StartTaskMotorJ3+0x90>)
 8002c72:	649a      	str	r2, [r3, #72]	; 0x48
	motor_j3_data.TIM_CHANEL		= TIM_CHANNEL_1;
 8002c74:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <StartTaskMotorJ3+0x84>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	64da      	str	r2, [r3, #76]	; 0x4c
	motor_j3_data.isStop			= false;
 8002c7a:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <StartTaskMotorJ3+0x84>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	AccelStepper_init(&motor_j3_data, htim5, 0, J3_SPEED, J3_ACCEL_MAX);
 8002c82:	4e16      	ldr	r6, [pc, #88]	; (8002cdc <StartTaskMotorJ3+0x94>)
 8002c84:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <StartTaskMotorJ3+0x98>)
 8002c86:	9311      	str	r3, [sp, #68]	; 0x44
 8002c88:	f243 23c8 	movw	r3, #13000	; 0x32c8
 8002c8c:	9310      	str	r3, [sp, #64]	; 0x40
 8002c8e:	2300      	movs	r3, #0
 8002c90:	930f      	str	r3, [sp, #60]	; 0x3c
 8002c92:	466d      	mov	r5, sp
 8002c94:	f106 040c 	add.w	r4, r6, #12
 8002c98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ca4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002ca8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002cac:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002cb0:	4806      	ldr	r0, [pc, #24]	; (8002ccc <StartTaskMotorJ3+0x84>)
 8002cb2:	f7fe f9a1 	bl	8000ff8 <AccelStepper_init>
	#endif
//		pickAndDropInit();
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(binarySem_motorJ3Handle, osWaitForever);
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <StartTaskMotorJ3+0x9c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f009 f9ce 	bl	800c060 <osSemaphoreWait>
	  run(&motor_j3_data);
 8002cc4:	4801      	ldr	r0, [pc, #4]	; (8002ccc <StartTaskMotorJ3+0x84>)
 8002cc6:	f7fe fbd1 	bl	800146c <run>
	  osSemaphoreWait(binarySem_motorJ3Handle, osWaitForever);
 8002cca:	e7f4      	b.n	8002cb6 <StartTaskMotorJ3+0x6e>
 8002ccc:	2000b23c 	.word	0x2000b23c
 8002cd0:	40020000 	.word	0x40020000
 8002cd4:	40020400 	.word	0x40020400
 8002cd8:	40000c00 	.word	0x40000c00
 8002cdc:	2000b7d0 	.word	0x2000b7d0
 8002ce0:	00030d40 	.word	0x00030d40
 8002ce4:	2000b15c 	.word	0x2000b15c

08002ce8 <moveToSquare>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void moveToSquare(uint8_t point,bool continues)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	460a      	mov	r2, r1
 8002cf2:	71fb      	strb	r3, [r7, #7]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	71bb      	strb	r3, [r7, #6]
	AS5600_Start_Update_High();
 8002cf8:	f7fe f970 	bl	8000fdc <AS5600_Start_Update_High>
	enableStepper(&motor_j1_data, ON);
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	4833      	ldr	r0, [pc, #204]	; (8002dcc <moveToSquare+0xe4>)
 8002d00:	f7fe fdec 	bl	80018dc <enableStepper>
	enableStepper(&motor_j2_data, ON);
 8002d04:	2101      	movs	r1, #1
 8002d06:	4832      	ldr	r0, [pc, #200]	; (8002dd0 <moveToSquare+0xe8>)
 8002d08:	f7fe fde8 	bl	80018dc <enableStepper>
	moveTo(&motor_j1_data,square[point].j1);
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	4a31      	ldr	r2, [pc, #196]	; (8002dd4 <moveToSquare+0xec>)
 8002d10:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8002d14:	4619      	mov	r1, r3
 8002d16:	482d      	ldr	r0, [pc, #180]	; (8002dcc <moveToSquare+0xe4>)
 8002d18:	f7fe fd60 	bl	80017dc <moveTo>
	run(&motor_j1_data);
 8002d1c:	482b      	ldr	r0, [pc, #172]	; (8002dcc <moveToSquare+0xe4>)
 8002d1e:	f7fe fba5 	bl	800146c <run>
	moveTo(&motor_j2_data,square[point].j2);
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	4a2b      	ldr	r2, [pc, #172]	; (8002dd4 <moveToSquare+0xec>)
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	885b      	ldrh	r3, [r3, #2]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4828      	ldr	r0, [pc, #160]	; (8002dd0 <moveToSquare+0xe8>)
 8002d30:	f7fe fd54 	bl	80017dc <moveTo>
	run(&motor_j2_data);
 8002d34:	4826      	ldr	r0, [pc, #152]	; (8002dd0 <moveToSquare+0xe8>)
 8002d36:	f7fe fb99 	bl	800146c <run>
	uint16_t check_time_out=0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	81fb      	strh	r3, [r7, #14]
	while( isRunning(&motor_j1_data) || isRunning(&motor_j2_data) ){	// Waiting for move finish
 8002d3e:	e01a      	b.n	8002d76 <moveToSquare+0x8e>
		if( labs(distanceToGo(&motor_j1_data)) < 2  &&  labs(distanceToGo(&motor_j2_data)) < 2 ){		// neu dung sai la nho thi thoat trong khoang 500ms
 8002d40:	4822      	ldr	r0, [pc, #136]	; (8002dcc <moveToSquare+0xe4>)
 8002d42:	f7fe fb83 	bl	800144c <distanceToGo>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bfb8      	it	lt
 8002d4c:	425b      	neglt	r3, r3
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	dc0e      	bgt.n	8002d70 <moveToSquare+0x88>
 8002d52:	481f      	ldr	r0, [pc, #124]	; (8002dd0 <moveToSquare+0xe8>)
 8002d54:	f7fe fb7a 	bl	800144c <distanceToGo>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	bfb8      	it	lt
 8002d5e:	425b      	neglt	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	dc05      	bgt.n	8002d70 <moveToSquare+0x88>
			check_time_out++;
 8002d64:	89fb      	ldrh	r3, [r7, #14]
 8002d66:	3301      	adds	r3, #1
 8002d68:	81fb      	strh	r3, [r7, #14]
			if(check_time_out > 100) break;
 8002d6a:	89fb      	ldrh	r3, [r7, #14]
 8002d6c:	2b64      	cmp	r3, #100	; 0x64
 8002d6e:	d80f      	bhi.n	8002d90 <moveToSquare+0xa8>
		}
		osDelay(10);
 8002d70:	200a      	movs	r0, #10
 8002d72:	f009 f92e 	bl	800bfd2 <osDelay>
	while( isRunning(&motor_j1_data) || isRunning(&motor_j2_data) ){	// Waiting for move finish
 8002d76:	4815      	ldr	r0, [pc, #84]	; (8002dcc <moveToSquare+0xe4>)
 8002d78:	f7fe fd14 	bl	80017a4 <isRunning>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1de      	bne.n	8002d40 <moveToSquare+0x58>
 8002d82:	4813      	ldr	r0, [pc, #76]	; (8002dd0 <moveToSquare+0xe8>)
 8002d84:	f7fe fd0e 	bl	80017a4 <isRunning>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1d8      	bne.n	8002d40 <moveToSquare+0x58>
 8002d8e:	e000      	b.n	8002d92 <moveToSquare+0xaa>
			if(check_time_out > 100) break;
 8002d90:	bf00      	nop
	}
	motor_j1_data.isStop = true;
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <moveToSquare+0xe4>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	motor_j2_data.isStop = true;
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <moveToSquare+0xe8>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	if(continues==false)
 8002da2:	79bb      	ldrb	r3, [r7, #6]
 8002da4:	f083 0301 	eor.w	r3, r3, #1
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <moveToSquare+0xda>
	{
		enableStepper(&motor_j1_data, OFF);
 8002dae:	2100      	movs	r1, #0
 8002db0:	4806      	ldr	r0, [pc, #24]	; (8002dcc <moveToSquare+0xe4>)
 8002db2:	f7fe fd93 	bl	80018dc <enableStepper>
		enableStepper(&motor_j2_data, OFF);
 8002db6:	2100      	movs	r1, #0
 8002db8:	4805      	ldr	r0, [pc, #20]	; (8002dd0 <moveToSquare+0xe8>)
 8002dba:	f7fe fd8f 	bl	80018dc <enableStepper>
		AS5600_Start_Update_Low();
 8002dbe:	f7fe f8ff 	bl	8000fc0 <AS5600_Start_Update_Low>
	}
}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	2000b1d8 	.word	0x2000b1d8
 8002dd0:	2000b178 	.word	0x2000b178
 8002dd4:	2000b01c 	.word	0x2000b01c

08002dd8 <moveToHome>:

void moveToHome()
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
	moveToSquare(79, false);
 8002ddc:	2100      	movs	r1, #0
 8002dde:	204f      	movs	r0, #79	; 0x4f
 8002de0:	f7ff ff82 	bl	8002ce8 <moveToSquare>
}
 8002de4:	bf00      	nop
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <moveToKill>:
void moveToKill()
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
	moveToSquare(square_kill_number + 64, true);
 8002dec:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <moveToKill+0x24>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	3340      	adds	r3, #64	; 0x40
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2101      	movs	r1, #1
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff ff76 	bl	8002ce8 <moveToSquare>
	square_kill_number++;
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <moveToKill+0x24>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	3301      	adds	r3, #1
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	4b01      	ldr	r3, [pc, #4]	; (8002e0c <moveToKill+0x24>)
 8002e06:	701a      	strb	r2, [r3, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	2000020c 	.word	0x2000020c

08002e10 <movePiece>:
void movePiece(uint8_t qFrom,uint8_t qTo,uint8_t option)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	71bb      	strb	r3, [r7, #6]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	717b      	strb	r3, [r7, #5]
	if(option == MOVE_PIECE){
 8002e22:	797b      	ldrb	r3, [r7, #5]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d110      	bne.n	8002e4a <movePiece+0x3a>
		moveToSquare(qFrom, true);
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff5b 	bl	8002ce8 <moveToSquare>
		pickupPiece();
 8002e32:	f000 fa6f 	bl	8003314 <pickupPiece>
		moveToSquare(qTo, true);
 8002e36:	79bb      	ldrb	r3, [r7, #6]
 8002e38:	2101      	movs	r1, #1
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff54 	bl	8002ce8 <moveToSquare>
		dropPiece();
 8002e40:	f000 fa90 	bl	8003364 <dropPiece>
		moveToHome();
 8002e44:	f7ff ffc8 	bl	8002dd8 <moveToHome>
 8002e48:	e0bc      	b.n	8002fc4 <movePiece+0x1b4>
	}else if(option == MOVE_HOME){
 8002e4a:	797b      	ldrb	r3, [r7, #5]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d102      	bne.n	8002e56 <movePiece+0x46>
		moveToHome();
 8002e50:	f7ff ffc2 	bl	8002dd8 <moveToHome>
 8002e54:	e0b6      	b.n	8002fc4 <movePiece+0x1b4>
	}else if(option == MOVE_KILL)										// Neu la nuoc di an quan thi gap piece ra khoi ban co
 8002e56:	797b      	ldrb	r3, [r7, #5]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d11b      	bne.n	8002e94 <movePiece+0x84>
	{
		moveToSquare(qTo, true);		// move to piece kill
 8002e5c:	79bb      	ldrb	r3, [r7, #6]
 8002e5e:	2101      	movs	r1, #1
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff41 	bl	8002ce8 <moveToSquare>
		pickupPiece();					// pickup
 8002e66:	f000 fa55 	bl	8003314 <pickupPiece>
		moveToKill();		// move to square die
 8002e6a:	f7ff ffbd 	bl	8002de8 <moveToKill>
		dropPiece();					// drop
 8002e6e:	f000 fa79 	bl	8003364 <dropPiece>
		moveToSquare(qFrom, true);
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	2101      	movs	r1, #1
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff36 	bl	8002ce8 <moveToSquare>
		pickupPiece();
 8002e7c:	f000 fa4a 	bl	8003314 <pickupPiece>
		moveToSquare(qTo, true);
 8002e80:	79bb      	ldrb	r3, [r7, #6]
 8002e82:	2101      	movs	r1, #1
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff2f 	bl	8002ce8 <moveToSquare>
		dropPiece();
 8002e8a:	f000 fa6b 	bl	8003364 <dropPiece>
		moveToHome();
 8002e8e:	f7ff ffa3 	bl	8002dd8 <moveToHome>
 8002e92:	e097      	b.n	8002fc4 <movePiece+0x1b4>
	}else if(option == MOVE_BCASLLING_KING)
 8002e94:	797b      	ldrb	r3, [r7, #5]
 8002e96:	2b05      	cmp	r3, #5
 8002e98:	d11a      	bne.n	8002ed0 <movePiece+0xc0>
	{
		moveToSquare(60, true);
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	203c      	movs	r0, #60	; 0x3c
 8002e9e:	f7ff ff23 	bl	8002ce8 <moveToSquare>
		pickupPiece();
 8002ea2:	f000 fa37 	bl	8003314 <pickupPiece>
		moveToSquare(62, true);
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	203e      	movs	r0, #62	; 0x3e
 8002eaa:	f7ff ff1d 	bl	8002ce8 <moveToSquare>
		dropPiece();
 8002eae:	f000 fa59 	bl	8003364 <dropPiece>
		moveToSquare(63, true);
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	203f      	movs	r0, #63	; 0x3f
 8002eb6:	f7ff ff17 	bl	8002ce8 <moveToSquare>
		pickupPiece();
 8002eba:	f000 fa2b 	bl	8003314 <pickupPiece>
		moveToSquare(61, true);
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	203d      	movs	r0, #61	; 0x3d
 8002ec2:	f7ff ff11 	bl	8002ce8 <moveToSquare>
		dropPiece();
 8002ec6:	f000 fa4d 	bl	8003364 <dropPiece>
		moveToHome();
 8002eca:	f7ff ff85 	bl	8002dd8 <moveToHome>
 8002ece:	e079      	b.n	8002fc4 <movePiece+0x1b4>
	}else if(option == MOVE_BCASLLINGG_QUEEN)
 8002ed0:	797b      	ldrb	r3, [r7, #5]
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d11a      	bne.n	8002f0c <movePiece+0xfc>
	{
		moveToSquare(60, true);
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	203c      	movs	r0, #60	; 0x3c
 8002eda:	f7ff ff05 	bl	8002ce8 <moveToSquare>
		pickupPiece();
 8002ede:	f000 fa19 	bl	8003314 <pickupPiece>
		moveToSquare(58, true);
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	203a      	movs	r0, #58	; 0x3a
 8002ee6:	f7ff feff 	bl	8002ce8 <moveToSquare>
		dropPiece();
 8002eea:	f000 fa3b 	bl	8003364 <dropPiece>
		moveToSquare(56, true);
 8002eee:	2101      	movs	r1, #1
 8002ef0:	2038      	movs	r0, #56	; 0x38
 8002ef2:	f7ff fef9 	bl	8002ce8 <moveToSquare>
		pickupPiece();
 8002ef6:	f000 fa0d 	bl	8003314 <pickupPiece>
		moveToSquare(59, true);
 8002efa:	2101      	movs	r1, #1
 8002efc:	203b      	movs	r0, #59	; 0x3b
 8002efe:	f7ff fef3 	bl	8002ce8 <moveToSquare>
		dropPiece();
 8002f02:	f000 fa2f 	bl	8003364 <dropPiece>
		moveToHome();
 8002f06:	f7ff ff67 	bl	8002dd8 <moveToHome>
 8002f0a:	e05b      	b.n	8002fc4 <movePiece+0x1b4>
	}
	else if(option == MOVE_WCASLLING_KING)
 8002f0c:	797b      	ldrb	r3, [r7, #5]
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d11a      	bne.n	8002f48 <movePiece+0x138>
		{
			moveToSquare(59, true);
 8002f12:	2101      	movs	r1, #1
 8002f14:	203b      	movs	r0, #59	; 0x3b
 8002f16:	f7ff fee7 	bl	8002ce8 <moveToSquare>
			pickupPiece();
 8002f1a:	f000 f9fb 	bl	8003314 <pickupPiece>
			moveToSquare(57, true);
 8002f1e:	2101      	movs	r1, #1
 8002f20:	2039      	movs	r0, #57	; 0x39
 8002f22:	f7ff fee1 	bl	8002ce8 <moveToSquare>
			dropPiece();
 8002f26:	f000 fa1d 	bl	8003364 <dropPiece>
			moveToSquare(56, true);
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	2038      	movs	r0, #56	; 0x38
 8002f2e:	f7ff fedb 	bl	8002ce8 <moveToSquare>
			pickupPiece();
 8002f32:	f000 f9ef 	bl	8003314 <pickupPiece>
			moveToSquare(58, true);
 8002f36:	2101      	movs	r1, #1
 8002f38:	203a      	movs	r0, #58	; 0x3a
 8002f3a:	f7ff fed5 	bl	8002ce8 <moveToSquare>
			dropPiece();
 8002f3e:	f000 fa11 	bl	8003364 <dropPiece>
			moveToHome();
 8002f42:	f7ff ff49 	bl	8002dd8 <moveToHome>
 8002f46:	e03d      	b.n	8002fc4 <movePiece+0x1b4>
		}else if(option == MOVE_WCASLLINGG_QUEEN)
 8002f48:	797b      	ldrb	r3, [r7, #5]
 8002f4a:	2b07      	cmp	r3, #7
 8002f4c:	d11a      	bne.n	8002f84 <movePiece+0x174>
		{
			moveToSquare(59, true);
 8002f4e:	2101      	movs	r1, #1
 8002f50:	203b      	movs	r0, #59	; 0x3b
 8002f52:	f7ff fec9 	bl	8002ce8 <moveToSquare>
			pickupPiece();
 8002f56:	f000 f9dd 	bl	8003314 <pickupPiece>
			moveToSquare(61, true);
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	203d      	movs	r0, #61	; 0x3d
 8002f5e:	f7ff fec3 	bl	8002ce8 <moveToSquare>
			dropPiece();
 8002f62:	f000 f9ff 	bl	8003364 <dropPiece>
			moveToSquare(63, true);
 8002f66:	2101      	movs	r1, #1
 8002f68:	203f      	movs	r0, #63	; 0x3f
 8002f6a:	f7ff febd 	bl	8002ce8 <moveToSquare>
			pickupPiece();
 8002f6e:	f000 f9d1 	bl	8003314 <pickupPiece>
			moveToSquare(60, true);
 8002f72:	2101      	movs	r1, #1
 8002f74:	203c      	movs	r0, #60	; 0x3c
 8002f76:	f7ff feb7 	bl	8002ce8 <moveToSquare>
			dropPiece();
 8002f7a:	f000 f9f3 	bl	8003364 <dropPiece>
			moveToHome();
 8002f7e:	f7ff ff2b 	bl	8002dd8 <moveToHome>
 8002f82:	e01f      	b.n	8002fc4 <movePiece+0x1b4>
		}else if(option == MOVE_PASSANT){
 8002f84:	797b      	ldrb	r3, [r7, #5]
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d11c      	bne.n	8002fc4 <movePiece+0x1b4>
		moveToSquare(qTo+8, true);
 8002f8a:	79bb      	ldrb	r3, [r7, #6]
 8002f8c:	3308      	adds	r3, #8
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2101      	movs	r1, #1
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fea8 	bl	8002ce8 <moveToSquare>
		pickupPiece();
 8002f98:	f000 f9bc 	bl	8003314 <pickupPiece>
		moveToKill();
 8002f9c:	f7ff ff24 	bl	8002de8 <moveToKill>
		dropPiece();
 8002fa0:	f000 f9e0 	bl	8003364 <dropPiece>
		moveToSquare(qFrom, true);
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fe9d 	bl	8002ce8 <moveToSquare>
		pickupPiece();
 8002fae:	f000 f9b1 	bl	8003314 <pickupPiece>
		moveToSquare(qTo, true);
 8002fb2:	79bb      	ldrb	r3, [r7, #6]
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fe96 	bl	8002ce8 <moveToSquare>
		dropPiece();
 8002fbc:	f000 f9d2 	bl	8003364 <dropPiece>
		moveToHome();
 8002fc0:	f7ff ff0a 	bl	8002dd8 <moveToHome>
	}
	enableStepper(&motor_j3_data, OFF);
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4807      	ldr	r0, [pc, #28]	; (8002fe4 <movePiece+0x1d4>)
 8002fc8:	f7fe fc88 	bl	80018dc <enableStepper>
//	printf("-f\r\n"); //send to Soc ,moved finish
	HAL_UART_Transmit(&huart1,(uint8_t *)"-f\r\n",4,1000);
 8002fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	4905      	ldr	r1, [pc, #20]	; (8002fe8 <movePiece+0x1d8>)
 8002fd4:	4805      	ldr	r0, [pc, #20]	; (8002fec <movePiece+0x1dc>)
 8002fd6:	f008 f857 	bl	800b088 <HAL_UART_Transmit>
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000b23c 	.word	0x2000b23c
 8002fe8:	08012370 	.word	0x08012370
 8002fec:	2000b8a8 	.word	0x2000b8a8

08002ff0 <updateInfo>:

void updateInfo(){
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
	  int bat_volt	= batteryGet();
 8002ff6:	f7fe fdad 	bl	8001b54 <batteryGet>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	60bb      	str	r3, [r7, #8]
	  if(battery_save != bat_volt){
 8002ffe:	4b57      	ldr	r3, [pc, #348]	; (800315c <updateInfo+0x16c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	429a      	cmp	r2, r3
 8003006:	d016      	beq.n	8003036 <updateInfo+0x46>
		  battery_save = bat_volt;
 8003008:	4a54      	ldr	r2, [pc, #336]	; (800315c <updateInfo+0x16c>)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	6013      	str	r3, [r2, #0]
		  printf("-B%04d\r\n",battery_save);
 800300e:	4b53      	ldr	r3, [pc, #332]	; (800315c <updateInfo+0x16c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4619      	mov	r1, r3
 8003014:	4852      	ldr	r0, [pc, #328]	; (8003160 <updateInfo+0x170>)
 8003016:	f00c fceb 	bl	800f9f0 <iprintf>
		  snprintf(sbattery,sizeof(sbattery),"-B%04d\r\n",battery_save);
 800301a:	4b50      	ldr	r3, [pc, #320]	; (800315c <updateInfo+0x16c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a50      	ldr	r2, [pc, #320]	; (8003160 <updateInfo+0x170>)
 8003020:	2109      	movs	r1, #9
 8003022:	4850      	ldr	r0, [pc, #320]	; (8003164 <updateInfo+0x174>)
 8003024:	f00c fd72 	bl	800fb0c <sniprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t*)sbattery,8,1000);
 8003028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800302c:	2208      	movs	r2, #8
 800302e:	494d      	ldr	r1, [pc, #308]	; (8003164 <updateInfo+0x174>)
 8003030:	484d      	ldr	r0, [pc, #308]	; (8003168 <updateInfo+0x178>)
 8003032:	f008 f829 	bl	800b088 <HAL_UART_Transmit>
	  }
	  char getcharging = HAL_GPIO_ReadPin(BATTERY_CHANGER_GPIO_Port, BATTERY_CHANGER_Pin);
 8003036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800303a:	484c      	ldr	r0, [pc, #304]	; (800316c <updateInfo+0x17c>)
 800303c:	f003 fbfe 	bl	800683c <HAL_GPIO_ReadPin>
 8003040:	4603      	mov	r3, r0
 8003042:	71fb      	strb	r3, [r7, #7]
	  if(getcharging != charging){
 8003044:	4b4a      	ldr	r3, [pc, #296]	; (8003170 <updateInfo+0x180>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	4293      	cmp	r3, r2
 800304e:	d01b      	beq.n	8003088 <updateInfo+0x98>
		  charging = getcharging;
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	2b00      	cmp	r3, #0
 8003054:	bf14      	ite	ne
 8003056:	2301      	movne	r3, #1
 8003058:	2300      	moveq	r3, #0
 800305a:	b2da      	uxtb	r2, r3
 800305c:	4b44      	ldr	r3, [pc, #272]	; (8003170 <updateInfo+0x180>)
 800305e:	701a      	strb	r2, [r3, #0]
		  printf("-b%d\r\n",charging);
 8003060:	4b43      	ldr	r3, [pc, #268]	; (8003170 <updateInfo+0x180>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	4619      	mov	r1, r3
 8003066:	4843      	ldr	r0, [pc, #268]	; (8003174 <updateInfo+0x184>)
 8003068:	f00c fcc2 	bl	800f9f0 <iprintf>
		  snprintf(scharging,sizeof(scharging),"-b%d\r\n",charging);
 800306c:	4b40      	ldr	r3, [pc, #256]	; (8003170 <updateInfo+0x180>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	4a40      	ldr	r2, [pc, #256]	; (8003174 <updateInfo+0x184>)
 8003072:	2107      	movs	r1, #7
 8003074:	4840      	ldr	r0, [pc, #256]	; (8003178 <updateInfo+0x188>)
 8003076:	f00c fd49 	bl	800fb0c <sniprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t*)scharging,5,1000);
 800307a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800307e:	2205      	movs	r2, #5
 8003080:	493d      	ldr	r1, [pc, #244]	; (8003178 <updateInfo+0x188>)
 8003082:	4839      	ldr	r0, [pc, #228]	; (8003168 <updateInfo+0x178>)
 8003084:	f008 f800 	bl	800b088 <HAL_UART_Transmit>
	  }
	  uint8_t status=0;
 8003088:	2300      	movs	r3, #0
 800308a:	73fb      	strb	r3, [r7, #15]
	  data_trans_master[0] = (uint8_t)(data_AS5600_M1 & 0xFF);
 800308c:	4b3b      	ldr	r3, [pc, #236]	; (800317c <updateInfo+0x18c>)
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	b2da      	uxtb	r2, r3
 8003092:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <updateInfo+0x190>)
 8003094:	701a      	strb	r2, [r3, #0]
	  data_trans_master[1] = (uint8_t)((data_AS5600_M1>>8) & 0xFF);
 8003096:	4b39      	ldr	r3, [pc, #228]	; (800317c <updateInfo+0x18c>)
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	b29b      	uxth	r3, r3
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	4b37      	ldr	r3, [pc, #220]	; (8003180 <updateInfo+0x190>)
 80030a2:	705a      	strb	r2, [r3, #1]
	  data_trans_master[2] = (uint8_t)(data_AS5600_M2 & 0xFF);
 80030a4:	4b37      	ldr	r3, [pc, #220]	; (8003184 <updateInfo+0x194>)
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	4b35      	ldr	r3, [pc, #212]	; (8003180 <updateInfo+0x190>)
 80030ac:	709a      	strb	r2, [r3, #2]
	  data_trans_master[3] = (uint8_t)((data_AS5600_M2>>8) & 0xFF);
 80030ae:	4b35      	ldr	r3, [pc, #212]	; (8003184 <updateInfo+0x194>)
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	4b31      	ldr	r3, [pc, #196]	; (8003180 <updateInfo+0x190>)
 80030ba:	70da      	strb	r2, [r3, #3]
	  data_trans_master[4] = (uint8_t)(bat_volt & 0xFF);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <updateInfo+0x190>)
 80030c2:	711a      	strb	r2, [r3, #4]
	  data_trans_master[5] = (uint8_t)((bat_volt>>8) & 0xFF);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	121b      	asrs	r3, r3, #8
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <updateInfo+0x190>)
 80030cc:	715a      	strb	r2, [r3, #5]
	  if(HAL_SENSOR_UP_GET) status|=(1<<0); else status &=~(1<<0);																// Hal_sensor_up
 80030ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030d2:	4826      	ldr	r0, [pc, #152]	; (800316c <updateInfo+0x17c>)
 80030d4:	f003 fbb2 	bl	800683c <HAL_GPIO_ReadPin>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d004      	beq.n	80030e8 <updateInfo+0xf8>
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
 80030e6:	e003      	b.n	80030f0 <updateInfo+0x100>
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
	  if(HAL_SENSOR_DOWN_GET) status |= (1<<1); else status &=~(1<<1);															// Hal_sensor_down
 80030f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030f4:	481d      	ldr	r0, [pc, #116]	; (800316c <updateInfo+0x17c>)
 80030f6:	f003 fba1 	bl	800683c <HAL_GPIO_ReadPin>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d004      	beq.n	800310a <updateInfo+0x11a>
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	f043 0302 	orr.w	r3, r3, #2
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	e003      	b.n	8003112 <updateInfo+0x122>
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	f023 0302 	bic.w	r3, r3, #2
 8003110:	73fb      	strb	r3, [r7, #15]
	  if(HAL_GPIO_ReadPin(BATTERY_CHANGER_GPIO_Port, BATTERY_CHANGER_Pin)==GPIO_PIN_RESET) status |=(1<<2); else status &=~(1<<2);  	// Battery Chnager
 8003112:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003116:	4815      	ldr	r0, [pc, #84]	; (800316c <updateInfo+0x17c>)
 8003118:	f003 fb90 	bl	800683c <HAL_GPIO_ReadPin>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d104      	bne.n	800312c <updateInfo+0x13c>
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	f043 0304 	orr.w	r3, r3, #4
 8003128:	73fb      	strb	r3, [r7, #15]
 800312a:	e003      	b.n	8003134 <updateInfo+0x144>
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	f023 0304 	bic.w	r3, r3, #4
 8003132:	73fb      	strb	r3, [r7, #15]
	  if(moveIsFinish == true) status |=(1<<3); else status &=~(1<<3);
 8003134:	4b14      	ldr	r3, [pc, #80]	; (8003188 <updateInfo+0x198>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d004      	beq.n	8003146 <updateInfo+0x156>
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	f043 0308 	orr.w	r3, r3, #8
 8003142:	73fb      	strb	r3, [r7, #15]
 8003144:	e003      	b.n	800314e <updateInfo+0x15e>
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	f023 0308 	bic.w	r3, r3, #8
 800314c:	73fb      	strb	r3, [r7, #15]
	  data_trans_master[6] = status;
 800314e:	4a0c      	ldr	r2, [pc, #48]	; (8003180 <updateInfo+0x190>)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	7193      	strb	r3, [r2, #6]

}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000210 	.word	0x20000210
 8003160:	08012378 	.word	0x08012378
 8003164:	2000aff0 	.word	0x2000aff0
 8003168:	2000b8a8 	.word	0x2000b8a8
 800316c:	40020800 	.word	0x40020800
 8003170:	20000214 	.word	0x20000214
 8003174:	08012384 	.word	0x08012384
 8003178:	2000b160 	.word	0x2000b160
 800317c:	2000af36 	.word	0x2000af36
 8003180:	2000b1cc 	.word	0x2000b1cc
 8003184:	2000af34 	.word	0x2000af34
 8003188:	2000021a 	.word	0x2000021a

0800318c <updateSquarePosition>:

void updateSquarePosition(uint16_t squa){
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	80fb      	strh	r3, [r7, #6]
	if(EE_WriteVariable(ADDR_EE_POSJ1 + squa, data_AS5600_M1) != EE_OK){
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 800319c:	3355      	adds	r3, #85	; 0x55
 800319e:	b29b      	uxth	r3, r3
 80031a0:	4a15      	ldr	r2, [pc, #84]	; (80031f8 <updateSquarePosition+0x6c>)
 80031a2:	8812      	ldrh	r2, [r2, #0]
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe ff8e 	bl	80020c8 <EE_WriteVariable>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <updateSquarePosition+0x32>
		printf("Error to Save %d to EEPROM\r\n",squa);
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	4619      	mov	r1, r3
 80031b6:	4811      	ldr	r0, [pc, #68]	; (80031fc <updateSquarePosition+0x70>)
 80031b8:	f00c fc1a 	bl	800f9f0 <iprintf>
		return;
 80031bc:	e018      	b.n	80031f0 <updateSquarePosition+0x64>
	}
	if(EE_WriteVariable(ADDR_EE_POSJ2 + squa, data_AS5600_M2) != EE_OK){
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	f503 43ee 	add.w	r3, r3, #30464	; 0x7700
 80031c4:	3377      	adds	r3, #119	; 0x77
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <updateSquarePosition+0x74>)
 80031ca:	8812      	ldrh	r2, [r2, #0]
 80031cc:	4611      	mov	r1, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe ff7a 	bl	80020c8 <EE_WriteVariable>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <updateSquarePosition+0x5a>
		printf("Error to Save %d to EEPROM\r\n",squa);
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	4619      	mov	r1, r3
 80031de:	4807      	ldr	r0, [pc, #28]	; (80031fc <updateSquarePosition+0x70>)
 80031e0:	f00c fc06 	bl	800f9f0 <iprintf>
		return;
 80031e4:	e004      	b.n	80031f0 <updateSquarePosition+0x64>
	}
	printf("Saved  square  %d to EEPROM\r\n",squa);
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	4619      	mov	r1, r3
 80031ea:	4806      	ldr	r0, [pc, #24]	; (8003204 <updateSquarePosition+0x78>)
 80031ec:	f00c fc00 	bl	800f9f0 <iprintf>
}
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	2000af36 	.word	0x2000af36
 80031fc:	0801238c 	.word	0x0801238c
 8003200:	2000af34 	.word	0x2000af34
 8003204:	080123ac 	.word	0x080123ac

08003208 <readSquarePosition>:
void readSquarePosition(){
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
#ifdef MDEBUG
printf("reading...\r\n");
 800320e:	481a      	ldr	r0, [pc, #104]	; (8003278 <readSquarePosition+0x70>)
 8003210:	f00c fc74 	bl	800fafc <puts>
#endif
uint16_t posj1,posj2;
for(int i=0;i<80;i++){
 8003214:	2300      	movs	r3, #0
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	e024      	b.n	8003264 <readSquarePosition+0x5c>
	EE_ReadVariable(ADDR_EE_POSJ1 + i, &posj1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	b29b      	uxth	r3, r3
 800321e:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8003222:	3355      	adds	r3, #85	; 0x55
 8003224:	b29b      	uxth	r3, r3
 8003226:	1cba      	adds	r2, r7, #2
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe ff02 	bl	8002034 <EE_ReadVariable>
	EE_ReadVariable(ADDR_EE_POSJ2 + i, &posj2);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	b29b      	uxth	r3, r3
 8003234:	f503 43ee 	add.w	r3, r3, #30464	; 0x7700
 8003238:	3377      	adds	r3, #119	; 0x77
 800323a:	b29b      	uxth	r3, r3
 800323c:	463a      	mov	r2, r7
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f7fe fef7 	bl	8002034 <EE_ReadVariable>
	square[i].j1 = posj1;
 8003246:	8879      	ldrh	r1, [r7, #2]
 8003248:	4a0c      	ldr	r2, [pc, #48]	; (800327c <readSquarePosition+0x74>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	square[i].j2 = posj2;
 8003250:	8839      	ldrh	r1, [r7, #0]
 8003252:	4a0a      	ldr	r2, [pc, #40]	; (800327c <readSquarePosition+0x74>)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	460a      	mov	r2, r1
 800325c:	805a      	strh	r2, [r3, #2]
for(int i=0;i<80;i++){
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3301      	adds	r3, #1
 8003262:	607b      	str	r3, [r7, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b4f      	cmp	r3, #79	; 0x4f
 8003268:	ddd7      	ble.n	800321a <readSquarePosition+0x12>
	}
	printf("\r\n");
}
#endif
#ifdef MDEBUG
	printf("read finish\r\n");
 800326a:	4805      	ldr	r0, [pc, #20]	; (8003280 <readSquarePosition+0x78>)
 800326c:	f00c fc46 	bl	800fafc <puts>
#endif

}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	080123cc 	.word	0x080123cc
 800327c:	2000b01c 	.word	0x2000b01c
 8003280:	080123d8 	.word	0x080123d8

08003284 <pickAndDropInit>:
void pickAndDropInit(){
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);	// Start PWM for Servo
 8003288:	2108      	movs	r1, #8
 800328a:	481d      	ldr	r0, [pc, #116]	; (8003300 <pickAndDropInit+0x7c>)
 800328c:	f006 fe12 	bl	8009eb4 <HAL_TIM_PWM_Start>
	SERVO_DROP;
 8003290:	4b1c      	ldr	r3, [pc, #112]	; (8003304 <pickAndDropInit+0x80>)
 8003292:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003296:	63da      	str	r2, [r3, #60]	; 0x3c
	if(HAL_SENSOR_UP_GET==GPIO_PIN_SET){		// neu ko J3 ko phai o vi tri up
 8003298:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800329c:	481a      	ldr	r0, [pc, #104]	; (8003308 <pickAndDropInit+0x84>)
 800329e:	f003 facd 	bl	800683c <HAL_GPIO_ReadPin>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d123      	bne.n	80032f0 <pickAndDropInit+0x6c>
		enableStepper(&motor_j3_data, ON);
 80032a8:	2101      	movs	r1, #1
 80032aa:	4818      	ldr	r0, [pc, #96]	; (800330c <pickAndDropInit+0x88>)
 80032ac:	f7fe fb16 	bl	80018dc <enableStepper>
		moveTo(&motor_j3_data, J3_LIMIT_UP);
 80032b0:	4917      	ldr	r1, [pc, #92]	; (8003310 <pickAndDropInit+0x8c>)
 80032b2:	4816      	ldr	r0, [pc, #88]	; (800330c <pickAndDropInit+0x88>)
 80032b4:	f7fe fa92 	bl	80017dc <moveTo>
		run(&motor_j3_data);
 80032b8:	4814      	ldr	r0, [pc, #80]	; (800330c <pickAndDropInit+0x88>)
 80032ba:	f7fe f8d7 	bl	800146c <run>
		osDelay(30);
 80032be:	201e      	movs	r0, #30
 80032c0:	f008 fe87 	bl	800bfd2 <osDelay>
		while( isRunning(&motor_j3_data) && HAL_SENSOR_UP_GET == GPIO_PIN_SET ){	// Waiting for move finish
 80032c4:	e002      	b.n	80032cc <pickAndDropInit+0x48>
			osDelay(10);
 80032c6:	200a      	movs	r0, #10
 80032c8:	f008 fe83 	bl	800bfd2 <osDelay>
		while( isRunning(&motor_j3_data) && HAL_SENSOR_UP_GET == GPIO_PIN_SET ){	// Waiting for move finish
 80032cc:	480f      	ldr	r0, [pc, #60]	; (800330c <pickAndDropInit+0x88>)
 80032ce:	f7fe fa69 	bl	80017a4 <isRunning>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d007      	beq.n	80032e8 <pickAndDropInit+0x64>
 80032d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032dc:	480a      	ldr	r0, [pc, #40]	; (8003308 <pickAndDropInit+0x84>)
 80032de:	f003 faad 	bl	800683c <HAL_GPIO_ReadPin>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d0ee      	beq.n	80032c6 <pickAndDropInit+0x42>
		}
		enableStepper(&motor_j3_data, OFF);
 80032e8:	2100      	movs	r1, #0
 80032ea:	4808      	ldr	r0, [pc, #32]	; (800330c <pickAndDropInit+0x88>)
 80032ec:	f7fe faf6 	bl	80018dc <enableStepper>
	}
	motor_j3_data._currentPos = J3_LIMIT_UP;
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <pickAndDropInit+0x88>)
 80032f2:	4a07      	ldr	r2, [pc, #28]	; (8003310 <pickAndDropInit+0x8c>)
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
	motor_j3_data._targetPos = J3_LIMIT_UP;
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <pickAndDropInit+0x88>)
 80032f8:	4a05      	ldr	r2, [pc, #20]	; (8003310 <pickAndDropInit+0x8c>)
 80032fa:	601a      	str	r2, [r3, #0]

}
 80032fc:	bf00      	nop
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	2000b740 	.word	0x2000b740
 8003304:	40000800 	.word	0x40000800
 8003308:	40020800 	.word	0x40020800
 800330c:	2000b23c 	.word	0x2000b23c
 8003310:	fffff6a0 	.word	0xfffff6a0

08003314 <pickupPiece>:
void pickupPiece(){
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
	SERVO_DROP;
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <pickupPiece+0x4c>)
 800331a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800331e:	63da      	str	r2, [r3, #60]	; 0x3c
	if(j3MoveDown()==-1){
 8003320:	f000 f87c 	bl	800341c <j3MoveDown>
 8003324:	4603      	mov	r3, r0
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800332a:	d10b      	bne.n	8003344 <pickupPiece+0x30>
		j3MoveUp(true);
 800332c:	2001      	movs	r0, #1
 800332e:	f000 f82d 	bl	800338c <j3MoveUp>
		SERVO_EXTERN;
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <pickupPiece+0x4c>)
 8003334:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003338:	63da      	str	r2, [r3, #60]	; 0x3c
		osDelay(200);
 800333a:	20c8      	movs	r0, #200	; 0xc8
 800333c:	f008 fe49 	bl	800bfd2 <osDelay>
		j3MoveDown();
 8003340:	f000 f86c 	bl	800341c <j3MoveDown>
	}
	SERVO_PICKUP;
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <pickupPiece+0x4c>)
 8003346:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800334a:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(300);
 800334c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003350:	f008 fe3f 	bl	800bfd2 <osDelay>
	j3MoveUp(true);
 8003354:	2001      	movs	r0, #1
 8003356:	f000 f819 	bl	800338c <j3MoveUp>
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40000800 	.word	0x40000800

08003364 <dropPiece>:
void dropPiece(){
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
	j3MoveDown();
 8003368:	f000 f858 	bl	800341c <j3MoveDown>
	SERVO_DROP;
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <dropPiece+0x24>)
 800336e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003372:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(300);
 8003374:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003378:	f008 fe2b 	bl	800bfd2 <osDelay>
	j3MoveUp(true);
 800337c:	2001      	movs	r0, #1
 800337e:	f000 f805 	bl	800338c <j3MoveUp>
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40000800 	.word	0x40000800

0800338c <j3MoveUp>:
int j3MoveUp(bool keep_enable){
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
	setSpeed(&motor_j3_data, J3_SPEED);
 8003396:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8003408 <j3MoveUp+0x7c>
 800339a:	481c      	ldr	r0, [pc, #112]	; (800340c <j3MoveUp+0x80>)
 800339c:	f7fe fa36 	bl	800180c <setSpeed>
	enableStepper(&motor_j3_data, ON);
 80033a0:	2101      	movs	r1, #1
 80033a2:	481a      	ldr	r0, [pc, #104]	; (800340c <j3MoveUp+0x80>)
 80033a4:	f7fe fa9a 	bl	80018dc <enableStepper>
	setAcceleration(&motor_j3_data, J3_ACCEL_MAX);
 80033a8:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8003410 <j3MoveUp+0x84>
 80033ac:	4817      	ldr	r0, [pc, #92]	; (800340c <j3MoveUp+0x80>)
 80033ae:	f7fd feef 	bl	8001190 <setAcceleration>
	moveTo(&motor_j3_data, J3_LIMIT_UP);
 80033b2:	4918      	ldr	r1, [pc, #96]	; (8003414 <j3MoveUp+0x88>)
 80033b4:	4815      	ldr	r0, [pc, #84]	; (800340c <j3MoveUp+0x80>)
 80033b6:	f7fe fa11 	bl	80017dc <moveTo>
	run(&motor_j3_data);
 80033ba:	4814      	ldr	r0, [pc, #80]	; (800340c <j3MoveUp+0x80>)
 80033bc:	f7fe f856 	bl	800146c <run>
	osDelay(300);
 80033c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80033c4:	f008 fe05 	bl	800bfd2 <osDelay>
	while( isRunning(&motor_j3_data)>0){	// Waiting for move finish
 80033c8:	e002      	b.n	80033d0 <j3MoveUp+0x44>
		osDelay(10);
 80033ca:	200a      	movs	r0, #10
 80033cc:	f008 fe01 	bl	800bfd2 <osDelay>
	while( isRunning(&motor_j3_data)>0){	// Waiting for move finish
 80033d0:	480e      	ldr	r0, [pc, #56]	; (800340c <j3MoveUp+0x80>)
 80033d2:	f7fe f9e7 	bl	80017a4 <isRunning>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f6      	bne.n	80033ca <j3MoveUp+0x3e>
	}
	enableStepper(&motor_j3_data, keep_enable);
 80033dc:	79fb      	ldrb	r3, [r7, #7]
 80033de:	4619      	mov	r1, r3
 80033e0:	480a      	ldr	r0, [pc, #40]	; (800340c <j3MoveUp+0x80>)
 80033e2:	f7fe fa7b 	bl	80018dc <enableStepper>
	if(HAL_SENSOR_UP_GET == GPIO_PIN_RESET)
 80033e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033ea:	480b      	ldr	r0, [pc, #44]	; (8003418 <j3MoveUp+0x8c>)
 80033ec:	f003 fa26 	bl	800683c <HAL_GPIO_ReadPin>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <j3MoveUp+0x6e>
		return 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e001      	b.n	80033fe <j3MoveUp+0x72>
	else
		return -1;
 80033fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	464b2000 	.word	0x464b2000
 800340c:	2000b23c 	.word	0x2000b23c
 8003410:	48435000 	.word	0x48435000
 8003414:	fffff6a0 	.word	0xfffff6a0
 8003418:	40020800 	.word	0x40020800

0800341c <j3MoveDown>:
int j3MoveDown(){
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
	setSpeed(&motor_j3_data, J3_SPEED);
 8003420:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8003490 <j3MoveDown+0x74>
 8003424:	481b      	ldr	r0, [pc, #108]	; (8003494 <j3MoveDown+0x78>)
 8003426:	f7fe f9f1 	bl	800180c <setSpeed>
	enableStepper(&motor_j3_data, ON);
 800342a:	2101      	movs	r1, #1
 800342c:	4819      	ldr	r0, [pc, #100]	; (8003494 <j3MoveDown+0x78>)
 800342e:	f7fe fa55 	bl	80018dc <enableStepper>
	setAcceleration(&motor_j3_data, J3_ACCEL_MAX);
 8003432:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8003498 <j3MoveDown+0x7c>
 8003436:	4817      	ldr	r0, [pc, #92]	; (8003494 <j3MoveDown+0x78>)
 8003438:	f7fd feaa 	bl	8001190 <setAcceleration>
	moveTo(&motor_j3_data, J3_LIMIT_DOWN);
 800343c:	2100      	movs	r1, #0
 800343e:	4815      	ldr	r0, [pc, #84]	; (8003494 <j3MoveDown+0x78>)
 8003440:	f7fe f9cc 	bl	80017dc <moveTo>
	motor_j3_data.isComplete=false;
 8003444:	4b13      	ldr	r3, [pc, #76]	; (8003494 <j3MoveDown+0x78>)
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	run(&motor_j3_data);
 800344c:	4811      	ldr	r0, [pc, #68]	; (8003494 <j3MoveDown+0x78>)
 800344e:	f7fe f80d 	bl	800146c <run>
	osDelay(200);
 8003452:	20c8      	movs	r0, #200	; 0xc8
 8003454:	f008 fdbd 	bl	800bfd2 <osDelay>
	while( isRunning(&motor_j3_data)>0){	// Waiting for move finish
 8003458:	e002      	b.n	8003460 <j3MoveDown+0x44>
		osDelay(10);
 800345a:	200a      	movs	r0, #10
 800345c:	f008 fdb9 	bl	800bfd2 <osDelay>
	while( isRunning(&motor_j3_data)>0){	// Waiting for move finish
 8003460:	480c      	ldr	r0, [pc, #48]	; (8003494 <j3MoveDown+0x78>)
 8003462:	f7fe f99f 	bl	80017a4 <isRunning>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f6      	bne.n	800345a <j3MoveDown+0x3e>
	}
	enableStepper(&motor_j3_data, OFF);
 800346c:	2100      	movs	r1, #0
 800346e:	4809      	ldr	r0, [pc, #36]	; (8003494 <j3MoveDown+0x78>)
 8003470:	f7fe fa34 	bl	80018dc <enableStepper>
	if(HAL_SENSOR_DOWN_GET == GPIO_PIN_RESET)
 8003474:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003478:	4808      	ldr	r0, [pc, #32]	; (800349c <j3MoveDown+0x80>)
 800347a:	f003 f9df 	bl	800683c <HAL_GPIO_ReadPin>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <j3MoveDown+0x6c>
		return 0;
 8003484:	2300      	movs	r3, #0
 8003486:	e001      	b.n	800348c <j3MoveDown+0x70>
	else
		return -1;
 8003488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	464b2000 	.word	0x464b2000
 8003494:	2000b23c 	.word	0x2000b23c
 8003498:	48435000 	.word	0x48435000
 800349c:	40020800 	.word	0x40020800

080034a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08a      	sub	sp, #40	; 0x28
 80034a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a6:	f107 0314 	add.w	r3, r7, #20
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	605a      	str	r2, [r3, #4]
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	60da      	str	r2, [r3, #12]
 80034b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	4b3d      	ldr	r3, [pc, #244]	; (80035b0 <MX_GPIO_Init+0x110>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	4a3c      	ldr	r2, [pc, #240]	; (80035b0 <MX_GPIO_Init+0x110>)
 80034c0:	f043 0304 	orr.w	r3, r3, #4
 80034c4:	6313      	str	r3, [r2, #48]	; 0x30
 80034c6:	4b3a      	ldr	r3, [pc, #232]	; (80035b0 <MX_GPIO_Init+0x110>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <MX_GPIO_Init+0x110>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	4a35      	ldr	r2, [pc, #212]	; (80035b0 <MX_GPIO_Init+0x110>)
 80034dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e0:	6313      	str	r3, [r2, #48]	; 0x30
 80034e2:	4b33      	ldr	r3, [pc, #204]	; (80035b0 <MX_GPIO_Init+0x110>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	4b2f      	ldr	r3, [pc, #188]	; (80035b0 <MX_GPIO_Init+0x110>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	4a2e      	ldr	r2, [pc, #184]	; (80035b0 <MX_GPIO_Init+0x110>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	6313      	str	r3, [r2, #48]	; 0x30
 80034fe:	4b2c      	ldr	r3, [pc, #176]	; (80035b0 <MX_GPIO_Init+0x110>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	607b      	str	r3, [r7, #4]
 800350e:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <MX_GPIO_Init+0x110>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	4a27      	ldr	r2, [pc, #156]	; (80035b0 <MX_GPIO_Init+0x110>)
 8003514:	f043 0302 	orr.w	r3, r3, #2
 8003518:	6313      	str	r3, [r2, #48]	; 0x30
 800351a:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <MX_GPIO_Init+0x110>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, J3_DIR_Pin|J2_DIR_Pin|LED_Pin, GPIO_PIN_RESET);
 8003526:	2200      	movs	r2, #0
 8003528:	f248 0142 	movw	r1, #32834	; 0x8042
 800352c:	4821      	ldr	r0, [pc, #132]	; (80035b4 <MX_GPIO_Init+0x114>)
 800352e:	f003 f99d 	bl	800686c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(J2_EN_GPIO_Port, J2_EN_Pin, GPIO_PIN_SET);
 8003532:	2201      	movs	r2, #1
 8003534:	2180      	movs	r1, #128	; 0x80
 8003536:	481f      	ldr	r0, [pc, #124]	; (80035b4 <MX_GPIO_Init+0x114>)
 8003538:	f003 f998 	bl	800686c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, J1_DIR_Pin|OUT_GND_Pin|J3_EN_Pin, GPIO_PIN_RESET);
 800353c:	2200      	movs	r2, #0
 800353e:	f248 2102 	movw	r1, #33282	; 0x8202
 8003542:	481d      	ldr	r0, [pc, #116]	; (80035b8 <MX_GPIO_Init+0x118>)
 8003544:	f003 f992 	bl	800686c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(J1_EN_GPIO_Port, J1_EN_Pin, GPIO_PIN_SET);
 8003548:	2201      	movs	r2, #1
 800354a:	2104      	movs	r1, #4
 800354c:	481a      	ldr	r0, [pc, #104]	; (80035b8 <MX_GPIO_Init+0x118>)
 800354e:	f003 f98d 	bl	800686c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BATTERY_CHANGER_Pin|HAL_SENSOR_B_Pin|HAL_SENSOR_A_Pin;
 8003552:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003558:	2300      	movs	r3, #0
 800355a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	2300      	movs	r3, #0
 800355e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003560:	f107 0314 	add.w	r3, r7, #20
 8003564:	4619      	mov	r1, r3
 8003566:	4815      	ldr	r0, [pc, #84]	; (80035bc <MX_GPIO_Init+0x11c>)
 8003568:	f002 ffe4 	bl	8006534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = J3_DIR_Pin|J2_DIR_Pin|J2_EN_Pin|LED_Pin;
 800356c:	f248 03c2 	movw	r3, #32962	; 0x80c2
 8003570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003572:	2301      	movs	r3, #1
 8003574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357a:	2300      	movs	r3, #0
 800357c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357e:	f107 0314 	add.w	r3, r7, #20
 8003582:	4619      	mov	r1, r3
 8003584:	480b      	ldr	r0, [pc, #44]	; (80035b4 <MX_GPIO_Init+0x114>)
 8003586:	f002 ffd5 	bl	8006534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = J1_DIR_Pin|J1_EN_Pin|OUT_GND_Pin|J3_EN_Pin;
 800358a:	f248 2306 	movw	r3, #33286	; 0x8206
 800358e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003590:	2301      	movs	r3, #1
 8003592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003594:	2300      	movs	r3, #0
 8003596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003598:	2300      	movs	r3, #0
 800359a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800359c:	f107 0314 	add.w	r3, r7, #20
 80035a0:	4619      	mov	r1, r3
 80035a2:	4805      	ldr	r0, [pc, #20]	; (80035b8 <MX_GPIO_Init+0x118>)
 80035a4:	f002 ffc6 	bl	8006534 <HAL_GPIO_Init>

}
 80035a8:	bf00      	nop
 80035aa:	3728      	adds	r7, #40	; 0x28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40020000 	.word	0x40020000
 80035b8:	40020400 	.word	0x40020400
 80035bc:	40020800 	.word	0x40020800

080035c0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_tx;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035c4:	4b12      	ldr	r3, [pc, #72]	; (8003610 <MX_I2C1_Init+0x50>)
 80035c6:	4a13      	ldr	r2, [pc, #76]	; (8003614 <MX_I2C1_Init+0x54>)
 80035c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80035ca:	4b11      	ldr	r3, [pc, #68]	; (8003610 <MX_I2C1_Init+0x50>)
 80035cc:	4a12      	ldr	r2, [pc, #72]	; (8003618 <MX_I2C1_Init+0x58>)
 80035ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035d0:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <MX_I2C1_Init+0x50>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80035d6:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <MX_I2C1_Init+0x50>)
 80035d8:	2200      	movs	r2, #0
 80035da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035dc:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <MX_I2C1_Init+0x50>)
 80035de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035e4:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <MX_I2C1_Init+0x50>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <MX_I2C1_Init+0x50>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035f0:	4b07      	ldr	r3, [pc, #28]	; (8003610 <MX_I2C1_Init+0x50>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035f6:	4b06      	ldr	r3, [pc, #24]	; (8003610 <MX_I2C1_Init+0x50>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035fc:	4804      	ldr	r0, [pc, #16]	; (8003610 <MX_I2C1_Init+0x50>)
 80035fe:	f003 f969 	bl	80068d4 <HAL_I2C_Init>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003608:	f000 fbde 	bl	8003dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800360c:	bf00      	nop
 800360e:	bd80      	pop	{r7, pc}
 8003610:	2000b344 	.word	0x2000b344
 8003614:	40005400 	.word	0x40005400
 8003618:	000186a0 	.word	0x000186a0

0800361c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003620:	4b12      	ldr	r3, [pc, #72]	; (800366c <MX_I2C2_Init+0x50>)
 8003622:	4a13      	ldr	r2, [pc, #76]	; (8003670 <MX_I2C2_Init+0x54>)
 8003624:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003626:	4b11      	ldr	r3, [pc, #68]	; (800366c <MX_I2C2_Init+0x50>)
 8003628:	4a12      	ldr	r2, [pc, #72]	; (8003674 <MX_I2C2_Init+0x58>)
 800362a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800362c:	4b0f      	ldr	r3, [pc, #60]	; (800366c <MX_I2C2_Init+0x50>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 70;
 8003632:	4b0e      	ldr	r3, [pc, #56]	; (800366c <MX_I2C2_Init+0x50>)
 8003634:	2246      	movs	r2, #70	; 0x46
 8003636:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003638:	4b0c      	ldr	r3, [pc, #48]	; (800366c <MX_I2C2_Init+0x50>)
 800363a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800363e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <MX_I2C2_Init+0x50>)
 8003642:	2200      	movs	r2, #0
 8003644:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003646:	4b09      	ldr	r3, [pc, #36]	; (800366c <MX_I2C2_Init+0x50>)
 8003648:	2200      	movs	r2, #0
 800364a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800364c:	4b07      	ldr	r3, [pc, #28]	; (800366c <MX_I2C2_Init+0x50>)
 800364e:	2200      	movs	r2, #0
 8003650:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <MX_I2C2_Init+0x50>)
 8003654:	2200      	movs	r2, #0
 8003656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003658:	4804      	ldr	r0, [pc, #16]	; (800366c <MX_I2C2_Init+0x50>)
 800365a:	f003 f93b 	bl	80068d4 <HAL_I2C_Init>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003664:	f000 fbb0 	bl	8003dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003668:	bf00      	nop
 800366a:	bd80      	pop	{r7, pc}
 800366c:	2000b398 	.word	0x2000b398
 8003670:	40005800 	.word	0x40005800
 8003674:	00061a80 	.word	0x00061a80

08003678 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800367c:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <MX_I2C3_Init+0x50>)
 800367e:	4a13      	ldr	r2, [pc, #76]	; (80036cc <MX_I2C3_Init+0x54>)
 8003680:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003682:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <MX_I2C3_Init+0x50>)
 8003684:	4a12      	ldr	r2, [pc, #72]	; (80036d0 <MX_I2C3_Init+0x58>)
 8003686:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003688:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <MX_I2C3_Init+0x50>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800368e:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <MX_I2C3_Init+0x50>)
 8003690:	2200      	movs	r2, #0
 8003692:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003694:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <MX_I2C3_Init+0x50>)
 8003696:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800369a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <MX_I2C3_Init+0x50>)
 800369e:	2200      	movs	r2, #0
 80036a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <MX_I2C3_Init+0x50>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <MX_I2C3_Init+0x50>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <MX_I2C3_Init+0x50>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80036b4:	4804      	ldr	r0, [pc, #16]	; (80036c8 <MX_I2C3_Init+0x50>)
 80036b6:	f003 f90d 	bl	80068d4 <HAL_I2C_Init>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80036c0:	f000 fb82 	bl	8003dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80036c4:	bf00      	nop
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	2000b290 	.word	0x2000b290
 80036cc:	40005c00 	.word	0x40005c00
 80036d0:	000186a0 	.word	0x000186a0

080036d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08e      	sub	sp, #56	; 0x38
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	60da      	str	r2, [r3, #12]
 80036ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a90      	ldr	r2, [pc, #576]	; (8003934 <HAL_I2C_MspInit+0x260>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d16b      	bne.n	80037ce <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	623b      	str	r3, [r7, #32]
 80036fa:	4b8f      	ldr	r3, [pc, #572]	; (8003938 <HAL_I2C_MspInit+0x264>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	4a8e      	ldr	r2, [pc, #568]	; (8003938 <HAL_I2C_MspInit+0x264>)
 8003700:	f043 0302 	orr.w	r3, r3, #2
 8003704:	6313      	str	r3, [r2, #48]	; 0x30
 8003706:	4b8c      	ldr	r3, [pc, #560]	; (8003938 <HAL_I2C_MspInit+0x264>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	623b      	str	r3, [r7, #32]
 8003710:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AS5600_1_SCL_Pin|AS5600_1_SDA_Pin;
 8003712:	23c0      	movs	r3, #192	; 0xc0
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003716:	2312      	movs	r3, #18
 8003718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800371a:	2301      	movs	r3, #1
 800371c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371e:	2303      	movs	r3, #3
 8003720:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003722:	2304      	movs	r3, #4
 8003724:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800372a:	4619      	mov	r1, r3
 800372c:	4883      	ldr	r0, [pc, #524]	; (800393c <HAL_I2C_MspInit+0x268>)
 800372e:	f002 ff01 	bl	8006534 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	4b80      	ldr	r3, [pc, #512]	; (8003938 <HAL_I2C_MspInit+0x264>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	4a7f      	ldr	r2, [pc, #508]	; (8003938 <HAL_I2C_MspInit+0x264>)
 800373c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003740:	6413      	str	r3, [r2, #64]	; 0x40
 8003742:	4b7d      	ldr	r3, [pc, #500]	; (8003938 <HAL_I2C_MspInit+0x264>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800374a:	61fb      	str	r3, [r7, #28]
 800374c:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800374e:	4b7c      	ldr	r3, [pc, #496]	; (8003940 <HAL_I2C_MspInit+0x26c>)
 8003750:	4a7c      	ldr	r2, [pc, #496]	; (8003944 <HAL_I2C_MspInit+0x270>)
 8003752:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003754:	4b7a      	ldr	r3, [pc, #488]	; (8003940 <HAL_I2C_MspInit+0x26c>)
 8003756:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800375a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800375c:	4b78      	ldr	r3, [pc, #480]	; (8003940 <HAL_I2C_MspInit+0x26c>)
 800375e:	2200      	movs	r2, #0
 8003760:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003762:	4b77      	ldr	r3, [pc, #476]	; (8003940 <HAL_I2C_MspInit+0x26c>)
 8003764:	2200      	movs	r2, #0
 8003766:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003768:	4b75      	ldr	r3, [pc, #468]	; (8003940 <HAL_I2C_MspInit+0x26c>)
 800376a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800376e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003770:	4b73      	ldr	r3, [pc, #460]	; (8003940 <HAL_I2C_MspInit+0x26c>)
 8003772:	2200      	movs	r2, #0
 8003774:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003776:	4b72      	ldr	r3, [pc, #456]	; (8003940 <HAL_I2C_MspInit+0x26c>)
 8003778:	2200      	movs	r2, #0
 800377a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800377c:	4b70      	ldr	r3, [pc, #448]	; (8003940 <HAL_I2C_MspInit+0x26c>)
 800377e:	2200      	movs	r2, #0
 8003780:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003782:	4b6f      	ldr	r3, [pc, #444]	; (8003940 <HAL_I2C_MspInit+0x26c>)
 8003784:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003788:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800378a:	4b6d      	ldr	r3, [pc, #436]	; (8003940 <HAL_I2C_MspInit+0x26c>)
 800378c:	2200      	movs	r2, #0
 800378e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003790:	486b      	ldr	r0, [pc, #428]	; (8003940 <HAL_I2C_MspInit+0x26c>)
 8003792:	f001 ffdb 	bl	800574c <HAL_DMA_Init>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800379c:	f000 fb14 	bl	8003dc8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a67      	ldr	r2, [pc, #412]	; (8003940 <HAL_I2C_MspInit+0x26c>)
 80037a4:	639a      	str	r2, [r3, #56]	; 0x38
 80037a6:	4a66      	ldr	r2, [pc, #408]	; (8003940 <HAL_I2C_MspInit+0x26c>)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80037ac:	2200      	movs	r2, #0
 80037ae:	2105      	movs	r1, #5
 80037b0:	201f      	movs	r0, #31
 80037b2:	f001 ff9c 	bl	80056ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80037b6:	201f      	movs	r0, #31
 80037b8:	f001 ffb5 	bl	8005726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 15, 0);
 80037bc:	2200      	movs	r2, #0
 80037be:	210f      	movs	r1, #15
 80037c0:	2020      	movs	r0, #32
 80037c2:	f001 ff94 	bl	80056ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80037c6:	2020      	movs	r0, #32
 80037c8:	f001 ffad 	bl	8005726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80037cc:	e156      	b.n	8003a7c <HAL_I2C_MspInit+0x3a8>
  else if(i2cHandle->Instance==I2C2)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a5d      	ldr	r2, [pc, #372]	; (8003948 <HAL_I2C_MspInit+0x274>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	f040 80c1 	bne.w	800395c <HAL_I2C_MspInit+0x288>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	4b56      	ldr	r3, [pc, #344]	; (8003938 <HAL_I2C_MspInit+0x264>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	4a55      	ldr	r2, [pc, #340]	; (8003938 <HAL_I2C_MspInit+0x264>)
 80037e4:	f043 0302 	orr.w	r3, r3, #2
 80037e8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ea:	4b53      	ldr	r3, [pc, #332]	; (8003938 <HAL_I2C_MspInit+0x264>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	61bb      	str	r3, [r7, #24]
 80037f4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037fc:	2312      	movs	r3, #18
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003800:	2301      	movs	r3, #1
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003804:	2303      	movs	r3, #3
 8003806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003808:	2304      	movs	r3, #4
 800380a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800380c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003810:	4619      	mov	r1, r3
 8003812:	484a      	ldr	r0, [pc, #296]	; (800393c <HAL_I2C_MspInit+0x268>)
 8003814:	f002 fe8e 	bl	8006534 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003818:	2308      	movs	r3, #8
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800381c:	2312      	movs	r3, #18
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003820:	2301      	movs	r3, #1
 8003822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003824:	2303      	movs	r3, #3
 8003826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003828:	2309      	movs	r3, #9
 800382a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800382c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003830:	4619      	mov	r1, r3
 8003832:	4842      	ldr	r0, [pc, #264]	; (800393c <HAL_I2C_MspInit+0x268>)
 8003834:	f002 fe7e 	bl	8006534 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	4b3e      	ldr	r3, [pc, #248]	; (8003938 <HAL_I2C_MspInit+0x264>)
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	4a3d      	ldr	r2, [pc, #244]	; (8003938 <HAL_I2C_MspInit+0x264>)
 8003842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003846:	6413      	str	r3, [r2, #64]	; 0x40
 8003848:	4b3b      	ldr	r3, [pc, #236]	; (8003938 <HAL_I2C_MspInit+0x264>)
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	697b      	ldr	r3, [r7, #20]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8003854:	4b3d      	ldr	r3, [pc, #244]	; (800394c <HAL_I2C_MspInit+0x278>)
 8003856:	4a3e      	ldr	r2, [pc, #248]	; (8003950 <HAL_I2C_MspInit+0x27c>)
 8003858:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800385a:	4b3c      	ldr	r3, [pc, #240]	; (800394c <HAL_I2C_MspInit+0x278>)
 800385c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003860:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003862:	4b3a      	ldr	r3, [pc, #232]	; (800394c <HAL_I2C_MspInit+0x278>)
 8003864:	2200      	movs	r2, #0
 8003866:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003868:	4b38      	ldr	r3, [pc, #224]	; (800394c <HAL_I2C_MspInit+0x278>)
 800386a:	2200      	movs	r2, #0
 800386c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800386e:	4b37      	ldr	r3, [pc, #220]	; (800394c <HAL_I2C_MspInit+0x278>)
 8003870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003874:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003876:	4b35      	ldr	r3, [pc, #212]	; (800394c <HAL_I2C_MspInit+0x278>)
 8003878:	2200      	movs	r2, #0
 800387a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800387c:	4b33      	ldr	r3, [pc, #204]	; (800394c <HAL_I2C_MspInit+0x278>)
 800387e:	2200      	movs	r2, #0
 8003880:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8003882:	4b32      	ldr	r3, [pc, #200]	; (800394c <HAL_I2C_MspInit+0x278>)
 8003884:	2200      	movs	r2, #0
 8003886:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003888:	4b30      	ldr	r3, [pc, #192]	; (800394c <HAL_I2C_MspInit+0x278>)
 800388a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800388e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003890:	4b2e      	ldr	r3, [pc, #184]	; (800394c <HAL_I2C_MspInit+0x278>)
 8003892:	2200      	movs	r2, #0
 8003894:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8003896:	482d      	ldr	r0, [pc, #180]	; (800394c <HAL_I2C_MspInit+0x278>)
 8003898:	f001 ff58 	bl	800574c <HAL_DMA_Init>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 80038a2:	f000 fa91 	bl	8003dc8 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a28      	ldr	r2, [pc, #160]	; (800394c <HAL_I2C_MspInit+0x278>)
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38
 80038ac:	4a27      	ldr	r2, [pc, #156]	; (800394c <HAL_I2C_MspInit+0x278>)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80038b2:	4b28      	ldr	r3, [pc, #160]	; (8003954 <HAL_I2C_MspInit+0x280>)
 80038b4:	4a28      	ldr	r2, [pc, #160]	; (8003958 <HAL_I2C_MspInit+0x284>)
 80038b6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80038b8:	4b26      	ldr	r3, [pc, #152]	; (8003954 <HAL_I2C_MspInit+0x280>)
 80038ba:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80038be:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038c0:	4b24      	ldr	r3, [pc, #144]	; (8003954 <HAL_I2C_MspInit+0x280>)
 80038c2:	2240      	movs	r2, #64	; 0x40
 80038c4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038c6:	4b23      	ldr	r3, [pc, #140]	; (8003954 <HAL_I2C_MspInit+0x280>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038cc:	4b21      	ldr	r3, [pc, #132]	; (8003954 <HAL_I2C_MspInit+0x280>)
 80038ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038d2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038d4:	4b1f      	ldr	r3, [pc, #124]	; (8003954 <HAL_I2C_MspInit+0x280>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038da:	4b1e      	ldr	r3, [pc, #120]	; (8003954 <HAL_I2C_MspInit+0x280>)
 80038dc:	2200      	movs	r2, #0
 80038de:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80038e0:	4b1c      	ldr	r3, [pc, #112]	; (8003954 <HAL_I2C_MspInit+0x280>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80038e6:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <HAL_I2C_MspInit+0x280>)
 80038e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80038ec:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038ee:	4b19      	ldr	r3, [pc, #100]	; (8003954 <HAL_I2C_MspInit+0x280>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80038f4:	4817      	ldr	r0, [pc, #92]	; (8003954 <HAL_I2C_MspInit+0x280>)
 80038f6:	f001 ff29 	bl	800574c <HAL_DMA_Init>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_I2C_MspInit+0x230>
      Error_Handler();
 8003900:	f000 fa62 	bl	8003dc8 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a13      	ldr	r2, [pc, #76]	; (8003954 <HAL_I2C_MspInit+0x280>)
 8003908:	635a      	str	r2, [r3, #52]	; 0x34
 800390a:	4a12      	ldr	r2, [pc, #72]	; (8003954 <HAL_I2C_MspInit+0x280>)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8003910:	2200      	movs	r2, #0
 8003912:	2105      	movs	r1, #5
 8003914:	2021      	movs	r0, #33	; 0x21
 8003916:	f001 feea 	bl	80056ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800391a:	2021      	movs	r0, #33	; 0x21
 800391c:	f001 ff03 	bl	8005726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 15, 0);
 8003920:	2200      	movs	r2, #0
 8003922:	210f      	movs	r1, #15
 8003924:	2022      	movs	r0, #34	; 0x22
 8003926:	f001 fee2 	bl	80056ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800392a:	2022      	movs	r0, #34	; 0x22
 800392c:	f001 fefb 	bl	8005726 <HAL_NVIC_EnableIRQ>
}
 8003930:	e0a4      	b.n	8003a7c <HAL_I2C_MspInit+0x3a8>
 8003932:	bf00      	nop
 8003934:	40005400 	.word	0x40005400
 8003938:	40023800 	.word	0x40023800
 800393c:	40020400 	.word	0x40020400
 8003940:	2000b4ac 	.word	0x2000b4ac
 8003944:	40026010 	.word	0x40026010
 8003948:	40005800 	.word	0x40005800
 800394c:	2000b3ec 	.word	0x2000b3ec
 8003950:	40026040 	.word	0x40026040
 8003954:	2000b44c 	.word	0x2000b44c
 8003958:	400260b8 	.word	0x400260b8
  else if(i2cHandle->Instance==I2C3)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a48      	ldr	r2, [pc, #288]	; (8003a84 <HAL_I2C_MspInit+0x3b0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	f040 808a 	bne.w	8003a7c <HAL_I2C_MspInit+0x3a8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003968:	2300      	movs	r3, #0
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	4b46      	ldr	r3, [pc, #280]	; (8003a88 <HAL_I2C_MspInit+0x3b4>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	4a45      	ldr	r2, [pc, #276]	; (8003a88 <HAL_I2C_MspInit+0x3b4>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	6313      	str	r3, [r2, #48]	; 0x30
 8003978:	4b43      	ldr	r3, [pc, #268]	; (8003a88 <HAL_I2C_MspInit+0x3b4>)
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	4b3f      	ldr	r3, [pc, #252]	; (8003a88 <HAL_I2C_MspInit+0x3b4>)
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	4a3e      	ldr	r2, [pc, #248]	; (8003a88 <HAL_I2C_MspInit+0x3b4>)
 800398e:	f043 0302 	orr.w	r3, r3, #2
 8003992:	6313      	str	r3, [r2, #48]	; 0x30
 8003994:	4b3c      	ldr	r3, [pc, #240]	; (8003a88 <HAL_I2C_MspInit+0x3b4>)
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AS5600_2_SCL_Pin;
 80039a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039a6:	2312      	movs	r3, #18
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039aa:	2301      	movs	r3, #1
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ae:	2303      	movs	r3, #3
 80039b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80039b2:	2304      	movs	r3, #4
 80039b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AS5600_2_SCL_GPIO_Port, &GPIO_InitStruct);
 80039b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ba:	4619      	mov	r1, r3
 80039bc:	4833      	ldr	r0, [pc, #204]	; (8003a8c <HAL_I2C_MspInit+0x3b8>)
 80039be:	f002 fdb9 	bl	8006534 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AS5600_2_SDA_Pin;
 80039c2:	2310      	movs	r3, #16
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039c6:	2312      	movs	r3, #18
 80039c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039ca:	2301      	movs	r3, #1
 80039cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ce:	2303      	movs	r3, #3
 80039d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80039d2:	2309      	movs	r3, #9
 80039d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AS5600_2_SDA_GPIO_Port, &GPIO_InitStruct);
 80039d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039da:	4619      	mov	r1, r3
 80039dc:	482c      	ldr	r0, [pc, #176]	; (8003a90 <HAL_I2C_MspInit+0x3bc>)
 80039de:	f002 fda9 	bl	8006534 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <HAL_I2C_MspInit+0x3b4>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	4a27      	ldr	r2, [pc, #156]	; (8003a88 <HAL_I2C_MspInit+0x3b4>)
 80039ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039f0:	6413      	str	r3, [r2, #64]	; 0x40
 80039f2:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <HAL_I2C_MspInit+0x3b4>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 80039fe:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <HAL_I2C_MspInit+0x3c0>)
 8003a00:	4a25      	ldr	r2, [pc, #148]	; (8003a98 <HAL_I2C_MspInit+0x3c4>)
 8003a02:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 8003a04:	4b23      	ldr	r3, [pc, #140]	; (8003a94 <HAL_I2C_MspInit+0x3c0>)
 8003a06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a0a:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a0c:	4b21      	ldr	r3, [pc, #132]	; (8003a94 <HAL_I2C_MspInit+0x3c0>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a12:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <HAL_I2C_MspInit+0x3c0>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a18:	4b1e      	ldr	r3, [pc, #120]	; (8003a94 <HAL_I2C_MspInit+0x3c0>)
 8003a1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a1e:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a20:	4b1c      	ldr	r3, [pc, #112]	; (8003a94 <HAL_I2C_MspInit+0x3c0>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a26:	4b1b      	ldr	r3, [pc, #108]	; (8003a94 <HAL_I2C_MspInit+0x3c0>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <HAL_I2C_MspInit+0x3c0>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003a32:	4b18      	ldr	r3, [pc, #96]	; (8003a94 <HAL_I2C_MspInit+0x3c0>)
 8003a34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a38:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a3a:	4b16      	ldr	r3, [pc, #88]	; (8003a94 <HAL_I2C_MspInit+0x3c0>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8003a40:	4814      	ldr	r0, [pc, #80]	; (8003a94 <HAL_I2C_MspInit+0x3c0>)
 8003a42:	f001 fe83 	bl	800574c <HAL_DMA_Init>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_I2C_MspInit+0x37c>
      Error_Handler();
 8003a4c:	f000 f9bc 	bl	8003dc8 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a10      	ldr	r2, [pc, #64]	; (8003a94 <HAL_I2C_MspInit+0x3c0>)
 8003a54:	639a      	str	r2, [r3, #56]	; 0x38
 8003a56:	4a0f      	ldr	r2, [pc, #60]	; (8003a94 <HAL_I2C_MspInit+0x3c0>)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2105      	movs	r1, #5
 8003a60:	2048      	movs	r0, #72	; 0x48
 8003a62:	f001 fe44 	bl	80056ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003a66:	2048      	movs	r0, #72	; 0x48
 8003a68:	f001 fe5d 	bl	8005726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 15, 0);
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	210f      	movs	r1, #15
 8003a70:	2049      	movs	r0, #73	; 0x49
 8003a72:	f001 fe3c 	bl	80056ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003a76:	2049      	movs	r0, #73	; 0x49
 8003a78:	f001 fe55 	bl	8005726 <HAL_NVIC_EnableIRQ>
}
 8003a7c:	bf00      	nop
 8003a7e:	3738      	adds	r7, #56	; 0x38
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40005c00 	.word	0x40005c00
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40020000 	.word	0x40020000
 8003a90:	40020400 	.word	0x40020400
 8003a94:	2000b2e4 	.word	0x2000b2e4
 8003a98:	40026028 	.word	0x40026028

08003a9c <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 1000);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	4804      	ldr	r0, [pc, #16]	; (8003ac4 <_write+0x28>)
 8003ab4:	f007 fae8 	bl	800b088 <HAL_UART_Transmit>
  return len;
 8003ab8:	687b      	ldr	r3, [r7, #4]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	2000b650 	.word	0x2000b650

08003ac8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART2){
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1a      	ldr	r2, [pc, #104]	; (8003b44 <HAL_UARTEx_RxEventCallback+0x7c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d114      	bne.n	8003b08 <HAL_UARTEx_RxEventCallback+0x40>
		memcpy(uart2_main_buf,uart2_rx_buf,UART2_BUFFER_LENGTH);
 8003ade:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <HAL_UARTEx_RxEventCallback+0x80>)
 8003ae0:	4a1a      	ldr	r2, [pc, #104]	; (8003b4c <HAL_UARTEx_RxEventCallback+0x84>)
 8003ae2:	6810      	ldr	r0, [r2, #0]
 8003ae4:	6851      	ldr	r1, [r2, #4]
 8003ae6:	6018      	str	r0, [r3, #0]
 8003ae8:	6059      	str	r1, [r3, #4]
 8003aea:	8912      	ldrh	r2, [r2, #8]
 8003aec:	811a      	strh	r2, [r3, #8]
		uart2_onData=true;
 8003aee:	4b18      	ldr	r3, [pc, #96]	; (8003b50 <HAL_UARTEx_RxEventCallback+0x88>)
 8003af0:	2201      	movs	r2, #1
 8003af2:	701a      	strb	r2, [r3, #0]
		uart2_data_length=Size;
 8003af4:	887b      	ldrh	r3, [r7, #2]
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <HAL_UARTEx_RxEventCallback+0x8c>)
 8003afa:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart2_rx_buf, UART2_BUFFER_LENGTH);
 8003afc:	220a      	movs	r2, #10
 8003afe:	4913      	ldr	r1, [pc, #76]	; (8003b4c <HAL_UARTEx_RxEventCallback+0x84>)
 8003b00:	4815      	ldr	r0, [pc, #84]	; (8003b58 <HAL_UARTEx_RxEventCallback+0x90>)
 8003b02:	f007 fb53 	bl	800b1ac <HAL_UARTEx_ReceiveToIdle_DMA>
		memcpy(uart1_main_buf,uart1_rx_buf,UART1_BUFFER_LENGTH);
		uart1_onData=true;
		uart1_data_length=Size;
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart1_rx_buf, UART1_BUFFER_LENGTH);
	}
}
 8003b06:	e018      	b.n	8003b3a <HAL_UARTEx_RxEventCallback+0x72>
	}else if(huart->Instance==USART1){
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <HAL_UARTEx_RxEventCallback+0x94>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d113      	bne.n	8003b3a <HAL_UARTEx_RxEventCallback+0x72>
		memcpy(uart1_main_buf,uart1_rx_buf,UART1_BUFFER_LENGTH);
 8003b12:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <HAL_UARTEx_RxEventCallback+0x98>)
 8003b14:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <HAL_UARTEx_RxEventCallback+0x9c>)
 8003b16:	4610      	mov	r0, r2
 8003b18:	4619      	mov	r1, r3
 8003b1a:	2364      	movs	r3, #100	; 0x64
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f00b fae7 	bl	800f0f0 <memcpy>
		uart1_onData=true;
 8003b22:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <HAL_UARTEx_RxEventCallback+0xa0>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
		uart1_data_length=Size;
 8003b28:	887b      	ldrh	r3, [r7, #2]
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <HAL_UARTEx_RxEventCallback+0xa4>)
 8003b2e:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart1_rx_buf, UART1_BUFFER_LENGTH);
 8003b30:	2264      	movs	r2, #100	; 0x64
 8003b32:	490c      	ldr	r1, [pc, #48]	; (8003b64 <HAL_UARTEx_RxEventCallback+0x9c>)
 8003b34:	480e      	ldr	r0, [pc, #56]	; (8003b70 <HAL_UARTEx_RxEventCallback+0xa8>)
 8003b36:	f007 fb39 	bl	800b1ac <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40004400 	.word	0x40004400
 8003b48:	2000b56c 	.word	0x2000b56c
 8003b4c:	2000b5e0 	.word	0x2000b5e0
 8003b50:	200008c4 	.word	0x200008c4
 8003b54:	2000b5dc 	.word	0x2000b5dc
 8003b58:	2000b650 	.word	0x2000b650
 8003b5c:	40011000 	.word	0x40011000
 8003b60:	2000b694 	.word	0x2000b694
 8003b64:	2000b5ec 	.word	0x2000b5ec
 8003b68:	200008c5 	.word	0x200008c5
 8003b6c:	2000b578 	.word	0x2000b578
 8003b70:	2000b8a8 	.word	0x2000b8a8

08003b74 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a0c      	ldr	r2, [pc, #48]	; (8003bb4 <HAL_UART_ErrorCallback+0x40>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d112      	bne.n	8003bac <HAL_UART_ErrorCallback+0x38>
		for(int i=0;i<50;i++){
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	e00a      	b.n	8003ba2 <HAL_UART_ErrorCallback+0x2e>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003b8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b90:	4809      	ldr	r0, [pc, #36]	; (8003bb8 <HAL_UART_ErrorCallback+0x44>)
 8003b92:	f002 fe84 	bl	800689e <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8003b96:	2064      	movs	r0, #100	; 0x64
 8003b98:	f001 f836 	bl	8004c08 <HAL_Delay>
		for(int i=0;i<50;i++){
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b31      	cmp	r3, #49	; 0x31
 8003ba6:	ddf1      	ble.n	8003b8c <HAL_UART_ErrorCallback+0x18>

		}
		HAL_NVIC_SystemReset();
 8003ba8:	f001 fdcb 	bl	8005742 <HAL_NVIC_SystemReset>
	}
}
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40011000 	.word	0x40011000
 8003bb8:	40020000 	.word	0x40020000

08003bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bc0:	f000 ffe0 	bl	8004b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bc4:	f000 f868 	bl	8003c98 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_FLASH_Unlock();
 8003bc8:	f002 fa30 	bl	800602c <HAL_FLASH_Unlock>
  if( EE_Init() != EE_OK)
 8003bcc:	f7fe f82c 	bl	8001c28 <EE_Init>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <main+0x1e>
  {
    Error_Handler();
 8003bd6:	f000 f8f7 	bl	8003dc8 <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bda:	f7ff fc61 	bl	80034a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003bde:	f7fd ffc5 	bl	8001b6c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003be2:	f000 fe5f 	bl	80048a4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8003be6:	f7fd fe99 	bl	800191c <MX_ADC1_Init>
  MX_TIM2_Init();
 8003bea:	f000 fb1b 	bl	8004224 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003bee:	f000 fb8f 	bl	8004310 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003bf2:	f000 fc03 	bl	80043fc <MX_TIM4_Init>
  MX_TIM10_Init();
 8003bf6:	f000 fcef 	bl	80045d8 <MX_TIM10_Init>
  MX_I2C1_Init();
 8003bfa:	f7ff fce1 	bl	80035c0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003bfe:	f7ff fd0d 	bl	800361c <MX_I2C2_Init>
  MX_I2C3_Init();
 8003c02:	f7ff fd39 	bl	8003678 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8003c06:	f000 fe77 	bl	80048f8 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8003c0a:	f000 fc6f 	bl	80044ec <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart2,(uint8_t *)"hellobaby\r\n",11,1000);
 8003c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c12:	220b      	movs	r2, #11
 8003c14:	4918      	ldr	r1, [pc, #96]	; (8003c78 <main+0xbc>)
 8003c16:	4819      	ldr	r0, [pc, #100]	; (8003c7c <main+0xc0>)
 8003c18:	f007 fa36 	bl	800b088 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)"hellobaby\r\n",11,1000);
 8003c1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c20:	220b      	movs	r2, #11
 8003c22:	4915      	ldr	r1, [pc, #84]	; (8003c78 <main+0xbc>)
 8003c24:	4816      	ldr	r0, [pc, #88]	; (8003c80 <main+0xc4>)
 8003c26:	f007 fa2f 	bl	800b088 <HAL_UART_Transmit>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart2_rx_buf, UART2_BUFFER_LENGTH);
 8003c2a:	220a      	movs	r2, #10
 8003c2c:	4915      	ldr	r1, [pc, #84]	; (8003c84 <main+0xc8>)
 8003c2e:	4813      	ldr	r0, [pc, #76]	; (8003c7c <main+0xc0>)
 8003c30:	f007 fabc 	bl	800b1ac <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8003c34:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <main+0xcc>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <main+0xcc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0208 	bic.w	r2, r2, #8
 8003c42:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart1_rx_buf, UART1_BUFFER_LENGTH);
 8003c44:	2264      	movs	r2, #100	; 0x64
 8003c46:	4911      	ldr	r1, [pc, #68]	; (8003c8c <main+0xd0>)
 8003c48:	480d      	ldr	r0, [pc, #52]	; (8003c80 <main+0xc4>)
 8003c4a:	f007 faaf 	bl	800b1ac <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8003c4e:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <main+0xd4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <main+0xd4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0208 	bic.w	r2, r2, #8
 8003c5c:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003c5e:	f7fe fd6f 	bl	8002740 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003c62:	f008 f963 	bl	800bf2c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003c66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c6a:	480a      	ldr	r0, [pc, #40]	; (8003c94 <main+0xd8>)
 8003c6c:	f002 fe17 	bl	800689e <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003c70:	2064      	movs	r0, #100	; 0x64
 8003c72:	f000 ffc9 	bl	8004c08 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003c76:	e7f6      	b.n	8003c66 <main+0xaa>
 8003c78:	080123f8 	.word	0x080123f8
 8003c7c:	2000b650 	.word	0x2000b650
 8003c80:	2000b8a8 	.word	0x2000b8a8
 8003c84:	2000b5e0 	.word	0x2000b5e0
 8003c88:	2000b50c 	.word	0x2000b50c
 8003c8c:	2000b5ec 	.word	0x2000b5ec
 8003c90:	2000b57c 	.word	0x2000b57c
 8003c94:	40020000 	.word	0x40020000

08003c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b094      	sub	sp, #80	; 0x50
 8003c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c9e:	f107 0320 	add.w	r3, r7, #32
 8003ca2:	2230      	movs	r2, #48	; 0x30
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f00b fa30 	bl	800f10c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cac:	f107 030c 	add.w	r3, r7, #12
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	609a      	str	r2, [r3, #8]
 8003cb8:	60da      	str	r2, [r3, #12]
 8003cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	4b28      	ldr	r3, [pc, #160]	; (8003d64 <SystemClock_Config+0xcc>)
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	4a27      	ldr	r2, [pc, #156]	; (8003d64 <SystemClock_Config+0xcc>)
 8003cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cca:	6413      	str	r3, [r2, #64]	; 0x40
 8003ccc:	4b25      	ldr	r3, [pc, #148]	; (8003d64 <SystemClock_Config+0xcc>)
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cd8:	2300      	movs	r3, #0
 8003cda:	607b      	str	r3, [r7, #4]
 8003cdc:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <SystemClock_Config+0xd0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ce4:	4a20      	ldr	r2, [pc, #128]	; (8003d68 <SystemClock_Config+0xd0>)
 8003ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <SystemClock_Config+0xd0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d02:	2302      	movs	r3, #2
 8003d04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003d0c:	2308      	movs	r3, #8
 8003d0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003d10:	23a8      	movs	r3, #168	; 0xa8
 8003d12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d14:	2302      	movs	r3, #2
 8003d16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003d18:	2304      	movs	r3, #4
 8003d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d1c:	f107 0320 	add.w	r3, r7, #32
 8003d20:	4618      	mov	r0, r3
 8003d22:	f005 fb15 	bl	8009350 <HAL_RCC_OscConfig>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003d2c:	f000 f84c 	bl	8003dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d30:	230f      	movs	r3, #15
 8003d32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d34:	2302      	movs	r3, #2
 8003d36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d46:	f107 030c 	add.w	r3, r7, #12
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f005 fd77 	bl	8009840 <HAL_RCC_ClockConfig>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003d58:	f000 f836 	bl	8003dc8 <Error_Handler>
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	3750      	adds	r7, #80	; 0x50
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40007000 	.word	0x40007000

08003d6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a0f      	ldr	r2, [pc, #60]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d101      	bne.n	8003d82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003d7e:	f000 ff23 	bl	8004bc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM10){ // UPDATE AS5600
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a0d      	ldr	r2, [pc, #52]	; (8003dbc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d111      	bne.n	8003db0 <HAL_TIM_PeriodElapsedCallback+0x44>
           if(FLAG_AS5600_M1==HAL_OK){
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	f083 0301 	eor.w	r3, r3, #1
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_TIM_PeriodElapsedCallback+0x32>
          	 AS5600_M1_getPOS();
 8003d9a:	f7fd f8d9 	bl	8000f50 <AS5600_M1_getPOS>
           }
           if(FLAG_AS5600_M2 == HAL_OK){
 8003d9e:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	f083 0301 	eor.w	r3, r3, #1
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_TIM_PeriodElapsedCallback+0x44>
          	 AS5600_M2_getPOS();
 8003dac:	f7fd f8e4 	bl	8000f78 <AS5600_M2_getPOS>
           }
    }
  /* USER CODE END Callback 1 */
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40014800 	.word	0x40014800
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	20000208 	.word	0x20000208
 8003dc4:	20000209 	.word	0x20000209

08003dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dcc:	b672      	cpsid	i
}
 8003dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003dd0:	e7fe      	b.n	8003dd0 <Error_Handler+0x8>
	...

08003dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dda:	2300      	movs	r3, #0
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <HAL_MspInit+0x54>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	4a11      	ldr	r2, [pc, #68]	; (8003e28 <HAL_MspInit+0x54>)
 8003de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003de8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dea:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <HAL_MspInit+0x54>)
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df2:	607b      	str	r3, [r7, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003df6:	2300      	movs	r3, #0
 8003df8:	603b      	str	r3, [r7, #0]
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_MspInit+0x54>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <HAL_MspInit+0x54>)
 8003e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e04:	6413      	str	r3, [r2, #64]	; 0x40
 8003e06:	4b08      	ldr	r3, [pc, #32]	; (8003e28 <HAL_MspInit+0x54>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e12:	2200      	movs	r2, #0
 8003e14:	210f      	movs	r1, #15
 8003e16:	f06f 0001 	mvn.w	r0, #1
 8003e1a:	f001 fc68 	bl	80056ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800

08003e2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08c      	sub	sp, #48	; 0x30
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	201a      	movs	r0, #26
 8003e42:	f001 fc54 	bl	80056ee <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003e46:	201a      	movs	r0, #26
 8003e48:	f001 fc6d 	bl	8005726 <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	4b1e      	ldr	r3, [pc, #120]	; (8003ecc <HAL_InitTick+0xa0>)
 8003e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e54:	4a1d      	ldr	r2, [pc, #116]	; (8003ecc <HAL_InitTick+0xa0>)
 8003e56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e5a:	6453      	str	r3, [r2, #68]	; 0x44
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <HAL_InitTick+0xa0>)
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003e68:	f107 0210 	add.w	r2, r7, #16
 8003e6c:	f107 0314 	add.w	r3, r7, #20
 8003e70:	4611      	mov	r1, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f005 fee0 	bl	8009c38 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003e78:	f005 feca 	bl	8009c10 <HAL_RCC_GetPCLK2Freq>
 8003e7c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e80:	4a13      	ldr	r2, [pc, #76]	; (8003ed0 <HAL_InitTick+0xa4>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	0c9b      	lsrs	r3, r3, #18
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8003e8c:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <HAL_InitTick+0xa8>)
 8003e8e:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <HAL_InitTick+0xac>)
 8003e90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8003e92:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <HAL_InitTick+0xa8>)
 8003e94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e98:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8003e9a:	4a0e      	ldr	r2, [pc, #56]	; (8003ed4 <HAL_InitTick+0xa8>)
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <HAL_InitTick+0xa8>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_InitTick+0xa8>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8003eac:	4809      	ldr	r0, [pc, #36]	; (8003ed4 <HAL_InitTick+0xa8>)
 8003eae:	f005 fef5 	bl	8009c9c <HAL_TIM_Base_Init>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d104      	bne.n	8003ec2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8003eb8:	4806      	ldr	r0, [pc, #24]	; (8003ed4 <HAL_InitTick+0xa8>)
 8003eba:	f005 ff3f 	bl	8009d3c <HAL_TIM_Base_Start_IT>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	e000      	b.n	8003ec4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3730      	adds	r7, #48	; 0x30
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	431bde83 	.word	0x431bde83
 8003ed4:	2000b6f8 	.word	0x2000b6f8
 8003ed8:	40014800 	.word	0x40014800

08003edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ee0:	e7fe      	b.n	8003ee0 <NMI_Handler+0x4>

08003ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ee6:	e7fe      	b.n	8003ee6 <HardFault_Handler+0x4>

08003ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eec:	e7fe      	b.n	8003eec <MemManage_Handler+0x4>

08003eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ef2:	e7fe      	b.n	8003ef2 <BusFault_Handler+0x4>

08003ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ef8:	e7fe      	b.n	8003ef8 <UsageFault_Handler+0x4>

08003efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003efa:	b480      	push	{r7}
 8003efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003f0c:	4802      	ldr	r0, [pc, #8]	; (8003f18 <DMA1_Stream0_IRQHandler+0x10>)
 8003f0e:	f001 fdb5 	bl	8005a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	2000b4ac 	.word	0x2000b4ac

08003f1c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8003f20:	4802      	ldr	r0, [pc, #8]	; (8003f2c <DMA1_Stream1_IRQHandler+0x10>)
 8003f22:	f001 fdab 	bl	8005a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	2000b2e4 	.word	0x2000b2e4

08003f30 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8003f34:	4802      	ldr	r0, [pc, #8]	; (8003f40 <DMA1_Stream2_IRQHandler+0x10>)
 8003f36:	f001 fda1 	bl	8005a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	2000b3ec 	.word	0x2000b3ec

08003f44 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003f48:	4802      	ldr	r0, [pc, #8]	; (8003f54 <DMA1_Stream5_IRQHandler+0x10>)
 8003f4a:	f001 fd97 	bl	8005a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	2000b50c 	.word	0x2000b50c

08003f58 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003f5c:	4802      	ldr	r0, [pc, #8]	; (8003f68 <ADC_IRQHandler+0x10>)
 8003f5e:	f000 ff79 	bl	8004e54 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	2000af38 	.word	0x2000af38

08003f6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003f70:	4802      	ldr	r0, [pc, #8]	; (8003f7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003f72:	f006 f945 	bl	800a200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	2000b788 	.word	0x2000b788

08003f80 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003f84:	4802      	ldr	r0, [pc, #8]	; (8003f90 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003f86:	f006 f93b 	bl	800a200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	2000b6f8 	.word	0x2000b6f8

08003f94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f98:	4802      	ldr	r0, [pc, #8]	; (8003fa4 <TIM2_IRQHandler+0x10>)
 8003f9a:	f006 f931 	bl	800a200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	2000b860 	.word	0x2000b860

08003fa8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003fac:	4802      	ldr	r0, [pc, #8]	; (8003fb8 <TIM3_IRQHandler+0x10>)
 8003fae:	f006 f927 	bl	800a200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003fb2:	bf00      	nop
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	2000b818 	.word	0x2000b818

08003fbc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003fc0:	4802      	ldr	r0, [pc, #8]	; (8003fcc <I2C1_EV_IRQHandler+0x10>)
 8003fc2:	f003 f9fb 	bl	80073bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003fc6:	bf00      	nop
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	2000b344 	.word	0x2000b344

08003fd0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003fd4:	4802      	ldr	r0, [pc, #8]	; (8003fe0 <I2C1_ER_IRQHandler+0x10>)
 8003fd6:	f003 fb5e 	bl	8007696 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003fda:	bf00      	nop
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	2000b344 	.word	0x2000b344

08003fe4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003fe8:	4802      	ldr	r0, [pc, #8]	; (8003ff4 <I2C2_EV_IRQHandler+0x10>)
 8003fea:	f003 f9e7 	bl	80073bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003fee:	bf00      	nop
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	2000b398 	.word	0x2000b398

08003ff8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003ffc:	4802      	ldr	r0, [pc, #8]	; (8004008 <I2C2_ER_IRQHandler+0x10>)
 8003ffe:	f003 fb4a 	bl	8007696 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	2000b398 	.word	0x2000b398

0800400c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004010:	4802      	ldr	r0, [pc, #8]	; (800401c <USART1_IRQHandler+0x10>)
 8004012:	f007 f91b 	bl	800b24c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	2000b8a8 	.word	0x2000b8a8

08004020 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004024:	4802      	ldr	r0, [pc, #8]	; (8004030 <USART2_IRQHandler+0x10>)
 8004026:	f007 f911 	bl	800b24c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800402a:	bf00      	nop
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	2000b650 	.word	0x2000b650

08004034 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8004038:	4802      	ldr	r0, [pc, #8]	; (8004044 <DMA1_Stream7_IRQHandler+0x10>)
 800403a:	f001 fd1f 	bl	8005a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	2000b44c 	.word	0x2000b44c

08004048 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800404c:	4802      	ldr	r0, [pc, #8]	; (8004058 <TIM5_IRQHandler+0x10>)
 800404e:	f006 f8d7 	bl	800a200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	2000b7d0 	.word	0x2000b7d0

0800405c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004060:	4802      	ldr	r0, [pc, #8]	; (800406c <DMA2_Stream0_IRQHandler+0x10>)
 8004062:	f001 fd0b 	bl	8005a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004066:	bf00      	nop
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	2000af80 	.word	0x2000af80

08004070 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004074:	4802      	ldr	r0, [pc, #8]	; (8004080 <DMA2_Stream2_IRQHandler+0x10>)
 8004076:	f001 fd01 	bl	8005a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	2000b57c 	.word	0x2000b57c

08004084 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8004088:	4802      	ldr	r0, [pc, #8]	; (8004094 <I2C3_EV_IRQHandler+0x10>)
 800408a:	f003 f997 	bl	80073bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	2000b290 	.word	0x2000b290

08004098 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800409c:	4802      	ldr	r0, [pc, #8]	; (80040a8 <I2C3_ER_IRQHandler+0x10>)
 800409e:	f003 fafa 	bl	8007696 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80040a2:	bf00      	nop
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	2000b290 	.word	0x2000b290

080040ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
	return 1;
 80040b0:	2301      	movs	r3, #1
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <_kill>:

int _kill(int pid, int sig)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80040c6:	f00a ffe9 	bl	800f09c <__errno>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2216      	movs	r2, #22
 80040ce:	601a      	str	r2, [r3, #0]
	return -1;
 80040d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <_exit>:

void _exit (int status)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80040e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff ffe7 	bl	80040bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80040ee:	e7fe      	b.n	80040ee <_exit+0x12>

080040f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	e00a      	b.n	8004118 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004102:	f3af 8000 	nop.w
 8004106:	4601      	mov	r1, r0
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	60ba      	str	r2, [r7, #8]
 800410e:	b2ca      	uxtb	r2, r1
 8004110:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3301      	adds	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	429a      	cmp	r2, r3
 800411e:	dbf0      	blt.n	8004102 <_read+0x12>
	}

return len;
 8004120:	687b      	ldr	r3, [r7, #4]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <_close>:
	}
	return len;
}

int _close(int file)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
	return -1;
 8004132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004152:	605a      	str	r2, [r3, #4]
	return 0;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <_isatty>:

int _isatty(int file)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
	return 1;
 800416a:	2301      	movs	r3, #1
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
	return 0;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800419c:	4a14      	ldr	r2, [pc, #80]	; (80041f0 <_sbrk+0x5c>)
 800419e:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <_sbrk+0x60>)
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041a8:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <_sbrk+0x64>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041b0:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <_sbrk+0x64>)
 80041b2:	4a12      	ldr	r2, [pc, #72]	; (80041fc <_sbrk+0x68>)
 80041b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041b6:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <_sbrk+0x64>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4413      	add	r3, r2
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d207      	bcs.n	80041d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041c4:	f00a ff6a 	bl	800f09c <__errno>
 80041c8:	4603      	mov	r3, r0
 80041ca:	220c      	movs	r2, #12
 80041cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041d2:	e009      	b.n	80041e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041d4:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <_sbrk+0x64>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041da:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <_sbrk+0x64>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	4a05      	ldr	r2, [pc, #20]	; (80041f8 <_sbrk+0x64>)
 80041e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041e6:	68fb      	ldr	r3, [r7, #12]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	20010000 	.word	0x20010000
 80041f4:	00000400 	.word	0x00000400
 80041f8:	200008c8 	.word	0x200008c8
 80041fc:	2000b960 	.word	0x2000b960

08004200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <SystemInit+0x20>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	4a05      	ldr	r2, [pc, #20]	; (8004220 <SystemInit+0x20>)
 800420c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08e      	sub	sp, #56	; 0x38
 8004228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800422a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	605a      	str	r2, [r3, #4]
 8004234:	609a      	str	r2, [r3, #8]
 8004236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004238:	f107 0320 	add.w	r3, r7, #32
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004242:	1d3b      	adds	r3, r7, #4
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	611a      	str	r2, [r3, #16]
 8004250:	615a      	str	r2, [r3, #20]
 8004252:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004254:	4b2d      	ldr	r3, [pc, #180]	; (800430c <MX_TIM2_Init+0xe8>)
 8004256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800425a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800425c:	4b2b      	ldr	r3, [pc, #172]	; (800430c <MX_TIM2_Init+0xe8>)
 800425e:	2253      	movs	r2, #83	; 0x53
 8004260:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004262:	4b2a      	ldr	r3, [pc, #168]	; (800430c <MX_TIM2_Init+0xe8>)
 8004264:	2200      	movs	r2, #0
 8004266:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8004268:	4b28      	ldr	r3, [pc, #160]	; (800430c <MX_TIM2_Init+0xe8>)
 800426a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800426e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004270:	4b26      	ldr	r3, [pc, #152]	; (800430c <MX_TIM2_Init+0xe8>)
 8004272:	2200      	movs	r2, #0
 8004274:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004276:	4b25      	ldr	r3, [pc, #148]	; (800430c <MX_TIM2_Init+0xe8>)
 8004278:	2280      	movs	r2, #128	; 0x80
 800427a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800427c:	4823      	ldr	r0, [pc, #140]	; (800430c <MX_TIM2_Init+0xe8>)
 800427e:	f005 fd0d 	bl	8009c9c <HAL_TIM_Base_Init>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004288:	f7ff fd9e 	bl	8003dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800428c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004290:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004296:	4619      	mov	r1, r3
 8004298:	481c      	ldr	r0, [pc, #112]	; (800430c <MX_TIM2_Init+0xe8>)
 800429a:	f006 f977 	bl	800a58c <HAL_TIM_ConfigClockSource>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80042a4:	f7ff fd90 	bl	8003dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80042a8:	4818      	ldr	r0, [pc, #96]	; (800430c <MX_TIM2_Init+0xe8>)
 80042aa:	f005 fda9 	bl	8009e00 <HAL_TIM_PWM_Init>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80042b4:	f7ff fd88 	bl	8003dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042b8:	2300      	movs	r3, #0
 80042ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042bc:	2300      	movs	r3, #0
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042c0:	f107 0320 	add.w	r3, r7, #32
 80042c4:	4619      	mov	r1, r3
 80042c6:	4811      	ldr	r0, [pc, #68]	; (800430c <MX_TIM2_Init+0xe8>)
 80042c8:	f006 fdea 	bl	800aea0 <HAL_TIMEx_MasterConfigSynchronization>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80042d2:	f7ff fd79 	bl	8003dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042d6:	2360      	movs	r3, #96	; 0x60
 80042d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 80042da:	2302      	movs	r3, #2
 80042dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042e6:	1d3b      	adds	r3, r7, #4
 80042e8:	2200      	movs	r2, #0
 80042ea:	4619      	mov	r1, r3
 80042ec:	4807      	ldr	r0, [pc, #28]	; (800430c <MX_TIM2_Init+0xe8>)
 80042ee:	f006 f88f 	bl	800a410 <HAL_TIM_PWM_ConfigChannel>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80042f8:	f7ff fd66 	bl	8003dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80042fc:	4803      	ldr	r0, [pc, #12]	; (800430c <MX_TIM2_Init+0xe8>)
 80042fe:	f000 fa25 	bl	800474c <HAL_TIM_MspPostInit>

}
 8004302:	bf00      	nop
 8004304:	3738      	adds	r7, #56	; 0x38
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	2000b860 	.word	0x2000b860

08004310 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08e      	sub	sp, #56	; 0x38
 8004314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	605a      	str	r2, [r3, #4]
 8004320:	609a      	str	r2, [r3, #8]
 8004322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004324:	f107 0320 	add.w	r3, r7, #32
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800432e:	1d3b      	adds	r3, r7, #4
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	60da      	str	r2, [r3, #12]
 800433a:	611a      	str	r2, [r3, #16]
 800433c:	615a      	str	r2, [r3, #20]
 800433e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004340:	4b2c      	ldr	r3, [pc, #176]	; (80043f4 <MX_TIM3_Init+0xe4>)
 8004342:	4a2d      	ldr	r2, [pc, #180]	; (80043f8 <MX_TIM3_Init+0xe8>)
 8004344:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8004346:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <MX_TIM3_Init+0xe4>)
 8004348:	2253      	movs	r2, #83	; 0x53
 800434a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800434c:	4b29      	ldr	r3, [pc, #164]	; (80043f4 <MX_TIM3_Init+0xe4>)
 800434e:	2200      	movs	r2, #0
 8004350:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8004352:	4b28      	ldr	r3, [pc, #160]	; (80043f4 <MX_TIM3_Init+0xe4>)
 8004354:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004358:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800435a:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <MX_TIM3_Init+0xe4>)
 800435c:	2200      	movs	r2, #0
 800435e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004360:	4b24      	ldr	r3, [pc, #144]	; (80043f4 <MX_TIM3_Init+0xe4>)
 8004362:	2280      	movs	r2, #128	; 0x80
 8004364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004366:	4823      	ldr	r0, [pc, #140]	; (80043f4 <MX_TIM3_Init+0xe4>)
 8004368:	f005 fc98 	bl	8009c9c <HAL_TIM_Base_Init>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004372:	f7ff fd29 	bl	8003dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800437a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800437c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004380:	4619      	mov	r1, r3
 8004382:	481c      	ldr	r0, [pc, #112]	; (80043f4 <MX_TIM3_Init+0xe4>)
 8004384:	f006 f902 	bl	800a58c <HAL_TIM_ConfigClockSource>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800438e:	f7ff fd1b 	bl	8003dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004392:	4818      	ldr	r0, [pc, #96]	; (80043f4 <MX_TIM3_Init+0xe4>)
 8004394:	f005 fd34 	bl	8009e00 <HAL_TIM_PWM_Init>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800439e:	f7ff fd13 	bl	8003dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043a2:	2300      	movs	r3, #0
 80043a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80043aa:	f107 0320 	add.w	r3, r7, #32
 80043ae:	4619      	mov	r1, r3
 80043b0:	4810      	ldr	r0, [pc, #64]	; (80043f4 <MX_TIM3_Init+0xe4>)
 80043b2:	f006 fd75 	bl	800aea0 <HAL_TIMEx_MasterConfigSynchronization>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80043bc:	f7ff fd04 	bl	8003dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043c0:	2360      	movs	r3, #96	; 0x60
 80043c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 80043c4:	2302      	movs	r3, #2
 80043c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80043d0:	1d3b      	adds	r3, r7, #4
 80043d2:	2208      	movs	r2, #8
 80043d4:	4619      	mov	r1, r3
 80043d6:	4807      	ldr	r0, [pc, #28]	; (80043f4 <MX_TIM3_Init+0xe4>)
 80043d8:	f006 f81a 	bl	800a410 <HAL_TIM_PWM_ConfigChannel>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80043e2:	f7ff fcf1 	bl	8003dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80043e6:	4803      	ldr	r0, [pc, #12]	; (80043f4 <MX_TIM3_Init+0xe4>)
 80043e8:	f000 f9b0 	bl	800474c <HAL_TIM_MspPostInit>

}
 80043ec:	bf00      	nop
 80043ee:	3738      	adds	r7, #56	; 0x38
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	2000b818 	.word	0x2000b818
 80043f8:	40000400 	.word	0x40000400

080043fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08e      	sub	sp, #56	; 0x38
 8004400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	605a      	str	r2, [r3, #4]
 800440c:	609a      	str	r2, [r3, #8]
 800440e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004410:	f107 0320 	add.w	r3, r7, #32
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	60da      	str	r2, [r3, #12]
 8004426:	611a      	str	r2, [r3, #16]
 8004428:	615a      	str	r2, [r3, #20]
 800442a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800442c:	4b2d      	ldr	r3, [pc, #180]	; (80044e4 <MX_TIM4_Init+0xe8>)
 800442e:	4a2e      	ldr	r2, [pc, #184]	; (80044e8 <MX_TIM4_Init+0xec>)
 8004430:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8004432:	4b2c      	ldr	r3, [pc, #176]	; (80044e4 <MX_TIM4_Init+0xe8>)
 8004434:	2253      	movs	r2, #83	; 0x53
 8004436:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004438:	4b2a      	ldr	r3, [pc, #168]	; (80044e4 <MX_TIM4_Init+0xe8>)
 800443a:	2200      	movs	r2, #0
 800443c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 800443e:	4b29      	ldr	r3, [pc, #164]	; (80044e4 <MX_TIM4_Init+0xe8>)
 8004440:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004444:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004446:	4b27      	ldr	r3, [pc, #156]	; (80044e4 <MX_TIM4_Init+0xe8>)
 8004448:	2200      	movs	r2, #0
 800444a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800444c:	4b25      	ldr	r3, [pc, #148]	; (80044e4 <MX_TIM4_Init+0xe8>)
 800444e:	2200      	movs	r2, #0
 8004450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004452:	4824      	ldr	r0, [pc, #144]	; (80044e4 <MX_TIM4_Init+0xe8>)
 8004454:	f005 fc22 	bl	8009c9c <HAL_TIM_Base_Init>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800445e:	f7ff fcb3 	bl	8003dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004466:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800446c:	4619      	mov	r1, r3
 800446e:	481d      	ldr	r0, [pc, #116]	; (80044e4 <MX_TIM4_Init+0xe8>)
 8004470:	f006 f88c 	bl	800a58c <HAL_TIM_ConfigClockSource>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800447a:	f7ff fca5 	bl	8003dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800447e:	4819      	ldr	r0, [pc, #100]	; (80044e4 <MX_TIM4_Init+0xe8>)
 8004480:	f005 fcbe 	bl	8009e00 <HAL_TIM_PWM_Init>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800448a:	f7ff fc9d 	bl	8003dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800448e:	2300      	movs	r3, #0
 8004490:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004492:	2300      	movs	r3, #0
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004496:	f107 0320 	add.w	r3, r7, #32
 800449a:	4619      	mov	r1, r3
 800449c:	4811      	ldr	r0, [pc, #68]	; (80044e4 <MX_TIM4_Init+0xe8>)
 800449e:	f006 fcff 	bl	800aea0 <HAL_TIMEx_MasterConfigSynchronization>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80044a8:	f7ff fc8e 	bl	8003dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044ac:	2360      	movs	r3, #96	; 0x60
 80044ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80044b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80044be:	1d3b      	adds	r3, r7, #4
 80044c0:	2208      	movs	r2, #8
 80044c2:	4619      	mov	r1, r3
 80044c4:	4807      	ldr	r0, [pc, #28]	; (80044e4 <MX_TIM4_Init+0xe8>)
 80044c6:	f005 ffa3 	bl	800a410 <HAL_TIM_PWM_ConfigChannel>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80044d0:	f7ff fc7a 	bl	8003dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80044d4:	4803      	ldr	r0, [pc, #12]	; (80044e4 <MX_TIM4_Init+0xe8>)
 80044d6:	f000 f939 	bl	800474c <HAL_TIM_MspPostInit>

}
 80044da:	bf00      	nop
 80044dc:	3738      	adds	r7, #56	; 0x38
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	2000b740 	.word	0x2000b740
 80044e8:	40000800 	.word	0x40000800

080044ec <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08e      	sub	sp, #56	; 0x38
 80044f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	605a      	str	r2, [r3, #4]
 80044fc:	609a      	str	r2, [r3, #8]
 80044fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004500:	f107 0320 	add.w	r3, r7, #32
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800450a:	1d3b      	adds	r3, r7, #4
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	605a      	str	r2, [r3, #4]
 8004512:	609a      	str	r2, [r3, #8]
 8004514:	60da      	str	r2, [r3, #12]
 8004516:	611a      	str	r2, [r3, #16]
 8004518:	615a      	str	r2, [r3, #20]
 800451a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800451c:	4b2c      	ldr	r3, [pc, #176]	; (80045d0 <MX_TIM5_Init+0xe4>)
 800451e:	4a2d      	ldr	r2, [pc, #180]	; (80045d4 <MX_TIM5_Init+0xe8>)
 8004520:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8004522:	4b2b      	ldr	r3, [pc, #172]	; (80045d0 <MX_TIM5_Init+0xe4>)
 8004524:	2253      	movs	r2, #83	; 0x53
 8004526:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004528:	4b29      	ldr	r3, [pc, #164]	; (80045d0 <MX_TIM5_Init+0xe4>)
 800452a:	2200      	movs	r2, #0
 800452c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 800452e:	4b28      	ldr	r3, [pc, #160]	; (80045d0 <MX_TIM5_Init+0xe4>)
 8004530:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004534:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004536:	4b26      	ldr	r3, [pc, #152]	; (80045d0 <MX_TIM5_Init+0xe4>)
 8004538:	2200      	movs	r2, #0
 800453a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800453c:	4b24      	ldr	r3, [pc, #144]	; (80045d0 <MX_TIM5_Init+0xe4>)
 800453e:	2280      	movs	r2, #128	; 0x80
 8004540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004542:	4823      	ldr	r0, [pc, #140]	; (80045d0 <MX_TIM5_Init+0xe4>)
 8004544:	f005 fbaa 	bl	8009c9c <HAL_TIM_Base_Init>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800454e:	f7ff fc3b 	bl	8003dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800455c:	4619      	mov	r1, r3
 800455e:	481c      	ldr	r0, [pc, #112]	; (80045d0 <MX_TIM5_Init+0xe4>)
 8004560:	f006 f814 	bl	800a58c <HAL_TIM_ConfigClockSource>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800456a:	f7ff fc2d 	bl	8003dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800456e:	4818      	ldr	r0, [pc, #96]	; (80045d0 <MX_TIM5_Init+0xe4>)
 8004570:	f005 fc46 	bl	8009e00 <HAL_TIM_PWM_Init>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800457a:	f7ff fc25 	bl	8003dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800457e:	2300      	movs	r3, #0
 8004580:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004582:	2300      	movs	r3, #0
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004586:	f107 0320 	add.w	r3, r7, #32
 800458a:	4619      	mov	r1, r3
 800458c:	4810      	ldr	r0, [pc, #64]	; (80045d0 <MX_TIM5_Init+0xe4>)
 800458e:	f006 fc87 	bl	800aea0 <HAL_TIMEx_MasterConfigSynchronization>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8004598:	f7ff fc16 	bl	8003dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800459c:	2360      	movs	r3, #96	; 0x60
 800459e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 80045a0:	2302      	movs	r3, #2
 80045a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045ac:	1d3b      	adds	r3, r7, #4
 80045ae:	2200      	movs	r2, #0
 80045b0:	4619      	mov	r1, r3
 80045b2:	4807      	ldr	r0, [pc, #28]	; (80045d0 <MX_TIM5_Init+0xe4>)
 80045b4:	f005 ff2c 	bl	800a410 <HAL_TIM_PWM_ConfigChannel>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80045be:	f7ff fc03 	bl	8003dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80045c2:	4803      	ldr	r0, [pc, #12]	; (80045d0 <MX_TIM5_Init+0xe4>)
 80045c4:	f000 f8c2 	bl	800474c <HAL_TIM_MspPostInit>

}
 80045c8:	bf00      	nop
 80045ca:	3738      	adds	r7, #56	; 0x38
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	2000b7d0 	.word	0x2000b7d0
 80045d4:	40000c00 	.word	0x40000c00

080045d8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80045dc:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <MX_TIM10_Init+0x40>)
 80045de:	4a0f      	ldr	r2, [pc, #60]	; (800461c <MX_TIM10_Init+0x44>)
 80045e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 80045e2:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <MX_TIM10_Init+0x40>)
 80045e4:	2253      	movs	r2, #83	; 0x53
 80045e6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <MX_TIM10_Init+0x40>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 80045ee:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <MX_TIM10_Init+0x40>)
 80045f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045f4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045f6:	4b08      	ldr	r3, [pc, #32]	; (8004618 <MX_TIM10_Init+0x40>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <MX_TIM10_Init+0x40>)
 80045fe:	2280      	movs	r2, #128	; 0x80
 8004600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004602:	4805      	ldr	r0, [pc, #20]	; (8004618 <MX_TIM10_Init+0x40>)
 8004604:	f005 fb4a 	bl	8009c9c <HAL_TIM_Base_Init>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800460e:	f7ff fbdb 	bl	8003dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	2000b788 	.word	0x2000b788
 800461c:	40014400 	.word	0x40014400

08004620 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004630:	d116      	bne.n	8004660 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	4b40      	ldr	r3, [pc, #256]	; (8004738 <HAL_TIM_Base_MspInit+0x118>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	4a3f      	ldr	r2, [pc, #252]	; (8004738 <HAL_TIM_Base_MspInit+0x118>)
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	6413      	str	r3, [r2, #64]	; 0x40
 8004642:	4b3d      	ldr	r3, [pc, #244]	; (8004738 <HAL_TIM_Base_MspInit+0x118>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	61fb      	str	r3, [r7, #28]
 800464c:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800464e:	2200      	movs	r2, #0
 8004650:	2105      	movs	r1, #5
 8004652:	201c      	movs	r0, #28
 8004654:	f001 f84b 	bl	80056ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004658:	201c      	movs	r0, #28
 800465a:	f001 f864 	bl	8005726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800465e:	e066      	b.n	800472e <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM3)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a35      	ldr	r2, [pc, #212]	; (800473c <HAL_TIM_Base_MspInit+0x11c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d116      	bne.n	8004698 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	4b32      	ldr	r3, [pc, #200]	; (8004738 <HAL_TIM_Base_MspInit+0x118>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	4a31      	ldr	r2, [pc, #196]	; (8004738 <HAL_TIM_Base_MspInit+0x118>)
 8004674:	f043 0302 	orr.w	r3, r3, #2
 8004678:	6413      	str	r3, [r2, #64]	; 0x40
 800467a:	4b2f      	ldr	r3, [pc, #188]	; (8004738 <HAL_TIM_Base_MspInit+0x118>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004686:	2200      	movs	r2, #0
 8004688:	2105      	movs	r1, #5
 800468a:	201d      	movs	r0, #29
 800468c:	f001 f82f 	bl	80056ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004690:	201d      	movs	r0, #29
 8004692:	f001 f848 	bl	8005726 <HAL_NVIC_EnableIRQ>
}
 8004696:	e04a      	b.n	800472e <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM4)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a28      	ldr	r2, [pc, #160]	; (8004740 <HAL_TIM_Base_MspInit+0x120>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d10e      	bne.n	80046c0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	4b24      	ldr	r3, [pc, #144]	; (8004738 <HAL_TIM_Base_MspInit+0x118>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	4a23      	ldr	r2, [pc, #140]	; (8004738 <HAL_TIM_Base_MspInit+0x118>)
 80046ac:	f043 0304 	orr.w	r3, r3, #4
 80046b0:	6413      	str	r3, [r2, #64]	; 0x40
 80046b2:	4b21      	ldr	r3, [pc, #132]	; (8004738 <HAL_TIM_Base_MspInit+0x118>)
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	697b      	ldr	r3, [r7, #20]
}
 80046be:	e036      	b.n	800472e <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM5)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1f      	ldr	r2, [pc, #124]	; (8004744 <HAL_TIM_Base_MspInit+0x124>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d116      	bne.n	80046f8 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80046ca:	2300      	movs	r3, #0
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	4b1a      	ldr	r3, [pc, #104]	; (8004738 <HAL_TIM_Base_MspInit+0x118>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	4a19      	ldr	r2, [pc, #100]	; (8004738 <HAL_TIM_Base_MspInit+0x118>)
 80046d4:	f043 0308 	orr.w	r3, r3, #8
 80046d8:	6413      	str	r3, [r2, #64]	; 0x40
 80046da:	4b17      	ldr	r3, [pc, #92]	; (8004738 <HAL_TIM_Base_MspInit+0x118>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80046e6:	2200      	movs	r2, #0
 80046e8:	2105      	movs	r1, #5
 80046ea:	2032      	movs	r0, #50	; 0x32
 80046ec:	f000 ffff 	bl	80056ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80046f0:	2032      	movs	r0, #50	; 0x32
 80046f2:	f001 f818 	bl	8005726 <HAL_NVIC_EnableIRQ>
}
 80046f6:	e01a      	b.n	800472e <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM10)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a12      	ldr	r2, [pc, #72]	; (8004748 <HAL_TIM_Base_MspInit+0x128>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d115      	bne.n	800472e <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <HAL_TIM_Base_MspInit+0x118>)
 8004708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470a:	4a0b      	ldr	r2, [pc, #44]	; (8004738 <HAL_TIM_Base_MspInit+0x118>)
 800470c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004710:	6453      	str	r3, [r2, #68]	; 0x44
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <HAL_TIM_Base_MspInit+0x118>)
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800471e:	2200      	movs	r2, #0
 8004720:	2105      	movs	r1, #5
 8004722:	2019      	movs	r0, #25
 8004724:	f000 ffe3 	bl	80056ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004728:	2019      	movs	r0, #25
 800472a:	f000 fffc 	bl	8005726 <HAL_NVIC_EnableIRQ>
}
 800472e:	bf00      	nop
 8004730:	3720      	adds	r7, #32
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40023800 	.word	0x40023800
 800473c:	40000400 	.word	0x40000400
 8004740:	40000800 	.word	0x40000800
 8004744:	40000c00 	.word	0x40000c00
 8004748:	40014400 	.word	0x40014400

0800474c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08c      	sub	sp, #48	; 0x30
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004754:	f107 031c 	add.w	r3, r7, #28
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	605a      	str	r2, [r3, #4]
 800475e:	609a      	str	r2, [r3, #8]
 8004760:	60da      	str	r2, [r3, #12]
 8004762:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476c:	d11e      	bne.n	80047ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	4b46      	ldr	r3, [pc, #280]	; (800488c <HAL_TIM_MspPostInit+0x140>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	4a45      	ldr	r2, [pc, #276]	; (800488c <HAL_TIM_MspPostInit+0x140>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	6313      	str	r3, [r2, #48]	; 0x30
 800477e:	4b43      	ldr	r3, [pc, #268]	; (800488c <HAL_TIM_MspPostInit+0x140>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = J2_STEP_TIM2_CH1_Pin;
 800478a:	2320      	movs	r3, #32
 800478c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478e:	2302      	movs	r3, #2
 8004790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004792:	2300      	movs	r3, #0
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004796:	2300      	movs	r3, #0
 8004798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800479a:	2301      	movs	r3, #1
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(J2_STEP_TIM2_CH1_GPIO_Port, &GPIO_InitStruct);
 800479e:	f107 031c 	add.w	r3, r7, #28
 80047a2:	4619      	mov	r1, r3
 80047a4:	483a      	ldr	r0, [pc, #232]	; (8004890 <HAL_TIM_MspPostInit+0x144>)
 80047a6:	f001 fec5 	bl	8006534 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80047aa:	e06b      	b.n	8004884 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM3)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a38      	ldr	r2, [pc, #224]	; (8004894 <HAL_TIM_MspPostInit+0x148>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d11e      	bne.n	80047f4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	4b34      	ldr	r3, [pc, #208]	; (800488c <HAL_TIM_MspPostInit+0x140>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	4a33      	ldr	r2, [pc, #204]	; (800488c <HAL_TIM_MspPostInit+0x140>)
 80047c0:	f043 0302 	orr.w	r3, r3, #2
 80047c4:	6313      	str	r3, [r2, #48]	; 0x30
 80047c6:	4b31      	ldr	r3, [pc, #196]	; (800488c <HAL_TIM_MspPostInit+0x140>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = J1_STEP_TIM3_CH3_Pin;
 80047d2:	2301      	movs	r3, #1
 80047d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d6:	2302      	movs	r3, #2
 80047d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047de:	2300      	movs	r3, #0
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80047e2:	2302      	movs	r3, #2
 80047e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(J1_STEP_TIM3_CH3_GPIO_Port, &GPIO_InitStruct);
 80047e6:	f107 031c 	add.w	r3, r7, #28
 80047ea:	4619      	mov	r1, r3
 80047ec:	482a      	ldr	r0, [pc, #168]	; (8004898 <HAL_TIM_MspPostInit+0x14c>)
 80047ee:	f001 fea1 	bl	8006534 <HAL_GPIO_Init>
}
 80047f2:	e047      	b.n	8004884 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM4)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a28      	ldr	r2, [pc, #160]	; (800489c <HAL_TIM_MspPostInit+0x150>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d11f      	bne.n	800483e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047fe:	2300      	movs	r3, #0
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	4b22      	ldr	r3, [pc, #136]	; (800488c <HAL_TIM_MspPostInit+0x140>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	4a21      	ldr	r2, [pc, #132]	; (800488c <HAL_TIM_MspPostInit+0x140>)
 8004808:	f043 0302 	orr.w	r3, r3, #2
 800480c:	6313      	str	r3, [r2, #48]	; 0x30
 800480e:	4b1f      	ldr	r3, [pc, #124]	; (800488c <HAL_TIM_MspPostInit+0x140>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO_J3_TIM4_CH3_Pin;
 800481a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800481e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004820:	2302      	movs	r3, #2
 8004822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004824:	2300      	movs	r3, #0
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004828:	2300      	movs	r3, #0
 800482a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800482c:	2302      	movs	r3, #2
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO_J3_TIM4_CH3_GPIO_Port, &GPIO_InitStruct);
 8004830:	f107 031c 	add.w	r3, r7, #28
 8004834:	4619      	mov	r1, r3
 8004836:	4818      	ldr	r0, [pc, #96]	; (8004898 <HAL_TIM_MspPostInit+0x14c>)
 8004838:	f001 fe7c 	bl	8006534 <HAL_GPIO_Init>
}
 800483c:	e022      	b.n	8004884 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM5)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a17      	ldr	r2, [pc, #92]	; (80048a0 <HAL_TIM_MspPostInit+0x154>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d11d      	bne.n	8004884 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	4b0f      	ldr	r3, [pc, #60]	; (800488c <HAL_TIM_MspPostInit+0x140>)
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	4a0e      	ldr	r2, [pc, #56]	; (800488c <HAL_TIM_MspPostInit+0x140>)
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	6313      	str	r3, [r2, #48]	; 0x30
 8004858:	4b0c      	ldr	r3, [pc, #48]	; (800488c <HAL_TIM_MspPostInit+0x140>)
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = J3_STEP_TIM5_CH1_Pin;
 8004864:	2301      	movs	r3, #1
 8004866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004868:	2302      	movs	r3, #2
 800486a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486c:	2300      	movs	r3, #0
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004870:	2300      	movs	r3, #0
 8004872:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004874:	2302      	movs	r3, #2
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(J3_STEP_TIM5_CH1_GPIO_Port, &GPIO_InitStruct);
 8004878:	f107 031c 	add.w	r3, r7, #28
 800487c:	4619      	mov	r1, r3
 800487e:	4804      	ldr	r0, [pc, #16]	; (8004890 <HAL_TIM_MspPostInit+0x144>)
 8004880:	f001 fe58 	bl	8006534 <HAL_GPIO_Init>
}
 8004884:	bf00      	nop
 8004886:	3730      	adds	r7, #48	; 0x30
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40023800 	.word	0x40023800
 8004890:	40020000 	.word	0x40020000
 8004894:	40000400 	.word	0x40000400
 8004898:	40020400 	.word	0x40020400
 800489c:	40000800 	.word	0x40000800
 80048a0:	40000c00 	.word	0x40000c00

080048a4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80048a8:	4b11      	ldr	r3, [pc, #68]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048aa:	4a12      	ldr	r2, [pc, #72]	; (80048f4 <MX_USART1_UART_Init+0x50>)
 80048ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80048ae:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80048b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048b6:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048be:	2200      	movs	r2, #0
 80048c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048c2:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048c8:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048ca:	220c      	movs	r2, #12
 80048cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048ce:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048d4:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048da:	4805      	ldr	r0, [pc, #20]	; (80048f0 <MX_USART1_UART_Init+0x4c>)
 80048dc:	f006 fb87 	bl	800afee <HAL_UART_Init>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80048e6:	f7ff fa6f 	bl	8003dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80048ea:	bf00      	nop
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	2000b8a8 	.word	0x2000b8a8
 80048f4:	40011000 	.word	0x40011000

080048f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80048fc:	4b11      	ldr	r3, [pc, #68]	; (8004944 <MX_USART2_UART_Init+0x4c>)
 80048fe:	4a12      	ldr	r2, [pc, #72]	; (8004948 <MX_USART2_UART_Init+0x50>)
 8004900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004902:	4b10      	ldr	r3, [pc, #64]	; (8004944 <MX_USART2_UART_Init+0x4c>)
 8004904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800490a:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <MX_USART2_UART_Init+0x4c>)
 800490c:	2200      	movs	r2, #0
 800490e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <MX_USART2_UART_Init+0x4c>)
 8004912:	2200      	movs	r2, #0
 8004914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004916:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <MX_USART2_UART_Init+0x4c>)
 8004918:	2200      	movs	r2, #0
 800491a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800491c:	4b09      	ldr	r3, [pc, #36]	; (8004944 <MX_USART2_UART_Init+0x4c>)
 800491e:	220c      	movs	r2, #12
 8004920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004922:	4b08      	ldr	r3, [pc, #32]	; (8004944 <MX_USART2_UART_Init+0x4c>)
 8004924:	2200      	movs	r2, #0
 8004926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004928:	4b06      	ldr	r3, [pc, #24]	; (8004944 <MX_USART2_UART_Init+0x4c>)
 800492a:	2200      	movs	r2, #0
 800492c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800492e:	4805      	ldr	r0, [pc, #20]	; (8004944 <MX_USART2_UART_Init+0x4c>)
 8004930:	f006 fb5d 	bl	800afee <HAL_UART_Init>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800493a:	f7ff fa45 	bl	8003dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800493e:	bf00      	nop
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	2000b650 	.word	0x2000b650
 8004948:	40004400 	.word	0x40004400

0800494c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08c      	sub	sp, #48	; 0x30
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004954:	f107 031c 	add.w	r3, r7, #28
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	605a      	str	r2, [r3, #4]
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a69      	ldr	r2, [pc, #420]	; (8004b10 <HAL_UART_MspInit+0x1c4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d164      	bne.n	8004a38 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800496e:	2300      	movs	r3, #0
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	4b68      	ldr	r3, [pc, #416]	; (8004b14 <HAL_UART_MspInit+0x1c8>)
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	4a67      	ldr	r2, [pc, #412]	; (8004b14 <HAL_UART_MspInit+0x1c8>)
 8004978:	f043 0310 	orr.w	r3, r3, #16
 800497c:	6453      	str	r3, [r2, #68]	; 0x44
 800497e:	4b65      	ldr	r3, [pc, #404]	; (8004b14 <HAL_UART_MspInit+0x1c8>)
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	4b61      	ldr	r3, [pc, #388]	; (8004b14 <HAL_UART_MspInit+0x1c8>)
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	4a60      	ldr	r2, [pc, #384]	; (8004b14 <HAL_UART_MspInit+0x1c8>)
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	6313      	str	r3, [r2, #48]	; 0x30
 800499a:	4b5e      	ldr	r3, [pc, #376]	; (8004b14 <HAL_UART_MspInit+0x1c8>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80049a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80049aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ac:	2302      	movs	r3, #2
 80049ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049b0:	2301      	movs	r3, #1
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049b4:	2303      	movs	r3, #3
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049b8:	2307      	movs	r3, #7
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049bc:	f107 031c 	add.w	r3, r7, #28
 80049c0:	4619      	mov	r1, r3
 80049c2:	4855      	ldr	r0, [pc, #340]	; (8004b18 <HAL_UART_MspInit+0x1cc>)
 80049c4:	f001 fdb6 	bl	8006534 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80049c8:	4b54      	ldr	r3, [pc, #336]	; (8004b1c <HAL_UART_MspInit+0x1d0>)
 80049ca:	4a55      	ldr	r2, [pc, #340]	; (8004b20 <HAL_UART_MspInit+0x1d4>)
 80049cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80049ce:	4b53      	ldr	r3, [pc, #332]	; (8004b1c <HAL_UART_MspInit+0x1d0>)
 80049d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049d6:	4b51      	ldr	r3, [pc, #324]	; (8004b1c <HAL_UART_MspInit+0x1d0>)
 80049d8:	2200      	movs	r2, #0
 80049da:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049dc:	4b4f      	ldr	r3, [pc, #316]	; (8004b1c <HAL_UART_MspInit+0x1d0>)
 80049de:	2200      	movs	r2, #0
 80049e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049e2:	4b4e      	ldr	r3, [pc, #312]	; (8004b1c <HAL_UART_MspInit+0x1d0>)
 80049e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049ea:	4b4c      	ldr	r3, [pc, #304]	; (8004b1c <HAL_UART_MspInit+0x1d0>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049f0:	4b4a      	ldr	r3, [pc, #296]	; (8004b1c <HAL_UART_MspInit+0x1d0>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80049f6:	4b49      	ldr	r3, [pc, #292]	; (8004b1c <HAL_UART_MspInit+0x1d0>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80049fc:	4b47      	ldr	r3, [pc, #284]	; (8004b1c <HAL_UART_MspInit+0x1d0>)
 80049fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004a02:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a04:	4b45      	ldr	r3, [pc, #276]	; (8004b1c <HAL_UART_MspInit+0x1d0>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004a0a:	4844      	ldr	r0, [pc, #272]	; (8004b1c <HAL_UART_MspInit+0x1d0>)
 8004a0c:	f000 fe9e 	bl	800574c <HAL_DMA_Init>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004a16:	f7ff f9d7 	bl	8003dc8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a3f      	ldr	r2, [pc, #252]	; (8004b1c <HAL_UART_MspInit+0x1d0>)
 8004a1e:	639a      	str	r2, [r3, #56]	; 0x38
 8004a20:	4a3e      	ldr	r2, [pc, #248]	; (8004b1c <HAL_UART_MspInit+0x1d0>)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004a26:	2200      	movs	r2, #0
 8004a28:	2105      	movs	r1, #5
 8004a2a:	2025      	movs	r0, #37	; 0x25
 8004a2c:	f000 fe5f 	bl	80056ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a30:	2025      	movs	r0, #37	; 0x25
 8004a32:	f000 fe78 	bl	8005726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004a36:	e067      	b.n	8004b08 <HAL_UART_MspInit+0x1bc>
  else if(uartHandle->Instance==USART2)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a39      	ldr	r2, [pc, #228]	; (8004b24 <HAL_UART_MspInit+0x1d8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d162      	bne.n	8004b08 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	4b33      	ldr	r3, [pc, #204]	; (8004b14 <HAL_UART_MspInit+0x1c8>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	4a32      	ldr	r2, [pc, #200]	; (8004b14 <HAL_UART_MspInit+0x1c8>)
 8004a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a50:	6413      	str	r3, [r2, #64]	; 0x40
 8004a52:	4b30      	ldr	r3, [pc, #192]	; (8004b14 <HAL_UART_MspInit+0x1c8>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5a:	613b      	str	r3, [r7, #16]
 8004a5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	4b2c      	ldr	r3, [pc, #176]	; (8004b14 <HAL_UART_MspInit+0x1c8>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	4a2b      	ldr	r2, [pc, #172]	; (8004b14 <HAL_UART_MspInit+0x1c8>)
 8004a68:	f043 0301 	orr.w	r3, r3, #1
 8004a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6e:	4b29      	ldr	r3, [pc, #164]	; (8004b14 <HAL_UART_MspInit+0x1c8>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004a7a:	230c      	movs	r3, #12
 8004a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a82:	2301      	movs	r3, #1
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a86:	2303      	movs	r3, #3
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a8a:	2307      	movs	r3, #7
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a8e:	f107 031c 	add.w	r3, r7, #28
 8004a92:	4619      	mov	r1, r3
 8004a94:	4820      	ldr	r0, [pc, #128]	; (8004b18 <HAL_UART_MspInit+0x1cc>)
 8004a96:	f001 fd4d 	bl	8006534 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004a9a:	4b23      	ldr	r3, [pc, #140]	; (8004b28 <HAL_UART_MspInit+0x1dc>)
 8004a9c:	4a23      	ldr	r2, [pc, #140]	; (8004b2c <HAL_UART_MspInit+0x1e0>)
 8004a9e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004aa0:	4b21      	ldr	r3, [pc, #132]	; (8004b28 <HAL_UART_MspInit+0x1dc>)
 8004aa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004aa6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004aa8:	4b1f      	ldr	r3, [pc, #124]	; (8004b28 <HAL_UART_MspInit+0x1dc>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aae:	4b1e      	ldr	r3, [pc, #120]	; (8004b28 <HAL_UART_MspInit+0x1dc>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ab4:	4b1c      	ldr	r3, [pc, #112]	; (8004b28 <HAL_UART_MspInit+0x1dc>)
 8004ab6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004aba:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <HAL_UART_MspInit+0x1dc>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ac2:	4b19      	ldr	r3, [pc, #100]	; (8004b28 <HAL_UART_MspInit+0x1dc>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004ac8:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <HAL_UART_MspInit+0x1dc>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004ace:	4b16      	ldr	r3, [pc, #88]	; (8004b28 <HAL_UART_MspInit+0x1dc>)
 8004ad0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ad4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ad6:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <HAL_UART_MspInit+0x1dc>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004adc:	4812      	ldr	r0, [pc, #72]	; (8004b28 <HAL_UART_MspInit+0x1dc>)
 8004ade:	f000 fe35 	bl	800574c <HAL_DMA_Init>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8004ae8:	f7ff f96e 	bl	8003dc8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a0e      	ldr	r2, [pc, #56]	; (8004b28 <HAL_UART_MspInit+0x1dc>)
 8004af0:	639a      	str	r2, [r3, #56]	; 0x38
 8004af2:	4a0d      	ldr	r2, [pc, #52]	; (8004b28 <HAL_UART_MspInit+0x1dc>)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004af8:	2200      	movs	r2, #0
 8004afa:	2105      	movs	r1, #5
 8004afc:	2026      	movs	r0, #38	; 0x26
 8004afe:	f000 fdf6 	bl	80056ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b02:	2026      	movs	r0, #38	; 0x26
 8004b04:	f000 fe0f 	bl	8005726 <HAL_NVIC_EnableIRQ>
}
 8004b08:	bf00      	nop
 8004b0a:	3730      	adds	r7, #48	; 0x30
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40011000 	.word	0x40011000
 8004b14:	40023800 	.word	0x40023800
 8004b18:	40020000 	.word	0x40020000
 8004b1c:	2000b57c 	.word	0x2000b57c
 8004b20:	40026440 	.word	0x40026440
 8004b24:	40004400 	.word	0x40004400
 8004b28:	2000b50c 	.word	0x2000b50c
 8004b2c:	40026088 	.word	0x40026088

08004b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b34:	480d      	ldr	r0, [pc, #52]	; (8004b6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004b36:	490e      	ldr	r1, [pc, #56]	; (8004b70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004b38:	4a0e      	ldr	r2, [pc, #56]	; (8004b74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b3c:	e002      	b.n	8004b44 <LoopCopyDataInit>

08004b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b42:	3304      	adds	r3, #4

08004b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b48:	d3f9      	bcc.n	8004b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b4a:	4a0b      	ldr	r2, [pc, #44]	; (8004b78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004b4c:	4c0b      	ldr	r4, [pc, #44]	; (8004b7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b50:	e001      	b.n	8004b56 <LoopFillZerobss>

08004b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b54:	3204      	adds	r2, #4

08004b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b58:	d3fb      	bcc.n	8004b52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004b5a:	f7ff fb51 	bl	8004200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b5e:	f00a faa3 	bl	800f0a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b62:	f7ff f82b 	bl	8003bbc <main>
  bx  lr    
 8004b66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b70:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004b74:	0801282c 	.word	0x0801282c
  ldr r2, =_sbss
 8004b78:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8004b7c:	2000b960 	.word	0x2000b960

08004b80 <DMA1_Stream3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b80:	e7fe      	b.n	8004b80 <DMA1_Stream3_IRQHandler>
	...

08004b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b88:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <HAL_Init+0x40>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a0d      	ldr	r2, [pc, #52]	; (8004bc4 <HAL_Init+0x40>)
 8004b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b94:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <HAL_Init+0x40>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a0a      	ldr	r2, [pc, #40]	; (8004bc4 <HAL_Init+0x40>)
 8004b9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ba0:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <HAL_Init+0x40>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a07      	ldr	r2, [pc, #28]	; (8004bc4 <HAL_Init+0x40>)
 8004ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bac:	2003      	movs	r0, #3
 8004bae:	f000 fd93 	bl	80056d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	f7ff f93a 	bl	8003e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bb8:	f7ff f90c 	bl	8003dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023c00 	.word	0x40023c00

08004bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_IncTick+0x20>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <HAL_IncTick+0x24>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	4a04      	ldr	r2, [pc, #16]	; (8004bec <HAL_IncTick+0x24>)
 8004bda:	6013      	str	r3, [r2, #0]
}
 8004bdc:	bf00      	nop
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	20000010 	.word	0x20000010
 8004bec:	2000b8ec 	.word	0x2000b8ec

08004bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <HAL_GetTick+0x14>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	2000b8ec 	.word	0x2000b8ec

08004c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c10:	f7ff ffee 	bl	8004bf0 <HAL_GetTick>
 8004c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c20:	d005      	beq.n	8004c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c22:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <HAL_Delay+0x44>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c2e:	bf00      	nop
 8004c30:	f7ff ffde 	bl	8004bf0 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d8f7      	bhi.n	8004c30 <HAL_Delay+0x28>
  {
  }
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000010 	.word	0x20000010

08004c50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e033      	b.n	8004cce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fc fea8 	bl	80019c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	f003 0310 	and.w	r3, r3, #16
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d118      	bne.n	8004cc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c96:	f023 0302 	bic.w	r3, r3, #2
 8004c9a:	f043 0202 	orr.w	r2, r3, #2
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fb4e 	bl	8005344 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f023 0303 	bic.w	r3, r3, #3
 8004cb6:	f043 0201 	orr.w	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
 8004cbe:	e001      	b.n	8004cc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_ADC_Start_IT+0x1a>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e0a1      	b.n	8004e36 <HAL_ADC_Start_IT+0x15e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d018      	beq.n	8004d3a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d18:	4b4a      	ldr	r3, [pc, #296]	; (8004e44 <HAL_ADC_Start_IT+0x16c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a4a      	ldr	r2, [pc, #296]	; (8004e48 <HAL_ADC_Start_IT+0x170>)
 8004d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d22:	0c9a      	lsrs	r2, r3, #18
 8004d24:	4613      	mov	r3, r2
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	4413      	add	r3, r2
 8004d2a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004d2c:	e002      	b.n	8004d34 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f9      	bne.n	8004d2e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d169      	bne.n	8004e1c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004d50:	f023 0301 	bic.w	r3, r3, #1
 8004d54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d007      	beq.n	8004d7a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d86:	d106      	bne.n	8004d96 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8c:	f023 0206 	bic.w	r2, r3, #6
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	645a      	str	r2, [r3, #68]	; 0x44
 8004d94:	e002      	b.n	8004d9c <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004da4:	4b29      	ldr	r3, [pc, #164]	; (8004e4c <HAL_ADC_Start_IT+0x174>)
 8004da6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004db0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6812      	ldr	r2, [r2, #0]
 8004dbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dc0:	f043 0320 	orr.w	r3, r3, #32
 8004dc4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10f      	bne.n	8004df2 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d129      	bne.n	8004e34 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689a      	ldr	r2, [r3, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004dee:	609a      	str	r2, [r3, #8]
 8004df0:	e020      	b.n	8004e34 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a16      	ldr	r2, [pc, #88]	; (8004e50 <HAL_ADC_Start_IT+0x178>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d11b      	bne.n	8004e34 <HAL_ADC_Start_IT+0x15c>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d114      	bne.n	8004e34 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e18:	609a      	str	r2, [r3, #8]
 8004e1a:	e00b      	b.n	8004e34 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	f043 0210 	orr.w	r2, r3, #16
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2c:	f043 0201 	orr.w	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	20000008 	.word	0x20000008
 8004e48:	431bde83 	.word	0x431bde83
 8004e4c:	40012300 	.word	0x40012300
 8004e50:	40012000 	.word	0x40012000

08004e54 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	2300      	movs	r3, #0
 8004e62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	bf0c      	ite	eq
 8004e72:	2301      	moveq	r3, #1
 8004e74:	2300      	movne	r3, #0
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	bf0c      	ite	eq
 8004e88:	2301      	moveq	r3, #1
 8004e8a:	2300      	movne	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d049      	beq.n	8004f2a <HAL_ADC_IRQHandler+0xd6>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d046      	beq.n	8004f2a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	f003 0310 	and.w	r3, r3, #16
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d105      	bne.n	8004eb4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d12b      	bne.n	8004f1a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d127      	bne.n	8004f1a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d006      	beq.n	8004ee6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d119      	bne.n	8004f1a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0220 	bic.w	r2, r2, #32
 8004ef4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d105      	bne.n	8004f1a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	f043 0201 	orr.w	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fc fdd0 	bl	8001ac0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0212 	mvn.w	r2, #18
 8004f28:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4a:	2b80      	cmp	r3, #128	; 0x80
 8004f4c:	bf0c      	ite	eq
 8004f4e:	2301      	moveq	r3, #1
 8004f50:	2300      	movne	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d057      	beq.n	800500c <HAL_ADC_IRQHandler+0x1b8>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d054      	beq.n	800500c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d105      	bne.n	8004f7a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d139      	bne.n	8004ffc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d006      	beq.n	8004fa4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d12b      	bne.n	8004ffc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d124      	bne.n	8004ffc <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d11d      	bne.n	8004ffc <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d119      	bne.n	8004ffc <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fd6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d105      	bne.n	8004ffc <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	f043 0201 	orr.w	r2, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fa9d 	bl	800553c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f06f 020c 	mvn.w	r2, #12
 800500a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b01      	cmp	r3, #1
 8005018:	bf0c      	ite	eq
 800501a:	2301      	moveq	r3, #1
 800501c:	2300      	movne	r3, #0
 800501e:	b2db      	uxtb	r3, r3
 8005020:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502c:	2b40      	cmp	r3, #64	; 0x40
 800502e:	bf0c      	ite	eq
 8005030:	2301      	moveq	r3, #1
 8005032:	2300      	movne	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d017      	beq.n	800506e <HAL_ADC_IRQHandler+0x21a>
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d014      	beq.n	800506e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b01      	cmp	r3, #1
 8005050:	d10d      	bne.n	800506e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f839 	bl	80050d6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0201 	mvn.w	r2, #1
 800506c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b20      	cmp	r3, #32
 800507a:	bf0c      	ite	eq
 800507c:	2301      	moveq	r3, #1
 800507e:	2300      	movne	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800508e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005092:	bf0c      	ite	eq
 8005094:	2301      	moveq	r3, #1
 8005096:	2300      	movne	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d015      	beq.n	80050ce <HAL_ADC_IRQHandler+0x27a>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d012      	beq.n	80050ce <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ac:	f043 0202 	orr.w	r2, r3, #2
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0220 	mvn.w	r2, #32
 80050bc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f813 	bl	80050ea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0220 	mvn.w	r2, #32
 80050cc:	601a      	str	r2, [r3, #0]
  }
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
	...

08005100 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_ADC_ConfigChannel+0x1c>
 8005118:	2302      	movs	r3, #2
 800511a:	e105      	b.n	8005328 <HAL_ADC_ConfigChannel+0x228>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b09      	cmp	r3, #9
 800512a:	d925      	bls.n	8005178 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68d9      	ldr	r1, [r3, #12]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	4613      	mov	r3, r2
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	4413      	add	r3, r2
 8005140:	3b1e      	subs	r3, #30
 8005142:	2207      	movs	r2, #7
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	43da      	mvns	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	400a      	ands	r2, r1
 8005150:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68d9      	ldr	r1, [r3, #12]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	b29b      	uxth	r3, r3
 8005162:	4618      	mov	r0, r3
 8005164:	4603      	mov	r3, r0
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	4403      	add	r3, r0
 800516a:	3b1e      	subs	r3, #30
 800516c:	409a      	lsls	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	60da      	str	r2, [r3, #12]
 8005176:	e022      	b.n	80051be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6919      	ldr	r1, [r3, #16]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	4613      	mov	r3, r2
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	4413      	add	r3, r2
 800518c:	2207      	movs	r2, #7
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	43da      	mvns	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	400a      	ands	r2, r1
 800519a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6919      	ldr	r1, [r3, #16]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	4618      	mov	r0, r3
 80051ae:	4603      	mov	r3, r0
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	4403      	add	r3, r0
 80051b4:	409a      	lsls	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b06      	cmp	r3, #6
 80051c4:	d824      	bhi.n	8005210 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	3b05      	subs	r3, #5
 80051d8:	221f      	movs	r2, #31
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	43da      	mvns	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	400a      	ands	r2, r1
 80051e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	4618      	mov	r0, r3
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	3b05      	subs	r3, #5
 8005202:	fa00 f203 	lsl.w	r2, r0, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	635a      	str	r2, [r3, #52]	; 0x34
 800520e:	e04c      	b.n	80052aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b0c      	cmp	r3, #12
 8005216:	d824      	bhi.n	8005262 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	3b23      	subs	r3, #35	; 0x23
 800522a:	221f      	movs	r2, #31
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	43da      	mvns	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	400a      	ands	r2, r1
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	b29b      	uxth	r3, r3
 8005246:	4618      	mov	r0, r3
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	3b23      	subs	r3, #35	; 0x23
 8005254:	fa00 f203 	lsl.w	r2, r0, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	631a      	str	r2, [r3, #48]	; 0x30
 8005260:	e023      	b.n	80052aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	3b41      	subs	r3, #65	; 0x41
 8005274:	221f      	movs	r2, #31
 8005276:	fa02 f303 	lsl.w	r3, r2, r3
 800527a:	43da      	mvns	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	400a      	ands	r2, r1
 8005282:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	b29b      	uxth	r3, r3
 8005290:	4618      	mov	r0, r3
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	4613      	mov	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	3b41      	subs	r3, #65	; 0x41
 800529e:	fa00 f203 	lsl.w	r2, r0, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052aa:	4b22      	ldr	r3, [pc, #136]	; (8005334 <HAL_ADC_ConfigChannel+0x234>)
 80052ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a21      	ldr	r2, [pc, #132]	; (8005338 <HAL_ADC_ConfigChannel+0x238>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d109      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x1cc>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b12      	cmp	r3, #18
 80052be:	d105      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a19      	ldr	r2, [pc, #100]	; (8005338 <HAL_ADC_ConfigChannel+0x238>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d123      	bne.n	800531e <HAL_ADC_ConfigChannel+0x21e>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b10      	cmp	r3, #16
 80052dc:	d003      	beq.n	80052e6 <HAL_ADC_ConfigChannel+0x1e6>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b11      	cmp	r3, #17
 80052e4:	d11b      	bne.n	800531e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d111      	bne.n	800531e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80052fa:	4b10      	ldr	r3, [pc, #64]	; (800533c <HAL_ADC_ConfigChannel+0x23c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a10      	ldr	r2, [pc, #64]	; (8005340 <HAL_ADC_ConfigChannel+0x240>)
 8005300:	fba2 2303 	umull	r2, r3, r2, r3
 8005304:	0c9a      	lsrs	r2, r3, #18
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005310:	e002      	b.n	8005318 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	3b01      	subs	r3, #1
 8005316:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f9      	bne.n	8005312 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	40012300 	.word	0x40012300
 8005338:	40012000 	.word	0x40012000
 800533c:	20000008 	.word	0x20000008
 8005340:	431bde83 	.word	0x431bde83

08005344 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800534c:	4b79      	ldr	r3, [pc, #484]	; (8005534 <ADC_Init+0x1f0>)
 800534e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	431a      	orrs	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005378:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6859      	ldr	r1, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	021a      	lsls	r2, r3, #8
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800539c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6859      	ldr	r1, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6899      	ldr	r1, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d6:	4a58      	ldr	r2, [pc, #352]	; (8005538 <ADC_Init+0x1f4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d022      	beq.n	8005422 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6899      	ldr	r1, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800540c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6899      	ldr	r1, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	609a      	str	r2, [r3, #8]
 8005420:	e00f      	b.n	8005442 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005430:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005440:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0202 	bic.w	r2, r2, #2
 8005450:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6899      	ldr	r1, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	7e1b      	ldrb	r3, [r3, #24]
 800545c:	005a      	lsls	r2, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3020 	ldrb.w	r3, [r3, #32]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01b      	beq.n	80054a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800547e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800548e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6859      	ldr	r1, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	3b01      	subs	r3, #1
 800549c:	035a      	lsls	r2, r3, #13
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	e007      	b.n	80054b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80054c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	051a      	lsls	r2, r3, #20
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6899      	ldr	r1, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054fa:	025a      	lsls	r2, r3, #9
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005512:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6899      	ldr	r1, [r3, #8]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	029a      	lsls	r2, r3, #10
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	609a      	str	r2, [r3, #8]
}
 8005528:	bf00      	nop
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	40012300 	.word	0x40012300
 8005538:	0f000001 	.word	0x0f000001

0800553c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005560:	4b0c      	ldr	r3, [pc, #48]	; (8005594 <__NVIC_SetPriorityGrouping+0x44>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800556c:	4013      	ands	r3, r2
 800556e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800557c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005582:	4a04      	ldr	r2, [pc, #16]	; (8005594 <__NVIC_SetPriorityGrouping+0x44>)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	60d3      	str	r3, [r2, #12]
}
 8005588:	bf00      	nop
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	e000ed00 	.word	0xe000ed00

08005598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800559c:	4b04      	ldr	r3, [pc, #16]	; (80055b0 <__NVIC_GetPriorityGrouping+0x18>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	0a1b      	lsrs	r3, r3, #8
 80055a2:	f003 0307 	and.w	r3, r3, #7
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	e000ed00 	.word	0xe000ed00

080055b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	db0b      	blt.n	80055de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	f003 021f 	and.w	r2, r3, #31
 80055cc:	4907      	ldr	r1, [pc, #28]	; (80055ec <__NVIC_EnableIRQ+0x38>)
 80055ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	2001      	movs	r0, #1
 80055d6:	fa00 f202 	lsl.w	r2, r0, r2
 80055da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	e000e100 	.word	0xe000e100

080055f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	4603      	mov	r3, r0
 80055f8:	6039      	str	r1, [r7, #0]
 80055fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005600:	2b00      	cmp	r3, #0
 8005602:	db0a      	blt.n	800561a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	b2da      	uxtb	r2, r3
 8005608:	490c      	ldr	r1, [pc, #48]	; (800563c <__NVIC_SetPriority+0x4c>)
 800560a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560e:	0112      	lsls	r2, r2, #4
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	440b      	add	r3, r1
 8005614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005618:	e00a      	b.n	8005630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	b2da      	uxtb	r2, r3
 800561e:	4908      	ldr	r1, [pc, #32]	; (8005640 <__NVIC_SetPriority+0x50>)
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	3b04      	subs	r3, #4
 8005628:	0112      	lsls	r2, r2, #4
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	440b      	add	r3, r1
 800562e:	761a      	strb	r2, [r3, #24]
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	e000e100 	.word	0xe000e100
 8005640:	e000ed00 	.word	0xe000ed00

08005644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005644:	b480      	push	{r7}
 8005646:	b089      	sub	sp, #36	; 0x24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f1c3 0307 	rsb	r3, r3, #7
 800565e:	2b04      	cmp	r3, #4
 8005660:	bf28      	it	cs
 8005662:	2304      	movcs	r3, #4
 8005664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	3304      	adds	r3, #4
 800566a:	2b06      	cmp	r3, #6
 800566c:	d902      	bls.n	8005674 <NVIC_EncodePriority+0x30>
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	3b03      	subs	r3, #3
 8005672:	e000      	b.n	8005676 <NVIC_EncodePriority+0x32>
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	43da      	mvns	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	401a      	ands	r2, r3
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800568c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	fa01 f303 	lsl.w	r3, r1, r3
 8005696:	43d9      	mvns	r1, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800569c:	4313      	orrs	r3, r2
         );
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3724      	adds	r7, #36	; 0x24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
	...

080056ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80056b0:	f3bf 8f4f 	dsb	sy
}
 80056b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80056b6:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <__NVIC_SystemReset+0x24>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80056be:	4904      	ldr	r1, [pc, #16]	; (80056d0 <__NVIC_SystemReset+0x24>)
 80056c0:	4b04      	ldr	r3, [pc, #16]	; (80056d4 <__NVIC_SystemReset+0x28>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80056c6:	f3bf 8f4f 	dsb	sy
}
 80056ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80056cc:	bf00      	nop
 80056ce:	e7fd      	b.n	80056cc <__NVIC_SystemReset+0x20>
 80056d0:	e000ed00 	.word	0xe000ed00
 80056d4:	05fa0004 	.word	0x05fa0004

080056d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff ff35 	bl	8005550 <__NVIC_SetPriorityGrouping>
}
 80056e6:	bf00      	nop
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b086      	sub	sp, #24
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	4603      	mov	r3, r0
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	607a      	str	r2, [r7, #4]
 80056fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005700:	f7ff ff4a 	bl	8005598 <__NVIC_GetPriorityGrouping>
 8005704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	6978      	ldr	r0, [r7, #20]
 800570c:	f7ff ff9a 	bl	8005644 <NVIC_EncodePriority>
 8005710:	4602      	mov	r2, r0
 8005712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005716:	4611      	mov	r1, r2
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff ff69 	bl	80055f0 <__NVIC_SetPriority>
}
 800571e:	bf00      	nop
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	4603      	mov	r3, r0
 800572e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff ff3d 	bl	80055b4 <__NVIC_EnableIRQ>
}
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005746:	f7ff ffb1 	bl	80056ac <__NVIC_SystemReset>
	...

0800574c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005758:	f7ff fa4a 	bl	8004bf0 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e099      	b.n	800589c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0201 	bic.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005788:	e00f      	b.n	80057aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800578a:	f7ff fa31 	bl	8004bf0 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b05      	cmp	r3, #5
 8005796:	d908      	bls.n	80057aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2220      	movs	r2, #32
 800579c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2203      	movs	r2, #3
 80057a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e078      	b.n	800589c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e8      	bne.n	800578a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	4b38      	ldr	r3, [pc, #224]	; (80058a4 <HAL_DMA_Init+0x158>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	2b04      	cmp	r3, #4
 8005802:	d107      	bne.n	8005814 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	4313      	orrs	r3, r2
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f023 0307 	bic.w	r3, r3, #7
 800582a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4313      	orrs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	2b04      	cmp	r3, #4
 800583c:	d117      	bne.n	800586e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4313      	orrs	r3, r2
 8005846:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00e      	beq.n	800586e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fb1b 	bl	8005e8c <DMA_CheckFifoParam>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2240      	movs	r2, #64	; 0x40
 8005860:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800586a:	2301      	movs	r3, #1
 800586c:	e016      	b.n	800589c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fad2 	bl	8005e20 <DMA_CalcBaseAndBitshift>
 800587c:	4603      	mov	r3, r0
 800587e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005884:	223f      	movs	r2, #63	; 0x3f
 8005886:	409a      	lsls	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	f010803f 	.word	0xf010803f

080058a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d101      	bne.n	80058ce <HAL_DMA_Start_IT+0x26>
 80058ca:	2302      	movs	r3, #2
 80058cc:	e040      	b.n	8005950 <HAL_DMA_Start_IT+0xa8>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d12f      	bne.n	8005942 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2202      	movs	r2, #2
 80058e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 fa64 	bl	8005dc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005900:	223f      	movs	r2, #63	; 0x3f
 8005902:	409a      	lsls	r2, r3
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0216 	orr.w	r2, r2, #22
 8005916:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d007      	beq.n	8005930 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0208 	orr.w	r2, r2, #8
 800592e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0201 	orr.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	e005      	b.n	800594e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800594a:	2302      	movs	r3, #2
 800594c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800594e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005964:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005966:	f7ff f943 	bl	8004bf0 <HAL_GetTick>
 800596a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d008      	beq.n	800598a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2280      	movs	r2, #128	; 0x80
 800597c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e052      	b.n	8005a30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0216 	bic.w	r2, r2, #22
 8005998:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	695a      	ldr	r2, [r3, #20]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d103      	bne.n	80059ba <HAL_DMA_Abort+0x62>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d007      	beq.n	80059ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0208 	bic.w	r2, r2, #8
 80059c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0201 	bic.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059da:	e013      	b.n	8005a04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059dc:	f7ff f908 	bl	8004bf0 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b05      	cmp	r3, #5
 80059e8:	d90c      	bls.n	8005a04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2203      	movs	r2, #3
 80059fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e015      	b.n	8005a30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e4      	bne.n	80059dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a16:	223f      	movs	r2, #63	; 0x3f
 8005a18:	409a      	lsls	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d004      	beq.n	8005a56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2280      	movs	r2, #128	; 0x80
 8005a50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e00c      	b.n	8005a70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2205      	movs	r2, #5
 8005a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0201 	bic.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a88:	4b92      	ldr	r3, [pc, #584]	; (8005cd4 <HAL_DMA_IRQHandler+0x258>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a92      	ldr	r2, [pc, #584]	; (8005cd8 <HAL_DMA_IRQHandler+0x25c>)
 8005a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a92:	0a9b      	lsrs	r3, r3, #10
 8005a94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa6:	2208      	movs	r2, #8
 8005aa8:	409a      	lsls	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4013      	ands	r3, r2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d01a      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d013      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0204 	bic.w	r2, r2, #4
 8005ace:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	409a      	lsls	r2, r3
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae0:	f043 0201 	orr.w	r2, r3, #1
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aec:	2201      	movs	r2, #1
 8005aee:	409a      	lsls	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4013      	ands	r3, r2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d012      	beq.n	8005b1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	409a      	lsls	r2, r3
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b16:	f043 0202 	orr.w	r2, r3, #2
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b22:	2204      	movs	r2, #4
 8005b24:	409a      	lsls	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d012      	beq.n	8005b54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00b      	beq.n	8005b54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b40:	2204      	movs	r2, #4
 8005b42:	409a      	lsls	r2, r3
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4c:	f043 0204 	orr.w	r2, r3, #4
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b58:	2210      	movs	r2, #16
 8005b5a:	409a      	lsls	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d043      	beq.n	8005bec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d03c      	beq.n	8005bec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b76:	2210      	movs	r2, #16
 8005b78:	409a      	lsls	r2, r3
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d018      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d108      	bne.n	8005bac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d024      	beq.n	8005bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	4798      	blx	r3
 8005baa:	e01f      	b.n	8005bec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01b      	beq.n	8005bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	4798      	blx	r3
 8005bbc:	e016      	b.n	8005bec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d107      	bne.n	8005bdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0208 	bic.w	r2, r2, #8
 8005bda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	409a      	lsls	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 808e 	beq.w	8005d1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0310 	and.w	r3, r3, #16
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 8086 	beq.w	8005d1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c12:	2220      	movs	r2, #32
 8005c14:	409a      	lsls	r2, r3
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b05      	cmp	r3, #5
 8005c24:	d136      	bne.n	8005c94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0216 	bic.w	r2, r2, #22
 8005c34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	695a      	ldr	r2, [r3, #20]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d103      	bne.n	8005c56 <HAL_DMA_IRQHandler+0x1da>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d007      	beq.n	8005c66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0208 	bic.w	r2, r2, #8
 8005c64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6a:	223f      	movs	r2, #63	; 0x3f
 8005c6c:	409a      	lsls	r2, r3
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d07d      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	4798      	blx	r3
        }
        return;
 8005c92:	e078      	b.n	8005d86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d01c      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d108      	bne.n	8005cc2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d030      	beq.n	8005d1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	4798      	blx	r3
 8005cc0:	e02b      	b.n	8005d1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d027      	beq.n	8005d1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	4798      	blx	r3
 8005cd2:	e022      	b.n	8005d1a <HAL_DMA_IRQHandler+0x29e>
 8005cd4:	20000008 	.word	0x20000008
 8005cd8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10f      	bne.n	8005d0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0210 	bic.w	r2, r2, #16
 8005cf8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d032      	beq.n	8005d88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d022      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2205      	movs	r2, #5
 8005d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0201 	bic.w	r2, r2, #1
 8005d44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	60bb      	str	r3, [r7, #8]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d307      	bcc.n	8005d62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1f2      	bne.n	8005d46 <HAL_DMA_IRQHandler+0x2ca>
 8005d60:	e000      	b.n	8005d64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005d62:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	4798      	blx	r3
 8005d84:	e000      	b.n	8005d88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005d86:	bf00      	nop
    }
  }
}
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop

08005d90 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d9e:	b2db      	uxtb	r3, r3
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005de0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	2b40      	cmp	r3, #64	; 0x40
 8005df0:	d108      	bne.n	8005e04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e02:	e007      	b.n	8005e14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	60da      	str	r2, [r3, #12]
}
 8005e14:	bf00      	nop
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	3b10      	subs	r3, #16
 8005e30:	4a14      	ldr	r2, [pc, #80]	; (8005e84 <DMA_CalcBaseAndBitshift+0x64>)
 8005e32:	fba2 2303 	umull	r2, r3, r2, r3
 8005e36:	091b      	lsrs	r3, r3, #4
 8005e38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e3a:	4a13      	ldr	r2, [pc, #76]	; (8005e88 <DMA_CalcBaseAndBitshift+0x68>)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d909      	bls.n	8005e62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	1d1a      	adds	r2, r3, #4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	659a      	str	r2, [r3, #88]	; 0x58
 8005e60:	e007      	b.n	8005e72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	aaaaaaab 	.word	0xaaaaaaab
 8005e88:	08012434 	.word	0x08012434

08005e8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d11f      	bne.n	8005ee6 <DMA_CheckFifoParam+0x5a>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d856      	bhi.n	8005f5a <DMA_CheckFifoParam+0xce>
 8005eac:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <DMA_CheckFifoParam+0x28>)
 8005eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb2:	bf00      	nop
 8005eb4:	08005ec5 	.word	0x08005ec5
 8005eb8:	08005ed7 	.word	0x08005ed7
 8005ebc:	08005ec5 	.word	0x08005ec5
 8005ec0:	08005f5b 	.word	0x08005f5b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d046      	beq.n	8005f5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ed4:	e043      	b.n	8005f5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ede:	d140      	bne.n	8005f62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ee4:	e03d      	b.n	8005f62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eee:	d121      	bne.n	8005f34 <DMA_CheckFifoParam+0xa8>
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d837      	bhi.n	8005f66 <DMA_CheckFifoParam+0xda>
 8005ef6:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <DMA_CheckFifoParam+0x70>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005f0d 	.word	0x08005f0d
 8005f00:	08005f13 	.word	0x08005f13
 8005f04:	08005f0d 	.word	0x08005f0d
 8005f08:	08005f25 	.word	0x08005f25
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f10:	e030      	b.n	8005f74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d025      	beq.n	8005f6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f22:	e022      	b.n	8005f6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f2c:	d11f      	bne.n	8005f6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005f32:	e01c      	b.n	8005f6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d903      	bls.n	8005f42 <DMA_CheckFifoParam+0xb6>
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d003      	beq.n	8005f48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005f40:	e018      	b.n	8005f74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	73fb      	strb	r3, [r7, #15]
      break;
 8005f46:	e015      	b.n	8005f74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00e      	beq.n	8005f72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	73fb      	strb	r3, [r7, #15]
      break;
 8005f58:	e00b      	b.n	8005f72 <DMA_CheckFifoParam+0xe6>
      break;
 8005f5a:	bf00      	nop
 8005f5c:	e00a      	b.n	8005f74 <DMA_CheckFifoParam+0xe8>
      break;
 8005f5e:	bf00      	nop
 8005f60:	e008      	b.n	8005f74 <DMA_CheckFifoParam+0xe8>
      break;
 8005f62:	bf00      	nop
 8005f64:	e006      	b.n	8005f74 <DMA_CheckFifoParam+0xe8>
      break;
 8005f66:	bf00      	nop
 8005f68:	e004      	b.n	8005f74 <DMA_CheckFifoParam+0xe8>
      break;
 8005f6a:	bf00      	nop
 8005f6c:	e002      	b.n	8005f74 <DMA_CheckFifoParam+0xe8>
      break;   
 8005f6e:	bf00      	nop
 8005f70:	e000      	b.n	8005f74 <DMA_CheckFifoParam+0xe8>
      break;
 8005f72:	bf00      	nop
    }
  } 
  
  return status; 
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop

08005f84 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005f96:	4b23      	ldr	r3, [pc, #140]	; (8006024 <HAL_FLASH_Program+0xa0>)
 8005f98:	7e1b      	ldrb	r3, [r3, #24]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d101      	bne.n	8005fa2 <HAL_FLASH_Program+0x1e>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e03b      	b.n	800601a <HAL_FLASH_Program+0x96>
 8005fa2:	4b20      	ldr	r3, [pc, #128]	; (8006024 <HAL_FLASH_Program+0xa0>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005fa8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005fac:	f000 f860 	bl	8006070 <FLASH_WaitForLastOperation>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005fb4:	7dfb      	ldrb	r3, [r7, #23]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d12b      	bne.n	8006012 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d105      	bne.n	8005fcc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005fc0:	783b      	ldrb	r3, [r7, #0]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	68b8      	ldr	r0, [r7, #8]
 8005fc6:	f000 f90b 	bl	80061e0 <FLASH_Program_Byte>
 8005fca:	e016      	b.n	8005ffa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d105      	bne.n	8005fde <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005fd2:	883b      	ldrh	r3, [r7, #0]
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	68b8      	ldr	r0, [r7, #8]
 8005fd8:	f000 f8de 	bl	8006198 <FLASH_Program_HalfWord>
 8005fdc:	e00d      	b.n	8005ffa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d105      	bne.n	8005ff0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	68b8      	ldr	r0, [r7, #8]
 8005fea:	f000 f8b3 	bl	8006154 <FLASH_Program_Word>
 8005fee:	e004      	b.n	8005ffa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ff4:	68b8      	ldr	r0, [r7, #8]
 8005ff6:	f000 f87b 	bl	80060f0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ffa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ffe:	f000 f837 	bl	8006070 <FLASH_WaitForLastOperation>
 8006002:	4603      	mov	r3, r0
 8006004:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8006006:	4b08      	ldr	r3, [pc, #32]	; (8006028 <HAL_FLASH_Program+0xa4>)
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	4a07      	ldr	r2, [pc, #28]	; (8006028 <HAL_FLASH_Program+0xa4>)
 800600c:	f023 0301 	bic.w	r3, r3, #1
 8006010:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006012:	4b04      	ldr	r3, [pc, #16]	; (8006024 <HAL_FLASH_Program+0xa0>)
 8006014:	2200      	movs	r2, #0
 8006016:	761a      	strb	r2, [r3, #24]
  
  return status;
 8006018:	7dfb      	ldrb	r3, [r7, #23]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	2000b8f0 	.word	0x2000b8f0
 8006028:	40023c00 	.word	0x40023c00

0800602c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006036:	4b0b      	ldr	r3, [pc, #44]	; (8006064 <HAL_FLASH_Unlock+0x38>)
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	da0b      	bge.n	8006056 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800603e:	4b09      	ldr	r3, [pc, #36]	; (8006064 <HAL_FLASH_Unlock+0x38>)
 8006040:	4a09      	ldr	r2, [pc, #36]	; (8006068 <HAL_FLASH_Unlock+0x3c>)
 8006042:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006044:	4b07      	ldr	r3, [pc, #28]	; (8006064 <HAL_FLASH_Unlock+0x38>)
 8006046:	4a09      	ldr	r2, [pc, #36]	; (800606c <HAL_FLASH_Unlock+0x40>)
 8006048:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800604a:	4b06      	ldr	r3, [pc, #24]	; (8006064 <HAL_FLASH_Unlock+0x38>)
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	da01      	bge.n	8006056 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006056:	79fb      	ldrb	r3, [r7, #7]
}
 8006058:	4618      	mov	r0, r3
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	40023c00 	.word	0x40023c00
 8006068:	45670123 	.word	0x45670123
 800606c:	cdef89ab 	.word	0xcdef89ab

08006070 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800607c:	4b1a      	ldr	r3, [pc, #104]	; (80060e8 <FLASH_WaitForLastOperation+0x78>)
 800607e:	2200      	movs	r2, #0
 8006080:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8006082:	f7fe fdb5 	bl	8004bf0 <HAL_GetTick>
 8006086:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006088:	e010      	b.n	80060ac <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006090:	d00c      	beq.n	80060ac <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d007      	beq.n	80060a8 <FLASH_WaitForLastOperation+0x38>
 8006098:	f7fe fdaa 	bl	8004bf0 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d201      	bcs.n	80060ac <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e019      	b.n	80060e0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80060ac:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <FLASH_WaitForLastOperation+0x7c>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e8      	bne.n	800608a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80060b8:	4b0c      	ldr	r3, [pc, #48]	; (80060ec <FLASH_WaitForLastOperation+0x7c>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80060c4:	4b09      	ldr	r3, [pc, #36]	; (80060ec <FLASH_WaitForLastOperation+0x7c>)
 80060c6:	2201      	movs	r2, #1
 80060c8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80060ca:	4b08      	ldr	r3, [pc, #32]	; (80060ec <FLASH_WaitForLastOperation+0x7c>)
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80060d6:	f000 f8a5 	bl	8006224 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e000      	b.n	80060e0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80060de:	2300      	movs	r3, #0
  
}  
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	2000b8f0 	.word	0x2000b8f0
 80060ec:	40023c00 	.word	0x40023c00

080060f0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80060fc:	4b14      	ldr	r3, [pc, #80]	; (8006150 <FLASH_Program_DoubleWord+0x60>)
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	4a13      	ldr	r2, [pc, #76]	; (8006150 <FLASH_Program_DoubleWord+0x60>)
 8006102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006106:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006108:	4b11      	ldr	r3, [pc, #68]	; (8006150 <FLASH_Program_DoubleWord+0x60>)
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	4a10      	ldr	r2, [pc, #64]	; (8006150 <FLASH_Program_DoubleWord+0x60>)
 800610e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006112:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006114:	4b0e      	ldr	r3, [pc, #56]	; (8006150 <FLASH_Program_DoubleWord+0x60>)
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	4a0d      	ldr	r2, [pc, #52]	; (8006150 <FLASH_Program_DoubleWord+0x60>)
 800611a:	f043 0301 	orr.w	r3, r3, #1
 800611e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006126:	f3bf 8f6f 	isb	sy
}
 800612a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800612c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	000a      	movs	r2, r1
 800613a:	2300      	movs	r3, #0
 800613c:	68f9      	ldr	r1, [r7, #12]
 800613e:	3104      	adds	r1, #4
 8006140:	4613      	mov	r3, r2
 8006142:	600b      	str	r3, [r1, #0]
}
 8006144:	bf00      	nop
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	40023c00 	.word	0x40023c00

08006154 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800615e:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <FLASH_Program_Word+0x40>)
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	4a0c      	ldr	r2, [pc, #48]	; (8006194 <FLASH_Program_Word+0x40>)
 8006164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006168:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800616a:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <FLASH_Program_Word+0x40>)
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	4a09      	ldr	r2, [pc, #36]	; (8006194 <FLASH_Program_Word+0x40>)
 8006170:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006174:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006176:	4b07      	ldr	r3, [pc, #28]	; (8006194 <FLASH_Program_Word+0x40>)
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	4a06      	ldr	r2, [pc, #24]	; (8006194 <FLASH_Program_Word+0x40>)
 800617c:	f043 0301 	orr.w	r3, r3, #1
 8006180:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	601a      	str	r2, [r3, #0]
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	40023c00 	.word	0x40023c00

08006198 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	460b      	mov	r3, r1
 80061a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061a4:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <FLASH_Program_HalfWord+0x44>)
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	4a0c      	ldr	r2, [pc, #48]	; (80061dc <FLASH_Program_HalfWord+0x44>)
 80061aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80061b0:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <FLASH_Program_HalfWord+0x44>)
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	4a09      	ldr	r2, [pc, #36]	; (80061dc <FLASH_Program_HalfWord+0x44>)
 80061b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80061bc:	4b07      	ldr	r3, [pc, #28]	; (80061dc <FLASH_Program_HalfWord+0x44>)
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	4a06      	ldr	r2, [pc, #24]	; (80061dc <FLASH_Program_HalfWord+0x44>)
 80061c2:	f043 0301 	orr.w	r3, r3, #1
 80061c6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	887a      	ldrh	r2, [r7, #2]
 80061cc:	801a      	strh	r2, [r3, #0]
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	40023c00 	.word	0x40023c00

080061e0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061ec:	4b0c      	ldr	r3, [pc, #48]	; (8006220 <FLASH_Program_Byte+0x40>)
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	4a0b      	ldr	r2, [pc, #44]	; (8006220 <FLASH_Program_Byte+0x40>)
 80061f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80061f8:	4b09      	ldr	r3, [pc, #36]	; (8006220 <FLASH_Program_Byte+0x40>)
 80061fa:	4a09      	ldr	r2, [pc, #36]	; (8006220 <FLASH_Program_Byte+0x40>)
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <FLASH_Program_Byte+0x40>)
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	4a06      	ldr	r2, [pc, #24]	; (8006220 <FLASH_Program_Byte+0x40>)
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	78fa      	ldrb	r2, [r7, #3]
 8006210:	701a      	strb	r2, [r3, #0]
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	40023c00 	.word	0x40023c00

08006224 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006228:	4b2f      	ldr	r3, [pc, #188]	; (80062e8 <FLASH_SetErrorCode+0xc4>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b00      	cmp	r3, #0
 8006232:	d008      	beq.n	8006246 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006234:	4b2d      	ldr	r3, [pc, #180]	; (80062ec <FLASH_SetErrorCode+0xc8>)
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	f043 0310 	orr.w	r3, r3, #16
 800623c:	4a2b      	ldr	r2, [pc, #172]	; (80062ec <FLASH_SetErrorCode+0xc8>)
 800623e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006240:	4b29      	ldr	r3, [pc, #164]	; (80062e8 <FLASH_SetErrorCode+0xc4>)
 8006242:	2210      	movs	r2, #16
 8006244:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006246:	4b28      	ldr	r3, [pc, #160]	; (80062e8 <FLASH_SetErrorCode+0xc4>)
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b00      	cmp	r3, #0
 8006250:	d008      	beq.n	8006264 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006252:	4b26      	ldr	r3, [pc, #152]	; (80062ec <FLASH_SetErrorCode+0xc8>)
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	f043 0308 	orr.w	r3, r3, #8
 800625a:	4a24      	ldr	r2, [pc, #144]	; (80062ec <FLASH_SetErrorCode+0xc8>)
 800625c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800625e:	4b22      	ldr	r3, [pc, #136]	; (80062e8 <FLASH_SetErrorCode+0xc4>)
 8006260:	2220      	movs	r2, #32
 8006262:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006264:	4b20      	ldr	r3, [pc, #128]	; (80062e8 <FLASH_SetErrorCode+0xc4>)
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626c:	2b00      	cmp	r3, #0
 800626e:	d008      	beq.n	8006282 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006270:	4b1e      	ldr	r3, [pc, #120]	; (80062ec <FLASH_SetErrorCode+0xc8>)
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	f043 0304 	orr.w	r3, r3, #4
 8006278:	4a1c      	ldr	r2, [pc, #112]	; (80062ec <FLASH_SetErrorCode+0xc8>)
 800627a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800627c:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <FLASH_SetErrorCode+0xc4>)
 800627e:	2240      	movs	r2, #64	; 0x40
 8006280:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006282:	4b19      	ldr	r3, [pc, #100]	; (80062e8 <FLASH_SetErrorCode+0xc4>)
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628a:	2b00      	cmp	r3, #0
 800628c:	d008      	beq.n	80062a0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800628e:	4b17      	ldr	r3, [pc, #92]	; (80062ec <FLASH_SetErrorCode+0xc8>)
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f043 0302 	orr.w	r3, r3, #2
 8006296:	4a15      	ldr	r2, [pc, #84]	; (80062ec <FLASH_SetErrorCode+0xc8>)
 8006298:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800629a:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <FLASH_SetErrorCode+0xc4>)
 800629c:	2280      	movs	r2, #128	; 0x80
 800629e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80062a0:	4b11      	ldr	r3, [pc, #68]	; (80062e8 <FLASH_SetErrorCode+0xc4>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d009      	beq.n	80062c0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80062ac:	4b0f      	ldr	r3, [pc, #60]	; (80062ec <FLASH_SetErrorCode+0xc8>)
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	f043 0301 	orr.w	r3, r3, #1
 80062b4:	4a0d      	ldr	r2, [pc, #52]	; (80062ec <FLASH_SetErrorCode+0xc8>)
 80062b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80062b8:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <FLASH_SetErrorCode+0xc4>)
 80062ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062be:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80062c0:	4b09      	ldr	r3, [pc, #36]	; (80062e8 <FLASH_SetErrorCode+0xc4>)
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d008      	beq.n	80062de <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80062cc:	4b07      	ldr	r3, [pc, #28]	; (80062ec <FLASH_SetErrorCode+0xc8>)
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	f043 0320 	orr.w	r3, r3, #32
 80062d4:	4a05      	ldr	r2, [pc, #20]	; (80062ec <FLASH_SetErrorCode+0xc8>)
 80062d6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80062d8:	4b03      	ldr	r3, [pc, #12]	; (80062e8 <FLASH_SetErrorCode+0xc4>)
 80062da:	2202      	movs	r2, #2
 80062dc:	60da      	str	r2, [r3, #12]
  }
}
 80062de:	bf00      	nop
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	40023c00 	.word	0x40023c00
 80062ec:	2000b8f0 	.word	0x2000b8f0

080062f0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006302:	4b31      	ldr	r3, [pc, #196]	; (80063c8 <HAL_FLASHEx_Erase+0xd8>)
 8006304:	7e1b      	ldrb	r3, [r3, #24]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <HAL_FLASHEx_Erase+0x1e>
 800630a:	2302      	movs	r3, #2
 800630c:	e058      	b.n	80063c0 <HAL_FLASHEx_Erase+0xd0>
 800630e:	4b2e      	ldr	r3, [pc, #184]	; (80063c8 <HAL_FLASHEx_Erase+0xd8>)
 8006310:	2201      	movs	r2, #1
 8006312:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006314:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006318:	f7ff feaa 	bl	8006070 <FLASH_WaitForLastOperation>
 800631c:	4603      	mov	r3, r0
 800631e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d148      	bne.n	80063b8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800632c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d115      	bne.n	8006362 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	b2da      	uxtb	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	4619      	mov	r1, r3
 8006342:	4610      	mov	r0, r2
 8006344:	f000 f844 	bl	80063d0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006348:	f24c 3050 	movw	r0, #50000	; 0xc350
 800634c:	f7ff fe90 	bl	8006070 <FLASH_WaitForLastOperation>
 8006350:	4603      	mov	r3, r0
 8006352:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006354:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <HAL_FLASHEx_Erase+0xdc>)
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	4a1c      	ldr	r2, [pc, #112]	; (80063cc <HAL_FLASHEx_Erase+0xdc>)
 800635a:	f023 0304 	bic.w	r3, r3, #4
 800635e:	6113      	str	r3, [r2, #16]
 8006360:	e028      	b.n	80063b4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	60bb      	str	r3, [r7, #8]
 8006368:	e01c      	b.n	80063a4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	4619      	mov	r1, r3
 8006372:	68b8      	ldr	r0, [r7, #8]
 8006374:	f000 f850 	bl	8006418 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006378:	f24c 3050 	movw	r0, #50000	; 0xc350
 800637c:	f7ff fe78 	bl	8006070 <FLASH_WaitForLastOperation>
 8006380:	4603      	mov	r3, r0
 8006382:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006384:	4b11      	ldr	r3, [pc, #68]	; (80063cc <HAL_FLASHEx_Erase+0xdc>)
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	4a10      	ldr	r2, [pc, #64]	; (80063cc <HAL_FLASHEx_Erase+0xdc>)
 800638a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800638e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8006390:	7bfb      	ldrb	r3, [r7, #15]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	601a      	str	r2, [r3, #0]
          break;
 800639c:	e00a      	b.n	80063b4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	3301      	adds	r3, #1
 80063a2:	60bb      	str	r3, [r7, #8]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	4413      	add	r3, r2
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d3da      	bcc.n	800636a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80063b4:	f000 f878 	bl	80064a8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80063b8:	4b03      	ldr	r3, [pc, #12]	; (80063c8 <HAL_FLASHEx_Erase+0xd8>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	761a      	strb	r2, [r3, #24]

  return status;
 80063be:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	2000b8f0 	.word	0x2000b8f0
 80063cc:	40023c00 	.word	0x40023c00

080063d0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	4603      	mov	r3, r0
 80063d8:	6039      	str	r1, [r7, #0]
 80063da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80063dc:	4b0d      	ldr	r3, [pc, #52]	; (8006414 <FLASH_MassErase+0x44>)
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	4a0c      	ldr	r2, [pc, #48]	; (8006414 <FLASH_MassErase+0x44>)
 80063e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80063e8:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <FLASH_MassErase+0x44>)
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	4a09      	ldr	r2, [pc, #36]	; (8006414 <FLASH_MassErase+0x44>)
 80063ee:	f043 0304 	orr.w	r3, r3, #4
 80063f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80063f4:	4b07      	ldr	r3, [pc, #28]	; (8006414 <FLASH_MassErase+0x44>)
 80063f6:	691a      	ldr	r2, [r3, #16]
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	4313      	orrs	r3, r2
 80063fe:	4a05      	ldr	r2, [pc, #20]	; (8006414 <FLASH_MassErase+0x44>)
 8006400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006404:	6113      	str	r3, [r2, #16]
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	40023c00 	.word	0x40023c00

08006418 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d102      	bne.n	8006434 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	e010      	b.n	8006456 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d103      	bne.n	8006442 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800643a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	e009      	b.n	8006456 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006442:	78fb      	ldrb	r3, [r7, #3]
 8006444:	2b02      	cmp	r3, #2
 8006446:	d103      	bne.n	8006450 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	e002      	b.n	8006456 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006450:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006454:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006456:	4b13      	ldr	r3, [pc, #76]	; (80064a4 <FLASH_Erase_Sector+0x8c>)
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	4a12      	ldr	r2, [pc, #72]	; (80064a4 <FLASH_Erase_Sector+0x8c>)
 800645c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006460:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006462:	4b10      	ldr	r3, [pc, #64]	; (80064a4 <FLASH_Erase_Sector+0x8c>)
 8006464:	691a      	ldr	r2, [r3, #16]
 8006466:	490f      	ldr	r1, [pc, #60]	; (80064a4 <FLASH_Erase_Sector+0x8c>)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800646e:	4b0d      	ldr	r3, [pc, #52]	; (80064a4 <FLASH_Erase_Sector+0x8c>)
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	4a0c      	ldr	r2, [pc, #48]	; (80064a4 <FLASH_Erase_Sector+0x8c>)
 8006474:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006478:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800647a:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <FLASH_Erase_Sector+0x8c>)
 800647c:	691a      	ldr	r2, [r3, #16]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	4313      	orrs	r3, r2
 8006484:	4a07      	ldr	r2, [pc, #28]	; (80064a4 <FLASH_Erase_Sector+0x8c>)
 8006486:	f043 0302 	orr.w	r3, r3, #2
 800648a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <FLASH_Erase_Sector+0x8c>)
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	4a04      	ldr	r2, [pc, #16]	; (80064a4 <FLASH_Erase_Sector+0x8c>)
 8006492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006496:	6113      	str	r3, [r2, #16]
}
 8006498:	bf00      	nop
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40023c00 	.word	0x40023c00

080064a8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80064ac:	4b20      	ldr	r3, [pc, #128]	; (8006530 <FLASH_FlushCaches+0x88>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d017      	beq.n	80064e8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80064b8:	4b1d      	ldr	r3, [pc, #116]	; (8006530 <FLASH_FlushCaches+0x88>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1c      	ldr	r2, [pc, #112]	; (8006530 <FLASH_FlushCaches+0x88>)
 80064be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80064c4:	4b1a      	ldr	r3, [pc, #104]	; (8006530 <FLASH_FlushCaches+0x88>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a19      	ldr	r2, [pc, #100]	; (8006530 <FLASH_FlushCaches+0x88>)
 80064ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	4b17      	ldr	r3, [pc, #92]	; (8006530 <FLASH_FlushCaches+0x88>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a16      	ldr	r2, [pc, #88]	; (8006530 <FLASH_FlushCaches+0x88>)
 80064d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064da:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80064dc:	4b14      	ldr	r3, [pc, #80]	; (8006530 <FLASH_FlushCaches+0x88>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a13      	ldr	r2, [pc, #76]	; (8006530 <FLASH_FlushCaches+0x88>)
 80064e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064e6:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80064e8:	4b11      	ldr	r3, [pc, #68]	; (8006530 <FLASH_FlushCaches+0x88>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d017      	beq.n	8006524 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80064f4:	4b0e      	ldr	r3, [pc, #56]	; (8006530 <FLASH_FlushCaches+0x88>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a0d      	ldr	r2, [pc, #52]	; (8006530 <FLASH_FlushCaches+0x88>)
 80064fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064fe:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006500:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <FLASH_FlushCaches+0x88>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a0a      	ldr	r2, [pc, #40]	; (8006530 <FLASH_FlushCaches+0x88>)
 8006506:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	4b08      	ldr	r3, [pc, #32]	; (8006530 <FLASH_FlushCaches+0x88>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a07      	ldr	r2, [pc, #28]	; (8006530 <FLASH_FlushCaches+0x88>)
 8006512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006516:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006518:	4b05      	ldr	r3, [pc, #20]	; (8006530 <FLASH_FlushCaches+0x88>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a04      	ldr	r2, [pc, #16]	; (8006530 <FLASH_FlushCaches+0x88>)
 800651e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006522:	6013      	str	r3, [r2, #0]
  }
}
 8006524:	bf00      	nop
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40023c00 	.word	0x40023c00

08006534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006534:	b480      	push	{r7}
 8006536:	b089      	sub	sp, #36	; 0x24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800653e:	2300      	movs	r3, #0
 8006540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006542:	2300      	movs	r3, #0
 8006544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006546:	2300      	movs	r3, #0
 8006548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800654a:	2300      	movs	r3, #0
 800654c:	61fb      	str	r3, [r7, #28]
 800654e:	e159      	b.n	8006804 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006550:	2201      	movs	r2, #1
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	fa02 f303 	lsl.w	r3, r2, r3
 8006558:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4013      	ands	r3, r2
 8006562:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	429a      	cmp	r2, r3
 800656a:	f040 8148 	bne.w	80067fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f003 0303 	and.w	r3, r3, #3
 8006576:	2b01      	cmp	r3, #1
 8006578:	d005      	beq.n	8006586 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006582:	2b02      	cmp	r3, #2
 8006584:	d130      	bne.n	80065e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	2203      	movs	r2, #3
 8006592:	fa02 f303 	lsl.w	r3, r2, r3
 8006596:	43db      	mvns	r3, r3
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	4013      	ands	r3, r2
 800659c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065bc:	2201      	movs	r2, #1
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	fa02 f303 	lsl.w	r3, r2, r3
 80065c4:	43db      	mvns	r3, r3
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4013      	ands	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	091b      	lsrs	r3, r3, #4
 80065d2:	f003 0201 	and.w	r2, r3, #1
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	fa02 f303 	lsl.w	r3, r2, r3
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	4313      	orrs	r3, r2
 80065e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f003 0303 	and.w	r3, r3, #3
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d017      	beq.n	8006624 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	2203      	movs	r2, #3
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	43db      	mvns	r3, r3
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	4013      	ands	r3, r2
 800660a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	4313      	orrs	r3, r2
 800661c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f003 0303 	and.w	r3, r3, #3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d123      	bne.n	8006678 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	08da      	lsrs	r2, r3, #3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3208      	adds	r2, #8
 8006638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	220f      	movs	r2, #15
 8006648:	fa02 f303 	lsl.w	r3, r2, r3
 800664c:	43db      	mvns	r3, r3
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	4013      	ands	r3, r2
 8006652:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	691a      	ldr	r2, [r3, #16]
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	f003 0307 	and.w	r3, r3, #7
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	4313      	orrs	r3, r2
 8006668:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	08da      	lsrs	r2, r3, #3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3208      	adds	r2, #8
 8006672:	69b9      	ldr	r1, [r7, #24]
 8006674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	2203      	movs	r2, #3
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	43db      	mvns	r3, r3
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	4013      	ands	r3, r2
 800668e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f003 0203 	and.w	r2, r3, #3
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	fa02 f303 	lsl.w	r3, r2, r3
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 80a2 	beq.w	80067fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	4b57      	ldr	r3, [pc, #348]	; (800681c <HAL_GPIO_Init+0x2e8>)
 80066c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c2:	4a56      	ldr	r2, [pc, #344]	; (800681c <HAL_GPIO_Init+0x2e8>)
 80066c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066c8:	6453      	str	r3, [r2, #68]	; 0x44
 80066ca:	4b54      	ldr	r3, [pc, #336]	; (800681c <HAL_GPIO_Init+0x2e8>)
 80066cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066d6:	4a52      	ldr	r2, [pc, #328]	; (8006820 <HAL_GPIO_Init+0x2ec>)
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	089b      	lsrs	r3, r3, #2
 80066dc:	3302      	adds	r3, #2
 80066de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	220f      	movs	r2, #15
 80066ee:	fa02 f303 	lsl.w	r3, r2, r3
 80066f2:	43db      	mvns	r3, r3
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	4013      	ands	r3, r2
 80066f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a49      	ldr	r2, [pc, #292]	; (8006824 <HAL_GPIO_Init+0x2f0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d019      	beq.n	8006736 <HAL_GPIO_Init+0x202>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a48      	ldr	r2, [pc, #288]	; (8006828 <HAL_GPIO_Init+0x2f4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d013      	beq.n	8006732 <HAL_GPIO_Init+0x1fe>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a47      	ldr	r2, [pc, #284]	; (800682c <HAL_GPIO_Init+0x2f8>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00d      	beq.n	800672e <HAL_GPIO_Init+0x1fa>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a46      	ldr	r2, [pc, #280]	; (8006830 <HAL_GPIO_Init+0x2fc>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d007      	beq.n	800672a <HAL_GPIO_Init+0x1f6>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a45      	ldr	r2, [pc, #276]	; (8006834 <HAL_GPIO_Init+0x300>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d101      	bne.n	8006726 <HAL_GPIO_Init+0x1f2>
 8006722:	2304      	movs	r3, #4
 8006724:	e008      	b.n	8006738 <HAL_GPIO_Init+0x204>
 8006726:	2307      	movs	r3, #7
 8006728:	e006      	b.n	8006738 <HAL_GPIO_Init+0x204>
 800672a:	2303      	movs	r3, #3
 800672c:	e004      	b.n	8006738 <HAL_GPIO_Init+0x204>
 800672e:	2302      	movs	r3, #2
 8006730:	e002      	b.n	8006738 <HAL_GPIO_Init+0x204>
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <HAL_GPIO_Init+0x204>
 8006736:	2300      	movs	r3, #0
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	f002 0203 	and.w	r2, r2, #3
 800673e:	0092      	lsls	r2, r2, #2
 8006740:	4093      	lsls	r3, r2
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	4313      	orrs	r3, r2
 8006746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006748:	4935      	ldr	r1, [pc, #212]	; (8006820 <HAL_GPIO_Init+0x2ec>)
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	089b      	lsrs	r3, r3, #2
 800674e:	3302      	adds	r3, #2
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006756:	4b38      	ldr	r3, [pc, #224]	; (8006838 <HAL_GPIO_Init+0x304>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	43db      	mvns	r3, r3
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	4013      	ands	r3, r2
 8006764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	4313      	orrs	r3, r2
 8006778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800677a:	4a2f      	ldr	r2, [pc, #188]	; (8006838 <HAL_GPIO_Init+0x304>)
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006780:	4b2d      	ldr	r3, [pc, #180]	; (8006838 <HAL_GPIO_Init+0x304>)
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	43db      	mvns	r3, r3
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	4013      	ands	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80067a4:	4a24      	ldr	r2, [pc, #144]	; (8006838 <HAL_GPIO_Init+0x304>)
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067aa:	4b23      	ldr	r3, [pc, #140]	; (8006838 <HAL_GPIO_Init+0x304>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	43db      	mvns	r3, r3
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	4013      	ands	r3, r2
 80067b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80067ce:	4a1a      	ldr	r2, [pc, #104]	; (8006838 <HAL_GPIO_Init+0x304>)
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80067d4:	4b18      	ldr	r3, [pc, #96]	; (8006838 <HAL_GPIO_Init+0x304>)
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	43db      	mvns	r3, r3
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	4013      	ands	r3, r2
 80067e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d003      	beq.n	80067f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067f8:	4a0f      	ldr	r2, [pc, #60]	; (8006838 <HAL_GPIO_Init+0x304>)
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	3301      	adds	r3, #1
 8006802:	61fb      	str	r3, [r7, #28]
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	2b0f      	cmp	r3, #15
 8006808:	f67f aea2 	bls.w	8006550 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800680c:	bf00      	nop
 800680e:	bf00      	nop
 8006810:	3724      	adds	r7, #36	; 0x24
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40023800 	.word	0x40023800
 8006820:	40013800 	.word	0x40013800
 8006824:	40020000 	.word	0x40020000
 8006828:	40020400 	.word	0x40020400
 800682c:	40020800 	.word	0x40020800
 8006830:	40020c00 	.word	0x40020c00
 8006834:	40021000 	.word	0x40021000
 8006838:	40013c00 	.word	0x40013c00

0800683c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691a      	ldr	r2, [r3, #16]
 800684c:	887b      	ldrh	r3, [r7, #2]
 800684e:	4013      	ands	r3, r2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006854:	2301      	movs	r3, #1
 8006856:	73fb      	strb	r3, [r7, #15]
 8006858:	e001      	b.n	800685e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800685a:	2300      	movs	r3, #0
 800685c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800685e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	807b      	strh	r3, [r7, #2]
 8006878:	4613      	mov	r3, r2
 800687a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800687c:	787b      	ldrb	r3, [r7, #1]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006882:	887a      	ldrh	r2, [r7, #2]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006888:	e003      	b.n	8006892 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800688a:	887b      	ldrh	r3, [r7, #2]
 800688c:	041a      	lsls	r2, r3, #16
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	619a      	str	r2, [r3, #24]
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800689e:	b480      	push	{r7}
 80068a0:	b085      	sub	sp, #20
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80068b0:	887a      	ldrh	r2, [r7, #2]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4013      	ands	r3, r2
 80068b6:	041a      	lsls	r2, r3, #16
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	43d9      	mvns	r1, r3
 80068bc:	887b      	ldrh	r3, [r7, #2]
 80068be:	400b      	ands	r3, r1
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	619a      	str	r2, [r3, #24]
}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
	...

080068d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e12b      	b.n	8006b3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d106      	bne.n	8006900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fc feea 	bl	80036d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2224      	movs	r2, #36	; 0x24
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0201 	bic.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006926:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006936:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006938:	f003 f956 	bl	8009be8 <HAL_RCC_GetPCLK1Freq>
 800693c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	4a81      	ldr	r2, [pc, #516]	; (8006b48 <HAL_I2C_Init+0x274>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d807      	bhi.n	8006958 <HAL_I2C_Init+0x84>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4a80      	ldr	r2, [pc, #512]	; (8006b4c <HAL_I2C_Init+0x278>)
 800694c:	4293      	cmp	r3, r2
 800694e:	bf94      	ite	ls
 8006950:	2301      	movls	r3, #1
 8006952:	2300      	movhi	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	e006      	b.n	8006966 <HAL_I2C_Init+0x92>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4a7d      	ldr	r2, [pc, #500]	; (8006b50 <HAL_I2C_Init+0x27c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	bf94      	ite	ls
 8006960:	2301      	movls	r3, #1
 8006962:	2300      	movhi	r3, #0
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e0e7      	b.n	8006b3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4a78      	ldr	r2, [pc, #480]	; (8006b54 <HAL_I2C_Init+0x280>)
 8006972:	fba2 2303 	umull	r2, r3, r2, r3
 8006976:	0c9b      	lsrs	r3, r3, #18
 8006978:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	430a      	orrs	r2, r1
 800698c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	4a6a      	ldr	r2, [pc, #424]	; (8006b48 <HAL_I2C_Init+0x274>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d802      	bhi.n	80069a8 <HAL_I2C_Init+0xd4>
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	3301      	adds	r3, #1
 80069a6:	e009      	b.n	80069bc <HAL_I2C_Init+0xe8>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80069ae:	fb02 f303 	mul.w	r3, r2, r3
 80069b2:	4a69      	ldr	r2, [pc, #420]	; (8006b58 <HAL_I2C_Init+0x284>)
 80069b4:	fba2 2303 	umull	r2, r3, r2, r3
 80069b8:	099b      	lsrs	r3, r3, #6
 80069ba:	3301      	adds	r3, #1
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6812      	ldr	r2, [r2, #0]
 80069c0:	430b      	orrs	r3, r1
 80069c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80069ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	495c      	ldr	r1, [pc, #368]	; (8006b48 <HAL_I2C_Init+0x274>)
 80069d8:	428b      	cmp	r3, r1
 80069da:	d819      	bhi.n	8006a10 <HAL_I2C_Init+0x13c>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	1e59      	subs	r1, r3, #1
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80069ea:	1c59      	adds	r1, r3, #1
 80069ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80069f0:	400b      	ands	r3, r1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <HAL_I2C_Init+0x138>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	1e59      	subs	r1, r3, #1
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a04:	3301      	adds	r3, #1
 8006a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a0a:	e051      	b.n	8006ab0 <HAL_I2C_Init+0x1dc>
 8006a0c:	2304      	movs	r3, #4
 8006a0e:	e04f      	b.n	8006ab0 <HAL_I2C_Init+0x1dc>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d111      	bne.n	8006a3c <HAL_I2C_Init+0x168>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	1e58      	subs	r0, r3, #1
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6859      	ldr	r1, [r3, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	440b      	add	r3, r1
 8006a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	bf0c      	ite	eq
 8006a34:	2301      	moveq	r3, #1
 8006a36:	2300      	movne	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	e012      	b.n	8006a62 <HAL_I2C_Init+0x18e>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	1e58      	subs	r0, r3, #1
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6859      	ldr	r1, [r3, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	440b      	add	r3, r1
 8006a4a:	0099      	lsls	r1, r3, #2
 8006a4c:	440b      	add	r3, r1
 8006a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a52:	3301      	adds	r3, #1
 8006a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	bf0c      	ite	eq
 8006a5c:	2301      	moveq	r3, #1
 8006a5e:	2300      	movne	r3, #0
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <HAL_I2C_Init+0x196>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e022      	b.n	8006ab0 <HAL_I2C_Init+0x1dc>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10e      	bne.n	8006a90 <HAL_I2C_Init+0x1bc>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	1e58      	subs	r0, r3, #1
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6859      	ldr	r1, [r3, #4]
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	440b      	add	r3, r1
 8006a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a84:	3301      	adds	r3, #1
 8006a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a8e:	e00f      	b.n	8006ab0 <HAL_I2C_Init+0x1dc>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	1e58      	subs	r0, r3, #1
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6859      	ldr	r1, [r3, #4]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	440b      	add	r3, r1
 8006a9e:	0099      	lsls	r1, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ab0:	6879      	ldr	r1, [r7, #4]
 8006ab2:	6809      	ldr	r1, [r1, #0]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	69da      	ldr	r2, [r3, #28]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006ade:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6911      	ldr	r1, [r2, #16]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	68d2      	ldr	r2, [r2, #12]
 8006aea:	4311      	orrs	r1, r2
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	6812      	ldr	r2, [r2, #0]
 8006af0:	430b      	orrs	r3, r1
 8006af2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	695a      	ldr	r2, [r3, #20]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0201 	orr.w	r2, r2, #1
 8006b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	000186a0 	.word	0x000186a0
 8006b4c:	001e847f 	.word	0x001e847f
 8006b50:	003d08ff 	.word	0x003d08ff
 8006b54:	431bde83 	.word	0x431bde83
 8006b58:	10624dd3 	.word	0x10624dd3

08006b5c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08c      	sub	sp, #48	; 0x30
 8006b60:	af02      	add	r7, sp, #8
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	4608      	mov	r0, r1
 8006b66:	4611      	mov	r1, r2
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	817b      	strh	r3, [r7, #10]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	813b      	strh	r3, [r7, #8]
 8006b72:	4613      	mov	r3, r2
 8006b74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b76:	f7fe f83b 	bl	8004bf0 <HAL_GetTick>
 8006b7a:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	f040 8168 	bne.w	8006e5e <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006b8e:	4b98      	ldr	r3, [pc, #608]	; (8006df0 <HAL_I2C_Mem_Read_DMA+0x294>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	08db      	lsrs	r3, r3, #3
 8006b94:	4a97      	ldr	r2, [pc, #604]	; (8006df4 <HAL_I2C_Mem_Read_DMA+0x298>)
 8006b96:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9a:	0a1a      	lsrs	r2, r3, #8
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009a      	lsls	r2, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d116      	bne.n	8006be2 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	f043 0220 	orr.w	r2, r3, #32
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e13e      	b.n	8006e60 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d0db      	beq.n	8006ba8 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_I2C_Mem_Read_DMA+0xa2>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e130      	b.n	8006e60 <HAL_I2C_Mem_Read_DMA+0x304>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d007      	beq.n	8006c24 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f042 0201 	orr.w	r2, r2, #1
 8006c22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2222      	movs	r2, #34	; 0x22
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2240      	movs	r2, #64	; 0x40
 8006c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006c54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4a65      	ldr	r2, [pc, #404]	; (8006df8 <HAL_I2C_Mem_Read_DMA+0x29c>)
 8006c64:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 80ca 	beq.w	8006e04 <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d02c      	beq.n	8006cd2 <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	4a5f      	ldr	r2, [pc, #380]	; (8006dfc <HAL_I2C_Mem_Read_DMA+0x2a0>)
 8006c7e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	4a5e      	ldr	r2, [pc, #376]	; (8006e00 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 8006c86:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c94:	2200      	movs	r2, #0
 8006c96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3310      	adds	r3, #16
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	461a      	mov	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cbe:	f7fe fdf3 	bl	80058a8 <HAL_DMA_Start_IT>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006cc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d17b      	bne.n	8006dc8 <HAL_I2C_Mem_Read_DMA+0x26c>
 8006cd0:	e013      	b.n	8006cfa <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e0b2      	b.n	8006e60 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006cfa:	88f8      	ldrh	r0, [r7, #6]
 8006cfc:	893a      	ldrh	r2, [r7, #8]
 8006cfe:	8979      	ldrh	r1, [r7, #10]
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	9301      	str	r3, [sp, #4]
 8006d04:	2323      	movs	r3, #35	; 0x23
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	4603      	mov	r3, r0
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f001 feea 	bl	8008ae4 <I2C_RequestMemoryRead>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d023      	beq.n	8006d5e <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe fe8c 	bl	8005a38 <HAL_DMA_Abort_IT>
 8006d20:	4603      	mov	r3, r0
 8006d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d3c:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0201 	bic.w	r2, r2, #1
 8006d58:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e080      	b.n	8006e60 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d108      	bne.n	8006d78 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	e007      	b.n	8006d88 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d86:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d88:	2300      	movs	r3, #0
 8006d8a:	61bb      	str	r3, [r7, #24]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	61bb      	str	r3, [r7, #24]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	61bb      	str	r3, [r7, #24]
 8006d9c:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006db4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dc4:	605a      	str	r2, [r3, #4]
 8006dc6:	e048      	b.n	8006e5a <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	f043 0210 	orr.w	r2, r3, #16
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e037      	b.n	8006e60 <HAL_I2C_Mem_Read_DMA+0x304>
 8006df0:	20000008 	.word	0x20000008
 8006df4:	14f8b589 	.word	0x14f8b589
 8006df8:	ffff0000 	.word	0xffff0000
 8006dfc:	08008cb5 	.word	0x08008cb5
 8006e00:	08008e5f 	.word	0x08008e5f
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006e04:	88f8      	ldrh	r0, [r7, #6]
 8006e06:	893a      	ldrh	r2, [r7, #8]
 8006e08:	8979      	ldrh	r1, [r7, #10]
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	2323      	movs	r3, #35	; 0x23
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	4603      	mov	r3, r0
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f001 fe65 	bl	8008ae4 <I2C_RequestMemoryRead>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e01d      	b.n	8006e60 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	617b      	str	r3, [r7, #20]
 8006e38:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e48:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	e000      	b.n	8006e60 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 8006e5e:	2302      	movs	r3, #2
  }
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3728      	adds	r7, #40	; 0x28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	603b      	str	r3, [r7, #0]
 8006e74:	4613      	mov	r3, r2
 8006e76:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e84:	2b28      	cmp	r3, #40	; 0x28
 8006e86:	f040 811e 	bne.w	80070c6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 8006e90:	88fb      	ldrh	r3, [r7, #6]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e116      	b.n	80070c8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e10f      	b.n	80070c8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006ebe:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8006eca:	d127      	bne.n	8006f1c <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eda:	d14c      	bne.n	8006f76 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d048      	beq.n	8006f76 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ef2:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	4a75      	ldr	r2, [pc, #468]	; (80070d0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
 8006efa:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fe fd99 	bl	8005a38 <HAL_DMA_Abort_IT>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d034      	beq.n	8006f76 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f16:	4610      	mov	r0, r2
 8006f18:	4798      	blx	r3
 8006f1a:	e02c      	b.n	8006f76 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b29      	cmp	r3, #41	; 0x29
 8006f26:	d126      	bne.n	8006f76 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f36:	d11e      	bne.n	8006f76 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f46:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d012      	beq.n	8006f76 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f54:	4a5e      	ldr	r2, [pc, #376]	; (80070d0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
 8006f56:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fe fd6b 	bl	8005a38 <HAL_DMA_Abort_IT>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d006      	beq.n	8006f76 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f72:	4610      	mov	r0, r2
 8006f74:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d007      	beq.n	8006f94 <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f042 0201 	orr.w	r2, r2, #1
 8006f92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fa2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2229      	movs	r2, #41	; 0x29
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	88fa      	ldrh	r2, [r7, #6]
 8006fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d022      	beq.n	8007024 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe2:	4a3c      	ldr	r2, [pc, #240]	; (80070d4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26c>)
 8006fe4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fea:	4a3b      	ldr	r2, [pc, #236]	; (80070d8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x270>)
 8006fec:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	4619      	mov	r1, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3310      	adds	r3, #16
 800700e:	461a      	mov	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007014:	f7fe fc48 	bl	80058a8 <HAL_DMA_Start_IT>
 8007018:	4603      	mov	r3, r0
 800701a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800701c:	7dfb      	ldrb	r3, [r7, #23]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d13d      	bne.n	800709e <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 8007022:	e013      	b.n	800704c <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2228      	movs	r2, #40	; 0x28
 8007028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007038:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e03d      	b.n	80070c8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800705a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800705c:	2300      	movs	r3, #0
 800705e:	613b      	str	r3, [r7, #16]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	613b      	str	r3, [r7, #16]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	613b      	str	r3, [r7, #16]
 8007070:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007088:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007098:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	e014      	b.n	80070c8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	f043 0210 	orr.w	r2, r3, #16
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 80070c6:	2302      	movs	r3, #2
  }
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	08008ed9 	.word	0x08008ed9
 80070d4:	08008cb5 	.word	0x08008cb5
 80070d8:	08008e5f 	.word	0x08008e5f

080070dc <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	603b      	str	r3, [r7, #0]
 80070e8:	4613      	mov	r3, r2
 80070ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80070f8:	2b28      	cmp	r3, #40	; 0x28
 80070fa:	f040 811e 	bne.w	800733a <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 8007104:	88fb      	ldrh	r3, [r7, #6]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e116      	b.n	800733c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007114:	2b01      	cmp	r3, #1
 8007116:	d101      	bne.n	800711c <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 8007118:	2302      	movs	r3, #2
 800711a:	e10f      	b.n	800733c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007132:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b2a      	cmp	r3, #42	; 0x2a
 800713e:	d127      	bne.n	8007190 <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800714a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800714e:	d14c      	bne.n	80071ea <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007154:	2b00      	cmp	r3, #0
 8007156:	d048      	beq.n	80071ea <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007166:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716c:	4a75      	ldr	r2, [pc, #468]	; (8007344 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 800716e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007174:	4618      	mov	r0, r3
 8007176:	f7fe fc5f 	bl	8005a38 <HAL_DMA_Abort_IT>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d034      	beq.n	80071ea <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800718a:	4610      	mov	r0, r2
 800718c:	4798      	blx	r3
 800718e:	e02c      	b.n	80071ea <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b29      	cmp	r3, #41	; 0x29
 800719a:	d126      	bne.n	80071ea <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071aa:	d11e      	bne.n	80071ea <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071ba:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d012      	beq.n	80071ea <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c8:	4a5e      	ldr	r2, [pc, #376]	; (8007344 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 80071ca:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fe fc31 	bl	8005a38 <HAL_DMA_Abort_IT>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d006      	beq.n	80071ea <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071e6:	4610      	mov	r0, r2
 80071e8:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d007      	beq.n	8007208 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0201 	orr.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007216:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	222a      	movs	r2, #42	; 0x2a
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2220      	movs	r2, #32
 8007224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	88fa      	ldrh	r2, [r7, #6]
 8007238:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800723e:	b29a      	uxth	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	2b00      	cmp	r3, #0
 8007250:	d022      	beq.n	8007298 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007256:	4a3c      	ldr	r2, [pc, #240]	; (8007348 <HAL_I2C_Slave_Seq_Receive_DMA+0x26c>)
 8007258:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725e:	4a3b      	ldr	r2, [pc, #236]	; (800734c <HAL_I2C_Slave_Seq_Receive_DMA+0x270>)
 8007260:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007266:	2200      	movs	r2, #0
 8007268:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	2200      	movs	r2, #0
 8007270:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3310      	adds	r3, #16
 800727c:	4619      	mov	r1, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007282:	461a      	mov	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007288:	f7fe fb0e 	bl	80058a8 <HAL_DMA_Start_IT>
 800728c:	4603      	mov	r3, r0
 800728e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d13d      	bne.n	8007312 <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 8007296:	e013      	b.n	80072c0 <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2228      	movs	r2, #40	; 0x28
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e03d      	b.n	800733c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072ce:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072d0:	2300      	movs	r3, #0
 80072d2:	613b      	str	r3, [r7, #16]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	613b      	str	r3, [r7, #16]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072fc:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800730c:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	e014      	b.n	800733c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2220      	movs	r2, #32
 8007316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	f043 0210 	orr.w	r2, r3, #16
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e000      	b.n	800733c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800733a:	2302      	movs	r3, #2
  }
}
 800733c:	4618      	mov	r0, r3
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	08008ed9 	.word	0x08008ed9
 8007348:	08008cb5 	.word	0x08008cb5
 800734c:	08008e5f 	.word	0x08008e5f

08007350 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b20      	cmp	r3, #32
 8007362:	d124      	bne.n	80073ae <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2228      	movs	r2, #40	; 0x28
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b01      	cmp	r3, #1
 8007378:	d007      	beq.n	800738a <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f042 0201 	orr.w	r2, r2, #1
 8007388:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007398:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80073a8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	e000      	b.n	80073b0 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80073ae:	2302      	movs	r3, #2
  }
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b088      	sub	sp, #32
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	2b10      	cmp	r3, #16
 80073ea:	d003      	beq.n	80073f4 <HAL_I2C_EV_IRQHandler+0x38>
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	2b40      	cmp	r3, #64	; 0x40
 80073f0:	f040 80bd 	bne.w	800756e <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10d      	bne.n	800742a <HAL_I2C_EV_IRQHandler+0x6e>
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007414:	d003      	beq.n	800741e <HAL_I2C_EV_IRQHandler+0x62>
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800741c:	d101      	bne.n	8007422 <HAL_I2C_EV_IRQHandler+0x66>
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <HAL_I2C_EV_IRQHandler+0x68>
 8007422:	2300      	movs	r3, #0
 8007424:	2b01      	cmp	r3, #1
 8007426:	f000 812e 	beq.w	8007686 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00c      	beq.n	800744e <HAL_I2C_EV_IRQHandler+0x92>
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	0a5b      	lsrs	r3, r3, #9
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d006      	beq.n	800744e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f001 ff6a 	bl	800931a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fd36 	bl	8007eb8 <I2C_Master_SB>
 800744c:	e08e      	b.n	800756c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	08db      	lsrs	r3, r3, #3
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d009      	beq.n	800746e <HAL_I2C_EV_IRQHandler+0xb2>
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	0a5b      	lsrs	r3, r3, #9
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fdac 	bl	8007fc4 <I2C_Master_ADD10>
 800746c:	e07e      	b.n	800756c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	085b      	lsrs	r3, r3, #1
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d009      	beq.n	800748e <HAL_I2C_EV_IRQHandler+0xd2>
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	0a5b      	lsrs	r3, r3, #9
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fdc6 	bl	8008018 <I2C_Master_ADDR>
 800748c:	e06e      	b.n	800756c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	089b      	lsrs	r3, r3, #2
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d037      	beq.n	800750a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a8:	f000 80ef 	beq.w	800768a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	09db      	lsrs	r3, r3, #7
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00f      	beq.n	80074d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	0a9b      	lsrs	r3, r3, #10
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d009      	beq.n	80074d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	089b      	lsrs	r3, r3, #2
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d103      	bne.n	80074d8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f9c3 	bl	800785c <I2C_MasterTransmit_TXE>
 80074d6:	e049      	b.n	800756c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	089b      	lsrs	r3, r3, #2
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 80d2 	beq.w	800768a <HAL_I2C_EV_IRQHandler+0x2ce>
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	0a5b      	lsrs	r3, r3, #9
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 80cb 	beq.w	800768a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	2b10      	cmp	r3, #16
 80074f8:	d103      	bne.n	8007502 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fa4a 	bl	8007994 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007500:	e0c3      	b.n	800768a <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 faae 	bl	8007a64 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007508:	e0bf      	b.n	800768a <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007518:	f000 80b7 	beq.w	800768a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	099b      	lsrs	r3, r3, #6
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00f      	beq.n	8007548 <HAL_I2C_EV_IRQHandler+0x18c>
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	0a9b      	lsrs	r3, r3, #10
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d009      	beq.n	8007548 <HAL_I2C_EV_IRQHandler+0x18c>
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	089b      	lsrs	r3, r3, #2
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d103      	bne.n	8007548 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fb1e 	bl	8007b82 <I2C_MasterReceive_RXNE>
 8007546:	e011      	b.n	800756c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	089b      	lsrs	r3, r3, #2
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 809a 	beq.w	800768a <HAL_I2C_EV_IRQHandler+0x2ce>
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	0a5b      	lsrs	r3, r3, #9
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 8093 	beq.w	800768a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fbbd 	bl	8007ce4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800756a:	e08e      	b.n	800768a <HAL_I2C_EV_IRQHandler+0x2ce>
 800756c:	e08d      	b.n	800768a <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	2b00      	cmp	r3, #0
 8007574:	d004      	beq.n	8007580 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	61fb      	str	r3, [r7, #28]
 800757e:	e007      	b.n	8007590 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	085b      	lsrs	r3, r3, #1
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d012      	beq.n	80075c2 <HAL_I2C_EV_IRQHandler+0x206>
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	0a5b      	lsrs	r3, r3, #9
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00c      	beq.n	80075c2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80075b8:	69b9      	ldr	r1, [r7, #24]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 ff7b 	bl	80084b6 <I2C_Slave_ADDR>
 80075c0:	e066      	b.n	8007690 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	091b      	lsrs	r3, r3, #4
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d009      	beq.n	80075e2 <HAL_I2C_EV_IRQHandler+0x226>
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	0a5b      	lsrs	r3, r3, #9
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 ffb0 	bl	8008540 <I2C_Slave_STOPF>
 80075e0:	e056      	b.n	8007690 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	2b21      	cmp	r3, #33	; 0x21
 80075e6:	d002      	beq.n	80075ee <HAL_I2C_EV_IRQHandler+0x232>
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	2b29      	cmp	r3, #41	; 0x29
 80075ec:	d125      	bne.n	800763a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	09db      	lsrs	r3, r3, #7
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00f      	beq.n	800761a <HAL_I2C_EV_IRQHandler+0x25e>
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	0a9b      	lsrs	r3, r3, #10
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d009      	beq.n	800761a <HAL_I2C_EV_IRQHandler+0x25e>
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	089b      	lsrs	r3, r3, #2
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	d103      	bne.n	800761a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fe91 	bl	800833a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007618:	e039      	b.n	800768e <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	089b      	lsrs	r3, r3, #2
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d033      	beq.n	800768e <HAL_I2C_EV_IRQHandler+0x2d2>
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	0a5b      	lsrs	r3, r3, #9
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d02d      	beq.n	800768e <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 febe 	bl	80083b4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007638:	e029      	b.n	800768e <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	099b      	lsrs	r3, r3, #6
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00f      	beq.n	8007666 <HAL_I2C_EV_IRQHandler+0x2aa>
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	0a9b      	lsrs	r3, r3, #10
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d009      	beq.n	8007666 <HAL_I2C_EV_IRQHandler+0x2aa>
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	089b      	lsrs	r3, r3, #2
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	d103      	bne.n	8007666 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fec9 	bl	80083f6 <I2C_SlaveReceive_RXNE>
 8007664:	e014      	b.n	8007690 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	089b      	lsrs	r3, r3, #2
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00e      	beq.n	8007690 <HAL_I2C_EV_IRQHandler+0x2d4>
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	0a5b      	lsrs	r3, r3, #9
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d008      	beq.n	8007690 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fef7 	bl	8008472 <I2C_SlaveReceive_BTF>
 8007684:	e004      	b.n	8007690 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8007686:	bf00      	nop
 8007688:	e002      	b.n	8007690 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800768a:	bf00      	nop
 800768c:	e000      	b.n	8007690 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800768e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007690:	3720      	adds	r7, #32
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b08a      	sub	sp, #40	; 0x28
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80076ae:	2300      	movs	r3, #0
 80076b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076b8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	0a1b      	lsrs	r3, r3, #8
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00e      	beq.n	80076e4 <HAL_I2C_ER_IRQHandler+0x4e>
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	0a1b      	lsrs	r3, r3, #8
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d008      	beq.n	80076e4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	f043 0301 	orr.w	r3, r3, #1
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80076e2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	0a5b      	lsrs	r3, r3, #9
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00e      	beq.n	800770e <HAL_I2C_ER_IRQHandler+0x78>
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	0a1b      	lsrs	r3, r3, #8
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d008      	beq.n	800770e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	f043 0302 	orr.w	r3, r3, #2
 8007702:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800770c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	0a9b      	lsrs	r3, r3, #10
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d03f      	beq.n	800779a <HAL_I2C_ER_IRQHandler+0x104>
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	0a1b      	lsrs	r3, r3, #8
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	d039      	beq.n	800779a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007726:	7efb      	ldrb	r3, [r7, #27]
 8007728:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772e:	b29b      	uxth	r3, r3
 8007730:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007738:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007740:	7ebb      	ldrb	r3, [r7, #26]
 8007742:	2b20      	cmp	r3, #32
 8007744:	d112      	bne.n	800776c <HAL_I2C_ER_IRQHandler+0xd6>
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10f      	bne.n	800776c <HAL_I2C_ER_IRQHandler+0xd6>
 800774c:	7cfb      	ldrb	r3, [r7, #19]
 800774e:	2b21      	cmp	r3, #33	; 0x21
 8007750:	d008      	beq.n	8007764 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007752:	7cfb      	ldrb	r3, [r7, #19]
 8007754:	2b29      	cmp	r3, #41	; 0x29
 8007756:	d005      	beq.n	8007764 <HAL_I2C_ER_IRQHandler+0xce>
 8007758:	7cfb      	ldrb	r3, [r7, #19]
 800775a:	2b28      	cmp	r3, #40	; 0x28
 800775c:	d106      	bne.n	800776c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2b21      	cmp	r3, #33	; 0x21
 8007762:	d103      	bne.n	800776c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 f81b 	bl	80087a0 <I2C_Slave_AF>
 800776a:	e016      	b.n	800779a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007774:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	f043 0304 	orr.w	r3, r3, #4
 800777c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800777e:	7efb      	ldrb	r3, [r7, #27]
 8007780:	2b10      	cmp	r3, #16
 8007782:	d002      	beq.n	800778a <HAL_I2C_ER_IRQHandler+0xf4>
 8007784:	7efb      	ldrb	r3, [r7, #27]
 8007786:	2b40      	cmp	r3, #64	; 0x40
 8007788:	d107      	bne.n	800779a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007798:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	0adb      	lsrs	r3, r3, #11
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00e      	beq.n	80077c4 <HAL_I2C_ER_IRQHandler+0x12e>
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	0a1b      	lsrs	r3, r3, #8
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d008      	beq.n	80077c4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80077b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b4:	f043 0308 	orr.w	r3, r3, #8
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80077c2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d008      	beq.n	80077dc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d0:	431a      	orrs	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f001 f852 	bl	8008880 <I2C_ITError>
  }
}
 80077dc:	bf00      	nop
 80077de:	3728      	adds	r7, #40	; 0x28
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800786a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007872:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007878:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800787e:	2b00      	cmp	r3, #0
 8007880:	d150      	bne.n	8007924 <I2C_MasterTransmit_TXE+0xc8>
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	2b21      	cmp	r3, #33	; 0x21
 8007886:	d14d      	bne.n	8007924 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2b08      	cmp	r3, #8
 800788c:	d01d      	beq.n	80078ca <I2C_MasterTransmit_TXE+0x6e>
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b20      	cmp	r3, #32
 8007892:	d01a      	beq.n	80078ca <I2C_MasterTransmit_TXE+0x6e>
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800789a:	d016      	beq.n	80078ca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078aa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2211      	movs	r2, #17
 80078b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2220      	movs	r2, #32
 80078be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff ff8e 	bl	80077e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80078c8:	e060      	b.n	800798c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078d8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078e8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2220      	movs	r2, #32
 80078f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b40      	cmp	r3, #64	; 0x40
 8007902:	d107      	bne.n	8007914 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7ff ff87 	bl	8007820 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007912:	e03b      	b.n	800798c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff ff61 	bl	80077e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007922:	e033      	b.n	800798c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	2b21      	cmp	r3, #33	; 0x21
 8007928:	d005      	beq.n	8007936 <I2C_MasterTransmit_TXE+0xda>
 800792a:	7bbb      	ldrb	r3, [r7, #14]
 800792c:	2b40      	cmp	r3, #64	; 0x40
 800792e:	d12d      	bne.n	800798c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007930:	7bfb      	ldrb	r3, [r7, #15]
 8007932:	2b22      	cmp	r3, #34	; 0x22
 8007934:	d12a      	bne.n	800798c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793a:	b29b      	uxth	r3, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	d108      	bne.n	8007952 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800794e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007950:	e01c      	b.n	800798c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b40      	cmp	r3, #64	; 0x40
 800795c:	d103      	bne.n	8007966 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f880 	bl	8007a64 <I2C_MemoryTransmit_TXE_BTF>
}
 8007964:	e012      	b.n	800798c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796a:	781a      	ldrb	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007980:	b29b      	uxth	r3, r3
 8007982:	3b01      	subs	r3, #1
 8007984:	b29a      	uxth	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800798a:	e7ff      	b.n	800798c <I2C_MasterTransmit_TXE+0x130>
 800798c:	bf00      	nop
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b21      	cmp	r3, #33	; 0x21
 80079ac:	d156      	bne.n	8007a5c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d012      	beq.n	80079de <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	781a      	ldrb	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80079dc:	e03e      	b.n	8007a5c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2b08      	cmp	r3, #8
 80079e2:	d01d      	beq.n	8007a20 <I2C_MasterTransmit_BTF+0x8c>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b20      	cmp	r3, #32
 80079e8:	d01a      	beq.n	8007a20 <I2C_MasterTransmit_BTF+0x8c>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079f0:	d016      	beq.n	8007a20 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a00:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2211      	movs	r2, #17
 8007a06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2220      	movs	r2, #32
 8007a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7ff fee3 	bl	80077e4 <HAL_I2C_MasterTxCpltCallback>
}
 8007a1e:	e01d      	b.n	8007a5c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a2e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a3e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7ff fec4 	bl	80077e4 <HAL_I2C_MasterTxCpltCallback>
}
 8007a5c:	bf00      	nop
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d11d      	bne.n	8007ab8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d10b      	bne.n	8007a9c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a94:	1c9a      	adds	r2, r3, #2
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007a9a:	e06e      	b.n	8007b7a <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	121b      	asrs	r3, r3, #8
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab0:	1c5a      	adds	r2, r3, #1
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007ab6:	e060      	b.n	8007b7a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d10b      	bne.n	8007ad8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ac4:	b2da      	uxtb	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007ad6:	e050      	b.n	8007b7a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d14c      	bne.n	8007b7a <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	2b22      	cmp	r3, #34	; 0x22
 8007ae4:	d108      	bne.n	8007af8 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007af4:	601a      	str	r2, [r3, #0]
}
 8007af6:	e040      	b.n	8007b7a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d015      	beq.n	8007b2e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
 8007b04:	2b21      	cmp	r3, #33	; 0x21
 8007b06:	d112      	bne.n	8007b2e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	781a      	ldrb	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b18:	1c5a      	adds	r2, r3, #1
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007b2c:	e025      	b.n	8007b7a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d120      	bne.n	8007b7a <I2C_MemoryTransmit_TXE_BTF+0x116>
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	2b21      	cmp	r3, #33	; 0x21
 8007b3c:	d11d      	bne.n	8007b7a <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b4c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b5c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff fe53 	bl	8007820 <HAL_I2C_MemTxCpltCallback>
}
 8007b7a:	bf00      	nop
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b22      	cmp	r3, #34	; 0x22
 8007b94:	f040 80a2 	bne.w	8007cdc <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d921      	bls.n	8007bea <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	691a      	ldr	r2, [r3, #16]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	b2d2      	uxtb	r2, r2
 8007bb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	f040 8082 	bne.w	8007cdc <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007be6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8007be8:	e078      	b.n	8007cdc <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d074      	beq.n	8007cdc <I2C_MasterReceive_RXNE+0x15a>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d002      	beq.n	8007bfe <I2C_MasterReceive_RXNE+0x7c>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d16e      	bne.n	8007cdc <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f001 fb2a 	bl	8009258 <I2C_WaitOnSTOPRequestThroughIT>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d142      	bne.n	8007c90 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c18:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c28:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	691a      	ldr	r2, [r3, #16]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	b2d2      	uxtb	r2, r2
 8007c36:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	1c5a      	adds	r2, r3, #1
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2220      	movs	r2, #32
 8007c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b40      	cmp	r3, #64	; 0x40
 8007c62:	d10a      	bne.n	8007c7a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff fdde 	bl	8007834 <HAL_I2C_MemRxCpltCallback>
}
 8007c78:	e030      	b.n	8007cdc <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2212      	movs	r2, #18
 8007c86:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7ff fdb5 	bl	80077f8 <HAL_I2C_MasterRxCpltCallback>
}
 8007c8e:	e025      	b.n	8007cdc <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685a      	ldr	r2, [r3, #4]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c9e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	691a      	ldr	r2, [r3, #16]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007caa:	b2d2      	uxtb	r2, r2
 8007cac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7fa fcc8 	bl	800266c <HAL_I2C_ErrorCallback>
}
 8007cdc:	bf00      	nop
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	2b04      	cmp	r3, #4
 8007cfa:	d11b      	bne.n	8007d34 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d0a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	691a      	ldr	r2, [r3, #16]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007d32:	e0bd      	b.n	8007eb0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d129      	bne.n	8007d92 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d4c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	d00a      	beq.n	8007d6a <I2C_MasterReceive_BTF+0x86>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d007      	beq.n	8007d6a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d68:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	691a      	ldr	r2, [r3, #16]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d74:	b2d2      	uxtb	r2, r2
 8007d76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7c:	1c5a      	adds	r2, r3, #1
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007d90:	e08e      	b.n	8007eb0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d176      	bne.n	8007e8a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d002      	beq.n	8007da8 <I2C_MasterReceive_BTF+0xc4>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2b10      	cmp	r3, #16
 8007da6:	d108      	bne.n	8007dba <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	e019      	b.n	8007dee <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d002      	beq.n	8007dc6 <I2C_MasterReceive_BTF+0xe2>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d108      	bne.n	8007dd8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	e00a      	b.n	8007dee <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2b10      	cmp	r3, #16
 8007ddc:	d007      	beq.n	8007dee <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	b2d2      	uxtb	r2, r2
 8007dfa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	1c5a      	adds	r2, r3, #1
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	691a      	ldr	r2, [r3, #16]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	b2d2      	uxtb	r2, r2
 8007e20:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	3b01      	subs	r3, #1
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007e48:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b40      	cmp	r3, #64	; 0x40
 8007e5c:	d10a      	bne.n	8007e74 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7ff fce1 	bl	8007834 <HAL_I2C_MemRxCpltCallback>
}
 8007e72:	e01d      	b.n	8007eb0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2212      	movs	r2, #18
 8007e80:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff fcb8 	bl	80077f8 <HAL_I2C_MasterRxCpltCallback>
}
 8007e88:	e012      	b.n	8007eb0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	691a      	ldr	r2, [r3, #16]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e94:	b2d2      	uxtb	r2, r2
 8007e96:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007eb0:	bf00      	nop
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	2b40      	cmp	r3, #64	; 0x40
 8007eca:	d117      	bne.n	8007efc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d109      	bne.n	8007ee8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	461a      	mov	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ee4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007ee6:	e067      	b.n	8007fb8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	f043 0301 	orr.w	r3, r3, #1
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	611a      	str	r2, [r3, #16]
}
 8007efa:	e05d      	b.n	8007fb8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f04:	d133      	bne.n	8007f6e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b21      	cmp	r3, #33	; 0x21
 8007f10:	d109      	bne.n	8007f26 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	461a      	mov	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f22:	611a      	str	r2, [r3, #16]
 8007f24:	e008      	b.n	8007f38 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	f043 0301 	orr.w	r3, r3, #1
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d004      	beq.n	8007f4a <I2C_Master_SB+0x92>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d108      	bne.n	8007f5c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d032      	beq.n	8007fb8 <I2C_Master_SB+0x100>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d02d      	beq.n	8007fb8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f6a:	605a      	str	r2, [r3, #4]
}
 8007f6c:	e024      	b.n	8007fb8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10e      	bne.n	8007f94 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	11db      	asrs	r3, r3, #7
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	f003 0306 	and.w	r3, r3, #6
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	f063 030f 	orn	r3, r3, #15
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	611a      	str	r2, [r3, #16]
}
 8007f92:	e011      	b.n	8007fb8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d10d      	bne.n	8007fb8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	11db      	asrs	r3, r3, #7
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	f003 0306 	and.w	r3, r3, #6
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f063 030e 	orn	r3, r3, #14
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	611a      	str	r2, [r3, #16]
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d004      	beq.n	8007fea <I2C_Master_ADD10+0x26>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d108      	bne.n	8007ffc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00c      	beq.n	800800c <I2C_Master_ADD10+0x48>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d007      	beq.n	800800c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800800a:	605a      	str	r2, [r3, #4]
  }
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008018:	b480      	push	{r7}
 800801a:	b091      	sub	sp, #68	; 0x44
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008026:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008034:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b22      	cmp	r3, #34	; 0x22
 8008040:	f040 8169 	bne.w	8008316 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10f      	bne.n	800806c <I2C_Master_ADDR+0x54>
 800804c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008050:	2b40      	cmp	r3, #64	; 0x40
 8008052:	d10b      	bne.n	800806c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008054:	2300      	movs	r3, #0
 8008056:	633b      	str	r3, [r7, #48]	; 0x30
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	633b      	str	r3, [r7, #48]	; 0x30
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	633b      	str	r3, [r7, #48]	; 0x30
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	e160      	b.n	800832e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008070:	2b00      	cmp	r3, #0
 8008072:	d11d      	bne.n	80080b0 <I2C_Master_ADDR+0x98>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800807c:	d118      	bne.n	80080b0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800807e:	2300      	movs	r3, #0
 8008080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008092:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080a2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a8:	1c5a      	adds	r2, r3, #1
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	651a      	str	r2, [r3, #80]	; 0x50
 80080ae:	e13e      	b.n	800832e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d113      	bne.n	80080e2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080ba:	2300      	movs	r3, #0
 80080bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80080ce:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080de:	601a      	str	r2, [r3, #0]
 80080e0:	e115      	b.n	800830e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	f040 808a 	bne.w	8008202 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80080ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80080f4:	d137      	bne.n	8008166 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008104:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008114:	d113      	bne.n	800813e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008124:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008126:	2300      	movs	r3, #0
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	627b      	str	r3, [r7, #36]	; 0x24
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	627b      	str	r3, [r7, #36]	; 0x24
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	e0e7      	b.n	800830e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800813e:	2300      	movs	r3, #0
 8008140:	623b      	str	r3, [r7, #32]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	695b      	ldr	r3, [r3, #20]
 8008148:	623b      	str	r3, [r7, #32]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	623b      	str	r3, [r7, #32]
 8008152:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	e0d3      	b.n	800830e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008168:	2b08      	cmp	r3, #8
 800816a:	d02e      	beq.n	80081ca <I2C_Master_ADDR+0x1b2>
 800816c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816e:	2b20      	cmp	r3, #32
 8008170:	d02b      	beq.n	80081ca <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008174:	2b12      	cmp	r3, #18
 8008176:	d102      	bne.n	800817e <I2C_Master_ADDR+0x166>
 8008178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817a:	2b01      	cmp	r3, #1
 800817c:	d125      	bne.n	80081ca <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800817e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008180:	2b04      	cmp	r3, #4
 8008182:	d00e      	beq.n	80081a2 <I2C_Master_ADDR+0x18a>
 8008184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008186:	2b02      	cmp	r3, #2
 8008188:	d00b      	beq.n	80081a2 <I2C_Master_ADDR+0x18a>
 800818a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818c:	2b10      	cmp	r3, #16
 800818e:	d008      	beq.n	80081a2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	e007      	b.n	80081b2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081b2:	2300      	movs	r3, #0
 80081b4:	61fb      	str	r3, [r7, #28]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	61fb      	str	r3, [r7, #28]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	61fb      	str	r3, [r7, #28]
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	e0a1      	b.n	800830e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081d8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081da:	2300      	movs	r3, #0
 80081dc:	61bb      	str	r3, [r7, #24]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	61bb      	str	r3, [r7, #24]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	61bb      	str	r3, [r7, #24]
 80081ee:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	e085      	b.n	800830e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008206:	b29b      	uxth	r3, r3
 8008208:	2b02      	cmp	r3, #2
 800820a:	d14d      	bne.n	80082a8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820e:	2b04      	cmp	r3, #4
 8008210:	d016      	beq.n	8008240 <I2C_Master_ADDR+0x228>
 8008212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008214:	2b02      	cmp	r3, #2
 8008216:	d013      	beq.n	8008240 <I2C_Master_ADDR+0x228>
 8008218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821a:	2b10      	cmp	r3, #16
 800821c:	d010      	beq.n	8008240 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800822c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	e007      	b.n	8008250 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800824e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800825a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800825e:	d117      	bne.n	8008290 <I2C_Master_ADDR+0x278>
 8008260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008262:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008266:	d00b      	beq.n	8008280 <I2C_Master_ADDR+0x268>
 8008268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826a:	2b01      	cmp	r3, #1
 800826c:	d008      	beq.n	8008280 <I2C_Master_ADDR+0x268>
 800826e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008270:	2b08      	cmp	r3, #8
 8008272:	d005      	beq.n	8008280 <I2C_Master_ADDR+0x268>
 8008274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008276:	2b10      	cmp	r3, #16
 8008278:	d002      	beq.n	8008280 <I2C_Master_ADDR+0x268>
 800827a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827c:	2b20      	cmp	r3, #32
 800827e:	d107      	bne.n	8008290 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800828e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008290:	2300      	movs	r3, #0
 8008292:	617b      	str	r3, [r7, #20]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	617b      	str	r3, [r7, #20]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	617b      	str	r3, [r7, #20]
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	e032      	b.n	800830e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80082b6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082c6:	d117      	bne.n	80082f8 <I2C_Master_ADDR+0x2e0>
 80082c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082ce:	d00b      	beq.n	80082e8 <I2C_Master_ADDR+0x2d0>
 80082d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d008      	beq.n	80082e8 <I2C_Master_ADDR+0x2d0>
 80082d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d8:	2b08      	cmp	r3, #8
 80082da:	d005      	beq.n	80082e8 <I2C_Master_ADDR+0x2d0>
 80082dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082de:	2b10      	cmp	r3, #16
 80082e0:	d002      	beq.n	80082e8 <I2C_Master_ADDR+0x2d0>
 80082e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e4:	2b20      	cmp	r3, #32
 80082e6:	d107      	bne.n	80082f8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	685a      	ldr	r2, [r3, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80082f6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082f8:	2300      	movs	r3, #0
 80082fa:	613b      	str	r3, [r7, #16]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	613b      	str	r3, [r7, #16]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	613b      	str	r3, [r7, #16]
 800830c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008314:	e00b      	b.n	800832e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008316:	2300      	movs	r3, #0
 8008318:	60fb      	str	r3, [r7, #12]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	60fb      	str	r3, [r7, #12]
 800832a:	68fb      	ldr	r3, [r7, #12]
}
 800832c:	e7ff      	b.n	800832e <I2C_Master_ADDR+0x316>
 800832e:	bf00      	nop
 8008330:	3744      	adds	r7, #68	; 0x44
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008348:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800834e:	b29b      	uxth	r3, r3
 8008350:	2b00      	cmp	r3, #0
 8008352:	d02b      	beq.n	80083ac <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	781a      	ldrb	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008364:	1c5a      	adds	r2, r3, #1
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800836e:	b29b      	uxth	r3, r3
 8008370:	3b01      	subs	r3, #1
 8008372:	b29a      	uxth	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800837c:	b29b      	uxth	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d114      	bne.n	80083ac <I2C_SlaveTransmit_TXE+0x72>
 8008382:	7bfb      	ldrb	r3, [r7, #15]
 8008384:	2b29      	cmp	r3, #41	; 0x29
 8008386:	d111      	bne.n	80083ac <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008396:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2221      	movs	r2, #33	; 0x21
 800839c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2228      	movs	r2, #40	; 0x28
 80083a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7ff fa30 	bl	800780c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80083ac:	bf00      	nop
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d011      	beq.n	80083ea <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	781a      	ldrb	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d6:	1c5a      	adds	r2, r3, #1
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	3b01      	subs	r3, #1
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b084      	sub	sp, #16
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008404:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800840a:	b29b      	uxth	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d02c      	beq.n	800846a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	691a      	ldr	r2, [r3, #16]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	b2d2      	uxtb	r2, r2
 800841c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	1c5a      	adds	r2, r3, #1
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800842c:	b29b      	uxth	r3, r3
 800842e:	3b01      	subs	r3, #1
 8008430:	b29a      	uxth	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800843a:	b29b      	uxth	r3, r3
 800843c:	2b00      	cmp	r3, #0
 800843e:	d114      	bne.n	800846a <I2C_SlaveReceive_RXNE+0x74>
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	2b2a      	cmp	r3, #42	; 0x2a
 8008444:	d111      	bne.n	800846a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008454:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2222      	movs	r2, #34	; 0x22
 800845a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2228      	movs	r2, #40	; 0x28
 8008460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7fa f8eb 	bl	8002640 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800846a:	bf00      	nop
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008472:	b480      	push	{r7}
 8008474:	b083      	sub	sp, #12
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800847e:	b29b      	uxth	r3, r3
 8008480:	2b00      	cmp	r3, #0
 8008482:	d012      	beq.n	80084aa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	691a      	ldr	r2, [r3, #16]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	b2d2      	uxtb	r2, r2
 8008490:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	3b01      	subs	r3, #1
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80084aa:	bf00      	nop
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80084c0:	2300      	movs	r3, #0
 80084c2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80084d0:	2b28      	cmp	r3, #40	; 0x28
 80084d2:	d127      	bne.n	8008524 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084e2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	089b      	lsrs	r3, r3, #2
 80084e8:	f003 0301 	and.w	r3, r3, #1
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80084f0:	2301      	movs	r3, #1
 80084f2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	09db      	lsrs	r3, r3, #7
 80084f8:	f003 0301 	and.w	r3, r3, #1
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d103      	bne.n	8008508 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	81bb      	strh	r3, [r7, #12]
 8008506:	e002      	b.n	800850e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008516:	89ba      	ldrh	r2, [r7, #12]
 8008518:	7bfb      	ldrb	r3, [r7, #15]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7fa f855 	bl	80025cc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008522:	e008      	b.n	8008536 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f06f 0202 	mvn.w	r2, #2
 800852c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008536:	bf00      	nop
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
	...

08008540 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800854e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800855e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008560:	2300      	movs	r3, #0
 8008562:	60bb      	str	r3, [r7, #8]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	60bb      	str	r3, [r7, #8]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f042 0201 	orr.w	r2, r2, #1
 800857a:	601a      	str	r2, [r3, #0]
 800857c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800858c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800859c:	d172      	bne.n	8008684 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	2b22      	cmp	r3, #34	; 0x22
 80085a2:	d002      	beq.n	80085aa <I2C_Slave_STOPF+0x6a>
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	2b2a      	cmp	r3, #42	; 0x2a
 80085a8:	d135      	bne.n	8008616 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085bc:	b29b      	uxth	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d005      	beq.n	80085ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c6:	f043 0204 	orr.w	r2, r3, #4
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fd fbd4 	bl	8005d90 <HAL_DMA_GetState>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d049      	beq.n	8008682 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f2:	4a69      	ldr	r2, [pc, #420]	; (8008798 <I2C_Slave_STOPF+0x258>)
 80085f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fd fa1c 	bl	8005a38 <HAL_DMA_Abort_IT>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d03d      	beq.n	8008682 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008610:	4610      	mov	r0, r2
 8008612:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008614:	e035      	b.n	8008682 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	b29a      	uxth	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008628:	b29b      	uxth	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	d005      	beq.n	800863a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008632:	f043 0204 	orr.w	r2, r3, #4
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008648:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800864e:	4618      	mov	r0, r3
 8008650:	f7fd fb9e 	bl	8005d90 <HAL_DMA_GetState>
 8008654:	4603      	mov	r3, r0
 8008656:	2b01      	cmp	r3, #1
 8008658:	d014      	beq.n	8008684 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865e:	4a4e      	ldr	r2, [pc, #312]	; (8008798 <I2C_Slave_STOPF+0x258>)
 8008660:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008666:	4618      	mov	r0, r3
 8008668:	f7fd f9e6 	bl	8005a38 <HAL_DMA_Abort_IT>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d008      	beq.n	8008684 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800867c:	4610      	mov	r0, r2
 800867e:	4798      	blx	r3
 8008680:	e000      	b.n	8008684 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008682:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008688:	b29b      	uxth	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d03e      	beq.n	800870c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	f003 0304 	and.w	r3, r3, #4
 8008698:	2b04      	cmp	r3, #4
 800869a:	d112      	bne.n	80086c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	691a      	ldr	r2, [r3, #16]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	b2d2      	uxtb	r2, r2
 80086a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	3b01      	subs	r3, #1
 80086bc:	b29a      	uxth	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086cc:	2b40      	cmp	r3, #64	; 0x40
 80086ce:	d112      	bne.n	80086f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	691a      	ldr	r2, [r3, #16]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086da:	b2d2      	uxtb	r2, r2
 80086dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	3b01      	subs	r3, #1
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d005      	beq.n	800870c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008704:	f043 0204 	orr.w	r2, r3, #4
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008710:	2b00      	cmp	r3, #0
 8008712:	d003      	beq.n	800871c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f8b3 	bl	8008880 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800871a:	e039      	b.n	8008790 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800871c:	7bfb      	ldrb	r3, [r7, #15]
 800871e:	2b2a      	cmp	r3, #42	; 0x2a
 8008720:	d109      	bne.n	8008736 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2228      	movs	r2, #40	; 0x28
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7f9 ff85 	bl	8002640 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b28      	cmp	r3, #40	; 0x28
 8008740:	d111      	bne.n	8008766 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a15      	ldr	r2, [pc, #84]	; (800879c <I2C_Slave_STOPF+0x25c>)
 8008746:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2220      	movs	r2, #32
 8008752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7f9 ff60 	bl	8002624 <HAL_I2C_ListenCpltCallback>
}
 8008764:	e014      	b.n	8008790 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876a:	2b22      	cmp	r3, #34	; 0x22
 800876c:	d002      	beq.n	8008774 <I2C_Slave_STOPF+0x234>
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	2b22      	cmp	r3, #34	; 0x22
 8008772:	d10d      	bne.n	8008790 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2220      	movs	r2, #32
 800877e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7f9 ff58 	bl	8002640 <HAL_I2C_SlaveRxCpltCallback>
}
 8008790:	bf00      	nop
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	08008ed9 	.word	0x08008ed9
 800879c:	ffff0000 	.word	0xffff0000

080087a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	d002      	beq.n	80087c2 <I2C_Slave_AF+0x22>
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2b20      	cmp	r3, #32
 80087c0:	d129      	bne.n	8008816 <I2C_Slave_AF+0x76>
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	2b28      	cmp	r3, #40	; 0x28
 80087c6:	d126      	bne.n	8008816 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a2c      	ldr	r2, [pc, #176]	; (800887c <I2C_Slave_AF+0xdc>)
 80087cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80087dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80087e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2220      	movs	r2, #32
 8008802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7f9 ff08 	bl	8002624 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008814:	e02e      	b.n	8008874 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008816:	7bfb      	ldrb	r3, [r7, #15]
 8008818:	2b21      	cmp	r3, #33	; 0x21
 800881a:	d126      	bne.n	800886a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a17      	ldr	r2, [pc, #92]	; (800887c <I2C_Slave_AF+0xdc>)
 8008820:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2221      	movs	r2, #33	; 0x21
 8008826:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2220      	movs	r2, #32
 800882c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008846:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008850:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008860:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7fe ffd2 	bl	800780c <HAL_I2C_SlaveTxCpltCallback>
}
 8008868:	e004      	b.n	8008874 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008872:	615a      	str	r2, [r3, #20]
}
 8008874:	bf00      	nop
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	ffff0000 	.word	0xffff0000

08008880 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800888e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008896:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008898:	7bbb      	ldrb	r3, [r7, #14]
 800889a:	2b10      	cmp	r3, #16
 800889c:	d002      	beq.n	80088a4 <I2C_ITError+0x24>
 800889e:	7bbb      	ldrb	r3, [r7, #14]
 80088a0:	2b40      	cmp	r3, #64	; 0x40
 80088a2:	d10a      	bne.n	80088ba <I2C_ITError+0x3a>
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	2b22      	cmp	r3, #34	; 0x22
 80088a8:	d107      	bne.n	80088ba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088b8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
 80088bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80088c0:	2b28      	cmp	r3, #40	; 0x28
 80088c2:	d107      	bne.n	80088d4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2228      	movs	r2, #40	; 0x28
 80088ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80088d2:	e015      	b.n	8008900 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088e2:	d00a      	beq.n	80088fa <I2C_ITError+0x7a>
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
 80088e6:	2b60      	cmp	r3, #96	; 0x60
 80088e8:	d007      	beq.n	80088fa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2220      	movs	r2, #32
 80088ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800890a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800890e:	d162      	bne.n	80089d6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800891e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008924:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b01      	cmp	r3, #1
 800892c:	d020      	beq.n	8008970 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008932:	4a6a      	ldr	r2, [pc, #424]	; (8008adc <I2C_ITError+0x25c>)
 8008934:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800893a:	4618      	mov	r0, r3
 800893c:	f7fd f87c 	bl	8005a38 <HAL_DMA_Abort_IT>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 8089 	beq.w	8008a5a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f022 0201 	bic.w	r2, r2, #1
 8008956:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2220      	movs	r2, #32
 800895c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800896a:	4610      	mov	r0, r2
 800896c:	4798      	blx	r3
 800896e:	e074      	b.n	8008a5a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008974:	4a59      	ldr	r2, [pc, #356]	; (8008adc <I2C_ITError+0x25c>)
 8008976:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897c:	4618      	mov	r0, r3
 800897e:	f7fd f85b 	bl	8005a38 <HAL_DMA_Abort_IT>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d068      	beq.n	8008a5a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008992:	2b40      	cmp	r3, #64	; 0x40
 8008994:	d10b      	bne.n	80089ae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	691a      	ldr	r2, [r3, #16]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a0:	b2d2      	uxtb	r2, r2
 80089a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a8:	1c5a      	adds	r2, r3, #1
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f022 0201 	bic.w	r2, r2, #1
 80089bc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2220      	movs	r2, #32
 80089c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80089d0:	4610      	mov	r0, r2
 80089d2:	4798      	blx	r3
 80089d4:	e041      	b.n	8008a5a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b60      	cmp	r3, #96	; 0x60
 80089e0:	d125      	bne.n	8008a2e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2220      	movs	r2, #32
 80089e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fa:	2b40      	cmp	r3, #64	; 0x40
 80089fc:	d10b      	bne.n	8008a16 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	691a      	ldr	r2, [r3, #16]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	b2d2      	uxtb	r2, r2
 8008a0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	1c5a      	adds	r2, r3, #1
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f022 0201 	bic.w	r2, r2, #1
 8008a24:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7fe ff0e 	bl	8007848 <HAL_I2C_AbortCpltCallback>
 8008a2c:	e015      	b.n	8008a5a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a38:	2b40      	cmp	r3, #64	; 0x40
 8008a3a:	d10b      	bne.n	8008a54 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	691a      	ldr	r2, [r3, #16]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a46:	b2d2      	uxtb	r2, r2
 8008a48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4e:	1c5a      	adds	r2, r3, #1
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7f9 fe09 	bl	800266c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	f003 0301 	and.w	r3, r3, #1
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10e      	bne.n	8008a88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d109      	bne.n	8008a88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d104      	bne.n	8008a88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d007      	beq.n	8008a98 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a96:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a9e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa4:	f003 0304 	and.w	r3, r3, #4
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d113      	bne.n	8008ad4 <I2C_ITError+0x254>
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
 8008aae:	2b28      	cmp	r3, #40	; 0x28
 8008ab0:	d110      	bne.n	8008ad4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a0a      	ldr	r2, [pc, #40]	; (8008ae0 <I2C_ITError+0x260>)
 8008ab6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7f9 fda8 	bl	8002624 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008ad4:	bf00      	nop
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	08008ed9 	.word	0x08008ed9
 8008ae0:	ffff0000 	.word	0xffff0000

08008ae4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b088      	sub	sp, #32
 8008ae8:	af02      	add	r7, sp, #8
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	4608      	mov	r0, r1
 8008aee:	4611      	mov	r1, r2
 8008af0:	461a      	mov	r2, r3
 8008af2:	4603      	mov	r3, r0
 8008af4:	817b      	strh	r3, [r7, #10]
 8008af6:	460b      	mov	r3, r1
 8008af8:	813b      	strh	r3, [r7, #8]
 8008afa:	4613      	mov	r3, r2
 8008afc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 fa7c 	bl	8009028 <I2C_WaitOnFlagUntilTimeout>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00d      	beq.n	8008b52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b44:	d103      	bne.n	8008b4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e0aa      	b.n	8008ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b52:	897b      	ldrh	r3, [r7, #10]
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	461a      	mov	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b64:	6a3a      	ldr	r2, [r7, #32]
 8008b66:	4952      	ldr	r1, [pc, #328]	; (8008cb0 <I2C_RequestMemoryRead+0x1cc>)
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 fab4 	bl	80090d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d001      	beq.n	8008b78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e097      	b.n	8008ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b78:	2300      	movs	r3, #0
 8008b7a:	617b      	str	r3, [r7, #20]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	617b      	str	r3, [r7, #20]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	617b      	str	r3, [r7, #20]
 8008b8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b90:	6a39      	ldr	r1, [r7, #32]
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 fb1e 	bl	80091d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00d      	beq.n	8008bba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba2:	2b04      	cmp	r3, #4
 8008ba4:	d107      	bne.n	8008bb6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e076      	b.n	8008ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008bba:	88fb      	ldrh	r3, [r7, #6]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d105      	bne.n	8008bcc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008bc0:	893b      	ldrh	r3, [r7, #8]
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	611a      	str	r2, [r3, #16]
 8008bca:	e021      	b.n	8008c10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008bcc:	893b      	ldrh	r3, [r7, #8]
 8008bce:	0a1b      	lsrs	r3, r3, #8
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bdc:	6a39      	ldr	r1, [r7, #32]
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 faf8 	bl	80091d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00d      	beq.n	8008c06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bee:	2b04      	cmp	r3, #4
 8008bf0:	d107      	bne.n	8008c02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e050      	b.n	8008ca8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c06:	893b      	ldrh	r3, [r7, #8]
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c12:	6a39      	ldr	r1, [r7, #32]
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f000 fadd 	bl	80091d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00d      	beq.n	8008c3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c24:	2b04      	cmp	r3, #4
 8008c26:	d107      	bne.n	8008c38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e035      	b.n	8008ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f000 f9e5 	bl	8009028 <I2C_WaitOnFlagUntilTimeout>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00d      	beq.n	8008c80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c72:	d103      	bne.n	8008c7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	e013      	b.n	8008ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008c80:	897b      	ldrh	r3, [r7, #10]
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	f043 0301 	orr.w	r3, r3, #1
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	6a3a      	ldr	r2, [r7, #32]
 8008c94:	4906      	ldr	r1, [pc, #24]	; (8008cb0 <I2C_RequestMemoryRead+0x1cc>)
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f000 fa1d 	bl	80090d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e000      	b.n	8008ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3718      	adds	r7, #24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	00010002 	.word	0x00010002

08008cb4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cc8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cd0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008ce6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d003      	beq.n	8008cf8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d003      	beq.n	8008d08 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d04:	2200      	movs	r2, #0
 8008d06:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8008d08:	7cfb      	ldrb	r3, [r7, #19]
 8008d0a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008d0e:	2b21      	cmp	r3, #33	; 0x21
 8008d10:	d007      	beq.n	8008d22 <I2C_DMAXferCplt+0x6e>
 8008d12:	7cfb      	ldrb	r3, [r7, #19]
 8008d14:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8008d18:	2b22      	cmp	r3, #34	; 0x22
 8008d1a:	d131      	bne.n	8008d80 <I2C_DMAXferCplt+0xcc>
 8008d1c:	7cbb      	ldrb	r3, [r7, #18]
 8008d1e:	2b20      	cmp	r3, #32
 8008d20:	d12e      	bne.n	8008d80 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d30:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	2200      	movs	r2, #0
 8008d36:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008d38:	7cfb      	ldrb	r3, [r7, #19]
 8008d3a:	2b29      	cmp	r3, #41	; 0x29
 8008d3c:	d10a      	bne.n	8008d54 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2221      	movs	r2, #33	; 0x21
 8008d42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	2228      	movs	r2, #40	; 0x28
 8008d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008d4c:	6978      	ldr	r0, [r7, #20]
 8008d4e:	f7fe fd5d 	bl	800780c <HAL_I2C_SlaveTxCpltCallback>
 8008d52:	e00c      	b.n	8008d6e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008d54:	7cfb      	ldrb	r3, [r7, #19]
 8008d56:	2b2a      	cmp	r3, #42	; 0x2a
 8008d58:	d109      	bne.n	8008d6e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2222      	movs	r2, #34	; 0x22
 8008d5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	2228      	movs	r2, #40	; 0x28
 8008d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008d68:	6978      	ldr	r0, [r7, #20]
 8008d6a:	f7f9 fc69 	bl	8002640 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008d7c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008d7e:	e06a      	b.n	8008e56 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d064      	beq.n	8008e56 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d107      	bne.n	8008da6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008da4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008db4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008dbc:	d009      	beq.n	8008dd2 <I2C_DMAXferCplt+0x11e>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2b08      	cmp	r3, #8
 8008dc2:	d006      	beq.n	8008dd2 <I2C_DMAXferCplt+0x11e>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008dca:	d002      	beq.n	8008dd2 <I2C_DMAXferCplt+0x11e>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2b20      	cmp	r3, #32
 8008dd0:	d107      	bne.n	8008de2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008de0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008df0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	685a      	ldr	r2, [r3, #4]
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e00:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	2200      	movs	r2, #0
 8008e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8008e10:	6978      	ldr	r0, [r7, #20]
 8008e12:	f7f9 fc2b 	bl	800266c <HAL_I2C_ErrorCallback>
}
 8008e16:	e01e      	b.n	8008e56 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	2b40      	cmp	r3, #64	; 0x40
 8008e2a:	d10a      	bne.n	8008e42 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	2200      	movs	r2, #0
 8008e38:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8008e3a:	6978      	ldr	r0, [r7, #20]
 8008e3c:	f7fe fcfa 	bl	8007834 <HAL_I2C_MemRxCpltCallback>
}
 8008e40:	e009      	b.n	8008e56 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2212      	movs	r2, #18
 8008e4e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8008e50:	6978      	ldr	r0, [r7, #20]
 8008e52:	f7fe fcd1 	bl	80077f8 <HAL_I2C_MasterRxCpltCallback>
}
 8008e56:	bf00      	nop
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b084      	sub	sp, #16
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d003      	beq.n	8008e7c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e78:	2200      	movs	r2, #0
 8008e7a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d003      	beq.n	8008e8c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e88:	2200      	movs	r2, #0
 8008e8a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7fc ff8d 	bl	8005dac <HAL_DMA_GetError>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d01b      	beq.n	8008ed0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ea6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2220      	movs	r2, #32
 8008eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec2:	f043 0210 	orr.w	r2, r3, #16
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f7f9 fbce 	bl	800266c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008ed0:	bf00      	nop
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008ef2:	4b4b      	ldr	r3, [pc, #300]	; (8009020 <I2C_DMAAbort+0x148>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	08db      	lsrs	r3, r3, #3
 8008ef8:	4a4a      	ldr	r2, [pc, #296]	; (8009024 <I2C_DMAAbort+0x14c>)
 8008efa:	fba2 2303 	umull	r2, r3, r2, r3
 8008efe:	0a1a      	lsrs	r2, r3, #8
 8008f00:	4613      	mov	r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	00da      	lsls	r2, r3, #3
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d106      	bne.n	8008f20 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f16:	f043 0220 	orr.w	r2, r3, #32
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008f1e:	e00a      	b.n	8008f36 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f34:	d0ea      	beq.n	8008f0c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d003      	beq.n	8008f46 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f42:	2200      	movs	r2, #0
 8008f44:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d003      	beq.n	8008f56 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f52:	2200      	movs	r2, #0
 8008f54:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f64:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d003      	beq.n	8008f7c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f78:	2200      	movs	r2, #0
 8008f7a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f88:	2200      	movs	r2, #0
 8008f8a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f022 0201 	bic.w	r2, r2, #1
 8008f9a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	2b60      	cmp	r3, #96	; 0x60
 8008fa6:	d10e      	bne.n	8008fc6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	2220      	movs	r2, #32
 8008fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008fbe:	6978      	ldr	r0, [r7, #20]
 8008fc0:	f7fe fc42 	bl	8007848 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008fc4:	e027      	b.n	8009016 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008fc6:	7cfb      	ldrb	r3, [r7, #19]
 8008fc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008fcc:	2b28      	cmp	r3, #40	; 0x28
 8008fce:	d117      	bne.n	8009000 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f042 0201 	orr.w	r2, r2, #1
 8008fde:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008fee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2228      	movs	r2, #40	; 0x28
 8008ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008ffe:	e007      	b.n	8009010 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	2220      	movs	r2, #32
 8009004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009010:	6978      	ldr	r0, [r7, #20]
 8009012:	f7f9 fb2b 	bl	800266c <HAL_I2C_ErrorCallback>
}
 8009016:	bf00      	nop
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	20000008 	.word	0x20000008
 8009024:	14f8b589 	.word	0x14f8b589

08009028 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	603b      	str	r3, [r7, #0]
 8009034:	4613      	mov	r3, r2
 8009036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009038:	e025      	b.n	8009086 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009040:	d021      	beq.n	8009086 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009042:	f7fb fdd5 	bl	8004bf0 <HAL_GetTick>
 8009046:	4602      	mov	r2, r0
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	429a      	cmp	r2, r3
 8009050:	d302      	bcc.n	8009058 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d116      	bne.n	8009086 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2220      	movs	r2, #32
 8009062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009072:	f043 0220 	orr.w	r2, r3, #32
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e023      	b.n	80090ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	0c1b      	lsrs	r3, r3, #16
 800908a:	b2db      	uxtb	r3, r3
 800908c:	2b01      	cmp	r3, #1
 800908e:	d10d      	bne.n	80090ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	43da      	mvns	r2, r3
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	4013      	ands	r3, r2
 800909c:	b29b      	uxth	r3, r3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	bf0c      	ite	eq
 80090a2:	2301      	moveq	r3, #1
 80090a4:	2300      	movne	r3, #0
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	461a      	mov	r2, r3
 80090aa:	e00c      	b.n	80090c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	43da      	mvns	r2, r3
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	4013      	ands	r3, r2
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	bf0c      	ite	eq
 80090be:	2301      	moveq	r3, #1
 80090c0:	2300      	movne	r3, #0
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	461a      	mov	r2, r3
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d0b6      	beq.n	800903a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b084      	sub	sp, #16
 80090da:	af00      	add	r7, sp, #0
 80090dc:	60f8      	str	r0, [r7, #12]
 80090de:	60b9      	str	r1, [r7, #8]
 80090e0:	607a      	str	r2, [r7, #4]
 80090e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80090e4:	e051      	b.n	800918a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	695b      	ldr	r3, [r3, #20]
 80090ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090f4:	d123      	bne.n	800913e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009104:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800910e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2220      	movs	r2, #32
 800911a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912a:	f043 0204 	orr.w	r2, r3, #4
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e046      	b.n	80091cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009144:	d021      	beq.n	800918a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009146:	f7fb fd53 	bl	8004bf0 <HAL_GetTick>
 800914a:	4602      	mov	r2, r0
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	429a      	cmp	r2, r3
 8009154:	d302      	bcc.n	800915c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d116      	bne.n	800918a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2220      	movs	r2, #32
 8009166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009176:	f043 0220 	orr.w	r2, r3, #32
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e020      	b.n	80091cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	0c1b      	lsrs	r3, r3, #16
 800918e:	b2db      	uxtb	r3, r3
 8009190:	2b01      	cmp	r3, #1
 8009192:	d10c      	bne.n	80091ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	43da      	mvns	r2, r3
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	4013      	ands	r3, r2
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bf14      	ite	ne
 80091a6:	2301      	movne	r3, #1
 80091a8:	2300      	moveq	r3, #0
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	e00b      	b.n	80091c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	43da      	mvns	r2, r3
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	4013      	ands	r3, r2
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	2b00      	cmp	r3, #0
 80091be:	bf14      	ite	ne
 80091c0:	2301      	movne	r3, #1
 80091c2:	2300      	moveq	r3, #0
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d18d      	bne.n	80090e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80091e0:	e02d      	b.n	800923e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f000 f86a 	bl	80092bc <I2C_IsAcknowledgeFailed>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e02d      	b.n	800924e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091f8:	d021      	beq.n	800923e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091fa:	f7fb fcf9 	bl	8004bf0 <HAL_GetTick>
 80091fe:	4602      	mov	r2, r0
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	429a      	cmp	r2, r3
 8009208:	d302      	bcc.n	8009210 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d116      	bne.n	800923e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2220      	movs	r2, #32
 800921a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922a:	f043 0220 	orr.w	r2, r3, #32
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e007      	b.n	800924e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	695b      	ldr	r3, [r3, #20]
 8009244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009248:	2b80      	cmp	r3, #128	; 0x80
 800924a:	d1ca      	bne.n	80091e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
	...

08009258 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009260:	2300      	movs	r3, #0
 8009262:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009264:	4b13      	ldr	r3, [pc, #76]	; (80092b4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	08db      	lsrs	r3, r3, #3
 800926a:	4a13      	ldr	r2, [pc, #76]	; (80092b8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800926c:	fba2 2303 	umull	r2, r3, r2, r3
 8009270:	0a1a      	lsrs	r2, r3, #8
 8009272:	4613      	mov	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4413      	add	r3, r2
 8009278:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3b01      	subs	r3, #1
 800927e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d107      	bne.n	8009296 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928a:	f043 0220 	orr.w	r2, r3, #32
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e008      	b.n	80092a8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092a4:	d0e9      	beq.n	800927a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3714      	adds	r7, #20
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	20000008 	.word	0x20000008
 80092b8:	14f8b589 	.word	0x14f8b589

080092bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092d2:	d11b      	bne.n	800930c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80092dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2220      	movs	r2, #32
 80092e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f8:	f043 0204 	orr.w	r2, r3, #4
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	e000      	b.n	800930e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009326:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800932a:	d103      	bne.n	8009334 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009332:	e007      	b.n	8009344 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009338:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800933c:	d102      	bne.n	8009344 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2208      	movs	r2, #8
 8009342:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e264      	b.n	800982c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0301 	and.w	r3, r3, #1
 800936a:	2b00      	cmp	r3, #0
 800936c:	d075      	beq.n	800945a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800936e:	4ba3      	ldr	r3, [pc, #652]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	f003 030c 	and.w	r3, r3, #12
 8009376:	2b04      	cmp	r3, #4
 8009378:	d00c      	beq.n	8009394 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800937a:	4ba0      	ldr	r3, [pc, #640]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009382:	2b08      	cmp	r3, #8
 8009384:	d112      	bne.n	80093ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009386:	4b9d      	ldr	r3, [pc, #628]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800938e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009392:	d10b      	bne.n	80093ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009394:	4b99      	ldr	r3, [pc, #612]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d05b      	beq.n	8009458 <HAL_RCC_OscConfig+0x108>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d157      	bne.n	8009458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e23f      	b.n	800982c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093b4:	d106      	bne.n	80093c4 <HAL_RCC_OscConfig+0x74>
 80093b6:	4b91      	ldr	r3, [pc, #580]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a90      	ldr	r2, [pc, #576]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80093bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093c0:	6013      	str	r3, [r2, #0]
 80093c2:	e01d      	b.n	8009400 <HAL_RCC_OscConfig+0xb0>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093cc:	d10c      	bne.n	80093e8 <HAL_RCC_OscConfig+0x98>
 80093ce:	4b8b      	ldr	r3, [pc, #556]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a8a      	ldr	r2, [pc, #552]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80093d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093d8:	6013      	str	r3, [r2, #0]
 80093da:	4b88      	ldr	r3, [pc, #544]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a87      	ldr	r2, [pc, #540]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80093e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093e4:	6013      	str	r3, [r2, #0]
 80093e6:	e00b      	b.n	8009400 <HAL_RCC_OscConfig+0xb0>
 80093e8:	4b84      	ldr	r3, [pc, #528]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a83      	ldr	r2, [pc, #524]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80093ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093f2:	6013      	str	r3, [r2, #0]
 80093f4:	4b81      	ldr	r3, [pc, #516]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a80      	ldr	r2, [pc, #512]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80093fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d013      	beq.n	8009430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009408:	f7fb fbf2 	bl	8004bf0 <HAL_GetTick>
 800940c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800940e:	e008      	b.n	8009422 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009410:	f7fb fbee 	bl	8004bf0 <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	2b64      	cmp	r3, #100	; 0x64
 800941c:	d901      	bls.n	8009422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800941e:	2303      	movs	r3, #3
 8009420:	e204      	b.n	800982c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009422:	4b76      	ldr	r3, [pc, #472]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d0f0      	beq.n	8009410 <HAL_RCC_OscConfig+0xc0>
 800942e:	e014      	b.n	800945a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009430:	f7fb fbde 	bl	8004bf0 <HAL_GetTick>
 8009434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009436:	e008      	b.n	800944a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009438:	f7fb fbda 	bl	8004bf0 <HAL_GetTick>
 800943c:	4602      	mov	r2, r0
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	2b64      	cmp	r3, #100	; 0x64
 8009444:	d901      	bls.n	800944a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e1f0      	b.n	800982c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800944a:	4b6c      	ldr	r3, [pc, #432]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1f0      	bne.n	8009438 <HAL_RCC_OscConfig+0xe8>
 8009456:	e000      	b.n	800945a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b00      	cmp	r3, #0
 8009464:	d063      	beq.n	800952e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009466:	4b65      	ldr	r3, [pc, #404]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f003 030c 	and.w	r3, r3, #12
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00b      	beq.n	800948a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009472:	4b62      	ldr	r3, [pc, #392]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800947a:	2b08      	cmp	r3, #8
 800947c:	d11c      	bne.n	80094b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800947e:	4b5f      	ldr	r3, [pc, #380]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d116      	bne.n	80094b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800948a:	4b5c      	ldr	r3, [pc, #368]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d005      	beq.n	80094a2 <HAL_RCC_OscConfig+0x152>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d001      	beq.n	80094a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e1c4      	b.n	800982c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094a2:	4b56      	ldr	r3, [pc, #344]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	00db      	lsls	r3, r3, #3
 80094b0:	4952      	ldr	r1, [pc, #328]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80094b2:	4313      	orrs	r3, r2
 80094b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80094b6:	e03a      	b.n	800952e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d020      	beq.n	8009502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80094c0:	4b4f      	ldr	r3, [pc, #316]	; (8009600 <HAL_RCC_OscConfig+0x2b0>)
 80094c2:	2201      	movs	r2, #1
 80094c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094c6:	f7fb fb93 	bl	8004bf0 <HAL_GetTick>
 80094ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094cc:	e008      	b.n	80094e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094ce:	f7fb fb8f 	bl	8004bf0 <HAL_GetTick>
 80094d2:	4602      	mov	r2, r0
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d901      	bls.n	80094e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80094dc:	2303      	movs	r3, #3
 80094de:	e1a5      	b.n	800982c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094e0:	4b46      	ldr	r3, [pc, #280]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0302 	and.w	r3, r3, #2
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d0f0      	beq.n	80094ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094ec:	4b43      	ldr	r3, [pc, #268]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	00db      	lsls	r3, r3, #3
 80094fa:	4940      	ldr	r1, [pc, #256]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80094fc:	4313      	orrs	r3, r2
 80094fe:	600b      	str	r3, [r1, #0]
 8009500:	e015      	b.n	800952e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009502:	4b3f      	ldr	r3, [pc, #252]	; (8009600 <HAL_RCC_OscConfig+0x2b0>)
 8009504:	2200      	movs	r2, #0
 8009506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009508:	f7fb fb72 	bl	8004bf0 <HAL_GetTick>
 800950c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800950e:	e008      	b.n	8009522 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009510:	f7fb fb6e 	bl	8004bf0 <HAL_GetTick>
 8009514:	4602      	mov	r2, r0
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	2b02      	cmp	r3, #2
 800951c:	d901      	bls.n	8009522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800951e:	2303      	movs	r3, #3
 8009520:	e184      	b.n	800982c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009522:	4b36      	ldr	r3, [pc, #216]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1f0      	bne.n	8009510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 0308 	and.w	r3, r3, #8
 8009536:	2b00      	cmp	r3, #0
 8009538:	d030      	beq.n	800959c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d016      	beq.n	8009570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009542:	4b30      	ldr	r3, [pc, #192]	; (8009604 <HAL_RCC_OscConfig+0x2b4>)
 8009544:	2201      	movs	r2, #1
 8009546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009548:	f7fb fb52 	bl	8004bf0 <HAL_GetTick>
 800954c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800954e:	e008      	b.n	8009562 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009550:	f7fb fb4e 	bl	8004bf0 <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	2b02      	cmp	r3, #2
 800955c:	d901      	bls.n	8009562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800955e:	2303      	movs	r3, #3
 8009560:	e164      	b.n	800982c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009562:	4b26      	ldr	r3, [pc, #152]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 8009564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009566:	f003 0302 	and.w	r3, r3, #2
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0f0      	beq.n	8009550 <HAL_RCC_OscConfig+0x200>
 800956e:	e015      	b.n	800959c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009570:	4b24      	ldr	r3, [pc, #144]	; (8009604 <HAL_RCC_OscConfig+0x2b4>)
 8009572:	2200      	movs	r2, #0
 8009574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009576:	f7fb fb3b 	bl	8004bf0 <HAL_GetTick>
 800957a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800957c:	e008      	b.n	8009590 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800957e:	f7fb fb37 	bl	8004bf0 <HAL_GetTick>
 8009582:	4602      	mov	r2, r0
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	2b02      	cmp	r3, #2
 800958a:	d901      	bls.n	8009590 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800958c:	2303      	movs	r3, #3
 800958e:	e14d      	b.n	800982c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009590:	4b1a      	ldr	r3, [pc, #104]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 8009592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009594:	f003 0302 	and.w	r3, r3, #2
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1f0      	bne.n	800957e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 0304 	and.w	r3, r3, #4
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f000 80a0 	beq.w	80096ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80095aa:	2300      	movs	r3, #0
 80095ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095ae:	4b13      	ldr	r3, [pc, #76]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80095b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10f      	bne.n	80095da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095ba:	2300      	movs	r3, #0
 80095bc:	60bb      	str	r3, [r7, #8]
 80095be:	4b0f      	ldr	r3, [pc, #60]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80095c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c2:	4a0e      	ldr	r2, [pc, #56]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80095c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095c8:	6413      	str	r3, [r2, #64]	; 0x40
 80095ca:	4b0c      	ldr	r3, [pc, #48]	; (80095fc <HAL_RCC_OscConfig+0x2ac>)
 80095cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095d2:	60bb      	str	r3, [r7, #8]
 80095d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095d6:	2301      	movs	r3, #1
 80095d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095da:	4b0b      	ldr	r3, [pc, #44]	; (8009608 <HAL_RCC_OscConfig+0x2b8>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d121      	bne.n	800962a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80095e6:	4b08      	ldr	r3, [pc, #32]	; (8009608 <HAL_RCC_OscConfig+0x2b8>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a07      	ldr	r2, [pc, #28]	; (8009608 <HAL_RCC_OscConfig+0x2b8>)
 80095ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80095f2:	f7fb fafd 	bl	8004bf0 <HAL_GetTick>
 80095f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095f8:	e011      	b.n	800961e <HAL_RCC_OscConfig+0x2ce>
 80095fa:	bf00      	nop
 80095fc:	40023800 	.word	0x40023800
 8009600:	42470000 	.word	0x42470000
 8009604:	42470e80 	.word	0x42470e80
 8009608:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800960c:	f7fb faf0 	bl	8004bf0 <HAL_GetTick>
 8009610:	4602      	mov	r2, r0
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	2b02      	cmp	r3, #2
 8009618:	d901      	bls.n	800961e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800961a:	2303      	movs	r3, #3
 800961c:	e106      	b.n	800982c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800961e:	4b85      	ldr	r3, [pc, #532]	; (8009834 <HAL_RCC_OscConfig+0x4e4>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0f0      	beq.n	800960c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d106      	bne.n	8009640 <HAL_RCC_OscConfig+0x2f0>
 8009632:	4b81      	ldr	r3, [pc, #516]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 8009634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009636:	4a80      	ldr	r2, [pc, #512]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 8009638:	f043 0301 	orr.w	r3, r3, #1
 800963c:	6713      	str	r3, [r2, #112]	; 0x70
 800963e:	e01c      	b.n	800967a <HAL_RCC_OscConfig+0x32a>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	2b05      	cmp	r3, #5
 8009646:	d10c      	bne.n	8009662 <HAL_RCC_OscConfig+0x312>
 8009648:	4b7b      	ldr	r3, [pc, #492]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 800964a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800964c:	4a7a      	ldr	r2, [pc, #488]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 800964e:	f043 0304 	orr.w	r3, r3, #4
 8009652:	6713      	str	r3, [r2, #112]	; 0x70
 8009654:	4b78      	ldr	r3, [pc, #480]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 8009656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009658:	4a77      	ldr	r2, [pc, #476]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 800965a:	f043 0301 	orr.w	r3, r3, #1
 800965e:	6713      	str	r3, [r2, #112]	; 0x70
 8009660:	e00b      	b.n	800967a <HAL_RCC_OscConfig+0x32a>
 8009662:	4b75      	ldr	r3, [pc, #468]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 8009664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009666:	4a74      	ldr	r2, [pc, #464]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 8009668:	f023 0301 	bic.w	r3, r3, #1
 800966c:	6713      	str	r3, [r2, #112]	; 0x70
 800966e:	4b72      	ldr	r3, [pc, #456]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 8009670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009672:	4a71      	ldr	r2, [pc, #452]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 8009674:	f023 0304 	bic.w	r3, r3, #4
 8009678:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d015      	beq.n	80096ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009682:	f7fb fab5 	bl	8004bf0 <HAL_GetTick>
 8009686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009688:	e00a      	b.n	80096a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800968a:	f7fb fab1 	bl	8004bf0 <HAL_GetTick>
 800968e:	4602      	mov	r2, r0
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	f241 3288 	movw	r2, #5000	; 0x1388
 8009698:	4293      	cmp	r3, r2
 800969a:	d901      	bls.n	80096a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800969c:	2303      	movs	r3, #3
 800969e:	e0c5      	b.n	800982c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096a0:	4b65      	ldr	r3, [pc, #404]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 80096a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a4:	f003 0302 	and.w	r3, r3, #2
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d0ee      	beq.n	800968a <HAL_RCC_OscConfig+0x33a>
 80096ac:	e014      	b.n	80096d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80096ae:	f7fb fa9f 	bl	8004bf0 <HAL_GetTick>
 80096b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80096b4:	e00a      	b.n	80096cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80096b6:	f7fb fa9b 	bl	8004bf0 <HAL_GetTick>
 80096ba:	4602      	mov	r2, r0
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d901      	bls.n	80096cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e0af      	b.n	800982c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80096cc:	4b5a      	ldr	r3, [pc, #360]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 80096ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d0:	f003 0302 	and.w	r3, r3, #2
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1ee      	bne.n	80096b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d105      	bne.n	80096ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096de:	4b56      	ldr	r3, [pc, #344]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 80096e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e2:	4a55      	ldr	r2, [pc, #340]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 80096e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	699b      	ldr	r3, [r3, #24]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 809b 	beq.w	800982a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80096f4:	4b50      	ldr	r3, [pc, #320]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	f003 030c 	and.w	r3, r3, #12
 80096fc:	2b08      	cmp	r3, #8
 80096fe:	d05c      	beq.n	80097ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	2b02      	cmp	r3, #2
 8009706:	d141      	bne.n	800978c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009708:	4b4c      	ldr	r3, [pc, #304]	; (800983c <HAL_RCC_OscConfig+0x4ec>)
 800970a:	2200      	movs	r2, #0
 800970c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800970e:	f7fb fa6f 	bl	8004bf0 <HAL_GetTick>
 8009712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009714:	e008      	b.n	8009728 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009716:	f7fb fa6b 	bl	8004bf0 <HAL_GetTick>
 800971a:	4602      	mov	r2, r0
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	2b02      	cmp	r3, #2
 8009722:	d901      	bls.n	8009728 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009724:	2303      	movs	r3, #3
 8009726:	e081      	b.n	800982c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009728:	4b43      	ldr	r3, [pc, #268]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1f0      	bne.n	8009716 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	69da      	ldr	r2, [r3, #28]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a1b      	ldr	r3, [r3, #32]
 800973c:	431a      	orrs	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009742:	019b      	lsls	r3, r3, #6
 8009744:	431a      	orrs	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974a:	085b      	lsrs	r3, r3, #1
 800974c:	3b01      	subs	r3, #1
 800974e:	041b      	lsls	r3, r3, #16
 8009750:	431a      	orrs	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009756:	061b      	lsls	r3, r3, #24
 8009758:	4937      	ldr	r1, [pc, #220]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 800975a:	4313      	orrs	r3, r2
 800975c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800975e:	4b37      	ldr	r3, [pc, #220]	; (800983c <HAL_RCC_OscConfig+0x4ec>)
 8009760:	2201      	movs	r2, #1
 8009762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009764:	f7fb fa44 	bl	8004bf0 <HAL_GetTick>
 8009768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800976a:	e008      	b.n	800977e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800976c:	f7fb fa40 	bl	8004bf0 <HAL_GetTick>
 8009770:	4602      	mov	r2, r0
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	2b02      	cmp	r3, #2
 8009778:	d901      	bls.n	800977e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800977a:	2303      	movs	r3, #3
 800977c:	e056      	b.n	800982c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800977e:	4b2e      	ldr	r3, [pc, #184]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d0f0      	beq.n	800976c <HAL_RCC_OscConfig+0x41c>
 800978a:	e04e      	b.n	800982a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800978c:	4b2b      	ldr	r3, [pc, #172]	; (800983c <HAL_RCC_OscConfig+0x4ec>)
 800978e:	2200      	movs	r2, #0
 8009790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009792:	f7fb fa2d 	bl	8004bf0 <HAL_GetTick>
 8009796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009798:	e008      	b.n	80097ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800979a:	f7fb fa29 	bl	8004bf0 <HAL_GetTick>
 800979e:	4602      	mov	r2, r0
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d901      	bls.n	80097ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80097a8:	2303      	movs	r3, #3
 80097aa:	e03f      	b.n	800982c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097ac:	4b22      	ldr	r3, [pc, #136]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1f0      	bne.n	800979a <HAL_RCC_OscConfig+0x44a>
 80097b8:	e037      	b.n	800982a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d101      	bne.n	80097c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e032      	b.n	800982c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80097c6:	4b1c      	ldr	r3, [pc, #112]	; (8009838 <HAL_RCC_OscConfig+0x4e8>)
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d028      	beq.n	8009826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80097de:	429a      	cmp	r2, r3
 80097e0:	d121      	bne.n	8009826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d11a      	bne.n	8009826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80097f6:	4013      	ands	r3, r2
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80097fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80097fe:	4293      	cmp	r3, r2
 8009800:	d111      	bne.n	8009826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980c:	085b      	lsrs	r3, r3, #1
 800980e:	3b01      	subs	r3, #1
 8009810:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009812:	429a      	cmp	r2, r3
 8009814:	d107      	bne.n	8009826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009820:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009822:	429a      	cmp	r2, r3
 8009824:	d001      	beq.n	800982a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3718      	adds	r7, #24
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	40007000 	.word	0x40007000
 8009838:	40023800 	.word	0x40023800
 800983c:	42470060 	.word	0x42470060

08009840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d101      	bne.n	8009854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e0cc      	b.n	80099ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009854:	4b68      	ldr	r3, [pc, #416]	; (80099f8 <HAL_RCC_ClockConfig+0x1b8>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 0307 	and.w	r3, r3, #7
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	429a      	cmp	r2, r3
 8009860:	d90c      	bls.n	800987c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009862:	4b65      	ldr	r3, [pc, #404]	; (80099f8 <HAL_RCC_ClockConfig+0x1b8>)
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	b2d2      	uxtb	r2, r2
 8009868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800986a:	4b63      	ldr	r3, [pc, #396]	; (80099f8 <HAL_RCC_ClockConfig+0x1b8>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	429a      	cmp	r2, r3
 8009876:	d001      	beq.n	800987c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e0b8      	b.n	80099ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0302 	and.w	r3, r3, #2
 8009884:	2b00      	cmp	r3, #0
 8009886:	d020      	beq.n	80098ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0304 	and.w	r3, r3, #4
 8009890:	2b00      	cmp	r3, #0
 8009892:	d005      	beq.n	80098a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009894:	4b59      	ldr	r3, [pc, #356]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	4a58      	ldr	r2, [pc, #352]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 800989a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800989e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0308 	and.w	r3, r3, #8
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d005      	beq.n	80098b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80098ac:	4b53      	ldr	r3, [pc, #332]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	4a52      	ldr	r2, [pc, #328]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80098b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80098b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098b8:	4b50      	ldr	r3, [pc, #320]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	494d      	ldr	r1, [pc, #308]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d044      	beq.n	8009960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d107      	bne.n	80098ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098de:	4b47      	ldr	r3, [pc, #284]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d119      	bne.n	800991e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	e07f      	b.n	80099ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d003      	beq.n	80098fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80098fa:	2b03      	cmp	r3, #3
 80098fc:	d107      	bne.n	800990e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098fe:	4b3f      	ldr	r3, [pc, #252]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d109      	bne.n	800991e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e06f      	b.n	80099ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800990e:	4b3b      	ldr	r3, [pc, #236]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0302 	and.w	r3, r3, #2
 8009916:	2b00      	cmp	r3, #0
 8009918:	d101      	bne.n	800991e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e067      	b.n	80099ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800991e:	4b37      	ldr	r3, [pc, #220]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	f023 0203 	bic.w	r2, r3, #3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	4934      	ldr	r1, [pc, #208]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 800992c:	4313      	orrs	r3, r2
 800992e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009930:	f7fb f95e 	bl	8004bf0 <HAL_GetTick>
 8009934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009936:	e00a      	b.n	800994e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009938:	f7fb f95a 	bl	8004bf0 <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	f241 3288 	movw	r2, #5000	; 0x1388
 8009946:	4293      	cmp	r3, r2
 8009948:	d901      	bls.n	800994e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e04f      	b.n	80099ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800994e:	4b2b      	ldr	r3, [pc, #172]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f003 020c 	and.w	r2, r3, #12
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	429a      	cmp	r2, r3
 800995e:	d1eb      	bne.n	8009938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009960:	4b25      	ldr	r3, [pc, #148]	; (80099f8 <HAL_RCC_ClockConfig+0x1b8>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 0307 	and.w	r3, r3, #7
 8009968:	683a      	ldr	r2, [r7, #0]
 800996a:	429a      	cmp	r2, r3
 800996c:	d20c      	bcs.n	8009988 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800996e:	4b22      	ldr	r3, [pc, #136]	; (80099f8 <HAL_RCC_ClockConfig+0x1b8>)
 8009970:	683a      	ldr	r2, [r7, #0]
 8009972:	b2d2      	uxtb	r2, r2
 8009974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009976:	4b20      	ldr	r3, [pc, #128]	; (80099f8 <HAL_RCC_ClockConfig+0x1b8>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 0307 	and.w	r3, r3, #7
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	429a      	cmp	r2, r3
 8009982:	d001      	beq.n	8009988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e032      	b.n	80099ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 0304 	and.w	r3, r3, #4
 8009990:	2b00      	cmp	r3, #0
 8009992:	d008      	beq.n	80099a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009994:	4b19      	ldr	r3, [pc, #100]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	4916      	ldr	r1, [pc, #88]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f003 0308 	and.w	r3, r3, #8
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d009      	beq.n	80099c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80099b2:	4b12      	ldr	r3, [pc, #72]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	490e      	ldr	r1, [pc, #56]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80099c6:	f000 f821 	bl	8009a0c <HAL_RCC_GetSysClockFreq>
 80099ca:	4602      	mov	r2, r0
 80099cc:	4b0b      	ldr	r3, [pc, #44]	; (80099fc <HAL_RCC_ClockConfig+0x1bc>)
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	091b      	lsrs	r3, r3, #4
 80099d2:	f003 030f 	and.w	r3, r3, #15
 80099d6:	490a      	ldr	r1, [pc, #40]	; (8009a00 <HAL_RCC_ClockConfig+0x1c0>)
 80099d8:	5ccb      	ldrb	r3, [r1, r3]
 80099da:	fa22 f303 	lsr.w	r3, r2, r3
 80099de:	4a09      	ldr	r2, [pc, #36]	; (8009a04 <HAL_RCC_ClockConfig+0x1c4>)
 80099e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80099e2:	4b09      	ldr	r3, [pc, #36]	; (8009a08 <HAL_RCC_ClockConfig+0x1c8>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fa fa20 	bl	8003e2c <HAL_InitTick>

  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	40023c00 	.word	0x40023c00
 80099fc:	40023800 	.word	0x40023800
 8009a00:	0801241c 	.word	0x0801241c
 8009a04:	20000008 	.word	0x20000008
 8009a08:	2000000c 	.word	0x2000000c

08009a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	607b      	str	r3, [r7, #4]
 8009a18:	2300      	movs	r3, #0
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009a20:	2300      	movs	r3, #0
 8009a22:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a24:	4b67      	ldr	r3, [pc, #412]	; (8009bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f003 030c 	and.w	r3, r3, #12
 8009a2c:	2b08      	cmp	r3, #8
 8009a2e:	d00d      	beq.n	8009a4c <HAL_RCC_GetSysClockFreq+0x40>
 8009a30:	2b08      	cmp	r3, #8
 8009a32:	f200 80bd 	bhi.w	8009bb0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d002      	beq.n	8009a40 <HAL_RCC_GetSysClockFreq+0x34>
 8009a3a:	2b04      	cmp	r3, #4
 8009a3c:	d003      	beq.n	8009a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8009a3e:	e0b7      	b.n	8009bb0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009a40:	4b61      	ldr	r3, [pc, #388]	; (8009bc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009a42:	60bb      	str	r3, [r7, #8]
       break;
 8009a44:	e0b7      	b.n	8009bb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009a46:	4b61      	ldr	r3, [pc, #388]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009a48:	60bb      	str	r3, [r7, #8]
      break;
 8009a4a:	e0b4      	b.n	8009bb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009a4c:	4b5d      	ldr	r3, [pc, #372]	; (8009bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009a56:	4b5b      	ldr	r3, [pc, #364]	; (8009bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d04d      	beq.n	8009afe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a62:	4b58      	ldr	r3, [pc, #352]	; (8009bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	099b      	lsrs	r3, r3, #6
 8009a68:	461a      	mov	r2, r3
 8009a6a:	f04f 0300 	mov.w	r3, #0
 8009a6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009a72:	f04f 0100 	mov.w	r1, #0
 8009a76:	ea02 0800 	and.w	r8, r2, r0
 8009a7a:	ea03 0901 	and.w	r9, r3, r1
 8009a7e:	4640      	mov	r0, r8
 8009a80:	4649      	mov	r1, r9
 8009a82:	f04f 0200 	mov.w	r2, #0
 8009a86:	f04f 0300 	mov.w	r3, #0
 8009a8a:	014b      	lsls	r3, r1, #5
 8009a8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009a90:	0142      	lsls	r2, r0, #5
 8009a92:	4610      	mov	r0, r2
 8009a94:	4619      	mov	r1, r3
 8009a96:	ebb0 0008 	subs.w	r0, r0, r8
 8009a9a:	eb61 0109 	sbc.w	r1, r1, r9
 8009a9e:	f04f 0200 	mov.w	r2, #0
 8009aa2:	f04f 0300 	mov.w	r3, #0
 8009aa6:	018b      	lsls	r3, r1, #6
 8009aa8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009aac:	0182      	lsls	r2, r0, #6
 8009aae:	1a12      	subs	r2, r2, r0
 8009ab0:	eb63 0301 	sbc.w	r3, r3, r1
 8009ab4:	f04f 0000 	mov.w	r0, #0
 8009ab8:	f04f 0100 	mov.w	r1, #0
 8009abc:	00d9      	lsls	r1, r3, #3
 8009abe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009ac2:	00d0      	lsls	r0, r2, #3
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	eb12 0208 	adds.w	r2, r2, r8
 8009acc:	eb43 0309 	adc.w	r3, r3, r9
 8009ad0:	f04f 0000 	mov.w	r0, #0
 8009ad4:	f04f 0100 	mov.w	r1, #0
 8009ad8:	0259      	lsls	r1, r3, #9
 8009ada:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009ade:	0250      	lsls	r0, r2, #9
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	461a      	mov	r2, r3
 8009aec:	f04f 0300 	mov.w	r3, #0
 8009af0:	f7f7 f8b2 	bl	8000c58 <__aeabi_uldivmod>
 8009af4:	4602      	mov	r2, r0
 8009af6:	460b      	mov	r3, r1
 8009af8:	4613      	mov	r3, r2
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	e04a      	b.n	8009b94 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009afe:	4b31      	ldr	r3, [pc, #196]	; (8009bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	099b      	lsrs	r3, r3, #6
 8009b04:	461a      	mov	r2, r3
 8009b06:	f04f 0300 	mov.w	r3, #0
 8009b0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009b0e:	f04f 0100 	mov.w	r1, #0
 8009b12:	ea02 0400 	and.w	r4, r2, r0
 8009b16:	ea03 0501 	and.w	r5, r3, r1
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	f04f 0200 	mov.w	r2, #0
 8009b22:	f04f 0300 	mov.w	r3, #0
 8009b26:	014b      	lsls	r3, r1, #5
 8009b28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009b2c:	0142      	lsls	r2, r0, #5
 8009b2e:	4610      	mov	r0, r2
 8009b30:	4619      	mov	r1, r3
 8009b32:	1b00      	subs	r0, r0, r4
 8009b34:	eb61 0105 	sbc.w	r1, r1, r5
 8009b38:	f04f 0200 	mov.w	r2, #0
 8009b3c:	f04f 0300 	mov.w	r3, #0
 8009b40:	018b      	lsls	r3, r1, #6
 8009b42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009b46:	0182      	lsls	r2, r0, #6
 8009b48:	1a12      	subs	r2, r2, r0
 8009b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8009b4e:	f04f 0000 	mov.w	r0, #0
 8009b52:	f04f 0100 	mov.w	r1, #0
 8009b56:	00d9      	lsls	r1, r3, #3
 8009b58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009b5c:	00d0      	lsls	r0, r2, #3
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	1912      	adds	r2, r2, r4
 8009b64:	eb45 0303 	adc.w	r3, r5, r3
 8009b68:	f04f 0000 	mov.w	r0, #0
 8009b6c:	f04f 0100 	mov.w	r1, #0
 8009b70:	0299      	lsls	r1, r3, #10
 8009b72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009b76:	0290      	lsls	r0, r2, #10
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4610      	mov	r0, r2
 8009b7e:	4619      	mov	r1, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	461a      	mov	r2, r3
 8009b84:	f04f 0300 	mov.w	r3, #0
 8009b88:	f7f7 f866 	bl	8000c58 <__aeabi_uldivmod>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4613      	mov	r3, r2
 8009b92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009b94:	4b0b      	ldr	r3, [pc, #44]	; (8009bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	0c1b      	lsrs	r3, r3, #16
 8009b9a:	f003 0303 	and.w	r3, r3, #3
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	005b      	lsls	r3, r3, #1
 8009ba2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bac:	60bb      	str	r3, [r7, #8]
      break;
 8009bae:	e002      	b.n	8009bb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009bb0:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009bb2:	60bb      	str	r3, [r7, #8]
      break;
 8009bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009bb6:	68bb      	ldr	r3, [r7, #8]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009bc2:	bf00      	nop
 8009bc4:	40023800 	.word	0x40023800
 8009bc8:	00f42400 	.word	0x00f42400
 8009bcc:	007a1200 	.word	0x007a1200

08009bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009bd4:	4b03      	ldr	r3, [pc, #12]	; (8009be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	20000008 	.word	0x20000008

08009be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009bec:	f7ff fff0 	bl	8009bd0 <HAL_RCC_GetHCLKFreq>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	4b05      	ldr	r3, [pc, #20]	; (8009c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	0a9b      	lsrs	r3, r3, #10
 8009bf8:	f003 0307 	and.w	r3, r3, #7
 8009bfc:	4903      	ldr	r1, [pc, #12]	; (8009c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009bfe:	5ccb      	ldrb	r3, [r1, r3]
 8009c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	40023800 	.word	0x40023800
 8009c0c:	0801242c 	.word	0x0801242c

08009c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009c14:	f7ff ffdc 	bl	8009bd0 <HAL_RCC_GetHCLKFreq>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	4b05      	ldr	r3, [pc, #20]	; (8009c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	0b5b      	lsrs	r3, r3, #13
 8009c20:	f003 0307 	and.w	r3, r3, #7
 8009c24:	4903      	ldr	r1, [pc, #12]	; (8009c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c26:	5ccb      	ldrb	r3, [r1, r3]
 8009c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	40023800 	.word	0x40023800
 8009c34:	0801242c 	.word	0x0801242c

08009c38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	220f      	movs	r2, #15
 8009c46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009c48:	4b12      	ldr	r3, [pc, #72]	; (8009c94 <HAL_RCC_GetClockConfig+0x5c>)
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	f003 0203 	and.w	r2, r3, #3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009c54:	4b0f      	ldr	r3, [pc, #60]	; (8009c94 <HAL_RCC_GetClockConfig+0x5c>)
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009c60:	4b0c      	ldr	r3, [pc, #48]	; (8009c94 <HAL_RCC_GetClockConfig+0x5c>)
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009c6c:	4b09      	ldr	r3, [pc, #36]	; (8009c94 <HAL_RCC_GetClockConfig+0x5c>)
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	08db      	lsrs	r3, r3, #3
 8009c72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009c7a:	4b07      	ldr	r3, [pc, #28]	; (8009c98 <HAL_RCC_GetClockConfig+0x60>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0207 	and.w	r2, r3, #7
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	601a      	str	r2, [r3, #0]
}
 8009c86:	bf00      	nop
 8009c88:	370c      	adds	r7, #12
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	40023800 	.word	0x40023800
 8009c98:	40023c00 	.word	0x40023c00

08009c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d101      	bne.n	8009cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e041      	b.n	8009d32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d106      	bne.n	8009cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f7fa fcac 	bl	8004620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2202      	movs	r2, #2
 8009ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	3304      	adds	r3, #4
 8009cd8:	4619      	mov	r1, r3
 8009cda:	4610      	mov	r0, r2
 8009cdc:	f000 fd38 	bl	800a750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
	...

08009d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d001      	beq.n	8009d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e044      	b.n	8009dde <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2202      	movs	r2, #2
 8009d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68da      	ldr	r2, [r3, #12]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f042 0201 	orr.w	r2, r2, #1
 8009d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a1e      	ldr	r2, [pc, #120]	; (8009dec <HAL_TIM_Base_Start_IT+0xb0>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d018      	beq.n	8009da8 <HAL_TIM_Base_Start_IT+0x6c>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d7e:	d013      	beq.n	8009da8 <HAL_TIM_Base_Start_IT+0x6c>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a1a      	ldr	r2, [pc, #104]	; (8009df0 <HAL_TIM_Base_Start_IT+0xb4>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d00e      	beq.n	8009da8 <HAL_TIM_Base_Start_IT+0x6c>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a19      	ldr	r2, [pc, #100]	; (8009df4 <HAL_TIM_Base_Start_IT+0xb8>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d009      	beq.n	8009da8 <HAL_TIM_Base_Start_IT+0x6c>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a17      	ldr	r2, [pc, #92]	; (8009df8 <HAL_TIM_Base_Start_IT+0xbc>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d004      	beq.n	8009da8 <HAL_TIM_Base_Start_IT+0x6c>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a16      	ldr	r2, [pc, #88]	; (8009dfc <HAL_TIM_Base_Start_IT+0xc0>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d111      	bne.n	8009dcc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	f003 0307 	and.w	r3, r3, #7
 8009db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2b06      	cmp	r3, #6
 8009db8:	d010      	beq.n	8009ddc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f042 0201 	orr.w	r2, r2, #1
 8009dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dca:	e007      	b.n	8009ddc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f042 0201 	orr.w	r2, r2, #1
 8009dda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3714      	adds	r7, #20
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	40010000 	.word	0x40010000
 8009df0:	40000400 	.word	0x40000400
 8009df4:	40000800 	.word	0x40000800
 8009df8:	40000c00 	.word	0x40000c00
 8009dfc:	40014000 	.word	0x40014000

08009e00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e041      	b.n	8009e96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d106      	bne.n	8009e2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f839 	bl	8009e9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2202      	movs	r2, #2
 8009e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	4610      	mov	r0, r2
 8009e40:	f000 fc86 	bl	800a750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009ea6:	bf00      	nop
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
	...

08009eb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d109      	bne.n	8009ed8 <HAL_TIM_PWM_Start+0x24>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	bf14      	ite	ne
 8009ed0:	2301      	movne	r3, #1
 8009ed2:	2300      	moveq	r3, #0
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	e022      	b.n	8009f1e <HAL_TIM_PWM_Start+0x6a>
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	2b04      	cmp	r3, #4
 8009edc:	d109      	bne.n	8009ef2 <HAL_TIM_PWM_Start+0x3e>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	bf14      	ite	ne
 8009eea:	2301      	movne	r3, #1
 8009eec:	2300      	moveq	r3, #0
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	e015      	b.n	8009f1e <HAL_TIM_PWM_Start+0x6a>
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2b08      	cmp	r3, #8
 8009ef6:	d109      	bne.n	8009f0c <HAL_TIM_PWM_Start+0x58>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	bf14      	ite	ne
 8009f04:	2301      	movne	r3, #1
 8009f06:	2300      	moveq	r3, #0
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	e008      	b.n	8009f1e <HAL_TIM_PWM_Start+0x6a>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	bf14      	ite	ne
 8009f18:	2301      	movne	r3, #1
 8009f1a:	2300      	moveq	r3, #0
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e068      	b.n	8009ff8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d104      	bne.n	8009f36 <HAL_TIM_PWM_Start+0x82>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2202      	movs	r2, #2
 8009f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f34:	e013      	b.n	8009f5e <HAL_TIM_PWM_Start+0xaa>
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2b04      	cmp	r3, #4
 8009f3a:	d104      	bne.n	8009f46 <HAL_TIM_PWM_Start+0x92>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f44:	e00b      	b.n	8009f5e <HAL_TIM_PWM_Start+0xaa>
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b08      	cmp	r3, #8
 8009f4a:	d104      	bne.n	8009f56 <HAL_TIM_PWM_Start+0xa2>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2202      	movs	r2, #2
 8009f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f54:	e003      	b.n	8009f5e <HAL_TIM_PWM_Start+0xaa>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2202      	movs	r2, #2
 8009f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2201      	movs	r2, #1
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 fe98 	bl	800ac9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a23      	ldr	r2, [pc, #140]	; (800a000 <HAL_TIM_PWM_Start+0x14c>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d107      	bne.n	8009f86 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a1d      	ldr	r2, [pc, #116]	; (800a000 <HAL_TIM_PWM_Start+0x14c>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d018      	beq.n	8009fc2 <HAL_TIM_PWM_Start+0x10e>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f98:	d013      	beq.n	8009fc2 <HAL_TIM_PWM_Start+0x10e>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a19      	ldr	r2, [pc, #100]	; (800a004 <HAL_TIM_PWM_Start+0x150>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d00e      	beq.n	8009fc2 <HAL_TIM_PWM_Start+0x10e>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a17      	ldr	r2, [pc, #92]	; (800a008 <HAL_TIM_PWM_Start+0x154>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d009      	beq.n	8009fc2 <HAL_TIM_PWM_Start+0x10e>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a16      	ldr	r2, [pc, #88]	; (800a00c <HAL_TIM_PWM_Start+0x158>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d004      	beq.n	8009fc2 <HAL_TIM_PWM_Start+0x10e>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a14      	ldr	r2, [pc, #80]	; (800a010 <HAL_TIM_PWM_Start+0x15c>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d111      	bne.n	8009fe6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	f003 0307 	and.w	r3, r3, #7
 8009fcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2b06      	cmp	r3, #6
 8009fd2:	d010      	beq.n	8009ff6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f042 0201 	orr.w	r2, r2, #1
 8009fe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fe4:	e007      	b.n	8009ff6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f042 0201 	orr.w	r2, r2, #1
 8009ff4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	40010000 	.word	0x40010000
 800a004:	40000400 	.word	0x40000400
 800a008:	40000800 	.word	0x40000800
 800a00c:	40000c00 	.word	0x40000c00
 800a010:	40014000 	.word	0x40014000

0800a014 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d109      	bne.n	800a038 <HAL_TIM_PWM_Start_IT+0x24>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	bf14      	ite	ne
 800a030:	2301      	movne	r3, #1
 800a032:	2300      	moveq	r3, #0
 800a034:	b2db      	uxtb	r3, r3
 800a036:	e022      	b.n	800a07e <HAL_TIM_PWM_Start_IT+0x6a>
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	2b04      	cmp	r3, #4
 800a03c:	d109      	bne.n	800a052 <HAL_TIM_PWM_Start_IT+0x3e>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b01      	cmp	r3, #1
 800a048:	bf14      	ite	ne
 800a04a:	2301      	movne	r3, #1
 800a04c:	2300      	moveq	r3, #0
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	e015      	b.n	800a07e <HAL_TIM_PWM_Start_IT+0x6a>
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	2b08      	cmp	r3, #8
 800a056:	d109      	bne.n	800a06c <HAL_TIM_PWM_Start_IT+0x58>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	2b01      	cmp	r3, #1
 800a062:	bf14      	ite	ne
 800a064:	2301      	movne	r3, #1
 800a066:	2300      	moveq	r3, #0
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	e008      	b.n	800a07e <HAL_TIM_PWM_Start_IT+0x6a>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a072:	b2db      	uxtb	r3, r3
 800a074:	2b01      	cmp	r3, #1
 800a076:	bf14      	ite	ne
 800a078:	2301      	movne	r3, #1
 800a07a:	2300      	moveq	r3, #0
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e0ae      	b.n	800a1e4 <HAL_TIM_PWM_Start_IT+0x1d0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d104      	bne.n	800a096 <HAL_TIM_PWM_Start_IT+0x82>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2202      	movs	r2, #2
 800a090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a094:	e013      	b.n	800a0be <HAL_TIM_PWM_Start_IT+0xaa>
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	2b04      	cmp	r3, #4
 800a09a:	d104      	bne.n	800a0a6 <HAL_TIM_PWM_Start_IT+0x92>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2202      	movs	r2, #2
 800a0a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0a4:	e00b      	b.n	800a0be <HAL_TIM_PWM_Start_IT+0xaa>
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	2b08      	cmp	r3, #8
 800a0aa:	d104      	bne.n	800a0b6 <HAL_TIM_PWM_Start_IT+0xa2>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2202      	movs	r2, #2
 800a0b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0b4:	e003      	b.n	800a0be <HAL_TIM_PWM_Start_IT+0xaa>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b0c      	cmp	r3, #12
 800a0c2:	d841      	bhi.n	800a148 <HAL_TIM_PWM_Start_IT+0x134>
 800a0c4:	a201      	add	r2, pc, #4	; (adr r2, 800a0cc <HAL_TIM_PWM_Start_IT+0xb8>)
 800a0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ca:	bf00      	nop
 800a0cc:	0800a101 	.word	0x0800a101
 800a0d0:	0800a149 	.word	0x0800a149
 800a0d4:	0800a149 	.word	0x0800a149
 800a0d8:	0800a149 	.word	0x0800a149
 800a0dc:	0800a113 	.word	0x0800a113
 800a0e0:	0800a149 	.word	0x0800a149
 800a0e4:	0800a149 	.word	0x0800a149
 800a0e8:	0800a149 	.word	0x0800a149
 800a0ec:	0800a125 	.word	0x0800a125
 800a0f0:	0800a149 	.word	0x0800a149
 800a0f4:	0800a149 	.word	0x0800a149
 800a0f8:	0800a149 	.word	0x0800a149
 800a0fc:	0800a137 	.word	0x0800a137
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68da      	ldr	r2, [r3, #12]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f042 0202 	orr.w	r2, r2, #2
 800a10e:	60da      	str	r2, [r3, #12]
      break;
 800a110:	e01b      	b.n	800a14a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	68da      	ldr	r2, [r3, #12]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f042 0204 	orr.w	r2, r2, #4
 800a120:	60da      	str	r2, [r3, #12]
      break;
 800a122:	e012      	b.n	800a14a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68da      	ldr	r2, [r3, #12]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f042 0208 	orr.w	r2, r2, #8
 800a132:	60da      	str	r2, [r3, #12]
      break;
 800a134:	e009      	b.n	800a14a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68da      	ldr	r2, [r3, #12]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f042 0210 	orr.w	r2, r2, #16
 800a144:	60da      	str	r2, [r3, #12]
      break;
 800a146:	e000      	b.n	800a14a <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 800a148:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2201      	movs	r2, #1
 800a150:	6839      	ldr	r1, [r7, #0]
 800a152:	4618      	mov	r0, r3
 800a154:	f000 fda2 	bl	800ac9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a23      	ldr	r2, [pc, #140]	; (800a1ec <HAL_TIM_PWM_Start_IT+0x1d8>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d107      	bne.n	800a172 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a170:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a1d      	ldr	r2, [pc, #116]	; (800a1ec <HAL_TIM_PWM_Start_IT+0x1d8>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d018      	beq.n	800a1ae <HAL_TIM_PWM_Start_IT+0x19a>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a184:	d013      	beq.n	800a1ae <HAL_TIM_PWM_Start_IT+0x19a>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a19      	ldr	r2, [pc, #100]	; (800a1f0 <HAL_TIM_PWM_Start_IT+0x1dc>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d00e      	beq.n	800a1ae <HAL_TIM_PWM_Start_IT+0x19a>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a17      	ldr	r2, [pc, #92]	; (800a1f4 <HAL_TIM_PWM_Start_IT+0x1e0>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d009      	beq.n	800a1ae <HAL_TIM_PWM_Start_IT+0x19a>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a16      	ldr	r2, [pc, #88]	; (800a1f8 <HAL_TIM_PWM_Start_IT+0x1e4>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d004      	beq.n	800a1ae <HAL_TIM_PWM_Start_IT+0x19a>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a14      	ldr	r2, [pc, #80]	; (800a1fc <HAL_TIM_PWM_Start_IT+0x1e8>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d111      	bne.n	800a1d2 <HAL_TIM_PWM_Start_IT+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	f003 0307 	and.w	r3, r3, #7
 800a1b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2b06      	cmp	r3, #6
 800a1be:	d010      	beq.n	800a1e2 <HAL_TIM_PWM_Start_IT+0x1ce>
    {
      __HAL_TIM_ENABLE(htim);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f042 0201 	orr.w	r2, r2, #1
 800a1ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1d0:	e007      	b.n	800a1e2 <HAL_TIM_PWM_Start_IT+0x1ce>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f042 0201 	orr.w	r2, r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	40010000 	.word	0x40010000
 800a1f0:	40000400 	.word	0x40000400
 800a1f4:	40000800 	.word	0x40000800
 800a1f8:	40000c00 	.word	0x40000c00
 800a1fc:	40014000 	.word	0x40014000

0800a200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	f003 0302 	and.w	r3, r3, #2
 800a212:	2b02      	cmp	r3, #2
 800a214:	d122      	bne.n	800a25c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	f003 0302 	and.w	r3, r3, #2
 800a220:	2b02      	cmp	r3, #2
 800a222:	d11b      	bne.n	800a25c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f06f 0202 	mvn.w	r2, #2
 800a22c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	699b      	ldr	r3, [r3, #24]
 800a23a:	f003 0303 	and.w	r3, r3, #3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 fa70 	bl	800a728 <HAL_TIM_IC_CaptureCallback>
 800a248:	e005      	b.n	800a256 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 fa62 	bl	800a714 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7f8 f909 	bl	8002468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	f003 0304 	and.w	r3, r3, #4
 800a266:	2b04      	cmp	r3, #4
 800a268:	d122      	bne.n	800a2b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	f003 0304 	and.w	r3, r3, #4
 800a274:	2b04      	cmp	r3, #4
 800a276:	d11b      	bne.n	800a2b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f06f 0204 	mvn.w	r2, #4
 800a280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2202      	movs	r2, #2
 800a286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	699b      	ldr	r3, [r3, #24]
 800a28e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a292:	2b00      	cmp	r3, #0
 800a294:	d003      	beq.n	800a29e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fa46 	bl	800a728 <HAL_TIM_IC_CaptureCallback>
 800a29c:	e005      	b.n	800a2aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fa38 	bl	800a714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f7f8 f8df 	bl	8002468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	f003 0308 	and.w	r3, r3, #8
 800a2ba:	2b08      	cmp	r3, #8
 800a2bc:	d122      	bne.n	800a304 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	f003 0308 	and.w	r3, r3, #8
 800a2c8:	2b08      	cmp	r3, #8
 800a2ca:	d11b      	bne.n	800a304 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f06f 0208 	mvn.w	r2, #8
 800a2d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2204      	movs	r2, #4
 800a2da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	69db      	ldr	r3, [r3, #28]
 800a2e2:	f003 0303 	and.w	r3, r3, #3
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d003      	beq.n	800a2f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fa1c 	bl	800a728 <HAL_TIM_IC_CaptureCallback>
 800a2f0:	e005      	b.n	800a2fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 fa0e 	bl	800a714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7f8 f8b5 	bl	8002468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	f003 0310 	and.w	r3, r3, #16
 800a30e:	2b10      	cmp	r3, #16
 800a310:	d122      	bne.n	800a358 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	f003 0310 	and.w	r3, r3, #16
 800a31c:	2b10      	cmp	r3, #16
 800a31e:	d11b      	bne.n	800a358 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f06f 0210 	mvn.w	r2, #16
 800a328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2208      	movs	r2, #8
 800a32e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	69db      	ldr	r3, [r3, #28]
 800a336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d003      	beq.n	800a346 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f9f2 	bl	800a728 <HAL_TIM_IC_CaptureCallback>
 800a344:	e005      	b.n	800a352 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f9e4 	bl	800a714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f7f8 f88b 	bl	8002468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	f003 0301 	and.w	r3, r3, #1
 800a362:	2b01      	cmp	r3, #1
 800a364:	d10e      	bne.n	800a384 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	f003 0301 	and.w	r3, r3, #1
 800a370:	2b01      	cmp	r3, #1
 800a372:	d107      	bne.n	800a384 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f06f 0201 	mvn.w	r2, #1
 800a37c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7f9 fcf4 	bl	8003d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a38e:	2b80      	cmp	r3, #128	; 0x80
 800a390:	d10e      	bne.n	800a3b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a39c:	2b80      	cmp	r3, #128	; 0x80
 800a39e:	d107      	bne.n	800a3b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a3a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 fdf0 	bl	800af90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ba:	2b40      	cmp	r3, #64	; 0x40
 800a3bc:	d10e      	bne.n	800a3dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c8:	2b40      	cmp	r3, #64	; 0x40
 800a3ca:	d107      	bne.n	800a3dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 f9b0 	bl	800a73c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	f003 0320 	and.w	r3, r3, #32
 800a3e6:	2b20      	cmp	r3, #32
 800a3e8:	d10e      	bne.n	800a408 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	f003 0320 	and.w	r3, r3, #32
 800a3f4:	2b20      	cmp	r3, #32
 800a3f6:	d107      	bne.n	800a408 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f06f 0220 	mvn.w	r2, #32
 800a400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 fdba 	bl	800af7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a408:	bf00      	nop
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a422:	2b01      	cmp	r3, #1
 800a424:	d101      	bne.n	800a42a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a426:	2302      	movs	r3, #2
 800a428:	e0ac      	b.n	800a584 <HAL_TIM_PWM_ConfigChannel+0x174>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b0c      	cmp	r3, #12
 800a436:	f200 809f 	bhi.w	800a578 <HAL_TIM_PWM_ConfigChannel+0x168>
 800a43a:	a201      	add	r2, pc, #4	; (adr r2, 800a440 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a440:	0800a475 	.word	0x0800a475
 800a444:	0800a579 	.word	0x0800a579
 800a448:	0800a579 	.word	0x0800a579
 800a44c:	0800a579 	.word	0x0800a579
 800a450:	0800a4b5 	.word	0x0800a4b5
 800a454:	0800a579 	.word	0x0800a579
 800a458:	0800a579 	.word	0x0800a579
 800a45c:	0800a579 	.word	0x0800a579
 800a460:	0800a4f7 	.word	0x0800a4f7
 800a464:	0800a579 	.word	0x0800a579
 800a468:	0800a579 	.word	0x0800a579
 800a46c:	0800a579 	.word	0x0800a579
 800a470:	0800a537 	.word	0x0800a537
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68b9      	ldr	r1, [r7, #8]
 800a47a:	4618      	mov	r0, r3
 800a47c:	f000 f9e8 	bl	800a850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	699a      	ldr	r2, [r3, #24]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f042 0208 	orr.w	r2, r2, #8
 800a48e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	699a      	ldr	r2, [r3, #24]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f022 0204 	bic.w	r2, r2, #4
 800a49e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6999      	ldr	r1, [r3, #24]
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	691a      	ldr	r2, [r3, #16]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	619a      	str	r2, [r3, #24]
      break;
 800a4b2:	e062      	b.n	800a57a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68b9      	ldr	r1, [r7, #8]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 fa2e 	bl	800a91c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	699a      	ldr	r2, [r3, #24]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	699a      	ldr	r2, [r3, #24]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6999      	ldr	r1, [r3, #24]
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	021a      	lsls	r2, r3, #8
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	430a      	orrs	r2, r1
 800a4f2:	619a      	str	r2, [r3, #24]
      break;
 800a4f4:	e041      	b.n	800a57a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	68b9      	ldr	r1, [r7, #8]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f000 fa79 	bl	800a9f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	69da      	ldr	r2, [r3, #28]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f042 0208 	orr.w	r2, r2, #8
 800a510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	69da      	ldr	r2, [r3, #28]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f022 0204 	bic.w	r2, r2, #4
 800a520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	69d9      	ldr	r1, [r3, #28]
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	691a      	ldr	r2, [r3, #16]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	430a      	orrs	r2, r1
 800a532:	61da      	str	r2, [r3, #28]
      break;
 800a534:	e021      	b.n	800a57a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68b9      	ldr	r1, [r7, #8]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 fac3 	bl	800aac8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	69da      	ldr	r2, [r3, #28]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	69da      	ldr	r2, [r3, #28]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	69d9      	ldr	r1, [r3, #28]
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	021a      	lsls	r2, r3, #8
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	430a      	orrs	r2, r1
 800a574:	61da      	str	r2, [r3, #28]
      break;
 800a576:	e000      	b.n	800a57a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800a578:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d101      	bne.n	800a5a4 <HAL_TIM_ConfigClockSource+0x18>
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	e0b3      	b.n	800a70c <HAL_TIM_ConfigClockSource+0x180>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5dc:	d03e      	beq.n	800a65c <HAL_TIM_ConfigClockSource+0xd0>
 800a5de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5e2:	f200 8087 	bhi.w	800a6f4 <HAL_TIM_ConfigClockSource+0x168>
 800a5e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ea:	f000 8085 	beq.w	800a6f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a5ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5f2:	d87f      	bhi.n	800a6f4 <HAL_TIM_ConfigClockSource+0x168>
 800a5f4:	2b70      	cmp	r3, #112	; 0x70
 800a5f6:	d01a      	beq.n	800a62e <HAL_TIM_ConfigClockSource+0xa2>
 800a5f8:	2b70      	cmp	r3, #112	; 0x70
 800a5fa:	d87b      	bhi.n	800a6f4 <HAL_TIM_ConfigClockSource+0x168>
 800a5fc:	2b60      	cmp	r3, #96	; 0x60
 800a5fe:	d050      	beq.n	800a6a2 <HAL_TIM_ConfigClockSource+0x116>
 800a600:	2b60      	cmp	r3, #96	; 0x60
 800a602:	d877      	bhi.n	800a6f4 <HAL_TIM_ConfigClockSource+0x168>
 800a604:	2b50      	cmp	r3, #80	; 0x50
 800a606:	d03c      	beq.n	800a682 <HAL_TIM_ConfigClockSource+0xf6>
 800a608:	2b50      	cmp	r3, #80	; 0x50
 800a60a:	d873      	bhi.n	800a6f4 <HAL_TIM_ConfigClockSource+0x168>
 800a60c:	2b40      	cmp	r3, #64	; 0x40
 800a60e:	d058      	beq.n	800a6c2 <HAL_TIM_ConfigClockSource+0x136>
 800a610:	2b40      	cmp	r3, #64	; 0x40
 800a612:	d86f      	bhi.n	800a6f4 <HAL_TIM_ConfigClockSource+0x168>
 800a614:	2b30      	cmp	r3, #48	; 0x30
 800a616:	d064      	beq.n	800a6e2 <HAL_TIM_ConfigClockSource+0x156>
 800a618:	2b30      	cmp	r3, #48	; 0x30
 800a61a:	d86b      	bhi.n	800a6f4 <HAL_TIM_ConfigClockSource+0x168>
 800a61c:	2b20      	cmp	r3, #32
 800a61e:	d060      	beq.n	800a6e2 <HAL_TIM_ConfigClockSource+0x156>
 800a620:	2b20      	cmp	r3, #32
 800a622:	d867      	bhi.n	800a6f4 <HAL_TIM_ConfigClockSource+0x168>
 800a624:	2b00      	cmp	r3, #0
 800a626:	d05c      	beq.n	800a6e2 <HAL_TIM_ConfigClockSource+0x156>
 800a628:	2b10      	cmp	r3, #16
 800a62a:	d05a      	beq.n	800a6e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a62c:	e062      	b.n	800a6f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6818      	ldr	r0, [r3, #0]
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	6899      	ldr	r1, [r3, #8]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	685a      	ldr	r2, [r3, #4]
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	f000 fb0d 	bl	800ac5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a650:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	609a      	str	r2, [r3, #8]
      break;
 800a65a:	e04e      	b.n	800a6fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6818      	ldr	r0, [r3, #0]
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	6899      	ldr	r1, [r3, #8]
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	f000 faf6 	bl	800ac5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	689a      	ldr	r2, [r3, #8]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a67e:	609a      	str	r2, [r3, #8]
      break;
 800a680:	e03b      	b.n	800a6fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6818      	ldr	r0, [r3, #0]
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	6859      	ldr	r1, [r3, #4]
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	461a      	mov	r2, r3
 800a690:	f000 fa6a 	bl	800ab68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2150      	movs	r1, #80	; 0x50
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 fac3 	bl	800ac26 <TIM_ITRx_SetConfig>
      break;
 800a6a0:	e02b      	b.n	800a6fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6818      	ldr	r0, [r3, #0]
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	6859      	ldr	r1, [r3, #4]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	f000 fa89 	bl	800abc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2160      	movs	r1, #96	; 0x60
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f000 fab3 	bl	800ac26 <TIM_ITRx_SetConfig>
      break;
 800a6c0:	e01b      	b.n	800a6fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	6859      	ldr	r1, [r3, #4]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	f000 fa4a 	bl	800ab68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2140      	movs	r1, #64	; 0x40
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 faa3 	bl	800ac26 <TIM_ITRx_SetConfig>
      break;
 800a6e0:	e00b      	b.n	800a6fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	4610      	mov	r0, r2
 800a6ee:	f000 fa9a 	bl	800ac26 <TIM_ITRx_SetConfig>
        break;
 800a6f2:	e002      	b.n	800a6fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a6f4:	bf00      	nop
 800a6f6:	e000      	b.n	800a6fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a6f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a744:	bf00      	nop
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a34      	ldr	r2, [pc, #208]	; (800a834 <TIM_Base_SetConfig+0xe4>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d00f      	beq.n	800a788 <TIM_Base_SetConfig+0x38>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a76e:	d00b      	beq.n	800a788 <TIM_Base_SetConfig+0x38>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a31      	ldr	r2, [pc, #196]	; (800a838 <TIM_Base_SetConfig+0xe8>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d007      	beq.n	800a788 <TIM_Base_SetConfig+0x38>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a30      	ldr	r2, [pc, #192]	; (800a83c <TIM_Base_SetConfig+0xec>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d003      	beq.n	800a788 <TIM_Base_SetConfig+0x38>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a2f      	ldr	r2, [pc, #188]	; (800a840 <TIM_Base_SetConfig+0xf0>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d108      	bne.n	800a79a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a78e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	4313      	orrs	r3, r2
 800a798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a25      	ldr	r2, [pc, #148]	; (800a834 <TIM_Base_SetConfig+0xe4>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d01b      	beq.n	800a7da <TIM_Base_SetConfig+0x8a>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7a8:	d017      	beq.n	800a7da <TIM_Base_SetConfig+0x8a>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a22      	ldr	r2, [pc, #136]	; (800a838 <TIM_Base_SetConfig+0xe8>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d013      	beq.n	800a7da <TIM_Base_SetConfig+0x8a>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a21      	ldr	r2, [pc, #132]	; (800a83c <TIM_Base_SetConfig+0xec>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d00f      	beq.n	800a7da <TIM_Base_SetConfig+0x8a>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a20      	ldr	r2, [pc, #128]	; (800a840 <TIM_Base_SetConfig+0xf0>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d00b      	beq.n	800a7da <TIM_Base_SetConfig+0x8a>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a1f      	ldr	r2, [pc, #124]	; (800a844 <TIM_Base_SetConfig+0xf4>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d007      	beq.n	800a7da <TIM_Base_SetConfig+0x8a>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a1e      	ldr	r2, [pc, #120]	; (800a848 <TIM_Base_SetConfig+0xf8>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d003      	beq.n	800a7da <TIM_Base_SetConfig+0x8a>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a1d      	ldr	r2, [pc, #116]	; (800a84c <TIM_Base_SetConfig+0xfc>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d108      	bne.n	800a7ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	695b      	ldr	r3, [r3, #20]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	689a      	ldr	r2, [r3, #8]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a08      	ldr	r2, [pc, #32]	; (800a834 <TIM_Base_SetConfig+0xe4>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d103      	bne.n	800a820 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	691a      	ldr	r2, [r3, #16]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	615a      	str	r2, [r3, #20]
}
 800a826:	bf00      	nop
 800a828:	3714      	adds	r7, #20
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	40010000 	.word	0x40010000
 800a838:	40000400 	.word	0x40000400
 800a83c:	40000800 	.word	0x40000800
 800a840:	40000c00 	.word	0x40000c00
 800a844:	40014000 	.word	0x40014000
 800a848:	40014400 	.word	0x40014400
 800a84c:	40014800 	.word	0x40014800

0800a850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a850:	b480      	push	{r7}
 800a852:	b087      	sub	sp, #28
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a1b      	ldr	r3, [r3, #32]
 800a85e:	f023 0201 	bic.w	r2, r3, #1
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a1b      	ldr	r3, [r3, #32]
 800a86a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	699b      	ldr	r3, [r3, #24]
 800a876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a87e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f023 0303 	bic.w	r3, r3, #3
 800a886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	4313      	orrs	r3, r2
 800a890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	f023 0302 	bic.w	r3, r3, #2
 800a898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	697a      	ldr	r2, [r7, #20]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a1c      	ldr	r2, [pc, #112]	; (800a918 <TIM_OC1_SetConfig+0xc8>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d10c      	bne.n	800a8c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	f023 0308 	bic.w	r3, r3, #8
 800a8b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	697a      	ldr	r2, [r7, #20]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f023 0304 	bic.w	r3, r3, #4
 800a8c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a13      	ldr	r2, [pc, #76]	; (800a918 <TIM_OC1_SetConfig+0xc8>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d111      	bne.n	800a8f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	693a      	ldr	r2, [r7, #16]
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	699b      	ldr	r3, [r3, #24]
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	685a      	ldr	r2, [r3, #4]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	697a      	ldr	r2, [r7, #20]
 800a90a:	621a      	str	r2, [r3, #32]
}
 800a90c:	bf00      	nop
 800a90e:	371c      	adds	r7, #28
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr
 800a918:	40010000 	.word	0x40010000

0800a91c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b087      	sub	sp, #28
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a1b      	ldr	r3, [r3, #32]
 800a92a:	f023 0210 	bic.w	r2, r3, #16
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	699b      	ldr	r3, [r3, #24]
 800a942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a94a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	021b      	lsls	r3, r3, #8
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	f023 0320 	bic.w	r3, r3, #32
 800a966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	011b      	lsls	r3, r3, #4
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	4313      	orrs	r3, r2
 800a972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a1e      	ldr	r2, [pc, #120]	; (800a9f0 <TIM_OC2_SetConfig+0xd4>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d10d      	bne.n	800a998 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	011b      	lsls	r3, r3, #4
 800a98a:	697a      	ldr	r2, [r7, #20]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a996:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4a15      	ldr	r2, [pc, #84]	; (800a9f0 <TIM_OC2_SetConfig+0xd4>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d113      	bne.n	800a9c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	695b      	ldr	r3, [r3, #20]
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	693a      	ldr	r2, [r7, #16]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	693a      	ldr	r2, [r7, #16]
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	693a      	ldr	r2, [r7, #16]
 800a9cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	685a      	ldr	r2, [r3, #4]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	697a      	ldr	r2, [r7, #20]
 800a9e0:	621a      	str	r2, [r3, #32]
}
 800a9e2:	bf00      	nop
 800a9e4:	371c      	adds	r7, #28
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	40010000 	.word	0x40010000

0800a9f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b087      	sub	sp, #28
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a1b      	ldr	r3, [r3, #32]
 800aa02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	69db      	ldr	r3, [r3, #28]
 800aa1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f023 0303 	bic.w	r3, r3, #3
 800aa2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	021b      	lsls	r3, r3, #8
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a1d      	ldr	r2, [pc, #116]	; (800aac4 <TIM_OC3_SetConfig+0xd0>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d10d      	bne.n	800aa6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	021b      	lsls	r3, r3, #8
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a14      	ldr	r2, [pc, #80]	; (800aac4 <TIM_OC3_SetConfig+0xd0>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d113      	bne.n	800aa9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	695b      	ldr	r3, [r3, #20]
 800aa8a:	011b      	lsls	r3, r3, #4
 800aa8c:	693a      	ldr	r2, [r7, #16]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	011b      	lsls	r3, r3, #4
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	693a      	ldr	r2, [r7, #16]
 800aaa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	697a      	ldr	r2, [r7, #20]
 800aab6:	621a      	str	r2, [r3, #32]
}
 800aab8:	bf00      	nop
 800aaba:	371c      	adds	r7, #28
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	40010000 	.word	0x40010000

0800aac8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b087      	sub	sp, #28
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	69db      	ldr	r3, [r3, #28]
 800aaee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aafe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	021b      	lsls	r3, r3, #8
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	031b      	lsls	r3, r3, #12
 800ab1a:	693a      	ldr	r2, [r7, #16]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a10      	ldr	r2, [pc, #64]	; (800ab64 <TIM_OC4_SetConfig+0x9c>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d109      	bne.n	800ab3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	695b      	ldr	r3, [r3, #20]
 800ab34:	019b      	lsls	r3, r3, #6
 800ab36:	697a      	ldr	r2, [r7, #20]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	693a      	ldr	r2, [r7, #16]
 800ab54:	621a      	str	r2, [r3, #32]
}
 800ab56:	bf00      	nop
 800ab58:	371c      	adds	r7, #28
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	40010000 	.word	0x40010000

0800ab68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b087      	sub	sp, #28
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6a1b      	ldr	r3, [r3, #32]
 800ab78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	f023 0201 	bic.w	r2, r3, #1
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	011b      	lsls	r3, r3, #4
 800ab98:	693a      	ldr	r2, [r7, #16]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	f023 030a 	bic.w	r3, r3, #10
 800aba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	4313      	orrs	r3, r2
 800abac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	693a      	ldr	r2, [r7, #16]
 800abb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	621a      	str	r2, [r3, #32]
}
 800abba:	bf00      	nop
 800abbc:	371c      	adds	r7, #28
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abc6:	b480      	push	{r7}
 800abc8:	b087      	sub	sp, #28
 800abca:	af00      	add	r7, sp, #0
 800abcc:	60f8      	str	r0, [r7, #12]
 800abce:	60b9      	str	r1, [r7, #8]
 800abd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	f023 0210 	bic.w	r2, r3, #16
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	699b      	ldr	r3, [r3, #24]
 800abe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6a1b      	ldr	r3, [r3, #32]
 800abe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800abf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	031b      	lsls	r3, r3, #12
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	011b      	lsls	r3, r3, #4
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	693a      	ldr	r2, [r7, #16]
 800ac18:	621a      	str	r2, [r3, #32]
}
 800ac1a:	bf00      	nop
 800ac1c:	371c      	adds	r7, #28
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b085      	sub	sp, #20
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
 800ac2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac3e:	683a      	ldr	r2, [r7, #0]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	f043 0307 	orr.w	r3, r3, #7
 800ac48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	609a      	str	r2, [r3, #8]
}
 800ac50:	bf00      	nop
 800ac52:	3714      	adds	r7, #20
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b087      	sub	sp, #28
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
 800ac68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	021a      	lsls	r2, r3, #8
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	431a      	orrs	r2, r3
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	697a      	ldr	r2, [r7, #20]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	697a      	ldr	r2, [r7, #20]
 800ac8e:	609a      	str	r2, [r3, #8]
}
 800ac90:	bf00      	nop
 800ac92:	371c      	adds	r7, #28
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b087      	sub	sp, #28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	f003 031f 	and.w	r3, r3, #31
 800acae:	2201      	movs	r2, #1
 800acb0:	fa02 f303 	lsl.w	r3, r2, r3
 800acb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6a1a      	ldr	r2, [r3, #32]
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	43db      	mvns	r3, r3
 800acbe:	401a      	ands	r2, r3
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6a1a      	ldr	r2, [r3, #32]
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	f003 031f 	and.w	r3, r3, #31
 800acce:	6879      	ldr	r1, [r7, #4]
 800acd0:	fa01 f303 	lsl.w	r3, r1, r3
 800acd4:	431a      	orrs	r2, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	621a      	str	r2, [r3, #32]
}
 800acda:	bf00      	nop
 800acdc:	371c      	adds	r7, #28
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
	...

0800ace8 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d109      	bne.n	800ad0c <HAL_TIMEx_PWMN_Start_IT+0x24>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	bf14      	ite	ne
 800ad04:	2301      	movne	r3, #1
 800ad06:	2300      	moveq	r3, #0
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	e022      	b.n	800ad52 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	2b04      	cmp	r3, #4
 800ad10:	d109      	bne.n	800ad26 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	bf14      	ite	ne
 800ad1e:	2301      	movne	r3, #1
 800ad20:	2300      	moveq	r3, #0
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	e015      	b.n	800ad52 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	2b08      	cmp	r3, #8
 800ad2a:	d109      	bne.n	800ad40 <HAL_TIMEx_PWMN_Start_IT+0x58>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	bf14      	ite	ne
 800ad38:	2301      	movne	r3, #1
 800ad3a:	2300      	moveq	r3, #0
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	e008      	b.n	800ad52 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	bf14      	ite	ne
 800ad4c:	2301      	movne	r3, #1
 800ad4e:	2300      	moveq	r3, #0
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <HAL_TIMEx_PWMN_Start_IT+0x72>
  {
    return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e094      	b.n	800ae84 <HAL_TIMEx_PWMN_Start_IT+0x19c>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d104      	bne.n	800ad6a <HAL_TIMEx_PWMN_Start_IT+0x82>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2202      	movs	r2, #2
 800ad64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad68:	e013      	b.n	800ad92 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	2b04      	cmp	r3, #4
 800ad6e:	d104      	bne.n	800ad7a <HAL_TIMEx_PWMN_Start_IT+0x92>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2202      	movs	r2, #2
 800ad74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad78:	e00b      	b.n	800ad92 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	2b08      	cmp	r3, #8
 800ad7e:	d104      	bne.n	800ad8a <HAL_TIMEx_PWMN_Start_IT+0xa2>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2202      	movs	r2, #2
 800ad84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad88:	e003      	b.n	800ad92 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2202      	movs	r2, #2
 800ad8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	2b08      	cmp	r3, #8
 800ad96:	d01b      	beq.n	800add0 <HAL_TIMEx_PWMN_Start_IT+0xe8>
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	2b08      	cmp	r3, #8
 800ad9c:	d821      	bhi.n	800ade2 <HAL_TIMEx_PWMN_Start_IT+0xfa>
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d003      	beq.n	800adac <HAL_TIMEx_PWMN_Start_IT+0xc4>
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	2b04      	cmp	r3, #4
 800ada8:	d009      	beq.n	800adbe <HAL_TIMEx_PWMN_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800adaa:	e01a      	b.n	800ade2 <HAL_TIMEx_PWMN_Start_IT+0xfa>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68da      	ldr	r2, [r3, #12]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f042 0202 	orr.w	r2, r2, #2
 800adba:	60da      	str	r2, [r3, #12]
      break;
 800adbc:	e012      	b.n	800ade4 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68da      	ldr	r2, [r3, #12]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f042 0204 	orr.w	r2, r2, #4
 800adcc:	60da      	str	r2, [r3, #12]
      break;
 800adce:	e009      	b.n	800ade4 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	68da      	ldr	r2, [r3, #12]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f042 0208 	orr.w	r2, r2, #8
 800adde:	60da      	str	r2, [r3, #12]
      break;
 800ade0:	e000      	b.n	800ade4 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      break;
 800ade2:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	68da      	ldr	r2, [r3, #12]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800adf2:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2204      	movs	r2, #4
 800adfa:	6839      	ldr	r1, [r7, #0]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f000 f8d1 	bl	800afa4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae10:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a1d      	ldr	r2, [pc, #116]	; (800ae8c <HAL_TIMEx_PWMN_Start_IT+0x1a4>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d018      	beq.n	800ae4e <HAL_TIMEx_PWMN_Start_IT+0x166>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae24:	d013      	beq.n	800ae4e <HAL_TIMEx_PWMN_Start_IT+0x166>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a19      	ldr	r2, [pc, #100]	; (800ae90 <HAL_TIMEx_PWMN_Start_IT+0x1a8>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d00e      	beq.n	800ae4e <HAL_TIMEx_PWMN_Start_IT+0x166>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a17      	ldr	r2, [pc, #92]	; (800ae94 <HAL_TIMEx_PWMN_Start_IT+0x1ac>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d009      	beq.n	800ae4e <HAL_TIMEx_PWMN_Start_IT+0x166>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a16      	ldr	r2, [pc, #88]	; (800ae98 <HAL_TIMEx_PWMN_Start_IT+0x1b0>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d004      	beq.n	800ae4e <HAL_TIMEx_PWMN_Start_IT+0x166>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a14      	ldr	r2, [pc, #80]	; (800ae9c <HAL_TIMEx_PWMN_Start_IT+0x1b4>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d111      	bne.n	800ae72 <HAL_TIMEx_PWMN_Start_IT+0x18a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	f003 0307 	and.w	r3, r3, #7
 800ae58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2b06      	cmp	r3, #6
 800ae5e:	d010      	beq.n	800ae82 <HAL_TIMEx_PWMN_Start_IT+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f042 0201 	orr.w	r2, r2, #1
 800ae6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae70:	e007      	b.n	800ae82 <HAL_TIMEx_PWMN_Start_IT+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f042 0201 	orr.w	r2, r2, #1
 800ae80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	40010000 	.word	0x40010000
 800ae90:	40000400 	.word	0x40000400
 800ae94:	40000800 	.word	0x40000800
 800ae98:	40000c00 	.word	0x40000c00
 800ae9c:	40014000 	.word	0x40014000

0800aea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d101      	bne.n	800aeb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	e050      	b.n	800af5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2202      	movs	r2, #2
 800aec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a1c      	ldr	r2, [pc, #112]	; (800af68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d018      	beq.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af04:	d013      	beq.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a18      	ldr	r2, [pc, #96]	; (800af6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d00e      	beq.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a16      	ldr	r2, [pc, #88]	; (800af70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d009      	beq.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a15      	ldr	r2, [pc, #84]	; (800af74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d004      	beq.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a13      	ldr	r2, [pc, #76]	; (800af78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d10c      	bne.n	800af48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	68ba      	ldr	r2, [r7, #8]
 800af46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	40010000 	.word	0x40010000
 800af6c:	40000400 	.word	0x40000400
 800af70:	40000800 	.word	0x40000800
 800af74:	40000c00 	.word	0x40000c00
 800af78:	40014000 	.word	0x40014000

0800af7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af84:	bf00      	nop
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af98:	bf00      	nop
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b087      	sub	sp, #28
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	f003 031f 	and.w	r3, r3, #31
 800afb6:	2204      	movs	r2, #4
 800afb8:	fa02 f303 	lsl.w	r3, r2, r3
 800afbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6a1a      	ldr	r2, [r3, #32]
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	43db      	mvns	r3, r3
 800afc6:	401a      	ands	r2, r3
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6a1a      	ldr	r2, [r3, #32]
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	f003 031f 	and.w	r3, r3, #31
 800afd6:	6879      	ldr	r1, [r7, #4]
 800afd8:	fa01 f303 	lsl.w	r3, r1, r3
 800afdc:	431a      	orrs	r2, r3
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	621a      	str	r2, [r3, #32]
}
 800afe2:	bf00      	nop
 800afe4:	371c      	adds	r7, #28
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b082      	sub	sp, #8
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	e03f      	b.n	800b080 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b006:	b2db      	uxtb	r3, r3
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d106      	bne.n	800b01a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f7f9 fc99 	bl	800494c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2224      	movs	r2, #36	; 0x24
 800b01e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68da      	ldr	r2, [r3, #12]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b030:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 fd88 	bl	800bb48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	691a      	ldr	r2, [r3, #16]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b046:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	695a      	ldr	r2, [r3, #20]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b056:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	68da      	ldr	r2, [r3, #12]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b066:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2220      	movs	r2, #32
 800b072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2220      	movs	r2, #32
 800b07a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b08a      	sub	sp, #40	; 0x28
 800b08c:	af02      	add	r7, sp, #8
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	603b      	str	r3, [r7, #0]
 800b094:	4613      	mov	r3, r2
 800b096:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b098:	2300      	movs	r3, #0
 800b09a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	2b20      	cmp	r3, #32
 800b0a6:	d17c      	bne.n	800b1a2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d002      	beq.n	800b0b4 <HAL_UART_Transmit+0x2c>
 800b0ae:	88fb      	ldrh	r3, [r7, #6]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d101      	bne.n	800b0b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e075      	b.n	800b1a4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d101      	bne.n	800b0c6 <HAL_UART_Transmit+0x3e>
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	e06e      	b.n	800b1a4 <HAL_UART_Transmit+0x11c>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2221      	movs	r2, #33	; 0x21
 800b0d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b0dc:	f7f9 fd88 	bl	8004bf0 <HAL_GetTick>
 800b0e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	88fa      	ldrh	r2, [r7, #6]
 800b0e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	88fa      	ldrh	r2, [r7, #6]
 800b0ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0f6:	d108      	bne.n	800b10a <HAL_UART_Transmit+0x82>
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d104      	bne.n	800b10a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b100:	2300      	movs	r3, #0
 800b102:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	61bb      	str	r3, [r7, #24]
 800b108:	e003      	b.n	800b112 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b10e:	2300      	movs	r3, #0
 800b110:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b11a:	e02a      	b.n	800b172 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	2200      	movs	r2, #0
 800b124:	2180      	movs	r1, #128	; 0x80
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	f000 fb0a 	bl	800b740 <UART_WaitOnFlagUntilTimeout>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d001      	beq.n	800b136 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b132:	2303      	movs	r3, #3
 800b134:	e036      	b.n	800b1a4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10b      	bne.n	800b154 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	881b      	ldrh	r3, [r3, #0]
 800b140:	461a      	mov	r2, r3
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b14a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	3302      	adds	r3, #2
 800b150:	61bb      	str	r3, [r7, #24]
 800b152:	e007      	b.n	800b164 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	781a      	ldrb	r2, [r3, #0]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	3301      	adds	r3, #1
 800b162:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b168:	b29b      	uxth	r3, r3
 800b16a:	3b01      	subs	r3, #1
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b176:	b29b      	uxth	r3, r3
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1cf      	bne.n	800b11c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	2200      	movs	r2, #0
 800b184:	2140      	movs	r1, #64	; 0x40
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f000 fada 	bl	800b740 <UART_WaitOnFlagUntilTimeout>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d001      	beq.n	800b196 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b192:	2303      	movs	r3, #3
 800b194:	e006      	b.n	800b1a4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2220      	movs	r2, #32
 800b19a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	e000      	b.n	800b1a4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b1a2:	2302      	movs	r3, #2
  }
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3720      	adds	r7, #32
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b086      	sub	sp, #24
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b20      	cmp	r3, #32
 800b1c4:	d13c      	bne.n	800b240 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d002      	beq.n	800b1d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800b1cc:	88fb      	ldrh	r3, [r7, #6]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d101      	bne.n	800b1d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e035      	b.n	800b242 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d101      	bne.n	800b1e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	e02e      	b.n	800b242 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b1f2:	88fb      	ldrh	r3, [r7, #6]
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	68b9      	ldr	r1, [r7, #8]
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	f000 faeb 	bl	800b7d4 <UART_Start_Receive_DMA>
 800b1fe:	4603      	mov	r3, r0
 800b200:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b202:	7dfb      	ldrb	r3, [r7, #23]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d119      	bne.n	800b23c <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d113      	bne.n	800b238 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b210:	2300      	movs	r3, #0
 800b212:	613b      	str	r3, [r7, #16]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	613b      	str	r3, [r7, #16]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	613b      	str	r3, [r7, #16]
 800b224:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68da      	ldr	r2, [r3, #12]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f042 0210 	orr.w	r2, r2, #16
 800b234:	60da      	str	r2, [r3, #12]
 800b236:	e001      	b.n	800b23c <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800b23c:	7dfb      	ldrb	r3, [r7, #23]
 800b23e:	e000      	b.n	800b242 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 800b240:	2302      	movs	r3, #2
  }
}
 800b242:	4618      	mov	r0, r3
 800b244:	3718      	adds	r7, #24
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
	...

0800b24c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b08a      	sub	sp, #40	; 0x28
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	695b      	ldr	r3, [r3, #20]
 800b26a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800b26c:	2300      	movs	r3, #0
 800b26e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800b270:	2300      	movs	r3, #0
 800b272:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b276:	f003 030f 	and.w	r3, r3, #15
 800b27a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10d      	bne.n	800b29e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b284:	f003 0320 	and.w	r3, r3, #32
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d008      	beq.n	800b29e <HAL_UART_IRQHandler+0x52>
 800b28c:	6a3b      	ldr	r3, [r7, #32]
 800b28e:	f003 0320 	and.w	r3, r3, #32
 800b292:	2b00      	cmp	r3, #0
 800b294:	d003      	beq.n	800b29e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 fbbf 	bl	800ba1a <UART_Receive_IT>
      return;
 800b29c:	e17c      	b.n	800b598 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f000 80b1 	beq.w	800b408 <HAL_UART_IRQHandler+0x1bc>
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	f003 0301 	and.w	r3, r3, #1
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d105      	bne.n	800b2bc <HAL_UART_IRQHandler+0x70>
 800b2b0:	6a3b      	ldr	r3, [r7, #32]
 800b2b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f000 80a6 	beq.w	800b408 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00a      	beq.n	800b2dc <HAL_UART_IRQHandler+0x90>
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d005      	beq.n	800b2dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d4:	f043 0201 	orr.w	r2, r3, #1
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2de:	f003 0304 	and.w	r3, r3, #4
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00a      	beq.n	800b2fc <HAL_UART_IRQHandler+0xb0>
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	f003 0301 	and.w	r3, r3, #1
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d005      	beq.n	800b2fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f4:	f043 0202 	orr.w	r2, r3, #2
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fe:	f003 0302 	and.w	r3, r3, #2
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00a      	beq.n	800b31c <HAL_UART_IRQHandler+0xd0>
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	f003 0301 	and.w	r3, r3, #1
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d005      	beq.n	800b31c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b314:	f043 0204 	orr.w	r2, r3, #4
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31e:	f003 0308 	and.w	r3, r3, #8
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00f      	beq.n	800b346 <HAL_UART_IRQHandler+0xfa>
 800b326:	6a3b      	ldr	r3, [r7, #32]
 800b328:	f003 0320 	and.w	r3, r3, #32
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d104      	bne.n	800b33a <HAL_UART_IRQHandler+0xee>
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	f003 0301 	and.w	r3, r3, #1
 800b336:	2b00      	cmp	r3, #0
 800b338:	d005      	beq.n	800b346 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33e:	f043 0208 	orr.w	r2, r3, #8
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f000 811f 	beq.w	800b58e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b352:	f003 0320 	and.w	r3, r3, #32
 800b356:	2b00      	cmp	r3, #0
 800b358:	d007      	beq.n	800b36a <HAL_UART_IRQHandler+0x11e>
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	f003 0320 	and.w	r3, r3, #32
 800b360:	2b00      	cmp	r3, #0
 800b362:	d002      	beq.n	800b36a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fb58 	bl	800ba1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	695b      	ldr	r3, [r3, #20]
 800b370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b374:	2b40      	cmp	r3, #64	; 0x40
 800b376:	bf0c      	ite	eq
 800b378:	2301      	moveq	r3, #1
 800b37a:	2300      	movne	r3, #0
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b384:	f003 0308 	and.w	r3, r3, #8
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d102      	bne.n	800b392 <HAL_UART_IRQHandler+0x146>
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d031      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 fa98 	bl	800b8c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	695b      	ldr	r3, [r3, #20]
 800b39e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a2:	2b40      	cmp	r3, #64	; 0x40
 800b3a4:	d123      	bne.n	800b3ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	695a      	ldr	r2, [r3, #20]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d013      	beq.n	800b3e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c2:	4a77      	ldr	r2, [pc, #476]	; (800b5a0 <HAL_UART_IRQHandler+0x354>)
 800b3c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7fa fb34 	bl	8005a38 <HAL_DMA_Abort_IT>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d016      	beq.n	800b404 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b3e0:	4610      	mov	r0, r2
 800b3e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3e4:	e00e      	b.n	800b404 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f7f8 fbc4 	bl	8003b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3ec:	e00a      	b.n	800b404 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7f8 fbc0 	bl	8003b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3f4:	e006      	b.n	800b404 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f7f8 fbbc 	bl	8003b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b402:	e0c4      	b.n	800b58e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b404:	bf00      	nop
    return;
 800b406:	e0c2      	b.n	800b58e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	f040 80a2 	bne.w	800b556 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b414:	f003 0310 	and.w	r3, r3, #16
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f000 809c 	beq.w	800b556 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800b41e:	6a3b      	ldr	r3, [r7, #32]
 800b420:	f003 0310 	and.w	r3, r3, #16
 800b424:	2b00      	cmp	r3, #0
 800b426:	f000 8096 	beq.w	800b556 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b42a:	2300      	movs	r3, #0
 800b42c:	60fb      	str	r3, [r7, #12]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	60fb      	str	r3, [r7, #12]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	60fb      	str	r3, [r7, #12]
 800b43e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	695b      	ldr	r3, [r3, #20]
 800b446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b44a:	2b40      	cmp	r3, #64	; 0x40
 800b44c:	d14f      	bne.n	800b4ee <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800b458:	8a3b      	ldrh	r3, [r7, #16]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f000 8099 	beq.w	800b592 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b464:	8a3a      	ldrh	r2, [r7, #16]
 800b466:	429a      	cmp	r2, r3
 800b468:	f080 8093 	bcs.w	800b592 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	8a3a      	ldrh	r2, [r7, #16]
 800b470:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b476:	69db      	ldr	r3, [r3, #28]
 800b478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b47c:	d02b      	beq.n	800b4d6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68da      	ldr	r2, [r3, #12]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b48c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	695a      	ldr	r2, [r3, #20]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f022 0201 	bic.w	r2, r2, #1
 800b49c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	695a      	ldr	r2, [r3, #20]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4ac:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2220      	movs	r2, #32
 800b4b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68da      	ldr	r2, [r3, #12]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f022 0210 	bic.w	r2, r2, #16
 800b4ca:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fa fa41 	bl	8005958 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7f8 faee 	bl	8003ac8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b4ec:	e051      	b.n	800b592 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b500:	b29b      	uxth	r3, r3
 800b502:	2b00      	cmp	r3, #0
 800b504:	d047      	beq.n	800b596 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800b506:	8a7b      	ldrh	r3, [r7, #18]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d044      	beq.n	800b596 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	68da      	ldr	r2, [r3, #12]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b51a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	695a      	ldr	r2, [r3, #20]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f022 0201 	bic.w	r2, r2, #1
 800b52a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2220      	movs	r2, #32
 800b530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68da      	ldr	r2, [r3, #12]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f022 0210 	bic.w	r2, r2, #16
 800b548:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b54a:	8a7b      	ldrh	r3, [r7, #18]
 800b54c:	4619      	mov	r1, r3
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f7f8 faba 	bl	8003ac8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b554:	e01f      	b.n	800b596 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d008      	beq.n	800b572 <HAL_UART_IRQHandler+0x326>
 800b560:	6a3b      	ldr	r3, [r7, #32]
 800b562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b566:	2b00      	cmp	r3, #0
 800b568:	d003      	beq.n	800b572 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f9ed 	bl	800b94a <UART_Transmit_IT>
    return;
 800b570:	e012      	b.n	800b598 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00d      	beq.n	800b598 <HAL_UART_IRQHandler+0x34c>
 800b57c:	6a3b      	ldr	r3, [r7, #32]
 800b57e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b582:	2b00      	cmp	r3, #0
 800b584:	d008      	beq.n	800b598 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 fa2f 	bl	800b9ea <UART_EndTransmit_IT>
    return;
 800b58c:	e004      	b.n	800b598 <HAL_UART_IRQHandler+0x34c>
    return;
 800b58e:	bf00      	nop
 800b590:	e002      	b.n	800b598 <HAL_UART_IRQHandler+0x34c>
      return;
 800b592:	bf00      	nop
 800b594:	e000      	b.n	800b598 <HAL_UART_IRQHandler+0x34c>
      return;
 800b596:	bf00      	nop
  }
}
 800b598:	3728      	adds	r7, #40	; 0x28
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	0800b923 	.word	0x0800b923

0800b5a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b5ac:	bf00      	nop
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ec:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d12a      	bne.n	800b652 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2200      	movs	r2, #0
 800b600:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	68da      	ldr	r2, [r3, #12]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b610:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	695a      	ldr	r2, [r3, #20]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f022 0201 	bic.w	r2, r2, #1
 800b620:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	695a      	ldr	r2, [r3, #20]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b630:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2220      	movs	r2, #32
 800b636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d107      	bne.n	800b652 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	68da      	ldr	r2, [r3, #12]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f022 0210 	bic.w	r2, r2, #16
 800b650:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b656:	2b01      	cmp	r3, #1
 800b658:	d106      	bne.n	800b668 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b65e:	4619      	mov	r1, r3
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f7f8 fa31 	bl	8003ac8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b666:	e002      	b.n	800b66e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f7ff ffa5 	bl	800b5b8 <HAL_UART_RxCpltCallback>
}
 800b66e:	bf00      	nop
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b084      	sub	sp, #16
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b682:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d108      	bne.n	800b69e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b690:	085b      	lsrs	r3, r3, #1
 800b692:	b29b      	uxth	r3, r3
 800b694:	4619      	mov	r1, r3
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f7f8 fa16 	bl	8003ac8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b69c:	e002      	b.n	800b6a4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b69e:	68f8      	ldr	r0, [r7, #12]
 800b6a0:	f7ff ff94 	bl	800b5cc <HAL_UART_RxHalfCpltCallback>
}
 800b6a4:	bf00      	nop
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	695b      	ldr	r3, [r3, #20]
 800b6c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6c8:	2b80      	cmp	r3, #128	; 0x80
 800b6ca:	bf0c      	ite	eq
 800b6cc:	2301      	moveq	r3, #1
 800b6ce:	2300      	movne	r3, #0
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	2b21      	cmp	r3, #33	; 0x21
 800b6de:	d108      	bne.n	800b6f2 <UART_DMAError+0x46>
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d005      	beq.n	800b6f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b6ec:	68b8      	ldr	r0, [r7, #8]
 800b6ee:	f000 f8d5 	bl	800b89c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	695b      	ldr	r3, [r3, #20]
 800b6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6fc:	2b40      	cmp	r3, #64	; 0x40
 800b6fe:	bf0c      	ite	eq
 800b700:	2301      	moveq	r3, #1
 800b702:	2300      	movne	r3, #0
 800b704:	b2db      	uxtb	r3, r3
 800b706:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	2b22      	cmp	r3, #34	; 0x22
 800b712:	d108      	bne.n	800b726 <UART_DMAError+0x7a>
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d005      	beq.n	800b726 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	2200      	movs	r2, #0
 800b71e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b720:	68b8      	ldr	r0, [r7, #8]
 800b722:	f000 f8d1 	bl	800b8c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b72a:	f043 0210 	orr.w	r2, r3, #16
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b732:	68b8      	ldr	r0, [r7, #8]
 800b734:	f7f8 fa1e 	bl	8003b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b738:	bf00      	nop
 800b73a:	3710      	adds	r7, #16
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	603b      	str	r3, [r7, #0]
 800b74c:	4613      	mov	r3, r2
 800b74e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b750:	e02c      	b.n	800b7ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b758:	d028      	beq.n	800b7ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d007      	beq.n	800b770 <UART_WaitOnFlagUntilTimeout+0x30>
 800b760:	f7f9 fa46 	bl	8004bf0 <HAL_GetTick>
 800b764:	4602      	mov	r2, r0
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	69ba      	ldr	r2, [r7, #24]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d21d      	bcs.n	800b7ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68da      	ldr	r2, [r3, #12]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b77e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	695a      	ldr	r2, [r3, #20]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f022 0201 	bic.w	r2, r2, #1
 800b78e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2220      	movs	r2, #32
 800b794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2220      	movs	r2, #32
 800b79c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b7a8:	2303      	movs	r3, #3
 800b7aa:	e00f      	b.n	800b7cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	4013      	ands	r3, r2
 800b7b6:	68ba      	ldr	r2, [r7, #8]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	bf0c      	ite	eq
 800b7bc:	2301      	moveq	r3, #1
 800b7be:	2300      	movne	r3, #0
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	79fb      	ldrb	r3, [r7, #7]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d0c3      	beq.n	800b752 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	4613      	mov	r3, r2
 800b7e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	88fa      	ldrh	r2, [r7, #6]
 800b7ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2222      	movs	r2, #34	; 0x22
 800b7f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b800:	4a23      	ldr	r2, [pc, #140]	; (800b890 <UART_Start_Receive_DMA+0xbc>)
 800b802:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b808:	4a22      	ldr	r2, [pc, #136]	; (800b894 <UART_Start_Receive_DMA+0xc0>)
 800b80a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b810:	4a21      	ldr	r2, [pc, #132]	; (800b898 <UART_Start_Receive_DMA+0xc4>)
 800b812:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b818:	2200      	movs	r2, #0
 800b81a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b81c:	f107 0308 	add.w	r3, r7, #8
 800b820:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	3304      	adds	r3, #4
 800b82c:	4619      	mov	r1, r3
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	88fb      	ldrh	r3, [r7, #6]
 800b834:	f7fa f838 	bl	80058a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b838:	2300      	movs	r3, #0
 800b83a:	613b      	str	r3, [r7, #16]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	613b      	str	r3, [r7, #16]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	613b      	str	r3, [r7, #16]
 800b84c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68da      	ldr	r2, [r3, #12]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b864:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	695a      	ldr	r2, [r3, #20]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f042 0201 	orr.w	r2, r2, #1
 800b874:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	695a      	ldr	r2, [r3, #20]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b884:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b886:	2300      	movs	r3, #0
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3718      	adds	r7, #24
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	0800b5e1 	.word	0x0800b5e1
 800b894:	0800b677 	.word	0x0800b677
 800b898:	0800b6ad 	.word	0x0800b6ad

0800b89c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	68da      	ldr	r2, [r3, #12]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b8b2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2220      	movs	r2, #32
 800b8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b8bc:	bf00      	nop
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	68da      	ldr	r2, [r3, #12]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b8de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	695a      	ldr	r2, [r3, #20]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f022 0201 	bic.w	r2, r2, #1
 800b8ee:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d107      	bne.n	800b908 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	68da      	ldr	r2, [r3, #12]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f022 0210 	bic.w	r2, r2, #16
 800b906:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2220      	movs	r2, #32
 800b90c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b916:	bf00      	nop
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b084      	sub	sp, #16
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b92e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2200      	movs	r2, #0
 800b934:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f7f8 f919 	bl	8003b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b942:	bf00      	nop
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b94a:	b480      	push	{r7}
 800b94c:	b085      	sub	sp, #20
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	2b21      	cmp	r3, #33	; 0x21
 800b95c:	d13e      	bne.n	800b9dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b966:	d114      	bne.n	800b992 <UART_Transmit_IT+0x48>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d110      	bne.n	800b992 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a1b      	ldr	r3, [r3, #32]
 800b974:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	881b      	ldrh	r3, [r3, #0]
 800b97a:	461a      	mov	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b984:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6a1b      	ldr	r3, [r3, #32]
 800b98a:	1c9a      	adds	r2, r3, #2
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	621a      	str	r2, [r3, #32]
 800b990:	e008      	b.n	800b9a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	1c59      	adds	r1, r3, #1
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	6211      	str	r1, [r2, #32]
 800b99c:	781a      	ldrb	r2, [r3, #0]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10f      	bne.n	800b9d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	68da      	ldr	r2, [r3, #12]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b9c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68da      	ldr	r2, [r3, #12]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	e000      	b.n	800b9de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b9dc:	2302      	movs	r3, #2
  }
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3714      	adds	r7, #20
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr

0800b9ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b082      	sub	sp, #8
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	68da      	ldr	r2, [r3, #12]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2220      	movs	r2, #32
 800ba06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f7ff fdca 	bl	800b5a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b084      	sub	sp, #16
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	2b22      	cmp	r3, #34	; 0x22
 800ba2c:	f040 8087 	bne.w	800bb3e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba38:	d117      	bne.n	800ba6a <UART_Receive_IT+0x50>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	691b      	ldr	r3, [r3, #16]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d113      	bne.n	800ba6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ba42:	2300      	movs	r3, #0
 800ba44:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba62:	1c9a      	adds	r2, r3, #2
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	629a      	str	r2, [r3, #40]	; 0x28
 800ba68:	e026      	b.n	800bab8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba6e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800ba70:	2300      	movs	r3, #0
 800ba72:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba7c:	d007      	beq.n	800ba8e <UART_Receive_IT+0x74>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d10a      	bne.n	800ba9c <UART_Receive_IT+0x82>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d106      	bne.n	800ba9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	b2da      	uxtb	r2, r3
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	701a      	strb	r2, [r3, #0]
 800ba9a:	e008      	b.n	800baae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baa8:	b2da      	uxtb	r2, r3
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800babc:	b29b      	uxth	r3, r3
 800babe:	3b01      	subs	r3, #1
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	4619      	mov	r1, r3
 800bac6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d136      	bne.n	800bb3a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	68da      	ldr	r2, [r3, #12]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f022 0220 	bic.w	r2, r2, #32
 800bada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	68da      	ldr	r2, [r3, #12]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800baea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	695a      	ldr	r2, [r3, #20]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f022 0201 	bic.w	r2, r2, #1
 800bafa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2220      	movs	r2, #32
 800bb00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d10e      	bne.n	800bb2a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	68da      	ldr	r2, [r3, #12]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f022 0210 	bic.w	r2, r2, #16
 800bb1a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bb20:	4619      	mov	r1, r3
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7f7 ffd0 	bl	8003ac8 <HAL_UARTEx_RxEventCallback>
 800bb28:	e002      	b.n	800bb30 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f7ff fd44 	bl	800b5b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	e002      	b.n	800bb40 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e000      	b.n	800bb40 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800bb3e:	2302      	movs	r3, #2
  }
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4c:	b09f      	sub	sp, #124	; 0x7c
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	691b      	ldr	r3, [r3, #16]
 800bb58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bb5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb5e:	68d9      	ldr	r1, [r3, #12]
 800bb60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	ea40 0301 	orr.w	r3, r0, r1
 800bb68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bb6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb6c:	689a      	ldr	r2, [r3, #8]
 800bb6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	431a      	orrs	r2, r3
 800bb74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb76:	695b      	ldr	r3, [r3, #20]
 800bb78:	431a      	orrs	r2, r3
 800bb7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb7c:	69db      	ldr	r3, [r3, #28]
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800bb82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bb8c:	f021 010c 	bic.w	r1, r1, #12
 800bb90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb96:	430b      	orrs	r3, r1
 800bb98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bb9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	695b      	ldr	r3, [r3, #20]
 800bba0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bba6:	6999      	ldr	r1, [r3, #24]
 800bba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	ea40 0301 	orr.w	r3, r0, r1
 800bbb0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bbb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	4bc5      	ldr	r3, [pc, #788]	; (800becc <UART_SetConfig+0x384>)
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d004      	beq.n	800bbc6 <UART_SetConfig+0x7e>
 800bbbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	4bc3      	ldr	r3, [pc, #780]	; (800bed0 <UART_SetConfig+0x388>)
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d103      	bne.n	800bbce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bbc6:	f7fe f823 	bl	8009c10 <HAL_RCC_GetPCLK2Freq>
 800bbca:	6778      	str	r0, [r7, #116]	; 0x74
 800bbcc:	e002      	b.n	800bbd4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bbce:	f7fe f80b 	bl	8009be8 <HAL_RCC_GetPCLK1Freq>
 800bbd2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bbd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbd6:	69db      	ldr	r3, [r3, #28]
 800bbd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbdc:	f040 80b6 	bne.w	800bd4c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bbe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbe2:	461c      	mov	r4, r3
 800bbe4:	f04f 0500 	mov.w	r5, #0
 800bbe8:	4622      	mov	r2, r4
 800bbea:	462b      	mov	r3, r5
 800bbec:	1891      	adds	r1, r2, r2
 800bbee:	6439      	str	r1, [r7, #64]	; 0x40
 800bbf0:	415b      	adcs	r3, r3
 800bbf2:	647b      	str	r3, [r7, #68]	; 0x44
 800bbf4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bbf8:	1912      	adds	r2, r2, r4
 800bbfa:	eb45 0303 	adc.w	r3, r5, r3
 800bbfe:	f04f 0000 	mov.w	r0, #0
 800bc02:	f04f 0100 	mov.w	r1, #0
 800bc06:	00d9      	lsls	r1, r3, #3
 800bc08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bc0c:	00d0      	lsls	r0, r2, #3
 800bc0e:	4602      	mov	r2, r0
 800bc10:	460b      	mov	r3, r1
 800bc12:	1911      	adds	r1, r2, r4
 800bc14:	6639      	str	r1, [r7, #96]	; 0x60
 800bc16:	416b      	adcs	r3, r5
 800bc18:	667b      	str	r3, [r7, #100]	; 0x64
 800bc1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	461a      	mov	r2, r3
 800bc20:	f04f 0300 	mov.w	r3, #0
 800bc24:	1891      	adds	r1, r2, r2
 800bc26:	63b9      	str	r1, [r7, #56]	; 0x38
 800bc28:	415b      	adcs	r3, r3
 800bc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bc30:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800bc34:	f7f5 f810 	bl	8000c58 <__aeabi_uldivmod>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4ba5      	ldr	r3, [pc, #660]	; (800bed4 <UART_SetConfig+0x38c>)
 800bc3e:	fba3 2302 	umull	r2, r3, r3, r2
 800bc42:	095b      	lsrs	r3, r3, #5
 800bc44:	011e      	lsls	r6, r3, #4
 800bc46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc48:	461c      	mov	r4, r3
 800bc4a:	f04f 0500 	mov.w	r5, #0
 800bc4e:	4622      	mov	r2, r4
 800bc50:	462b      	mov	r3, r5
 800bc52:	1891      	adds	r1, r2, r2
 800bc54:	6339      	str	r1, [r7, #48]	; 0x30
 800bc56:	415b      	adcs	r3, r3
 800bc58:	637b      	str	r3, [r7, #52]	; 0x34
 800bc5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800bc5e:	1912      	adds	r2, r2, r4
 800bc60:	eb45 0303 	adc.w	r3, r5, r3
 800bc64:	f04f 0000 	mov.w	r0, #0
 800bc68:	f04f 0100 	mov.w	r1, #0
 800bc6c:	00d9      	lsls	r1, r3, #3
 800bc6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bc72:	00d0      	lsls	r0, r2, #3
 800bc74:	4602      	mov	r2, r0
 800bc76:	460b      	mov	r3, r1
 800bc78:	1911      	adds	r1, r2, r4
 800bc7a:	65b9      	str	r1, [r7, #88]	; 0x58
 800bc7c:	416b      	adcs	r3, r5
 800bc7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	461a      	mov	r2, r3
 800bc86:	f04f 0300 	mov.w	r3, #0
 800bc8a:	1891      	adds	r1, r2, r2
 800bc8c:	62b9      	str	r1, [r7, #40]	; 0x28
 800bc8e:	415b      	adcs	r3, r3
 800bc90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bc96:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800bc9a:	f7f4 ffdd 	bl	8000c58 <__aeabi_uldivmod>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	460b      	mov	r3, r1
 800bca2:	4b8c      	ldr	r3, [pc, #560]	; (800bed4 <UART_SetConfig+0x38c>)
 800bca4:	fba3 1302 	umull	r1, r3, r3, r2
 800bca8:	095b      	lsrs	r3, r3, #5
 800bcaa:	2164      	movs	r1, #100	; 0x64
 800bcac:	fb01 f303 	mul.w	r3, r1, r3
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	00db      	lsls	r3, r3, #3
 800bcb4:	3332      	adds	r3, #50	; 0x32
 800bcb6:	4a87      	ldr	r2, [pc, #540]	; (800bed4 <UART_SetConfig+0x38c>)
 800bcb8:	fba2 2303 	umull	r2, r3, r2, r3
 800bcbc:	095b      	lsrs	r3, r3, #5
 800bcbe:	005b      	lsls	r3, r3, #1
 800bcc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bcc4:	441e      	add	r6, r3
 800bcc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f04f 0100 	mov.w	r1, #0
 800bcce:	4602      	mov	r2, r0
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	1894      	adds	r4, r2, r2
 800bcd4:	623c      	str	r4, [r7, #32]
 800bcd6:	415b      	adcs	r3, r3
 800bcd8:	627b      	str	r3, [r7, #36]	; 0x24
 800bcda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bcde:	1812      	adds	r2, r2, r0
 800bce0:	eb41 0303 	adc.w	r3, r1, r3
 800bce4:	f04f 0400 	mov.w	r4, #0
 800bce8:	f04f 0500 	mov.w	r5, #0
 800bcec:	00dd      	lsls	r5, r3, #3
 800bcee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bcf2:	00d4      	lsls	r4, r2, #3
 800bcf4:	4622      	mov	r2, r4
 800bcf6:	462b      	mov	r3, r5
 800bcf8:	1814      	adds	r4, r2, r0
 800bcfa:	653c      	str	r4, [r7, #80]	; 0x50
 800bcfc:	414b      	adcs	r3, r1
 800bcfe:	657b      	str	r3, [r7, #84]	; 0x54
 800bd00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	461a      	mov	r2, r3
 800bd06:	f04f 0300 	mov.w	r3, #0
 800bd0a:	1891      	adds	r1, r2, r2
 800bd0c:	61b9      	str	r1, [r7, #24]
 800bd0e:	415b      	adcs	r3, r3
 800bd10:	61fb      	str	r3, [r7, #28]
 800bd12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bd16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800bd1a:	f7f4 ff9d 	bl	8000c58 <__aeabi_uldivmod>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	460b      	mov	r3, r1
 800bd22:	4b6c      	ldr	r3, [pc, #432]	; (800bed4 <UART_SetConfig+0x38c>)
 800bd24:	fba3 1302 	umull	r1, r3, r3, r2
 800bd28:	095b      	lsrs	r3, r3, #5
 800bd2a:	2164      	movs	r1, #100	; 0x64
 800bd2c:	fb01 f303 	mul.w	r3, r1, r3
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	00db      	lsls	r3, r3, #3
 800bd34:	3332      	adds	r3, #50	; 0x32
 800bd36:	4a67      	ldr	r2, [pc, #412]	; (800bed4 <UART_SetConfig+0x38c>)
 800bd38:	fba2 2303 	umull	r2, r3, r2, r3
 800bd3c:	095b      	lsrs	r3, r3, #5
 800bd3e:	f003 0207 	and.w	r2, r3, #7
 800bd42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4432      	add	r2, r6
 800bd48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bd4a:	e0b9      	b.n	800bec0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bd4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd4e:	461c      	mov	r4, r3
 800bd50:	f04f 0500 	mov.w	r5, #0
 800bd54:	4622      	mov	r2, r4
 800bd56:	462b      	mov	r3, r5
 800bd58:	1891      	adds	r1, r2, r2
 800bd5a:	6139      	str	r1, [r7, #16]
 800bd5c:	415b      	adcs	r3, r3
 800bd5e:	617b      	str	r3, [r7, #20]
 800bd60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bd64:	1912      	adds	r2, r2, r4
 800bd66:	eb45 0303 	adc.w	r3, r5, r3
 800bd6a:	f04f 0000 	mov.w	r0, #0
 800bd6e:	f04f 0100 	mov.w	r1, #0
 800bd72:	00d9      	lsls	r1, r3, #3
 800bd74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bd78:	00d0      	lsls	r0, r2, #3
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	eb12 0804 	adds.w	r8, r2, r4
 800bd82:	eb43 0905 	adc.w	r9, r3, r5
 800bd86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f04f 0100 	mov.w	r1, #0
 800bd90:	f04f 0200 	mov.w	r2, #0
 800bd94:	f04f 0300 	mov.w	r3, #0
 800bd98:	008b      	lsls	r3, r1, #2
 800bd9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bd9e:	0082      	lsls	r2, r0, #2
 800bda0:	4640      	mov	r0, r8
 800bda2:	4649      	mov	r1, r9
 800bda4:	f7f4 ff58 	bl	8000c58 <__aeabi_uldivmod>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	460b      	mov	r3, r1
 800bdac:	4b49      	ldr	r3, [pc, #292]	; (800bed4 <UART_SetConfig+0x38c>)
 800bdae:	fba3 2302 	umull	r2, r3, r3, r2
 800bdb2:	095b      	lsrs	r3, r3, #5
 800bdb4:	011e      	lsls	r6, r3, #4
 800bdb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f04f 0100 	mov.w	r1, #0
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	1894      	adds	r4, r2, r2
 800bdc4:	60bc      	str	r4, [r7, #8]
 800bdc6:	415b      	adcs	r3, r3
 800bdc8:	60fb      	str	r3, [r7, #12]
 800bdca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bdce:	1812      	adds	r2, r2, r0
 800bdd0:	eb41 0303 	adc.w	r3, r1, r3
 800bdd4:	f04f 0400 	mov.w	r4, #0
 800bdd8:	f04f 0500 	mov.w	r5, #0
 800bddc:	00dd      	lsls	r5, r3, #3
 800bdde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bde2:	00d4      	lsls	r4, r2, #3
 800bde4:	4622      	mov	r2, r4
 800bde6:	462b      	mov	r3, r5
 800bde8:	1814      	adds	r4, r2, r0
 800bdea:	64bc      	str	r4, [r7, #72]	; 0x48
 800bdec:	414b      	adcs	r3, r1
 800bdee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f04f 0100 	mov.w	r1, #0
 800bdfa:	f04f 0200 	mov.w	r2, #0
 800bdfe:	f04f 0300 	mov.w	r3, #0
 800be02:	008b      	lsls	r3, r1, #2
 800be04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800be08:	0082      	lsls	r2, r0, #2
 800be0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800be0e:	f7f4 ff23 	bl	8000c58 <__aeabi_uldivmod>
 800be12:	4602      	mov	r2, r0
 800be14:	460b      	mov	r3, r1
 800be16:	4b2f      	ldr	r3, [pc, #188]	; (800bed4 <UART_SetConfig+0x38c>)
 800be18:	fba3 1302 	umull	r1, r3, r3, r2
 800be1c:	095b      	lsrs	r3, r3, #5
 800be1e:	2164      	movs	r1, #100	; 0x64
 800be20:	fb01 f303 	mul.w	r3, r1, r3
 800be24:	1ad3      	subs	r3, r2, r3
 800be26:	011b      	lsls	r3, r3, #4
 800be28:	3332      	adds	r3, #50	; 0x32
 800be2a:	4a2a      	ldr	r2, [pc, #168]	; (800bed4 <UART_SetConfig+0x38c>)
 800be2c:	fba2 2303 	umull	r2, r3, r2, r3
 800be30:	095b      	lsrs	r3, r3, #5
 800be32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be36:	441e      	add	r6, r3
 800be38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be3a:	4618      	mov	r0, r3
 800be3c:	f04f 0100 	mov.w	r1, #0
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	1894      	adds	r4, r2, r2
 800be46:	603c      	str	r4, [r7, #0]
 800be48:	415b      	adcs	r3, r3
 800be4a:	607b      	str	r3, [r7, #4]
 800be4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be50:	1812      	adds	r2, r2, r0
 800be52:	eb41 0303 	adc.w	r3, r1, r3
 800be56:	f04f 0400 	mov.w	r4, #0
 800be5a:	f04f 0500 	mov.w	r5, #0
 800be5e:	00dd      	lsls	r5, r3, #3
 800be60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800be64:	00d4      	lsls	r4, r2, #3
 800be66:	4622      	mov	r2, r4
 800be68:	462b      	mov	r3, r5
 800be6a:	eb12 0a00 	adds.w	sl, r2, r0
 800be6e:	eb43 0b01 	adc.w	fp, r3, r1
 800be72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	4618      	mov	r0, r3
 800be78:	f04f 0100 	mov.w	r1, #0
 800be7c:	f04f 0200 	mov.w	r2, #0
 800be80:	f04f 0300 	mov.w	r3, #0
 800be84:	008b      	lsls	r3, r1, #2
 800be86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800be8a:	0082      	lsls	r2, r0, #2
 800be8c:	4650      	mov	r0, sl
 800be8e:	4659      	mov	r1, fp
 800be90:	f7f4 fee2 	bl	8000c58 <__aeabi_uldivmod>
 800be94:	4602      	mov	r2, r0
 800be96:	460b      	mov	r3, r1
 800be98:	4b0e      	ldr	r3, [pc, #56]	; (800bed4 <UART_SetConfig+0x38c>)
 800be9a:	fba3 1302 	umull	r1, r3, r3, r2
 800be9e:	095b      	lsrs	r3, r3, #5
 800bea0:	2164      	movs	r1, #100	; 0x64
 800bea2:	fb01 f303 	mul.w	r3, r1, r3
 800bea6:	1ad3      	subs	r3, r2, r3
 800bea8:	011b      	lsls	r3, r3, #4
 800beaa:	3332      	adds	r3, #50	; 0x32
 800beac:	4a09      	ldr	r2, [pc, #36]	; (800bed4 <UART_SetConfig+0x38c>)
 800beae:	fba2 2303 	umull	r2, r3, r2, r3
 800beb2:	095b      	lsrs	r3, r3, #5
 800beb4:	f003 020f 	and.w	r2, r3, #15
 800beb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4432      	add	r2, r6
 800bebe:	609a      	str	r2, [r3, #8]
}
 800bec0:	bf00      	nop
 800bec2:	377c      	adds	r7, #124	; 0x7c
 800bec4:	46bd      	mov	sp, r7
 800bec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beca:	bf00      	nop
 800becc:	40011000 	.word	0x40011000
 800bed0:	40011400 	.word	0x40011400
 800bed4:	51eb851f 	.word	0x51eb851f

0800bed8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bed8:	b480      	push	{r7}
 800beda:	b085      	sub	sp, #20
 800bedc:	af00      	add	r7, sp, #0
 800bede:	4603      	mov	r3, r0
 800bee0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bee2:	2300      	movs	r3, #0
 800bee4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800beea:	2b84      	cmp	r3, #132	; 0x84
 800beec:	d005      	beq.n	800befa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800beee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	4413      	add	r3, r2
 800bef6:	3303      	adds	r3, #3
 800bef8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800befa:	68fb      	ldr	r3, [r7, #12]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3714      	adds	r7, #20
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf0e:	f3ef 8305 	mrs	r3, IPSR
 800bf12:	607b      	str	r3, [r7, #4]
  return(result);
 800bf14:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	bf14      	ite	ne
 800bf1a:	2301      	movne	r3, #1
 800bf1c:	2300      	moveq	r3, #0
 800bf1e:	b2db      	uxtb	r3, r3
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bf30:	f001 fae8 	bl	800d504 <vTaskStartScheduler>
  
  return osOK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bf3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf3c:	b089      	sub	sp, #36	; 0x24
 800bf3e:	af04      	add	r7, sp, #16
 800bf40:	6078      	str	r0, [r7, #4]
 800bf42:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	695b      	ldr	r3, [r3, #20]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d020      	beq.n	800bf8e <osThreadCreate+0x54>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d01c      	beq.n	800bf8e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	685c      	ldr	r4, [r3, #4]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681d      	ldr	r5, [r3, #0]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	691e      	ldr	r6, [r3, #16]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7ff ffb6 	bl	800bed8 <makeFreeRtosPriority>
 800bf6c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	695b      	ldr	r3, [r3, #20]
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf76:	9202      	str	r2, [sp, #8]
 800bf78:	9301      	str	r3, [sp, #4]
 800bf7a:	9100      	str	r1, [sp, #0]
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	4632      	mov	r2, r6
 800bf80:	4629      	mov	r1, r5
 800bf82:	4620      	mov	r0, r4
 800bf84:	f001 f8f6 	bl	800d174 <xTaskCreateStatic>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	60fb      	str	r3, [r7, #12]
 800bf8c:	e01c      	b.n	800bfc8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	685c      	ldr	r4, [r3, #4]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf9a:	b29e      	uxth	r6, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7ff ff98 	bl	800bed8 <makeFreeRtosPriority>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	f107 030c 	add.w	r3, r7, #12
 800bfae:	9301      	str	r3, [sp, #4]
 800bfb0:	9200      	str	r2, [sp, #0]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	4632      	mov	r2, r6
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	4620      	mov	r0, r4
 800bfba:	f001 f938 	bl	800d22e <xTaskCreate>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d001      	beq.n	800bfc8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	e000      	b.n	800bfca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3714      	adds	r7, #20
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bfd2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b084      	sub	sp, #16
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d001      	beq.n	800bfe8 <osDelay+0x16>
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	e000      	b.n	800bfea <osDelay+0x18>
 800bfe8:	2301      	movs	r3, #1
 800bfea:	4618      	mov	r0, r3
 800bfec:	f001 fa56 	bl	800d49c <vTaskDelay>
  
  return osOK;
 800bff0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b086      	sub	sp, #24
 800bffe:	af02      	add	r7, sp, #8
 800c000:	6078      	str	r0, [r7, #4]
 800c002:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00f      	beq.n	800c02c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d10a      	bne.n	800c028 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	2203      	movs	r2, #3
 800c018:	9200      	str	r2, [sp, #0]
 800c01a:	2200      	movs	r2, #0
 800c01c:	2100      	movs	r1, #0
 800c01e:	2001      	movs	r0, #1
 800c020:	f000 f9be 	bl	800c3a0 <xQueueGenericCreateStatic>
 800c024:	4603      	mov	r3, r0
 800c026:	e016      	b.n	800c056 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c028:	2300      	movs	r3, #0
 800c02a:	e014      	b.n	800c056 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	2b01      	cmp	r3, #1
 800c030:	d110      	bne.n	800c054 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c032:	2203      	movs	r2, #3
 800c034:	2100      	movs	r1, #0
 800c036:	2001      	movs	r0, #1
 800c038:	f000 fa2a 	bl	800c490 <xQueueGenericCreate>
 800c03c:	60f8      	str	r0, [r7, #12]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d005      	beq.n	800c050 <osSemaphoreCreate+0x56>
 800c044:	2300      	movs	r3, #0
 800c046:	2200      	movs	r2, #0
 800c048:	2100      	movs	r1, #0
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f000 fa7a 	bl	800c544 <xQueueGenericSend>
      return sema;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	e000      	b.n	800c056 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c054:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
	...

0800c060 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c06a:	2300      	movs	r3, #0
 800c06c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d101      	bne.n	800c078 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c074:	2380      	movs	r3, #128	; 0x80
 800c076:	e03a      	b.n	800c0ee <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c078:	2300      	movs	r3, #0
 800c07a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c082:	d103      	bne.n	800c08c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c088:	60fb      	str	r3, [r7, #12]
 800c08a:	e009      	b.n	800c0a0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d006      	beq.n	800c0a0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d101      	bne.n	800c0a0 <osSemaphoreWait+0x40>
      ticks = 1;
 800c09c:	2301      	movs	r3, #1
 800c09e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c0a0:	f7ff ff32 	bl	800bf08 <inHandlerMode>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d017      	beq.n	800c0da <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c0aa:	f107 0308 	add.w	r3, r7, #8
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	2100      	movs	r1, #0
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 fe58 	bl	800cd68 <xQueueReceiveFromISR>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d001      	beq.n	800c0c2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c0be:	23ff      	movs	r3, #255	; 0xff
 800c0c0:	e015      	b.n	800c0ee <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d011      	beq.n	800c0ec <osSemaphoreWait+0x8c>
 800c0c8:	4b0b      	ldr	r3, [pc, #44]	; (800c0f8 <osSemaphoreWait+0x98>)
 800c0ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ce:	601a      	str	r2, [r3, #0]
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	e008      	b.n	800c0ec <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c0da:	68f9      	ldr	r1, [r7, #12]
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 fd37 	bl	800cb50 <xQueueSemaphoreTake>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d001      	beq.n	800c0ec <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c0e8:	23ff      	movs	r3, #255	; 0xff
 800c0ea:	e000      	b.n	800c0ee <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	e000ed04 	.word	0xe000ed04

0800c0fc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c104:	2300      	movs	r3, #0
 800c106:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c108:	2300      	movs	r3, #0
 800c10a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c10c:	f7ff fefc 	bl	800bf08 <inHandlerMode>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d016      	beq.n	800c144 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c116:	f107 0308 	add.w	r3, r7, #8
 800c11a:	4619      	mov	r1, r3
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 fbaa 	bl	800c876 <xQueueGiveFromISR>
 800c122:	4603      	mov	r3, r0
 800c124:	2b01      	cmp	r3, #1
 800c126:	d001      	beq.n	800c12c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c128:	23ff      	movs	r3, #255	; 0xff
 800c12a:	e017      	b.n	800c15c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d013      	beq.n	800c15a <osSemaphoreRelease+0x5e>
 800c132:	4b0c      	ldr	r3, [pc, #48]	; (800c164 <osSemaphoreRelease+0x68>)
 800c134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c138:	601a      	str	r2, [r3, #0]
 800c13a:	f3bf 8f4f 	dsb	sy
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	e00a      	b.n	800c15a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c144:	2300      	movs	r3, #0
 800c146:	2200      	movs	r2, #0
 800c148:	2100      	movs	r1, #0
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 f9fa 	bl	800c544 <xQueueGenericSend>
 800c150:	4603      	mov	r3, r0
 800c152:	2b01      	cmp	r3, #1
 800c154:	d001      	beq.n	800c15a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c156:	23ff      	movs	r3, #255	; 0xff
 800c158:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c15a:	68fb      	ldr	r3, [r7, #12]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	e000ed04 	.word	0xe000ed04

0800c168 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f103 0208 	add.w	r2, r3, #8
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c180:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f103 0208 	add.w	r2, r3, #8
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f103 0208 	add.w	r2, r3, #8
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c1b6:	bf00      	nop
 800c1b8:	370c      	adds	r7, #12
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr

0800c1c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c1c2:	b480      	push	{r7}
 800c1c4:	b085      	sub	sp, #20
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	68fa      	ldr	r2, [r7, #12]
 800c1d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	689a      	ldr	r2, [r3, #8]
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	683a      	ldr	r2, [r7, #0]
 800c1e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	1c5a      	adds	r2, r3, #1
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	601a      	str	r2, [r3, #0]
}
 800c1fe:	bf00      	nop
 800c200:	3714      	adds	r7, #20
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr

0800c20a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c20a:	b480      	push	{r7}
 800c20c:	b085      	sub	sp, #20
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
 800c212:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c220:	d103      	bne.n	800c22a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	691b      	ldr	r3, [r3, #16]
 800c226:	60fb      	str	r3, [r7, #12]
 800c228:	e00c      	b.n	800c244 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	3308      	adds	r3, #8
 800c22e:	60fb      	str	r3, [r7, #12]
 800c230:	e002      	b.n	800c238 <vListInsert+0x2e>
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	60fb      	str	r3, [r7, #12]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	68ba      	ldr	r2, [r7, #8]
 800c240:	429a      	cmp	r2, r3
 800c242:	d2f6      	bcs.n	800c232 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	685a      	ldr	r2, [r3, #4]
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	683a      	ldr	r2, [r7, #0]
 800c252:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	683a      	ldr	r2, [r7, #0]
 800c25e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	1c5a      	adds	r2, r3, #1
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	601a      	str	r2, [r3, #0]
}
 800c270:	bf00      	nop
 800c272:	3714      	adds	r7, #20
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c27c:	b480      	push	{r7}
 800c27e:	b085      	sub	sp, #20
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	691b      	ldr	r3, [r3, #16]
 800c288:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	6892      	ldr	r2, [r2, #8]
 800c292:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	689b      	ldr	r3, [r3, #8]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	6852      	ldr	r2, [r2, #4]
 800c29c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d103      	bne.n	800c2b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	689a      	ldr	r2, [r3, #8]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	1e5a      	subs	r2, r3, #1
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3714      	adds	r7, #20
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d10a      	bne.n	800c2fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e8:	f383 8811 	msr	BASEPRI, r3
 800c2ec:	f3bf 8f6f 	isb	sy
 800c2f0:	f3bf 8f4f 	dsb	sy
 800c2f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c2f6:	bf00      	nop
 800c2f8:	e7fe      	b.n	800c2f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c2fa:	f002 fbc3 	bl	800ea84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c306:	68f9      	ldr	r1, [r7, #12]
 800c308:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c30a:	fb01 f303 	mul.w	r3, r1, r3
 800c30e:	441a      	add	r2, r3
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2200      	movs	r2, #0
 800c318:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c32a:	3b01      	subs	r3, #1
 800c32c:	68f9      	ldr	r1, [r7, #12]
 800c32e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c330:	fb01 f303 	mul.w	r3, r1, r3
 800c334:	441a      	add	r2, r3
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	22ff      	movs	r2, #255	; 0xff
 800c33e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	22ff      	movs	r2, #255	; 0xff
 800c346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d114      	bne.n	800c37a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	691b      	ldr	r3, [r3, #16]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d01a      	beq.n	800c38e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	3310      	adds	r3, #16
 800c35c:	4618      	mov	r0, r3
 800c35e:	f001 fb55 	bl	800da0c <xTaskRemoveFromEventList>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d012      	beq.n	800c38e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c368:	4b0c      	ldr	r3, [pc, #48]	; (800c39c <xQueueGenericReset+0xcc>)
 800c36a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c36e:	601a      	str	r2, [r3, #0]
 800c370:	f3bf 8f4f 	dsb	sy
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	e009      	b.n	800c38e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	3310      	adds	r3, #16
 800c37e:	4618      	mov	r0, r3
 800c380:	f7ff fef2 	bl	800c168 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	3324      	adds	r3, #36	; 0x24
 800c388:	4618      	mov	r0, r3
 800c38a:	f7ff feed 	bl	800c168 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c38e:	f002 fba9 	bl	800eae4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c392:	2301      	movs	r3, #1
}
 800c394:	4618      	mov	r0, r3
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	e000ed04 	.word	0xe000ed04

0800c3a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b08e      	sub	sp, #56	; 0x38
 800c3a4:	af02      	add	r7, sp, #8
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
 800c3ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d10a      	bne.n	800c3ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b8:	f383 8811 	msr	BASEPRI, r3
 800c3bc:	f3bf 8f6f 	isb	sy
 800c3c0:	f3bf 8f4f 	dsb	sy
 800c3c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c3c6:	bf00      	nop
 800c3c8:	e7fe      	b.n	800c3c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d10a      	bne.n	800c3e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c3e2:	bf00      	nop
 800c3e4:	e7fe      	b.n	800c3e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d002      	beq.n	800c3f2 <xQueueGenericCreateStatic+0x52>
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d001      	beq.n	800c3f6 <xQueueGenericCreateStatic+0x56>
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e000      	b.n	800c3f8 <xQueueGenericCreateStatic+0x58>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d10a      	bne.n	800c412 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c400:	f383 8811 	msr	BASEPRI, r3
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	623b      	str	r3, [r7, #32]
}
 800c40e:	bf00      	nop
 800c410:	e7fe      	b.n	800c410 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d102      	bne.n	800c41e <xQueueGenericCreateStatic+0x7e>
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <xQueueGenericCreateStatic+0x82>
 800c41e:	2301      	movs	r3, #1
 800c420:	e000      	b.n	800c424 <xQueueGenericCreateStatic+0x84>
 800c422:	2300      	movs	r3, #0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d10a      	bne.n	800c43e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42c:	f383 8811 	msr	BASEPRI, r3
 800c430:	f3bf 8f6f 	isb	sy
 800c434:	f3bf 8f4f 	dsb	sy
 800c438:	61fb      	str	r3, [r7, #28]
}
 800c43a:	bf00      	nop
 800c43c:	e7fe      	b.n	800c43c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c43e:	2348      	movs	r3, #72	; 0x48
 800c440:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	2b48      	cmp	r3, #72	; 0x48
 800c446:	d00a      	beq.n	800c45e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44c:	f383 8811 	msr	BASEPRI, r3
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	61bb      	str	r3, [r7, #24]
}
 800c45a:	bf00      	nop
 800c45c:	e7fe      	b.n	800c45c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c45e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00d      	beq.n	800c486 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46c:	2201      	movs	r2, #1
 800c46e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c472:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c478:	9300      	str	r3, [sp, #0]
 800c47a:	4613      	mov	r3, r2
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	68b9      	ldr	r1, [r7, #8]
 800c480:	68f8      	ldr	r0, [r7, #12]
 800c482:	f000 f83f 	bl	800c504 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c488:	4618      	mov	r0, r3
 800c48a:	3730      	adds	r7, #48	; 0x30
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c490:	b580      	push	{r7, lr}
 800c492:	b08a      	sub	sp, #40	; 0x28
 800c494:	af02      	add	r7, sp, #8
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	4613      	mov	r3, r2
 800c49c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10a      	bne.n	800c4ba <xQueueGenericCreate+0x2a>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	613b      	str	r3, [r7, #16]
}
 800c4b6:	bf00      	nop
 800c4b8:	e7fe      	b.n	800c4b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	68ba      	ldr	r2, [r7, #8]
 800c4be:	fb02 f303 	mul.w	r3, r2, r3
 800c4c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	3348      	adds	r3, #72	; 0x48
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f002 fbfd 	bl	800ecc8 <pvPortMalloc>
 800c4ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d011      	beq.n	800c4fa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	3348      	adds	r3, #72	; 0x48
 800c4de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4e8:	79fa      	ldrb	r2, [r7, #7]
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	9300      	str	r3, [sp, #0]
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	697a      	ldr	r2, [r7, #20]
 800c4f2:	68b9      	ldr	r1, [r7, #8]
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f000 f805 	bl	800c504 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c4fa:	69bb      	ldr	r3, [r7, #24]
	}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3720      	adds	r7, #32
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	607a      	str	r2, [r7, #4]
 800c510:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d103      	bne.n	800c520 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	69ba      	ldr	r2, [r7, #24]
 800c51c:	601a      	str	r2, [r3, #0]
 800c51e:	e002      	b.n	800c526 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	68ba      	ldr	r2, [r7, #8]
 800c530:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c532:	2101      	movs	r1, #1
 800c534:	69b8      	ldr	r0, [r7, #24]
 800c536:	f7ff fecb 	bl	800c2d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c53a:	bf00      	nop
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
	...

0800c544 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b08e      	sub	sp, #56	; 0x38
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
 800c550:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c552:	2300      	movs	r3, #0
 800c554:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d10a      	bne.n	800c576 <xQueueGenericSend+0x32>
	__asm volatile
 800c560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c564:	f383 8811 	msr	BASEPRI, r3
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	f3bf 8f4f 	dsb	sy
 800c570:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c572:	bf00      	nop
 800c574:	e7fe      	b.n	800c574 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d103      	bne.n	800c584 <xQueueGenericSend+0x40>
 800c57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c580:	2b00      	cmp	r3, #0
 800c582:	d101      	bne.n	800c588 <xQueueGenericSend+0x44>
 800c584:	2301      	movs	r3, #1
 800c586:	e000      	b.n	800c58a <xQueueGenericSend+0x46>
 800c588:	2300      	movs	r3, #0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d10a      	bne.n	800c5a4 <xQueueGenericSend+0x60>
	__asm volatile
 800c58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c592:	f383 8811 	msr	BASEPRI, r3
 800c596:	f3bf 8f6f 	isb	sy
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5a0:	bf00      	nop
 800c5a2:	e7fe      	b.n	800c5a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	2b02      	cmp	r3, #2
 800c5a8:	d103      	bne.n	800c5b2 <xQueueGenericSend+0x6e>
 800c5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d101      	bne.n	800c5b6 <xQueueGenericSend+0x72>
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e000      	b.n	800c5b8 <xQueueGenericSend+0x74>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d10a      	bne.n	800c5d2 <xQueueGenericSend+0x8e>
	__asm volatile
 800c5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c0:	f383 8811 	msr	BASEPRI, r3
 800c5c4:	f3bf 8f6f 	isb	sy
 800c5c8:	f3bf 8f4f 	dsb	sy
 800c5cc:	623b      	str	r3, [r7, #32]
}
 800c5ce:	bf00      	nop
 800c5d0:	e7fe      	b.n	800c5d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5d2:	f001 fbd7 	bl	800dd84 <xTaskGetSchedulerState>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d102      	bne.n	800c5e2 <xQueueGenericSend+0x9e>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d101      	bne.n	800c5e6 <xQueueGenericSend+0xa2>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e000      	b.n	800c5e8 <xQueueGenericSend+0xa4>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10a      	bne.n	800c602 <xQueueGenericSend+0xbe>
	__asm volatile
 800c5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f0:	f383 8811 	msr	BASEPRI, r3
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	61fb      	str	r3, [r7, #28]
}
 800c5fe:	bf00      	nop
 800c600:	e7fe      	b.n	800c600 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c602:	f002 fa3f 	bl	800ea84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c60e:	429a      	cmp	r2, r3
 800c610:	d302      	bcc.n	800c618 <xQueueGenericSend+0xd4>
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	2b02      	cmp	r3, #2
 800c616:	d129      	bne.n	800c66c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c618:	683a      	ldr	r2, [r7, #0]
 800c61a:	68b9      	ldr	r1, [r7, #8]
 800c61c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c61e:	f000 fc3b 	bl	800ce98 <prvCopyDataToQueue>
 800c622:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d010      	beq.n	800c64e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62e:	3324      	adds	r3, #36	; 0x24
 800c630:	4618      	mov	r0, r3
 800c632:	f001 f9eb 	bl	800da0c <xTaskRemoveFromEventList>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d013      	beq.n	800c664 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c63c:	4b3f      	ldr	r3, [pc, #252]	; (800c73c <xQueueGenericSend+0x1f8>)
 800c63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c642:	601a      	str	r2, [r3, #0]
 800c644:	f3bf 8f4f 	dsb	sy
 800c648:	f3bf 8f6f 	isb	sy
 800c64c:	e00a      	b.n	800c664 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c650:	2b00      	cmp	r3, #0
 800c652:	d007      	beq.n	800c664 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c654:	4b39      	ldr	r3, [pc, #228]	; (800c73c <xQueueGenericSend+0x1f8>)
 800c656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c65a:	601a      	str	r2, [r3, #0]
 800c65c:	f3bf 8f4f 	dsb	sy
 800c660:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c664:	f002 fa3e 	bl	800eae4 <vPortExitCritical>
				return pdPASS;
 800c668:	2301      	movs	r3, #1
 800c66a:	e063      	b.n	800c734 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d103      	bne.n	800c67a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c672:	f002 fa37 	bl	800eae4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c676:	2300      	movs	r3, #0
 800c678:	e05c      	b.n	800c734 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d106      	bne.n	800c68e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c680:	f107 0314 	add.w	r3, r7, #20
 800c684:	4618      	mov	r0, r3
 800c686:	f001 fa23 	bl	800dad0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c68a:	2301      	movs	r3, #1
 800c68c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c68e:	f002 fa29 	bl	800eae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c692:	f000 ff9d 	bl	800d5d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c696:	f002 f9f5 	bl	800ea84 <vPortEnterCritical>
 800c69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6a0:	b25b      	sxtb	r3, r3
 800c6a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6a6:	d103      	bne.n	800c6b0 <xQueueGenericSend+0x16c>
 800c6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6b6:	b25b      	sxtb	r3, r3
 800c6b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6bc:	d103      	bne.n	800c6c6 <xQueueGenericSend+0x182>
 800c6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6c6:	f002 fa0d 	bl	800eae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6ca:	1d3a      	adds	r2, r7, #4
 800c6cc:	f107 0314 	add.w	r3, r7, #20
 800c6d0:	4611      	mov	r1, r2
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f001 fa12 	bl	800dafc <xTaskCheckForTimeOut>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d124      	bne.n	800c728 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c6de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6e0:	f000 fcd2 	bl	800d088 <prvIsQueueFull>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d018      	beq.n	800c71c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ec:	3310      	adds	r3, #16
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	4611      	mov	r1, r2
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f001 f93a 	bl	800d96c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c6f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6fa:	f000 fc5d 	bl	800cfb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c6fe:	f000 ff75 	bl	800d5ec <xTaskResumeAll>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	f47f af7c 	bne.w	800c602 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c70a:	4b0c      	ldr	r3, [pc, #48]	; (800c73c <xQueueGenericSend+0x1f8>)
 800c70c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c710:	601a      	str	r2, [r3, #0]
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	f3bf 8f6f 	isb	sy
 800c71a:	e772      	b.n	800c602 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c71c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c71e:	f000 fc4b 	bl	800cfb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c722:	f000 ff63 	bl	800d5ec <xTaskResumeAll>
 800c726:	e76c      	b.n	800c602 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c72a:	f000 fc45 	bl	800cfb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c72e:	f000 ff5d 	bl	800d5ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c732:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c734:	4618      	mov	r0, r3
 800c736:	3738      	adds	r7, #56	; 0x38
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	e000ed04 	.word	0xe000ed04

0800c740 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b090      	sub	sp, #64	; 0x40
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
 800c74c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c754:	2b00      	cmp	r3, #0
 800c756:	d10a      	bne.n	800c76e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75c:	f383 8811 	msr	BASEPRI, r3
 800c760:	f3bf 8f6f 	isb	sy
 800c764:	f3bf 8f4f 	dsb	sy
 800c768:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c76a:	bf00      	nop
 800c76c:	e7fe      	b.n	800c76c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d103      	bne.n	800c77c <xQueueGenericSendFromISR+0x3c>
 800c774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d101      	bne.n	800c780 <xQueueGenericSendFromISR+0x40>
 800c77c:	2301      	movs	r3, #1
 800c77e:	e000      	b.n	800c782 <xQueueGenericSendFromISR+0x42>
 800c780:	2300      	movs	r3, #0
 800c782:	2b00      	cmp	r3, #0
 800c784:	d10a      	bne.n	800c79c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78a:	f383 8811 	msr	BASEPRI, r3
 800c78e:	f3bf 8f6f 	isb	sy
 800c792:	f3bf 8f4f 	dsb	sy
 800c796:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c798:	bf00      	nop
 800c79a:	e7fe      	b.n	800c79a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	2b02      	cmp	r3, #2
 800c7a0:	d103      	bne.n	800c7aa <xQueueGenericSendFromISR+0x6a>
 800c7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d101      	bne.n	800c7ae <xQueueGenericSendFromISR+0x6e>
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e000      	b.n	800c7b0 <xQueueGenericSendFromISR+0x70>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d10a      	bne.n	800c7ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b8:	f383 8811 	msr	BASEPRI, r3
 800c7bc:	f3bf 8f6f 	isb	sy
 800c7c0:	f3bf 8f4f 	dsb	sy
 800c7c4:	623b      	str	r3, [r7, #32]
}
 800c7c6:	bf00      	nop
 800c7c8:	e7fe      	b.n	800c7c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7ca:	f002 fa3d 	bl	800ec48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c7ce:	f3ef 8211 	mrs	r2, BASEPRI
 800c7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d6:	f383 8811 	msr	BASEPRI, r3
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	61fa      	str	r2, [r7, #28]
 800c7e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c7e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d302      	bcc.n	800c7fc <xQueueGenericSendFromISR+0xbc>
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	2b02      	cmp	r3, #2
 800c7fa:	d12f      	bne.n	800c85c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c80c:	683a      	ldr	r2, [r7, #0]
 800c80e:	68b9      	ldr	r1, [r7, #8]
 800c810:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c812:	f000 fb41 	bl	800ce98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c816:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c81a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c81e:	d112      	bne.n	800c846 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c824:	2b00      	cmp	r3, #0
 800c826:	d016      	beq.n	800c856 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82a:	3324      	adds	r3, #36	; 0x24
 800c82c:	4618      	mov	r0, r3
 800c82e:	f001 f8ed 	bl	800da0c <xTaskRemoveFromEventList>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00e      	beq.n	800c856 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00b      	beq.n	800c856 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2201      	movs	r2, #1
 800c842:	601a      	str	r2, [r3, #0]
 800c844:	e007      	b.n	800c856 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c846:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c84a:	3301      	adds	r3, #1
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	b25a      	sxtb	r2, r3
 800c850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c856:	2301      	movs	r3, #1
 800c858:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c85a:	e001      	b.n	800c860 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c85c:	2300      	movs	r3, #0
 800c85e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c862:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c86a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3740      	adds	r7, #64	; 0x40
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b08e      	sub	sp, #56	; 0x38
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
 800c87e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c886:	2b00      	cmp	r3, #0
 800c888:	d10a      	bne.n	800c8a0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88e:	f383 8811 	msr	BASEPRI, r3
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	f3bf 8f4f 	dsb	sy
 800c89a:	623b      	str	r3, [r7, #32]
}
 800c89c:	bf00      	nop
 800c89e:	e7fe      	b.n	800c89e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d00a      	beq.n	800c8be <xQueueGiveFromISR+0x48>
	__asm volatile
 800c8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ac:	f383 8811 	msr	BASEPRI, r3
 800c8b0:	f3bf 8f6f 	isb	sy
 800c8b4:	f3bf 8f4f 	dsb	sy
 800c8b8:	61fb      	str	r3, [r7, #28]
}
 800c8ba:	bf00      	nop
 800c8bc:	e7fe      	b.n	800c8bc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d103      	bne.n	800c8ce <xQueueGiveFromISR+0x58>
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c8:	689b      	ldr	r3, [r3, #8]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d101      	bne.n	800c8d2 <xQueueGiveFromISR+0x5c>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e000      	b.n	800c8d4 <xQueueGiveFromISR+0x5e>
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10a      	bne.n	800c8ee <xQueueGiveFromISR+0x78>
	__asm volatile
 800c8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8dc:	f383 8811 	msr	BASEPRI, r3
 800c8e0:	f3bf 8f6f 	isb	sy
 800c8e4:	f3bf 8f4f 	dsb	sy
 800c8e8:	61bb      	str	r3, [r7, #24]
}
 800c8ea:	bf00      	nop
 800c8ec:	e7fe      	b.n	800c8ec <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8ee:	f002 f9ab 	bl	800ec48 <vPortValidateInterruptPriority>
	__asm volatile
 800c8f2:	f3ef 8211 	mrs	r2, BASEPRI
 800c8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fa:	f383 8811 	msr	BASEPRI, r3
 800c8fe:	f3bf 8f6f 	isb	sy
 800c902:	f3bf 8f4f 	dsb	sy
 800c906:	617a      	str	r2, [r7, #20]
 800c908:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c90a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c90c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c912:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d22b      	bcs.n	800c976 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c920:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92a:	1c5a      	adds	r2, r3, #1
 800c92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c930:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c938:	d112      	bne.n	800c960 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d016      	beq.n	800c970 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c944:	3324      	adds	r3, #36	; 0x24
 800c946:	4618      	mov	r0, r3
 800c948:	f001 f860 	bl	800da0c <xTaskRemoveFromEventList>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00e      	beq.n	800c970 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d00b      	beq.n	800c970 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	2201      	movs	r2, #1
 800c95c:	601a      	str	r2, [r3, #0]
 800c95e:	e007      	b.n	800c970 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c964:	3301      	adds	r3, #1
 800c966:	b2db      	uxtb	r3, r3
 800c968:	b25a      	sxtb	r2, r3
 800c96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c970:	2301      	movs	r3, #1
 800c972:	637b      	str	r3, [r7, #52]	; 0x34
 800c974:	e001      	b.n	800c97a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c976:	2300      	movs	r3, #0
 800c978:	637b      	str	r3, [r7, #52]	; 0x34
 800c97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f383 8811 	msr	BASEPRI, r3
}
 800c984:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3738      	adds	r7, #56	; 0x38
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b08c      	sub	sp, #48	; 0x30
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c99c:	2300      	movs	r3, #0
 800c99e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d10a      	bne.n	800c9c0 <xQueueReceive+0x30>
	__asm volatile
 800c9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ae:	f383 8811 	msr	BASEPRI, r3
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	f3bf 8f4f 	dsb	sy
 800c9ba:	623b      	str	r3, [r7, #32]
}
 800c9bc:	bf00      	nop
 800c9be:	e7fe      	b.n	800c9be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d103      	bne.n	800c9ce <xQueueReceive+0x3e>
 800c9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d101      	bne.n	800c9d2 <xQueueReceive+0x42>
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e000      	b.n	800c9d4 <xQueueReceive+0x44>
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10a      	bne.n	800c9ee <xQueueReceive+0x5e>
	__asm volatile
 800c9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9dc:	f383 8811 	msr	BASEPRI, r3
 800c9e0:	f3bf 8f6f 	isb	sy
 800c9e4:	f3bf 8f4f 	dsb	sy
 800c9e8:	61fb      	str	r3, [r7, #28]
}
 800c9ea:	bf00      	nop
 800c9ec:	e7fe      	b.n	800c9ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9ee:	f001 f9c9 	bl	800dd84 <xTaskGetSchedulerState>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d102      	bne.n	800c9fe <xQueueReceive+0x6e>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d101      	bne.n	800ca02 <xQueueReceive+0x72>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e000      	b.n	800ca04 <xQueueReceive+0x74>
 800ca02:	2300      	movs	r3, #0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10a      	bne.n	800ca1e <xQueueReceive+0x8e>
	__asm volatile
 800ca08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0c:	f383 8811 	msr	BASEPRI, r3
 800ca10:	f3bf 8f6f 	isb	sy
 800ca14:	f3bf 8f4f 	dsb	sy
 800ca18:	61bb      	str	r3, [r7, #24]
}
 800ca1a:	bf00      	nop
 800ca1c:	e7fe      	b.n	800ca1c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca1e:	f002 f831 	bl	800ea84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca26:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d01f      	beq.n	800ca6e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca2e:	68b9      	ldr	r1, [r7, #8]
 800ca30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca32:	f000 fa9b 	bl	800cf6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca38:	1e5a      	subs	r2, r3, #1
 800ca3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00f      	beq.n	800ca66 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca48:	3310      	adds	r3, #16
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f000 ffde 	bl	800da0c <xTaskRemoveFromEventList>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d007      	beq.n	800ca66 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ca56:	4b3d      	ldr	r3, [pc, #244]	; (800cb4c <xQueueReceive+0x1bc>)
 800ca58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca5c:	601a      	str	r2, [r3, #0]
 800ca5e:	f3bf 8f4f 	dsb	sy
 800ca62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ca66:	f002 f83d 	bl	800eae4 <vPortExitCritical>
				return pdPASS;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e069      	b.n	800cb42 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d103      	bne.n	800ca7c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca74:	f002 f836 	bl	800eae4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	e062      	b.n	800cb42 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d106      	bne.n	800ca90 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca82:	f107 0310 	add.w	r3, r7, #16
 800ca86:	4618      	mov	r0, r3
 800ca88:	f001 f822 	bl	800dad0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca90:	f002 f828 	bl	800eae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca94:	f000 fd9c 	bl	800d5d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca98:	f001 fff4 	bl	800ea84 <vPortEnterCritical>
 800ca9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800caa2:	b25b      	sxtb	r3, r3
 800caa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800caa8:	d103      	bne.n	800cab2 <xQueueReceive+0x122>
 800caaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caac:	2200      	movs	r2, #0
 800caae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cab8:	b25b      	sxtb	r3, r3
 800caba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cabe:	d103      	bne.n	800cac8 <xQueueReceive+0x138>
 800cac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac2:	2200      	movs	r2, #0
 800cac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cac8:	f002 f80c 	bl	800eae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cacc:	1d3a      	adds	r2, r7, #4
 800cace:	f107 0310 	add.w	r3, r7, #16
 800cad2:	4611      	mov	r1, r2
 800cad4:	4618      	mov	r0, r3
 800cad6:	f001 f811 	bl	800dafc <xTaskCheckForTimeOut>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d123      	bne.n	800cb28 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cae2:	f000 fabb 	bl	800d05c <prvIsQueueEmpty>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d017      	beq.n	800cb1c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800caec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caee:	3324      	adds	r3, #36	; 0x24
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	4611      	mov	r1, r2
 800caf4:	4618      	mov	r0, r3
 800caf6:	f000 ff39 	bl	800d96c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cafa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cafc:	f000 fa5c 	bl	800cfb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cb00:	f000 fd74 	bl	800d5ec <xTaskResumeAll>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d189      	bne.n	800ca1e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cb0a:	4b10      	ldr	r3, [pc, #64]	; (800cb4c <xQueueReceive+0x1bc>)
 800cb0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb10:	601a      	str	r2, [r3, #0]
 800cb12:	f3bf 8f4f 	dsb	sy
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	e780      	b.n	800ca1e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cb1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb1e:	f000 fa4b 	bl	800cfb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb22:	f000 fd63 	bl	800d5ec <xTaskResumeAll>
 800cb26:	e77a      	b.n	800ca1e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cb28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb2a:	f000 fa45 	bl	800cfb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb2e:	f000 fd5d 	bl	800d5ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb34:	f000 fa92 	bl	800d05c <prvIsQueueEmpty>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	f43f af6f 	beq.w	800ca1e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cb40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3730      	adds	r7, #48	; 0x30
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	e000ed04 	.word	0xe000ed04

0800cb50 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b08e      	sub	sp, #56	; 0x38
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cb62:	2300      	movs	r3, #0
 800cb64:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d10a      	bne.n	800cb82 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800cb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb70:	f383 8811 	msr	BASEPRI, r3
 800cb74:	f3bf 8f6f 	isb	sy
 800cb78:	f3bf 8f4f 	dsb	sy
 800cb7c:	623b      	str	r3, [r7, #32]
}
 800cb7e:	bf00      	nop
 800cb80:	e7fe      	b.n	800cb80 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00a      	beq.n	800cba0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800cb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8e:	f383 8811 	msr	BASEPRI, r3
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	61fb      	str	r3, [r7, #28]
}
 800cb9c:	bf00      	nop
 800cb9e:	e7fe      	b.n	800cb9e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cba0:	f001 f8f0 	bl	800dd84 <xTaskGetSchedulerState>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d102      	bne.n	800cbb0 <xQueueSemaphoreTake+0x60>
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d101      	bne.n	800cbb4 <xQueueSemaphoreTake+0x64>
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	e000      	b.n	800cbb6 <xQueueSemaphoreTake+0x66>
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d10a      	bne.n	800cbd0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800cbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbbe:	f383 8811 	msr	BASEPRI, r3
 800cbc2:	f3bf 8f6f 	isb	sy
 800cbc6:	f3bf 8f4f 	dsb	sy
 800cbca:	61bb      	str	r3, [r7, #24]
}
 800cbcc:	bf00      	nop
 800cbce:	e7fe      	b.n	800cbce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbd0:	f001 ff58 	bl	800ea84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d024      	beq.n	800cc2a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe2:	1e5a      	subs	r2, r3, #1
 800cbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d104      	bne.n	800cbfa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cbf0:	f001 fa70 	bl	800e0d4 <pvTaskIncrementMutexHeldCount>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfc:	691b      	ldr	r3, [r3, #16]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d00f      	beq.n	800cc22 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc04:	3310      	adds	r3, #16
 800cc06:	4618      	mov	r0, r3
 800cc08:	f000 ff00 	bl	800da0c <xTaskRemoveFromEventList>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d007      	beq.n	800cc22 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cc12:	4b54      	ldr	r3, [pc, #336]	; (800cd64 <xQueueSemaphoreTake+0x214>)
 800cc14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc18:	601a      	str	r2, [r3, #0]
 800cc1a:	f3bf 8f4f 	dsb	sy
 800cc1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cc22:	f001 ff5f 	bl	800eae4 <vPortExitCritical>
				return pdPASS;
 800cc26:	2301      	movs	r3, #1
 800cc28:	e097      	b.n	800cd5a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d111      	bne.n	800cc54 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d00a      	beq.n	800cc4c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3a:	f383 8811 	msr	BASEPRI, r3
 800cc3e:	f3bf 8f6f 	isb	sy
 800cc42:	f3bf 8f4f 	dsb	sy
 800cc46:	617b      	str	r3, [r7, #20]
}
 800cc48:	bf00      	nop
 800cc4a:	e7fe      	b.n	800cc4a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cc4c:	f001 ff4a 	bl	800eae4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc50:	2300      	movs	r3, #0
 800cc52:	e082      	b.n	800cd5a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d106      	bne.n	800cc68 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc5a:	f107 030c 	add.w	r3, r7, #12
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f000 ff36 	bl	800dad0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc64:	2301      	movs	r3, #1
 800cc66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc68:	f001 ff3c 	bl	800eae4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc6c:	f000 fcb0 	bl	800d5d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc70:	f001 ff08 	bl	800ea84 <vPortEnterCritical>
 800cc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc7a:	b25b      	sxtb	r3, r3
 800cc7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc80:	d103      	bne.n	800cc8a <xQueueSemaphoreTake+0x13a>
 800cc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc84:	2200      	movs	r2, #0
 800cc86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc90:	b25b      	sxtb	r3, r3
 800cc92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc96:	d103      	bne.n	800cca0 <xQueueSemaphoreTake+0x150>
 800cc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cca0:	f001 ff20 	bl	800eae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cca4:	463a      	mov	r2, r7
 800cca6:	f107 030c 	add.w	r3, r7, #12
 800ccaa:	4611      	mov	r1, r2
 800ccac:	4618      	mov	r0, r3
 800ccae:	f000 ff25 	bl	800dafc <xTaskCheckForTimeOut>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d132      	bne.n	800cd1e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccba:	f000 f9cf 	bl	800d05c <prvIsQueueEmpty>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d026      	beq.n	800cd12 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ccc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d109      	bne.n	800cce0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cccc:	f001 feda 	bl	800ea84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ccd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f001 f873 	bl	800ddc0 <xTaskPriorityInherit>
 800ccda:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ccdc:	f001 ff02 	bl	800eae4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce2:	3324      	adds	r3, #36	; 0x24
 800cce4:	683a      	ldr	r2, [r7, #0]
 800cce6:	4611      	mov	r1, r2
 800cce8:	4618      	mov	r0, r3
 800ccea:	f000 fe3f 	bl	800d96c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ccee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccf0:	f000 f962 	bl	800cfb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ccf4:	f000 fc7a 	bl	800d5ec <xTaskResumeAll>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	f47f af68 	bne.w	800cbd0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800cd00:	4b18      	ldr	r3, [pc, #96]	; (800cd64 <xQueueSemaphoreTake+0x214>)
 800cd02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd06:	601a      	str	r2, [r3, #0]
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	f3bf 8f6f 	isb	sy
 800cd10:	e75e      	b.n	800cbd0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cd12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd14:	f000 f950 	bl	800cfb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd18:	f000 fc68 	bl	800d5ec <xTaskResumeAll>
 800cd1c:	e758      	b.n	800cbd0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cd1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd20:	f000 f94a 	bl	800cfb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd24:	f000 fc62 	bl	800d5ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd2a:	f000 f997 	bl	800d05c <prvIsQueueEmpty>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f43f af4d 	beq.w	800cbd0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00d      	beq.n	800cd58 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800cd3c:	f001 fea2 	bl	800ea84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cd40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd42:	f000 f891 	bl	800ce68 <prvGetDisinheritPriorityAfterTimeout>
 800cd46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f001 f932 	bl	800dfb8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cd54:	f001 fec6 	bl	800eae4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cd58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3738      	adds	r7, #56	; 0x38
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	e000ed04 	.word	0xe000ed04

0800cd68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b08e      	sub	sp, #56	; 0x38
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	60f8      	str	r0, [r7, #12]
 800cd70:	60b9      	str	r1, [r7, #8]
 800cd72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d10a      	bne.n	800cd94 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd82:	f383 8811 	msr	BASEPRI, r3
 800cd86:	f3bf 8f6f 	isb	sy
 800cd8a:	f3bf 8f4f 	dsb	sy
 800cd8e:	623b      	str	r3, [r7, #32]
}
 800cd90:	bf00      	nop
 800cd92:	e7fe      	b.n	800cd92 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d103      	bne.n	800cda2 <xQueueReceiveFromISR+0x3a>
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d101      	bne.n	800cda6 <xQueueReceiveFromISR+0x3e>
 800cda2:	2301      	movs	r3, #1
 800cda4:	e000      	b.n	800cda8 <xQueueReceiveFromISR+0x40>
 800cda6:	2300      	movs	r3, #0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d10a      	bne.n	800cdc2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb0:	f383 8811 	msr	BASEPRI, r3
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	f3bf 8f4f 	dsb	sy
 800cdbc:	61fb      	str	r3, [r7, #28]
}
 800cdbe:	bf00      	nop
 800cdc0:	e7fe      	b.n	800cdc0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdc2:	f001 ff41 	bl	800ec48 <vPortValidateInterruptPriority>
	__asm volatile
 800cdc6:	f3ef 8211 	mrs	r2, BASEPRI
 800cdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdce:	f383 8811 	msr	BASEPRI, r3
 800cdd2:	f3bf 8f6f 	isb	sy
 800cdd6:	f3bf 8f4f 	dsb	sy
 800cdda:	61ba      	str	r2, [r7, #24]
 800cddc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cdde:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cde0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d02f      	beq.n	800ce4e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cdf8:	68b9      	ldr	r1, [r7, #8]
 800cdfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdfc:	f000 f8b6 	bl	800cf6c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ce00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce02:	1e5a      	subs	r2, r3, #1
 800ce04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce06:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ce08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce10:	d112      	bne.n	800ce38 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce14:	691b      	ldr	r3, [r3, #16]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d016      	beq.n	800ce48 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1c:	3310      	adds	r3, #16
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f000 fdf4 	bl	800da0c <xTaskRemoveFromEventList>
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d00e      	beq.n	800ce48 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00b      	beq.n	800ce48 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	601a      	str	r2, [r3, #0]
 800ce36:	e007      	b.n	800ce48 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ce38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	b2db      	uxtb	r3, r3
 800ce40:	b25a      	sxtb	r2, r3
 800ce42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	637b      	str	r3, [r7, #52]	; 0x34
 800ce4c:	e001      	b.n	800ce52 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	637b      	str	r3, [r7, #52]	; 0x34
 800ce52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce54:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	f383 8811 	msr	BASEPRI, r3
}
 800ce5c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3738      	adds	r7, #56	; 0x38
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ce68:	b480      	push	{r7}
 800ce6a:	b085      	sub	sp, #20
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d006      	beq.n	800ce86 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f1c3 0307 	rsb	r3, r3, #7
 800ce82:	60fb      	str	r3, [r7, #12]
 800ce84:	e001      	b.n	800ce8a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ce86:	2300      	movs	r3, #0
 800ce88:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
	}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3714      	adds	r7, #20
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	60b9      	str	r1, [r7, #8]
 800cea2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cea4:	2300      	movs	r3, #0
 800cea6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10d      	bne.n	800ced2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d14d      	bne.n	800cf5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f000 fff2 	bl	800deac <xTaskPriorityDisinherit>
 800cec8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2200      	movs	r2, #0
 800cece:	609a      	str	r2, [r3, #8]
 800ced0:	e043      	b.n	800cf5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d119      	bne.n	800cf0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6858      	ldr	r0, [r3, #4]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee0:	461a      	mov	r2, r3
 800cee2:	68b9      	ldr	r1, [r7, #8]
 800cee4:	f002 f904 	bl	800f0f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	685a      	ldr	r2, [r3, #4]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cef0:	441a      	add	r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	685a      	ldr	r2, [r3, #4]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	689b      	ldr	r3, [r3, #8]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d32b      	bcc.n	800cf5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	605a      	str	r2, [r3, #4]
 800cf0a:	e026      	b.n	800cf5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	68d8      	ldr	r0, [r3, #12]
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf14:	461a      	mov	r2, r3
 800cf16:	68b9      	ldr	r1, [r7, #8]
 800cf18:	f002 f8ea 	bl	800f0f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	68da      	ldr	r2, [r3, #12]
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf24:	425b      	negs	r3, r3
 800cf26:	441a      	add	r2, r3
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	68da      	ldr	r2, [r3, #12]
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d207      	bcs.n	800cf48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	689a      	ldr	r2, [r3, #8]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf40:	425b      	negs	r3, r3
 800cf42:	441a      	add	r2, r3
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	d105      	bne.n	800cf5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d002      	beq.n	800cf5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	3b01      	subs	r3, #1
 800cf58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	1c5a      	adds	r2, r3, #1
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cf62:	697b      	ldr	r3, [r7, #20]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3718      	adds	r7, #24
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d018      	beq.n	800cfb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	68da      	ldr	r2, [r3, #12]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf86:	441a      	add	r2, r3
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	68da      	ldr	r2, [r3, #12]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d303      	bcc.n	800cfa0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	68d9      	ldr	r1, [r3, #12]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	6838      	ldr	r0, [r7, #0]
 800cfac:	f002 f8a0 	bl	800f0f0 <memcpy>
	}
}
 800cfb0:	bf00      	nop
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cfc0:	f001 fd60 	bl	800ea84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfcc:	e011      	b.n	800cff2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d012      	beq.n	800cffc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	3324      	adds	r3, #36	; 0x24
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 fd16 	bl	800da0c <xTaskRemoveFromEventList>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d001      	beq.n	800cfea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cfe6:	f000 fdeb 	bl	800dbc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cfea:	7bfb      	ldrb	r3, [r7, #15]
 800cfec:	3b01      	subs	r3, #1
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	dce9      	bgt.n	800cfce <prvUnlockQueue+0x16>
 800cffa:	e000      	b.n	800cffe <prvUnlockQueue+0x46>
					break;
 800cffc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	22ff      	movs	r2, #255	; 0xff
 800d002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d006:	f001 fd6d 	bl	800eae4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d00a:	f001 fd3b 	bl	800ea84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d014:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d016:	e011      	b.n	800d03c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	691b      	ldr	r3, [r3, #16]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d012      	beq.n	800d046 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	3310      	adds	r3, #16
 800d024:	4618      	mov	r0, r3
 800d026:	f000 fcf1 	bl	800da0c <xTaskRemoveFromEventList>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d001      	beq.n	800d034 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d030:	f000 fdc6 	bl	800dbc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d034:	7bbb      	ldrb	r3, [r7, #14]
 800d036:	3b01      	subs	r3, #1
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d03c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d040:	2b00      	cmp	r3, #0
 800d042:	dce9      	bgt.n	800d018 <prvUnlockQueue+0x60>
 800d044:	e000      	b.n	800d048 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d046:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	22ff      	movs	r2, #255	; 0xff
 800d04c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d050:	f001 fd48 	bl	800eae4 <vPortExitCritical>
}
 800d054:	bf00      	nop
 800d056:	3710      	adds	r7, #16
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d064:	f001 fd0e 	bl	800ea84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d102      	bne.n	800d076 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d070:	2301      	movs	r3, #1
 800d072:	60fb      	str	r3, [r7, #12]
 800d074:	e001      	b.n	800d07a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d076:	2300      	movs	r3, #0
 800d078:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d07a:	f001 fd33 	bl	800eae4 <vPortExitCritical>

	return xReturn;
 800d07e:	68fb      	ldr	r3, [r7, #12]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d090:	f001 fcf8 	bl	800ea84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d102      	bne.n	800d0a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	60fb      	str	r3, [r7, #12]
 800d0a4:	e001      	b.n	800d0aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0aa:	f001 fd1b 	bl	800eae4 <vPortExitCritical>

	return xReturn;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3710      	adds	r7, #16
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	60fb      	str	r3, [r7, #12]
 800d0c6:	e014      	b.n	800d0f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d0c8:	4a0f      	ldr	r2, [pc, #60]	; (800d108 <vQueueAddToRegistry+0x50>)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d10b      	bne.n	800d0ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d0d4:	490c      	ldr	r1, [pc, #48]	; (800d108 <vQueueAddToRegistry+0x50>)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	683a      	ldr	r2, [r7, #0]
 800d0da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d0de:	4a0a      	ldr	r2, [pc, #40]	; (800d108 <vQueueAddToRegistry+0x50>)
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	00db      	lsls	r3, r3, #3
 800d0e4:	4413      	add	r3, r2
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d0ea:	e006      	b.n	800d0fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	60fb      	str	r3, [r7, #12]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2b07      	cmp	r3, #7
 800d0f6:	d9e7      	bls.n	800d0c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d0f8:	bf00      	nop
 800d0fa:	bf00      	nop
 800d0fc:	3714      	adds	r7, #20
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop
 800d108:	2000b910 	.word	0x2000b910

0800d10c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b086      	sub	sp, #24
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d11c:	f001 fcb2 	bl	800ea84 <vPortEnterCritical>
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d126:	b25b      	sxtb	r3, r3
 800d128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d12c:	d103      	bne.n	800d136 <vQueueWaitForMessageRestricted+0x2a>
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	2200      	movs	r2, #0
 800d132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d13c:	b25b      	sxtb	r3, r3
 800d13e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d142:	d103      	bne.n	800d14c <vQueueWaitForMessageRestricted+0x40>
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	2200      	movs	r2, #0
 800d148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d14c:	f001 fcca 	bl	800eae4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d154:	2b00      	cmp	r3, #0
 800d156:	d106      	bne.n	800d166 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	3324      	adds	r3, #36	; 0x24
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	68b9      	ldr	r1, [r7, #8]
 800d160:	4618      	mov	r0, r3
 800d162:	f000 fc27 	bl	800d9b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d166:	6978      	ldr	r0, [r7, #20]
 800d168:	f7ff ff26 	bl	800cfb8 <prvUnlockQueue>
	}
 800d16c:	bf00      	nop
 800d16e:	3718      	adds	r7, #24
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d174:	b580      	push	{r7, lr}
 800d176:	b08e      	sub	sp, #56	; 0x38
 800d178:	af04      	add	r7, sp, #16
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	607a      	str	r2, [r7, #4]
 800d180:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10a      	bne.n	800d19e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18c:	f383 8811 	msr	BASEPRI, r3
 800d190:	f3bf 8f6f 	isb	sy
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	623b      	str	r3, [r7, #32]
}
 800d19a:	bf00      	nop
 800d19c:	e7fe      	b.n	800d19c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d10a      	bne.n	800d1ba <xTaskCreateStatic+0x46>
	__asm volatile
 800d1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a8:	f383 8811 	msr	BASEPRI, r3
 800d1ac:	f3bf 8f6f 	isb	sy
 800d1b0:	f3bf 8f4f 	dsb	sy
 800d1b4:	61fb      	str	r3, [r7, #28]
}
 800d1b6:	bf00      	nop
 800d1b8:	e7fe      	b.n	800d1b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d1ba:	2354      	movs	r3, #84	; 0x54
 800d1bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	2b54      	cmp	r3, #84	; 0x54
 800d1c2:	d00a      	beq.n	800d1da <xTaskCreateStatic+0x66>
	__asm volatile
 800d1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c8:	f383 8811 	msr	BASEPRI, r3
 800d1cc:	f3bf 8f6f 	isb	sy
 800d1d0:	f3bf 8f4f 	dsb	sy
 800d1d4:	61bb      	str	r3, [r7, #24]
}
 800d1d6:	bf00      	nop
 800d1d8:	e7fe      	b.n	800d1d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d1da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d01e      	beq.n	800d220 <xTaskCreateStatic+0xac>
 800d1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d01b      	beq.n	800d220 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f4:	2202      	movs	r2, #2
 800d1f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	9303      	str	r3, [sp, #12]
 800d1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d200:	9302      	str	r3, [sp, #8]
 800d202:	f107 0314 	add.w	r3, r7, #20
 800d206:	9301      	str	r3, [sp, #4]
 800d208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20a:	9300      	str	r3, [sp, #0]
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	68b9      	ldr	r1, [r7, #8]
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	f000 f850 	bl	800d2b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d21a:	f000 f8d5 	bl	800d3c8 <prvAddNewTaskToReadyList>
 800d21e:	e001      	b.n	800d224 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d220:	2300      	movs	r3, #0
 800d222:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d224:	697b      	ldr	r3, [r7, #20]
	}
 800d226:	4618      	mov	r0, r3
 800d228:	3728      	adds	r7, #40	; 0x28
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}

0800d22e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d22e:	b580      	push	{r7, lr}
 800d230:	b08c      	sub	sp, #48	; 0x30
 800d232:	af04      	add	r7, sp, #16
 800d234:	60f8      	str	r0, [r7, #12]
 800d236:	60b9      	str	r1, [r7, #8]
 800d238:	603b      	str	r3, [r7, #0]
 800d23a:	4613      	mov	r3, r2
 800d23c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d23e:	88fb      	ldrh	r3, [r7, #6]
 800d240:	009b      	lsls	r3, r3, #2
 800d242:	4618      	mov	r0, r3
 800d244:	f001 fd40 	bl	800ecc8 <pvPortMalloc>
 800d248:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00e      	beq.n	800d26e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d250:	2054      	movs	r0, #84	; 0x54
 800d252:	f001 fd39 	bl	800ecc8 <pvPortMalloc>
 800d256:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d258:	69fb      	ldr	r3, [r7, #28]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d003      	beq.n	800d266 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	697a      	ldr	r2, [r7, #20]
 800d262:	631a      	str	r2, [r3, #48]	; 0x30
 800d264:	e005      	b.n	800d272 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d266:	6978      	ldr	r0, [r7, #20]
 800d268:	f001 fdfa 	bl	800ee60 <vPortFree>
 800d26c:	e001      	b.n	800d272 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d26e:	2300      	movs	r3, #0
 800d270:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d017      	beq.n	800d2a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	2200      	movs	r2, #0
 800d27c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d280:	88fa      	ldrh	r2, [r7, #6]
 800d282:	2300      	movs	r3, #0
 800d284:	9303      	str	r3, [sp, #12]
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	9302      	str	r3, [sp, #8]
 800d28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28c:	9301      	str	r3, [sp, #4]
 800d28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d290:	9300      	str	r3, [sp, #0]
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	68b9      	ldr	r1, [r7, #8]
 800d296:	68f8      	ldr	r0, [r7, #12]
 800d298:	f000 f80e 	bl	800d2b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d29c:	69f8      	ldr	r0, [r7, #28]
 800d29e:	f000 f893 	bl	800d3c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	61bb      	str	r3, [r7, #24]
 800d2a6:	e002      	b.n	800d2ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d2a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d2ae:	69bb      	ldr	r3, [r7, #24]
	}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3720      	adds	r7, #32
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b088      	sub	sp, #32
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	607a      	str	r2, [r7, #4]
 800d2c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	4413      	add	r3, r2
 800d2d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	f023 0307 	bic.w	r3, r3, #7
 800d2de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d2e0:	69bb      	ldr	r3, [r7, #24]
 800d2e2:	f003 0307 	and.w	r3, r3, #7
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00a      	beq.n	800d300 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ee:	f383 8811 	msr	BASEPRI, r3
 800d2f2:	f3bf 8f6f 	isb	sy
 800d2f6:	f3bf 8f4f 	dsb	sy
 800d2fa:	617b      	str	r3, [r7, #20]
}
 800d2fc:	bf00      	nop
 800d2fe:	e7fe      	b.n	800d2fe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d01f      	beq.n	800d346 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d306:	2300      	movs	r3, #0
 800d308:	61fb      	str	r3, [r7, #28]
 800d30a:	e012      	b.n	800d332 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d30c:	68ba      	ldr	r2, [r7, #8]
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	4413      	add	r3, r2
 800d312:	7819      	ldrb	r1, [r3, #0]
 800d314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d316:	69fb      	ldr	r3, [r7, #28]
 800d318:	4413      	add	r3, r2
 800d31a:	3334      	adds	r3, #52	; 0x34
 800d31c:	460a      	mov	r2, r1
 800d31e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d320:	68ba      	ldr	r2, [r7, #8]
 800d322:	69fb      	ldr	r3, [r7, #28]
 800d324:	4413      	add	r3, r2
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d006      	beq.n	800d33a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d32c:	69fb      	ldr	r3, [r7, #28]
 800d32e:	3301      	adds	r3, #1
 800d330:	61fb      	str	r3, [r7, #28]
 800d332:	69fb      	ldr	r3, [r7, #28]
 800d334:	2b0f      	cmp	r3, #15
 800d336:	d9e9      	bls.n	800d30c <prvInitialiseNewTask+0x54>
 800d338:	e000      	b.n	800d33c <prvInitialiseNewTask+0x84>
			{
				break;
 800d33a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33e:	2200      	movs	r2, #0
 800d340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d344:	e003      	b.n	800d34e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d348:	2200      	movs	r2, #0
 800d34a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	2b06      	cmp	r3, #6
 800d352:	d901      	bls.n	800d358 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d354:	2306      	movs	r3, #6
 800d356:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d35c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d362:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d366:	2200      	movs	r2, #0
 800d368:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36c:	3304      	adds	r3, #4
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fe ff1a 	bl	800c1a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d376:	3318      	adds	r3, #24
 800d378:	4618      	mov	r0, r3
 800d37a:	f7fe ff15 	bl	800c1a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d382:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d386:	f1c3 0207 	rsb	r2, r3, #7
 800d38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d392:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d396:	2200      	movs	r2, #0
 800d398:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39c:	2200      	movs	r2, #0
 800d39e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d3a2:	683a      	ldr	r2, [r7, #0]
 800d3a4:	68f9      	ldr	r1, [r7, #12]
 800d3a6:	69b8      	ldr	r0, [r7, #24]
 800d3a8:	f001 fa40 	bl	800e82c <pxPortInitialiseStack>
 800d3ac:	4602      	mov	r2, r0
 800d3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d002      	beq.n	800d3be <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3be:	bf00      	nop
 800d3c0:	3720      	adds	r7, #32
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
	...

0800d3c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d3d0:	f001 fb58 	bl	800ea84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d3d4:	4b2a      	ldr	r3, [pc, #168]	; (800d480 <prvAddNewTaskToReadyList+0xb8>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	3301      	adds	r3, #1
 800d3da:	4a29      	ldr	r2, [pc, #164]	; (800d480 <prvAddNewTaskToReadyList+0xb8>)
 800d3dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d3de:	4b29      	ldr	r3, [pc, #164]	; (800d484 <prvAddNewTaskToReadyList+0xbc>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d109      	bne.n	800d3fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d3e6:	4a27      	ldr	r2, [pc, #156]	; (800d484 <prvAddNewTaskToReadyList+0xbc>)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d3ec:	4b24      	ldr	r3, [pc, #144]	; (800d480 <prvAddNewTaskToReadyList+0xb8>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d110      	bne.n	800d416 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d3f4:	f000 fc08 	bl	800dc08 <prvInitialiseTaskLists>
 800d3f8:	e00d      	b.n	800d416 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d3fa:	4b23      	ldr	r3, [pc, #140]	; (800d488 <prvAddNewTaskToReadyList+0xc0>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d109      	bne.n	800d416 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d402:	4b20      	ldr	r3, [pc, #128]	; (800d484 <prvAddNewTaskToReadyList+0xbc>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d802      	bhi.n	800d416 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d410:	4a1c      	ldr	r2, [pc, #112]	; (800d484 <prvAddNewTaskToReadyList+0xbc>)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d416:	4b1d      	ldr	r3, [pc, #116]	; (800d48c <prvAddNewTaskToReadyList+0xc4>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	3301      	adds	r3, #1
 800d41c:	4a1b      	ldr	r2, [pc, #108]	; (800d48c <prvAddNewTaskToReadyList+0xc4>)
 800d41e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d424:	2201      	movs	r2, #1
 800d426:	409a      	lsls	r2, r3
 800d428:	4b19      	ldr	r3, [pc, #100]	; (800d490 <prvAddNewTaskToReadyList+0xc8>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4313      	orrs	r3, r2
 800d42e:	4a18      	ldr	r2, [pc, #96]	; (800d490 <prvAddNewTaskToReadyList+0xc8>)
 800d430:	6013      	str	r3, [r2, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d436:	4613      	mov	r3, r2
 800d438:	009b      	lsls	r3, r3, #2
 800d43a:	4413      	add	r3, r2
 800d43c:	009b      	lsls	r3, r3, #2
 800d43e:	4a15      	ldr	r2, [pc, #84]	; (800d494 <prvAddNewTaskToReadyList+0xcc>)
 800d440:	441a      	add	r2, r3
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	3304      	adds	r3, #4
 800d446:	4619      	mov	r1, r3
 800d448:	4610      	mov	r0, r2
 800d44a:	f7fe feba 	bl	800c1c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d44e:	f001 fb49 	bl	800eae4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d452:	4b0d      	ldr	r3, [pc, #52]	; (800d488 <prvAddNewTaskToReadyList+0xc0>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00e      	beq.n	800d478 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d45a:	4b0a      	ldr	r3, [pc, #40]	; (800d484 <prvAddNewTaskToReadyList+0xbc>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d464:	429a      	cmp	r2, r3
 800d466:	d207      	bcs.n	800d478 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d468:	4b0b      	ldr	r3, [pc, #44]	; (800d498 <prvAddNewTaskToReadyList+0xd0>)
 800d46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d46e:	601a      	str	r2, [r3, #0]
 800d470:	f3bf 8f4f 	dsb	sy
 800d474:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d478:	bf00      	nop
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	200009cc 	.word	0x200009cc
 800d484:	200008cc 	.word	0x200008cc
 800d488:	200009d8 	.word	0x200009d8
 800d48c:	200009e8 	.word	0x200009e8
 800d490:	200009d4 	.word	0x200009d4
 800d494:	200008d0 	.word	0x200008d0
 800d498:	e000ed04 	.word	0xe000ed04

0800d49c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b084      	sub	sp, #16
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d017      	beq.n	800d4de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d4ae:	4b13      	ldr	r3, [pc, #76]	; (800d4fc <vTaskDelay+0x60>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00a      	beq.n	800d4cc <vTaskDelay+0x30>
	__asm volatile
 800d4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ba:	f383 8811 	msr	BASEPRI, r3
 800d4be:	f3bf 8f6f 	isb	sy
 800d4c2:	f3bf 8f4f 	dsb	sy
 800d4c6:	60bb      	str	r3, [r7, #8]
}
 800d4c8:	bf00      	nop
 800d4ca:	e7fe      	b.n	800d4ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d4cc:	f000 f880 	bl	800d5d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 fe12 	bl	800e0fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d4d8:	f000 f888 	bl	800d5ec <xTaskResumeAll>
 800d4dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d107      	bne.n	800d4f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d4e4:	4b06      	ldr	r3, [pc, #24]	; (800d500 <vTaskDelay+0x64>)
 800d4e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4ea:	601a      	str	r2, [r3, #0]
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d4f4:	bf00      	nop
 800d4f6:	3710      	adds	r7, #16
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}
 800d4fc:	200009f4 	.word	0x200009f4
 800d500:	e000ed04 	.word	0xe000ed04

0800d504 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b08a      	sub	sp, #40	; 0x28
 800d508:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d50a:	2300      	movs	r3, #0
 800d50c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d50e:	2300      	movs	r3, #0
 800d510:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d512:	463a      	mov	r2, r7
 800d514:	1d39      	adds	r1, r7, #4
 800d516:	f107 0308 	add.w	r3, r7, #8
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7f5 f8dc 	bl	80026d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d520:	6839      	ldr	r1, [r7, #0]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	68ba      	ldr	r2, [r7, #8]
 800d526:	9202      	str	r2, [sp, #8]
 800d528:	9301      	str	r3, [sp, #4]
 800d52a:	2300      	movs	r3, #0
 800d52c:	9300      	str	r3, [sp, #0]
 800d52e:	2300      	movs	r3, #0
 800d530:	460a      	mov	r2, r1
 800d532:	4921      	ldr	r1, [pc, #132]	; (800d5b8 <vTaskStartScheduler+0xb4>)
 800d534:	4821      	ldr	r0, [pc, #132]	; (800d5bc <vTaskStartScheduler+0xb8>)
 800d536:	f7ff fe1d 	bl	800d174 <xTaskCreateStatic>
 800d53a:	4603      	mov	r3, r0
 800d53c:	4a20      	ldr	r2, [pc, #128]	; (800d5c0 <vTaskStartScheduler+0xbc>)
 800d53e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d540:	4b1f      	ldr	r3, [pc, #124]	; (800d5c0 <vTaskStartScheduler+0xbc>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d002      	beq.n	800d54e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d548:	2301      	movs	r3, #1
 800d54a:	617b      	str	r3, [r7, #20]
 800d54c:	e001      	b.n	800d552 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d54e:	2300      	movs	r3, #0
 800d550:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	2b01      	cmp	r3, #1
 800d556:	d102      	bne.n	800d55e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d558:	f000 fe36 	bl	800e1c8 <xTimerCreateTimerTask>
 800d55c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	2b01      	cmp	r3, #1
 800d562:	d116      	bne.n	800d592 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d568:	f383 8811 	msr	BASEPRI, r3
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f3bf 8f4f 	dsb	sy
 800d574:	613b      	str	r3, [r7, #16]
}
 800d576:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d578:	4b12      	ldr	r3, [pc, #72]	; (800d5c4 <vTaskStartScheduler+0xc0>)
 800d57a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d57e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d580:	4b11      	ldr	r3, [pc, #68]	; (800d5c8 <vTaskStartScheduler+0xc4>)
 800d582:	2201      	movs	r2, #1
 800d584:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d586:	4b11      	ldr	r3, [pc, #68]	; (800d5cc <vTaskStartScheduler+0xc8>)
 800d588:	2200      	movs	r2, #0
 800d58a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d58c:	f001 f9d8 	bl	800e940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d590:	e00e      	b.n	800d5b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d598:	d10a      	bne.n	800d5b0 <vTaskStartScheduler+0xac>
	__asm volatile
 800d59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59e:	f383 8811 	msr	BASEPRI, r3
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	f3bf 8f4f 	dsb	sy
 800d5aa:	60fb      	str	r3, [r7, #12]
}
 800d5ac:	bf00      	nop
 800d5ae:	e7fe      	b.n	800d5ae <vTaskStartScheduler+0xaa>
}
 800d5b0:	bf00      	nop
 800d5b2:	3718      	adds	r7, #24
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	08012404 	.word	0x08012404
 800d5bc:	0800dbd9 	.word	0x0800dbd9
 800d5c0:	200009f0 	.word	0x200009f0
 800d5c4:	200009ec 	.word	0x200009ec
 800d5c8:	200009d8 	.word	0x200009d8
 800d5cc:	200009d0 	.word	0x200009d0

0800d5d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d5d4:	4b04      	ldr	r3, [pc, #16]	; (800d5e8 <vTaskSuspendAll+0x18>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	3301      	adds	r3, #1
 800d5da:	4a03      	ldr	r2, [pc, #12]	; (800d5e8 <vTaskSuspendAll+0x18>)
 800d5dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d5de:	bf00      	nop
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr
 800d5e8:	200009f4 	.word	0x200009f4

0800d5ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d5fa:	4b41      	ldr	r3, [pc, #260]	; (800d700 <xTaskResumeAll+0x114>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d10a      	bne.n	800d618 <xTaskResumeAll+0x2c>
	__asm volatile
 800d602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d606:	f383 8811 	msr	BASEPRI, r3
 800d60a:	f3bf 8f6f 	isb	sy
 800d60e:	f3bf 8f4f 	dsb	sy
 800d612:	603b      	str	r3, [r7, #0]
}
 800d614:	bf00      	nop
 800d616:	e7fe      	b.n	800d616 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d618:	f001 fa34 	bl	800ea84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d61c:	4b38      	ldr	r3, [pc, #224]	; (800d700 <xTaskResumeAll+0x114>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	3b01      	subs	r3, #1
 800d622:	4a37      	ldr	r2, [pc, #220]	; (800d700 <xTaskResumeAll+0x114>)
 800d624:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d626:	4b36      	ldr	r3, [pc, #216]	; (800d700 <xTaskResumeAll+0x114>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d161      	bne.n	800d6f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d62e:	4b35      	ldr	r3, [pc, #212]	; (800d704 <xTaskResumeAll+0x118>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d05d      	beq.n	800d6f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d636:	e02e      	b.n	800d696 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d638:	4b33      	ldr	r3, [pc, #204]	; (800d708 <xTaskResumeAll+0x11c>)
 800d63a:	68db      	ldr	r3, [r3, #12]
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	3318      	adds	r3, #24
 800d644:	4618      	mov	r0, r3
 800d646:	f7fe fe19 	bl	800c27c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	3304      	adds	r3, #4
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fe fe14 	bl	800c27c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d658:	2201      	movs	r2, #1
 800d65a:	409a      	lsls	r2, r3
 800d65c:	4b2b      	ldr	r3, [pc, #172]	; (800d70c <xTaskResumeAll+0x120>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4313      	orrs	r3, r2
 800d662:	4a2a      	ldr	r2, [pc, #168]	; (800d70c <xTaskResumeAll+0x120>)
 800d664:	6013      	str	r3, [r2, #0]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d66a:	4613      	mov	r3, r2
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	4413      	add	r3, r2
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4a27      	ldr	r2, [pc, #156]	; (800d710 <xTaskResumeAll+0x124>)
 800d674:	441a      	add	r2, r3
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	3304      	adds	r3, #4
 800d67a:	4619      	mov	r1, r3
 800d67c:	4610      	mov	r0, r2
 800d67e:	f7fe fda0 	bl	800c1c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d686:	4b23      	ldr	r3, [pc, #140]	; (800d714 <xTaskResumeAll+0x128>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d302      	bcc.n	800d696 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d690:	4b21      	ldr	r3, [pc, #132]	; (800d718 <xTaskResumeAll+0x12c>)
 800d692:	2201      	movs	r2, #1
 800d694:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d696:	4b1c      	ldr	r3, [pc, #112]	; (800d708 <xTaskResumeAll+0x11c>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d1cc      	bne.n	800d638 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d001      	beq.n	800d6a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d6a4:	f000 fb4e 	bl	800dd44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d6a8:	4b1c      	ldr	r3, [pc, #112]	; (800d71c <xTaskResumeAll+0x130>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d010      	beq.n	800d6d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d6b4:	f000 f846 	bl	800d744 <xTaskIncrementTick>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d002      	beq.n	800d6c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d6be:	4b16      	ldr	r3, [pc, #88]	; (800d718 <xTaskResumeAll+0x12c>)
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	3b01      	subs	r3, #1
 800d6c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d1f1      	bne.n	800d6b4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d6d0:	4b12      	ldr	r3, [pc, #72]	; (800d71c <xTaskResumeAll+0x130>)
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d6d6:	4b10      	ldr	r3, [pc, #64]	; (800d718 <xTaskResumeAll+0x12c>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d009      	beq.n	800d6f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d6e2:	4b0f      	ldr	r3, [pc, #60]	; (800d720 <xTaskResumeAll+0x134>)
 800d6e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6e8:	601a      	str	r2, [r3, #0]
 800d6ea:	f3bf 8f4f 	dsb	sy
 800d6ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d6f2:	f001 f9f7 	bl	800eae4 <vPortExitCritical>

	return xAlreadyYielded;
 800d6f6:	68bb      	ldr	r3, [r7, #8]
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3710      	adds	r7, #16
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	200009f4 	.word	0x200009f4
 800d704:	200009cc 	.word	0x200009cc
 800d708:	2000098c 	.word	0x2000098c
 800d70c:	200009d4 	.word	0x200009d4
 800d710:	200008d0 	.word	0x200008d0
 800d714:	200008cc 	.word	0x200008cc
 800d718:	200009e0 	.word	0x200009e0
 800d71c:	200009dc 	.word	0x200009dc
 800d720:	e000ed04 	.word	0xe000ed04

0800d724 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d724:	b480      	push	{r7}
 800d726:	b083      	sub	sp, #12
 800d728:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d72a:	4b05      	ldr	r3, [pc, #20]	; (800d740 <xTaskGetTickCount+0x1c>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d730:	687b      	ldr	r3, [r7, #4]
}
 800d732:	4618      	mov	r0, r3
 800d734:	370c      	adds	r7, #12
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr
 800d73e:	bf00      	nop
 800d740:	200009d0 	.word	0x200009d0

0800d744 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b086      	sub	sp, #24
 800d748:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d74a:	2300      	movs	r3, #0
 800d74c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d74e:	4b4e      	ldr	r3, [pc, #312]	; (800d888 <xTaskIncrementTick+0x144>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	f040 808e 	bne.w	800d874 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d758:	4b4c      	ldr	r3, [pc, #304]	; (800d88c <xTaskIncrementTick+0x148>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	3301      	adds	r3, #1
 800d75e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d760:	4a4a      	ldr	r2, [pc, #296]	; (800d88c <xTaskIncrementTick+0x148>)
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d120      	bne.n	800d7ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d76c:	4b48      	ldr	r3, [pc, #288]	; (800d890 <xTaskIncrementTick+0x14c>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d00a      	beq.n	800d78c <xTaskIncrementTick+0x48>
	__asm volatile
 800d776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77a:	f383 8811 	msr	BASEPRI, r3
 800d77e:	f3bf 8f6f 	isb	sy
 800d782:	f3bf 8f4f 	dsb	sy
 800d786:	603b      	str	r3, [r7, #0]
}
 800d788:	bf00      	nop
 800d78a:	e7fe      	b.n	800d78a <xTaskIncrementTick+0x46>
 800d78c:	4b40      	ldr	r3, [pc, #256]	; (800d890 <xTaskIncrementTick+0x14c>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	60fb      	str	r3, [r7, #12]
 800d792:	4b40      	ldr	r3, [pc, #256]	; (800d894 <xTaskIncrementTick+0x150>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a3e      	ldr	r2, [pc, #248]	; (800d890 <xTaskIncrementTick+0x14c>)
 800d798:	6013      	str	r3, [r2, #0]
 800d79a:	4a3e      	ldr	r2, [pc, #248]	; (800d894 <xTaskIncrementTick+0x150>)
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6013      	str	r3, [r2, #0]
 800d7a0:	4b3d      	ldr	r3, [pc, #244]	; (800d898 <xTaskIncrementTick+0x154>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	4a3c      	ldr	r2, [pc, #240]	; (800d898 <xTaskIncrementTick+0x154>)
 800d7a8:	6013      	str	r3, [r2, #0]
 800d7aa:	f000 facb 	bl	800dd44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d7ae:	4b3b      	ldr	r3, [pc, #236]	; (800d89c <xTaskIncrementTick+0x158>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	693a      	ldr	r2, [r7, #16]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d348      	bcc.n	800d84a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7b8:	4b35      	ldr	r3, [pc, #212]	; (800d890 <xTaskIncrementTick+0x14c>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d104      	bne.n	800d7cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7c2:	4b36      	ldr	r3, [pc, #216]	; (800d89c <xTaskIncrementTick+0x158>)
 800d7c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7c8:	601a      	str	r2, [r3, #0]
					break;
 800d7ca:	e03e      	b.n	800d84a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7cc:	4b30      	ldr	r3, [pc, #192]	; (800d890 <xTaskIncrementTick+0x14c>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	68db      	ldr	r3, [r3, #12]
 800d7d2:	68db      	ldr	r3, [r3, #12]
 800d7d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d7dc:	693a      	ldr	r2, [r7, #16]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d203      	bcs.n	800d7ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d7e4:	4a2d      	ldr	r2, [pc, #180]	; (800d89c <xTaskIncrementTick+0x158>)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d7ea:	e02e      	b.n	800d84a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	3304      	adds	r3, #4
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f7fe fd43 	bl	800c27c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d004      	beq.n	800d808 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	3318      	adds	r3, #24
 800d802:	4618      	mov	r0, r3
 800d804:	f7fe fd3a 	bl	800c27c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80c:	2201      	movs	r2, #1
 800d80e:	409a      	lsls	r2, r3
 800d810:	4b23      	ldr	r3, [pc, #140]	; (800d8a0 <xTaskIncrementTick+0x15c>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4313      	orrs	r3, r2
 800d816:	4a22      	ldr	r2, [pc, #136]	; (800d8a0 <xTaskIncrementTick+0x15c>)
 800d818:	6013      	str	r3, [r2, #0]
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d81e:	4613      	mov	r3, r2
 800d820:	009b      	lsls	r3, r3, #2
 800d822:	4413      	add	r3, r2
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	4a1f      	ldr	r2, [pc, #124]	; (800d8a4 <xTaskIncrementTick+0x160>)
 800d828:	441a      	add	r2, r3
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	3304      	adds	r3, #4
 800d82e:	4619      	mov	r1, r3
 800d830:	4610      	mov	r0, r2
 800d832:	f7fe fcc6 	bl	800c1c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d83a:	4b1b      	ldr	r3, [pc, #108]	; (800d8a8 <xTaskIncrementTick+0x164>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d840:	429a      	cmp	r2, r3
 800d842:	d3b9      	bcc.n	800d7b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d844:	2301      	movs	r3, #1
 800d846:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d848:	e7b6      	b.n	800d7b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d84a:	4b17      	ldr	r3, [pc, #92]	; (800d8a8 <xTaskIncrementTick+0x164>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d850:	4914      	ldr	r1, [pc, #80]	; (800d8a4 <xTaskIncrementTick+0x160>)
 800d852:	4613      	mov	r3, r2
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	4413      	add	r3, r2
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	440b      	add	r3, r1
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d901      	bls.n	800d866 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d862:	2301      	movs	r3, #1
 800d864:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d866:	4b11      	ldr	r3, [pc, #68]	; (800d8ac <xTaskIncrementTick+0x168>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d007      	beq.n	800d87e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d86e:	2301      	movs	r3, #1
 800d870:	617b      	str	r3, [r7, #20]
 800d872:	e004      	b.n	800d87e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d874:	4b0e      	ldr	r3, [pc, #56]	; (800d8b0 <xTaskIncrementTick+0x16c>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	3301      	adds	r3, #1
 800d87a:	4a0d      	ldr	r2, [pc, #52]	; (800d8b0 <xTaskIncrementTick+0x16c>)
 800d87c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d87e:	697b      	ldr	r3, [r7, #20]
}
 800d880:	4618      	mov	r0, r3
 800d882:	3718      	adds	r7, #24
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}
 800d888:	200009f4 	.word	0x200009f4
 800d88c:	200009d0 	.word	0x200009d0
 800d890:	20000984 	.word	0x20000984
 800d894:	20000988 	.word	0x20000988
 800d898:	200009e4 	.word	0x200009e4
 800d89c:	200009ec 	.word	0x200009ec
 800d8a0:	200009d4 	.word	0x200009d4
 800d8a4:	200008d0 	.word	0x200008d0
 800d8a8:	200008cc 	.word	0x200008cc
 800d8ac:	200009e0 	.word	0x200009e0
 800d8b0:	200009dc 	.word	0x200009dc

0800d8b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b087      	sub	sp, #28
 800d8b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d8ba:	4b27      	ldr	r3, [pc, #156]	; (800d958 <vTaskSwitchContext+0xa4>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d003      	beq.n	800d8ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d8c2:	4b26      	ldr	r3, [pc, #152]	; (800d95c <vTaskSwitchContext+0xa8>)
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d8c8:	e03f      	b.n	800d94a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d8ca:	4b24      	ldr	r3, [pc, #144]	; (800d95c <vTaskSwitchContext+0xa8>)
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8d0:	4b23      	ldr	r3, [pc, #140]	; (800d960 <vTaskSwitchContext+0xac>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	fab3 f383 	clz	r3, r3
 800d8dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d8de:	7afb      	ldrb	r3, [r7, #11]
 800d8e0:	f1c3 031f 	rsb	r3, r3, #31
 800d8e4:	617b      	str	r3, [r7, #20]
 800d8e6:	491f      	ldr	r1, [pc, #124]	; (800d964 <vTaskSwitchContext+0xb0>)
 800d8e8:	697a      	ldr	r2, [r7, #20]
 800d8ea:	4613      	mov	r3, r2
 800d8ec:	009b      	lsls	r3, r3, #2
 800d8ee:	4413      	add	r3, r2
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	440b      	add	r3, r1
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d10a      	bne.n	800d910 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8fe:	f383 8811 	msr	BASEPRI, r3
 800d902:	f3bf 8f6f 	isb	sy
 800d906:	f3bf 8f4f 	dsb	sy
 800d90a:	607b      	str	r3, [r7, #4]
}
 800d90c:	bf00      	nop
 800d90e:	e7fe      	b.n	800d90e <vTaskSwitchContext+0x5a>
 800d910:	697a      	ldr	r2, [r7, #20]
 800d912:	4613      	mov	r3, r2
 800d914:	009b      	lsls	r3, r3, #2
 800d916:	4413      	add	r3, r2
 800d918:	009b      	lsls	r3, r3, #2
 800d91a:	4a12      	ldr	r2, [pc, #72]	; (800d964 <vTaskSwitchContext+0xb0>)
 800d91c:	4413      	add	r3, r2
 800d91e:	613b      	str	r3, [r7, #16]
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	685a      	ldr	r2, [r3, #4]
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	605a      	str	r2, [r3, #4]
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	685a      	ldr	r2, [r3, #4]
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	3308      	adds	r3, #8
 800d932:	429a      	cmp	r2, r3
 800d934:	d104      	bne.n	800d940 <vTaskSwitchContext+0x8c>
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	685a      	ldr	r2, [r3, #4]
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	605a      	str	r2, [r3, #4]
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	4a08      	ldr	r2, [pc, #32]	; (800d968 <vTaskSwitchContext+0xb4>)
 800d948:	6013      	str	r3, [r2, #0]
}
 800d94a:	bf00      	nop
 800d94c:	371c      	adds	r7, #28
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	200009f4 	.word	0x200009f4
 800d95c:	200009e0 	.word	0x200009e0
 800d960:	200009d4 	.word	0x200009d4
 800d964:	200008d0 	.word	0x200008d0
 800d968:	200008cc 	.word	0x200008cc

0800d96c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d10a      	bne.n	800d992 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d980:	f383 8811 	msr	BASEPRI, r3
 800d984:	f3bf 8f6f 	isb	sy
 800d988:	f3bf 8f4f 	dsb	sy
 800d98c:	60fb      	str	r3, [r7, #12]
}
 800d98e:	bf00      	nop
 800d990:	e7fe      	b.n	800d990 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d992:	4b07      	ldr	r3, [pc, #28]	; (800d9b0 <vTaskPlaceOnEventList+0x44>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	3318      	adds	r3, #24
 800d998:	4619      	mov	r1, r3
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f7fe fc35 	bl	800c20a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d9a0:	2101      	movs	r1, #1
 800d9a2:	6838      	ldr	r0, [r7, #0]
 800d9a4:	f000 fbaa 	bl	800e0fc <prvAddCurrentTaskToDelayedList>
}
 800d9a8:	bf00      	nop
 800d9aa:	3710      	adds	r7, #16
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	200008cc 	.word	0x200008cc

0800d9b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b086      	sub	sp, #24
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d10a      	bne.n	800d9dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ca:	f383 8811 	msr	BASEPRI, r3
 800d9ce:	f3bf 8f6f 	isb	sy
 800d9d2:	f3bf 8f4f 	dsb	sy
 800d9d6:	617b      	str	r3, [r7, #20]
}
 800d9d8:	bf00      	nop
 800d9da:	e7fe      	b.n	800d9da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9dc:	4b0a      	ldr	r3, [pc, #40]	; (800da08 <vTaskPlaceOnEventListRestricted+0x54>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	3318      	adds	r3, #24
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	68f8      	ldr	r0, [r7, #12]
 800d9e6:	f7fe fbec 	bl	800c1c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d002      	beq.n	800d9f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d9f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d9f6:	6879      	ldr	r1, [r7, #4]
 800d9f8:	68b8      	ldr	r0, [r7, #8]
 800d9fa:	f000 fb7f 	bl	800e0fc <prvAddCurrentTaskToDelayedList>
	}
 800d9fe:	bf00      	nop
 800da00:	3718      	adds	r7, #24
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	200008cc 	.word	0x200008cc

0800da0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b086      	sub	sp, #24
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	68db      	ldr	r3, [r3, #12]
 800da1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d10a      	bne.n	800da38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800da22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da26:	f383 8811 	msr	BASEPRI, r3
 800da2a:	f3bf 8f6f 	isb	sy
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	60fb      	str	r3, [r7, #12]
}
 800da34:	bf00      	nop
 800da36:	e7fe      	b.n	800da36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	3318      	adds	r3, #24
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fe fc1d 	bl	800c27c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da42:	4b1d      	ldr	r3, [pc, #116]	; (800dab8 <xTaskRemoveFromEventList+0xac>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d11c      	bne.n	800da84 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	3304      	adds	r3, #4
 800da4e:	4618      	mov	r0, r3
 800da50:	f7fe fc14 	bl	800c27c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da58:	2201      	movs	r2, #1
 800da5a:	409a      	lsls	r2, r3
 800da5c:	4b17      	ldr	r3, [pc, #92]	; (800dabc <xTaskRemoveFromEventList+0xb0>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4313      	orrs	r3, r2
 800da62:	4a16      	ldr	r2, [pc, #88]	; (800dabc <xTaskRemoveFromEventList+0xb0>)
 800da64:	6013      	str	r3, [r2, #0]
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da6a:	4613      	mov	r3, r2
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	4413      	add	r3, r2
 800da70:	009b      	lsls	r3, r3, #2
 800da72:	4a13      	ldr	r2, [pc, #76]	; (800dac0 <xTaskRemoveFromEventList+0xb4>)
 800da74:	441a      	add	r2, r3
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	3304      	adds	r3, #4
 800da7a:	4619      	mov	r1, r3
 800da7c:	4610      	mov	r0, r2
 800da7e:	f7fe fba0 	bl	800c1c2 <vListInsertEnd>
 800da82:	e005      	b.n	800da90 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	3318      	adds	r3, #24
 800da88:	4619      	mov	r1, r3
 800da8a:	480e      	ldr	r0, [pc, #56]	; (800dac4 <xTaskRemoveFromEventList+0xb8>)
 800da8c:	f7fe fb99 	bl	800c1c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da94:	4b0c      	ldr	r3, [pc, #48]	; (800dac8 <xTaskRemoveFromEventList+0xbc>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d905      	bls.n	800daaa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800da9e:	2301      	movs	r3, #1
 800daa0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800daa2:	4b0a      	ldr	r3, [pc, #40]	; (800dacc <xTaskRemoveFromEventList+0xc0>)
 800daa4:	2201      	movs	r2, #1
 800daa6:	601a      	str	r2, [r3, #0]
 800daa8:	e001      	b.n	800daae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800daaa:	2300      	movs	r3, #0
 800daac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800daae:	697b      	ldr	r3, [r7, #20]
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3718      	adds	r7, #24
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	200009f4 	.word	0x200009f4
 800dabc:	200009d4 	.word	0x200009d4
 800dac0:	200008d0 	.word	0x200008d0
 800dac4:	2000098c 	.word	0x2000098c
 800dac8:	200008cc 	.word	0x200008cc
 800dacc:	200009e0 	.word	0x200009e0

0800dad0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dad8:	4b06      	ldr	r3, [pc, #24]	; (800daf4 <vTaskInternalSetTimeOutState+0x24>)
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dae0:	4b05      	ldr	r3, [pc, #20]	; (800daf8 <vTaskInternalSetTimeOutState+0x28>)
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	605a      	str	r2, [r3, #4]
}
 800dae8:	bf00      	nop
 800daea:	370c      	adds	r7, #12
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr
 800daf4:	200009e4 	.word	0x200009e4
 800daf8:	200009d0 	.word	0x200009d0

0800dafc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b088      	sub	sp, #32
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d10a      	bne.n	800db22 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800db0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db10:	f383 8811 	msr	BASEPRI, r3
 800db14:	f3bf 8f6f 	isb	sy
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	613b      	str	r3, [r7, #16]
}
 800db1e:	bf00      	nop
 800db20:	e7fe      	b.n	800db20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d10a      	bne.n	800db3e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800db28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db2c:	f383 8811 	msr	BASEPRI, r3
 800db30:	f3bf 8f6f 	isb	sy
 800db34:	f3bf 8f4f 	dsb	sy
 800db38:	60fb      	str	r3, [r7, #12]
}
 800db3a:	bf00      	nop
 800db3c:	e7fe      	b.n	800db3c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800db3e:	f000 ffa1 	bl	800ea84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800db42:	4b1d      	ldr	r3, [pc, #116]	; (800dbb8 <xTaskCheckForTimeOut+0xbc>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	69ba      	ldr	r2, [r7, #24]
 800db4e:	1ad3      	subs	r3, r2, r3
 800db50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db5a:	d102      	bne.n	800db62 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800db5c:	2300      	movs	r3, #0
 800db5e:	61fb      	str	r3, [r7, #28]
 800db60:	e023      	b.n	800dbaa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	4b15      	ldr	r3, [pc, #84]	; (800dbbc <xTaskCheckForTimeOut+0xc0>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d007      	beq.n	800db7e <xTaskCheckForTimeOut+0x82>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	685b      	ldr	r3, [r3, #4]
 800db72:	69ba      	ldr	r2, [r7, #24]
 800db74:	429a      	cmp	r2, r3
 800db76:	d302      	bcc.n	800db7e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800db78:	2301      	movs	r3, #1
 800db7a:	61fb      	str	r3, [r7, #28]
 800db7c:	e015      	b.n	800dbaa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	697a      	ldr	r2, [r7, #20]
 800db84:	429a      	cmp	r2, r3
 800db86:	d20b      	bcs.n	800dba0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	1ad2      	subs	r2, r2, r3
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f7ff ff9b 	bl	800dad0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800db9a:	2300      	movs	r3, #0
 800db9c:	61fb      	str	r3, [r7, #28]
 800db9e:	e004      	b.n	800dbaa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	2200      	movs	r2, #0
 800dba4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dba6:	2301      	movs	r3, #1
 800dba8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dbaa:	f000 ff9b 	bl	800eae4 <vPortExitCritical>

	return xReturn;
 800dbae:	69fb      	ldr	r3, [r7, #28]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3720      	adds	r7, #32
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	200009d0 	.word	0x200009d0
 800dbbc:	200009e4 	.word	0x200009e4

0800dbc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dbc4:	4b03      	ldr	r3, [pc, #12]	; (800dbd4 <vTaskMissedYield+0x14>)
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	601a      	str	r2, [r3, #0]
}
 800dbca:	bf00      	nop
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr
 800dbd4:	200009e0 	.word	0x200009e0

0800dbd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dbe0:	f000 f852 	bl	800dc88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dbe4:	4b06      	ldr	r3, [pc, #24]	; (800dc00 <prvIdleTask+0x28>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d9f9      	bls.n	800dbe0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dbec:	4b05      	ldr	r3, [pc, #20]	; (800dc04 <prvIdleTask+0x2c>)
 800dbee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbf2:	601a      	str	r2, [r3, #0]
 800dbf4:	f3bf 8f4f 	dsb	sy
 800dbf8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dbfc:	e7f0      	b.n	800dbe0 <prvIdleTask+0x8>
 800dbfe:	bf00      	nop
 800dc00:	200008d0 	.word	0x200008d0
 800dc04:	e000ed04 	.word	0xe000ed04

0800dc08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc0e:	2300      	movs	r3, #0
 800dc10:	607b      	str	r3, [r7, #4]
 800dc12:	e00c      	b.n	800dc2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	4613      	mov	r3, r2
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	4413      	add	r3, r2
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	4a12      	ldr	r2, [pc, #72]	; (800dc68 <prvInitialiseTaskLists+0x60>)
 800dc20:	4413      	add	r3, r2
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fe faa0 	bl	800c168 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	607b      	str	r3, [r7, #4]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2b06      	cmp	r3, #6
 800dc32:	d9ef      	bls.n	800dc14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dc34:	480d      	ldr	r0, [pc, #52]	; (800dc6c <prvInitialiseTaskLists+0x64>)
 800dc36:	f7fe fa97 	bl	800c168 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dc3a:	480d      	ldr	r0, [pc, #52]	; (800dc70 <prvInitialiseTaskLists+0x68>)
 800dc3c:	f7fe fa94 	bl	800c168 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dc40:	480c      	ldr	r0, [pc, #48]	; (800dc74 <prvInitialiseTaskLists+0x6c>)
 800dc42:	f7fe fa91 	bl	800c168 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dc46:	480c      	ldr	r0, [pc, #48]	; (800dc78 <prvInitialiseTaskLists+0x70>)
 800dc48:	f7fe fa8e 	bl	800c168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dc4c:	480b      	ldr	r0, [pc, #44]	; (800dc7c <prvInitialiseTaskLists+0x74>)
 800dc4e:	f7fe fa8b 	bl	800c168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dc52:	4b0b      	ldr	r3, [pc, #44]	; (800dc80 <prvInitialiseTaskLists+0x78>)
 800dc54:	4a05      	ldr	r2, [pc, #20]	; (800dc6c <prvInitialiseTaskLists+0x64>)
 800dc56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dc58:	4b0a      	ldr	r3, [pc, #40]	; (800dc84 <prvInitialiseTaskLists+0x7c>)
 800dc5a:	4a05      	ldr	r2, [pc, #20]	; (800dc70 <prvInitialiseTaskLists+0x68>)
 800dc5c:	601a      	str	r2, [r3, #0]
}
 800dc5e:	bf00      	nop
 800dc60:	3708      	adds	r7, #8
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	200008d0 	.word	0x200008d0
 800dc6c:	2000095c 	.word	0x2000095c
 800dc70:	20000970 	.word	0x20000970
 800dc74:	2000098c 	.word	0x2000098c
 800dc78:	200009a0 	.word	0x200009a0
 800dc7c:	200009b8 	.word	0x200009b8
 800dc80:	20000984 	.word	0x20000984
 800dc84:	20000988 	.word	0x20000988

0800dc88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dc8e:	e019      	b.n	800dcc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dc90:	f000 fef8 	bl	800ea84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc94:	4b10      	ldr	r3, [pc, #64]	; (800dcd8 <prvCheckTasksWaitingTermination+0x50>)
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	68db      	ldr	r3, [r3, #12]
 800dc9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	3304      	adds	r3, #4
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7fe faeb 	bl	800c27c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dca6:	4b0d      	ldr	r3, [pc, #52]	; (800dcdc <prvCheckTasksWaitingTermination+0x54>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	4a0b      	ldr	r2, [pc, #44]	; (800dcdc <prvCheckTasksWaitingTermination+0x54>)
 800dcae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dcb0:	4b0b      	ldr	r3, [pc, #44]	; (800dce0 <prvCheckTasksWaitingTermination+0x58>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	3b01      	subs	r3, #1
 800dcb6:	4a0a      	ldr	r2, [pc, #40]	; (800dce0 <prvCheckTasksWaitingTermination+0x58>)
 800dcb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dcba:	f000 ff13 	bl	800eae4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 f810 	bl	800dce4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dcc4:	4b06      	ldr	r3, [pc, #24]	; (800dce0 <prvCheckTasksWaitingTermination+0x58>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d1e1      	bne.n	800dc90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dccc:	bf00      	nop
 800dcce:	bf00      	nop
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	200009a0 	.word	0x200009a0
 800dcdc:	200009cc 	.word	0x200009cc
 800dce0:	200009b4 	.word	0x200009b4

0800dce4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b084      	sub	sp, #16
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d108      	bne.n	800dd08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f001 f8b0 	bl	800ee60 <vPortFree>
				vPortFree( pxTCB );
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f001 f8ad 	bl	800ee60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dd06:	e018      	b.n	800dd3a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d103      	bne.n	800dd1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f001 f8a4 	bl	800ee60 <vPortFree>
	}
 800dd18:	e00f      	b.n	800dd3a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dd20:	2b02      	cmp	r3, #2
 800dd22:	d00a      	beq.n	800dd3a <prvDeleteTCB+0x56>
	__asm volatile
 800dd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd28:	f383 8811 	msr	BASEPRI, r3
 800dd2c:	f3bf 8f6f 	isb	sy
 800dd30:	f3bf 8f4f 	dsb	sy
 800dd34:	60fb      	str	r3, [r7, #12]
}
 800dd36:	bf00      	nop
 800dd38:	e7fe      	b.n	800dd38 <prvDeleteTCB+0x54>
	}
 800dd3a:	bf00      	nop
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
	...

0800dd44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd4a:	4b0c      	ldr	r3, [pc, #48]	; (800dd7c <prvResetNextTaskUnblockTime+0x38>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d104      	bne.n	800dd5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dd54:	4b0a      	ldr	r3, [pc, #40]	; (800dd80 <prvResetNextTaskUnblockTime+0x3c>)
 800dd56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dd5c:	e008      	b.n	800dd70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd5e:	4b07      	ldr	r3, [pc, #28]	; (800dd7c <prvResetNextTaskUnblockTime+0x38>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	68db      	ldr	r3, [r3, #12]
 800dd64:	68db      	ldr	r3, [r3, #12]
 800dd66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	685b      	ldr	r3, [r3, #4]
 800dd6c:	4a04      	ldr	r2, [pc, #16]	; (800dd80 <prvResetNextTaskUnblockTime+0x3c>)
 800dd6e:	6013      	str	r3, [r2, #0]
}
 800dd70:	bf00      	nop
 800dd72:	370c      	adds	r7, #12
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr
 800dd7c:	20000984 	.word	0x20000984
 800dd80:	200009ec 	.word	0x200009ec

0800dd84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dd84:	b480      	push	{r7}
 800dd86:	b083      	sub	sp, #12
 800dd88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dd8a:	4b0b      	ldr	r3, [pc, #44]	; (800ddb8 <xTaskGetSchedulerState+0x34>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d102      	bne.n	800dd98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dd92:	2301      	movs	r3, #1
 800dd94:	607b      	str	r3, [r7, #4]
 800dd96:	e008      	b.n	800ddaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd98:	4b08      	ldr	r3, [pc, #32]	; (800ddbc <xTaskGetSchedulerState+0x38>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d102      	bne.n	800dda6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dda0:	2302      	movs	r3, #2
 800dda2:	607b      	str	r3, [r7, #4]
 800dda4:	e001      	b.n	800ddaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dda6:	2300      	movs	r3, #0
 800dda8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ddaa:	687b      	ldr	r3, [r7, #4]
	}
 800ddac:	4618      	mov	r0, r3
 800ddae:	370c      	adds	r7, #12
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	4770      	bx	lr
 800ddb8:	200009d8 	.word	0x200009d8
 800ddbc:	200009f4 	.word	0x200009f4

0800ddc0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b084      	sub	sp, #16
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d05e      	beq.n	800de94 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddda:	4b31      	ldr	r3, [pc, #196]	; (800dea0 <xTaskPriorityInherit+0xe0>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d24e      	bcs.n	800de82 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	699b      	ldr	r3, [r3, #24]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	db06      	blt.n	800ddfa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddec:	4b2c      	ldr	r3, [pc, #176]	; (800dea0 <xTaskPriorityInherit+0xe0>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf2:	f1c3 0207 	rsb	r2, r3, #7
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	6959      	ldr	r1, [r3, #20]
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de02:	4613      	mov	r3, r2
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	4413      	add	r3, r2
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	4a26      	ldr	r2, [pc, #152]	; (800dea4 <xTaskPriorityInherit+0xe4>)
 800de0c:	4413      	add	r3, r2
 800de0e:	4299      	cmp	r1, r3
 800de10:	d12f      	bne.n	800de72 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	3304      	adds	r3, #4
 800de16:	4618      	mov	r0, r3
 800de18:	f7fe fa30 	bl	800c27c <uxListRemove>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d10a      	bne.n	800de38 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de26:	2201      	movs	r2, #1
 800de28:	fa02 f303 	lsl.w	r3, r2, r3
 800de2c:	43da      	mvns	r2, r3
 800de2e:	4b1e      	ldr	r3, [pc, #120]	; (800dea8 <xTaskPriorityInherit+0xe8>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	4013      	ands	r3, r2
 800de34:	4a1c      	ldr	r2, [pc, #112]	; (800dea8 <xTaskPriorityInherit+0xe8>)
 800de36:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800de38:	4b19      	ldr	r3, [pc, #100]	; (800dea0 <xTaskPriorityInherit+0xe0>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de46:	2201      	movs	r2, #1
 800de48:	409a      	lsls	r2, r3
 800de4a:	4b17      	ldr	r3, [pc, #92]	; (800dea8 <xTaskPriorityInherit+0xe8>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	4313      	orrs	r3, r2
 800de50:	4a15      	ldr	r2, [pc, #84]	; (800dea8 <xTaskPriorityInherit+0xe8>)
 800de52:	6013      	str	r3, [r2, #0]
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de58:	4613      	mov	r3, r2
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	4413      	add	r3, r2
 800de5e:	009b      	lsls	r3, r3, #2
 800de60:	4a10      	ldr	r2, [pc, #64]	; (800dea4 <xTaskPriorityInherit+0xe4>)
 800de62:	441a      	add	r2, r3
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	3304      	adds	r3, #4
 800de68:	4619      	mov	r1, r3
 800de6a:	4610      	mov	r0, r2
 800de6c:	f7fe f9a9 	bl	800c1c2 <vListInsertEnd>
 800de70:	e004      	b.n	800de7c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800de72:	4b0b      	ldr	r3, [pc, #44]	; (800dea0 <xTaskPriorityInherit+0xe0>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800de7c:	2301      	movs	r3, #1
 800de7e:	60fb      	str	r3, [r7, #12]
 800de80:	e008      	b.n	800de94 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de86:	4b06      	ldr	r3, [pc, #24]	; (800dea0 <xTaskPriorityInherit+0xe0>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d201      	bcs.n	800de94 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800de90:	2301      	movs	r3, #1
 800de92:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800de94:	68fb      	ldr	r3, [r7, #12]
	}
 800de96:	4618      	mov	r0, r3
 800de98:	3710      	adds	r7, #16
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
 800de9e:	bf00      	nop
 800dea0:	200008cc 	.word	0x200008cc
 800dea4:	200008d0 	.word	0x200008d0
 800dea8:	200009d4 	.word	0x200009d4

0800deac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800deac:	b580      	push	{r7, lr}
 800deae:	b086      	sub	sp, #24
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800deb8:	2300      	movs	r3, #0
 800deba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d06e      	beq.n	800dfa0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dec2:	4b3a      	ldr	r3, [pc, #232]	; (800dfac <xTaskPriorityDisinherit+0x100>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	693a      	ldr	r2, [r7, #16]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d00a      	beq.n	800dee2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800decc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded0:	f383 8811 	msr	BASEPRI, r3
 800ded4:	f3bf 8f6f 	isb	sy
 800ded8:	f3bf 8f4f 	dsb	sy
 800dedc:	60fb      	str	r3, [r7, #12]
}
 800dede:	bf00      	nop
 800dee0:	e7fe      	b.n	800dee0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d10a      	bne.n	800df00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800deea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deee:	f383 8811 	msr	BASEPRI, r3
 800def2:	f3bf 8f6f 	isb	sy
 800def6:	f3bf 8f4f 	dsb	sy
 800defa:	60bb      	str	r3, [r7, #8]
}
 800defc:	bf00      	nop
 800defe:	e7fe      	b.n	800defe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df04:	1e5a      	subs	r2, r3, #1
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df12:	429a      	cmp	r2, r3
 800df14:	d044      	beq.n	800dfa0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d140      	bne.n	800dfa0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	3304      	adds	r3, #4
 800df22:	4618      	mov	r0, r3
 800df24:	f7fe f9aa 	bl	800c27c <uxListRemove>
 800df28:	4603      	mov	r3, r0
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d115      	bne.n	800df5a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df32:	491f      	ldr	r1, [pc, #124]	; (800dfb0 <xTaskPriorityDisinherit+0x104>)
 800df34:	4613      	mov	r3, r2
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	4413      	add	r3, r2
 800df3a:	009b      	lsls	r3, r3, #2
 800df3c:	440b      	add	r3, r1
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d10a      	bne.n	800df5a <xTaskPriorityDisinherit+0xae>
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df48:	2201      	movs	r2, #1
 800df4a:	fa02 f303 	lsl.w	r3, r2, r3
 800df4e:	43da      	mvns	r2, r3
 800df50:	4b18      	ldr	r3, [pc, #96]	; (800dfb4 <xTaskPriorityDisinherit+0x108>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4013      	ands	r3, r2
 800df56:	4a17      	ldr	r2, [pc, #92]	; (800dfb4 <xTaskPriorityDisinherit+0x108>)
 800df58:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df66:	f1c3 0207 	rsb	r2, r3, #7
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df72:	2201      	movs	r2, #1
 800df74:	409a      	lsls	r2, r3
 800df76:	4b0f      	ldr	r3, [pc, #60]	; (800dfb4 <xTaskPriorityDisinherit+0x108>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4313      	orrs	r3, r2
 800df7c:	4a0d      	ldr	r2, [pc, #52]	; (800dfb4 <xTaskPriorityDisinherit+0x108>)
 800df7e:	6013      	str	r3, [r2, #0]
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df84:	4613      	mov	r3, r2
 800df86:	009b      	lsls	r3, r3, #2
 800df88:	4413      	add	r3, r2
 800df8a:	009b      	lsls	r3, r3, #2
 800df8c:	4a08      	ldr	r2, [pc, #32]	; (800dfb0 <xTaskPriorityDisinherit+0x104>)
 800df8e:	441a      	add	r2, r3
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	3304      	adds	r3, #4
 800df94:	4619      	mov	r1, r3
 800df96:	4610      	mov	r0, r2
 800df98:	f7fe f913 	bl	800c1c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800df9c:	2301      	movs	r3, #1
 800df9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dfa0:	697b      	ldr	r3, [r7, #20]
	}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3718      	adds	r7, #24
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	200008cc 	.word	0x200008cc
 800dfb0:	200008d0 	.word	0x200008d0
 800dfb4:	200009d4 	.word	0x200009d4

0800dfb8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b088      	sub	sp, #32
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d077      	beq.n	800e0c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d10a      	bne.n	800dfee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800dfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfdc:	f383 8811 	msr	BASEPRI, r3
 800dfe0:	f3bf 8f6f 	isb	sy
 800dfe4:	f3bf 8f4f 	dsb	sy
 800dfe8:	60fb      	str	r3, [r7, #12]
}
 800dfea:	bf00      	nop
 800dfec:	e7fe      	b.n	800dfec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dff2:	683a      	ldr	r2, [r7, #0]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d902      	bls.n	800dffe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	61fb      	str	r3, [r7, #28]
 800dffc:	e002      	b.n	800e004 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e002:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e004:	69bb      	ldr	r3, [r7, #24]
 800e006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e008:	69fa      	ldr	r2, [r7, #28]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d058      	beq.n	800e0c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e00e:	69bb      	ldr	r3, [r7, #24]
 800e010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e012:	697a      	ldr	r2, [r7, #20]
 800e014:	429a      	cmp	r2, r3
 800e016:	d153      	bne.n	800e0c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e018:	4b2b      	ldr	r3, [pc, #172]	; (800e0c8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	69ba      	ldr	r2, [r7, #24]
 800e01e:	429a      	cmp	r2, r3
 800e020:	d10a      	bne.n	800e038 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e026:	f383 8811 	msr	BASEPRI, r3
 800e02a:	f3bf 8f6f 	isb	sy
 800e02e:	f3bf 8f4f 	dsb	sy
 800e032:	60bb      	str	r3, [r7, #8]
}
 800e034:	bf00      	nop
 800e036:	e7fe      	b.n	800e036 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e038:	69bb      	ldr	r3, [r7, #24]
 800e03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e03c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e03e:	69bb      	ldr	r3, [r7, #24]
 800e040:	69fa      	ldr	r2, [r7, #28]
 800e042:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	699b      	ldr	r3, [r3, #24]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	db04      	blt.n	800e056 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e04c:	69fb      	ldr	r3, [r7, #28]
 800e04e:	f1c3 0207 	rsb	r2, r3, #7
 800e052:	69bb      	ldr	r3, [r7, #24]
 800e054:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e056:	69bb      	ldr	r3, [r7, #24]
 800e058:	6959      	ldr	r1, [r3, #20]
 800e05a:	693a      	ldr	r2, [r7, #16]
 800e05c:	4613      	mov	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	4413      	add	r3, r2
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	4a19      	ldr	r2, [pc, #100]	; (800e0cc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e066:	4413      	add	r3, r2
 800e068:	4299      	cmp	r1, r3
 800e06a:	d129      	bne.n	800e0c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e06c:	69bb      	ldr	r3, [r7, #24]
 800e06e:	3304      	adds	r3, #4
 800e070:	4618      	mov	r0, r3
 800e072:	f7fe f903 	bl	800c27c <uxListRemove>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10a      	bne.n	800e092 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e080:	2201      	movs	r2, #1
 800e082:	fa02 f303 	lsl.w	r3, r2, r3
 800e086:	43da      	mvns	r2, r3
 800e088:	4b11      	ldr	r3, [pc, #68]	; (800e0d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4013      	ands	r3, r2
 800e08e:	4a10      	ldr	r2, [pc, #64]	; (800e0d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e090:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e092:	69bb      	ldr	r3, [r7, #24]
 800e094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e096:	2201      	movs	r2, #1
 800e098:	409a      	lsls	r2, r3
 800e09a:	4b0d      	ldr	r3, [pc, #52]	; (800e0d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	4a0b      	ldr	r2, [pc, #44]	; (800e0d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e0a2:	6013      	str	r3, [r2, #0]
 800e0a4:	69bb      	ldr	r3, [r7, #24]
 800e0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	4413      	add	r3, r2
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	4a06      	ldr	r2, [pc, #24]	; (800e0cc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e0b2:	441a      	add	r2, r3
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	3304      	adds	r3, #4
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	4610      	mov	r0, r2
 800e0bc:	f7fe f881 	bl	800c1c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e0c0:	bf00      	nop
 800e0c2:	3720      	adds	r7, #32
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}
 800e0c8:	200008cc 	.word	0x200008cc
 800e0cc:	200008d0 	.word	0x200008d0
 800e0d0:	200009d4 	.word	0x200009d4

0800e0d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e0d4:	b480      	push	{r7}
 800e0d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e0d8:	4b07      	ldr	r3, [pc, #28]	; (800e0f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d004      	beq.n	800e0ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e0e0:	4b05      	ldr	r3, [pc, #20]	; (800e0f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e0e6:	3201      	adds	r2, #1
 800e0e8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e0ea:	4b03      	ldr	r3, [pc, #12]	; (800e0f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
	}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f6:	4770      	bx	lr
 800e0f8:	200008cc 	.word	0x200008cc

0800e0fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e106:	4b29      	ldr	r3, [pc, #164]	; (800e1ac <prvAddCurrentTaskToDelayedList+0xb0>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e10c:	4b28      	ldr	r3, [pc, #160]	; (800e1b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	3304      	adds	r3, #4
 800e112:	4618      	mov	r0, r3
 800e114:	f7fe f8b2 	bl	800c27c <uxListRemove>
 800e118:	4603      	mov	r3, r0
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d10b      	bne.n	800e136 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e11e:	4b24      	ldr	r3, [pc, #144]	; (800e1b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e124:	2201      	movs	r2, #1
 800e126:	fa02 f303 	lsl.w	r3, r2, r3
 800e12a:	43da      	mvns	r2, r3
 800e12c:	4b21      	ldr	r3, [pc, #132]	; (800e1b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4013      	ands	r3, r2
 800e132:	4a20      	ldr	r2, [pc, #128]	; (800e1b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e134:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e13c:	d10a      	bne.n	800e154 <prvAddCurrentTaskToDelayedList+0x58>
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d007      	beq.n	800e154 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e144:	4b1a      	ldr	r3, [pc, #104]	; (800e1b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	3304      	adds	r3, #4
 800e14a:	4619      	mov	r1, r3
 800e14c:	481a      	ldr	r0, [pc, #104]	; (800e1b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e14e:	f7fe f838 	bl	800c1c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e152:	e026      	b.n	800e1a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e154:	68fa      	ldr	r2, [r7, #12]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	4413      	add	r3, r2
 800e15a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e15c:	4b14      	ldr	r3, [pc, #80]	; (800e1b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	68ba      	ldr	r2, [r7, #8]
 800e162:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e164:	68ba      	ldr	r2, [r7, #8]
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d209      	bcs.n	800e180 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e16c:	4b13      	ldr	r3, [pc, #76]	; (800e1bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	4b0f      	ldr	r3, [pc, #60]	; (800e1b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	3304      	adds	r3, #4
 800e176:	4619      	mov	r1, r3
 800e178:	4610      	mov	r0, r2
 800e17a:	f7fe f846 	bl	800c20a <vListInsert>
}
 800e17e:	e010      	b.n	800e1a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e180:	4b0f      	ldr	r3, [pc, #60]	; (800e1c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	4b0a      	ldr	r3, [pc, #40]	; (800e1b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	3304      	adds	r3, #4
 800e18a:	4619      	mov	r1, r3
 800e18c:	4610      	mov	r0, r2
 800e18e:	f7fe f83c 	bl	800c20a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e192:	4b0c      	ldr	r3, [pc, #48]	; (800e1c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	68ba      	ldr	r2, [r7, #8]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d202      	bcs.n	800e1a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e19c:	4a09      	ldr	r2, [pc, #36]	; (800e1c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	6013      	str	r3, [r2, #0]
}
 800e1a2:	bf00      	nop
 800e1a4:	3710      	adds	r7, #16
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	200009d0 	.word	0x200009d0
 800e1b0:	200008cc 	.word	0x200008cc
 800e1b4:	200009d4 	.word	0x200009d4
 800e1b8:	200009b8 	.word	0x200009b8
 800e1bc:	20000988 	.word	0x20000988
 800e1c0:	20000984 	.word	0x20000984
 800e1c4:	200009ec 	.word	0x200009ec

0800e1c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b08a      	sub	sp, #40	; 0x28
 800e1cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e1d2:	f000 faeb 	bl	800e7ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e1d6:	4b1c      	ldr	r3, [pc, #112]	; (800e248 <xTimerCreateTimerTask+0x80>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d021      	beq.n	800e222 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e1e6:	1d3a      	adds	r2, r7, #4
 800e1e8:	f107 0108 	add.w	r1, r7, #8
 800e1ec:	f107 030c 	add.w	r3, r7, #12
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7f4 fa8b 	bl	800270c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e1f6:	6879      	ldr	r1, [r7, #4]
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	68fa      	ldr	r2, [r7, #12]
 800e1fc:	9202      	str	r2, [sp, #8]
 800e1fe:	9301      	str	r3, [sp, #4]
 800e200:	2302      	movs	r3, #2
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	2300      	movs	r3, #0
 800e206:	460a      	mov	r2, r1
 800e208:	4910      	ldr	r1, [pc, #64]	; (800e24c <xTimerCreateTimerTask+0x84>)
 800e20a:	4811      	ldr	r0, [pc, #68]	; (800e250 <xTimerCreateTimerTask+0x88>)
 800e20c:	f7fe ffb2 	bl	800d174 <xTaskCreateStatic>
 800e210:	4603      	mov	r3, r0
 800e212:	4a10      	ldr	r2, [pc, #64]	; (800e254 <xTimerCreateTimerTask+0x8c>)
 800e214:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e216:	4b0f      	ldr	r3, [pc, #60]	; (800e254 <xTimerCreateTimerTask+0x8c>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d001      	beq.n	800e222 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e21e:	2301      	movs	r3, #1
 800e220:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d10a      	bne.n	800e23e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e22c:	f383 8811 	msr	BASEPRI, r3
 800e230:	f3bf 8f6f 	isb	sy
 800e234:	f3bf 8f4f 	dsb	sy
 800e238:	613b      	str	r3, [r7, #16]
}
 800e23a:	bf00      	nop
 800e23c:	e7fe      	b.n	800e23c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e23e:	697b      	ldr	r3, [r7, #20]
}
 800e240:	4618      	mov	r0, r3
 800e242:	3718      	adds	r7, #24
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	20000a28 	.word	0x20000a28
 800e24c:	0801240c 	.word	0x0801240c
 800e250:	0800e38d 	.word	0x0800e38d
 800e254:	20000a2c 	.word	0x20000a2c

0800e258 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b08a      	sub	sp, #40	; 0x28
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	607a      	str	r2, [r7, #4]
 800e264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e266:	2300      	movs	r3, #0
 800e268:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d10a      	bne.n	800e286 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e274:	f383 8811 	msr	BASEPRI, r3
 800e278:	f3bf 8f6f 	isb	sy
 800e27c:	f3bf 8f4f 	dsb	sy
 800e280:	623b      	str	r3, [r7, #32]
}
 800e282:	bf00      	nop
 800e284:	e7fe      	b.n	800e284 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e286:	4b1a      	ldr	r3, [pc, #104]	; (800e2f0 <xTimerGenericCommand+0x98>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d02a      	beq.n	800e2e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	2b05      	cmp	r3, #5
 800e29e:	dc18      	bgt.n	800e2d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e2a0:	f7ff fd70 	bl	800dd84 <xTaskGetSchedulerState>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	2b02      	cmp	r3, #2
 800e2a8:	d109      	bne.n	800e2be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e2aa:	4b11      	ldr	r3, [pc, #68]	; (800e2f0 <xTimerGenericCommand+0x98>)
 800e2ac:	6818      	ldr	r0, [r3, #0]
 800e2ae:	f107 0114 	add.w	r1, r7, #20
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2b6:	f7fe f945 	bl	800c544 <xQueueGenericSend>
 800e2ba:	6278      	str	r0, [r7, #36]	; 0x24
 800e2bc:	e012      	b.n	800e2e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e2be:	4b0c      	ldr	r3, [pc, #48]	; (800e2f0 <xTimerGenericCommand+0x98>)
 800e2c0:	6818      	ldr	r0, [r3, #0]
 800e2c2:	f107 0114 	add.w	r1, r7, #20
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	f7fe f93b 	bl	800c544 <xQueueGenericSend>
 800e2ce:	6278      	str	r0, [r7, #36]	; 0x24
 800e2d0:	e008      	b.n	800e2e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e2d2:	4b07      	ldr	r3, [pc, #28]	; (800e2f0 <xTimerGenericCommand+0x98>)
 800e2d4:	6818      	ldr	r0, [r3, #0]
 800e2d6:	f107 0114 	add.w	r1, r7, #20
 800e2da:	2300      	movs	r3, #0
 800e2dc:	683a      	ldr	r2, [r7, #0]
 800e2de:	f7fe fa2f 	bl	800c740 <xQueueGenericSendFromISR>
 800e2e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3728      	adds	r7, #40	; 0x28
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	20000a28 	.word	0x20000a28

0800e2f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b088      	sub	sp, #32
 800e2f8:	af02      	add	r7, sp, #8
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2fe:	4b22      	ldr	r3, [pc, #136]	; (800e388 <prvProcessExpiredTimer+0x94>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	3304      	adds	r3, #4
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7fd ffb5 	bl	800c27c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e318:	f003 0304 	and.w	r3, r3, #4
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d022      	beq.n	800e366 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	699a      	ldr	r2, [r3, #24]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	18d1      	adds	r1, r2, r3
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	683a      	ldr	r2, [r7, #0]
 800e32c:	6978      	ldr	r0, [r7, #20]
 800e32e:	f000 f8d1 	bl	800e4d4 <prvInsertTimerInActiveList>
 800e332:	4603      	mov	r3, r0
 800e334:	2b00      	cmp	r3, #0
 800e336:	d01f      	beq.n	800e378 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e338:	2300      	movs	r3, #0
 800e33a:	9300      	str	r3, [sp, #0]
 800e33c:	2300      	movs	r3, #0
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	2100      	movs	r1, #0
 800e342:	6978      	ldr	r0, [r7, #20]
 800e344:	f7ff ff88 	bl	800e258 <xTimerGenericCommand>
 800e348:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d113      	bne.n	800e378 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	60fb      	str	r3, [r7, #12]
}
 800e362:	bf00      	nop
 800e364:	e7fe      	b.n	800e364 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e36c:	f023 0301 	bic.w	r3, r3, #1
 800e370:	b2da      	uxtb	r2, r3
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	6a1b      	ldr	r3, [r3, #32]
 800e37c:	6978      	ldr	r0, [r7, #20]
 800e37e:	4798      	blx	r3
}
 800e380:	bf00      	nop
 800e382:	3718      	adds	r7, #24
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	20000a20 	.word	0x20000a20

0800e38c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e394:	f107 0308 	add.w	r3, r7, #8
 800e398:	4618      	mov	r0, r3
 800e39a:	f000 f857 	bl	800e44c <prvGetNextExpireTime>
 800e39e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f000 f803 	bl	800e3b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e3aa:	f000 f8d5 	bl	800e558 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e3ae:	e7f1      	b.n	800e394 <prvTimerTask+0x8>

0800e3b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e3ba:	f7ff f909 	bl	800d5d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e3be:	f107 0308 	add.w	r3, r7, #8
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f000 f866 	bl	800e494 <prvSampleTimeNow>
 800e3c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d130      	bne.n	800e432 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d10a      	bne.n	800e3ec <prvProcessTimerOrBlockTask+0x3c>
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d806      	bhi.n	800e3ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e3de:	f7ff f905 	bl	800d5ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e3e2:	68f9      	ldr	r1, [r7, #12]
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f7ff ff85 	bl	800e2f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e3ea:	e024      	b.n	800e436 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d008      	beq.n	800e404 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e3f2:	4b13      	ldr	r3, [pc, #76]	; (800e440 <prvProcessTimerOrBlockTask+0x90>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d101      	bne.n	800e400 <prvProcessTimerOrBlockTask+0x50>
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	e000      	b.n	800e402 <prvProcessTimerOrBlockTask+0x52>
 800e400:	2300      	movs	r3, #0
 800e402:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e404:	4b0f      	ldr	r3, [pc, #60]	; (800e444 <prvProcessTimerOrBlockTask+0x94>)
 800e406:	6818      	ldr	r0, [r3, #0]
 800e408:	687a      	ldr	r2, [r7, #4]
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	1ad3      	subs	r3, r2, r3
 800e40e:	683a      	ldr	r2, [r7, #0]
 800e410:	4619      	mov	r1, r3
 800e412:	f7fe fe7b 	bl	800d10c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e416:	f7ff f8e9 	bl	800d5ec <xTaskResumeAll>
 800e41a:	4603      	mov	r3, r0
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d10a      	bne.n	800e436 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e420:	4b09      	ldr	r3, [pc, #36]	; (800e448 <prvProcessTimerOrBlockTask+0x98>)
 800e422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e426:	601a      	str	r2, [r3, #0]
 800e428:	f3bf 8f4f 	dsb	sy
 800e42c:	f3bf 8f6f 	isb	sy
}
 800e430:	e001      	b.n	800e436 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e432:	f7ff f8db 	bl	800d5ec <xTaskResumeAll>
}
 800e436:	bf00      	nop
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	20000a24 	.word	0x20000a24
 800e444:	20000a28 	.word	0x20000a28
 800e448:	e000ed04 	.word	0xe000ed04

0800e44c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e44c:	b480      	push	{r7}
 800e44e:	b085      	sub	sp, #20
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e454:	4b0e      	ldr	r3, [pc, #56]	; (800e490 <prvGetNextExpireTime+0x44>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d101      	bne.n	800e462 <prvGetNextExpireTime+0x16>
 800e45e:	2201      	movs	r2, #1
 800e460:	e000      	b.n	800e464 <prvGetNextExpireTime+0x18>
 800e462:	2200      	movs	r2, #0
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d105      	bne.n	800e47c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e470:	4b07      	ldr	r3, [pc, #28]	; (800e490 <prvGetNextExpireTime+0x44>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	68db      	ldr	r3, [r3, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	60fb      	str	r3, [r7, #12]
 800e47a:	e001      	b.n	800e480 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e47c:	2300      	movs	r3, #0
 800e47e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e480:	68fb      	ldr	r3, [r7, #12]
}
 800e482:	4618      	mov	r0, r3
 800e484:	3714      	adds	r7, #20
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr
 800e48e:	bf00      	nop
 800e490:	20000a20 	.word	0x20000a20

0800e494 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e49c:	f7ff f942 	bl	800d724 <xTaskGetTickCount>
 800e4a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e4a2:	4b0b      	ldr	r3, [pc, #44]	; (800e4d0 <prvSampleTimeNow+0x3c>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	68fa      	ldr	r2, [r7, #12]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d205      	bcs.n	800e4b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e4ac:	f000 f91a 	bl	800e6e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	601a      	str	r2, [r3, #0]
 800e4b6:	e002      	b.n	800e4be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e4be:	4a04      	ldr	r2, [pc, #16]	; (800e4d0 <prvSampleTimeNow+0x3c>)
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3710      	adds	r7, #16
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
 800e4ce:	bf00      	nop
 800e4d0:	20000a30 	.word	0x20000a30

0800e4d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b086      	sub	sp, #24
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	60f8      	str	r0, [r7, #12]
 800e4dc:	60b9      	str	r1, [r7, #8]
 800e4de:	607a      	str	r2, [r7, #4]
 800e4e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	68ba      	ldr	r2, [r7, #8]
 800e4ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	68fa      	ldr	r2, [r7, #12]
 800e4f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e4f2:	68ba      	ldr	r2, [r7, #8]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d812      	bhi.n	800e520 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	1ad2      	subs	r2, r2, r3
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	699b      	ldr	r3, [r3, #24]
 800e504:	429a      	cmp	r2, r3
 800e506:	d302      	bcc.n	800e50e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e508:	2301      	movs	r3, #1
 800e50a:	617b      	str	r3, [r7, #20]
 800e50c:	e01b      	b.n	800e546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e50e:	4b10      	ldr	r3, [pc, #64]	; (800e550 <prvInsertTimerInActiveList+0x7c>)
 800e510:	681a      	ldr	r2, [r3, #0]
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	3304      	adds	r3, #4
 800e516:	4619      	mov	r1, r3
 800e518:	4610      	mov	r0, r2
 800e51a:	f7fd fe76 	bl	800c20a <vListInsert>
 800e51e:	e012      	b.n	800e546 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	429a      	cmp	r2, r3
 800e526:	d206      	bcs.n	800e536 <prvInsertTimerInActiveList+0x62>
 800e528:	68ba      	ldr	r2, [r7, #8]
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d302      	bcc.n	800e536 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e530:	2301      	movs	r3, #1
 800e532:	617b      	str	r3, [r7, #20]
 800e534:	e007      	b.n	800e546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e536:	4b07      	ldr	r3, [pc, #28]	; (800e554 <prvInsertTimerInActiveList+0x80>)
 800e538:	681a      	ldr	r2, [r3, #0]
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	3304      	adds	r3, #4
 800e53e:	4619      	mov	r1, r3
 800e540:	4610      	mov	r0, r2
 800e542:	f7fd fe62 	bl	800c20a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e546:	697b      	ldr	r3, [r7, #20]
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3718      	adds	r7, #24
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	20000a24 	.word	0x20000a24
 800e554:	20000a20 	.word	0x20000a20

0800e558 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b08c      	sub	sp, #48	; 0x30
 800e55c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e55e:	e0ae      	b.n	800e6be <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	2b00      	cmp	r3, #0
 800e564:	f2c0 80aa 	blt.w	800e6bc <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56e:	695b      	ldr	r3, [r3, #20]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d004      	beq.n	800e57e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e576:	3304      	adds	r3, #4
 800e578:	4618      	mov	r0, r3
 800e57a:	f7fd fe7f 	bl	800c27c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e57e:	1d3b      	adds	r3, r7, #4
 800e580:	4618      	mov	r0, r3
 800e582:	f7ff ff87 	bl	800e494 <prvSampleTimeNow>
 800e586:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	2b09      	cmp	r3, #9
 800e58c:	f200 8097 	bhi.w	800e6be <prvProcessReceivedCommands+0x166>
 800e590:	a201      	add	r2, pc, #4	; (adr r2, 800e598 <prvProcessReceivedCommands+0x40>)
 800e592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e596:	bf00      	nop
 800e598:	0800e5c1 	.word	0x0800e5c1
 800e59c:	0800e5c1 	.word	0x0800e5c1
 800e5a0:	0800e5c1 	.word	0x0800e5c1
 800e5a4:	0800e635 	.word	0x0800e635
 800e5a8:	0800e649 	.word	0x0800e649
 800e5ac:	0800e693 	.word	0x0800e693
 800e5b0:	0800e5c1 	.word	0x0800e5c1
 800e5b4:	0800e5c1 	.word	0x0800e5c1
 800e5b8:	0800e635 	.word	0x0800e635
 800e5bc:	0800e649 	.word	0x0800e649
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e5c6:	f043 0301 	orr.w	r3, r3, #1
 800e5ca:	b2da      	uxtb	r2, r3
 800e5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e5d2:	68fa      	ldr	r2, [r7, #12]
 800e5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d6:	699b      	ldr	r3, [r3, #24]
 800e5d8:	18d1      	adds	r1, r2, r3
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	6a3a      	ldr	r2, [r7, #32]
 800e5de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5e0:	f7ff ff78 	bl	800e4d4 <prvInsertTimerInActiveList>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d069      	beq.n	800e6be <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ec:	6a1b      	ldr	r3, [r3, #32]
 800e5ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e5f8:	f003 0304 	and.w	r3, r3, #4
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d05e      	beq.n	800e6be <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e604:	699b      	ldr	r3, [r3, #24]
 800e606:	441a      	add	r2, r3
 800e608:	2300      	movs	r3, #0
 800e60a:	9300      	str	r3, [sp, #0]
 800e60c:	2300      	movs	r3, #0
 800e60e:	2100      	movs	r1, #0
 800e610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e612:	f7ff fe21 	bl	800e258 <xTimerGenericCommand>
 800e616:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d14f      	bne.n	800e6be <prvProcessReceivedCommands+0x166>
	__asm volatile
 800e61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e622:	f383 8811 	msr	BASEPRI, r3
 800e626:	f3bf 8f6f 	isb	sy
 800e62a:	f3bf 8f4f 	dsb	sy
 800e62e:	61bb      	str	r3, [r7, #24]
}
 800e630:	bf00      	nop
 800e632:	e7fe      	b.n	800e632 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e636:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e63a:	f023 0301 	bic.w	r3, r3, #1
 800e63e:	b2da      	uxtb	r2, r3
 800e640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800e646:	e03a      	b.n	800e6be <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e64e:	f043 0301 	orr.w	r3, r3, #1
 800e652:	b2da      	uxtb	r2, r3
 800e654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e65a:	68fa      	ldr	r2, [r7, #12]
 800e65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e662:	699b      	ldr	r3, [r3, #24]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d10a      	bne.n	800e67e <prvProcessReceivedCommands+0x126>
	__asm volatile
 800e668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66c:	f383 8811 	msr	BASEPRI, r3
 800e670:	f3bf 8f6f 	isb	sy
 800e674:	f3bf 8f4f 	dsb	sy
 800e678:	617b      	str	r3, [r7, #20]
}
 800e67a:	bf00      	nop
 800e67c:	e7fe      	b.n	800e67c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e680:	699a      	ldr	r2, [r3, #24]
 800e682:	6a3b      	ldr	r3, [r7, #32]
 800e684:	18d1      	adds	r1, r2, r3
 800e686:	6a3b      	ldr	r3, [r7, #32]
 800e688:	6a3a      	ldr	r2, [r7, #32]
 800e68a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e68c:	f7ff ff22 	bl	800e4d4 <prvInsertTimerInActiveList>
					break;
 800e690:	e015      	b.n	800e6be <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e694:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e698:	f003 0302 	and.w	r3, r3, #2
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d103      	bne.n	800e6a8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800e6a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6a2:	f000 fbdd 	bl	800ee60 <vPortFree>
 800e6a6:	e00a      	b.n	800e6be <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e6ae:	f023 0301 	bic.w	r3, r3, #1
 800e6b2:	b2da      	uxtb	r2, r3
 800e6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e6ba:	e000      	b.n	800e6be <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e6bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e6be:	4b08      	ldr	r3, [pc, #32]	; (800e6e0 <prvProcessReceivedCommands+0x188>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f107 0108 	add.w	r1, r7, #8
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7fe f961 	bl	800c990 <xQueueReceive>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	f47f af45 	bne.w	800e560 <prvProcessReceivedCommands+0x8>
	}
}
 800e6d6:	bf00      	nop
 800e6d8:	bf00      	nop
 800e6da:	3728      	adds	r7, #40	; 0x28
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	20000a28 	.word	0x20000a28

0800e6e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b088      	sub	sp, #32
 800e6e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e6ea:	e048      	b.n	800e77e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e6ec:	4b2d      	ldr	r3, [pc, #180]	; (800e7a4 <prvSwitchTimerLists+0xc0>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6f6:	4b2b      	ldr	r3, [pc, #172]	; (800e7a4 <prvSwitchTimerLists+0xc0>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	68db      	ldr	r3, [r3, #12]
 800e6fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	3304      	adds	r3, #4
 800e704:	4618      	mov	r0, r3
 800e706:	f7fd fdb9 	bl	800c27c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	6a1b      	ldr	r3, [r3, #32]
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e718:	f003 0304 	and.w	r3, r3, #4
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d02e      	beq.n	800e77e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	699b      	ldr	r3, [r3, #24]
 800e724:	693a      	ldr	r2, [r7, #16]
 800e726:	4413      	add	r3, r2
 800e728:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e72a:	68ba      	ldr	r2, [r7, #8]
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d90e      	bls.n	800e750 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	68ba      	ldr	r2, [r7, #8]
 800e736:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	68fa      	ldr	r2, [r7, #12]
 800e73c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e73e:	4b19      	ldr	r3, [pc, #100]	; (800e7a4 <prvSwitchTimerLists+0xc0>)
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	3304      	adds	r3, #4
 800e746:	4619      	mov	r1, r3
 800e748:	4610      	mov	r0, r2
 800e74a:	f7fd fd5e 	bl	800c20a <vListInsert>
 800e74e:	e016      	b.n	800e77e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e750:	2300      	movs	r3, #0
 800e752:	9300      	str	r3, [sp, #0]
 800e754:	2300      	movs	r3, #0
 800e756:	693a      	ldr	r2, [r7, #16]
 800e758:	2100      	movs	r1, #0
 800e75a:	68f8      	ldr	r0, [r7, #12]
 800e75c:	f7ff fd7c 	bl	800e258 <xTimerGenericCommand>
 800e760:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d10a      	bne.n	800e77e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76c:	f383 8811 	msr	BASEPRI, r3
 800e770:	f3bf 8f6f 	isb	sy
 800e774:	f3bf 8f4f 	dsb	sy
 800e778:	603b      	str	r3, [r7, #0]
}
 800e77a:	bf00      	nop
 800e77c:	e7fe      	b.n	800e77c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e77e:	4b09      	ldr	r3, [pc, #36]	; (800e7a4 <prvSwitchTimerLists+0xc0>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d1b1      	bne.n	800e6ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e788:	4b06      	ldr	r3, [pc, #24]	; (800e7a4 <prvSwitchTimerLists+0xc0>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e78e:	4b06      	ldr	r3, [pc, #24]	; (800e7a8 <prvSwitchTimerLists+0xc4>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	4a04      	ldr	r2, [pc, #16]	; (800e7a4 <prvSwitchTimerLists+0xc0>)
 800e794:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e796:	4a04      	ldr	r2, [pc, #16]	; (800e7a8 <prvSwitchTimerLists+0xc4>)
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	6013      	str	r3, [r2, #0]
}
 800e79c:	bf00      	nop
 800e79e:	3718      	adds	r7, #24
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	20000a20 	.word	0x20000a20
 800e7a8:	20000a24 	.word	0x20000a24

0800e7ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e7b2:	f000 f967 	bl	800ea84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e7b6:	4b15      	ldr	r3, [pc, #84]	; (800e80c <prvCheckForValidListAndQueue+0x60>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d120      	bne.n	800e800 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e7be:	4814      	ldr	r0, [pc, #80]	; (800e810 <prvCheckForValidListAndQueue+0x64>)
 800e7c0:	f7fd fcd2 	bl	800c168 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e7c4:	4813      	ldr	r0, [pc, #76]	; (800e814 <prvCheckForValidListAndQueue+0x68>)
 800e7c6:	f7fd fccf 	bl	800c168 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e7ca:	4b13      	ldr	r3, [pc, #76]	; (800e818 <prvCheckForValidListAndQueue+0x6c>)
 800e7cc:	4a10      	ldr	r2, [pc, #64]	; (800e810 <prvCheckForValidListAndQueue+0x64>)
 800e7ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e7d0:	4b12      	ldr	r3, [pc, #72]	; (800e81c <prvCheckForValidListAndQueue+0x70>)
 800e7d2:	4a10      	ldr	r2, [pc, #64]	; (800e814 <prvCheckForValidListAndQueue+0x68>)
 800e7d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	9300      	str	r3, [sp, #0]
 800e7da:	4b11      	ldr	r3, [pc, #68]	; (800e820 <prvCheckForValidListAndQueue+0x74>)
 800e7dc:	4a11      	ldr	r2, [pc, #68]	; (800e824 <prvCheckForValidListAndQueue+0x78>)
 800e7de:	210c      	movs	r1, #12
 800e7e0:	200a      	movs	r0, #10
 800e7e2:	f7fd fddd 	bl	800c3a0 <xQueueGenericCreateStatic>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	4a08      	ldr	r2, [pc, #32]	; (800e80c <prvCheckForValidListAndQueue+0x60>)
 800e7ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e7ec:	4b07      	ldr	r3, [pc, #28]	; (800e80c <prvCheckForValidListAndQueue+0x60>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d005      	beq.n	800e800 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e7f4:	4b05      	ldr	r3, [pc, #20]	; (800e80c <prvCheckForValidListAndQueue+0x60>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	490b      	ldr	r1, [pc, #44]	; (800e828 <prvCheckForValidListAndQueue+0x7c>)
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7fe fc5c 	bl	800d0b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e800:	f000 f970 	bl	800eae4 <vPortExitCritical>
}
 800e804:	bf00      	nop
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	20000a28 	.word	0x20000a28
 800e810:	200009f8 	.word	0x200009f8
 800e814:	20000a0c 	.word	0x20000a0c
 800e818:	20000a20 	.word	0x20000a20
 800e81c:	20000a24 	.word	0x20000a24
 800e820:	20000aac 	.word	0x20000aac
 800e824:	20000a34 	.word	0x20000a34
 800e828:	08012414 	.word	0x08012414

0800e82c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e82c:	b480      	push	{r7}
 800e82e:	b085      	sub	sp, #20
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	3b04      	subs	r3, #4
 800e83c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	3b04      	subs	r3, #4
 800e84a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	f023 0201 	bic.w	r2, r3, #1
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	3b04      	subs	r3, #4
 800e85a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e85c:	4a0c      	ldr	r2, [pc, #48]	; (800e890 <pxPortInitialiseStack+0x64>)
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	3b14      	subs	r3, #20
 800e866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e868:	687a      	ldr	r2, [r7, #4]
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	3b04      	subs	r3, #4
 800e872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f06f 0202 	mvn.w	r2, #2
 800e87a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	3b20      	subs	r3, #32
 800e880:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e882:	68fb      	ldr	r3, [r7, #12]
}
 800e884:	4618      	mov	r0, r3
 800e886:	3714      	adds	r7, #20
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr
 800e890:	0800e895 	.word	0x0800e895

0800e894 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e894:	b480      	push	{r7}
 800e896:	b085      	sub	sp, #20
 800e898:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e89a:	2300      	movs	r3, #0
 800e89c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e89e:	4b12      	ldr	r3, [pc, #72]	; (800e8e8 <prvTaskExitError+0x54>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8a6:	d00a      	beq.n	800e8be <prvTaskExitError+0x2a>
	__asm volatile
 800e8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ac:	f383 8811 	msr	BASEPRI, r3
 800e8b0:	f3bf 8f6f 	isb	sy
 800e8b4:	f3bf 8f4f 	dsb	sy
 800e8b8:	60fb      	str	r3, [r7, #12]
}
 800e8ba:	bf00      	nop
 800e8bc:	e7fe      	b.n	800e8bc <prvTaskExitError+0x28>
	__asm volatile
 800e8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c2:	f383 8811 	msr	BASEPRI, r3
 800e8c6:	f3bf 8f6f 	isb	sy
 800e8ca:	f3bf 8f4f 	dsb	sy
 800e8ce:	60bb      	str	r3, [r7, #8]
}
 800e8d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e8d2:	bf00      	nop
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d0fc      	beq.n	800e8d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e8da:	bf00      	nop
 800e8dc:	bf00      	nop
 800e8de:	3714      	adds	r7, #20
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr
 800e8e8:	20000014 	.word	0x20000014
 800e8ec:	00000000 	.word	0x00000000

0800e8f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e8f0:	4b07      	ldr	r3, [pc, #28]	; (800e910 <pxCurrentTCBConst2>)
 800e8f2:	6819      	ldr	r1, [r3, #0]
 800e8f4:	6808      	ldr	r0, [r1, #0]
 800e8f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8fa:	f380 8809 	msr	PSP, r0
 800e8fe:	f3bf 8f6f 	isb	sy
 800e902:	f04f 0000 	mov.w	r0, #0
 800e906:	f380 8811 	msr	BASEPRI, r0
 800e90a:	4770      	bx	lr
 800e90c:	f3af 8000 	nop.w

0800e910 <pxCurrentTCBConst2>:
 800e910:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e914:	bf00      	nop
 800e916:	bf00      	nop

0800e918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e918:	4808      	ldr	r0, [pc, #32]	; (800e93c <prvPortStartFirstTask+0x24>)
 800e91a:	6800      	ldr	r0, [r0, #0]
 800e91c:	6800      	ldr	r0, [r0, #0]
 800e91e:	f380 8808 	msr	MSP, r0
 800e922:	f04f 0000 	mov.w	r0, #0
 800e926:	f380 8814 	msr	CONTROL, r0
 800e92a:	b662      	cpsie	i
 800e92c:	b661      	cpsie	f
 800e92e:	f3bf 8f4f 	dsb	sy
 800e932:	f3bf 8f6f 	isb	sy
 800e936:	df00      	svc	0
 800e938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e93a:	bf00      	nop
 800e93c:	e000ed08 	.word	0xe000ed08

0800e940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b086      	sub	sp, #24
 800e944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e946:	4b46      	ldr	r3, [pc, #280]	; (800ea60 <xPortStartScheduler+0x120>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4a46      	ldr	r2, [pc, #280]	; (800ea64 <xPortStartScheduler+0x124>)
 800e94c:	4293      	cmp	r3, r2
 800e94e:	d10a      	bne.n	800e966 <xPortStartScheduler+0x26>
	__asm volatile
 800e950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e954:	f383 8811 	msr	BASEPRI, r3
 800e958:	f3bf 8f6f 	isb	sy
 800e95c:	f3bf 8f4f 	dsb	sy
 800e960:	613b      	str	r3, [r7, #16]
}
 800e962:	bf00      	nop
 800e964:	e7fe      	b.n	800e964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e966:	4b3e      	ldr	r3, [pc, #248]	; (800ea60 <xPortStartScheduler+0x120>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4a3f      	ldr	r2, [pc, #252]	; (800ea68 <xPortStartScheduler+0x128>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d10a      	bne.n	800e986 <xPortStartScheduler+0x46>
	__asm volatile
 800e970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e974:	f383 8811 	msr	BASEPRI, r3
 800e978:	f3bf 8f6f 	isb	sy
 800e97c:	f3bf 8f4f 	dsb	sy
 800e980:	60fb      	str	r3, [r7, #12]
}
 800e982:	bf00      	nop
 800e984:	e7fe      	b.n	800e984 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e986:	4b39      	ldr	r3, [pc, #228]	; (800ea6c <xPortStartScheduler+0x12c>)
 800e988:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	22ff      	movs	r2, #255	; 0xff
 800e996:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	b2db      	uxtb	r3, r3
 800e99e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e9a0:	78fb      	ldrb	r3, [r7, #3]
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e9a8:	b2da      	uxtb	r2, r3
 800e9aa:	4b31      	ldr	r3, [pc, #196]	; (800ea70 <xPortStartScheduler+0x130>)
 800e9ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e9ae:	4b31      	ldr	r3, [pc, #196]	; (800ea74 <xPortStartScheduler+0x134>)
 800e9b0:	2207      	movs	r2, #7
 800e9b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e9b4:	e009      	b.n	800e9ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e9b6:	4b2f      	ldr	r3, [pc, #188]	; (800ea74 <xPortStartScheduler+0x134>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	3b01      	subs	r3, #1
 800e9bc:	4a2d      	ldr	r2, [pc, #180]	; (800ea74 <xPortStartScheduler+0x134>)
 800e9be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e9c0:	78fb      	ldrb	r3, [r7, #3]
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	005b      	lsls	r3, r3, #1
 800e9c6:	b2db      	uxtb	r3, r3
 800e9c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e9ca:	78fb      	ldrb	r3, [r7, #3]
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9d2:	2b80      	cmp	r3, #128	; 0x80
 800e9d4:	d0ef      	beq.n	800e9b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e9d6:	4b27      	ldr	r3, [pc, #156]	; (800ea74 <xPortStartScheduler+0x134>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	f1c3 0307 	rsb	r3, r3, #7
 800e9de:	2b04      	cmp	r3, #4
 800e9e0:	d00a      	beq.n	800e9f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e6:	f383 8811 	msr	BASEPRI, r3
 800e9ea:	f3bf 8f6f 	isb	sy
 800e9ee:	f3bf 8f4f 	dsb	sy
 800e9f2:	60bb      	str	r3, [r7, #8]
}
 800e9f4:	bf00      	nop
 800e9f6:	e7fe      	b.n	800e9f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e9f8:	4b1e      	ldr	r3, [pc, #120]	; (800ea74 <xPortStartScheduler+0x134>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	021b      	lsls	r3, r3, #8
 800e9fe:	4a1d      	ldr	r2, [pc, #116]	; (800ea74 <xPortStartScheduler+0x134>)
 800ea00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ea02:	4b1c      	ldr	r3, [pc, #112]	; (800ea74 <xPortStartScheduler+0x134>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ea0a:	4a1a      	ldr	r2, [pc, #104]	; (800ea74 <xPortStartScheduler+0x134>)
 800ea0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	b2da      	uxtb	r2, r3
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ea16:	4b18      	ldr	r3, [pc, #96]	; (800ea78 <xPortStartScheduler+0x138>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	4a17      	ldr	r2, [pc, #92]	; (800ea78 <xPortStartScheduler+0x138>)
 800ea1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ea20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ea22:	4b15      	ldr	r3, [pc, #84]	; (800ea78 <xPortStartScheduler+0x138>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	4a14      	ldr	r2, [pc, #80]	; (800ea78 <xPortStartScheduler+0x138>)
 800ea28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ea2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ea2e:	f000 f8dd 	bl	800ebec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ea32:	4b12      	ldr	r3, [pc, #72]	; (800ea7c <xPortStartScheduler+0x13c>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ea38:	f000 f8fc 	bl	800ec34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ea3c:	4b10      	ldr	r3, [pc, #64]	; (800ea80 <xPortStartScheduler+0x140>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4a0f      	ldr	r2, [pc, #60]	; (800ea80 <xPortStartScheduler+0x140>)
 800ea42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ea46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ea48:	f7ff ff66 	bl	800e918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ea4c:	f7fe ff32 	bl	800d8b4 <vTaskSwitchContext>
	prvTaskExitError();
 800ea50:	f7ff ff20 	bl	800e894 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ea54:	2300      	movs	r3, #0
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3718      	adds	r7, #24
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	e000ed00 	.word	0xe000ed00
 800ea64:	410fc271 	.word	0x410fc271
 800ea68:	410fc270 	.word	0x410fc270
 800ea6c:	e000e400 	.word	0xe000e400
 800ea70:	20000af4 	.word	0x20000af4
 800ea74:	20000af8 	.word	0x20000af8
 800ea78:	e000ed20 	.word	0xe000ed20
 800ea7c:	20000014 	.word	0x20000014
 800ea80:	e000ef34 	.word	0xe000ef34

0800ea84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ea84:	b480      	push	{r7}
 800ea86:	b083      	sub	sp, #12
 800ea88:	af00      	add	r7, sp, #0
	__asm volatile
 800ea8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea8e:	f383 8811 	msr	BASEPRI, r3
 800ea92:	f3bf 8f6f 	isb	sy
 800ea96:	f3bf 8f4f 	dsb	sy
 800ea9a:	607b      	str	r3, [r7, #4]
}
 800ea9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ea9e:	4b0f      	ldr	r3, [pc, #60]	; (800eadc <vPortEnterCritical+0x58>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	4a0d      	ldr	r2, [pc, #52]	; (800eadc <vPortEnterCritical+0x58>)
 800eaa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eaa8:	4b0c      	ldr	r3, [pc, #48]	; (800eadc <vPortEnterCritical+0x58>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	d10f      	bne.n	800ead0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eab0:	4b0b      	ldr	r3, [pc, #44]	; (800eae0 <vPortEnterCritical+0x5c>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	b2db      	uxtb	r3, r3
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d00a      	beq.n	800ead0 <vPortEnterCritical+0x4c>
	__asm volatile
 800eaba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eabe:	f383 8811 	msr	BASEPRI, r3
 800eac2:	f3bf 8f6f 	isb	sy
 800eac6:	f3bf 8f4f 	dsb	sy
 800eaca:	603b      	str	r3, [r7, #0]
}
 800eacc:	bf00      	nop
 800eace:	e7fe      	b.n	800eace <vPortEnterCritical+0x4a>
	}
}
 800ead0:	bf00      	nop
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr
 800eadc:	20000014 	.word	0x20000014
 800eae0:	e000ed04 	.word	0xe000ed04

0800eae4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eae4:	b480      	push	{r7}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eaea:	4b12      	ldr	r3, [pc, #72]	; (800eb34 <vPortExitCritical+0x50>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d10a      	bne.n	800eb08 <vPortExitCritical+0x24>
	__asm volatile
 800eaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf6:	f383 8811 	msr	BASEPRI, r3
 800eafa:	f3bf 8f6f 	isb	sy
 800eafe:	f3bf 8f4f 	dsb	sy
 800eb02:	607b      	str	r3, [r7, #4]
}
 800eb04:	bf00      	nop
 800eb06:	e7fe      	b.n	800eb06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eb08:	4b0a      	ldr	r3, [pc, #40]	; (800eb34 <vPortExitCritical+0x50>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	3b01      	subs	r3, #1
 800eb0e:	4a09      	ldr	r2, [pc, #36]	; (800eb34 <vPortExitCritical+0x50>)
 800eb10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eb12:	4b08      	ldr	r3, [pc, #32]	; (800eb34 <vPortExitCritical+0x50>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d105      	bne.n	800eb26 <vPortExitCritical+0x42>
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	f383 8811 	msr	BASEPRI, r3
}
 800eb24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eb26:	bf00      	nop
 800eb28:	370c      	adds	r7, #12
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	20000014 	.word	0x20000014
	...

0800eb40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eb40:	f3ef 8009 	mrs	r0, PSP
 800eb44:	f3bf 8f6f 	isb	sy
 800eb48:	4b15      	ldr	r3, [pc, #84]	; (800eba0 <pxCurrentTCBConst>)
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	f01e 0f10 	tst.w	lr, #16
 800eb50:	bf08      	it	eq
 800eb52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eb56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb5a:	6010      	str	r0, [r2, #0]
 800eb5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eb60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eb64:	f380 8811 	msr	BASEPRI, r0
 800eb68:	f3bf 8f4f 	dsb	sy
 800eb6c:	f3bf 8f6f 	isb	sy
 800eb70:	f7fe fea0 	bl	800d8b4 <vTaskSwitchContext>
 800eb74:	f04f 0000 	mov.w	r0, #0
 800eb78:	f380 8811 	msr	BASEPRI, r0
 800eb7c:	bc09      	pop	{r0, r3}
 800eb7e:	6819      	ldr	r1, [r3, #0]
 800eb80:	6808      	ldr	r0, [r1, #0]
 800eb82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb86:	f01e 0f10 	tst.w	lr, #16
 800eb8a:	bf08      	it	eq
 800eb8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eb90:	f380 8809 	msr	PSP, r0
 800eb94:	f3bf 8f6f 	isb	sy
 800eb98:	4770      	bx	lr
 800eb9a:	bf00      	nop
 800eb9c:	f3af 8000 	nop.w

0800eba0 <pxCurrentTCBConst>:
 800eba0:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eba4:	bf00      	nop
 800eba6:	bf00      	nop

0800eba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
	__asm volatile
 800ebae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb2:	f383 8811 	msr	BASEPRI, r3
 800ebb6:	f3bf 8f6f 	isb	sy
 800ebba:	f3bf 8f4f 	dsb	sy
 800ebbe:	607b      	str	r3, [r7, #4]
}
 800ebc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ebc2:	f7fe fdbf 	bl	800d744 <xTaskIncrementTick>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d003      	beq.n	800ebd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ebcc:	4b06      	ldr	r3, [pc, #24]	; (800ebe8 <SysTick_Handler+0x40>)
 800ebce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebd2:	601a      	str	r2, [r3, #0]
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	f383 8811 	msr	BASEPRI, r3
}
 800ebde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ebe0:	bf00      	nop
 800ebe2:	3708      	adds	r7, #8
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}
 800ebe8:	e000ed04 	.word	0xe000ed04

0800ebec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ebec:	b480      	push	{r7}
 800ebee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ebf0:	4b0b      	ldr	r3, [pc, #44]	; (800ec20 <vPortSetupTimerInterrupt+0x34>)
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ebf6:	4b0b      	ldr	r3, [pc, #44]	; (800ec24 <vPortSetupTimerInterrupt+0x38>)
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ebfc:	4b0a      	ldr	r3, [pc, #40]	; (800ec28 <vPortSetupTimerInterrupt+0x3c>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	4a0a      	ldr	r2, [pc, #40]	; (800ec2c <vPortSetupTimerInterrupt+0x40>)
 800ec02:	fba2 2303 	umull	r2, r3, r2, r3
 800ec06:	099b      	lsrs	r3, r3, #6
 800ec08:	4a09      	ldr	r2, [pc, #36]	; (800ec30 <vPortSetupTimerInterrupt+0x44>)
 800ec0a:	3b01      	subs	r3, #1
 800ec0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ec0e:	4b04      	ldr	r3, [pc, #16]	; (800ec20 <vPortSetupTimerInterrupt+0x34>)
 800ec10:	2207      	movs	r2, #7
 800ec12:	601a      	str	r2, [r3, #0]
}
 800ec14:	bf00      	nop
 800ec16:	46bd      	mov	sp, r7
 800ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1c:	4770      	bx	lr
 800ec1e:	bf00      	nop
 800ec20:	e000e010 	.word	0xe000e010
 800ec24:	e000e018 	.word	0xe000e018
 800ec28:	20000008 	.word	0x20000008
 800ec2c:	10624dd3 	.word	0x10624dd3
 800ec30:	e000e014 	.word	0xe000e014

0800ec34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ec34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ec44 <vPortEnableVFP+0x10>
 800ec38:	6801      	ldr	r1, [r0, #0]
 800ec3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ec3e:	6001      	str	r1, [r0, #0]
 800ec40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ec42:	bf00      	nop
 800ec44:	e000ed88 	.word	0xe000ed88

0800ec48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ec48:	b480      	push	{r7}
 800ec4a:	b085      	sub	sp, #20
 800ec4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ec4e:	f3ef 8305 	mrs	r3, IPSR
 800ec52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2b0f      	cmp	r3, #15
 800ec58:	d914      	bls.n	800ec84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ec5a:	4a17      	ldr	r2, [pc, #92]	; (800ecb8 <vPortValidateInterruptPriority+0x70>)
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	4413      	add	r3, r2
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ec64:	4b15      	ldr	r3, [pc, #84]	; (800ecbc <vPortValidateInterruptPriority+0x74>)
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	7afa      	ldrb	r2, [r7, #11]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d20a      	bcs.n	800ec84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ec6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec72:	f383 8811 	msr	BASEPRI, r3
 800ec76:	f3bf 8f6f 	isb	sy
 800ec7a:	f3bf 8f4f 	dsb	sy
 800ec7e:	607b      	str	r3, [r7, #4]
}
 800ec80:	bf00      	nop
 800ec82:	e7fe      	b.n	800ec82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ec84:	4b0e      	ldr	r3, [pc, #56]	; (800ecc0 <vPortValidateInterruptPriority+0x78>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ec8c:	4b0d      	ldr	r3, [pc, #52]	; (800ecc4 <vPortValidateInterruptPriority+0x7c>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d90a      	bls.n	800ecaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ec94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec98:	f383 8811 	msr	BASEPRI, r3
 800ec9c:	f3bf 8f6f 	isb	sy
 800eca0:	f3bf 8f4f 	dsb	sy
 800eca4:	603b      	str	r3, [r7, #0]
}
 800eca6:	bf00      	nop
 800eca8:	e7fe      	b.n	800eca8 <vPortValidateInterruptPriority+0x60>
	}
 800ecaa:	bf00      	nop
 800ecac:	3714      	adds	r7, #20
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop
 800ecb8:	e000e3f0 	.word	0xe000e3f0
 800ecbc:	20000af4 	.word	0x20000af4
 800ecc0:	e000ed0c 	.word	0xe000ed0c
 800ecc4:	20000af8 	.word	0x20000af8

0800ecc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b08a      	sub	sp, #40	; 0x28
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ecd4:	f7fe fc7c 	bl	800d5d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ecd8:	4b5b      	ldr	r3, [pc, #364]	; (800ee48 <pvPortMalloc+0x180>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d101      	bne.n	800ece4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ece0:	f000 f920 	bl	800ef24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ece4:	4b59      	ldr	r3, [pc, #356]	; (800ee4c <pvPortMalloc+0x184>)
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	4013      	ands	r3, r2
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	f040 8093 	bne.w	800ee18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d01d      	beq.n	800ed34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ecf8:	2208      	movs	r2, #8
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	4413      	add	r3, r2
 800ecfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f003 0307 	and.w	r3, r3, #7
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d014      	beq.n	800ed34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f023 0307 	bic.w	r3, r3, #7
 800ed10:	3308      	adds	r3, #8
 800ed12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f003 0307 	and.w	r3, r3, #7
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d00a      	beq.n	800ed34 <pvPortMalloc+0x6c>
	__asm volatile
 800ed1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed22:	f383 8811 	msr	BASEPRI, r3
 800ed26:	f3bf 8f6f 	isb	sy
 800ed2a:	f3bf 8f4f 	dsb	sy
 800ed2e:	617b      	str	r3, [r7, #20]
}
 800ed30:	bf00      	nop
 800ed32:	e7fe      	b.n	800ed32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d06e      	beq.n	800ee18 <pvPortMalloc+0x150>
 800ed3a:	4b45      	ldr	r3, [pc, #276]	; (800ee50 <pvPortMalloc+0x188>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	687a      	ldr	r2, [r7, #4]
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d869      	bhi.n	800ee18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ed44:	4b43      	ldr	r3, [pc, #268]	; (800ee54 <pvPortMalloc+0x18c>)
 800ed46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ed48:	4b42      	ldr	r3, [pc, #264]	; (800ee54 <pvPortMalloc+0x18c>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed4e:	e004      	b.n	800ed5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ed50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ed54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d903      	bls.n	800ed6c <pvPortMalloc+0xa4>
 800ed64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d1f1      	bne.n	800ed50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ed6c:	4b36      	ldr	r3, [pc, #216]	; (800ee48 <pvPortMalloc+0x180>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d050      	beq.n	800ee18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed76:	6a3b      	ldr	r3, [r7, #32]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	2208      	movs	r2, #8
 800ed7c:	4413      	add	r3, r2
 800ed7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	6a3b      	ldr	r3, [r7, #32]
 800ed86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8a:	685a      	ldr	r2, [r3, #4]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	1ad2      	subs	r2, r2, r3
 800ed90:	2308      	movs	r3, #8
 800ed92:	005b      	lsls	r3, r3, #1
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d91f      	bls.n	800edd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ed98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eda0:	69bb      	ldr	r3, [r7, #24]
 800eda2:	f003 0307 	and.w	r3, r3, #7
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d00a      	beq.n	800edc0 <pvPortMalloc+0xf8>
	__asm volatile
 800edaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edae:	f383 8811 	msr	BASEPRI, r3
 800edb2:	f3bf 8f6f 	isb	sy
 800edb6:	f3bf 8f4f 	dsb	sy
 800edba:	613b      	str	r3, [r7, #16]
}
 800edbc:	bf00      	nop
 800edbe:	e7fe      	b.n	800edbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800edc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc2:	685a      	ldr	r2, [r3, #4]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	1ad2      	subs	r2, r2, r3
 800edc8:	69bb      	ldr	r3, [r7, #24]
 800edca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800edcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800edd2:	69b8      	ldr	r0, [r7, #24]
 800edd4:	f000 f908 	bl	800efe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800edd8:	4b1d      	ldr	r3, [pc, #116]	; (800ee50 <pvPortMalloc+0x188>)
 800edda:	681a      	ldr	r2, [r3, #0]
 800eddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	1ad3      	subs	r3, r2, r3
 800ede2:	4a1b      	ldr	r2, [pc, #108]	; (800ee50 <pvPortMalloc+0x188>)
 800ede4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ede6:	4b1a      	ldr	r3, [pc, #104]	; (800ee50 <pvPortMalloc+0x188>)
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	4b1b      	ldr	r3, [pc, #108]	; (800ee58 <pvPortMalloc+0x190>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d203      	bcs.n	800edfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800edf2:	4b17      	ldr	r3, [pc, #92]	; (800ee50 <pvPortMalloc+0x188>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4a18      	ldr	r2, [pc, #96]	; (800ee58 <pvPortMalloc+0x190>)
 800edf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800edfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfc:	685a      	ldr	r2, [r3, #4]
 800edfe:	4b13      	ldr	r3, [pc, #76]	; (800ee4c <pvPortMalloc+0x184>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	431a      	orrs	r2, r3
 800ee04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ee08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ee0e:	4b13      	ldr	r3, [pc, #76]	; (800ee5c <pvPortMalloc+0x194>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	3301      	adds	r3, #1
 800ee14:	4a11      	ldr	r2, [pc, #68]	; (800ee5c <pvPortMalloc+0x194>)
 800ee16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ee18:	f7fe fbe8 	bl	800d5ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	f003 0307 	and.w	r3, r3, #7
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d00a      	beq.n	800ee3c <pvPortMalloc+0x174>
	__asm volatile
 800ee26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2a:	f383 8811 	msr	BASEPRI, r3
 800ee2e:	f3bf 8f6f 	isb	sy
 800ee32:	f3bf 8f4f 	dsb	sy
 800ee36:	60fb      	str	r3, [r7, #12]
}
 800ee38:	bf00      	nop
 800ee3a:	e7fe      	b.n	800ee3a <pvPortMalloc+0x172>
	return pvReturn;
 800ee3c:	69fb      	ldr	r3, [r7, #28]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3728      	adds	r7, #40	; 0x28
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	2000af14 	.word	0x2000af14
 800ee4c:	2000af28 	.word	0x2000af28
 800ee50:	2000af18 	.word	0x2000af18
 800ee54:	2000af0c 	.word	0x2000af0c
 800ee58:	2000af1c 	.word	0x2000af1c
 800ee5c:	2000af20 	.word	0x2000af20

0800ee60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b086      	sub	sp, #24
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d04d      	beq.n	800ef0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ee72:	2308      	movs	r3, #8
 800ee74:	425b      	negs	r3, r3
 800ee76:	697a      	ldr	r2, [r7, #20]
 800ee78:	4413      	add	r3, r2
 800ee7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	685a      	ldr	r2, [r3, #4]
 800ee84:	4b24      	ldr	r3, [pc, #144]	; (800ef18 <vPortFree+0xb8>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	4013      	ands	r3, r2
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d10a      	bne.n	800eea4 <vPortFree+0x44>
	__asm volatile
 800ee8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee92:	f383 8811 	msr	BASEPRI, r3
 800ee96:	f3bf 8f6f 	isb	sy
 800ee9a:	f3bf 8f4f 	dsb	sy
 800ee9e:	60fb      	str	r3, [r7, #12]
}
 800eea0:	bf00      	nop
 800eea2:	e7fe      	b.n	800eea2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d00a      	beq.n	800eec2 <vPortFree+0x62>
	__asm volatile
 800eeac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb0:	f383 8811 	msr	BASEPRI, r3
 800eeb4:	f3bf 8f6f 	isb	sy
 800eeb8:	f3bf 8f4f 	dsb	sy
 800eebc:	60bb      	str	r3, [r7, #8]
}
 800eebe:	bf00      	nop
 800eec0:	e7fe      	b.n	800eec0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	685a      	ldr	r2, [r3, #4]
 800eec6:	4b14      	ldr	r3, [pc, #80]	; (800ef18 <vPortFree+0xb8>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	4013      	ands	r3, r2
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d01e      	beq.n	800ef0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d11a      	bne.n	800ef0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	685a      	ldr	r2, [r3, #4]
 800eedc:	4b0e      	ldr	r3, [pc, #56]	; (800ef18 <vPortFree+0xb8>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	43db      	mvns	r3, r3
 800eee2:	401a      	ands	r2, r3
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eee8:	f7fe fb72 	bl	800d5d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	685a      	ldr	r2, [r3, #4]
 800eef0:	4b0a      	ldr	r3, [pc, #40]	; (800ef1c <vPortFree+0xbc>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	4413      	add	r3, r2
 800eef6:	4a09      	ldr	r2, [pc, #36]	; (800ef1c <vPortFree+0xbc>)
 800eef8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eefa:	6938      	ldr	r0, [r7, #16]
 800eefc:	f000 f874 	bl	800efe8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ef00:	4b07      	ldr	r3, [pc, #28]	; (800ef20 <vPortFree+0xc0>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	3301      	adds	r3, #1
 800ef06:	4a06      	ldr	r2, [pc, #24]	; (800ef20 <vPortFree+0xc0>)
 800ef08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ef0a:	f7fe fb6f 	bl	800d5ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ef0e:	bf00      	nop
 800ef10:	3718      	adds	r7, #24
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	2000af28 	.word	0x2000af28
 800ef1c:	2000af18 	.word	0x2000af18
 800ef20:	2000af24 	.word	0x2000af24

0800ef24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ef24:	b480      	push	{r7}
 800ef26:	b085      	sub	sp, #20
 800ef28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ef2a:	f24a 4310 	movw	r3, #42000	; 0xa410
 800ef2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ef30:	4b27      	ldr	r3, [pc, #156]	; (800efd0 <prvHeapInit+0xac>)
 800ef32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f003 0307 	and.w	r3, r3, #7
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d00c      	beq.n	800ef58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	3307      	adds	r3, #7
 800ef42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f023 0307 	bic.w	r3, r3, #7
 800ef4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ef4c:	68ba      	ldr	r2, [r7, #8]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	1ad3      	subs	r3, r2, r3
 800ef52:	4a1f      	ldr	r2, [pc, #124]	; (800efd0 <prvHeapInit+0xac>)
 800ef54:	4413      	add	r3, r2
 800ef56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ef5c:	4a1d      	ldr	r2, [pc, #116]	; (800efd4 <prvHeapInit+0xb0>)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ef62:	4b1c      	ldr	r3, [pc, #112]	; (800efd4 <prvHeapInit+0xb0>)
 800ef64:	2200      	movs	r2, #0
 800ef66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	68ba      	ldr	r2, [r7, #8]
 800ef6c:	4413      	add	r3, r2
 800ef6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ef70:	2208      	movs	r2, #8
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	1a9b      	subs	r3, r3, r2
 800ef76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f023 0307 	bic.w	r3, r3, #7
 800ef7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	4a15      	ldr	r2, [pc, #84]	; (800efd8 <prvHeapInit+0xb4>)
 800ef84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ef86:	4b14      	ldr	r3, [pc, #80]	; (800efd8 <prvHeapInit+0xb4>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ef8e:	4b12      	ldr	r3, [pc, #72]	; (800efd8 <prvHeapInit+0xb4>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	2200      	movs	r2, #0
 800ef94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	68fa      	ldr	r2, [r7, #12]
 800ef9e:	1ad2      	subs	r2, r2, r3
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800efa4:	4b0c      	ldr	r3, [pc, #48]	; (800efd8 <prvHeapInit+0xb4>)
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	4a0a      	ldr	r2, [pc, #40]	; (800efdc <prvHeapInit+0xb8>)
 800efb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	4a09      	ldr	r2, [pc, #36]	; (800efe0 <prvHeapInit+0xbc>)
 800efba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800efbc:	4b09      	ldr	r3, [pc, #36]	; (800efe4 <prvHeapInit+0xc0>)
 800efbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800efc2:	601a      	str	r2, [r3, #0]
}
 800efc4:	bf00      	nop
 800efc6:	3714      	adds	r7, #20
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr
 800efd0:	20000afc 	.word	0x20000afc
 800efd4:	2000af0c 	.word	0x2000af0c
 800efd8:	2000af14 	.word	0x2000af14
 800efdc:	2000af1c 	.word	0x2000af1c
 800efe0:	2000af18 	.word	0x2000af18
 800efe4:	2000af28 	.word	0x2000af28

0800efe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800efe8:	b480      	push	{r7}
 800efea:	b085      	sub	sp, #20
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eff0:	4b28      	ldr	r3, [pc, #160]	; (800f094 <prvInsertBlockIntoFreeList+0xac>)
 800eff2:	60fb      	str	r3, [r7, #12]
 800eff4:	e002      	b.n	800effc <prvInsertBlockIntoFreeList+0x14>
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	60fb      	str	r3, [r7, #12]
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	687a      	ldr	r2, [r7, #4]
 800f002:	429a      	cmp	r2, r3
 800f004:	d8f7      	bhi.n	800eff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	68ba      	ldr	r2, [r7, #8]
 800f010:	4413      	add	r3, r2
 800f012:	687a      	ldr	r2, [r7, #4]
 800f014:	429a      	cmp	r2, r3
 800f016:	d108      	bne.n	800f02a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	685a      	ldr	r2, [r3, #4]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	441a      	add	r2, r3
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	68ba      	ldr	r2, [r7, #8]
 800f034:	441a      	add	r2, r3
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d118      	bne.n	800f070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	4b15      	ldr	r3, [pc, #84]	; (800f098 <prvInsertBlockIntoFreeList+0xb0>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	429a      	cmp	r2, r3
 800f048:	d00d      	beq.n	800f066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	685a      	ldr	r2, [r3, #4]
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	441a      	add	r2, r3
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	601a      	str	r2, [r3, #0]
 800f064:	e008      	b.n	800f078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f066:	4b0c      	ldr	r3, [pc, #48]	; (800f098 <prvInsertBlockIntoFreeList+0xb0>)
 800f068:	681a      	ldr	r2, [r3, #0]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	601a      	str	r2, [r3, #0]
 800f06e:	e003      	b.n	800f078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f078:	68fa      	ldr	r2, [r7, #12]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d002      	beq.n	800f086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	687a      	ldr	r2, [r7, #4]
 800f084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f086:	bf00      	nop
 800f088:	3714      	adds	r7, #20
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop
 800f094:	2000af0c 	.word	0x2000af0c
 800f098:	2000af14 	.word	0x2000af14

0800f09c <__errno>:
 800f09c:	4b01      	ldr	r3, [pc, #4]	; (800f0a4 <__errno+0x8>)
 800f09e:	6818      	ldr	r0, [r3, #0]
 800f0a0:	4770      	bx	lr
 800f0a2:	bf00      	nop
 800f0a4:	20000018 	.word	0x20000018

0800f0a8 <__libc_init_array>:
 800f0a8:	b570      	push	{r4, r5, r6, lr}
 800f0aa:	4d0d      	ldr	r5, [pc, #52]	; (800f0e0 <__libc_init_array+0x38>)
 800f0ac:	4c0d      	ldr	r4, [pc, #52]	; (800f0e4 <__libc_init_array+0x3c>)
 800f0ae:	1b64      	subs	r4, r4, r5
 800f0b0:	10a4      	asrs	r4, r4, #2
 800f0b2:	2600      	movs	r6, #0
 800f0b4:	42a6      	cmp	r6, r4
 800f0b6:	d109      	bne.n	800f0cc <__libc_init_array+0x24>
 800f0b8:	4d0b      	ldr	r5, [pc, #44]	; (800f0e8 <__libc_init_array+0x40>)
 800f0ba:	4c0c      	ldr	r4, [pc, #48]	; (800f0ec <__libc_init_array+0x44>)
 800f0bc:	f003 f840 	bl	8012140 <_init>
 800f0c0:	1b64      	subs	r4, r4, r5
 800f0c2:	10a4      	asrs	r4, r4, #2
 800f0c4:	2600      	movs	r6, #0
 800f0c6:	42a6      	cmp	r6, r4
 800f0c8:	d105      	bne.n	800f0d6 <__libc_init_array+0x2e>
 800f0ca:	bd70      	pop	{r4, r5, r6, pc}
 800f0cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0d0:	4798      	blx	r3
 800f0d2:	3601      	adds	r6, #1
 800f0d4:	e7ee      	b.n	800f0b4 <__libc_init_array+0xc>
 800f0d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0da:	4798      	blx	r3
 800f0dc:	3601      	adds	r6, #1
 800f0de:	e7f2      	b.n	800f0c6 <__libc_init_array+0x1e>
 800f0e0:	08012824 	.word	0x08012824
 800f0e4:	08012824 	.word	0x08012824
 800f0e8:	08012824 	.word	0x08012824
 800f0ec:	08012828 	.word	0x08012828

0800f0f0 <memcpy>:
 800f0f0:	440a      	add	r2, r1
 800f0f2:	4291      	cmp	r1, r2
 800f0f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f0f8:	d100      	bne.n	800f0fc <memcpy+0xc>
 800f0fa:	4770      	bx	lr
 800f0fc:	b510      	push	{r4, lr}
 800f0fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f102:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f106:	4291      	cmp	r1, r2
 800f108:	d1f9      	bne.n	800f0fe <memcpy+0xe>
 800f10a:	bd10      	pop	{r4, pc}

0800f10c <memset>:
 800f10c:	4402      	add	r2, r0
 800f10e:	4603      	mov	r3, r0
 800f110:	4293      	cmp	r3, r2
 800f112:	d100      	bne.n	800f116 <memset+0xa>
 800f114:	4770      	bx	lr
 800f116:	f803 1b01 	strb.w	r1, [r3], #1
 800f11a:	e7f9      	b.n	800f110 <memset+0x4>

0800f11c <__cvt>:
 800f11c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f120:	ec55 4b10 	vmov	r4, r5, d0
 800f124:	2d00      	cmp	r5, #0
 800f126:	460e      	mov	r6, r1
 800f128:	4619      	mov	r1, r3
 800f12a:	462b      	mov	r3, r5
 800f12c:	bfbb      	ittet	lt
 800f12e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f132:	461d      	movlt	r5, r3
 800f134:	2300      	movge	r3, #0
 800f136:	232d      	movlt	r3, #45	; 0x2d
 800f138:	700b      	strb	r3, [r1, #0]
 800f13a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f13c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f140:	4691      	mov	r9, r2
 800f142:	f023 0820 	bic.w	r8, r3, #32
 800f146:	bfbc      	itt	lt
 800f148:	4622      	movlt	r2, r4
 800f14a:	4614      	movlt	r4, r2
 800f14c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f150:	d005      	beq.n	800f15e <__cvt+0x42>
 800f152:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f156:	d100      	bne.n	800f15a <__cvt+0x3e>
 800f158:	3601      	adds	r6, #1
 800f15a:	2102      	movs	r1, #2
 800f15c:	e000      	b.n	800f160 <__cvt+0x44>
 800f15e:	2103      	movs	r1, #3
 800f160:	ab03      	add	r3, sp, #12
 800f162:	9301      	str	r3, [sp, #4]
 800f164:	ab02      	add	r3, sp, #8
 800f166:	9300      	str	r3, [sp, #0]
 800f168:	ec45 4b10 	vmov	d0, r4, r5
 800f16c:	4653      	mov	r3, sl
 800f16e:	4632      	mov	r2, r6
 800f170:	f000 fe4e 	bl	800fe10 <_dtoa_r>
 800f174:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f178:	4607      	mov	r7, r0
 800f17a:	d102      	bne.n	800f182 <__cvt+0x66>
 800f17c:	f019 0f01 	tst.w	r9, #1
 800f180:	d022      	beq.n	800f1c8 <__cvt+0xac>
 800f182:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f186:	eb07 0906 	add.w	r9, r7, r6
 800f18a:	d110      	bne.n	800f1ae <__cvt+0x92>
 800f18c:	783b      	ldrb	r3, [r7, #0]
 800f18e:	2b30      	cmp	r3, #48	; 0x30
 800f190:	d10a      	bne.n	800f1a8 <__cvt+0x8c>
 800f192:	2200      	movs	r2, #0
 800f194:	2300      	movs	r3, #0
 800f196:	4620      	mov	r0, r4
 800f198:	4629      	mov	r1, r5
 800f19a:	f7f1 fc9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800f19e:	b918      	cbnz	r0, 800f1a8 <__cvt+0x8c>
 800f1a0:	f1c6 0601 	rsb	r6, r6, #1
 800f1a4:	f8ca 6000 	str.w	r6, [sl]
 800f1a8:	f8da 3000 	ldr.w	r3, [sl]
 800f1ac:	4499      	add	r9, r3
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	4629      	mov	r1, r5
 800f1b6:	f7f1 fc8f 	bl	8000ad8 <__aeabi_dcmpeq>
 800f1ba:	b108      	cbz	r0, 800f1c0 <__cvt+0xa4>
 800f1bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800f1c0:	2230      	movs	r2, #48	; 0x30
 800f1c2:	9b03      	ldr	r3, [sp, #12]
 800f1c4:	454b      	cmp	r3, r9
 800f1c6:	d307      	bcc.n	800f1d8 <__cvt+0xbc>
 800f1c8:	9b03      	ldr	r3, [sp, #12]
 800f1ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f1cc:	1bdb      	subs	r3, r3, r7
 800f1ce:	4638      	mov	r0, r7
 800f1d0:	6013      	str	r3, [r2, #0]
 800f1d2:	b004      	add	sp, #16
 800f1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1d8:	1c59      	adds	r1, r3, #1
 800f1da:	9103      	str	r1, [sp, #12]
 800f1dc:	701a      	strb	r2, [r3, #0]
 800f1de:	e7f0      	b.n	800f1c2 <__cvt+0xa6>

0800f1e0 <__exponent>:
 800f1e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2900      	cmp	r1, #0
 800f1e6:	bfb8      	it	lt
 800f1e8:	4249      	neglt	r1, r1
 800f1ea:	f803 2b02 	strb.w	r2, [r3], #2
 800f1ee:	bfb4      	ite	lt
 800f1f0:	222d      	movlt	r2, #45	; 0x2d
 800f1f2:	222b      	movge	r2, #43	; 0x2b
 800f1f4:	2909      	cmp	r1, #9
 800f1f6:	7042      	strb	r2, [r0, #1]
 800f1f8:	dd2a      	ble.n	800f250 <__exponent+0x70>
 800f1fa:	f10d 0407 	add.w	r4, sp, #7
 800f1fe:	46a4      	mov	ip, r4
 800f200:	270a      	movs	r7, #10
 800f202:	46a6      	mov	lr, r4
 800f204:	460a      	mov	r2, r1
 800f206:	fb91 f6f7 	sdiv	r6, r1, r7
 800f20a:	fb07 1516 	mls	r5, r7, r6, r1
 800f20e:	3530      	adds	r5, #48	; 0x30
 800f210:	2a63      	cmp	r2, #99	; 0x63
 800f212:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800f216:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f21a:	4631      	mov	r1, r6
 800f21c:	dcf1      	bgt.n	800f202 <__exponent+0x22>
 800f21e:	3130      	adds	r1, #48	; 0x30
 800f220:	f1ae 0502 	sub.w	r5, lr, #2
 800f224:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f228:	1c44      	adds	r4, r0, #1
 800f22a:	4629      	mov	r1, r5
 800f22c:	4561      	cmp	r1, ip
 800f22e:	d30a      	bcc.n	800f246 <__exponent+0x66>
 800f230:	f10d 0209 	add.w	r2, sp, #9
 800f234:	eba2 020e 	sub.w	r2, r2, lr
 800f238:	4565      	cmp	r5, ip
 800f23a:	bf88      	it	hi
 800f23c:	2200      	movhi	r2, #0
 800f23e:	4413      	add	r3, r2
 800f240:	1a18      	subs	r0, r3, r0
 800f242:	b003      	add	sp, #12
 800f244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f246:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f24a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f24e:	e7ed      	b.n	800f22c <__exponent+0x4c>
 800f250:	2330      	movs	r3, #48	; 0x30
 800f252:	3130      	adds	r1, #48	; 0x30
 800f254:	7083      	strb	r3, [r0, #2]
 800f256:	70c1      	strb	r1, [r0, #3]
 800f258:	1d03      	adds	r3, r0, #4
 800f25a:	e7f1      	b.n	800f240 <__exponent+0x60>

0800f25c <_printf_float>:
 800f25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f260:	ed2d 8b02 	vpush	{d8}
 800f264:	b08d      	sub	sp, #52	; 0x34
 800f266:	460c      	mov	r4, r1
 800f268:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f26c:	4616      	mov	r6, r2
 800f26e:	461f      	mov	r7, r3
 800f270:	4605      	mov	r5, r0
 800f272:	f001 fd71 	bl	8010d58 <_localeconv_r>
 800f276:	f8d0 a000 	ldr.w	sl, [r0]
 800f27a:	4650      	mov	r0, sl
 800f27c:	f7f0 ffb0 	bl	80001e0 <strlen>
 800f280:	2300      	movs	r3, #0
 800f282:	930a      	str	r3, [sp, #40]	; 0x28
 800f284:	6823      	ldr	r3, [r4, #0]
 800f286:	9305      	str	r3, [sp, #20]
 800f288:	f8d8 3000 	ldr.w	r3, [r8]
 800f28c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f290:	3307      	adds	r3, #7
 800f292:	f023 0307 	bic.w	r3, r3, #7
 800f296:	f103 0208 	add.w	r2, r3, #8
 800f29a:	f8c8 2000 	str.w	r2, [r8]
 800f29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f2a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f2aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f2ae:	9307      	str	r3, [sp, #28]
 800f2b0:	f8cd 8018 	str.w	r8, [sp, #24]
 800f2b4:	ee08 0a10 	vmov	s16, r0
 800f2b8:	4b9f      	ldr	r3, [pc, #636]	; (800f538 <_printf_float+0x2dc>)
 800f2ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f2be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2c2:	f7f1 fc3b 	bl	8000b3c <__aeabi_dcmpun>
 800f2c6:	bb88      	cbnz	r0, 800f32c <_printf_float+0xd0>
 800f2c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f2cc:	4b9a      	ldr	r3, [pc, #616]	; (800f538 <_printf_float+0x2dc>)
 800f2ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2d2:	f7f1 fc15 	bl	8000b00 <__aeabi_dcmple>
 800f2d6:	bb48      	cbnz	r0, 800f32c <_printf_float+0xd0>
 800f2d8:	2200      	movs	r2, #0
 800f2da:	2300      	movs	r3, #0
 800f2dc:	4640      	mov	r0, r8
 800f2de:	4649      	mov	r1, r9
 800f2e0:	f7f1 fc04 	bl	8000aec <__aeabi_dcmplt>
 800f2e4:	b110      	cbz	r0, 800f2ec <_printf_float+0x90>
 800f2e6:	232d      	movs	r3, #45	; 0x2d
 800f2e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2ec:	4b93      	ldr	r3, [pc, #588]	; (800f53c <_printf_float+0x2e0>)
 800f2ee:	4894      	ldr	r0, [pc, #592]	; (800f540 <_printf_float+0x2e4>)
 800f2f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f2f4:	bf94      	ite	ls
 800f2f6:	4698      	movls	r8, r3
 800f2f8:	4680      	movhi	r8, r0
 800f2fa:	2303      	movs	r3, #3
 800f2fc:	6123      	str	r3, [r4, #16]
 800f2fe:	9b05      	ldr	r3, [sp, #20]
 800f300:	f023 0204 	bic.w	r2, r3, #4
 800f304:	6022      	str	r2, [r4, #0]
 800f306:	f04f 0900 	mov.w	r9, #0
 800f30a:	9700      	str	r7, [sp, #0]
 800f30c:	4633      	mov	r3, r6
 800f30e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f310:	4621      	mov	r1, r4
 800f312:	4628      	mov	r0, r5
 800f314:	f000 f9d8 	bl	800f6c8 <_printf_common>
 800f318:	3001      	adds	r0, #1
 800f31a:	f040 8090 	bne.w	800f43e <_printf_float+0x1e2>
 800f31e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f322:	b00d      	add	sp, #52	; 0x34
 800f324:	ecbd 8b02 	vpop	{d8}
 800f328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f32c:	4642      	mov	r2, r8
 800f32e:	464b      	mov	r3, r9
 800f330:	4640      	mov	r0, r8
 800f332:	4649      	mov	r1, r9
 800f334:	f7f1 fc02 	bl	8000b3c <__aeabi_dcmpun>
 800f338:	b140      	cbz	r0, 800f34c <_printf_float+0xf0>
 800f33a:	464b      	mov	r3, r9
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	bfbc      	itt	lt
 800f340:	232d      	movlt	r3, #45	; 0x2d
 800f342:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f346:	487f      	ldr	r0, [pc, #508]	; (800f544 <_printf_float+0x2e8>)
 800f348:	4b7f      	ldr	r3, [pc, #508]	; (800f548 <_printf_float+0x2ec>)
 800f34a:	e7d1      	b.n	800f2f0 <_printf_float+0x94>
 800f34c:	6863      	ldr	r3, [r4, #4]
 800f34e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f352:	9206      	str	r2, [sp, #24]
 800f354:	1c5a      	adds	r2, r3, #1
 800f356:	d13f      	bne.n	800f3d8 <_printf_float+0x17c>
 800f358:	2306      	movs	r3, #6
 800f35a:	6063      	str	r3, [r4, #4]
 800f35c:	9b05      	ldr	r3, [sp, #20]
 800f35e:	6861      	ldr	r1, [r4, #4]
 800f360:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f364:	2300      	movs	r3, #0
 800f366:	9303      	str	r3, [sp, #12]
 800f368:	ab0a      	add	r3, sp, #40	; 0x28
 800f36a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f36e:	ab09      	add	r3, sp, #36	; 0x24
 800f370:	ec49 8b10 	vmov	d0, r8, r9
 800f374:	9300      	str	r3, [sp, #0]
 800f376:	6022      	str	r2, [r4, #0]
 800f378:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f37c:	4628      	mov	r0, r5
 800f37e:	f7ff fecd 	bl	800f11c <__cvt>
 800f382:	9b06      	ldr	r3, [sp, #24]
 800f384:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f386:	2b47      	cmp	r3, #71	; 0x47
 800f388:	4680      	mov	r8, r0
 800f38a:	d108      	bne.n	800f39e <_printf_float+0x142>
 800f38c:	1cc8      	adds	r0, r1, #3
 800f38e:	db02      	blt.n	800f396 <_printf_float+0x13a>
 800f390:	6863      	ldr	r3, [r4, #4]
 800f392:	4299      	cmp	r1, r3
 800f394:	dd41      	ble.n	800f41a <_printf_float+0x1be>
 800f396:	f1ab 0b02 	sub.w	fp, fp, #2
 800f39a:	fa5f fb8b 	uxtb.w	fp, fp
 800f39e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f3a2:	d820      	bhi.n	800f3e6 <_printf_float+0x18a>
 800f3a4:	3901      	subs	r1, #1
 800f3a6:	465a      	mov	r2, fp
 800f3a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f3ac:	9109      	str	r1, [sp, #36]	; 0x24
 800f3ae:	f7ff ff17 	bl	800f1e0 <__exponent>
 800f3b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3b4:	1813      	adds	r3, r2, r0
 800f3b6:	2a01      	cmp	r2, #1
 800f3b8:	4681      	mov	r9, r0
 800f3ba:	6123      	str	r3, [r4, #16]
 800f3bc:	dc02      	bgt.n	800f3c4 <_printf_float+0x168>
 800f3be:	6822      	ldr	r2, [r4, #0]
 800f3c0:	07d2      	lsls	r2, r2, #31
 800f3c2:	d501      	bpl.n	800f3c8 <_printf_float+0x16c>
 800f3c4:	3301      	adds	r3, #1
 800f3c6:	6123      	str	r3, [r4, #16]
 800f3c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d09c      	beq.n	800f30a <_printf_float+0xae>
 800f3d0:	232d      	movs	r3, #45	; 0x2d
 800f3d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3d6:	e798      	b.n	800f30a <_printf_float+0xae>
 800f3d8:	9a06      	ldr	r2, [sp, #24]
 800f3da:	2a47      	cmp	r2, #71	; 0x47
 800f3dc:	d1be      	bne.n	800f35c <_printf_float+0x100>
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d1bc      	bne.n	800f35c <_printf_float+0x100>
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	e7b9      	b.n	800f35a <_printf_float+0xfe>
 800f3e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f3ea:	d118      	bne.n	800f41e <_printf_float+0x1c2>
 800f3ec:	2900      	cmp	r1, #0
 800f3ee:	6863      	ldr	r3, [r4, #4]
 800f3f0:	dd0b      	ble.n	800f40a <_printf_float+0x1ae>
 800f3f2:	6121      	str	r1, [r4, #16]
 800f3f4:	b913      	cbnz	r3, 800f3fc <_printf_float+0x1a0>
 800f3f6:	6822      	ldr	r2, [r4, #0]
 800f3f8:	07d0      	lsls	r0, r2, #31
 800f3fa:	d502      	bpl.n	800f402 <_printf_float+0x1a6>
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	440b      	add	r3, r1
 800f400:	6123      	str	r3, [r4, #16]
 800f402:	65a1      	str	r1, [r4, #88]	; 0x58
 800f404:	f04f 0900 	mov.w	r9, #0
 800f408:	e7de      	b.n	800f3c8 <_printf_float+0x16c>
 800f40a:	b913      	cbnz	r3, 800f412 <_printf_float+0x1b6>
 800f40c:	6822      	ldr	r2, [r4, #0]
 800f40e:	07d2      	lsls	r2, r2, #31
 800f410:	d501      	bpl.n	800f416 <_printf_float+0x1ba>
 800f412:	3302      	adds	r3, #2
 800f414:	e7f4      	b.n	800f400 <_printf_float+0x1a4>
 800f416:	2301      	movs	r3, #1
 800f418:	e7f2      	b.n	800f400 <_printf_float+0x1a4>
 800f41a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f41e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f420:	4299      	cmp	r1, r3
 800f422:	db05      	blt.n	800f430 <_printf_float+0x1d4>
 800f424:	6823      	ldr	r3, [r4, #0]
 800f426:	6121      	str	r1, [r4, #16]
 800f428:	07d8      	lsls	r0, r3, #31
 800f42a:	d5ea      	bpl.n	800f402 <_printf_float+0x1a6>
 800f42c:	1c4b      	adds	r3, r1, #1
 800f42e:	e7e7      	b.n	800f400 <_printf_float+0x1a4>
 800f430:	2900      	cmp	r1, #0
 800f432:	bfd4      	ite	le
 800f434:	f1c1 0202 	rsble	r2, r1, #2
 800f438:	2201      	movgt	r2, #1
 800f43a:	4413      	add	r3, r2
 800f43c:	e7e0      	b.n	800f400 <_printf_float+0x1a4>
 800f43e:	6823      	ldr	r3, [r4, #0]
 800f440:	055a      	lsls	r2, r3, #21
 800f442:	d407      	bmi.n	800f454 <_printf_float+0x1f8>
 800f444:	6923      	ldr	r3, [r4, #16]
 800f446:	4642      	mov	r2, r8
 800f448:	4631      	mov	r1, r6
 800f44a:	4628      	mov	r0, r5
 800f44c:	47b8      	blx	r7
 800f44e:	3001      	adds	r0, #1
 800f450:	d12c      	bne.n	800f4ac <_printf_float+0x250>
 800f452:	e764      	b.n	800f31e <_printf_float+0xc2>
 800f454:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f458:	f240 80e0 	bls.w	800f61c <_printf_float+0x3c0>
 800f45c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f460:	2200      	movs	r2, #0
 800f462:	2300      	movs	r3, #0
 800f464:	f7f1 fb38 	bl	8000ad8 <__aeabi_dcmpeq>
 800f468:	2800      	cmp	r0, #0
 800f46a:	d034      	beq.n	800f4d6 <_printf_float+0x27a>
 800f46c:	4a37      	ldr	r2, [pc, #220]	; (800f54c <_printf_float+0x2f0>)
 800f46e:	2301      	movs	r3, #1
 800f470:	4631      	mov	r1, r6
 800f472:	4628      	mov	r0, r5
 800f474:	47b8      	blx	r7
 800f476:	3001      	adds	r0, #1
 800f478:	f43f af51 	beq.w	800f31e <_printf_float+0xc2>
 800f47c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f480:	429a      	cmp	r2, r3
 800f482:	db02      	blt.n	800f48a <_printf_float+0x22e>
 800f484:	6823      	ldr	r3, [r4, #0]
 800f486:	07d8      	lsls	r0, r3, #31
 800f488:	d510      	bpl.n	800f4ac <_printf_float+0x250>
 800f48a:	ee18 3a10 	vmov	r3, s16
 800f48e:	4652      	mov	r2, sl
 800f490:	4631      	mov	r1, r6
 800f492:	4628      	mov	r0, r5
 800f494:	47b8      	blx	r7
 800f496:	3001      	adds	r0, #1
 800f498:	f43f af41 	beq.w	800f31e <_printf_float+0xc2>
 800f49c:	f04f 0800 	mov.w	r8, #0
 800f4a0:	f104 091a 	add.w	r9, r4, #26
 800f4a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	4543      	cmp	r3, r8
 800f4aa:	dc09      	bgt.n	800f4c0 <_printf_float+0x264>
 800f4ac:	6823      	ldr	r3, [r4, #0]
 800f4ae:	079b      	lsls	r3, r3, #30
 800f4b0:	f100 8105 	bmi.w	800f6be <_printf_float+0x462>
 800f4b4:	68e0      	ldr	r0, [r4, #12]
 800f4b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4b8:	4298      	cmp	r0, r3
 800f4ba:	bfb8      	it	lt
 800f4bc:	4618      	movlt	r0, r3
 800f4be:	e730      	b.n	800f322 <_printf_float+0xc6>
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	464a      	mov	r2, r9
 800f4c4:	4631      	mov	r1, r6
 800f4c6:	4628      	mov	r0, r5
 800f4c8:	47b8      	blx	r7
 800f4ca:	3001      	adds	r0, #1
 800f4cc:	f43f af27 	beq.w	800f31e <_printf_float+0xc2>
 800f4d0:	f108 0801 	add.w	r8, r8, #1
 800f4d4:	e7e6      	b.n	800f4a4 <_printf_float+0x248>
 800f4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	dc39      	bgt.n	800f550 <_printf_float+0x2f4>
 800f4dc:	4a1b      	ldr	r2, [pc, #108]	; (800f54c <_printf_float+0x2f0>)
 800f4de:	2301      	movs	r3, #1
 800f4e0:	4631      	mov	r1, r6
 800f4e2:	4628      	mov	r0, r5
 800f4e4:	47b8      	blx	r7
 800f4e6:	3001      	adds	r0, #1
 800f4e8:	f43f af19 	beq.w	800f31e <_printf_float+0xc2>
 800f4ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f4f0:	4313      	orrs	r3, r2
 800f4f2:	d102      	bne.n	800f4fa <_printf_float+0x29e>
 800f4f4:	6823      	ldr	r3, [r4, #0]
 800f4f6:	07d9      	lsls	r1, r3, #31
 800f4f8:	d5d8      	bpl.n	800f4ac <_printf_float+0x250>
 800f4fa:	ee18 3a10 	vmov	r3, s16
 800f4fe:	4652      	mov	r2, sl
 800f500:	4631      	mov	r1, r6
 800f502:	4628      	mov	r0, r5
 800f504:	47b8      	blx	r7
 800f506:	3001      	adds	r0, #1
 800f508:	f43f af09 	beq.w	800f31e <_printf_float+0xc2>
 800f50c:	f04f 0900 	mov.w	r9, #0
 800f510:	f104 0a1a 	add.w	sl, r4, #26
 800f514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f516:	425b      	negs	r3, r3
 800f518:	454b      	cmp	r3, r9
 800f51a:	dc01      	bgt.n	800f520 <_printf_float+0x2c4>
 800f51c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f51e:	e792      	b.n	800f446 <_printf_float+0x1ea>
 800f520:	2301      	movs	r3, #1
 800f522:	4652      	mov	r2, sl
 800f524:	4631      	mov	r1, r6
 800f526:	4628      	mov	r0, r5
 800f528:	47b8      	blx	r7
 800f52a:	3001      	adds	r0, #1
 800f52c:	f43f aef7 	beq.w	800f31e <_printf_float+0xc2>
 800f530:	f109 0901 	add.w	r9, r9, #1
 800f534:	e7ee      	b.n	800f514 <_printf_float+0x2b8>
 800f536:	bf00      	nop
 800f538:	7fefffff 	.word	0x7fefffff
 800f53c:	08012440 	.word	0x08012440
 800f540:	08012444 	.word	0x08012444
 800f544:	0801244c 	.word	0x0801244c
 800f548:	08012448 	.word	0x08012448
 800f54c:	08012450 	.word	0x08012450
 800f550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f552:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f554:	429a      	cmp	r2, r3
 800f556:	bfa8      	it	ge
 800f558:	461a      	movge	r2, r3
 800f55a:	2a00      	cmp	r2, #0
 800f55c:	4691      	mov	r9, r2
 800f55e:	dc37      	bgt.n	800f5d0 <_printf_float+0x374>
 800f560:	f04f 0b00 	mov.w	fp, #0
 800f564:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f568:	f104 021a 	add.w	r2, r4, #26
 800f56c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f56e:	9305      	str	r3, [sp, #20]
 800f570:	eba3 0309 	sub.w	r3, r3, r9
 800f574:	455b      	cmp	r3, fp
 800f576:	dc33      	bgt.n	800f5e0 <_printf_float+0x384>
 800f578:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f57c:	429a      	cmp	r2, r3
 800f57e:	db3b      	blt.n	800f5f8 <_printf_float+0x39c>
 800f580:	6823      	ldr	r3, [r4, #0]
 800f582:	07da      	lsls	r2, r3, #31
 800f584:	d438      	bmi.n	800f5f8 <_printf_float+0x39c>
 800f586:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f588:	9b05      	ldr	r3, [sp, #20]
 800f58a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f58c:	1ad3      	subs	r3, r2, r3
 800f58e:	eba2 0901 	sub.w	r9, r2, r1
 800f592:	4599      	cmp	r9, r3
 800f594:	bfa8      	it	ge
 800f596:	4699      	movge	r9, r3
 800f598:	f1b9 0f00 	cmp.w	r9, #0
 800f59c:	dc35      	bgt.n	800f60a <_printf_float+0x3ae>
 800f59e:	f04f 0800 	mov.w	r8, #0
 800f5a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f5a6:	f104 0a1a 	add.w	sl, r4, #26
 800f5aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f5ae:	1a9b      	subs	r3, r3, r2
 800f5b0:	eba3 0309 	sub.w	r3, r3, r9
 800f5b4:	4543      	cmp	r3, r8
 800f5b6:	f77f af79 	ble.w	800f4ac <_printf_float+0x250>
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	4652      	mov	r2, sl
 800f5be:	4631      	mov	r1, r6
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	47b8      	blx	r7
 800f5c4:	3001      	adds	r0, #1
 800f5c6:	f43f aeaa 	beq.w	800f31e <_printf_float+0xc2>
 800f5ca:	f108 0801 	add.w	r8, r8, #1
 800f5ce:	e7ec      	b.n	800f5aa <_printf_float+0x34e>
 800f5d0:	4613      	mov	r3, r2
 800f5d2:	4631      	mov	r1, r6
 800f5d4:	4642      	mov	r2, r8
 800f5d6:	4628      	mov	r0, r5
 800f5d8:	47b8      	blx	r7
 800f5da:	3001      	adds	r0, #1
 800f5dc:	d1c0      	bne.n	800f560 <_printf_float+0x304>
 800f5de:	e69e      	b.n	800f31e <_printf_float+0xc2>
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	4631      	mov	r1, r6
 800f5e4:	4628      	mov	r0, r5
 800f5e6:	9205      	str	r2, [sp, #20]
 800f5e8:	47b8      	blx	r7
 800f5ea:	3001      	adds	r0, #1
 800f5ec:	f43f ae97 	beq.w	800f31e <_printf_float+0xc2>
 800f5f0:	9a05      	ldr	r2, [sp, #20]
 800f5f2:	f10b 0b01 	add.w	fp, fp, #1
 800f5f6:	e7b9      	b.n	800f56c <_printf_float+0x310>
 800f5f8:	ee18 3a10 	vmov	r3, s16
 800f5fc:	4652      	mov	r2, sl
 800f5fe:	4631      	mov	r1, r6
 800f600:	4628      	mov	r0, r5
 800f602:	47b8      	blx	r7
 800f604:	3001      	adds	r0, #1
 800f606:	d1be      	bne.n	800f586 <_printf_float+0x32a>
 800f608:	e689      	b.n	800f31e <_printf_float+0xc2>
 800f60a:	9a05      	ldr	r2, [sp, #20]
 800f60c:	464b      	mov	r3, r9
 800f60e:	4442      	add	r2, r8
 800f610:	4631      	mov	r1, r6
 800f612:	4628      	mov	r0, r5
 800f614:	47b8      	blx	r7
 800f616:	3001      	adds	r0, #1
 800f618:	d1c1      	bne.n	800f59e <_printf_float+0x342>
 800f61a:	e680      	b.n	800f31e <_printf_float+0xc2>
 800f61c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f61e:	2a01      	cmp	r2, #1
 800f620:	dc01      	bgt.n	800f626 <_printf_float+0x3ca>
 800f622:	07db      	lsls	r3, r3, #31
 800f624:	d538      	bpl.n	800f698 <_printf_float+0x43c>
 800f626:	2301      	movs	r3, #1
 800f628:	4642      	mov	r2, r8
 800f62a:	4631      	mov	r1, r6
 800f62c:	4628      	mov	r0, r5
 800f62e:	47b8      	blx	r7
 800f630:	3001      	adds	r0, #1
 800f632:	f43f ae74 	beq.w	800f31e <_printf_float+0xc2>
 800f636:	ee18 3a10 	vmov	r3, s16
 800f63a:	4652      	mov	r2, sl
 800f63c:	4631      	mov	r1, r6
 800f63e:	4628      	mov	r0, r5
 800f640:	47b8      	blx	r7
 800f642:	3001      	adds	r0, #1
 800f644:	f43f ae6b 	beq.w	800f31e <_printf_float+0xc2>
 800f648:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f64c:	2200      	movs	r2, #0
 800f64e:	2300      	movs	r3, #0
 800f650:	f7f1 fa42 	bl	8000ad8 <__aeabi_dcmpeq>
 800f654:	b9d8      	cbnz	r0, 800f68e <_printf_float+0x432>
 800f656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f658:	f108 0201 	add.w	r2, r8, #1
 800f65c:	3b01      	subs	r3, #1
 800f65e:	4631      	mov	r1, r6
 800f660:	4628      	mov	r0, r5
 800f662:	47b8      	blx	r7
 800f664:	3001      	adds	r0, #1
 800f666:	d10e      	bne.n	800f686 <_printf_float+0x42a>
 800f668:	e659      	b.n	800f31e <_printf_float+0xc2>
 800f66a:	2301      	movs	r3, #1
 800f66c:	4652      	mov	r2, sl
 800f66e:	4631      	mov	r1, r6
 800f670:	4628      	mov	r0, r5
 800f672:	47b8      	blx	r7
 800f674:	3001      	adds	r0, #1
 800f676:	f43f ae52 	beq.w	800f31e <_printf_float+0xc2>
 800f67a:	f108 0801 	add.w	r8, r8, #1
 800f67e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f680:	3b01      	subs	r3, #1
 800f682:	4543      	cmp	r3, r8
 800f684:	dcf1      	bgt.n	800f66a <_printf_float+0x40e>
 800f686:	464b      	mov	r3, r9
 800f688:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f68c:	e6dc      	b.n	800f448 <_printf_float+0x1ec>
 800f68e:	f04f 0800 	mov.w	r8, #0
 800f692:	f104 0a1a 	add.w	sl, r4, #26
 800f696:	e7f2      	b.n	800f67e <_printf_float+0x422>
 800f698:	2301      	movs	r3, #1
 800f69a:	4642      	mov	r2, r8
 800f69c:	e7df      	b.n	800f65e <_printf_float+0x402>
 800f69e:	2301      	movs	r3, #1
 800f6a0:	464a      	mov	r2, r9
 800f6a2:	4631      	mov	r1, r6
 800f6a4:	4628      	mov	r0, r5
 800f6a6:	47b8      	blx	r7
 800f6a8:	3001      	adds	r0, #1
 800f6aa:	f43f ae38 	beq.w	800f31e <_printf_float+0xc2>
 800f6ae:	f108 0801 	add.w	r8, r8, #1
 800f6b2:	68e3      	ldr	r3, [r4, #12]
 800f6b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f6b6:	1a5b      	subs	r3, r3, r1
 800f6b8:	4543      	cmp	r3, r8
 800f6ba:	dcf0      	bgt.n	800f69e <_printf_float+0x442>
 800f6bc:	e6fa      	b.n	800f4b4 <_printf_float+0x258>
 800f6be:	f04f 0800 	mov.w	r8, #0
 800f6c2:	f104 0919 	add.w	r9, r4, #25
 800f6c6:	e7f4      	b.n	800f6b2 <_printf_float+0x456>

0800f6c8 <_printf_common>:
 800f6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6cc:	4616      	mov	r6, r2
 800f6ce:	4699      	mov	r9, r3
 800f6d0:	688a      	ldr	r2, [r1, #8]
 800f6d2:	690b      	ldr	r3, [r1, #16]
 800f6d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	bfb8      	it	lt
 800f6dc:	4613      	movlt	r3, r2
 800f6de:	6033      	str	r3, [r6, #0]
 800f6e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f6e4:	4607      	mov	r7, r0
 800f6e6:	460c      	mov	r4, r1
 800f6e8:	b10a      	cbz	r2, 800f6ee <_printf_common+0x26>
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	6033      	str	r3, [r6, #0]
 800f6ee:	6823      	ldr	r3, [r4, #0]
 800f6f0:	0699      	lsls	r1, r3, #26
 800f6f2:	bf42      	ittt	mi
 800f6f4:	6833      	ldrmi	r3, [r6, #0]
 800f6f6:	3302      	addmi	r3, #2
 800f6f8:	6033      	strmi	r3, [r6, #0]
 800f6fa:	6825      	ldr	r5, [r4, #0]
 800f6fc:	f015 0506 	ands.w	r5, r5, #6
 800f700:	d106      	bne.n	800f710 <_printf_common+0x48>
 800f702:	f104 0a19 	add.w	sl, r4, #25
 800f706:	68e3      	ldr	r3, [r4, #12]
 800f708:	6832      	ldr	r2, [r6, #0]
 800f70a:	1a9b      	subs	r3, r3, r2
 800f70c:	42ab      	cmp	r3, r5
 800f70e:	dc26      	bgt.n	800f75e <_printf_common+0x96>
 800f710:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f714:	1e13      	subs	r3, r2, #0
 800f716:	6822      	ldr	r2, [r4, #0]
 800f718:	bf18      	it	ne
 800f71a:	2301      	movne	r3, #1
 800f71c:	0692      	lsls	r2, r2, #26
 800f71e:	d42b      	bmi.n	800f778 <_printf_common+0xb0>
 800f720:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f724:	4649      	mov	r1, r9
 800f726:	4638      	mov	r0, r7
 800f728:	47c0      	blx	r8
 800f72a:	3001      	adds	r0, #1
 800f72c:	d01e      	beq.n	800f76c <_printf_common+0xa4>
 800f72e:	6823      	ldr	r3, [r4, #0]
 800f730:	68e5      	ldr	r5, [r4, #12]
 800f732:	6832      	ldr	r2, [r6, #0]
 800f734:	f003 0306 	and.w	r3, r3, #6
 800f738:	2b04      	cmp	r3, #4
 800f73a:	bf08      	it	eq
 800f73c:	1aad      	subeq	r5, r5, r2
 800f73e:	68a3      	ldr	r3, [r4, #8]
 800f740:	6922      	ldr	r2, [r4, #16]
 800f742:	bf0c      	ite	eq
 800f744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f748:	2500      	movne	r5, #0
 800f74a:	4293      	cmp	r3, r2
 800f74c:	bfc4      	itt	gt
 800f74e:	1a9b      	subgt	r3, r3, r2
 800f750:	18ed      	addgt	r5, r5, r3
 800f752:	2600      	movs	r6, #0
 800f754:	341a      	adds	r4, #26
 800f756:	42b5      	cmp	r5, r6
 800f758:	d11a      	bne.n	800f790 <_printf_common+0xc8>
 800f75a:	2000      	movs	r0, #0
 800f75c:	e008      	b.n	800f770 <_printf_common+0xa8>
 800f75e:	2301      	movs	r3, #1
 800f760:	4652      	mov	r2, sl
 800f762:	4649      	mov	r1, r9
 800f764:	4638      	mov	r0, r7
 800f766:	47c0      	blx	r8
 800f768:	3001      	adds	r0, #1
 800f76a:	d103      	bne.n	800f774 <_printf_common+0xac>
 800f76c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f774:	3501      	adds	r5, #1
 800f776:	e7c6      	b.n	800f706 <_printf_common+0x3e>
 800f778:	18e1      	adds	r1, r4, r3
 800f77a:	1c5a      	adds	r2, r3, #1
 800f77c:	2030      	movs	r0, #48	; 0x30
 800f77e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f782:	4422      	add	r2, r4
 800f784:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f788:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f78c:	3302      	adds	r3, #2
 800f78e:	e7c7      	b.n	800f720 <_printf_common+0x58>
 800f790:	2301      	movs	r3, #1
 800f792:	4622      	mov	r2, r4
 800f794:	4649      	mov	r1, r9
 800f796:	4638      	mov	r0, r7
 800f798:	47c0      	blx	r8
 800f79a:	3001      	adds	r0, #1
 800f79c:	d0e6      	beq.n	800f76c <_printf_common+0xa4>
 800f79e:	3601      	adds	r6, #1
 800f7a0:	e7d9      	b.n	800f756 <_printf_common+0x8e>
	...

0800f7a4 <_printf_i>:
 800f7a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7a8:	460c      	mov	r4, r1
 800f7aa:	4691      	mov	r9, r2
 800f7ac:	7e27      	ldrb	r7, [r4, #24]
 800f7ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f7b0:	2f78      	cmp	r7, #120	; 0x78
 800f7b2:	4680      	mov	r8, r0
 800f7b4:	469a      	mov	sl, r3
 800f7b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f7ba:	d807      	bhi.n	800f7cc <_printf_i+0x28>
 800f7bc:	2f62      	cmp	r7, #98	; 0x62
 800f7be:	d80a      	bhi.n	800f7d6 <_printf_i+0x32>
 800f7c0:	2f00      	cmp	r7, #0
 800f7c2:	f000 80d8 	beq.w	800f976 <_printf_i+0x1d2>
 800f7c6:	2f58      	cmp	r7, #88	; 0x58
 800f7c8:	f000 80a3 	beq.w	800f912 <_printf_i+0x16e>
 800f7cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f7d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f7d4:	e03a      	b.n	800f84c <_printf_i+0xa8>
 800f7d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f7da:	2b15      	cmp	r3, #21
 800f7dc:	d8f6      	bhi.n	800f7cc <_printf_i+0x28>
 800f7de:	a001      	add	r0, pc, #4	; (adr r0, 800f7e4 <_printf_i+0x40>)
 800f7e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f7e4:	0800f83d 	.word	0x0800f83d
 800f7e8:	0800f851 	.word	0x0800f851
 800f7ec:	0800f7cd 	.word	0x0800f7cd
 800f7f0:	0800f7cd 	.word	0x0800f7cd
 800f7f4:	0800f7cd 	.word	0x0800f7cd
 800f7f8:	0800f7cd 	.word	0x0800f7cd
 800f7fc:	0800f851 	.word	0x0800f851
 800f800:	0800f7cd 	.word	0x0800f7cd
 800f804:	0800f7cd 	.word	0x0800f7cd
 800f808:	0800f7cd 	.word	0x0800f7cd
 800f80c:	0800f7cd 	.word	0x0800f7cd
 800f810:	0800f95d 	.word	0x0800f95d
 800f814:	0800f881 	.word	0x0800f881
 800f818:	0800f93f 	.word	0x0800f93f
 800f81c:	0800f7cd 	.word	0x0800f7cd
 800f820:	0800f7cd 	.word	0x0800f7cd
 800f824:	0800f97f 	.word	0x0800f97f
 800f828:	0800f7cd 	.word	0x0800f7cd
 800f82c:	0800f881 	.word	0x0800f881
 800f830:	0800f7cd 	.word	0x0800f7cd
 800f834:	0800f7cd 	.word	0x0800f7cd
 800f838:	0800f947 	.word	0x0800f947
 800f83c:	680b      	ldr	r3, [r1, #0]
 800f83e:	1d1a      	adds	r2, r3, #4
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	600a      	str	r2, [r1, #0]
 800f844:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f84c:	2301      	movs	r3, #1
 800f84e:	e0a3      	b.n	800f998 <_printf_i+0x1f4>
 800f850:	6825      	ldr	r5, [r4, #0]
 800f852:	6808      	ldr	r0, [r1, #0]
 800f854:	062e      	lsls	r6, r5, #24
 800f856:	f100 0304 	add.w	r3, r0, #4
 800f85a:	d50a      	bpl.n	800f872 <_printf_i+0xce>
 800f85c:	6805      	ldr	r5, [r0, #0]
 800f85e:	600b      	str	r3, [r1, #0]
 800f860:	2d00      	cmp	r5, #0
 800f862:	da03      	bge.n	800f86c <_printf_i+0xc8>
 800f864:	232d      	movs	r3, #45	; 0x2d
 800f866:	426d      	negs	r5, r5
 800f868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f86c:	485e      	ldr	r0, [pc, #376]	; (800f9e8 <_printf_i+0x244>)
 800f86e:	230a      	movs	r3, #10
 800f870:	e019      	b.n	800f8a6 <_printf_i+0x102>
 800f872:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f876:	6805      	ldr	r5, [r0, #0]
 800f878:	600b      	str	r3, [r1, #0]
 800f87a:	bf18      	it	ne
 800f87c:	b22d      	sxthne	r5, r5
 800f87e:	e7ef      	b.n	800f860 <_printf_i+0xbc>
 800f880:	680b      	ldr	r3, [r1, #0]
 800f882:	6825      	ldr	r5, [r4, #0]
 800f884:	1d18      	adds	r0, r3, #4
 800f886:	6008      	str	r0, [r1, #0]
 800f888:	0628      	lsls	r0, r5, #24
 800f88a:	d501      	bpl.n	800f890 <_printf_i+0xec>
 800f88c:	681d      	ldr	r5, [r3, #0]
 800f88e:	e002      	b.n	800f896 <_printf_i+0xf2>
 800f890:	0669      	lsls	r1, r5, #25
 800f892:	d5fb      	bpl.n	800f88c <_printf_i+0xe8>
 800f894:	881d      	ldrh	r5, [r3, #0]
 800f896:	4854      	ldr	r0, [pc, #336]	; (800f9e8 <_printf_i+0x244>)
 800f898:	2f6f      	cmp	r7, #111	; 0x6f
 800f89a:	bf0c      	ite	eq
 800f89c:	2308      	moveq	r3, #8
 800f89e:	230a      	movne	r3, #10
 800f8a0:	2100      	movs	r1, #0
 800f8a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f8a6:	6866      	ldr	r6, [r4, #4]
 800f8a8:	60a6      	str	r6, [r4, #8]
 800f8aa:	2e00      	cmp	r6, #0
 800f8ac:	bfa2      	ittt	ge
 800f8ae:	6821      	ldrge	r1, [r4, #0]
 800f8b0:	f021 0104 	bicge.w	r1, r1, #4
 800f8b4:	6021      	strge	r1, [r4, #0]
 800f8b6:	b90d      	cbnz	r5, 800f8bc <_printf_i+0x118>
 800f8b8:	2e00      	cmp	r6, #0
 800f8ba:	d04d      	beq.n	800f958 <_printf_i+0x1b4>
 800f8bc:	4616      	mov	r6, r2
 800f8be:	fbb5 f1f3 	udiv	r1, r5, r3
 800f8c2:	fb03 5711 	mls	r7, r3, r1, r5
 800f8c6:	5dc7      	ldrb	r7, [r0, r7]
 800f8c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f8cc:	462f      	mov	r7, r5
 800f8ce:	42bb      	cmp	r3, r7
 800f8d0:	460d      	mov	r5, r1
 800f8d2:	d9f4      	bls.n	800f8be <_printf_i+0x11a>
 800f8d4:	2b08      	cmp	r3, #8
 800f8d6:	d10b      	bne.n	800f8f0 <_printf_i+0x14c>
 800f8d8:	6823      	ldr	r3, [r4, #0]
 800f8da:	07df      	lsls	r7, r3, #31
 800f8dc:	d508      	bpl.n	800f8f0 <_printf_i+0x14c>
 800f8de:	6923      	ldr	r3, [r4, #16]
 800f8e0:	6861      	ldr	r1, [r4, #4]
 800f8e2:	4299      	cmp	r1, r3
 800f8e4:	bfde      	ittt	le
 800f8e6:	2330      	movle	r3, #48	; 0x30
 800f8e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f8ec:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800f8f0:	1b92      	subs	r2, r2, r6
 800f8f2:	6122      	str	r2, [r4, #16]
 800f8f4:	f8cd a000 	str.w	sl, [sp]
 800f8f8:	464b      	mov	r3, r9
 800f8fa:	aa03      	add	r2, sp, #12
 800f8fc:	4621      	mov	r1, r4
 800f8fe:	4640      	mov	r0, r8
 800f900:	f7ff fee2 	bl	800f6c8 <_printf_common>
 800f904:	3001      	adds	r0, #1
 800f906:	d14c      	bne.n	800f9a2 <_printf_i+0x1fe>
 800f908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f90c:	b004      	add	sp, #16
 800f90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f912:	4835      	ldr	r0, [pc, #212]	; (800f9e8 <_printf_i+0x244>)
 800f914:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f918:	6823      	ldr	r3, [r4, #0]
 800f91a:	680e      	ldr	r6, [r1, #0]
 800f91c:	061f      	lsls	r7, r3, #24
 800f91e:	f856 5b04 	ldr.w	r5, [r6], #4
 800f922:	600e      	str	r6, [r1, #0]
 800f924:	d514      	bpl.n	800f950 <_printf_i+0x1ac>
 800f926:	07d9      	lsls	r1, r3, #31
 800f928:	bf44      	itt	mi
 800f92a:	f043 0320 	orrmi.w	r3, r3, #32
 800f92e:	6023      	strmi	r3, [r4, #0]
 800f930:	b91d      	cbnz	r5, 800f93a <_printf_i+0x196>
 800f932:	6823      	ldr	r3, [r4, #0]
 800f934:	f023 0320 	bic.w	r3, r3, #32
 800f938:	6023      	str	r3, [r4, #0]
 800f93a:	2310      	movs	r3, #16
 800f93c:	e7b0      	b.n	800f8a0 <_printf_i+0xfc>
 800f93e:	6823      	ldr	r3, [r4, #0]
 800f940:	f043 0320 	orr.w	r3, r3, #32
 800f944:	6023      	str	r3, [r4, #0]
 800f946:	2378      	movs	r3, #120	; 0x78
 800f948:	4828      	ldr	r0, [pc, #160]	; (800f9ec <_printf_i+0x248>)
 800f94a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f94e:	e7e3      	b.n	800f918 <_printf_i+0x174>
 800f950:	065e      	lsls	r6, r3, #25
 800f952:	bf48      	it	mi
 800f954:	b2ad      	uxthmi	r5, r5
 800f956:	e7e6      	b.n	800f926 <_printf_i+0x182>
 800f958:	4616      	mov	r6, r2
 800f95a:	e7bb      	b.n	800f8d4 <_printf_i+0x130>
 800f95c:	680b      	ldr	r3, [r1, #0]
 800f95e:	6826      	ldr	r6, [r4, #0]
 800f960:	6960      	ldr	r0, [r4, #20]
 800f962:	1d1d      	adds	r5, r3, #4
 800f964:	600d      	str	r5, [r1, #0]
 800f966:	0635      	lsls	r5, r6, #24
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	d501      	bpl.n	800f970 <_printf_i+0x1cc>
 800f96c:	6018      	str	r0, [r3, #0]
 800f96e:	e002      	b.n	800f976 <_printf_i+0x1d2>
 800f970:	0671      	lsls	r1, r6, #25
 800f972:	d5fb      	bpl.n	800f96c <_printf_i+0x1c8>
 800f974:	8018      	strh	r0, [r3, #0]
 800f976:	2300      	movs	r3, #0
 800f978:	6123      	str	r3, [r4, #16]
 800f97a:	4616      	mov	r6, r2
 800f97c:	e7ba      	b.n	800f8f4 <_printf_i+0x150>
 800f97e:	680b      	ldr	r3, [r1, #0]
 800f980:	1d1a      	adds	r2, r3, #4
 800f982:	600a      	str	r2, [r1, #0]
 800f984:	681e      	ldr	r6, [r3, #0]
 800f986:	6862      	ldr	r2, [r4, #4]
 800f988:	2100      	movs	r1, #0
 800f98a:	4630      	mov	r0, r6
 800f98c:	f7f0 fc30 	bl	80001f0 <memchr>
 800f990:	b108      	cbz	r0, 800f996 <_printf_i+0x1f2>
 800f992:	1b80      	subs	r0, r0, r6
 800f994:	6060      	str	r0, [r4, #4]
 800f996:	6863      	ldr	r3, [r4, #4]
 800f998:	6123      	str	r3, [r4, #16]
 800f99a:	2300      	movs	r3, #0
 800f99c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9a0:	e7a8      	b.n	800f8f4 <_printf_i+0x150>
 800f9a2:	6923      	ldr	r3, [r4, #16]
 800f9a4:	4632      	mov	r2, r6
 800f9a6:	4649      	mov	r1, r9
 800f9a8:	4640      	mov	r0, r8
 800f9aa:	47d0      	blx	sl
 800f9ac:	3001      	adds	r0, #1
 800f9ae:	d0ab      	beq.n	800f908 <_printf_i+0x164>
 800f9b0:	6823      	ldr	r3, [r4, #0]
 800f9b2:	079b      	lsls	r3, r3, #30
 800f9b4:	d413      	bmi.n	800f9de <_printf_i+0x23a>
 800f9b6:	68e0      	ldr	r0, [r4, #12]
 800f9b8:	9b03      	ldr	r3, [sp, #12]
 800f9ba:	4298      	cmp	r0, r3
 800f9bc:	bfb8      	it	lt
 800f9be:	4618      	movlt	r0, r3
 800f9c0:	e7a4      	b.n	800f90c <_printf_i+0x168>
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	4632      	mov	r2, r6
 800f9c6:	4649      	mov	r1, r9
 800f9c8:	4640      	mov	r0, r8
 800f9ca:	47d0      	blx	sl
 800f9cc:	3001      	adds	r0, #1
 800f9ce:	d09b      	beq.n	800f908 <_printf_i+0x164>
 800f9d0:	3501      	adds	r5, #1
 800f9d2:	68e3      	ldr	r3, [r4, #12]
 800f9d4:	9903      	ldr	r1, [sp, #12]
 800f9d6:	1a5b      	subs	r3, r3, r1
 800f9d8:	42ab      	cmp	r3, r5
 800f9da:	dcf2      	bgt.n	800f9c2 <_printf_i+0x21e>
 800f9dc:	e7eb      	b.n	800f9b6 <_printf_i+0x212>
 800f9de:	2500      	movs	r5, #0
 800f9e0:	f104 0619 	add.w	r6, r4, #25
 800f9e4:	e7f5      	b.n	800f9d2 <_printf_i+0x22e>
 800f9e6:	bf00      	nop
 800f9e8:	08012452 	.word	0x08012452
 800f9ec:	08012463 	.word	0x08012463

0800f9f0 <iprintf>:
 800f9f0:	b40f      	push	{r0, r1, r2, r3}
 800f9f2:	4b0a      	ldr	r3, [pc, #40]	; (800fa1c <iprintf+0x2c>)
 800f9f4:	b513      	push	{r0, r1, r4, lr}
 800f9f6:	681c      	ldr	r4, [r3, #0]
 800f9f8:	b124      	cbz	r4, 800fa04 <iprintf+0x14>
 800f9fa:	69a3      	ldr	r3, [r4, #24]
 800f9fc:	b913      	cbnz	r3, 800fa04 <iprintf+0x14>
 800f9fe:	4620      	mov	r0, r4
 800fa00:	f001 f90c 	bl	8010c1c <__sinit>
 800fa04:	ab05      	add	r3, sp, #20
 800fa06:	9a04      	ldr	r2, [sp, #16]
 800fa08:	68a1      	ldr	r1, [r4, #8]
 800fa0a:	9301      	str	r3, [sp, #4]
 800fa0c:	4620      	mov	r0, r4
 800fa0e:	f001 ffd5 	bl	80119bc <_vfiprintf_r>
 800fa12:	b002      	add	sp, #8
 800fa14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa18:	b004      	add	sp, #16
 800fa1a:	4770      	bx	lr
 800fa1c:	20000018 	.word	0x20000018

0800fa20 <_puts_r>:
 800fa20:	b570      	push	{r4, r5, r6, lr}
 800fa22:	460e      	mov	r6, r1
 800fa24:	4605      	mov	r5, r0
 800fa26:	b118      	cbz	r0, 800fa30 <_puts_r+0x10>
 800fa28:	6983      	ldr	r3, [r0, #24]
 800fa2a:	b90b      	cbnz	r3, 800fa30 <_puts_r+0x10>
 800fa2c:	f001 f8f6 	bl	8010c1c <__sinit>
 800fa30:	69ab      	ldr	r3, [r5, #24]
 800fa32:	68ac      	ldr	r4, [r5, #8]
 800fa34:	b913      	cbnz	r3, 800fa3c <_puts_r+0x1c>
 800fa36:	4628      	mov	r0, r5
 800fa38:	f001 f8f0 	bl	8010c1c <__sinit>
 800fa3c:	4b2c      	ldr	r3, [pc, #176]	; (800faf0 <_puts_r+0xd0>)
 800fa3e:	429c      	cmp	r4, r3
 800fa40:	d120      	bne.n	800fa84 <_puts_r+0x64>
 800fa42:	686c      	ldr	r4, [r5, #4]
 800fa44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa46:	07db      	lsls	r3, r3, #31
 800fa48:	d405      	bmi.n	800fa56 <_puts_r+0x36>
 800fa4a:	89a3      	ldrh	r3, [r4, #12]
 800fa4c:	0598      	lsls	r0, r3, #22
 800fa4e:	d402      	bmi.n	800fa56 <_puts_r+0x36>
 800fa50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa52:	f001 f986 	bl	8010d62 <__retarget_lock_acquire_recursive>
 800fa56:	89a3      	ldrh	r3, [r4, #12]
 800fa58:	0719      	lsls	r1, r3, #28
 800fa5a:	d51d      	bpl.n	800fa98 <_puts_r+0x78>
 800fa5c:	6923      	ldr	r3, [r4, #16]
 800fa5e:	b1db      	cbz	r3, 800fa98 <_puts_r+0x78>
 800fa60:	3e01      	subs	r6, #1
 800fa62:	68a3      	ldr	r3, [r4, #8]
 800fa64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fa68:	3b01      	subs	r3, #1
 800fa6a:	60a3      	str	r3, [r4, #8]
 800fa6c:	bb39      	cbnz	r1, 800fabe <_puts_r+0x9e>
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	da38      	bge.n	800fae4 <_puts_r+0xc4>
 800fa72:	4622      	mov	r2, r4
 800fa74:	210a      	movs	r1, #10
 800fa76:	4628      	mov	r0, r5
 800fa78:	f000 f87c 	bl	800fb74 <__swbuf_r>
 800fa7c:	3001      	adds	r0, #1
 800fa7e:	d011      	beq.n	800faa4 <_puts_r+0x84>
 800fa80:	250a      	movs	r5, #10
 800fa82:	e011      	b.n	800faa8 <_puts_r+0x88>
 800fa84:	4b1b      	ldr	r3, [pc, #108]	; (800faf4 <_puts_r+0xd4>)
 800fa86:	429c      	cmp	r4, r3
 800fa88:	d101      	bne.n	800fa8e <_puts_r+0x6e>
 800fa8a:	68ac      	ldr	r4, [r5, #8]
 800fa8c:	e7da      	b.n	800fa44 <_puts_r+0x24>
 800fa8e:	4b1a      	ldr	r3, [pc, #104]	; (800faf8 <_puts_r+0xd8>)
 800fa90:	429c      	cmp	r4, r3
 800fa92:	bf08      	it	eq
 800fa94:	68ec      	ldreq	r4, [r5, #12]
 800fa96:	e7d5      	b.n	800fa44 <_puts_r+0x24>
 800fa98:	4621      	mov	r1, r4
 800fa9a:	4628      	mov	r0, r5
 800fa9c:	f000 f8bc 	bl	800fc18 <__swsetup_r>
 800faa0:	2800      	cmp	r0, #0
 800faa2:	d0dd      	beq.n	800fa60 <_puts_r+0x40>
 800faa4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800faa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800faaa:	07da      	lsls	r2, r3, #31
 800faac:	d405      	bmi.n	800faba <_puts_r+0x9a>
 800faae:	89a3      	ldrh	r3, [r4, #12]
 800fab0:	059b      	lsls	r3, r3, #22
 800fab2:	d402      	bmi.n	800faba <_puts_r+0x9a>
 800fab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fab6:	f001 f955 	bl	8010d64 <__retarget_lock_release_recursive>
 800faba:	4628      	mov	r0, r5
 800fabc:	bd70      	pop	{r4, r5, r6, pc}
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	da04      	bge.n	800facc <_puts_r+0xac>
 800fac2:	69a2      	ldr	r2, [r4, #24]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	dc06      	bgt.n	800fad6 <_puts_r+0xb6>
 800fac8:	290a      	cmp	r1, #10
 800faca:	d004      	beq.n	800fad6 <_puts_r+0xb6>
 800facc:	6823      	ldr	r3, [r4, #0]
 800face:	1c5a      	adds	r2, r3, #1
 800fad0:	6022      	str	r2, [r4, #0]
 800fad2:	7019      	strb	r1, [r3, #0]
 800fad4:	e7c5      	b.n	800fa62 <_puts_r+0x42>
 800fad6:	4622      	mov	r2, r4
 800fad8:	4628      	mov	r0, r5
 800fada:	f000 f84b 	bl	800fb74 <__swbuf_r>
 800fade:	3001      	adds	r0, #1
 800fae0:	d1bf      	bne.n	800fa62 <_puts_r+0x42>
 800fae2:	e7df      	b.n	800faa4 <_puts_r+0x84>
 800fae4:	6823      	ldr	r3, [r4, #0]
 800fae6:	250a      	movs	r5, #10
 800fae8:	1c5a      	adds	r2, r3, #1
 800faea:	6022      	str	r2, [r4, #0]
 800faec:	701d      	strb	r5, [r3, #0]
 800faee:	e7db      	b.n	800faa8 <_puts_r+0x88>
 800faf0:	08012528 	.word	0x08012528
 800faf4:	08012548 	.word	0x08012548
 800faf8:	08012508 	.word	0x08012508

0800fafc <puts>:
 800fafc:	4b02      	ldr	r3, [pc, #8]	; (800fb08 <puts+0xc>)
 800fafe:	4601      	mov	r1, r0
 800fb00:	6818      	ldr	r0, [r3, #0]
 800fb02:	f7ff bf8d 	b.w	800fa20 <_puts_r>
 800fb06:	bf00      	nop
 800fb08:	20000018 	.word	0x20000018

0800fb0c <sniprintf>:
 800fb0c:	b40c      	push	{r2, r3}
 800fb0e:	b530      	push	{r4, r5, lr}
 800fb10:	4b17      	ldr	r3, [pc, #92]	; (800fb70 <sniprintf+0x64>)
 800fb12:	1e0c      	subs	r4, r1, #0
 800fb14:	681d      	ldr	r5, [r3, #0]
 800fb16:	b09d      	sub	sp, #116	; 0x74
 800fb18:	da08      	bge.n	800fb2c <sniprintf+0x20>
 800fb1a:	238b      	movs	r3, #139	; 0x8b
 800fb1c:	602b      	str	r3, [r5, #0]
 800fb1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb22:	b01d      	add	sp, #116	; 0x74
 800fb24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb28:	b002      	add	sp, #8
 800fb2a:	4770      	bx	lr
 800fb2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fb30:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fb34:	bf14      	ite	ne
 800fb36:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800fb3a:	4623      	moveq	r3, r4
 800fb3c:	9304      	str	r3, [sp, #16]
 800fb3e:	9307      	str	r3, [sp, #28]
 800fb40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb44:	9002      	str	r0, [sp, #8]
 800fb46:	9006      	str	r0, [sp, #24]
 800fb48:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fb4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fb4e:	ab21      	add	r3, sp, #132	; 0x84
 800fb50:	a902      	add	r1, sp, #8
 800fb52:	4628      	mov	r0, r5
 800fb54:	9301      	str	r3, [sp, #4]
 800fb56:	f001 fe07 	bl	8011768 <_svfiprintf_r>
 800fb5a:	1c43      	adds	r3, r0, #1
 800fb5c:	bfbc      	itt	lt
 800fb5e:	238b      	movlt	r3, #139	; 0x8b
 800fb60:	602b      	strlt	r3, [r5, #0]
 800fb62:	2c00      	cmp	r4, #0
 800fb64:	d0dd      	beq.n	800fb22 <sniprintf+0x16>
 800fb66:	9b02      	ldr	r3, [sp, #8]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	701a      	strb	r2, [r3, #0]
 800fb6c:	e7d9      	b.n	800fb22 <sniprintf+0x16>
 800fb6e:	bf00      	nop
 800fb70:	20000018 	.word	0x20000018

0800fb74 <__swbuf_r>:
 800fb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb76:	460e      	mov	r6, r1
 800fb78:	4614      	mov	r4, r2
 800fb7a:	4605      	mov	r5, r0
 800fb7c:	b118      	cbz	r0, 800fb86 <__swbuf_r+0x12>
 800fb7e:	6983      	ldr	r3, [r0, #24]
 800fb80:	b90b      	cbnz	r3, 800fb86 <__swbuf_r+0x12>
 800fb82:	f001 f84b 	bl	8010c1c <__sinit>
 800fb86:	4b21      	ldr	r3, [pc, #132]	; (800fc0c <__swbuf_r+0x98>)
 800fb88:	429c      	cmp	r4, r3
 800fb8a:	d12b      	bne.n	800fbe4 <__swbuf_r+0x70>
 800fb8c:	686c      	ldr	r4, [r5, #4]
 800fb8e:	69a3      	ldr	r3, [r4, #24]
 800fb90:	60a3      	str	r3, [r4, #8]
 800fb92:	89a3      	ldrh	r3, [r4, #12]
 800fb94:	071a      	lsls	r2, r3, #28
 800fb96:	d52f      	bpl.n	800fbf8 <__swbuf_r+0x84>
 800fb98:	6923      	ldr	r3, [r4, #16]
 800fb9a:	b36b      	cbz	r3, 800fbf8 <__swbuf_r+0x84>
 800fb9c:	6923      	ldr	r3, [r4, #16]
 800fb9e:	6820      	ldr	r0, [r4, #0]
 800fba0:	1ac0      	subs	r0, r0, r3
 800fba2:	6963      	ldr	r3, [r4, #20]
 800fba4:	b2f6      	uxtb	r6, r6
 800fba6:	4283      	cmp	r3, r0
 800fba8:	4637      	mov	r7, r6
 800fbaa:	dc04      	bgt.n	800fbb6 <__swbuf_r+0x42>
 800fbac:	4621      	mov	r1, r4
 800fbae:	4628      	mov	r0, r5
 800fbb0:	f000 ffa0 	bl	8010af4 <_fflush_r>
 800fbb4:	bb30      	cbnz	r0, 800fc04 <__swbuf_r+0x90>
 800fbb6:	68a3      	ldr	r3, [r4, #8]
 800fbb8:	3b01      	subs	r3, #1
 800fbba:	60a3      	str	r3, [r4, #8]
 800fbbc:	6823      	ldr	r3, [r4, #0]
 800fbbe:	1c5a      	adds	r2, r3, #1
 800fbc0:	6022      	str	r2, [r4, #0]
 800fbc2:	701e      	strb	r6, [r3, #0]
 800fbc4:	6963      	ldr	r3, [r4, #20]
 800fbc6:	3001      	adds	r0, #1
 800fbc8:	4283      	cmp	r3, r0
 800fbca:	d004      	beq.n	800fbd6 <__swbuf_r+0x62>
 800fbcc:	89a3      	ldrh	r3, [r4, #12]
 800fbce:	07db      	lsls	r3, r3, #31
 800fbd0:	d506      	bpl.n	800fbe0 <__swbuf_r+0x6c>
 800fbd2:	2e0a      	cmp	r6, #10
 800fbd4:	d104      	bne.n	800fbe0 <__swbuf_r+0x6c>
 800fbd6:	4621      	mov	r1, r4
 800fbd8:	4628      	mov	r0, r5
 800fbda:	f000 ff8b 	bl	8010af4 <_fflush_r>
 800fbde:	b988      	cbnz	r0, 800fc04 <__swbuf_r+0x90>
 800fbe0:	4638      	mov	r0, r7
 800fbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbe4:	4b0a      	ldr	r3, [pc, #40]	; (800fc10 <__swbuf_r+0x9c>)
 800fbe6:	429c      	cmp	r4, r3
 800fbe8:	d101      	bne.n	800fbee <__swbuf_r+0x7a>
 800fbea:	68ac      	ldr	r4, [r5, #8]
 800fbec:	e7cf      	b.n	800fb8e <__swbuf_r+0x1a>
 800fbee:	4b09      	ldr	r3, [pc, #36]	; (800fc14 <__swbuf_r+0xa0>)
 800fbf0:	429c      	cmp	r4, r3
 800fbf2:	bf08      	it	eq
 800fbf4:	68ec      	ldreq	r4, [r5, #12]
 800fbf6:	e7ca      	b.n	800fb8e <__swbuf_r+0x1a>
 800fbf8:	4621      	mov	r1, r4
 800fbfa:	4628      	mov	r0, r5
 800fbfc:	f000 f80c 	bl	800fc18 <__swsetup_r>
 800fc00:	2800      	cmp	r0, #0
 800fc02:	d0cb      	beq.n	800fb9c <__swbuf_r+0x28>
 800fc04:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fc08:	e7ea      	b.n	800fbe0 <__swbuf_r+0x6c>
 800fc0a:	bf00      	nop
 800fc0c:	08012528 	.word	0x08012528
 800fc10:	08012548 	.word	0x08012548
 800fc14:	08012508 	.word	0x08012508

0800fc18 <__swsetup_r>:
 800fc18:	4b32      	ldr	r3, [pc, #200]	; (800fce4 <__swsetup_r+0xcc>)
 800fc1a:	b570      	push	{r4, r5, r6, lr}
 800fc1c:	681d      	ldr	r5, [r3, #0]
 800fc1e:	4606      	mov	r6, r0
 800fc20:	460c      	mov	r4, r1
 800fc22:	b125      	cbz	r5, 800fc2e <__swsetup_r+0x16>
 800fc24:	69ab      	ldr	r3, [r5, #24]
 800fc26:	b913      	cbnz	r3, 800fc2e <__swsetup_r+0x16>
 800fc28:	4628      	mov	r0, r5
 800fc2a:	f000 fff7 	bl	8010c1c <__sinit>
 800fc2e:	4b2e      	ldr	r3, [pc, #184]	; (800fce8 <__swsetup_r+0xd0>)
 800fc30:	429c      	cmp	r4, r3
 800fc32:	d10f      	bne.n	800fc54 <__swsetup_r+0x3c>
 800fc34:	686c      	ldr	r4, [r5, #4]
 800fc36:	89a3      	ldrh	r3, [r4, #12]
 800fc38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc3c:	0719      	lsls	r1, r3, #28
 800fc3e:	d42c      	bmi.n	800fc9a <__swsetup_r+0x82>
 800fc40:	06dd      	lsls	r5, r3, #27
 800fc42:	d411      	bmi.n	800fc68 <__swsetup_r+0x50>
 800fc44:	2309      	movs	r3, #9
 800fc46:	6033      	str	r3, [r6, #0]
 800fc48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fc4c:	81a3      	strh	r3, [r4, #12]
 800fc4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc52:	e03e      	b.n	800fcd2 <__swsetup_r+0xba>
 800fc54:	4b25      	ldr	r3, [pc, #148]	; (800fcec <__swsetup_r+0xd4>)
 800fc56:	429c      	cmp	r4, r3
 800fc58:	d101      	bne.n	800fc5e <__swsetup_r+0x46>
 800fc5a:	68ac      	ldr	r4, [r5, #8]
 800fc5c:	e7eb      	b.n	800fc36 <__swsetup_r+0x1e>
 800fc5e:	4b24      	ldr	r3, [pc, #144]	; (800fcf0 <__swsetup_r+0xd8>)
 800fc60:	429c      	cmp	r4, r3
 800fc62:	bf08      	it	eq
 800fc64:	68ec      	ldreq	r4, [r5, #12]
 800fc66:	e7e6      	b.n	800fc36 <__swsetup_r+0x1e>
 800fc68:	0758      	lsls	r0, r3, #29
 800fc6a:	d512      	bpl.n	800fc92 <__swsetup_r+0x7a>
 800fc6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc6e:	b141      	cbz	r1, 800fc82 <__swsetup_r+0x6a>
 800fc70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc74:	4299      	cmp	r1, r3
 800fc76:	d002      	beq.n	800fc7e <__swsetup_r+0x66>
 800fc78:	4630      	mov	r0, r6
 800fc7a:	f001 fc6f 	bl	801155c <_free_r>
 800fc7e:	2300      	movs	r3, #0
 800fc80:	6363      	str	r3, [r4, #52]	; 0x34
 800fc82:	89a3      	ldrh	r3, [r4, #12]
 800fc84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fc88:	81a3      	strh	r3, [r4, #12]
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	6063      	str	r3, [r4, #4]
 800fc8e:	6923      	ldr	r3, [r4, #16]
 800fc90:	6023      	str	r3, [r4, #0]
 800fc92:	89a3      	ldrh	r3, [r4, #12]
 800fc94:	f043 0308 	orr.w	r3, r3, #8
 800fc98:	81a3      	strh	r3, [r4, #12]
 800fc9a:	6923      	ldr	r3, [r4, #16]
 800fc9c:	b94b      	cbnz	r3, 800fcb2 <__swsetup_r+0x9a>
 800fc9e:	89a3      	ldrh	r3, [r4, #12]
 800fca0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fca8:	d003      	beq.n	800fcb2 <__swsetup_r+0x9a>
 800fcaa:	4621      	mov	r1, r4
 800fcac:	4630      	mov	r0, r6
 800fcae:	f001 f87f 	bl	8010db0 <__smakebuf_r>
 800fcb2:	89a0      	ldrh	r0, [r4, #12]
 800fcb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fcb8:	f010 0301 	ands.w	r3, r0, #1
 800fcbc:	d00a      	beq.n	800fcd4 <__swsetup_r+0xbc>
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	60a3      	str	r3, [r4, #8]
 800fcc2:	6963      	ldr	r3, [r4, #20]
 800fcc4:	425b      	negs	r3, r3
 800fcc6:	61a3      	str	r3, [r4, #24]
 800fcc8:	6923      	ldr	r3, [r4, #16]
 800fcca:	b943      	cbnz	r3, 800fcde <__swsetup_r+0xc6>
 800fccc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fcd0:	d1ba      	bne.n	800fc48 <__swsetup_r+0x30>
 800fcd2:	bd70      	pop	{r4, r5, r6, pc}
 800fcd4:	0781      	lsls	r1, r0, #30
 800fcd6:	bf58      	it	pl
 800fcd8:	6963      	ldrpl	r3, [r4, #20]
 800fcda:	60a3      	str	r3, [r4, #8]
 800fcdc:	e7f4      	b.n	800fcc8 <__swsetup_r+0xb0>
 800fcde:	2000      	movs	r0, #0
 800fce0:	e7f7      	b.n	800fcd2 <__swsetup_r+0xba>
 800fce2:	bf00      	nop
 800fce4:	20000018 	.word	0x20000018
 800fce8:	08012528 	.word	0x08012528
 800fcec:	08012548 	.word	0x08012548
 800fcf0:	08012508 	.word	0x08012508

0800fcf4 <quorem>:
 800fcf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf8:	6903      	ldr	r3, [r0, #16]
 800fcfa:	690c      	ldr	r4, [r1, #16]
 800fcfc:	42a3      	cmp	r3, r4
 800fcfe:	4607      	mov	r7, r0
 800fd00:	f2c0 8081 	blt.w	800fe06 <quorem+0x112>
 800fd04:	3c01      	subs	r4, #1
 800fd06:	f101 0814 	add.w	r8, r1, #20
 800fd0a:	f100 0514 	add.w	r5, r0, #20
 800fd0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd12:	9301      	str	r3, [sp, #4]
 800fd14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd1c:	3301      	adds	r3, #1
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fd24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd28:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd2c:	d331      	bcc.n	800fd92 <quorem+0x9e>
 800fd2e:	f04f 0e00 	mov.w	lr, #0
 800fd32:	4640      	mov	r0, r8
 800fd34:	46ac      	mov	ip, r5
 800fd36:	46f2      	mov	sl, lr
 800fd38:	f850 2b04 	ldr.w	r2, [r0], #4
 800fd3c:	b293      	uxth	r3, r2
 800fd3e:	fb06 e303 	mla	r3, r6, r3, lr
 800fd42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fd46:	b29b      	uxth	r3, r3
 800fd48:	ebaa 0303 	sub.w	r3, sl, r3
 800fd4c:	0c12      	lsrs	r2, r2, #16
 800fd4e:	f8dc a000 	ldr.w	sl, [ip]
 800fd52:	fb06 e202 	mla	r2, r6, r2, lr
 800fd56:	fa13 f38a 	uxtah	r3, r3, sl
 800fd5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fd5e:	fa1f fa82 	uxth.w	sl, r2
 800fd62:	f8dc 2000 	ldr.w	r2, [ip]
 800fd66:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800fd6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fd6e:	b29b      	uxth	r3, r3
 800fd70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd74:	4581      	cmp	r9, r0
 800fd76:	f84c 3b04 	str.w	r3, [ip], #4
 800fd7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fd7e:	d2db      	bcs.n	800fd38 <quorem+0x44>
 800fd80:	f855 300b 	ldr.w	r3, [r5, fp]
 800fd84:	b92b      	cbnz	r3, 800fd92 <quorem+0x9e>
 800fd86:	9b01      	ldr	r3, [sp, #4]
 800fd88:	3b04      	subs	r3, #4
 800fd8a:	429d      	cmp	r5, r3
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	d32e      	bcc.n	800fdee <quorem+0xfa>
 800fd90:	613c      	str	r4, [r7, #16]
 800fd92:	4638      	mov	r0, r7
 800fd94:	f001 fad2 	bl	801133c <__mcmp>
 800fd98:	2800      	cmp	r0, #0
 800fd9a:	db24      	blt.n	800fde6 <quorem+0xf2>
 800fd9c:	3601      	adds	r6, #1
 800fd9e:	4628      	mov	r0, r5
 800fda0:	f04f 0c00 	mov.w	ip, #0
 800fda4:	f858 2b04 	ldr.w	r2, [r8], #4
 800fda8:	f8d0 e000 	ldr.w	lr, [r0]
 800fdac:	b293      	uxth	r3, r2
 800fdae:	ebac 0303 	sub.w	r3, ip, r3
 800fdb2:	0c12      	lsrs	r2, r2, #16
 800fdb4:	fa13 f38e 	uxtah	r3, r3, lr
 800fdb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fdbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fdc0:	b29b      	uxth	r3, r3
 800fdc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fdc6:	45c1      	cmp	r9, r8
 800fdc8:	f840 3b04 	str.w	r3, [r0], #4
 800fdcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fdd0:	d2e8      	bcs.n	800fda4 <quorem+0xb0>
 800fdd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fdd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdda:	b922      	cbnz	r2, 800fde6 <quorem+0xf2>
 800fddc:	3b04      	subs	r3, #4
 800fdde:	429d      	cmp	r5, r3
 800fde0:	461a      	mov	r2, r3
 800fde2:	d30a      	bcc.n	800fdfa <quorem+0x106>
 800fde4:	613c      	str	r4, [r7, #16]
 800fde6:	4630      	mov	r0, r6
 800fde8:	b003      	add	sp, #12
 800fdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdee:	6812      	ldr	r2, [r2, #0]
 800fdf0:	3b04      	subs	r3, #4
 800fdf2:	2a00      	cmp	r2, #0
 800fdf4:	d1cc      	bne.n	800fd90 <quorem+0x9c>
 800fdf6:	3c01      	subs	r4, #1
 800fdf8:	e7c7      	b.n	800fd8a <quorem+0x96>
 800fdfa:	6812      	ldr	r2, [r2, #0]
 800fdfc:	3b04      	subs	r3, #4
 800fdfe:	2a00      	cmp	r2, #0
 800fe00:	d1f0      	bne.n	800fde4 <quorem+0xf0>
 800fe02:	3c01      	subs	r4, #1
 800fe04:	e7eb      	b.n	800fdde <quorem+0xea>
 800fe06:	2000      	movs	r0, #0
 800fe08:	e7ee      	b.n	800fde8 <quorem+0xf4>
 800fe0a:	0000      	movs	r0, r0
 800fe0c:	0000      	movs	r0, r0
	...

0800fe10 <_dtoa_r>:
 800fe10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe14:	ed2d 8b02 	vpush	{d8}
 800fe18:	ec57 6b10 	vmov	r6, r7, d0
 800fe1c:	b095      	sub	sp, #84	; 0x54
 800fe1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fe20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fe24:	9105      	str	r1, [sp, #20]
 800fe26:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800fe2a:	4604      	mov	r4, r0
 800fe2c:	9209      	str	r2, [sp, #36]	; 0x24
 800fe2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe30:	b975      	cbnz	r5, 800fe50 <_dtoa_r+0x40>
 800fe32:	2010      	movs	r0, #16
 800fe34:	f000 fffc 	bl	8010e30 <malloc>
 800fe38:	4602      	mov	r2, r0
 800fe3a:	6260      	str	r0, [r4, #36]	; 0x24
 800fe3c:	b920      	cbnz	r0, 800fe48 <_dtoa_r+0x38>
 800fe3e:	4bb2      	ldr	r3, [pc, #712]	; (8010108 <_dtoa_r+0x2f8>)
 800fe40:	21ea      	movs	r1, #234	; 0xea
 800fe42:	48b2      	ldr	r0, [pc, #712]	; (801010c <_dtoa_r+0x2fc>)
 800fe44:	f001 ff50 	bl	8011ce8 <__assert_func>
 800fe48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fe4c:	6005      	str	r5, [r0, #0]
 800fe4e:	60c5      	str	r5, [r0, #12]
 800fe50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe52:	6819      	ldr	r1, [r3, #0]
 800fe54:	b151      	cbz	r1, 800fe6c <_dtoa_r+0x5c>
 800fe56:	685a      	ldr	r2, [r3, #4]
 800fe58:	604a      	str	r2, [r1, #4]
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	4093      	lsls	r3, r2
 800fe5e:	608b      	str	r3, [r1, #8]
 800fe60:	4620      	mov	r0, r4
 800fe62:	f001 f82d 	bl	8010ec0 <_Bfree>
 800fe66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe68:	2200      	movs	r2, #0
 800fe6a:	601a      	str	r2, [r3, #0]
 800fe6c:	1e3b      	subs	r3, r7, #0
 800fe6e:	bfb9      	ittee	lt
 800fe70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fe74:	9303      	strlt	r3, [sp, #12]
 800fe76:	2300      	movge	r3, #0
 800fe78:	f8c8 3000 	strge.w	r3, [r8]
 800fe7c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fe80:	4ba3      	ldr	r3, [pc, #652]	; (8010110 <_dtoa_r+0x300>)
 800fe82:	bfbc      	itt	lt
 800fe84:	2201      	movlt	r2, #1
 800fe86:	f8c8 2000 	strlt.w	r2, [r8]
 800fe8a:	ea33 0309 	bics.w	r3, r3, r9
 800fe8e:	d11b      	bne.n	800fec8 <_dtoa_r+0xb8>
 800fe90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fe92:	f242 730f 	movw	r3, #9999	; 0x270f
 800fe96:	6013      	str	r3, [r2, #0]
 800fe98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fe9c:	4333      	orrs	r3, r6
 800fe9e:	f000 857a 	beq.w	8010996 <_dtoa_r+0xb86>
 800fea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fea4:	b963      	cbnz	r3, 800fec0 <_dtoa_r+0xb0>
 800fea6:	4b9b      	ldr	r3, [pc, #620]	; (8010114 <_dtoa_r+0x304>)
 800fea8:	e024      	b.n	800fef4 <_dtoa_r+0xe4>
 800feaa:	4b9b      	ldr	r3, [pc, #620]	; (8010118 <_dtoa_r+0x308>)
 800feac:	9300      	str	r3, [sp, #0]
 800feae:	3308      	adds	r3, #8
 800feb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800feb2:	6013      	str	r3, [r2, #0]
 800feb4:	9800      	ldr	r0, [sp, #0]
 800feb6:	b015      	add	sp, #84	; 0x54
 800feb8:	ecbd 8b02 	vpop	{d8}
 800febc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec0:	4b94      	ldr	r3, [pc, #592]	; (8010114 <_dtoa_r+0x304>)
 800fec2:	9300      	str	r3, [sp, #0]
 800fec4:	3303      	adds	r3, #3
 800fec6:	e7f3      	b.n	800feb0 <_dtoa_r+0xa0>
 800fec8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fecc:	2200      	movs	r2, #0
 800fece:	ec51 0b17 	vmov	r0, r1, d7
 800fed2:	2300      	movs	r3, #0
 800fed4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800fed8:	f7f0 fdfe 	bl	8000ad8 <__aeabi_dcmpeq>
 800fedc:	4680      	mov	r8, r0
 800fede:	b158      	cbz	r0, 800fef8 <_dtoa_r+0xe8>
 800fee0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fee2:	2301      	movs	r3, #1
 800fee4:	6013      	str	r3, [r2, #0]
 800fee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fee8:	2b00      	cmp	r3, #0
 800feea:	f000 8551 	beq.w	8010990 <_dtoa_r+0xb80>
 800feee:	488b      	ldr	r0, [pc, #556]	; (801011c <_dtoa_r+0x30c>)
 800fef0:	6018      	str	r0, [r3, #0]
 800fef2:	1e43      	subs	r3, r0, #1
 800fef4:	9300      	str	r3, [sp, #0]
 800fef6:	e7dd      	b.n	800feb4 <_dtoa_r+0xa4>
 800fef8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fefc:	aa12      	add	r2, sp, #72	; 0x48
 800fefe:	a913      	add	r1, sp, #76	; 0x4c
 800ff00:	4620      	mov	r0, r4
 800ff02:	f001 fabf 	bl	8011484 <__d2b>
 800ff06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ff0a:	4683      	mov	fp, r0
 800ff0c:	2d00      	cmp	r5, #0
 800ff0e:	d07c      	beq.n	801000a <_dtoa_r+0x1fa>
 800ff10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff12:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ff16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff1a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ff1e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ff22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ff26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ff2a:	4b7d      	ldr	r3, [pc, #500]	; (8010120 <_dtoa_r+0x310>)
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	4630      	mov	r0, r6
 800ff30:	4639      	mov	r1, r7
 800ff32:	f7f0 f9b1 	bl	8000298 <__aeabi_dsub>
 800ff36:	a36e      	add	r3, pc, #440	; (adr r3, 80100f0 <_dtoa_r+0x2e0>)
 800ff38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3c:	f7f0 fb64 	bl	8000608 <__aeabi_dmul>
 800ff40:	a36d      	add	r3, pc, #436	; (adr r3, 80100f8 <_dtoa_r+0x2e8>)
 800ff42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff46:	f7f0 f9a9 	bl	800029c <__adddf3>
 800ff4a:	4606      	mov	r6, r0
 800ff4c:	4628      	mov	r0, r5
 800ff4e:	460f      	mov	r7, r1
 800ff50:	f7f0 faf0 	bl	8000534 <__aeabi_i2d>
 800ff54:	a36a      	add	r3, pc, #424	; (adr r3, 8010100 <_dtoa_r+0x2f0>)
 800ff56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5a:	f7f0 fb55 	bl	8000608 <__aeabi_dmul>
 800ff5e:	4602      	mov	r2, r0
 800ff60:	460b      	mov	r3, r1
 800ff62:	4630      	mov	r0, r6
 800ff64:	4639      	mov	r1, r7
 800ff66:	f7f0 f999 	bl	800029c <__adddf3>
 800ff6a:	4606      	mov	r6, r0
 800ff6c:	460f      	mov	r7, r1
 800ff6e:	f7f0 fdfb 	bl	8000b68 <__aeabi_d2iz>
 800ff72:	2200      	movs	r2, #0
 800ff74:	4682      	mov	sl, r0
 800ff76:	2300      	movs	r3, #0
 800ff78:	4630      	mov	r0, r6
 800ff7a:	4639      	mov	r1, r7
 800ff7c:	f7f0 fdb6 	bl	8000aec <__aeabi_dcmplt>
 800ff80:	b148      	cbz	r0, 800ff96 <_dtoa_r+0x186>
 800ff82:	4650      	mov	r0, sl
 800ff84:	f7f0 fad6 	bl	8000534 <__aeabi_i2d>
 800ff88:	4632      	mov	r2, r6
 800ff8a:	463b      	mov	r3, r7
 800ff8c:	f7f0 fda4 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff90:	b908      	cbnz	r0, 800ff96 <_dtoa_r+0x186>
 800ff92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ff96:	f1ba 0f16 	cmp.w	sl, #22
 800ff9a:	d854      	bhi.n	8010046 <_dtoa_r+0x236>
 800ff9c:	4b61      	ldr	r3, [pc, #388]	; (8010124 <_dtoa_r+0x314>)
 800ff9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ffa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ffaa:	f7f0 fd9f 	bl	8000aec <__aeabi_dcmplt>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	d04b      	beq.n	801004a <_dtoa_r+0x23a>
 800ffb2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	930e      	str	r3, [sp, #56]	; 0x38
 800ffba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ffbc:	1b5d      	subs	r5, r3, r5
 800ffbe:	1e6b      	subs	r3, r5, #1
 800ffc0:	9304      	str	r3, [sp, #16]
 800ffc2:	bf43      	ittte	mi
 800ffc4:	2300      	movmi	r3, #0
 800ffc6:	f1c5 0801 	rsbmi	r8, r5, #1
 800ffca:	9304      	strmi	r3, [sp, #16]
 800ffcc:	f04f 0800 	movpl.w	r8, #0
 800ffd0:	f1ba 0f00 	cmp.w	sl, #0
 800ffd4:	db3b      	blt.n	801004e <_dtoa_r+0x23e>
 800ffd6:	9b04      	ldr	r3, [sp, #16]
 800ffd8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ffdc:	4453      	add	r3, sl
 800ffde:	9304      	str	r3, [sp, #16]
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	9306      	str	r3, [sp, #24]
 800ffe4:	9b05      	ldr	r3, [sp, #20]
 800ffe6:	2b09      	cmp	r3, #9
 800ffe8:	d869      	bhi.n	80100be <_dtoa_r+0x2ae>
 800ffea:	2b05      	cmp	r3, #5
 800ffec:	bfc4      	itt	gt
 800ffee:	3b04      	subgt	r3, #4
 800fff0:	9305      	strgt	r3, [sp, #20]
 800fff2:	9b05      	ldr	r3, [sp, #20]
 800fff4:	f1a3 0302 	sub.w	r3, r3, #2
 800fff8:	bfcc      	ite	gt
 800fffa:	2500      	movgt	r5, #0
 800fffc:	2501      	movle	r5, #1
 800fffe:	2b03      	cmp	r3, #3
 8010000:	d869      	bhi.n	80100d6 <_dtoa_r+0x2c6>
 8010002:	e8df f003 	tbb	[pc, r3]
 8010006:	4e2c      	.short	0x4e2c
 8010008:	5a4c      	.short	0x5a4c
 801000a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801000e:	441d      	add	r5, r3
 8010010:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010014:	2b20      	cmp	r3, #32
 8010016:	bfc1      	itttt	gt
 8010018:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801001c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010020:	fa09 f303 	lslgt.w	r3, r9, r3
 8010024:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010028:	bfda      	itte	le
 801002a:	f1c3 0320 	rsble	r3, r3, #32
 801002e:	fa06 f003 	lslle.w	r0, r6, r3
 8010032:	4318      	orrgt	r0, r3
 8010034:	f7f0 fa6e 	bl	8000514 <__aeabi_ui2d>
 8010038:	2301      	movs	r3, #1
 801003a:	4606      	mov	r6, r0
 801003c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010040:	3d01      	subs	r5, #1
 8010042:	9310      	str	r3, [sp, #64]	; 0x40
 8010044:	e771      	b.n	800ff2a <_dtoa_r+0x11a>
 8010046:	2301      	movs	r3, #1
 8010048:	e7b6      	b.n	800ffb8 <_dtoa_r+0x1a8>
 801004a:	900e      	str	r0, [sp, #56]	; 0x38
 801004c:	e7b5      	b.n	800ffba <_dtoa_r+0x1aa>
 801004e:	f1ca 0300 	rsb	r3, sl, #0
 8010052:	9306      	str	r3, [sp, #24]
 8010054:	2300      	movs	r3, #0
 8010056:	eba8 080a 	sub.w	r8, r8, sl
 801005a:	930d      	str	r3, [sp, #52]	; 0x34
 801005c:	e7c2      	b.n	800ffe4 <_dtoa_r+0x1d4>
 801005e:	2300      	movs	r3, #0
 8010060:	9308      	str	r3, [sp, #32]
 8010062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010064:	2b00      	cmp	r3, #0
 8010066:	dc39      	bgt.n	80100dc <_dtoa_r+0x2cc>
 8010068:	f04f 0901 	mov.w	r9, #1
 801006c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010070:	464b      	mov	r3, r9
 8010072:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010076:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010078:	2200      	movs	r2, #0
 801007a:	6042      	str	r2, [r0, #4]
 801007c:	2204      	movs	r2, #4
 801007e:	f102 0614 	add.w	r6, r2, #20
 8010082:	429e      	cmp	r6, r3
 8010084:	6841      	ldr	r1, [r0, #4]
 8010086:	d92f      	bls.n	80100e8 <_dtoa_r+0x2d8>
 8010088:	4620      	mov	r0, r4
 801008a:	f000 fed9 	bl	8010e40 <_Balloc>
 801008e:	9000      	str	r0, [sp, #0]
 8010090:	2800      	cmp	r0, #0
 8010092:	d14b      	bne.n	801012c <_dtoa_r+0x31c>
 8010094:	4b24      	ldr	r3, [pc, #144]	; (8010128 <_dtoa_r+0x318>)
 8010096:	4602      	mov	r2, r0
 8010098:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801009c:	e6d1      	b.n	800fe42 <_dtoa_r+0x32>
 801009e:	2301      	movs	r3, #1
 80100a0:	e7de      	b.n	8010060 <_dtoa_r+0x250>
 80100a2:	2300      	movs	r3, #0
 80100a4:	9308      	str	r3, [sp, #32]
 80100a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100a8:	eb0a 0903 	add.w	r9, sl, r3
 80100ac:	f109 0301 	add.w	r3, r9, #1
 80100b0:	2b01      	cmp	r3, #1
 80100b2:	9301      	str	r3, [sp, #4]
 80100b4:	bfb8      	it	lt
 80100b6:	2301      	movlt	r3, #1
 80100b8:	e7dd      	b.n	8010076 <_dtoa_r+0x266>
 80100ba:	2301      	movs	r3, #1
 80100bc:	e7f2      	b.n	80100a4 <_dtoa_r+0x294>
 80100be:	2501      	movs	r5, #1
 80100c0:	2300      	movs	r3, #0
 80100c2:	9305      	str	r3, [sp, #20]
 80100c4:	9508      	str	r5, [sp, #32]
 80100c6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80100ca:	2200      	movs	r2, #0
 80100cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80100d0:	2312      	movs	r3, #18
 80100d2:	9209      	str	r2, [sp, #36]	; 0x24
 80100d4:	e7cf      	b.n	8010076 <_dtoa_r+0x266>
 80100d6:	2301      	movs	r3, #1
 80100d8:	9308      	str	r3, [sp, #32]
 80100da:	e7f4      	b.n	80100c6 <_dtoa_r+0x2b6>
 80100dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80100e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80100e4:	464b      	mov	r3, r9
 80100e6:	e7c6      	b.n	8010076 <_dtoa_r+0x266>
 80100e8:	3101      	adds	r1, #1
 80100ea:	6041      	str	r1, [r0, #4]
 80100ec:	0052      	lsls	r2, r2, #1
 80100ee:	e7c6      	b.n	801007e <_dtoa_r+0x26e>
 80100f0:	636f4361 	.word	0x636f4361
 80100f4:	3fd287a7 	.word	0x3fd287a7
 80100f8:	8b60c8b3 	.word	0x8b60c8b3
 80100fc:	3fc68a28 	.word	0x3fc68a28
 8010100:	509f79fb 	.word	0x509f79fb
 8010104:	3fd34413 	.word	0x3fd34413
 8010108:	08012481 	.word	0x08012481
 801010c:	08012498 	.word	0x08012498
 8010110:	7ff00000 	.word	0x7ff00000
 8010114:	0801247d 	.word	0x0801247d
 8010118:	08012474 	.word	0x08012474
 801011c:	08012451 	.word	0x08012451
 8010120:	3ff80000 	.word	0x3ff80000
 8010124:	080125f0 	.word	0x080125f0
 8010128:	080124f7 	.word	0x080124f7
 801012c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801012e:	9a00      	ldr	r2, [sp, #0]
 8010130:	601a      	str	r2, [r3, #0]
 8010132:	9b01      	ldr	r3, [sp, #4]
 8010134:	2b0e      	cmp	r3, #14
 8010136:	f200 80ad 	bhi.w	8010294 <_dtoa_r+0x484>
 801013a:	2d00      	cmp	r5, #0
 801013c:	f000 80aa 	beq.w	8010294 <_dtoa_r+0x484>
 8010140:	f1ba 0f00 	cmp.w	sl, #0
 8010144:	dd36      	ble.n	80101b4 <_dtoa_r+0x3a4>
 8010146:	4ac3      	ldr	r2, [pc, #780]	; (8010454 <_dtoa_r+0x644>)
 8010148:	f00a 030f 	and.w	r3, sl, #15
 801014c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010150:	ed93 7b00 	vldr	d7, [r3]
 8010154:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010158:	ea4f 172a 	mov.w	r7, sl, asr #4
 801015c:	eeb0 8a47 	vmov.f32	s16, s14
 8010160:	eef0 8a67 	vmov.f32	s17, s15
 8010164:	d016      	beq.n	8010194 <_dtoa_r+0x384>
 8010166:	4bbc      	ldr	r3, [pc, #752]	; (8010458 <_dtoa_r+0x648>)
 8010168:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801016c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010170:	f7f0 fb74 	bl	800085c <__aeabi_ddiv>
 8010174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010178:	f007 070f 	and.w	r7, r7, #15
 801017c:	2503      	movs	r5, #3
 801017e:	4eb6      	ldr	r6, [pc, #728]	; (8010458 <_dtoa_r+0x648>)
 8010180:	b957      	cbnz	r7, 8010198 <_dtoa_r+0x388>
 8010182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010186:	ec53 2b18 	vmov	r2, r3, d8
 801018a:	f7f0 fb67 	bl	800085c <__aeabi_ddiv>
 801018e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010192:	e029      	b.n	80101e8 <_dtoa_r+0x3d8>
 8010194:	2502      	movs	r5, #2
 8010196:	e7f2      	b.n	801017e <_dtoa_r+0x36e>
 8010198:	07f9      	lsls	r1, r7, #31
 801019a:	d508      	bpl.n	80101ae <_dtoa_r+0x39e>
 801019c:	ec51 0b18 	vmov	r0, r1, d8
 80101a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80101a4:	f7f0 fa30 	bl	8000608 <__aeabi_dmul>
 80101a8:	ec41 0b18 	vmov	d8, r0, r1
 80101ac:	3501      	adds	r5, #1
 80101ae:	107f      	asrs	r7, r7, #1
 80101b0:	3608      	adds	r6, #8
 80101b2:	e7e5      	b.n	8010180 <_dtoa_r+0x370>
 80101b4:	f000 80a6 	beq.w	8010304 <_dtoa_r+0x4f4>
 80101b8:	f1ca 0600 	rsb	r6, sl, #0
 80101bc:	4ba5      	ldr	r3, [pc, #660]	; (8010454 <_dtoa_r+0x644>)
 80101be:	4fa6      	ldr	r7, [pc, #664]	; (8010458 <_dtoa_r+0x648>)
 80101c0:	f006 020f 	and.w	r2, r6, #15
 80101c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80101d0:	f7f0 fa1a 	bl	8000608 <__aeabi_dmul>
 80101d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101d8:	1136      	asrs	r6, r6, #4
 80101da:	2300      	movs	r3, #0
 80101dc:	2502      	movs	r5, #2
 80101de:	2e00      	cmp	r6, #0
 80101e0:	f040 8085 	bne.w	80102ee <_dtoa_r+0x4de>
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d1d2      	bne.n	801018e <_dtoa_r+0x37e>
 80101e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	f000 808c 	beq.w	8010308 <_dtoa_r+0x4f8>
 80101f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80101f4:	4b99      	ldr	r3, [pc, #612]	; (801045c <_dtoa_r+0x64c>)
 80101f6:	2200      	movs	r2, #0
 80101f8:	4630      	mov	r0, r6
 80101fa:	4639      	mov	r1, r7
 80101fc:	f7f0 fc76 	bl	8000aec <__aeabi_dcmplt>
 8010200:	2800      	cmp	r0, #0
 8010202:	f000 8081 	beq.w	8010308 <_dtoa_r+0x4f8>
 8010206:	9b01      	ldr	r3, [sp, #4]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d07d      	beq.n	8010308 <_dtoa_r+0x4f8>
 801020c:	f1b9 0f00 	cmp.w	r9, #0
 8010210:	dd3c      	ble.n	801028c <_dtoa_r+0x47c>
 8010212:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8010216:	9307      	str	r3, [sp, #28]
 8010218:	2200      	movs	r2, #0
 801021a:	4b91      	ldr	r3, [pc, #580]	; (8010460 <_dtoa_r+0x650>)
 801021c:	4630      	mov	r0, r6
 801021e:	4639      	mov	r1, r7
 8010220:	f7f0 f9f2 	bl	8000608 <__aeabi_dmul>
 8010224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010228:	3501      	adds	r5, #1
 801022a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801022e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010232:	4628      	mov	r0, r5
 8010234:	f7f0 f97e 	bl	8000534 <__aeabi_i2d>
 8010238:	4632      	mov	r2, r6
 801023a:	463b      	mov	r3, r7
 801023c:	f7f0 f9e4 	bl	8000608 <__aeabi_dmul>
 8010240:	4b88      	ldr	r3, [pc, #544]	; (8010464 <_dtoa_r+0x654>)
 8010242:	2200      	movs	r2, #0
 8010244:	f7f0 f82a 	bl	800029c <__adddf3>
 8010248:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801024c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010250:	9303      	str	r3, [sp, #12]
 8010252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010254:	2b00      	cmp	r3, #0
 8010256:	d15c      	bne.n	8010312 <_dtoa_r+0x502>
 8010258:	4b83      	ldr	r3, [pc, #524]	; (8010468 <_dtoa_r+0x658>)
 801025a:	2200      	movs	r2, #0
 801025c:	4630      	mov	r0, r6
 801025e:	4639      	mov	r1, r7
 8010260:	f7f0 f81a 	bl	8000298 <__aeabi_dsub>
 8010264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010268:	4606      	mov	r6, r0
 801026a:	460f      	mov	r7, r1
 801026c:	f7f0 fc5c 	bl	8000b28 <__aeabi_dcmpgt>
 8010270:	2800      	cmp	r0, #0
 8010272:	f040 8296 	bne.w	80107a2 <_dtoa_r+0x992>
 8010276:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801027a:	4630      	mov	r0, r6
 801027c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010280:	4639      	mov	r1, r7
 8010282:	f7f0 fc33 	bl	8000aec <__aeabi_dcmplt>
 8010286:	2800      	cmp	r0, #0
 8010288:	f040 8288 	bne.w	801079c <_dtoa_r+0x98c>
 801028c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010290:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010294:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010296:	2b00      	cmp	r3, #0
 8010298:	f2c0 8158 	blt.w	801054c <_dtoa_r+0x73c>
 801029c:	f1ba 0f0e 	cmp.w	sl, #14
 80102a0:	f300 8154 	bgt.w	801054c <_dtoa_r+0x73c>
 80102a4:	4b6b      	ldr	r3, [pc, #428]	; (8010454 <_dtoa_r+0x644>)
 80102a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80102aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80102ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	f280 80e3 	bge.w	801047c <_dtoa_r+0x66c>
 80102b6:	9b01      	ldr	r3, [sp, #4]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	f300 80df 	bgt.w	801047c <_dtoa_r+0x66c>
 80102be:	f040 826d 	bne.w	801079c <_dtoa_r+0x98c>
 80102c2:	4b69      	ldr	r3, [pc, #420]	; (8010468 <_dtoa_r+0x658>)
 80102c4:	2200      	movs	r2, #0
 80102c6:	4640      	mov	r0, r8
 80102c8:	4649      	mov	r1, r9
 80102ca:	f7f0 f99d 	bl	8000608 <__aeabi_dmul>
 80102ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80102d2:	f7f0 fc1f 	bl	8000b14 <__aeabi_dcmpge>
 80102d6:	9e01      	ldr	r6, [sp, #4]
 80102d8:	4637      	mov	r7, r6
 80102da:	2800      	cmp	r0, #0
 80102dc:	f040 8243 	bne.w	8010766 <_dtoa_r+0x956>
 80102e0:	9d00      	ldr	r5, [sp, #0]
 80102e2:	2331      	movs	r3, #49	; 0x31
 80102e4:	f805 3b01 	strb.w	r3, [r5], #1
 80102e8:	f10a 0a01 	add.w	sl, sl, #1
 80102ec:	e23f      	b.n	801076e <_dtoa_r+0x95e>
 80102ee:	07f2      	lsls	r2, r6, #31
 80102f0:	d505      	bpl.n	80102fe <_dtoa_r+0x4ee>
 80102f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102f6:	f7f0 f987 	bl	8000608 <__aeabi_dmul>
 80102fa:	3501      	adds	r5, #1
 80102fc:	2301      	movs	r3, #1
 80102fe:	1076      	asrs	r6, r6, #1
 8010300:	3708      	adds	r7, #8
 8010302:	e76c      	b.n	80101de <_dtoa_r+0x3ce>
 8010304:	2502      	movs	r5, #2
 8010306:	e76f      	b.n	80101e8 <_dtoa_r+0x3d8>
 8010308:	9b01      	ldr	r3, [sp, #4]
 801030a:	f8cd a01c 	str.w	sl, [sp, #28]
 801030e:	930c      	str	r3, [sp, #48]	; 0x30
 8010310:	e78d      	b.n	801022e <_dtoa_r+0x41e>
 8010312:	9900      	ldr	r1, [sp, #0]
 8010314:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010316:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010318:	4b4e      	ldr	r3, [pc, #312]	; (8010454 <_dtoa_r+0x644>)
 801031a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801031e:	4401      	add	r1, r0
 8010320:	9102      	str	r1, [sp, #8]
 8010322:	9908      	ldr	r1, [sp, #32]
 8010324:	eeb0 8a47 	vmov.f32	s16, s14
 8010328:	eef0 8a67 	vmov.f32	s17, s15
 801032c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010330:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010334:	2900      	cmp	r1, #0
 8010336:	d045      	beq.n	80103c4 <_dtoa_r+0x5b4>
 8010338:	494c      	ldr	r1, [pc, #304]	; (801046c <_dtoa_r+0x65c>)
 801033a:	2000      	movs	r0, #0
 801033c:	f7f0 fa8e 	bl	800085c <__aeabi_ddiv>
 8010340:	ec53 2b18 	vmov	r2, r3, d8
 8010344:	f7ef ffa8 	bl	8000298 <__aeabi_dsub>
 8010348:	9d00      	ldr	r5, [sp, #0]
 801034a:	ec41 0b18 	vmov	d8, r0, r1
 801034e:	4639      	mov	r1, r7
 8010350:	4630      	mov	r0, r6
 8010352:	f7f0 fc09 	bl	8000b68 <__aeabi_d2iz>
 8010356:	900c      	str	r0, [sp, #48]	; 0x30
 8010358:	f7f0 f8ec 	bl	8000534 <__aeabi_i2d>
 801035c:	4602      	mov	r2, r0
 801035e:	460b      	mov	r3, r1
 8010360:	4630      	mov	r0, r6
 8010362:	4639      	mov	r1, r7
 8010364:	f7ef ff98 	bl	8000298 <__aeabi_dsub>
 8010368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801036a:	3330      	adds	r3, #48	; 0x30
 801036c:	f805 3b01 	strb.w	r3, [r5], #1
 8010370:	ec53 2b18 	vmov	r2, r3, d8
 8010374:	4606      	mov	r6, r0
 8010376:	460f      	mov	r7, r1
 8010378:	f7f0 fbb8 	bl	8000aec <__aeabi_dcmplt>
 801037c:	2800      	cmp	r0, #0
 801037e:	d165      	bne.n	801044c <_dtoa_r+0x63c>
 8010380:	4632      	mov	r2, r6
 8010382:	463b      	mov	r3, r7
 8010384:	4935      	ldr	r1, [pc, #212]	; (801045c <_dtoa_r+0x64c>)
 8010386:	2000      	movs	r0, #0
 8010388:	f7ef ff86 	bl	8000298 <__aeabi_dsub>
 801038c:	ec53 2b18 	vmov	r2, r3, d8
 8010390:	f7f0 fbac 	bl	8000aec <__aeabi_dcmplt>
 8010394:	2800      	cmp	r0, #0
 8010396:	f040 80b9 	bne.w	801050c <_dtoa_r+0x6fc>
 801039a:	9b02      	ldr	r3, [sp, #8]
 801039c:	429d      	cmp	r5, r3
 801039e:	f43f af75 	beq.w	801028c <_dtoa_r+0x47c>
 80103a2:	4b2f      	ldr	r3, [pc, #188]	; (8010460 <_dtoa_r+0x650>)
 80103a4:	ec51 0b18 	vmov	r0, r1, d8
 80103a8:	2200      	movs	r2, #0
 80103aa:	f7f0 f92d 	bl	8000608 <__aeabi_dmul>
 80103ae:	4b2c      	ldr	r3, [pc, #176]	; (8010460 <_dtoa_r+0x650>)
 80103b0:	ec41 0b18 	vmov	d8, r0, r1
 80103b4:	2200      	movs	r2, #0
 80103b6:	4630      	mov	r0, r6
 80103b8:	4639      	mov	r1, r7
 80103ba:	f7f0 f925 	bl	8000608 <__aeabi_dmul>
 80103be:	4606      	mov	r6, r0
 80103c0:	460f      	mov	r7, r1
 80103c2:	e7c4      	b.n	801034e <_dtoa_r+0x53e>
 80103c4:	ec51 0b17 	vmov	r0, r1, d7
 80103c8:	f7f0 f91e 	bl	8000608 <__aeabi_dmul>
 80103cc:	9b02      	ldr	r3, [sp, #8]
 80103ce:	9d00      	ldr	r5, [sp, #0]
 80103d0:	930c      	str	r3, [sp, #48]	; 0x30
 80103d2:	ec41 0b18 	vmov	d8, r0, r1
 80103d6:	4639      	mov	r1, r7
 80103d8:	4630      	mov	r0, r6
 80103da:	f7f0 fbc5 	bl	8000b68 <__aeabi_d2iz>
 80103de:	9011      	str	r0, [sp, #68]	; 0x44
 80103e0:	f7f0 f8a8 	bl	8000534 <__aeabi_i2d>
 80103e4:	4602      	mov	r2, r0
 80103e6:	460b      	mov	r3, r1
 80103e8:	4630      	mov	r0, r6
 80103ea:	4639      	mov	r1, r7
 80103ec:	f7ef ff54 	bl	8000298 <__aeabi_dsub>
 80103f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80103f2:	3330      	adds	r3, #48	; 0x30
 80103f4:	f805 3b01 	strb.w	r3, [r5], #1
 80103f8:	9b02      	ldr	r3, [sp, #8]
 80103fa:	429d      	cmp	r5, r3
 80103fc:	4606      	mov	r6, r0
 80103fe:	460f      	mov	r7, r1
 8010400:	f04f 0200 	mov.w	r2, #0
 8010404:	d134      	bne.n	8010470 <_dtoa_r+0x660>
 8010406:	4b19      	ldr	r3, [pc, #100]	; (801046c <_dtoa_r+0x65c>)
 8010408:	ec51 0b18 	vmov	r0, r1, d8
 801040c:	f7ef ff46 	bl	800029c <__adddf3>
 8010410:	4602      	mov	r2, r0
 8010412:	460b      	mov	r3, r1
 8010414:	4630      	mov	r0, r6
 8010416:	4639      	mov	r1, r7
 8010418:	f7f0 fb86 	bl	8000b28 <__aeabi_dcmpgt>
 801041c:	2800      	cmp	r0, #0
 801041e:	d175      	bne.n	801050c <_dtoa_r+0x6fc>
 8010420:	ec53 2b18 	vmov	r2, r3, d8
 8010424:	4911      	ldr	r1, [pc, #68]	; (801046c <_dtoa_r+0x65c>)
 8010426:	2000      	movs	r0, #0
 8010428:	f7ef ff36 	bl	8000298 <__aeabi_dsub>
 801042c:	4602      	mov	r2, r0
 801042e:	460b      	mov	r3, r1
 8010430:	4630      	mov	r0, r6
 8010432:	4639      	mov	r1, r7
 8010434:	f7f0 fb5a 	bl	8000aec <__aeabi_dcmplt>
 8010438:	2800      	cmp	r0, #0
 801043a:	f43f af27 	beq.w	801028c <_dtoa_r+0x47c>
 801043e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010440:	1e6b      	subs	r3, r5, #1
 8010442:	930c      	str	r3, [sp, #48]	; 0x30
 8010444:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010448:	2b30      	cmp	r3, #48	; 0x30
 801044a:	d0f8      	beq.n	801043e <_dtoa_r+0x62e>
 801044c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010450:	e04a      	b.n	80104e8 <_dtoa_r+0x6d8>
 8010452:	bf00      	nop
 8010454:	080125f0 	.word	0x080125f0
 8010458:	080125c8 	.word	0x080125c8
 801045c:	3ff00000 	.word	0x3ff00000
 8010460:	40240000 	.word	0x40240000
 8010464:	401c0000 	.word	0x401c0000
 8010468:	40140000 	.word	0x40140000
 801046c:	3fe00000 	.word	0x3fe00000
 8010470:	4baf      	ldr	r3, [pc, #700]	; (8010730 <_dtoa_r+0x920>)
 8010472:	f7f0 f8c9 	bl	8000608 <__aeabi_dmul>
 8010476:	4606      	mov	r6, r0
 8010478:	460f      	mov	r7, r1
 801047a:	e7ac      	b.n	80103d6 <_dtoa_r+0x5c6>
 801047c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010480:	9d00      	ldr	r5, [sp, #0]
 8010482:	4642      	mov	r2, r8
 8010484:	464b      	mov	r3, r9
 8010486:	4630      	mov	r0, r6
 8010488:	4639      	mov	r1, r7
 801048a:	f7f0 f9e7 	bl	800085c <__aeabi_ddiv>
 801048e:	f7f0 fb6b 	bl	8000b68 <__aeabi_d2iz>
 8010492:	9002      	str	r0, [sp, #8]
 8010494:	f7f0 f84e 	bl	8000534 <__aeabi_i2d>
 8010498:	4642      	mov	r2, r8
 801049a:	464b      	mov	r3, r9
 801049c:	f7f0 f8b4 	bl	8000608 <__aeabi_dmul>
 80104a0:	4602      	mov	r2, r0
 80104a2:	460b      	mov	r3, r1
 80104a4:	4630      	mov	r0, r6
 80104a6:	4639      	mov	r1, r7
 80104a8:	f7ef fef6 	bl	8000298 <__aeabi_dsub>
 80104ac:	9e02      	ldr	r6, [sp, #8]
 80104ae:	9f01      	ldr	r7, [sp, #4]
 80104b0:	3630      	adds	r6, #48	; 0x30
 80104b2:	f805 6b01 	strb.w	r6, [r5], #1
 80104b6:	9e00      	ldr	r6, [sp, #0]
 80104b8:	1bae      	subs	r6, r5, r6
 80104ba:	42b7      	cmp	r7, r6
 80104bc:	4602      	mov	r2, r0
 80104be:	460b      	mov	r3, r1
 80104c0:	d137      	bne.n	8010532 <_dtoa_r+0x722>
 80104c2:	f7ef feeb 	bl	800029c <__adddf3>
 80104c6:	4642      	mov	r2, r8
 80104c8:	464b      	mov	r3, r9
 80104ca:	4606      	mov	r6, r0
 80104cc:	460f      	mov	r7, r1
 80104ce:	f7f0 fb2b 	bl	8000b28 <__aeabi_dcmpgt>
 80104d2:	b9c8      	cbnz	r0, 8010508 <_dtoa_r+0x6f8>
 80104d4:	4642      	mov	r2, r8
 80104d6:	464b      	mov	r3, r9
 80104d8:	4630      	mov	r0, r6
 80104da:	4639      	mov	r1, r7
 80104dc:	f7f0 fafc 	bl	8000ad8 <__aeabi_dcmpeq>
 80104e0:	b110      	cbz	r0, 80104e8 <_dtoa_r+0x6d8>
 80104e2:	9b02      	ldr	r3, [sp, #8]
 80104e4:	07d9      	lsls	r1, r3, #31
 80104e6:	d40f      	bmi.n	8010508 <_dtoa_r+0x6f8>
 80104e8:	4620      	mov	r0, r4
 80104ea:	4659      	mov	r1, fp
 80104ec:	f000 fce8 	bl	8010ec0 <_Bfree>
 80104f0:	2300      	movs	r3, #0
 80104f2:	702b      	strb	r3, [r5, #0]
 80104f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104f6:	f10a 0001 	add.w	r0, sl, #1
 80104fa:	6018      	str	r0, [r3, #0]
 80104fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104fe:	2b00      	cmp	r3, #0
 8010500:	f43f acd8 	beq.w	800feb4 <_dtoa_r+0xa4>
 8010504:	601d      	str	r5, [r3, #0]
 8010506:	e4d5      	b.n	800feb4 <_dtoa_r+0xa4>
 8010508:	f8cd a01c 	str.w	sl, [sp, #28]
 801050c:	462b      	mov	r3, r5
 801050e:	461d      	mov	r5, r3
 8010510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010514:	2a39      	cmp	r2, #57	; 0x39
 8010516:	d108      	bne.n	801052a <_dtoa_r+0x71a>
 8010518:	9a00      	ldr	r2, [sp, #0]
 801051a:	429a      	cmp	r2, r3
 801051c:	d1f7      	bne.n	801050e <_dtoa_r+0x6fe>
 801051e:	9a07      	ldr	r2, [sp, #28]
 8010520:	9900      	ldr	r1, [sp, #0]
 8010522:	3201      	adds	r2, #1
 8010524:	9207      	str	r2, [sp, #28]
 8010526:	2230      	movs	r2, #48	; 0x30
 8010528:	700a      	strb	r2, [r1, #0]
 801052a:	781a      	ldrb	r2, [r3, #0]
 801052c:	3201      	adds	r2, #1
 801052e:	701a      	strb	r2, [r3, #0]
 8010530:	e78c      	b.n	801044c <_dtoa_r+0x63c>
 8010532:	4b7f      	ldr	r3, [pc, #508]	; (8010730 <_dtoa_r+0x920>)
 8010534:	2200      	movs	r2, #0
 8010536:	f7f0 f867 	bl	8000608 <__aeabi_dmul>
 801053a:	2200      	movs	r2, #0
 801053c:	2300      	movs	r3, #0
 801053e:	4606      	mov	r6, r0
 8010540:	460f      	mov	r7, r1
 8010542:	f7f0 fac9 	bl	8000ad8 <__aeabi_dcmpeq>
 8010546:	2800      	cmp	r0, #0
 8010548:	d09b      	beq.n	8010482 <_dtoa_r+0x672>
 801054a:	e7cd      	b.n	80104e8 <_dtoa_r+0x6d8>
 801054c:	9a08      	ldr	r2, [sp, #32]
 801054e:	2a00      	cmp	r2, #0
 8010550:	f000 80c4 	beq.w	80106dc <_dtoa_r+0x8cc>
 8010554:	9a05      	ldr	r2, [sp, #20]
 8010556:	2a01      	cmp	r2, #1
 8010558:	f300 80a8 	bgt.w	80106ac <_dtoa_r+0x89c>
 801055c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801055e:	2a00      	cmp	r2, #0
 8010560:	f000 80a0 	beq.w	80106a4 <_dtoa_r+0x894>
 8010564:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010568:	9e06      	ldr	r6, [sp, #24]
 801056a:	4645      	mov	r5, r8
 801056c:	9a04      	ldr	r2, [sp, #16]
 801056e:	2101      	movs	r1, #1
 8010570:	441a      	add	r2, r3
 8010572:	4620      	mov	r0, r4
 8010574:	4498      	add	r8, r3
 8010576:	9204      	str	r2, [sp, #16]
 8010578:	f000 fd5e 	bl	8011038 <__i2b>
 801057c:	4607      	mov	r7, r0
 801057e:	2d00      	cmp	r5, #0
 8010580:	dd0b      	ble.n	801059a <_dtoa_r+0x78a>
 8010582:	9b04      	ldr	r3, [sp, #16]
 8010584:	2b00      	cmp	r3, #0
 8010586:	dd08      	ble.n	801059a <_dtoa_r+0x78a>
 8010588:	42ab      	cmp	r3, r5
 801058a:	9a04      	ldr	r2, [sp, #16]
 801058c:	bfa8      	it	ge
 801058e:	462b      	movge	r3, r5
 8010590:	eba8 0803 	sub.w	r8, r8, r3
 8010594:	1aed      	subs	r5, r5, r3
 8010596:	1ad3      	subs	r3, r2, r3
 8010598:	9304      	str	r3, [sp, #16]
 801059a:	9b06      	ldr	r3, [sp, #24]
 801059c:	b1fb      	cbz	r3, 80105de <_dtoa_r+0x7ce>
 801059e:	9b08      	ldr	r3, [sp, #32]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	f000 809f 	beq.w	80106e4 <_dtoa_r+0x8d4>
 80105a6:	2e00      	cmp	r6, #0
 80105a8:	dd11      	ble.n	80105ce <_dtoa_r+0x7be>
 80105aa:	4639      	mov	r1, r7
 80105ac:	4632      	mov	r2, r6
 80105ae:	4620      	mov	r0, r4
 80105b0:	f000 fdfe 	bl	80111b0 <__pow5mult>
 80105b4:	465a      	mov	r2, fp
 80105b6:	4601      	mov	r1, r0
 80105b8:	4607      	mov	r7, r0
 80105ba:	4620      	mov	r0, r4
 80105bc:	f000 fd52 	bl	8011064 <__multiply>
 80105c0:	4659      	mov	r1, fp
 80105c2:	9007      	str	r0, [sp, #28]
 80105c4:	4620      	mov	r0, r4
 80105c6:	f000 fc7b 	bl	8010ec0 <_Bfree>
 80105ca:	9b07      	ldr	r3, [sp, #28]
 80105cc:	469b      	mov	fp, r3
 80105ce:	9b06      	ldr	r3, [sp, #24]
 80105d0:	1b9a      	subs	r2, r3, r6
 80105d2:	d004      	beq.n	80105de <_dtoa_r+0x7ce>
 80105d4:	4659      	mov	r1, fp
 80105d6:	4620      	mov	r0, r4
 80105d8:	f000 fdea 	bl	80111b0 <__pow5mult>
 80105dc:	4683      	mov	fp, r0
 80105de:	2101      	movs	r1, #1
 80105e0:	4620      	mov	r0, r4
 80105e2:	f000 fd29 	bl	8011038 <__i2b>
 80105e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	4606      	mov	r6, r0
 80105ec:	dd7c      	ble.n	80106e8 <_dtoa_r+0x8d8>
 80105ee:	461a      	mov	r2, r3
 80105f0:	4601      	mov	r1, r0
 80105f2:	4620      	mov	r0, r4
 80105f4:	f000 fddc 	bl	80111b0 <__pow5mult>
 80105f8:	9b05      	ldr	r3, [sp, #20]
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	4606      	mov	r6, r0
 80105fe:	dd76      	ble.n	80106ee <_dtoa_r+0x8de>
 8010600:	2300      	movs	r3, #0
 8010602:	9306      	str	r3, [sp, #24]
 8010604:	6933      	ldr	r3, [r6, #16]
 8010606:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801060a:	6918      	ldr	r0, [r3, #16]
 801060c:	f000 fcc4 	bl	8010f98 <__hi0bits>
 8010610:	f1c0 0020 	rsb	r0, r0, #32
 8010614:	9b04      	ldr	r3, [sp, #16]
 8010616:	4418      	add	r0, r3
 8010618:	f010 001f 	ands.w	r0, r0, #31
 801061c:	f000 8086 	beq.w	801072c <_dtoa_r+0x91c>
 8010620:	f1c0 0320 	rsb	r3, r0, #32
 8010624:	2b04      	cmp	r3, #4
 8010626:	dd7f      	ble.n	8010728 <_dtoa_r+0x918>
 8010628:	f1c0 001c 	rsb	r0, r0, #28
 801062c:	9b04      	ldr	r3, [sp, #16]
 801062e:	4403      	add	r3, r0
 8010630:	4480      	add	r8, r0
 8010632:	4405      	add	r5, r0
 8010634:	9304      	str	r3, [sp, #16]
 8010636:	f1b8 0f00 	cmp.w	r8, #0
 801063a:	dd05      	ble.n	8010648 <_dtoa_r+0x838>
 801063c:	4659      	mov	r1, fp
 801063e:	4642      	mov	r2, r8
 8010640:	4620      	mov	r0, r4
 8010642:	f000 fe0f 	bl	8011264 <__lshift>
 8010646:	4683      	mov	fp, r0
 8010648:	9b04      	ldr	r3, [sp, #16]
 801064a:	2b00      	cmp	r3, #0
 801064c:	dd05      	ble.n	801065a <_dtoa_r+0x84a>
 801064e:	4631      	mov	r1, r6
 8010650:	461a      	mov	r2, r3
 8010652:	4620      	mov	r0, r4
 8010654:	f000 fe06 	bl	8011264 <__lshift>
 8010658:	4606      	mov	r6, r0
 801065a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801065c:	2b00      	cmp	r3, #0
 801065e:	d069      	beq.n	8010734 <_dtoa_r+0x924>
 8010660:	4631      	mov	r1, r6
 8010662:	4658      	mov	r0, fp
 8010664:	f000 fe6a 	bl	801133c <__mcmp>
 8010668:	2800      	cmp	r0, #0
 801066a:	da63      	bge.n	8010734 <_dtoa_r+0x924>
 801066c:	2300      	movs	r3, #0
 801066e:	4659      	mov	r1, fp
 8010670:	220a      	movs	r2, #10
 8010672:	4620      	mov	r0, r4
 8010674:	f000 fc46 	bl	8010f04 <__multadd>
 8010678:	9b08      	ldr	r3, [sp, #32]
 801067a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801067e:	4683      	mov	fp, r0
 8010680:	2b00      	cmp	r3, #0
 8010682:	f000 818f 	beq.w	80109a4 <_dtoa_r+0xb94>
 8010686:	4639      	mov	r1, r7
 8010688:	2300      	movs	r3, #0
 801068a:	220a      	movs	r2, #10
 801068c:	4620      	mov	r0, r4
 801068e:	f000 fc39 	bl	8010f04 <__multadd>
 8010692:	f1b9 0f00 	cmp.w	r9, #0
 8010696:	4607      	mov	r7, r0
 8010698:	f300 808e 	bgt.w	80107b8 <_dtoa_r+0x9a8>
 801069c:	9b05      	ldr	r3, [sp, #20]
 801069e:	2b02      	cmp	r3, #2
 80106a0:	dc50      	bgt.n	8010744 <_dtoa_r+0x934>
 80106a2:	e089      	b.n	80107b8 <_dtoa_r+0x9a8>
 80106a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80106a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80106aa:	e75d      	b.n	8010568 <_dtoa_r+0x758>
 80106ac:	9b01      	ldr	r3, [sp, #4]
 80106ae:	1e5e      	subs	r6, r3, #1
 80106b0:	9b06      	ldr	r3, [sp, #24]
 80106b2:	42b3      	cmp	r3, r6
 80106b4:	bfbf      	itttt	lt
 80106b6:	9b06      	ldrlt	r3, [sp, #24]
 80106b8:	9606      	strlt	r6, [sp, #24]
 80106ba:	1af2      	sublt	r2, r6, r3
 80106bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80106be:	bfb6      	itet	lt
 80106c0:	189b      	addlt	r3, r3, r2
 80106c2:	1b9e      	subge	r6, r3, r6
 80106c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80106c6:	9b01      	ldr	r3, [sp, #4]
 80106c8:	bfb8      	it	lt
 80106ca:	2600      	movlt	r6, #0
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	bfb5      	itete	lt
 80106d0:	eba8 0503 	sublt.w	r5, r8, r3
 80106d4:	9b01      	ldrge	r3, [sp, #4]
 80106d6:	2300      	movlt	r3, #0
 80106d8:	4645      	movge	r5, r8
 80106da:	e747      	b.n	801056c <_dtoa_r+0x75c>
 80106dc:	9e06      	ldr	r6, [sp, #24]
 80106de:	9f08      	ldr	r7, [sp, #32]
 80106e0:	4645      	mov	r5, r8
 80106e2:	e74c      	b.n	801057e <_dtoa_r+0x76e>
 80106e4:	9a06      	ldr	r2, [sp, #24]
 80106e6:	e775      	b.n	80105d4 <_dtoa_r+0x7c4>
 80106e8:	9b05      	ldr	r3, [sp, #20]
 80106ea:	2b01      	cmp	r3, #1
 80106ec:	dc18      	bgt.n	8010720 <_dtoa_r+0x910>
 80106ee:	9b02      	ldr	r3, [sp, #8]
 80106f0:	b9b3      	cbnz	r3, 8010720 <_dtoa_r+0x910>
 80106f2:	9b03      	ldr	r3, [sp, #12]
 80106f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80106f8:	b9a3      	cbnz	r3, 8010724 <_dtoa_r+0x914>
 80106fa:	9b03      	ldr	r3, [sp, #12]
 80106fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010700:	0d1b      	lsrs	r3, r3, #20
 8010702:	051b      	lsls	r3, r3, #20
 8010704:	b12b      	cbz	r3, 8010712 <_dtoa_r+0x902>
 8010706:	9b04      	ldr	r3, [sp, #16]
 8010708:	3301      	adds	r3, #1
 801070a:	9304      	str	r3, [sp, #16]
 801070c:	f108 0801 	add.w	r8, r8, #1
 8010710:	2301      	movs	r3, #1
 8010712:	9306      	str	r3, [sp, #24]
 8010714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010716:	2b00      	cmp	r3, #0
 8010718:	f47f af74 	bne.w	8010604 <_dtoa_r+0x7f4>
 801071c:	2001      	movs	r0, #1
 801071e:	e779      	b.n	8010614 <_dtoa_r+0x804>
 8010720:	2300      	movs	r3, #0
 8010722:	e7f6      	b.n	8010712 <_dtoa_r+0x902>
 8010724:	9b02      	ldr	r3, [sp, #8]
 8010726:	e7f4      	b.n	8010712 <_dtoa_r+0x902>
 8010728:	d085      	beq.n	8010636 <_dtoa_r+0x826>
 801072a:	4618      	mov	r0, r3
 801072c:	301c      	adds	r0, #28
 801072e:	e77d      	b.n	801062c <_dtoa_r+0x81c>
 8010730:	40240000 	.word	0x40240000
 8010734:	9b01      	ldr	r3, [sp, #4]
 8010736:	2b00      	cmp	r3, #0
 8010738:	dc38      	bgt.n	80107ac <_dtoa_r+0x99c>
 801073a:	9b05      	ldr	r3, [sp, #20]
 801073c:	2b02      	cmp	r3, #2
 801073e:	dd35      	ble.n	80107ac <_dtoa_r+0x99c>
 8010740:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010744:	f1b9 0f00 	cmp.w	r9, #0
 8010748:	d10d      	bne.n	8010766 <_dtoa_r+0x956>
 801074a:	4631      	mov	r1, r6
 801074c:	464b      	mov	r3, r9
 801074e:	2205      	movs	r2, #5
 8010750:	4620      	mov	r0, r4
 8010752:	f000 fbd7 	bl	8010f04 <__multadd>
 8010756:	4601      	mov	r1, r0
 8010758:	4606      	mov	r6, r0
 801075a:	4658      	mov	r0, fp
 801075c:	f000 fdee 	bl	801133c <__mcmp>
 8010760:	2800      	cmp	r0, #0
 8010762:	f73f adbd 	bgt.w	80102e0 <_dtoa_r+0x4d0>
 8010766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010768:	9d00      	ldr	r5, [sp, #0]
 801076a:	ea6f 0a03 	mvn.w	sl, r3
 801076e:	f04f 0800 	mov.w	r8, #0
 8010772:	4631      	mov	r1, r6
 8010774:	4620      	mov	r0, r4
 8010776:	f000 fba3 	bl	8010ec0 <_Bfree>
 801077a:	2f00      	cmp	r7, #0
 801077c:	f43f aeb4 	beq.w	80104e8 <_dtoa_r+0x6d8>
 8010780:	f1b8 0f00 	cmp.w	r8, #0
 8010784:	d005      	beq.n	8010792 <_dtoa_r+0x982>
 8010786:	45b8      	cmp	r8, r7
 8010788:	d003      	beq.n	8010792 <_dtoa_r+0x982>
 801078a:	4641      	mov	r1, r8
 801078c:	4620      	mov	r0, r4
 801078e:	f000 fb97 	bl	8010ec0 <_Bfree>
 8010792:	4639      	mov	r1, r7
 8010794:	4620      	mov	r0, r4
 8010796:	f000 fb93 	bl	8010ec0 <_Bfree>
 801079a:	e6a5      	b.n	80104e8 <_dtoa_r+0x6d8>
 801079c:	2600      	movs	r6, #0
 801079e:	4637      	mov	r7, r6
 80107a0:	e7e1      	b.n	8010766 <_dtoa_r+0x956>
 80107a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80107a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80107a8:	4637      	mov	r7, r6
 80107aa:	e599      	b.n	80102e0 <_dtoa_r+0x4d0>
 80107ac:	9b08      	ldr	r3, [sp, #32]
 80107ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	f000 80fd 	beq.w	80109b2 <_dtoa_r+0xba2>
 80107b8:	2d00      	cmp	r5, #0
 80107ba:	dd05      	ble.n	80107c8 <_dtoa_r+0x9b8>
 80107bc:	4639      	mov	r1, r7
 80107be:	462a      	mov	r2, r5
 80107c0:	4620      	mov	r0, r4
 80107c2:	f000 fd4f 	bl	8011264 <__lshift>
 80107c6:	4607      	mov	r7, r0
 80107c8:	9b06      	ldr	r3, [sp, #24]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d05c      	beq.n	8010888 <_dtoa_r+0xa78>
 80107ce:	6879      	ldr	r1, [r7, #4]
 80107d0:	4620      	mov	r0, r4
 80107d2:	f000 fb35 	bl	8010e40 <_Balloc>
 80107d6:	4605      	mov	r5, r0
 80107d8:	b928      	cbnz	r0, 80107e6 <_dtoa_r+0x9d6>
 80107da:	4b80      	ldr	r3, [pc, #512]	; (80109dc <_dtoa_r+0xbcc>)
 80107dc:	4602      	mov	r2, r0
 80107de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80107e2:	f7ff bb2e 	b.w	800fe42 <_dtoa_r+0x32>
 80107e6:	693a      	ldr	r2, [r7, #16]
 80107e8:	3202      	adds	r2, #2
 80107ea:	0092      	lsls	r2, r2, #2
 80107ec:	f107 010c 	add.w	r1, r7, #12
 80107f0:	300c      	adds	r0, #12
 80107f2:	f7fe fc7d 	bl	800f0f0 <memcpy>
 80107f6:	2201      	movs	r2, #1
 80107f8:	4629      	mov	r1, r5
 80107fa:	4620      	mov	r0, r4
 80107fc:	f000 fd32 	bl	8011264 <__lshift>
 8010800:	9b00      	ldr	r3, [sp, #0]
 8010802:	3301      	adds	r3, #1
 8010804:	9301      	str	r3, [sp, #4]
 8010806:	9b00      	ldr	r3, [sp, #0]
 8010808:	444b      	add	r3, r9
 801080a:	9307      	str	r3, [sp, #28]
 801080c:	9b02      	ldr	r3, [sp, #8]
 801080e:	f003 0301 	and.w	r3, r3, #1
 8010812:	46b8      	mov	r8, r7
 8010814:	9306      	str	r3, [sp, #24]
 8010816:	4607      	mov	r7, r0
 8010818:	9b01      	ldr	r3, [sp, #4]
 801081a:	4631      	mov	r1, r6
 801081c:	3b01      	subs	r3, #1
 801081e:	4658      	mov	r0, fp
 8010820:	9302      	str	r3, [sp, #8]
 8010822:	f7ff fa67 	bl	800fcf4 <quorem>
 8010826:	4603      	mov	r3, r0
 8010828:	3330      	adds	r3, #48	; 0x30
 801082a:	9004      	str	r0, [sp, #16]
 801082c:	4641      	mov	r1, r8
 801082e:	4658      	mov	r0, fp
 8010830:	9308      	str	r3, [sp, #32]
 8010832:	f000 fd83 	bl	801133c <__mcmp>
 8010836:	463a      	mov	r2, r7
 8010838:	4681      	mov	r9, r0
 801083a:	4631      	mov	r1, r6
 801083c:	4620      	mov	r0, r4
 801083e:	f000 fd99 	bl	8011374 <__mdiff>
 8010842:	68c2      	ldr	r2, [r0, #12]
 8010844:	9b08      	ldr	r3, [sp, #32]
 8010846:	4605      	mov	r5, r0
 8010848:	bb02      	cbnz	r2, 801088c <_dtoa_r+0xa7c>
 801084a:	4601      	mov	r1, r0
 801084c:	4658      	mov	r0, fp
 801084e:	f000 fd75 	bl	801133c <__mcmp>
 8010852:	9b08      	ldr	r3, [sp, #32]
 8010854:	4602      	mov	r2, r0
 8010856:	4629      	mov	r1, r5
 8010858:	4620      	mov	r0, r4
 801085a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801085e:	f000 fb2f 	bl	8010ec0 <_Bfree>
 8010862:	9b05      	ldr	r3, [sp, #20]
 8010864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010866:	9d01      	ldr	r5, [sp, #4]
 8010868:	ea43 0102 	orr.w	r1, r3, r2
 801086c:	9b06      	ldr	r3, [sp, #24]
 801086e:	430b      	orrs	r3, r1
 8010870:	9b08      	ldr	r3, [sp, #32]
 8010872:	d10d      	bne.n	8010890 <_dtoa_r+0xa80>
 8010874:	2b39      	cmp	r3, #57	; 0x39
 8010876:	d029      	beq.n	80108cc <_dtoa_r+0xabc>
 8010878:	f1b9 0f00 	cmp.w	r9, #0
 801087c:	dd01      	ble.n	8010882 <_dtoa_r+0xa72>
 801087e:	9b04      	ldr	r3, [sp, #16]
 8010880:	3331      	adds	r3, #49	; 0x31
 8010882:	9a02      	ldr	r2, [sp, #8]
 8010884:	7013      	strb	r3, [r2, #0]
 8010886:	e774      	b.n	8010772 <_dtoa_r+0x962>
 8010888:	4638      	mov	r0, r7
 801088a:	e7b9      	b.n	8010800 <_dtoa_r+0x9f0>
 801088c:	2201      	movs	r2, #1
 801088e:	e7e2      	b.n	8010856 <_dtoa_r+0xa46>
 8010890:	f1b9 0f00 	cmp.w	r9, #0
 8010894:	db06      	blt.n	80108a4 <_dtoa_r+0xa94>
 8010896:	9905      	ldr	r1, [sp, #20]
 8010898:	ea41 0909 	orr.w	r9, r1, r9
 801089c:	9906      	ldr	r1, [sp, #24]
 801089e:	ea59 0101 	orrs.w	r1, r9, r1
 80108a2:	d120      	bne.n	80108e6 <_dtoa_r+0xad6>
 80108a4:	2a00      	cmp	r2, #0
 80108a6:	ddec      	ble.n	8010882 <_dtoa_r+0xa72>
 80108a8:	4659      	mov	r1, fp
 80108aa:	2201      	movs	r2, #1
 80108ac:	4620      	mov	r0, r4
 80108ae:	9301      	str	r3, [sp, #4]
 80108b0:	f000 fcd8 	bl	8011264 <__lshift>
 80108b4:	4631      	mov	r1, r6
 80108b6:	4683      	mov	fp, r0
 80108b8:	f000 fd40 	bl	801133c <__mcmp>
 80108bc:	2800      	cmp	r0, #0
 80108be:	9b01      	ldr	r3, [sp, #4]
 80108c0:	dc02      	bgt.n	80108c8 <_dtoa_r+0xab8>
 80108c2:	d1de      	bne.n	8010882 <_dtoa_r+0xa72>
 80108c4:	07da      	lsls	r2, r3, #31
 80108c6:	d5dc      	bpl.n	8010882 <_dtoa_r+0xa72>
 80108c8:	2b39      	cmp	r3, #57	; 0x39
 80108ca:	d1d8      	bne.n	801087e <_dtoa_r+0xa6e>
 80108cc:	9a02      	ldr	r2, [sp, #8]
 80108ce:	2339      	movs	r3, #57	; 0x39
 80108d0:	7013      	strb	r3, [r2, #0]
 80108d2:	462b      	mov	r3, r5
 80108d4:	461d      	mov	r5, r3
 80108d6:	3b01      	subs	r3, #1
 80108d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80108dc:	2a39      	cmp	r2, #57	; 0x39
 80108de:	d050      	beq.n	8010982 <_dtoa_r+0xb72>
 80108e0:	3201      	adds	r2, #1
 80108e2:	701a      	strb	r2, [r3, #0]
 80108e4:	e745      	b.n	8010772 <_dtoa_r+0x962>
 80108e6:	2a00      	cmp	r2, #0
 80108e8:	dd03      	ble.n	80108f2 <_dtoa_r+0xae2>
 80108ea:	2b39      	cmp	r3, #57	; 0x39
 80108ec:	d0ee      	beq.n	80108cc <_dtoa_r+0xabc>
 80108ee:	3301      	adds	r3, #1
 80108f0:	e7c7      	b.n	8010882 <_dtoa_r+0xa72>
 80108f2:	9a01      	ldr	r2, [sp, #4]
 80108f4:	9907      	ldr	r1, [sp, #28]
 80108f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80108fa:	428a      	cmp	r2, r1
 80108fc:	d02a      	beq.n	8010954 <_dtoa_r+0xb44>
 80108fe:	4659      	mov	r1, fp
 8010900:	2300      	movs	r3, #0
 8010902:	220a      	movs	r2, #10
 8010904:	4620      	mov	r0, r4
 8010906:	f000 fafd 	bl	8010f04 <__multadd>
 801090a:	45b8      	cmp	r8, r7
 801090c:	4683      	mov	fp, r0
 801090e:	f04f 0300 	mov.w	r3, #0
 8010912:	f04f 020a 	mov.w	r2, #10
 8010916:	4641      	mov	r1, r8
 8010918:	4620      	mov	r0, r4
 801091a:	d107      	bne.n	801092c <_dtoa_r+0xb1c>
 801091c:	f000 faf2 	bl	8010f04 <__multadd>
 8010920:	4680      	mov	r8, r0
 8010922:	4607      	mov	r7, r0
 8010924:	9b01      	ldr	r3, [sp, #4]
 8010926:	3301      	adds	r3, #1
 8010928:	9301      	str	r3, [sp, #4]
 801092a:	e775      	b.n	8010818 <_dtoa_r+0xa08>
 801092c:	f000 faea 	bl	8010f04 <__multadd>
 8010930:	4639      	mov	r1, r7
 8010932:	4680      	mov	r8, r0
 8010934:	2300      	movs	r3, #0
 8010936:	220a      	movs	r2, #10
 8010938:	4620      	mov	r0, r4
 801093a:	f000 fae3 	bl	8010f04 <__multadd>
 801093e:	4607      	mov	r7, r0
 8010940:	e7f0      	b.n	8010924 <_dtoa_r+0xb14>
 8010942:	f1b9 0f00 	cmp.w	r9, #0
 8010946:	9a00      	ldr	r2, [sp, #0]
 8010948:	bfcc      	ite	gt
 801094a:	464d      	movgt	r5, r9
 801094c:	2501      	movle	r5, #1
 801094e:	4415      	add	r5, r2
 8010950:	f04f 0800 	mov.w	r8, #0
 8010954:	4659      	mov	r1, fp
 8010956:	2201      	movs	r2, #1
 8010958:	4620      	mov	r0, r4
 801095a:	9301      	str	r3, [sp, #4]
 801095c:	f000 fc82 	bl	8011264 <__lshift>
 8010960:	4631      	mov	r1, r6
 8010962:	4683      	mov	fp, r0
 8010964:	f000 fcea 	bl	801133c <__mcmp>
 8010968:	2800      	cmp	r0, #0
 801096a:	dcb2      	bgt.n	80108d2 <_dtoa_r+0xac2>
 801096c:	d102      	bne.n	8010974 <_dtoa_r+0xb64>
 801096e:	9b01      	ldr	r3, [sp, #4]
 8010970:	07db      	lsls	r3, r3, #31
 8010972:	d4ae      	bmi.n	80108d2 <_dtoa_r+0xac2>
 8010974:	462b      	mov	r3, r5
 8010976:	461d      	mov	r5, r3
 8010978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801097c:	2a30      	cmp	r2, #48	; 0x30
 801097e:	d0fa      	beq.n	8010976 <_dtoa_r+0xb66>
 8010980:	e6f7      	b.n	8010772 <_dtoa_r+0x962>
 8010982:	9a00      	ldr	r2, [sp, #0]
 8010984:	429a      	cmp	r2, r3
 8010986:	d1a5      	bne.n	80108d4 <_dtoa_r+0xac4>
 8010988:	f10a 0a01 	add.w	sl, sl, #1
 801098c:	2331      	movs	r3, #49	; 0x31
 801098e:	e779      	b.n	8010884 <_dtoa_r+0xa74>
 8010990:	4b13      	ldr	r3, [pc, #76]	; (80109e0 <_dtoa_r+0xbd0>)
 8010992:	f7ff baaf 	b.w	800fef4 <_dtoa_r+0xe4>
 8010996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010998:	2b00      	cmp	r3, #0
 801099a:	f47f aa86 	bne.w	800feaa <_dtoa_r+0x9a>
 801099e:	4b11      	ldr	r3, [pc, #68]	; (80109e4 <_dtoa_r+0xbd4>)
 80109a0:	f7ff baa8 	b.w	800fef4 <_dtoa_r+0xe4>
 80109a4:	f1b9 0f00 	cmp.w	r9, #0
 80109a8:	dc03      	bgt.n	80109b2 <_dtoa_r+0xba2>
 80109aa:	9b05      	ldr	r3, [sp, #20]
 80109ac:	2b02      	cmp	r3, #2
 80109ae:	f73f aec9 	bgt.w	8010744 <_dtoa_r+0x934>
 80109b2:	9d00      	ldr	r5, [sp, #0]
 80109b4:	4631      	mov	r1, r6
 80109b6:	4658      	mov	r0, fp
 80109b8:	f7ff f99c 	bl	800fcf4 <quorem>
 80109bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80109c0:	f805 3b01 	strb.w	r3, [r5], #1
 80109c4:	9a00      	ldr	r2, [sp, #0]
 80109c6:	1aaa      	subs	r2, r5, r2
 80109c8:	4591      	cmp	r9, r2
 80109ca:	ddba      	ble.n	8010942 <_dtoa_r+0xb32>
 80109cc:	4659      	mov	r1, fp
 80109ce:	2300      	movs	r3, #0
 80109d0:	220a      	movs	r2, #10
 80109d2:	4620      	mov	r0, r4
 80109d4:	f000 fa96 	bl	8010f04 <__multadd>
 80109d8:	4683      	mov	fp, r0
 80109da:	e7eb      	b.n	80109b4 <_dtoa_r+0xba4>
 80109dc:	080124f7 	.word	0x080124f7
 80109e0:	08012450 	.word	0x08012450
 80109e4:	08012474 	.word	0x08012474

080109e8 <__sflush_r>:
 80109e8:	898a      	ldrh	r2, [r1, #12]
 80109ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109ee:	4605      	mov	r5, r0
 80109f0:	0710      	lsls	r0, r2, #28
 80109f2:	460c      	mov	r4, r1
 80109f4:	d458      	bmi.n	8010aa8 <__sflush_r+0xc0>
 80109f6:	684b      	ldr	r3, [r1, #4]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	dc05      	bgt.n	8010a08 <__sflush_r+0x20>
 80109fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	dc02      	bgt.n	8010a08 <__sflush_r+0x20>
 8010a02:	2000      	movs	r0, #0
 8010a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a0a:	2e00      	cmp	r6, #0
 8010a0c:	d0f9      	beq.n	8010a02 <__sflush_r+0x1a>
 8010a0e:	2300      	movs	r3, #0
 8010a10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010a14:	682f      	ldr	r7, [r5, #0]
 8010a16:	602b      	str	r3, [r5, #0]
 8010a18:	d032      	beq.n	8010a80 <__sflush_r+0x98>
 8010a1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010a1c:	89a3      	ldrh	r3, [r4, #12]
 8010a1e:	075a      	lsls	r2, r3, #29
 8010a20:	d505      	bpl.n	8010a2e <__sflush_r+0x46>
 8010a22:	6863      	ldr	r3, [r4, #4]
 8010a24:	1ac0      	subs	r0, r0, r3
 8010a26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a28:	b10b      	cbz	r3, 8010a2e <__sflush_r+0x46>
 8010a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a2c:	1ac0      	subs	r0, r0, r3
 8010a2e:	2300      	movs	r3, #0
 8010a30:	4602      	mov	r2, r0
 8010a32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a34:	6a21      	ldr	r1, [r4, #32]
 8010a36:	4628      	mov	r0, r5
 8010a38:	47b0      	blx	r6
 8010a3a:	1c43      	adds	r3, r0, #1
 8010a3c:	89a3      	ldrh	r3, [r4, #12]
 8010a3e:	d106      	bne.n	8010a4e <__sflush_r+0x66>
 8010a40:	6829      	ldr	r1, [r5, #0]
 8010a42:	291d      	cmp	r1, #29
 8010a44:	d82c      	bhi.n	8010aa0 <__sflush_r+0xb8>
 8010a46:	4a2a      	ldr	r2, [pc, #168]	; (8010af0 <__sflush_r+0x108>)
 8010a48:	40ca      	lsrs	r2, r1
 8010a4a:	07d6      	lsls	r6, r2, #31
 8010a4c:	d528      	bpl.n	8010aa0 <__sflush_r+0xb8>
 8010a4e:	2200      	movs	r2, #0
 8010a50:	6062      	str	r2, [r4, #4]
 8010a52:	04d9      	lsls	r1, r3, #19
 8010a54:	6922      	ldr	r2, [r4, #16]
 8010a56:	6022      	str	r2, [r4, #0]
 8010a58:	d504      	bpl.n	8010a64 <__sflush_r+0x7c>
 8010a5a:	1c42      	adds	r2, r0, #1
 8010a5c:	d101      	bne.n	8010a62 <__sflush_r+0x7a>
 8010a5e:	682b      	ldr	r3, [r5, #0]
 8010a60:	b903      	cbnz	r3, 8010a64 <__sflush_r+0x7c>
 8010a62:	6560      	str	r0, [r4, #84]	; 0x54
 8010a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a66:	602f      	str	r7, [r5, #0]
 8010a68:	2900      	cmp	r1, #0
 8010a6a:	d0ca      	beq.n	8010a02 <__sflush_r+0x1a>
 8010a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a70:	4299      	cmp	r1, r3
 8010a72:	d002      	beq.n	8010a7a <__sflush_r+0x92>
 8010a74:	4628      	mov	r0, r5
 8010a76:	f000 fd71 	bl	801155c <_free_r>
 8010a7a:	2000      	movs	r0, #0
 8010a7c:	6360      	str	r0, [r4, #52]	; 0x34
 8010a7e:	e7c1      	b.n	8010a04 <__sflush_r+0x1c>
 8010a80:	6a21      	ldr	r1, [r4, #32]
 8010a82:	2301      	movs	r3, #1
 8010a84:	4628      	mov	r0, r5
 8010a86:	47b0      	blx	r6
 8010a88:	1c41      	adds	r1, r0, #1
 8010a8a:	d1c7      	bne.n	8010a1c <__sflush_r+0x34>
 8010a8c:	682b      	ldr	r3, [r5, #0]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d0c4      	beq.n	8010a1c <__sflush_r+0x34>
 8010a92:	2b1d      	cmp	r3, #29
 8010a94:	d001      	beq.n	8010a9a <__sflush_r+0xb2>
 8010a96:	2b16      	cmp	r3, #22
 8010a98:	d101      	bne.n	8010a9e <__sflush_r+0xb6>
 8010a9a:	602f      	str	r7, [r5, #0]
 8010a9c:	e7b1      	b.n	8010a02 <__sflush_r+0x1a>
 8010a9e:	89a3      	ldrh	r3, [r4, #12]
 8010aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010aa4:	81a3      	strh	r3, [r4, #12]
 8010aa6:	e7ad      	b.n	8010a04 <__sflush_r+0x1c>
 8010aa8:	690f      	ldr	r7, [r1, #16]
 8010aaa:	2f00      	cmp	r7, #0
 8010aac:	d0a9      	beq.n	8010a02 <__sflush_r+0x1a>
 8010aae:	0793      	lsls	r3, r2, #30
 8010ab0:	680e      	ldr	r6, [r1, #0]
 8010ab2:	bf08      	it	eq
 8010ab4:	694b      	ldreq	r3, [r1, #20]
 8010ab6:	600f      	str	r7, [r1, #0]
 8010ab8:	bf18      	it	ne
 8010aba:	2300      	movne	r3, #0
 8010abc:	eba6 0807 	sub.w	r8, r6, r7
 8010ac0:	608b      	str	r3, [r1, #8]
 8010ac2:	f1b8 0f00 	cmp.w	r8, #0
 8010ac6:	dd9c      	ble.n	8010a02 <__sflush_r+0x1a>
 8010ac8:	6a21      	ldr	r1, [r4, #32]
 8010aca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010acc:	4643      	mov	r3, r8
 8010ace:	463a      	mov	r2, r7
 8010ad0:	4628      	mov	r0, r5
 8010ad2:	47b0      	blx	r6
 8010ad4:	2800      	cmp	r0, #0
 8010ad6:	dc06      	bgt.n	8010ae6 <__sflush_r+0xfe>
 8010ad8:	89a3      	ldrh	r3, [r4, #12]
 8010ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ade:	81a3      	strh	r3, [r4, #12]
 8010ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ae4:	e78e      	b.n	8010a04 <__sflush_r+0x1c>
 8010ae6:	4407      	add	r7, r0
 8010ae8:	eba8 0800 	sub.w	r8, r8, r0
 8010aec:	e7e9      	b.n	8010ac2 <__sflush_r+0xda>
 8010aee:	bf00      	nop
 8010af0:	20400001 	.word	0x20400001

08010af4 <_fflush_r>:
 8010af4:	b538      	push	{r3, r4, r5, lr}
 8010af6:	690b      	ldr	r3, [r1, #16]
 8010af8:	4605      	mov	r5, r0
 8010afa:	460c      	mov	r4, r1
 8010afc:	b913      	cbnz	r3, 8010b04 <_fflush_r+0x10>
 8010afe:	2500      	movs	r5, #0
 8010b00:	4628      	mov	r0, r5
 8010b02:	bd38      	pop	{r3, r4, r5, pc}
 8010b04:	b118      	cbz	r0, 8010b0e <_fflush_r+0x1a>
 8010b06:	6983      	ldr	r3, [r0, #24]
 8010b08:	b90b      	cbnz	r3, 8010b0e <_fflush_r+0x1a>
 8010b0a:	f000 f887 	bl	8010c1c <__sinit>
 8010b0e:	4b14      	ldr	r3, [pc, #80]	; (8010b60 <_fflush_r+0x6c>)
 8010b10:	429c      	cmp	r4, r3
 8010b12:	d11b      	bne.n	8010b4c <_fflush_r+0x58>
 8010b14:	686c      	ldr	r4, [r5, #4]
 8010b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d0ef      	beq.n	8010afe <_fflush_r+0xa>
 8010b1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010b20:	07d0      	lsls	r0, r2, #31
 8010b22:	d404      	bmi.n	8010b2e <_fflush_r+0x3a>
 8010b24:	0599      	lsls	r1, r3, #22
 8010b26:	d402      	bmi.n	8010b2e <_fflush_r+0x3a>
 8010b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b2a:	f000 f91a 	bl	8010d62 <__retarget_lock_acquire_recursive>
 8010b2e:	4628      	mov	r0, r5
 8010b30:	4621      	mov	r1, r4
 8010b32:	f7ff ff59 	bl	80109e8 <__sflush_r>
 8010b36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b38:	07da      	lsls	r2, r3, #31
 8010b3a:	4605      	mov	r5, r0
 8010b3c:	d4e0      	bmi.n	8010b00 <_fflush_r+0xc>
 8010b3e:	89a3      	ldrh	r3, [r4, #12]
 8010b40:	059b      	lsls	r3, r3, #22
 8010b42:	d4dd      	bmi.n	8010b00 <_fflush_r+0xc>
 8010b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b46:	f000 f90d 	bl	8010d64 <__retarget_lock_release_recursive>
 8010b4a:	e7d9      	b.n	8010b00 <_fflush_r+0xc>
 8010b4c:	4b05      	ldr	r3, [pc, #20]	; (8010b64 <_fflush_r+0x70>)
 8010b4e:	429c      	cmp	r4, r3
 8010b50:	d101      	bne.n	8010b56 <_fflush_r+0x62>
 8010b52:	68ac      	ldr	r4, [r5, #8]
 8010b54:	e7df      	b.n	8010b16 <_fflush_r+0x22>
 8010b56:	4b04      	ldr	r3, [pc, #16]	; (8010b68 <_fflush_r+0x74>)
 8010b58:	429c      	cmp	r4, r3
 8010b5a:	bf08      	it	eq
 8010b5c:	68ec      	ldreq	r4, [r5, #12]
 8010b5e:	e7da      	b.n	8010b16 <_fflush_r+0x22>
 8010b60:	08012528 	.word	0x08012528
 8010b64:	08012548 	.word	0x08012548
 8010b68:	08012508 	.word	0x08012508

08010b6c <std>:
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	b510      	push	{r4, lr}
 8010b70:	4604      	mov	r4, r0
 8010b72:	e9c0 3300 	strd	r3, r3, [r0]
 8010b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010b7a:	6083      	str	r3, [r0, #8]
 8010b7c:	8181      	strh	r1, [r0, #12]
 8010b7e:	6643      	str	r3, [r0, #100]	; 0x64
 8010b80:	81c2      	strh	r2, [r0, #14]
 8010b82:	6183      	str	r3, [r0, #24]
 8010b84:	4619      	mov	r1, r3
 8010b86:	2208      	movs	r2, #8
 8010b88:	305c      	adds	r0, #92	; 0x5c
 8010b8a:	f7fe fabf 	bl	800f10c <memset>
 8010b8e:	4b05      	ldr	r3, [pc, #20]	; (8010ba4 <std+0x38>)
 8010b90:	6263      	str	r3, [r4, #36]	; 0x24
 8010b92:	4b05      	ldr	r3, [pc, #20]	; (8010ba8 <std+0x3c>)
 8010b94:	62a3      	str	r3, [r4, #40]	; 0x28
 8010b96:	4b05      	ldr	r3, [pc, #20]	; (8010bac <std+0x40>)
 8010b98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010b9a:	4b05      	ldr	r3, [pc, #20]	; (8010bb0 <std+0x44>)
 8010b9c:	6224      	str	r4, [r4, #32]
 8010b9e:	6323      	str	r3, [r4, #48]	; 0x30
 8010ba0:	bd10      	pop	{r4, pc}
 8010ba2:	bf00      	nop
 8010ba4:	08011c3d 	.word	0x08011c3d
 8010ba8:	08011c5f 	.word	0x08011c5f
 8010bac:	08011c97 	.word	0x08011c97
 8010bb0:	08011cbb 	.word	0x08011cbb

08010bb4 <_cleanup_r>:
 8010bb4:	4901      	ldr	r1, [pc, #4]	; (8010bbc <_cleanup_r+0x8>)
 8010bb6:	f000 b8af 	b.w	8010d18 <_fwalk_reent>
 8010bba:	bf00      	nop
 8010bbc:	08010af5 	.word	0x08010af5

08010bc0 <__sfmoreglue>:
 8010bc0:	b570      	push	{r4, r5, r6, lr}
 8010bc2:	1e4a      	subs	r2, r1, #1
 8010bc4:	2568      	movs	r5, #104	; 0x68
 8010bc6:	4355      	muls	r5, r2
 8010bc8:	460e      	mov	r6, r1
 8010bca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010bce:	f000 fd15 	bl	80115fc <_malloc_r>
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	b140      	cbz	r0, 8010be8 <__sfmoreglue+0x28>
 8010bd6:	2100      	movs	r1, #0
 8010bd8:	e9c0 1600 	strd	r1, r6, [r0]
 8010bdc:	300c      	adds	r0, #12
 8010bde:	60a0      	str	r0, [r4, #8]
 8010be0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010be4:	f7fe fa92 	bl	800f10c <memset>
 8010be8:	4620      	mov	r0, r4
 8010bea:	bd70      	pop	{r4, r5, r6, pc}

08010bec <__sfp_lock_acquire>:
 8010bec:	4801      	ldr	r0, [pc, #4]	; (8010bf4 <__sfp_lock_acquire+0x8>)
 8010bee:	f000 b8b8 	b.w	8010d62 <__retarget_lock_acquire_recursive>
 8010bf2:	bf00      	nop
 8010bf4:	2000b958 	.word	0x2000b958

08010bf8 <__sfp_lock_release>:
 8010bf8:	4801      	ldr	r0, [pc, #4]	; (8010c00 <__sfp_lock_release+0x8>)
 8010bfa:	f000 b8b3 	b.w	8010d64 <__retarget_lock_release_recursive>
 8010bfe:	bf00      	nop
 8010c00:	2000b958 	.word	0x2000b958

08010c04 <__sinit_lock_acquire>:
 8010c04:	4801      	ldr	r0, [pc, #4]	; (8010c0c <__sinit_lock_acquire+0x8>)
 8010c06:	f000 b8ac 	b.w	8010d62 <__retarget_lock_acquire_recursive>
 8010c0a:	bf00      	nop
 8010c0c:	2000b953 	.word	0x2000b953

08010c10 <__sinit_lock_release>:
 8010c10:	4801      	ldr	r0, [pc, #4]	; (8010c18 <__sinit_lock_release+0x8>)
 8010c12:	f000 b8a7 	b.w	8010d64 <__retarget_lock_release_recursive>
 8010c16:	bf00      	nop
 8010c18:	2000b953 	.word	0x2000b953

08010c1c <__sinit>:
 8010c1c:	b510      	push	{r4, lr}
 8010c1e:	4604      	mov	r4, r0
 8010c20:	f7ff fff0 	bl	8010c04 <__sinit_lock_acquire>
 8010c24:	69a3      	ldr	r3, [r4, #24]
 8010c26:	b11b      	cbz	r3, 8010c30 <__sinit+0x14>
 8010c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c2c:	f7ff bff0 	b.w	8010c10 <__sinit_lock_release>
 8010c30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010c34:	6523      	str	r3, [r4, #80]	; 0x50
 8010c36:	4b13      	ldr	r3, [pc, #76]	; (8010c84 <__sinit+0x68>)
 8010c38:	4a13      	ldr	r2, [pc, #76]	; (8010c88 <__sinit+0x6c>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8010c3e:	42a3      	cmp	r3, r4
 8010c40:	bf04      	itt	eq
 8010c42:	2301      	moveq	r3, #1
 8010c44:	61a3      	streq	r3, [r4, #24]
 8010c46:	4620      	mov	r0, r4
 8010c48:	f000 f820 	bl	8010c8c <__sfp>
 8010c4c:	6060      	str	r0, [r4, #4]
 8010c4e:	4620      	mov	r0, r4
 8010c50:	f000 f81c 	bl	8010c8c <__sfp>
 8010c54:	60a0      	str	r0, [r4, #8]
 8010c56:	4620      	mov	r0, r4
 8010c58:	f000 f818 	bl	8010c8c <__sfp>
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	60e0      	str	r0, [r4, #12]
 8010c60:	2104      	movs	r1, #4
 8010c62:	6860      	ldr	r0, [r4, #4]
 8010c64:	f7ff ff82 	bl	8010b6c <std>
 8010c68:	68a0      	ldr	r0, [r4, #8]
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	2109      	movs	r1, #9
 8010c6e:	f7ff ff7d 	bl	8010b6c <std>
 8010c72:	68e0      	ldr	r0, [r4, #12]
 8010c74:	2202      	movs	r2, #2
 8010c76:	2112      	movs	r1, #18
 8010c78:	f7ff ff78 	bl	8010b6c <std>
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	61a3      	str	r3, [r4, #24]
 8010c80:	e7d2      	b.n	8010c28 <__sinit+0xc>
 8010c82:	bf00      	nop
 8010c84:	0801243c 	.word	0x0801243c
 8010c88:	08010bb5 	.word	0x08010bb5

08010c8c <__sfp>:
 8010c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c8e:	4607      	mov	r7, r0
 8010c90:	f7ff ffac 	bl	8010bec <__sfp_lock_acquire>
 8010c94:	4b1e      	ldr	r3, [pc, #120]	; (8010d10 <__sfp+0x84>)
 8010c96:	681e      	ldr	r6, [r3, #0]
 8010c98:	69b3      	ldr	r3, [r6, #24]
 8010c9a:	b913      	cbnz	r3, 8010ca2 <__sfp+0x16>
 8010c9c:	4630      	mov	r0, r6
 8010c9e:	f7ff ffbd 	bl	8010c1c <__sinit>
 8010ca2:	3648      	adds	r6, #72	; 0x48
 8010ca4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010ca8:	3b01      	subs	r3, #1
 8010caa:	d503      	bpl.n	8010cb4 <__sfp+0x28>
 8010cac:	6833      	ldr	r3, [r6, #0]
 8010cae:	b30b      	cbz	r3, 8010cf4 <__sfp+0x68>
 8010cb0:	6836      	ldr	r6, [r6, #0]
 8010cb2:	e7f7      	b.n	8010ca4 <__sfp+0x18>
 8010cb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010cb8:	b9d5      	cbnz	r5, 8010cf0 <__sfp+0x64>
 8010cba:	4b16      	ldr	r3, [pc, #88]	; (8010d14 <__sfp+0x88>)
 8010cbc:	60e3      	str	r3, [r4, #12]
 8010cbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010cc2:	6665      	str	r5, [r4, #100]	; 0x64
 8010cc4:	f000 f84c 	bl	8010d60 <__retarget_lock_init_recursive>
 8010cc8:	f7ff ff96 	bl	8010bf8 <__sfp_lock_release>
 8010ccc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010cd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010cd4:	6025      	str	r5, [r4, #0]
 8010cd6:	61a5      	str	r5, [r4, #24]
 8010cd8:	2208      	movs	r2, #8
 8010cda:	4629      	mov	r1, r5
 8010cdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010ce0:	f7fe fa14 	bl	800f10c <memset>
 8010ce4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010ce8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010cec:	4620      	mov	r0, r4
 8010cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cf0:	3468      	adds	r4, #104	; 0x68
 8010cf2:	e7d9      	b.n	8010ca8 <__sfp+0x1c>
 8010cf4:	2104      	movs	r1, #4
 8010cf6:	4638      	mov	r0, r7
 8010cf8:	f7ff ff62 	bl	8010bc0 <__sfmoreglue>
 8010cfc:	4604      	mov	r4, r0
 8010cfe:	6030      	str	r0, [r6, #0]
 8010d00:	2800      	cmp	r0, #0
 8010d02:	d1d5      	bne.n	8010cb0 <__sfp+0x24>
 8010d04:	f7ff ff78 	bl	8010bf8 <__sfp_lock_release>
 8010d08:	230c      	movs	r3, #12
 8010d0a:	603b      	str	r3, [r7, #0]
 8010d0c:	e7ee      	b.n	8010cec <__sfp+0x60>
 8010d0e:	bf00      	nop
 8010d10:	0801243c 	.word	0x0801243c
 8010d14:	ffff0001 	.word	0xffff0001

08010d18 <_fwalk_reent>:
 8010d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d1c:	4606      	mov	r6, r0
 8010d1e:	4688      	mov	r8, r1
 8010d20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010d24:	2700      	movs	r7, #0
 8010d26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d2a:	f1b9 0901 	subs.w	r9, r9, #1
 8010d2e:	d505      	bpl.n	8010d3c <_fwalk_reent+0x24>
 8010d30:	6824      	ldr	r4, [r4, #0]
 8010d32:	2c00      	cmp	r4, #0
 8010d34:	d1f7      	bne.n	8010d26 <_fwalk_reent+0xe>
 8010d36:	4638      	mov	r0, r7
 8010d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d3c:	89ab      	ldrh	r3, [r5, #12]
 8010d3e:	2b01      	cmp	r3, #1
 8010d40:	d907      	bls.n	8010d52 <_fwalk_reent+0x3a>
 8010d42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d46:	3301      	adds	r3, #1
 8010d48:	d003      	beq.n	8010d52 <_fwalk_reent+0x3a>
 8010d4a:	4629      	mov	r1, r5
 8010d4c:	4630      	mov	r0, r6
 8010d4e:	47c0      	blx	r8
 8010d50:	4307      	orrs	r7, r0
 8010d52:	3568      	adds	r5, #104	; 0x68
 8010d54:	e7e9      	b.n	8010d2a <_fwalk_reent+0x12>
	...

08010d58 <_localeconv_r>:
 8010d58:	4800      	ldr	r0, [pc, #0]	; (8010d5c <_localeconv_r+0x4>)
 8010d5a:	4770      	bx	lr
 8010d5c:	2000016c 	.word	0x2000016c

08010d60 <__retarget_lock_init_recursive>:
 8010d60:	4770      	bx	lr

08010d62 <__retarget_lock_acquire_recursive>:
 8010d62:	4770      	bx	lr

08010d64 <__retarget_lock_release_recursive>:
 8010d64:	4770      	bx	lr

08010d66 <__swhatbuf_r>:
 8010d66:	b570      	push	{r4, r5, r6, lr}
 8010d68:	460e      	mov	r6, r1
 8010d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d6e:	2900      	cmp	r1, #0
 8010d70:	b096      	sub	sp, #88	; 0x58
 8010d72:	4614      	mov	r4, r2
 8010d74:	461d      	mov	r5, r3
 8010d76:	da07      	bge.n	8010d88 <__swhatbuf_r+0x22>
 8010d78:	2300      	movs	r3, #0
 8010d7a:	602b      	str	r3, [r5, #0]
 8010d7c:	89b3      	ldrh	r3, [r6, #12]
 8010d7e:	061a      	lsls	r2, r3, #24
 8010d80:	d410      	bmi.n	8010da4 <__swhatbuf_r+0x3e>
 8010d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d86:	e00e      	b.n	8010da6 <__swhatbuf_r+0x40>
 8010d88:	466a      	mov	r2, sp
 8010d8a:	f000 ffed 	bl	8011d68 <_fstat_r>
 8010d8e:	2800      	cmp	r0, #0
 8010d90:	dbf2      	blt.n	8010d78 <__swhatbuf_r+0x12>
 8010d92:	9a01      	ldr	r2, [sp, #4]
 8010d94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010d98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010d9c:	425a      	negs	r2, r3
 8010d9e:	415a      	adcs	r2, r3
 8010da0:	602a      	str	r2, [r5, #0]
 8010da2:	e7ee      	b.n	8010d82 <__swhatbuf_r+0x1c>
 8010da4:	2340      	movs	r3, #64	; 0x40
 8010da6:	2000      	movs	r0, #0
 8010da8:	6023      	str	r3, [r4, #0]
 8010daa:	b016      	add	sp, #88	; 0x58
 8010dac:	bd70      	pop	{r4, r5, r6, pc}
	...

08010db0 <__smakebuf_r>:
 8010db0:	898b      	ldrh	r3, [r1, #12]
 8010db2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010db4:	079d      	lsls	r5, r3, #30
 8010db6:	4606      	mov	r6, r0
 8010db8:	460c      	mov	r4, r1
 8010dba:	d507      	bpl.n	8010dcc <__smakebuf_r+0x1c>
 8010dbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010dc0:	6023      	str	r3, [r4, #0]
 8010dc2:	6123      	str	r3, [r4, #16]
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	6163      	str	r3, [r4, #20]
 8010dc8:	b002      	add	sp, #8
 8010dca:	bd70      	pop	{r4, r5, r6, pc}
 8010dcc:	ab01      	add	r3, sp, #4
 8010dce:	466a      	mov	r2, sp
 8010dd0:	f7ff ffc9 	bl	8010d66 <__swhatbuf_r>
 8010dd4:	9900      	ldr	r1, [sp, #0]
 8010dd6:	4605      	mov	r5, r0
 8010dd8:	4630      	mov	r0, r6
 8010dda:	f000 fc0f 	bl	80115fc <_malloc_r>
 8010dde:	b948      	cbnz	r0, 8010df4 <__smakebuf_r+0x44>
 8010de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010de4:	059a      	lsls	r2, r3, #22
 8010de6:	d4ef      	bmi.n	8010dc8 <__smakebuf_r+0x18>
 8010de8:	f023 0303 	bic.w	r3, r3, #3
 8010dec:	f043 0302 	orr.w	r3, r3, #2
 8010df0:	81a3      	strh	r3, [r4, #12]
 8010df2:	e7e3      	b.n	8010dbc <__smakebuf_r+0xc>
 8010df4:	4b0d      	ldr	r3, [pc, #52]	; (8010e2c <__smakebuf_r+0x7c>)
 8010df6:	62b3      	str	r3, [r6, #40]	; 0x28
 8010df8:	89a3      	ldrh	r3, [r4, #12]
 8010dfa:	6020      	str	r0, [r4, #0]
 8010dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e00:	81a3      	strh	r3, [r4, #12]
 8010e02:	9b00      	ldr	r3, [sp, #0]
 8010e04:	6163      	str	r3, [r4, #20]
 8010e06:	9b01      	ldr	r3, [sp, #4]
 8010e08:	6120      	str	r0, [r4, #16]
 8010e0a:	b15b      	cbz	r3, 8010e24 <__smakebuf_r+0x74>
 8010e0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e10:	4630      	mov	r0, r6
 8010e12:	f000 ffbb 	bl	8011d8c <_isatty_r>
 8010e16:	b128      	cbz	r0, 8010e24 <__smakebuf_r+0x74>
 8010e18:	89a3      	ldrh	r3, [r4, #12]
 8010e1a:	f023 0303 	bic.w	r3, r3, #3
 8010e1e:	f043 0301 	orr.w	r3, r3, #1
 8010e22:	81a3      	strh	r3, [r4, #12]
 8010e24:	89a0      	ldrh	r0, [r4, #12]
 8010e26:	4305      	orrs	r5, r0
 8010e28:	81a5      	strh	r5, [r4, #12]
 8010e2a:	e7cd      	b.n	8010dc8 <__smakebuf_r+0x18>
 8010e2c:	08010bb5 	.word	0x08010bb5

08010e30 <malloc>:
 8010e30:	4b02      	ldr	r3, [pc, #8]	; (8010e3c <malloc+0xc>)
 8010e32:	4601      	mov	r1, r0
 8010e34:	6818      	ldr	r0, [r3, #0]
 8010e36:	f000 bbe1 	b.w	80115fc <_malloc_r>
 8010e3a:	bf00      	nop
 8010e3c:	20000018 	.word	0x20000018

08010e40 <_Balloc>:
 8010e40:	b570      	push	{r4, r5, r6, lr}
 8010e42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010e44:	4604      	mov	r4, r0
 8010e46:	460d      	mov	r5, r1
 8010e48:	b976      	cbnz	r6, 8010e68 <_Balloc+0x28>
 8010e4a:	2010      	movs	r0, #16
 8010e4c:	f7ff fff0 	bl	8010e30 <malloc>
 8010e50:	4602      	mov	r2, r0
 8010e52:	6260      	str	r0, [r4, #36]	; 0x24
 8010e54:	b920      	cbnz	r0, 8010e60 <_Balloc+0x20>
 8010e56:	4b18      	ldr	r3, [pc, #96]	; (8010eb8 <_Balloc+0x78>)
 8010e58:	4818      	ldr	r0, [pc, #96]	; (8010ebc <_Balloc+0x7c>)
 8010e5a:	2166      	movs	r1, #102	; 0x66
 8010e5c:	f000 ff44 	bl	8011ce8 <__assert_func>
 8010e60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e64:	6006      	str	r6, [r0, #0]
 8010e66:	60c6      	str	r6, [r0, #12]
 8010e68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010e6a:	68f3      	ldr	r3, [r6, #12]
 8010e6c:	b183      	cbz	r3, 8010e90 <_Balloc+0x50>
 8010e6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010e76:	b9b8      	cbnz	r0, 8010ea8 <_Balloc+0x68>
 8010e78:	2101      	movs	r1, #1
 8010e7a:	fa01 f605 	lsl.w	r6, r1, r5
 8010e7e:	1d72      	adds	r2, r6, #5
 8010e80:	0092      	lsls	r2, r2, #2
 8010e82:	4620      	mov	r0, r4
 8010e84:	f000 fb5a 	bl	801153c <_calloc_r>
 8010e88:	b160      	cbz	r0, 8010ea4 <_Balloc+0x64>
 8010e8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e8e:	e00e      	b.n	8010eae <_Balloc+0x6e>
 8010e90:	2221      	movs	r2, #33	; 0x21
 8010e92:	2104      	movs	r1, #4
 8010e94:	4620      	mov	r0, r4
 8010e96:	f000 fb51 	bl	801153c <_calloc_r>
 8010e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e9c:	60f0      	str	r0, [r6, #12]
 8010e9e:	68db      	ldr	r3, [r3, #12]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d1e4      	bne.n	8010e6e <_Balloc+0x2e>
 8010ea4:	2000      	movs	r0, #0
 8010ea6:	bd70      	pop	{r4, r5, r6, pc}
 8010ea8:	6802      	ldr	r2, [r0, #0]
 8010eaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010eae:	2300      	movs	r3, #0
 8010eb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010eb4:	e7f7      	b.n	8010ea6 <_Balloc+0x66>
 8010eb6:	bf00      	nop
 8010eb8:	08012481 	.word	0x08012481
 8010ebc:	08012568 	.word	0x08012568

08010ec0 <_Bfree>:
 8010ec0:	b570      	push	{r4, r5, r6, lr}
 8010ec2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010ec4:	4605      	mov	r5, r0
 8010ec6:	460c      	mov	r4, r1
 8010ec8:	b976      	cbnz	r6, 8010ee8 <_Bfree+0x28>
 8010eca:	2010      	movs	r0, #16
 8010ecc:	f7ff ffb0 	bl	8010e30 <malloc>
 8010ed0:	4602      	mov	r2, r0
 8010ed2:	6268      	str	r0, [r5, #36]	; 0x24
 8010ed4:	b920      	cbnz	r0, 8010ee0 <_Bfree+0x20>
 8010ed6:	4b09      	ldr	r3, [pc, #36]	; (8010efc <_Bfree+0x3c>)
 8010ed8:	4809      	ldr	r0, [pc, #36]	; (8010f00 <_Bfree+0x40>)
 8010eda:	218a      	movs	r1, #138	; 0x8a
 8010edc:	f000 ff04 	bl	8011ce8 <__assert_func>
 8010ee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ee4:	6006      	str	r6, [r0, #0]
 8010ee6:	60c6      	str	r6, [r0, #12]
 8010ee8:	b13c      	cbz	r4, 8010efa <_Bfree+0x3a>
 8010eea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010eec:	6862      	ldr	r2, [r4, #4]
 8010eee:	68db      	ldr	r3, [r3, #12]
 8010ef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ef4:	6021      	str	r1, [r4, #0]
 8010ef6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010efa:	bd70      	pop	{r4, r5, r6, pc}
 8010efc:	08012481 	.word	0x08012481
 8010f00:	08012568 	.word	0x08012568

08010f04 <__multadd>:
 8010f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f08:	690e      	ldr	r6, [r1, #16]
 8010f0a:	4607      	mov	r7, r0
 8010f0c:	4698      	mov	r8, r3
 8010f0e:	460c      	mov	r4, r1
 8010f10:	f101 0014 	add.w	r0, r1, #20
 8010f14:	2300      	movs	r3, #0
 8010f16:	6805      	ldr	r5, [r0, #0]
 8010f18:	b2a9      	uxth	r1, r5
 8010f1a:	fb02 8101 	mla	r1, r2, r1, r8
 8010f1e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010f22:	0c2d      	lsrs	r5, r5, #16
 8010f24:	fb02 c505 	mla	r5, r2, r5, ip
 8010f28:	b289      	uxth	r1, r1
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010f30:	429e      	cmp	r6, r3
 8010f32:	f840 1b04 	str.w	r1, [r0], #4
 8010f36:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010f3a:	dcec      	bgt.n	8010f16 <__multadd+0x12>
 8010f3c:	f1b8 0f00 	cmp.w	r8, #0
 8010f40:	d022      	beq.n	8010f88 <__multadd+0x84>
 8010f42:	68a3      	ldr	r3, [r4, #8]
 8010f44:	42b3      	cmp	r3, r6
 8010f46:	dc19      	bgt.n	8010f7c <__multadd+0x78>
 8010f48:	6861      	ldr	r1, [r4, #4]
 8010f4a:	4638      	mov	r0, r7
 8010f4c:	3101      	adds	r1, #1
 8010f4e:	f7ff ff77 	bl	8010e40 <_Balloc>
 8010f52:	4605      	mov	r5, r0
 8010f54:	b928      	cbnz	r0, 8010f62 <__multadd+0x5e>
 8010f56:	4602      	mov	r2, r0
 8010f58:	4b0d      	ldr	r3, [pc, #52]	; (8010f90 <__multadd+0x8c>)
 8010f5a:	480e      	ldr	r0, [pc, #56]	; (8010f94 <__multadd+0x90>)
 8010f5c:	21b5      	movs	r1, #181	; 0xb5
 8010f5e:	f000 fec3 	bl	8011ce8 <__assert_func>
 8010f62:	6922      	ldr	r2, [r4, #16]
 8010f64:	3202      	adds	r2, #2
 8010f66:	f104 010c 	add.w	r1, r4, #12
 8010f6a:	0092      	lsls	r2, r2, #2
 8010f6c:	300c      	adds	r0, #12
 8010f6e:	f7fe f8bf 	bl	800f0f0 <memcpy>
 8010f72:	4621      	mov	r1, r4
 8010f74:	4638      	mov	r0, r7
 8010f76:	f7ff ffa3 	bl	8010ec0 <_Bfree>
 8010f7a:	462c      	mov	r4, r5
 8010f7c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010f80:	3601      	adds	r6, #1
 8010f82:	f8c3 8014 	str.w	r8, [r3, #20]
 8010f86:	6126      	str	r6, [r4, #16]
 8010f88:	4620      	mov	r0, r4
 8010f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f8e:	bf00      	nop
 8010f90:	080124f7 	.word	0x080124f7
 8010f94:	08012568 	.word	0x08012568

08010f98 <__hi0bits>:
 8010f98:	0c03      	lsrs	r3, r0, #16
 8010f9a:	041b      	lsls	r3, r3, #16
 8010f9c:	b9d3      	cbnz	r3, 8010fd4 <__hi0bits+0x3c>
 8010f9e:	0400      	lsls	r0, r0, #16
 8010fa0:	2310      	movs	r3, #16
 8010fa2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010fa6:	bf04      	itt	eq
 8010fa8:	0200      	lsleq	r0, r0, #8
 8010faa:	3308      	addeq	r3, #8
 8010fac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010fb0:	bf04      	itt	eq
 8010fb2:	0100      	lsleq	r0, r0, #4
 8010fb4:	3304      	addeq	r3, #4
 8010fb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010fba:	bf04      	itt	eq
 8010fbc:	0080      	lsleq	r0, r0, #2
 8010fbe:	3302      	addeq	r3, #2
 8010fc0:	2800      	cmp	r0, #0
 8010fc2:	db05      	blt.n	8010fd0 <__hi0bits+0x38>
 8010fc4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010fc8:	f103 0301 	add.w	r3, r3, #1
 8010fcc:	bf08      	it	eq
 8010fce:	2320      	moveq	r3, #32
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	4770      	bx	lr
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	e7e4      	b.n	8010fa2 <__hi0bits+0xa>

08010fd8 <__lo0bits>:
 8010fd8:	6803      	ldr	r3, [r0, #0]
 8010fda:	f013 0207 	ands.w	r2, r3, #7
 8010fde:	4601      	mov	r1, r0
 8010fe0:	d00b      	beq.n	8010ffa <__lo0bits+0x22>
 8010fe2:	07da      	lsls	r2, r3, #31
 8010fe4:	d424      	bmi.n	8011030 <__lo0bits+0x58>
 8010fe6:	0798      	lsls	r0, r3, #30
 8010fe8:	bf49      	itett	mi
 8010fea:	085b      	lsrmi	r3, r3, #1
 8010fec:	089b      	lsrpl	r3, r3, #2
 8010fee:	2001      	movmi	r0, #1
 8010ff0:	600b      	strmi	r3, [r1, #0]
 8010ff2:	bf5c      	itt	pl
 8010ff4:	600b      	strpl	r3, [r1, #0]
 8010ff6:	2002      	movpl	r0, #2
 8010ff8:	4770      	bx	lr
 8010ffa:	b298      	uxth	r0, r3
 8010ffc:	b9b0      	cbnz	r0, 801102c <__lo0bits+0x54>
 8010ffe:	0c1b      	lsrs	r3, r3, #16
 8011000:	2010      	movs	r0, #16
 8011002:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011006:	bf04      	itt	eq
 8011008:	0a1b      	lsreq	r3, r3, #8
 801100a:	3008      	addeq	r0, #8
 801100c:	071a      	lsls	r2, r3, #28
 801100e:	bf04      	itt	eq
 8011010:	091b      	lsreq	r3, r3, #4
 8011012:	3004      	addeq	r0, #4
 8011014:	079a      	lsls	r2, r3, #30
 8011016:	bf04      	itt	eq
 8011018:	089b      	lsreq	r3, r3, #2
 801101a:	3002      	addeq	r0, #2
 801101c:	07da      	lsls	r2, r3, #31
 801101e:	d403      	bmi.n	8011028 <__lo0bits+0x50>
 8011020:	085b      	lsrs	r3, r3, #1
 8011022:	f100 0001 	add.w	r0, r0, #1
 8011026:	d005      	beq.n	8011034 <__lo0bits+0x5c>
 8011028:	600b      	str	r3, [r1, #0]
 801102a:	4770      	bx	lr
 801102c:	4610      	mov	r0, r2
 801102e:	e7e8      	b.n	8011002 <__lo0bits+0x2a>
 8011030:	2000      	movs	r0, #0
 8011032:	4770      	bx	lr
 8011034:	2020      	movs	r0, #32
 8011036:	4770      	bx	lr

08011038 <__i2b>:
 8011038:	b510      	push	{r4, lr}
 801103a:	460c      	mov	r4, r1
 801103c:	2101      	movs	r1, #1
 801103e:	f7ff feff 	bl	8010e40 <_Balloc>
 8011042:	4602      	mov	r2, r0
 8011044:	b928      	cbnz	r0, 8011052 <__i2b+0x1a>
 8011046:	4b05      	ldr	r3, [pc, #20]	; (801105c <__i2b+0x24>)
 8011048:	4805      	ldr	r0, [pc, #20]	; (8011060 <__i2b+0x28>)
 801104a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801104e:	f000 fe4b 	bl	8011ce8 <__assert_func>
 8011052:	2301      	movs	r3, #1
 8011054:	6144      	str	r4, [r0, #20]
 8011056:	6103      	str	r3, [r0, #16]
 8011058:	bd10      	pop	{r4, pc}
 801105a:	bf00      	nop
 801105c:	080124f7 	.word	0x080124f7
 8011060:	08012568 	.word	0x08012568

08011064 <__multiply>:
 8011064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011068:	4614      	mov	r4, r2
 801106a:	690a      	ldr	r2, [r1, #16]
 801106c:	6923      	ldr	r3, [r4, #16]
 801106e:	429a      	cmp	r2, r3
 8011070:	bfb8      	it	lt
 8011072:	460b      	movlt	r3, r1
 8011074:	460d      	mov	r5, r1
 8011076:	bfbc      	itt	lt
 8011078:	4625      	movlt	r5, r4
 801107a:	461c      	movlt	r4, r3
 801107c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011080:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011084:	68ab      	ldr	r3, [r5, #8]
 8011086:	6869      	ldr	r1, [r5, #4]
 8011088:	eb0a 0709 	add.w	r7, sl, r9
 801108c:	42bb      	cmp	r3, r7
 801108e:	b085      	sub	sp, #20
 8011090:	bfb8      	it	lt
 8011092:	3101      	addlt	r1, #1
 8011094:	f7ff fed4 	bl	8010e40 <_Balloc>
 8011098:	b930      	cbnz	r0, 80110a8 <__multiply+0x44>
 801109a:	4602      	mov	r2, r0
 801109c:	4b42      	ldr	r3, [pc, #264]	; (80111a8 <__multiply+0x144>)
 801109e:	4843      	ldr	r0, [pc, #268]	; (80111ac <__multiply+0x148>)
 80110a0:	f240 115d 	movw	r1, #349	; 0x15d
 80110a4:	f000 fe20 	bl	8011ce8 <__assert_func>
 80110a8:	f100 0614 	add.w	r6, r0, #20
 80110ac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80110b0:	4633      	mov	r3, r6
 80110b2:	2200      	movs	r2, #0
 80110b4:	4543      	cmp	r3, r8
 80110b6:	d31e      	bcc.n	80110f6 <__multiply+0x92>
 80110b8:	f105 0c14 	add.w	ip, r5, #20
 80110bc:	f104 0314 	add.w	r3, r4, #20
 80110c0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80110c4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80110c8:	9202      	str	r2, [sp, #8]
 80110ca:	ebac 0205 	sub.w	r2, ip, r5
 80110ce:	3a15      	subs	r2, #21
 80110d0:	f022 0203 	bic.w	r2, r2, #3
 80110d4:	3204      	adds	r2, #4
 80110d6:	f105 0115 	add.w	r1, r5, #21
 80110da:	458c      	cmp	ip, r1
 80110dc:	bf38      	it	cc
 80110de:	2204      	movcc	r2, #4
 80110e0:	9201      	str	r2, [sp, #4]
 80110e2:	9a02      	ldr	r2, [sp, #8]
 80110e4:	9303      	str	r3, [sp, #12]
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d808      	bhi.n	80110fc <__multiply+0x98>
 80110ea:	2f00      	cmp	r7, #0
 80110ec:	dc55      	bgt.n	801119a <__multiply+0x136>
 80110ee:	6107      	str	r7, [r0, #16]
 80110f0:	b005      	add	sp, #20
 80110f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110f6:	f843 2b04 	str.w	r2, [r3], #4
 80110fa:	e7db      	b.n	80110b4 <__multiply+0x50>
 80110fc:	f8b3 a000 	ldrh.w	sl, [r3]
 8011100:	f1ba 0f00 	cmp.w	sl, #0
 8011104:	d020      	beq.n	8011148 <__multiply+0xe4>
 8011106:	f105 0e14 	add.w	lr, r5, #20
 801110a:	46b1      	mov	r9, r6
 801110c:	2200      	movs	r2, #0
 801110e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011112:	f8d9 b000 	ldr.w	fp, [r9]
 8011116:	b2a1      	uxth	r1, r4
 8011118:	fa1f fb8b 	uxth.w	fp, fp
 801111c:	fb0a b101 	mla	r1, sl, r1, fp
 8011120:	4411      	add	r1, r2
 8011122:	f8d9 2000 	ldr.w	r2, [r9]
 8011126:	0c24      	lsrs	r4, r4, #16
 8011128:	0c12      	lsrs	r2, r2, #16
 801112a:	fb0a 2404 	mla	r4, sl, r4, r2
 801112e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011132:	b289      	uxth	r1, r1
 8011134:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011138:	45f4      	cmp	ip, lr
 801113a:	f849 1b04 	str.w	r1, [r9], #4
 801113e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011142:	d8e4      	bhi.n	801110e <__multiply+0xaa>
 8011144:	9901      	ldr	r1, [sp, #4]
 8011146:	5072      	str	r2, [r6, r1]
 8011148:	9a03      	ldr	r2, [sp, #12]
 801114a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801114e:	3304      	adds	r3, #4
 8011150:	f1b9 0f00 	cmp.w	r9, #0
 8011154:	d01f      	beq.n	8011196 <__multiply+0x132>
 8011156:	6834      	ldr	r4, [r6, #0]
 8011158:	f105 0114 	add.w	r1, r5, #20
 801115c:	46b6      	mov	lr, r6
 801115e:	f04f 0a00 	mov.w	sl, #0
 8011162:	880a      	ldrh	r2, [r1, #0]
 8011164:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011168:	fb09 b202 	mla	r2, r9, r2, fp
 801116c:	4492      	add	sl, r2
 801116e:	b2a4      	uxth	r4, r4
 8011170:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011174:	f84e 4b04 	str.w	r4, [lr], #4
 8011178:	f851 4b04 	ldr.w	r4, [r1], #4
 801117c:	f8be 2000 	ldrh.w	r2, [lr]
 8011180:	0c24      	lsrs	r4, r4, #16
 8011182:	fb09 2404 	mla	r4, r9, r4, r2
 8011186:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801118a:	458c      	cmp	ip, r1
 801118c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011190:	d8e7      	bhi.n	8011162 <__multiply+0xfe>
 8011192:	9a01      	ldr	r2, [sp, #4]
 8011194:	50b4      	str	r4, [r6, r2]
 8011196:	3604      	adds	r6, #4
 8011198:	e7a3      	b.n	80110e2 <__multiply+0x7e>
 801119a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d1a5      	bne.n	80110ee <__multiply+0x8a>
 80111a2:	3f01      	subs	r7, #1
 80111a4:	e7a1      	b.n	80110ea <__multiply+0x86>
 80111a6:	bf00      	nop
 80111a8:	080124f7 	.word	0x080124f7
 80111ac:	08012568 	.word	0x08012568

080111b0 <__pow5mult>:
 80111b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111b4:	4615      	mov	r5, r2
 80111b6:	f012 0203 	ands.w	r2, r2, #3
 80111ba:	4606      	mov	r6, r0
 80111bc:	460f      	mov	r7, r1
 80111be:	d007      	beq.n	80111d0 <__pow5mult+0x20>
 80111c0:	4c25      	ldr	r4, [pc, #148]	; (8011258 <__pow5mult+0xa8>)
 80111c2:	3a01      	subs	r2, #1
 80111c4:	2300      	movs	r3, #0
 80111c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80111ca:	f7ff fe9b 	bl	8010f04 <__multadd>
 80111ce:	4607      	mov	r7, r0
 80111d0:	10ad      	asrs	r5, r5, #2
 80111d2:	d03d      	beq.n	8011250 <__pow5mult+0xa0>
 80111d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80111d6:	b97c      	cbnz	r4, 80111f8 <__pow5mult+0x48>
 80111d8:	2010      	movs	r0, #16
 80111da:	f7ff fe29 	bl	8010e30 <malloc>
 80111de:	4602      	mov	r2, r0
 80111e0:	6270      	str	r0, [r6, #36]	; 0x24
 80111e2:	b928      	cbnz	r0, 80111f0 <__pow5mult+0x40>
 80111e4:	4b1d      	ldr	r3, [pc, #116]	; (801125c <__pow5mult+0xac>)
 80111e6:	481e      	ldr	r0, [pc, #120]	; (8011260 <__pow5mult+0xb0>)
 80111e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80111ec:	f000 fd7c 	bl	8011ce8 <__assert_func>
 80111f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80111f4:	6004      	str	r4, [r0, #0]
 80111f6:	60c4      	str	r4, [r0, #12]
 80111f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80111fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011200:	b94c      	cbnz	r4, 8011216 <__pow5mult+0x66>
 8011202:	f240 2171 	movw	r1, #625	; 0x271
 8011206:	4630      	mov	r0, r6
 8011208:	f7ff ff16 	bl	8011038 <__i2b>
 801120c:	2300      	movs	r3, #0
 801120e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011212:	4604      	mov	r4, r0
 8011214:	6003      	str	r3, [r0, #0]
 8011216:	f04f 0900 	mov.w	r9, #0
 801121a:	07eb      	lsls	r3, r5, #31
 801121c:	d50a      	bpl.n	8011234 <__pow5mult+0x84>
 801121e:	4639      	mov	r1, r7
 8011220:	4622      	mov	r2, r4
 8011222:	4630      	mov	r0, r6
 8011224:	f7ff ff1e 	bl	8011064 <__multiply>
 8011228:	4639      	mov	r1, r7
 801122a:	4680      	mov	r8, r0
 801122c:	4630      	mov	r0, r6
 801122e:	f7ff fe47 	bl	8010ec0 <_Bfree>
 8011232:	4647      	mov	r7, r8
 8011234:	106d      	asrs	r5, r5, #1
 8011236:	d00b      	beq.n	8011250 <__pow5mult+0xa0>
 8011238:	6820      	ldr	r0, [r4, #0]
 801123a:	b938      	cbnz	r0, 801124c <__pow5mult+0x9c>
 801123c:	4622      	mov	r2, r4
 801123e:	4621      	mov	r1, r4
 8011240:	4630      	mov	r0, r6
 8011242:	f7ff ff0f 	bl	8011064 <__multiply>
 8011246:	6020      	str	r0, [r4, #0]
 8011248:	f8c0 9000 	str.w	r9, [r0]
 801124c:	4604      	mov	r4, r0
 801124e:	e7e4      	b.n	801121a <__pow5mult+0x6a>
 8011250:	4638      	mov	r0, r7
 8011252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011256:	bf00      	nop
 8011258:	080126b8 	.word	0x080126b8
 801125c:	08012481 	.word	0x08012481
 8011260:	08012568 	.word	0x08012568

08011264 <__lshift>:
 8011264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011268:	460c      	mov	r4, r1
 801126a:	6849      	ldr	r1, [r1, #4]
 801126c:	6923      	ldr	r3, [r4, #16]
 801126e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011272:	68a3      	ldr	r3, [r4, #8]
 8011274:	4607      	mov	r7, r0
 8011276:	4691      	mov	r9, r2
 8011278:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801127c:	f108 0601 	add.w	r6, r8, #1
 8011280:	42b3      	cmp	r3, r6
 8011282:	db0b      	blt.n	801129c <__lshift+0x38>
 8011284:	4638      	mov	r0, r7
 8011286:	f7ff fddb 	bl	8010e40 <_Balloc>
 801128a:	4605      	mov	r5, r0
 801128c:	b948      	cbnz	r0, 80112a2 <__lshift+0x3e>
 801128e:	4602      	mov	r2, r0
 8011290:	4b28      	ldr	r3, [pc, #160]	; (8011334 <__lshift+0xd0>)
 8011292:	4829      	ldr	r0, [pc, #164]	; (8011338 <__lshift+0xd4>)
 8011294:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011298:	f000 fd26 	bl	8011ce8 <__assert_func>
 801129c:	3101      	adds	r1, #1
 801129e:	005b      	lsls	r3, r3, #1
 80112a0:	e7ee      	b.n	8011280 <__lshift+0x1c>
 80112a2:	2300      	movs	r3, #0
 80112a4:	f100 0114 	add.w	r1, r0, #20
 80112a8:	f100 0210 	add.w	r2, r0, #16
 80112ac:	4618      	mov	r0, r3
 80112ae:	4553      	cmp	r3, sl
 80112b0:	db33      	blt.n	801131a <__lshift+0xb6>
 80112b2:	6920      	ldr	r0, [r4, #16]
 80112b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80112b8:	f104 0314 	add.w	r3, r4, #20
 80112bc:	f019 091f 	ands.w	r9, r9, #31
 80112c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80112c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80112c8:	d02b      	beq.n	8011322 <__lshift+0xbe>
 80112ca:	f1c9 0e20 	rsb	lr, r9, #32
 80112ce:	468a      	mov	sl, r1
 80112d0:	2200      	movs	r2, #0
 80112d2:	6818      	ldr	r0, [r3, #0]
 80112d4:	fa00 f009 	lsl.w	r0, r0, r9
 80112d8:	4302      	orrs	r2, r0
 80112da:	f84a 2b04 	str.w	r2, [sl], #4
 80112de:	f853 2b04 	ldr.w	r2, [r3], #4
 80112e2:	459c      	cmp	ip, r3
 80112e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80112e8:	d8f3      	bhi.n	80112d2 <__lshift+0x6e>
 80112ea:	ebac 0304 	sub.w	r3, ip, r4
 80112ee:	3b15      	subs	r3, #21
 80112f0:	f023 0303 	bic.w	r3, r3, #3
 80112f4:	3304      	adds	r3, #4
 80112f6:	f104 0015 	add.w	r0, r4, #21
 80112fa:	4584      	cmp	ip, r0
 80112fc:	bf38      	it	cc
 80112fe:	2304      	movcc	r3, #4
 8011300:	50ca      	str	r2, [r1, r3]
 8011302:	b10a      	cbz	r2, 8011308 <__lshift+0xa4>
 8011304:	f108 0602 	add.w	r6, r8, #2
 8011308:	3e01      	subs	r6, #1
 801130a:	4638      	mov	r0, r7
 801130c:	612e      	str	r6, [r5, #16]
 801130e:	4621      	mov	r1, r4
 8011310:	f7ff fdd6 	bl	8010ec0 <_Bfree>
 8011314:	4628      	mov	r0, r5
 8011316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801131a:	f842 0f04 	str.w	r0, [r2, #4]!
 801131e:	3301      	adds	r3, #1
 8011320:	e7c5      	b.n	80112ae <__lshift+0x4a>
 8011322:	3904      	subs	r1, #4
 8011324:	f853 2b04 	ldr.w	r2, [r3], #4
 8011328:	f841 2f04 	str.w	r2, [r1, #4]!
 801132c:	459c      	cmp	ip, r3
 801132e:	d8f9      	bhi.n	8011324 <__lshift+0xc0>
 8011330:	e7ea      	b.n	8011308 <__lshift+0xa4>
 8011332:	bf00      	nop
 8011334:	080124f7 	.word	0x080124f7
 8011338:	08012568 	.word	0x08012568

0801133c <__mcmp>:
 801133c:	b530      	push	{r4, r5, lr}
 801133e:	6902      	ldr	r2, [r0, #16]
 8011340:	690c      	ldr	r4, [r1, #16]
 8011342:	1b12      	subs	r2, r2, r4
 8011344:	d10e      	bne.n	8011364 <__mcmp+0x28>
 8011346:	f100 0314 	add.w	r3, r0, #20
 801134a:	3114      	adds	r1, #20
 801134c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011350:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011354:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011358:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801135c:	42a5      	cmp	r5, r4
 801135e:	d003      	beq.n	8011368 <__mcmp+0x2c>
 8011360:	d305      	bcc.n	801136e <__mcmp+0x32>
 8011362:	2201      	movs	r2, #1
 8011364:	4610      	mov	r0, r2
 8011366:	bd30      	pop	{r4, r5, pc}
 8011368:	4283      	cmp	r3, r0
 801136a:	d3f3      	bcc.n	8011354 <__mcmp+0x18>
 801136c:	e7fa      	b.n	8011364 <__mcmp+0x28>
 801136e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011372:	e7f7      	b.n	8011364 <__mcmp+0x28>

08011374 <__mdiff>:
 8011374:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011378:	460c      	mov	r4, r1
 801137a:	4606      	mov	r6, r0
 801137c:	4611      	mov	r1, r2
 801137e:	4620      	mov	r0, r4
 8011380:	4617      	mov	r7, r2
 8011382:	f7ff ffdb 	bl	801133c <__mcmp>
 8011386:	1e05      	subs	r5, r0, #0
 8011388:	d110      	bne.n	80113ac <__mdiff+0x38>
 801138a:	4629      	mov	r1, r5
 801138c:	4630      	mov	r0, r6
 801138e:	f7ff fd57 	bl	8010e40 <_Balloc>
 8011392:	b930      	cbnz	r0, 80113a2 <__mdiff+0x2e>
 8011394:	4b39      	ldr	r3, [pc, #228]	; (801147c <__mdiff+0x108>)
 8011396:	4602      	mov	r2, r0
 8011398:	f240 2132 	movw	r1, #562	; 0x232
 801139c:	4838      	ldr	r0, [pc, #224]	; (8011480 <__mdiff+0x10c>)
 801139e:	f000 fca3 	bl	8011ce8 <__assert_func>
 80113a2:	2301      	movs	r3, #1
 80113a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80113a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ac:	bfa4      	itt	ge
 80113ae:	463b      	movge	r3, r7
 80113b0:	4627      	movge	r7, r4
 80113b2:	4630      	mov	r0, r6
 80113b4:	6879      	ldr	r1, [r7, #4]
 80113b6:	bfa6      	itte	ge
 80113b8:	461c      	movge	r4, r3
 80113ba:	2500      	movge	r5, #0
 80113bc:	2501      	movlt	r5, #1
 80113be:	f7ff fd3f 	bl	8010e40 <_Balloc>
 80113c2:	b920      	cbnz	r0, 80113ce <__mdiff+0x5a>
 80113c4:	4b2d      	ldr	r3, [pc, #180]	; (801147c <__mdiff+0x108>)
 80113c6:	4602      	mov	r2, r0
 80113c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80113cc:	e7e6      	b.n	801139c <__mdiff+0x28>
 80113ce:	693e      	ldr	r6, [r7, #16]
 80113d0:	60c5      	str	r5, [r0, #12]
 80113d2:	6925      	ldr	r5, [r4, #16]
 80113d4:	f107 0114 	add.w	r1, r7, #20
 80113d8:	f104 0914 	add.w	r9, r4, #20
 80113dc:	f100 0e14 	add.w	lr, r0, #20
 80113e0:	f107 0210 	add.w	r2, r7, #16
 80113e4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80113e8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80113ec:	46f2      	mov	sl, lr
 80113ee:	2700      	movs	r7, #0
 80113f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80113f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80113f8:	fa1f f883 	uxth.w	r8, r3
 80113fc:	fa17 f78b 	uxtah	r7, r7, fp
 8011400:	0c1b      	lsrs	r3, r3, #16
 8011402:	eba7 0808 	sub.w	r8, r7, r8
 8011406:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801140a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801140e:	fa1f f888 	uxth.w	r8, r8
 8011412:	141f      	asrs	r7, r3, #16
 8011414:	454d      	cmp	r5, r9
 8011416:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801141a:	f84a 3b04 	str.w	r3, [sl], #4
 801141e:	d8e7      	bhi.n	80113f0 <__mdiff+0x7c>
 8011420:	1b2b      	subs	r3, r5, r4
 8011422:	3b15      	subs	r3, #21
 8011424:	f023 0303 	bic.w	r3, r3, #3
 8011428:	3304      	adds	r3, #4
 801142a:	3415      	adds	r4, #21
 801142c:	42a5      	cmp	r5, r4
 801142e:	bf38      	it	cc
 8011430:	2304      	movcc	r3, #4
 8011432:	4419      	add	r1, r3
 8011434:	4473      	add	r3, lr
 8011436:	469e      	mov	lr, r3
 8011438:	460d      	mov	r5, r1
 801143a:	4565      	cmp	r5, ip
 801143c:	d30e      	bcc.n	801145c <__mdiff+0xe8>
 801143e:	f10c 0203 	add.w	r2, ip, #3
 8011442:	1a52      	subs	r2, r2, r1
 8011444:	f022 0203 	bic.w	r2, r2, #3
 8011448:	3903      	subs	r1, #3
 801144a:	458c      	cmp	ip, r1
 801144c:	bf38      	it	cc
 801144e:	2200      	movcc	r2, #0
 8011450:	441a      	add	r2, r3
 8011452:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011456:	b17b      	cbz	r3, 8011478 <__mdiff+0x104>
 8011458:	6106      	str	r6, [r0, #16]
 801145a:	e7a5      	b.n	80113a8 <__mdiff+0x34>
 801145c:	f855 8b04 	ldr.w	r8, [r5], #4
 8011460:	fa17 f488 	uxtah	r4, r7, r8
 8011464:	1422      	asrs	r2, r4, #16
 8011466:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801146a:	b2a4      	uxth	r4, r4
 801146c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011470:	f84e 4b04 	str.w	r4, [lr], #4
 8011474:	1417      	asrs	r7, r2, #16
 8011476:	e7e0      	b.n	801143a <__mdiff+0xc6>
 8011478:	3e01      	subs	r6, #1
 801147a:	e7ea      	b.n	8011452 <__mdiff+0xde>
 801147c:	080124f7 	.word	0x080124f7
 8011480:	08012568 	.word	0x08012568

08011484 <__d2b>:
 8011484:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011488:	4689      	mov	r9, r1
 801148a:	2101      	movs	r1, #1
 801148c:	ec57 6b10 	vmov	r6, r7, d0
 8011490:	4690      	mov	r8, r2
 8011492:	f7ff fcd5 	bl	8010e40 <_Balloc>
 8011496:	4604      	mov	r4, r0
 8011498:	b930      	cbnz	r0, 80114a8 <__d2b+0x24>
 801149a:	4602      	mov	r2, r0
 801149c:	4b25      	ldr	r3, [pc, #148]	; (8011534 <__d2b+0xb0>)
 801149e:	4826      	ldr	r0, [pc, #152]	; (8011538 <__d2b+0xb4>)
 80114a0:	f240 310a 	movw	r1, #778	; 0x30a
 80114a4:	f000 fc20 	bl	8011ce8 <__assert_func>
 80114a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80114ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80114b0:	bb35      	cbnz	r5, 8011500 <__d2b+0x7c>
 80114b2:	2e00      	cmp	r6, #0
 80114b4:	9301      	str	r3, [sp, #4]
 80114b6:	d028      	beq.n	801150a <__d2b+0x86>
 80114b8:	4668      	mov	r0, sp
 80114ba:	9600      	str	r6, [sp, #0]
 80114bc:	f7ff fd8c 	bl	8010fd8 <__lo0bits>
 80114c0:	9900      	ldr	r1, [sp, #0]
 80114c2:	b300      	cbz	r0, 8011506 <__d2b+0x82>
 80114c4:	9a01      	ldr	r2, [sp, #4]
 80114c6:	f1c0 0320 	rsb	r3, r0, #32
 80114ca:	fa02 f303 	lsl.w	r3, r2, r3
 80114ce:	430b      	orrs	r3, r1
 80114d0:	40c2      	lsrs	r2, r0
 80114d2:	6163      	str	r3, [r4, #20]
 80114d4:	9201      	str	r2, [sp, #4]
 80114d6:	9b01      	ldr	r3, [sp, #4]
 80114d8:	61a3      	str	r3, [r4, #24]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	bf14      	ite	ne
 80114de:	2202      	movne	r2, #2
 80114e0:	2201      	moveq	r2, #1
 80114e2:	6122      	str	r2, [r4, #16]
 80114e4:	b1d5      	cbz	r5, 801151c <__d2b+0x98>
 80114e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80114ea:	4405      	add	r5, r0
 80114ec:	f8c9 5000 	str.w	r5, [r9]
 80114f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80114f4:	f8c8 0000 	str.w	r0, [r8]
 80114f8:	4620      	mov	r0, r4
 80114fa:	b003      	add	sp, #12
 80114fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011504:	e7d5      	b.n	80114b2 <__d2b+0x2e>
 8011506:	6161      	str	r1, [r4, #20]
 8011508:	e7e5      	b.n	80114d6 <__d2b+0x52>
 801150a:	a801      	add	r0, sp, #4
 801150c:	f7ff fd64 	bl	8010fd8 <__lo0bits>
 8011510:	9b01      	ldr	r3, [sp, #4]
 8011512:	6163      	str	r3, [r4, #20]
 8011514:	2201      	movs	r2, #1
 8011516:	6122      	str	r2, [r4, #16]
 8011518:	3020      	adds	r0, #32
 801151a:	e7e3      	b.n	80114e4 <__d2b+0x60>
 801151c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011520:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011524:	f8c9 0000 	str.w	r0, [r9]
 8011528:	6918      	ldr	r0, [r3, #16]
 801152a:	f7ff fd35 	bl	8010f98 <__hi0bits>
 801152e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011532:	e7df      	b.n	80114f4 <__d2b+0x70>
 8011534:	080124f7 	.word	0x080124f7
 8011538:	08012568 	.word	0x08012568

0801153c <_calloc_r>:
 801153c:	b513      	push	{r0, r1, r4, lr}
 801153e:	434a      	muls	r2, r1
 8011540:	4611      	mov	r1, r2
 8011542:	9201      	str	r2, [sp, #4]
 8011544:	f000 f85a 	bl	80115fc <_malloc_r>
 8011548:	4604      	mov	r4, r0
 801154a:	b118      	cbz	r0, 8011554 <_calloc_r+0x18>
 801154c:	9a01      	ldr	r2, [sp, #4]
 801154e:	2100      	movs	r1, #0
 8011550:	f7fd fddc 	bl	800f10c <memset>
 8011554:	4620      	mov	r0, r4
 8011556:	b002      	add	sp, #8
 8011558:	bd10      	pop	{r4, pc}
	...

0801155c <_free_r>:
 801155c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801155e:	2900      	cmp	r1, #0
 8011560:	d048      	beq.n	80115f4 <_free_r+0x98>
 8011562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011566:	9001      	str	r0, [sp, #4]
 8011568:	2b00      	cmp	r3, #0
 801156a:	f1a1 0404 	sub.w	r4, r1, #4
 801156e:	bfb8      	it	lt
 8011570:	18e4      	addlt	r4, r4, r3
 8011572:	f000 fc59 	bl	8011e28 <__malloc_lock>
 8011576:	4a20      	ldr	r2, [pc, #128]	; (80115f8 <_free_r+0x9c>)
 8011578:	9801      	ldr	r0, [sp, #4]
 801157a:	6813      	ldr	r3, [r2, #0]
 801157c:	4615      	mov	r5, r2
 801157e:	b933      	cbnz	r3, 801158e <_free_r+0x32>
 8011580:	6063      	str	r3, [r4, #4]
 8011582:	6014      	str	r4, [r2, #0]
 8011584:	b003      	add	sp, #12
 8011586:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801158a:	f000 bc53 	b.w	8011e34 <__malloc_unlock>
 801158e:	42a3      	cmp	r3, r4
 8011590:	d90b      	bls.n	80115aa <_free_r+0x4e>
 8011592:	6821      	ldr	r1, [r4, #0]
 8011594:	1862      	adds	r2, r4, r1
 8011596:	4293      	cmp	r3, r2
 8011598:	bf04      	itt	eq
 801159a:	681a      	ldreq	r2, [r3, #0]
 801159c:	685b      	ldreq	r3, [r3, #4]
 801159e:	6063      	str	r3, [r4, #4]
 80115a0:	bf04      	itt	eq
 80115a2:	1852      	addeq	r2, r2, r1
 80115a4:	6022      	streq	r2, [r4, #0]
 80115a6:	602c      	str	r4, [r5, #0]
 80115a8:	e7ec      	b.n	8011584 <_free_r+0x28>
 80115aa:	461a      	mov	r2, r3
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	b10b      	cbz	r3, 80115b4 <_free_r+0x58>
 80115b0:	42a3      	cmp	r3, r4
 80115b2:	d9fa      	bls.n	80115aa <_free_r+0x4e>
 80115b4:	6811      	ldr	r1, [r2, #0]
 80115b6:	1855      	adds	r5, r2, r1
 80115b8:	42a5      	cmp	r5, r4
 80115ba:	d10b      	bne.n	80115d4 <_free_r+0x78>
 80115bc:	6824      	ldr	r4, [r4, #0]
 80115be:	4421      	add	r1, r4
 80115c0:	1854      	adds	r4, r2, r1
 80115c2:	42a3      	cmp	r3, r4
 80115c4:	6011      	str	r1, [r2, #0]
 80115c6:	d1dd      	bne.n	8011584 <_free_r+0x28>
 80115c8:	681c      	ldr	r4, [r3, #0]
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	6053      	str	r3, [r2, #4]
 80115ce:	4421      	add	r1, r4
 80115d0:	6011      	str	r1, [r2, #0]
 80115d2:	e7d7      	b.n	8011584 <_free_r+0x28>
 80115d4:	d902      	bls.n	80115dc <_free_r+0x80>
 80115d6:	230c      	movs	r3, #12
 80115d8:	6003      	str	r3, [r0, #0]
 80115da:	e7d3      	b.n	8011584 <_free_r+0x28>
 80115dc:	6825      	ldr	r5, [r4, #0]
 80115de:	1961      	adds	r1, r4, r5
 80115e0:	428b      	cmp	r3, r1
 80115e2:	bf04      	itt	eq
 80115e4:	6819      	ldreq	r1, [r3, #0]
 80115e6:	685b      	ldreq	r3, [r3, #4]
 80115e8:	6063      	str	r3, [r4, #4]
 80115ea:	bf04      	itt	eq
 80115ec:	1949      	addeq	r1, r1, r5
 80115ee:	6021      	streq	r1, [r4, #0]
 80115f0:	6054      	str	r4, [r2, #4]
 80115f2:	e7c7      	b.n	8011584 <_free_r+0x28>
 80115f4:	b003      	add	sp, #12
 80115f6:	bd30      	pop	{r4, r5, pc}
 80115f8:	2000af2c 	.word	0x2000af2c

080115fc <_malloc_r>:
 80115fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115fe:	1ccd      	adds	r5, r1, #3
 8011600:	f025 0503 	bic.w	r5, r5, #3
 8011604:	3508      	adds	r5, #8
 8011606:	2d0c      	cmp	r5, #12
 8011608:	bf38      	it	cc
 801160a:	250c      	movcc	r5, #12
 801160c:	2d00      	cmp	r5, #0
 801160e:	4606      	mov	r6, r0
 8011610:	db01      	blt.n	8011616 <_malloc_r+0x1a>
 8011612:	42a9      	cmp	r1, r5
 8011614:	d903      	bls.n	801161e <_malloc_r+0x22>
 8011616:	230c      	movs	r3, #12
 8011618:	6033      	str	r3, [r6, #0]
 801161a:	2000      	movs	r0, #0
 801161c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801161e:	f000 fc03 	bl	8011e28 <__malloc_lock>
 8011622:	4921      	ldr	r1, [pc, #132]	; (80116a8 <_malloc_r+0xac>)
 8011624:	680a      	ldr	r2, [r1, #0]
 8011626:	4614      	mov	r4, r2
 8011628:	b99c      	cbnz	r4, 8011652 <_malloc_r+0x56>
 801162a:	4f20      	ldr	r7, [pc, #128]	; (80116ac <_malloc_r+0xb0>)
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	b923      	cbnz	r3, 801163a <_malloc_r+0x3e>
 8011630:	4621      	mov	r1, r4
 8011632:	4630      	mov	r0, r6
 8011634:	f000 faf2 	bl	8011c1c <_sbrk_r>
 8011638:	6038      	str	r0, [r7, #0]
 801163a:	4629      	mov	r1, r5
 801163c:	4630      	mov	r0, r6
 801163e:	f000 faed 	bl	8011c1c <_sbrk_r>
 8011642:	1c43      	adds	r3, r0, #1
 8011644:	d123      	bne.n	801168e <_malloc_r+0x92>
 8011646:	230c      	movs	r3, #12
 8011648:	6033      	str	r3, [r6, #0]
 801164a:	4630      	mov	r0, r6
 801164c:	f000 fbf2 	bl	8011e34 <__malloc_unlock>
 8011650:	e7e3      	b.n	801161a <_malloc_r+0x1e>
 8011652:	6823      	ldr	r3, [r4, #0]
 8011654:	1b5b      	subs	r3, r3, r5
 8011656:	d417      	bmi.n	8011688 <_malloc_r+0x8c>
 8011658:	2b0b      	cmp	r3, #11
 801165a:	d903      	bls.n	8011664 <_malloc_r+0x68>
 801165c:	6023      	str	r3, [r4, #0]
 801165e:	441c      	add	r4, r3
 8011660:	6025      	str	r5, [r4, #0]
 8011662:	e004      	b.n	801166e <_malloc_r+0x72>
 8011664:	6863      	ldr	r3, [r4, #4]
 8011666:	42a2      	cmp	r2, r4
 8011668:	bf0c      	ite	eq
 801166a:	600b      	streq	r3, [r1, #0]
 801166c:	6053      	strne	r3, [r2, #4]
 801166e:	4630      	mov	r0, r6
 8011670:	f000 fbe0 	bl	8011e34 <__malloc_unlock>
 8011674:	f104 000b 	add.w	r0, r4, #11
 8011678:	1d23      	adds	r3, r4, #4
 801167a:	f020 0007 	bic.w	r0, r0, #7
 801167e:	1ac2      	subs	r2, r0, r3
 8011680:	d0cc      	beq.n	801161c <_malloc_r+0x20>
 8011682:	1a1b      	subs	r3, r3, r0
 8011684:	50a3      	str	r3, [r4, r2]
 8011686:	e7c9      	b.n	801161c <_malloc_r+0x20>
 8011688:	4622      	mov	r2, r4
 801168a:	6864      	ldr	r4, [r4, #4]
 801168c:	e7cc      	b.n	8011628 <_malloc_r+0x2c>
 801168e:	1cc4      	adds	r4, r0, #3
 8011690:	f024 0403 	bic.w	r4, r4, #3
 8011694:	42a0      	cmp	r0, r4
 8011696:	d0e3      	beq.n	8011660 <_malloc_r+0x64>
 8011698:	1a21      	subs	r1, r4, r0
 801169a:	4630      	mov	r0, r6
 801169c:	f000 fabe 	bl	8011c1c <_sbrk_r>
 80116a0:	3001      	adds	r0, #1
 80116a2:	d1dd      	bne.n	8011660 <_malloc_r+0x64>
 80116a4:	e7cf      	b.n	8011646 <_malloc_r+0x4a>
 80116a6:	bf00      	nop
 80116a8:	2000af2c 	.word	0x2000af2c
 80116ac:	2000af30 	.word	0x2000af30

080116b0 <__ssputs_r>:
 80116b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116b4:	688e      	ldr	r6, [r1, #8]
 80116b6:	429e      	cmp	r6, r3
 80116b8:	4682      	mov	sl, r0
 80116ba:	460c      	mov	r4, r1
 80116bc:	4690      	mov	r8, r2
 80116be:	461f      	mov	r7, r3
 80116c0:	d838      	bhi.n	8011734 <__ssputs_r+0x84>
 80116c2:	898a      	ldrh	r2, [r1, #12]
 80116c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80116c8:	d032      	beq.n	8011730 <__ssputs_r+0x80>
 80116ca:	6825      	ldr	r5, [r4, #0]
 80116cc:	6909      	ldr	r1, [r1, #16]
 80116ce:	eba5 0901 	sub.w	r9, r5, r1
 80116d2:	6965      	ldr	r5, [r4, #20]
 80116d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80116d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80116dc:	3301      	adds	r3, #1
 80116de:	444b      	add	r3, r9
 80116e0:	106d      	asrs	r5, r5, #1
 80116e2:	429d      	cmp	r5, r3
 80116e4:	bf38      	it	cc
 80116e6:	461d      	movcc	r5, r3
 80116e8:	0553      	lsls	r3, r2, #21
 80116ea:	d531      	bpl.n	8011750 <__ssputs_r+0xa0>
 80116ec:	4629      	mov	r1, r5
 80116ee:	f7ff ff85 	bl	80115fc <_malloc_r>
 80116f2:	4606      	mov	r6, r0
 80116f4:	b950      	cbnz	r0, 801170c <__ssputs_r+0x5c>
 80116f6:	230c      	movs	r3, #12
 80116f8:	f8ca 3000 	str.w	r3, [sl]
 80116fc:	89a3      	ldrh	r3, [r4, #12]
 80116fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011702:	81a3      	strh	r3, [r4, #12]
 8011704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801170c:	6921      	ldr	r1, [r4, #16]
 801170e:	464a      	mov	r2, r9
 8011710:	f7fd fcee 	bl	800f0f0 <memcpy>
 8011714:	89a3      	ldrh	r3, [r4, #12]
 8011716:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801171a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801171e:	81a3      	strh	r3, [r4, #12]
 8011720:	6126      	str	r6, [r4, #16]
 8011722:	6165      	str	r5, [r4, #20]
 8011724:	444e      	add	r6, r9
 8011726:	eba5 0509 	sub.w	r5, r5, r9
 801172a:	6026      	str	r6, [r4, #0]
 801172c:	60a5      	str	r5, [r4, #8]
 801172e:	463e      	mov	r6, r7
 8011730:	42be      	cmp	r6, r7
 8011732:	d900      	bls.n	8011736 <__ssputs_r+0x86>
 8011734:	463e      	mov	r6, r7
 8011736:	4632      	mov	r2, r6
 8011738:	6820      	ldr	r0, [r4, #0]
 801173a:	4641      	mov	r1, r8
 801173c:	f000 fb5a 	bl	8011df4 <memmove>
 8011740:	68a3      	ldr	r3, [r4, #8]
 8011742:	6822      	ldr	r2, [r4, #0]
 8011744:	1b9b      	subs	r3, r3, r6
 8011746:	4432      	add	r2, r6
 8011748:	60a3      	str	r3, [r4, #8]
 801174a:	6022      	str	r2, [r4, #0]
 801174c:	2000      	movs	r0, #0
 801174e:	e7db      	b.n	8011708 <__ssputs_r+0x58>
 8011750:	462a      	mov	r2, r5
 8011752:	f000 fb75 	bl	8011e40 <_realloc_r>
 8011756:	4606      	mov	r6, r0
 8011758:	2800      	cmp	r0, #0
 801175a:	d1e1      	bne.n	8011720 <__ssputs_r+0x70>
 801175c:	6921      	ldr	r1, [r4, #16]
 801175e:	4650      	mov	r0, sl
 8011760:	f7ff fefc 	bl	801155c <_free_r>
 8011764:	e7c7      	b.n	80116f6 <__ssputs_r+0x46>
	...

08011768 <_svfiprintf_r>:
 8011768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801176c:	4698      	mov	r8, r3
 801176e:	898b      	ldrh	r3, [r1, #12]
 8011770:	061b      	lsls	r3, r3, #24
 8011772:	b09d      	sub	sp, #116	; 0x74
 8011774:	4607      	mov	r7, r0
 8011776:	460d      	mov	r5, r1
 8011778:	4614      	mov	r4, r2
 801177a:	d50e      	bpl.n	801179a <_svfiprintf_r+0x32>
 801177c:	690b      	ldr	r3, [r1, #16]
 801177e:	b963      	cbnz	r3, 801179a <_svfiprintf_r+0x32>
 8011780:	2140      	movs	r1, #64	; 0x40
 8011782:	f7ff ff3b 	bl	80115fc <_malloc_r>
 8011786:	6028      	str	r0, [r5, #0]
 8011788:	6128      	str	r0, [r5, #16]
 801178a:	b920      	cbnz	r0, 8011796 <_svfiprintf_r+0x2e>
 801178c:	230c      	movs	r3, #12
 801178e:	603b      	str	r3, [r7, #0]
 8011790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011794:	e0d1      	b.n	801193a <_svfiprintf_r+0x1d2>
 8011796:	2340      	movs	r3, #64	; 0x40
 8011798:	616b      	str	r3, [r5, #20]
 801179a:	2300      	movs	r3, #0
 801179c:	9309      	str	r3, [sp, #36]	; 0x24
 801179e:	2320      	movs	r3, #32
 80117a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80117a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80117a8:	2330      	movs	r3, #48	; 0x30
 80117aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011954 <_svfiprintf_r+0x1ec>
 80117ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80117b2:	f04f 0901 	mov.w	r9, #1
 80117b6:	4623      	mov	r3, r4
 80117b8:	469a      	mov	sl, r3
 80117ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117be:	b10a      	cbz	r2, 80117c4 <_svfiprintf_r+0x5c>
 80117c0:	2a25      	cmp	r2, #37	; 0x25
 80117c2:	d1f9      	bne.n	80117b8 <_svfiprintf_r+0x50>
 80117c4:	ebba 0b04 	subs.w	fp, sl, r4
 80117c8:	d00b      	beq.n	80117e2 <_svfiprintf_r+0x7a>
 80117ca:	465b      	mov	r3, fp
 80117cc:	4622      	mov	r2, r4
 80117ce:	4629      	mov	r1, r5
 80117d0:	4638      	mov	r0, r7
 80117d2:	f7ff ff6d 	bl	80116b0 <__ssputs_r>
 80117d6:	3001      	adds	r0, #1
 80117d8:	f000 80aa 	beq.w	8011930 <_svfiprintf_r+0x1c8>
 80117dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80117de:	445a      	add	r2, fp
 80117e0:	9209      	str	r2, [sp, #36]	; 0x24
 80117e2:	f89a 3000 	ldrb.w	r3, [sl]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	f000 80a2 	beq.w	8011930 <_svfiprintf_r+0x1c8>
 80117ec:	2300      	movs	r3, #0
 80117ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117f6:	f10a 0a01 	add.w	sl, sl, #1
 80117fa:	9304      	str	r3, [sp, #16]
 80117fc:	9307      	str	r3, [sp, #28]
 80117fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011802:	931a      	str	r3, [sp, #104]	; 0x68
 8011804:	4654      	mov	r4, sl
 8011806:	2205      	movs	r2, #5
 8011808:	f814 1b01 	ldrb.w	r1, [r4], #1
 801180c:	4851      	ldr	r0, [pc, #324]	; (8011954 <_svfiprintf_r+0x1ec>)
 801180e:	f7ee fcef 	bl	80001f0 <memchr>
 8011812:	9a04      	ldr	r2, [sp, #16]
 8011814:	b9d8      	cbnz	r0, 801184e <_svfiprintf_r+0xe6>
 8011816:	06d0      	lsls	r0, r2, #27
 8011818:	bf44      	itt	mi
 801181a:	2320      	movmi	r3, #32
 801181c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011820:	0711      	lsls	r1, r2, #28
 8011822:	bf44      	itt	mi
 8011824:	232b      	movmi	r3, #43	; 0x2b
 8011826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801182a:	f89a 3000 	ldrb.w	r3, [sl]
 801182e:	2b2a      	cmp	r3, #42	; 0x2a
 8011830:	d015      	beq.n	801185e <_svfiprintf_r+0xf6>
 8011832:	9a07      	ldr	r2, [sp, #28]
 8011834:	4654      	mov	r4, sl
 8011836:	2000      	movs	r0, #0
 8011838:	f04f 0c0a 	mov.w	ip, #10
 801183c:	4621      	mov	r1, r4
 801183e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011842:	3b30      	subs	r3, #48	; 0x30
 8011844:	2b09      	cmp	r3, #9
 8011846:	d94e      	bls.n	80118e6 <_svfiprintf_r+0x17e>
 8011848:	b1b0      	cbz	r0, 8011878 <_svfiprintf_r+0x110>
 801184a:	9207      	str	r2, [sp, #28]
 801184c:	e014      	b.n	8011878 <_svfiprintf_r+0x110>
 801184e:	eba0 0308 	sub.w	r3, r0, r8
 8011852:	fa09 f303 	lsl.w	r3, r9, r3
 8011856:	4313      	orrs	r3, r2
 8011858:	9304      	str	r3, [sp, #16]
 801185a:	46a2      	mov	sl, r4
 801185c:	e7d2      	b.n	8011804 <_svfiprintf_r+0x9c>
 801185e:	9b03      	ldr	r3, [sp, #12]
 8011860:	1d19      	adds	r1, r3, #4
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	9103      	str	r1, [sp, #12]
 8011866:	2b00      	cmp	r3, #0
 8011868:	bfbb      	ittet	lt
 801186a:	425b      	neglt	r3, r3
 801186c:	f042 0202 	orrlt.w	r2, r2, #2
 8011870:	9307      	strge	r3, [sp, #28]
 8011872:	9307      	strlt	r3, [sp, #28]
 8011874:	bfb8      	it	lt
 8011876:	9204      	strlt	r2, [sp, #16]
 8011878:	7823      	ldrb	r3, [r4, #0]
 801187a:	2b2e      	cmp	r3, #46	; 0x2e
 801187c:	d10c      	bne.n	8011898 <_svfiprintf_r+0x130>
 801187e:	7863      	ldrb	r3, [r4, #1]
 8011880:	2b2a      	cmp	r3, #42	; 0x2a
 8011882:	d135      	bne.n	80118f0 <_svfiprintf_r+0x188>
 8011884:	9b03      	ldr	r3, [sp, #12]
 8011886:	1d1a      	adds	r2, r3, #4
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	9203      	str	r2, [sp, #12]
 801188c:	2b00      	cmp	r3, #0
 801188e:	bfb8      	it	lt
 8011890:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011894:	3402      	adds	r4, #2
 8011896:	9305      	str	r3, [sp, #20]
 8011898:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011964 <_svfiprintf_r+0x1fc>
 801189c:	7821      	ldrb	r1, [r4, #0]
 801189e:	2203      	movs	r2, #3
 80118a0:	4650      	mov	r0, sl
 80118a2:	f7ee fca5 	bl	80001f0 <memchr>
 80118a6:	b140      	cbz	r0, 80118ba <_svfiprintf_r+0x152>
 80118a8:	2340      	movs	r3, #64	; 0x40
 80118aa:	eba0 000a 	sub.w	r0, r0, sl
 80118ae:	fa03 f000 	lsl.w	r0, r3, r0
 80118b2:	9b04      	ldr	r3, [sp, #16]
 80118b4:	4303      	orrs	r3, r0
 80118b6:	3401      	adds	r4, #1
 80118b8:	9304      	str	r3, [sp, #16]
 80118ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118be:	4826      	ldr	r0, [pc, #152]	; (8011958 <_svfiprintf_r+0x1f0>)
 80118c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80118c4:	2206      	movs	r2, #6
 80118c6:	f7ee fc93 	bl	80001f0 <memchr>
 80118ca:	2800      	cmp	r0, #0
 80118cc:	d038      	beq.n	8011940 <_svfiprintf_r+0x1d8>
 80118ce:	4b23      	ldr	r3, [pc, #140]	; (801195c <_svfiprintf_r+0x1f4>)
 80118d0:	bb1b      	cbnz	r3, 801191a <_svfiprintf_r+0x1b2>
 80118d2:	9b03      	ldr	r3, [sp, #12]
 80118d4:	3307      	adds	r3, #7
 80118d6:	f023 0307 	bic.w	r3, r3, #7
 80118da:	3308      	adds	r3, #8
 80118dc:	9303      	str	r3, [sp, #12]
 80118de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118e0:	4433      	add	r3, r6
 80118e2:	9309      	str	r3, [sp, #36]	; 0x24
 80118e4:	e767      	b.n	80117b6 <_svfiprintf_r+0x4e>
 80118e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80118ea:	460c      	mov	r4, r1
 80118ec:	2001      	movs	r0, #1
 80118ee:	e7a5      	b.n	801183c <_svfiprintf_r+0xd4>
 80118f0:	2300      	movs	r3, #0
 80118f2:	3401      	adds	r4, #1
 80118f4:	9305      	str	r3, [sp, #20]
 80118f6:	4619      	mov	r1, r3
 80118f8:	f04f 0c0a 	mov.w	ip, #10
 80118fc:	4620      	mov	r0, r4
 80118fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011902:	3a30      	subs	r2, #48	; 0x30
 8011904:	2a09      	cmp	r2, #9
 8011906:	d903      	bls.n	8011910 <_svfiprintf_r+0x1a8>
 8011908:	2b00      	cmp	r3, #0
 801190a:	d0c5      	beq.n	8011898 <_svfiprintf_r+0x130>
 801190c:	9105      	str	r1, [sp, #20]
 801190e:	e7c3      	b.n	8011898 <_svfiprintf_r+0x130>
 8011910:	fb0c 2101 	mla	r1, ip, r1, r2
 8011914:	4604      	mov	r4, r0
 8011916:	2301      	movs	r3, #1
 8011918:	e7f0      	b.n	80118fc <_svfiprintf_r+0x194>
 801191a:	ab03      	add	r3, sp, #12
 801191c:	9300      	str	r3, [sp, #0]
 801191e:	462a      	mov	r2, r5
 8011920:	4b0f      	ldr	r3, [pc, #60]	; (8011960 <_svfiprintf_r+0x1f8>)
 8011922:	a904      	add	r1, sp, #16
 8011924:	4638      	mov	r0, r7
 8011926:	f7fd fc99 	bl	800f25c <_printf_float>
 801192a:	1c42      	adds	r2, r0, #1
 801192c:	4606      	mov	r6, r0
 801192e:	d1d6      	bne.n	80118de <_svfiprintf_r+0x176>
 8011930:	89ab      	ldrh	r3, [r5, #12]
 8011932:	065b      	lsls	r3, r3, #25
 8011934:	f53f af2c 	bmi.w	8011790 <_svfiprintf_r+0x28>
 8011938:	9809      	ldr	r0, [sp, #36]	; 0x24
 801193a:	b01d      	add	sp, #116	; 0x74
 801193c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011940:	ab03      	add	r3, sp, #12
 8011942:	9300      	str	r3, [sp, #0]
 8011944:	462a      	mov	r2, r5
 8011946:	4b06      	ldr	r3, [pc, #24]	; (8011960 <_svfiprintf_r+0x1f8>)
 8011948:	a904      	add	r1, sp, #16
 801194a:	4638      	mov	r0, r7
 801194c:	f7fd ff2a 	bl	800f7a4 <_printf_i>
 8011950:	e7eb      	b.n	801192a <_svfiprintf_r+0x1c2>
 8011952:	bf00      	nop
 8011954:	080126c4 	.word	0x080126c4
 8011958:	080126ce 	.word	0x080126ce
 801195c:	0800f25d 	.word	0x0800f25d
 8011960:	080116b1 	.word	0x080116b1
 8011964:	080126ca 	.word	0x080126ca

08011968 <__sfputc_r>:
 8011968:	6893      	ldr	r3, [r2, #8]
 801196a:	3b01      	subs	r3, #1
 801196c:	2b00      	cmp	r3, #0
 801196e:	b410      	push	{r4}
 8011970:	6093      	str	r3, [r2, #8]
 8011972:	da08      	bge.n	8011986 <__sfputc_r+0x1e>
 8011974:	6994      	ldr	r4, [r2, #24]
 8011976:	42a3      	cmp	r3, r4
 8011978:	db01      	blt.n	801197e <__sfputc_r+0x16>
 801197a:	290a      	cmp	r1, #10
 801197c:	d103      	bne.n	8011986 <__sfputc_r+0x1e>
 801197e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011982:	f7fe b8f7 	b.w	800fb74 <__swbuf_r>
 8011986:	6813      	ldr	r3, [r2, #0]
 8011988:	1c58      	adds	r0, r3, #1
 801198a:	6010      	str	r0, [r2, #0]
 801198c:	7019      	strb	r1, [r3, #0]
 801198e:	4608      	mov	r0, r1
 8011990:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011994:	4770      	bx	lr

08011996 <__sfputs_r>:
 8011996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011998:	4606      	mov	r6, r0
 801199a:	460f      	mov	r7, r1
 801199c:	4614      	mov	r4, r2
 801199e:	18d5      	adds	r5, r2, r3
 80119a0:	42ac      	cmp	r4, r5
 80119a2:	d101      	bne.n	80119a8 <__sfputs_r+0x12>
 80119a4:	2000      	movs	r0, #0
 80119a6:	e007      	b.n	80119b8 <__sfputs_r+0x22>
 80119a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119ac:	463a      	mov	r2, r7
 80119ae:	4630      	mov	r0, r6
 80119b0:	f7ff ffda 	bl	8011968 <__sfputc_r>
 80119b4:	1c43      	adds	r3, r0, #1
 80119b6:	d1f3      	bne.n	80119a0 <__sfputs_r+0xa>
 80119b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080119bc <_vfiprintf_r>:
 80119bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119c0:	460d      	mov	r5, r1
 80119c2:	b09d      	sub	sp, #116	; 0x74
 80119c4:	4614      	mov	r4, r2
 80119c6:	4698      	mov	r8, r3
 80119c8:	4606      	mov	r6, r0
 80119ca:	b118      	cbz	r0, 80119d4 <_vfiprintf_r+0x18>
 80119cc:	6983      	ldr	r3, [r0, #24]
 80119ce:	b90b      	cbnz	r3, 80119d4 <_vfiprintf_r+0x18>
 80119d0:	f7ff f924 	bl	8010c1c <__sinit>
 80119d4:	4b89      	ldr	r3, [pc, #548]	; (8011bfc <_vfiprintf_r+0x240>)
 80119d6:	429d      	cmp	r5, r3
 80119d8:	d11b      	bne.n	8011a12 <_vfiprintf_r+0x56>
 80119da:	6875      	ldr	r5, [r6, #4]
 80119dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119de:	07d9      	lsls	r1, r3, #31
 80119e0:	d405      	bmi.n	80119ee <_vfiprintf_r+0x32>
 80119e2:	89ab      	ldrh	r3, [r5, #12]
 80119e4:	059a      	lsls	r2, r3, #22
 80119e6:	d402      	bmi.n	80119ee <_vfiprintf_r+0x32>
 80119e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80119ea:	f7ff f9ba 	bl	8010d62 <__retarget_lock_acquire_recursive>
 80119ee:	89ab      	ldrh	r3, [r5, #12]
 80119f0:	071b      	lsls	r3, r3, #28
 80119f2:	d501      	bpl.n	80119f8 <_vfiprintf_r+0x3c>
 80119f4:	692b      	ldr	r3, [r5, #16]
 80119f6:	b9eb      	cbnz	r3, 8011a34 <_vfiprintf_r+0x78>
 80119f8:	4629      	mov	r1, r5
 80119fa:	4630      	mov	r0, r6
 80119fc:	f7fe f90c 	bl	800fc18 <__swsetup_r>
 8011a00:	b1c0      	cbz	r0, 8011a34 <_vfiprintf_r+0x78>
 8011a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a04:	07dc      	lsls	r4, r3, #31
 8011a06:	d50e      	bpl.n	8011a26 <_vfiprintf_r+0x6a>
 8011a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a0c:	b01d      	add	sp, #116	; 0x74
 8011a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a12:	4b7b      	ldr	r3, [pc, #492]	; (8011c00 <_vfiprintf_r+0x244>)
 8011a14:	429d      	cmp	r5, r3
 8011a16:	d101      	bne.n	8011a1c <_vfiprintf_r+0x60>
 8011a18:	68b5      	ldr	r5, [r6, #8]
 8011a1a:	e7df      	b.n	80119dc <_vfiprintf_r+0x20>
 8011a1c:	4b79      	ldr	r3, [pc, #484]	; (8011c04 <_vfiprintf_r+0x248>)
 8011a1e:	429d      	cmp	r5, r3
 8011a20:	bf08      	it	eq
 8011a22:	68f5      	ldreq	r5, [r6, #12]
 8011a24:	e7da      	b.n	80119dc <_vfiprintf_r+0x20>
 8011a26:	89ab      	ldrh	r3, [r5, #12]
 8011a28:	0598      	lsls	r0, r3, #22
 8011a2a:	d4ed      	bmi.n	8011a08 <_vfiprintf_r+0x4c>
 8011a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a2e:	f7ff f999 	bl	8010d64 <__retarget_lock_release_recursive>
 8011a32:	e7e9      	b.n	8011a08 <_vfiprintf_r+0x4c>
 8011a34:	2300      	movs	r3, #0
 8011a36:	9309      	str	r3, [sp, #36]	; 0x24
 8011a38:	2320      	movs	r3, #32
 8011a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a42:	2330      	movs	r3, #48	; 0x30
 8011a44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011c08 <_vfiprintf_r+0x24c>
 8011a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a4c:	f04f 0901 	mov.w	r9, #1
 8011a50:	4623      	mov	r3, r4
 8011a52:	469a      	mov	sl, r3
 8011a54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a58:	b10a      	cbz	r2, 8011a5e <_vfiprintf_r+0xa2>
 8011a5a:	2a25      	cmp	r2, #37	; 0x25
 8011a5c:	d1f9      	bne.n	8011a52 <_vfiprintf_r+0x96>
 8011a5e:	ebba 0b04 	subs.w	fp, sl, r4
 8011a62:	d00b      	beq.n	8011a7c <_vfiprintf_r+0xc0>
 8011a64:	465b      	mov	r3, fp
 8011a66:	4622      	mov	r2, r4
 8011a68:	4629      	mov	r1, r5
 8011a6a:	4630      	mov	r0, r6
 8011a6c:	f7ff ff93 	bl	8011996 <__sfputs_r>
 8011a70:	3001      	adds	r0, #1
 8011a72:	f000 80aa 	beq.w	8011bca <_vfiprintf_r+0x20e>
 8011a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a78:	445a      	add	r2, fp
 8011a7a:	9209      	str	r2, [sp, #36]	; 0x24
 8011a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	f000 80a2 	beq.w	8011bca <_vfiprintf_r+0x20e>
 8011a86:	2300      	movs	r3, #0
 8011a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a90:	f10a 0a01 	add.w	sl, sl, #1
 8011a94:	9304      	str	r3, [sp, #16]
 8011a96:	9307      	str	r3, [sp, #28]
 8011a98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a9c:	931a      	str	r3, [sp, #104]	; 0x68
 8011a9e:	4654      	mov	r4, sl
 8011aa0:	2205      	movs	r2, #5
 8011aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011aa6:	4858      	ldr	r0, [pc, #352]	; (8011c08 <_vfiprintf_r+0x24c>)
 8011aa8:	f7ee fba2 	bl	80001f0 <memchr>
 8011aac:	9a04      	ldr	r2, [sp, #16]
 8011aae:	b9d8      	cbnz	r0, 8011ae8 <_vfiprintf_r+0x12c>
 8011ab0:	06d1      	lsls	r1, r2, #27
 8011ab2:	bf44      	itt	mi
 8011ab4:	2320      	movmi	r3, #32
 8011ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011aba:	0713      	lsls	r3, r2, #28
 8011abc:	bf44      	itt	mi
 8011abe:	232b      	movmi	r3, #43	; 0x2b
 8011ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8011ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8011aca:	d015      	beq.n	8011af8 <_vfiprintf_r+0x13c>
 8011acc:	9a07      	ldr	r2, [sp, #28]
 8011ace:	4654      	mov	r4, sl
 8011ad0:	2000      	movs	r0, #0
 8011ad2:	f04f 0c0a 	mov.w	ip, #10
 8011ad6:	4621      	mov	r1, r4
 8011ad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011adc:	3b30      	subs	r3, #48	; 0x30
 8011ade:	2b09      	cmp	r3, #9
 8011ae0:	d94e      	bls.n	8011b80 <_vfiprintf_r+0x1c4>
 8011ae2:	b1b0      	cbz	r0, 8011b12 <_vfiprintf_r+0x156>
 8011ae4:	9207      	str	r2, [sp, #28]
 8011ae6:	e014      	b.n	8011b12 <_vfiprintf_r+0x156>
 8011ae8:	eba0 0308 	sub.w	r3, r0, r8
 8011aec:	fa09 f303 	lsl.w	r3, r9, r3
 8011af0:	4313      	orrs	r3, r2
 8011af2:	9304      	str	r3, [sp, #16]
 8011af4:	46a2      	mov	sl, r4
 8011af6:	e7d2      	b.n	8011a9e <_vfiprintf_r+0xe2>
 8011af8:	9b03      	ldr	r3, [sp, #12]
 8011afa:	1d19      	adds	r1, r3, #4
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	9103      	str	r1, [sp, #12]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	bfbb      	ittet	lt
 8011b04:	425b      	neglt	r3, r3
 8011b06:	f042 0202 	orrlt.w	r2, r2, #2
 8011b0a:	9307      	strge	r3, [sp, #28]
 8011b0c:	9307      	strlt	r3, [sp, #28]
 8011b0e:	bfb8      	it	lt
 8011b10:	9204      	strlt	r2, [sp, #16]
 8011b12:	7823      	ldrb	r3, [r4, #0]
 8011b14:	2b2e      	cmp	r3, #46	; 0x2e
 8011b16:	d10c      	bne.n	8011b32 <_vfiprintf_r+0x176>
 8011b18:	7863      	ldrb	r3, [r4, #1]
 8011b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8011b1c:	d135      	bne.n	8011b8a <_vfiprintf_r+0x1ce>
 8011b1e:	9b03      	ldr	r3, [sp, #12]
 8011b20:	1d1a      	adds	r2, r3, #4
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	9203      	str	r2, [sp, #12]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	bfb8      	it	lt
 8011b2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011b2e:	3402      	adds	r4, #2
 8011b30:	9305      	str	r3, [sp, #20]
 8011b32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011c18 <_vfiprintf_r+0x25c>
 8011b36:	7821      	ldrb	r1, [r4, #0]
 8011b38:	2203      	movs	r2, #3
 8011b3a:	4650      	mov	r0, sl
 8011b3c:	f7ee fb58 	bl	80001f0 <memchr>
 8011b40:	b140      	cbz	r0, 8011b54 <_vfiprintf_r+0x198>
 8011b42:	2340      	movs	r3, #64	; 0x40
 8011b44:	eba0 000a 	sub.w	r0, r0, sl
 8011b48:	fa03 f000 	lsl.w	r0, r3, r0
 8011b4c:	9b04      	ldr	r3, [sp, #16]
 8011b4e:	4303      	orrs	r3, r0
 8011b50:	3401      	adds	r4, #1
 8011b52:	9304      	str	r3, [sp, #16]
 8011b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b58:	482c      	ldr	r0, [pc, #176]	; (8011c0c <_vfiprintf_r+0x250>)
 8011b5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b5e:	2206      	movs	r2, #6
 8011b60:	f7ee fb46 	bl	80001f0 <memchr>
 8011b64:	2800      	cmp	r0, #0
 8011b66:	d03f      	beq.n	8011be8 <_vfiprintf_r+0x22c>
 8011b68:	4b29      	ldr	r3, [pc, #164]	; (8011c10 <_vfiprintf_r+0x254>)
 8011b6a:	bb1b      	cbnz	r3, 8011bb4 <_vfiprintf_r+0x1f8>
 8011b6c:	9b03      	ldr	r3, [sp, #12]
 8011b6e:	3307      	adds	r3, #7
 8011b70:	f023 0307 	bic.w	r3, r3, #7
 8011b74:	3308      	adds	r3, #8
 8011b76:	9303      	str	r3, [sp, #12]
 8011b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b7a:	443b      	add	r3, r7
 8011b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8011b7e:	e767      	b.n	8011a50 <_vfiprintf_r+0x94>
 8011b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b84:	460c      	mov	r4, r1
 8011b86:	2001      	movs	r0, #1
 8011b88:	e7a5      	b.n	8011ad6 <_vfiprintf_r+0x11a>
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	3401      	adds	r4, #1
 8011b8e:	9305      	str	r3, [sp, #20]
 8011b90:	4619      	mov	r1, r3
 8011b92:	f04f 0c0a 	mov.w	ip, #10
 8011b96:	4620      	mov	r0, r4
 8011b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b9c:	3a30      	subs	r2, #48	; 0x30
 8011b9e:	2a09      	cmp	r2, #9
 8011ba0:	d903      	bls.n	8011baa <_vfiprintf_r+0x1ee>
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d0c5      	beq.n	8011b32 <_vfiprintf_r+0x176>
 8011ba6:	9105      	str	r1, [sp, #20]
 8011ba8:	e7c3      	b.n	8011b32 <_vfiprintf_r+0x176>
 8011baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8011bae:	4604      	mov	r4, r0
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	e7f0      	b.n	8011b96 <_vfiprintf_r+0x1da>
 8011bb4:	ab03      	add	r3, sp, #12
 8011bb6:	9300      	str	r3, [sp, #0]
 8011bb8:	462a      	mov	r2, r5
 8011bba:	4b16      	ldr	r3, [pc, #88]	; (8011c14 <_vfiprintf_r+0x258>)
 8011bbc:	a904      	add	r1, sp, #16
 8011bbe:	4630      	mov	r0, r6
 8011bc0:	f7fd fb4c 	bl	800f25c <_printf_float>
 8011bc4:	4607      	mov	r7, r0
 8011bc6:	1c78      	adds	r0, r7, #1
 8011bc8:	d1d6      	bne.n	8011b78 <_vfiprintf_r+0x1bc>
 8011bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011bcc:	07d9      	lsls	r1, r3, #31
 8011bce:	d405      	bmi.n	8011bdc <_vfiprintf_r+0x220>
 8011bd0:	89ab      	ldrh	r3, [r5, #12]
 8011bd2:	059a      	lsls	r2, r3, #22
 8011bd4:	d402      	bmi.n	8011bdc <_vfiprintf_r+0x220>
 8011bd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011bd8:	f7ff f8c4 	bl	8010d64 <__retarget_lock_release_recursive>
 8011bdc:	89ab      	ldrh	r3, [r5, #12]
 8011bde:	065b      	lsls	r3, r3, #25
 8011be0:	f53f af12 	bmi.w	8011a08 <_vfiprintf_r+0x4c>
 8011be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011be6:	e711      	b.n	8011a0c <_vfiprintf_r+0x50>
 8011be8:	ab03      	add	r3, sp, #12
 8011bea:	9300      	str	r3, [sp, #0]
 8011bec:	462a      	mov	r2, r5
 8011bee:	4b09      	ldr	r3, [pc, #36]	; (8011c14 <_vfiprintf_r+0x258>)
 8011bf0:	a904      	add	r1, sp, #16
 8011bf2:	4630      	mov	r0, r6
 8011bf4:	f7fd fdd6 	bl	800f7a4 <_printf_i>
 8011bf8:	e7e4      	b.n	8011bc4 <_vfiprintf_r+0x208>
 8011bfa:	bf00      	nop
 8011bfc:	08012528 	.word	0x08012528
 8011c00:	08012548 	.word	0x08012548
 8011c04:	08012508 	.word	0x08012508
 8011c08:	080126c4 	.word	0x080126c4
 8011c0c:	080126ce 	.word	0x080126ce
 8011c10:	0800f25d 	.word	0x0800f25d
 8011c14:	08011997 	.word	0x08011997
 8011c18:	080126ca 	.word	0x080126ca

08011c1c <_sbrk_r>:
 8011c1c:	b538      	push	{r3, r4, r5, lr}
 8011c1e:	4d06      	ldr	r5, [pc, #24]	; (8011c38 <_sbrk_r+0x1c>)
 8011c20:	2300      	movs	r3, #0
 8011c22:	4604      	mov	r4, r0
 8011c24:	4608      	mov	r0, r1
 8011c26:	602b      	str	r3, [r5, #0]
 8011c28:	f7f2 fab4 	bl	8004194 <_sbrk>
 8011c2c:	1c43      	adds	r3, r0, #1
 8011c2e:	d102      	bne.n	8011c36 <_sbrk_r+0x1a>
 8011c30:	682b      	ldr	r3, [r5, #0]
 8011c32:	b103      	cbz	r3, 8011c36 <_sbrk_r+0x1a>
 8011c34:	6023      	str	r3, [r4, #0]
 8011c36:	bd38      	pop	{r3, r4, r5, pc}
 8011c38:	2000b95c 	.word	0x2000b95c

08011c3c <__sread>:
 8011c3c:	b510      	push	{r4, lr}
 8011c3e:	460c      	mov	r4, r1
 8011c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c44:	f000 f922 	bl	8011e8c <_read_r>
 8011c48:	2800      	cmp	r0, #0
 8011c4a:	bfab      	itete	ge
 8011c4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011c4e:	89a3      	ldrhlt	r3, [r4, #12]
 8011c50:	181b      	addge	r3, r3, r0
 8011c52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011c56:	bfac      	ite	ge
 8011c58:	6563      	strge	r3, [r4, #84]	; 0x54
 8011c5a:	81a3      	strhlt	r3, [r4, #12]
 8011c5c:	bd10      	pop	{r4, pc}

08011c5e <__swrite>:
 8011c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c62:	461f      	mov	r7, r3
 8011c64:	898b      	ldrh	r3, [r1, #12]
 8011c66:	05db      	lsls	r3, r3, #23
 8011c68:	4605      	mov	r5, r0
 8011c6a:	460c      	mov	r4, r1
 8011c6c:	4616      	mov	r6, r2
 8011c6e:	d505      	bpl.n	8011c7c <__swrite+0x1e>
 8011c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c74:	2302      	movs	r3, #2
 8011c76:	2200      	movs	r2, #0
 8011c78:	f000 f898 	bl	8011dac <_lseek_r>
 8011c7c:	89a3      	ldrh	r3, [r4, #12]
 8011c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011c86:	81a3      	strh	r3, [r4, #12]
 8011c88:	4632      	mov	r2, r6
 8011c8a:	463b      	mov	r3, r7
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c92:	f000 b817 	b.w	8011cc4 <_write_r>

08011c96 <__sseek>:
 8011c96:	b510      	push	{r4, lr}
 8011c98:	460c      	mov	r4, r1
 8011c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c9e:	f000 f885 	bl	8011dac <_lseek_r>
 8011ca2:	1c43      	adds	r3, r0, #1
 8011ca4:	89a3      	ldrh	r3, [r4, #12]
 8011ca6:	bf15      	itete	ne
 8011ca8:	6560      	strne	r0, [r4, #84]	; 0x54
 8011caa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011cae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011cb2:	81a3      	strheq	r3, [r4, #12]
 8011cb4:	bf18      	it	ne
 8011cb6:	81a3      	strhne	r3, [r4, #12]
 8011cb8:	bd10      	pop	{r4, pc}

08011cba <__sclose>:
 8011cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cbe:	f000 b831 	b.w	8011d24 <_close_r>
	...

08011cc4 <_write_r>:
 8011cc4:	b538      	push	{r3, r4, r5, lr}
 8011cc6:	4d07      	ldr	r5, [pc, #28]	; (8011ce4 <_write_r+0x20>)
 8011cc8:	4604      	mov	r4, r0
 8011cca:	4608      	mov	r0, r1
 8011ccc:	4611      	mov	r1, r2
 8011cce:	2200      	movs	r2, #0
 8011cd0:	602a      	str	r2, [r5, #0]
 8011cd2:	461a      	mov	r2, r3
 8011cd4:	f7f1 fee2 	bl	8003a9c <_write>
 8011cd8:	1c43      	adds	r3, r0, #1
 8011cda:	d102      	bne.n	8011ce2 <_write_r+0x1e>
 8011cdc:	682b      	ldr	r3, [r5, #0]
 8011cde:	b103      	cbz	r3, 8011ce2 <_write_r+0x1e>
 8011ce0:	6023      	str	r3, [r4, #0]
 8011ce2:	bd38      	pop	{r3, r4, r5, pc}
 8011ce4:	2000b95c 	.word	0x2000b95c

08011ce8 <__assert_func>:
 8011ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011cea:	4614      	mov	r4, r2
 8011cec:	461a      	mov	r2, r3
 8011cee:	4b09      	ldr	r3, [pc, #36]	; (8011d14 <__assert_func+0x2c>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	4605      	mov	r5, r0
 8011cf4:	68d8      	ldr	r0, [r3, #12]
 8011cf6:	b14c      	cbz	r4, 8011d0c <__assert_func+0x24>
 8011cf8:	4b07      	ldr	r3, [pc, #28]	; (8011d18 <__assert_func+0x30>)
 8011cfa:	9100      	str	r1, [sp, #0]
 8011cfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011d00:	4906      	ldr	r1, [pc, #24]	; (8011d1c <__assert_func+0x34>)
 8011d02:	462b      	mov	r3, r5
 8011d04:	f000 f81e 	bl	8011d44 <fiprintf>
 8011d08:	f000 f8df 	bl	8011eca <abort>
 8011d0c:	4b04      	ldr	r3, [pc, #16]	; (8011d20 <__assert_func+0x38>)
 8011d0e:	461c      	mov	r4, r3
 8011d10:	e7f3      	b.n	8011cfa <__assert_func+0x12>
 8011d12:	bf00      	nop
 8011d14:	20000018 	.word	0x20000018
 8011d18:	080126d5 	.word	0x080126d5
 8011d1c:	080126e2 	.word	0x080126e2
 8011d20:	08012710 	.word	0x08012710

08011d24 <_close_r>:
 8011d24:	b538      	push	{r3, r4, r5, lr}
 8011d26:	4d06      	ldr	r5, [pc, #24]	; (8011d40 <_close_r+0x1c>)
 8011d28:	2300      	movs	r3, #0
 8011d2a:	4604      	mov	r4, r0
 8011d2c:	4608      	mov	r0, r1
 8011d2e:	602b      	str	r3, [r5, #0]
 8011d30:	f7f2 f9fb 	bl	800412a <_close>
 8011d34:	1c43      	adds	r3, r0, #1
 8011d36:	d102      	bne.n	8011d3e <_close_r+0x1a>
 8011d38:	682b      	ldr	r3, [r5, #0]
 8011d3a:	b103      	cbz	r3, 8011d3e <_close_r+0x1a>
 8011d3c:	6023      	str	r3, [r4, #0]
 8011d3e:	bd38      	pop	{r3, r4, r5, pc}
 8011d40:	2000b95c 	.word	0x2000b95c

08011d44 <fiprintf>:
 8011d44:	b40e      	push	{r1, r2, r3}
 8011d46:	b503      	push	{r0, r1, lr}
 8011d48:	4601      	mov	r1, r0
 8011d4a:	ab03      	add	r3, sp, #12
 8011d4c:	4805      	ldr	r0, [pc, #20]	; (8011d64 <fiprintf+0x20>)
 8011d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d52:	6800      	ldr	r0, [r0, #0]
 8011d54:	9301      	str	r3, [sp, #4]
 8011d56:	f7ff fe31 	bl	80119bc <_vfiprintf_r>
 8011d5a:	b002      	add	sp, #8
 8011d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d60:	b003      	add	sp, #12
 8011d62:	4770      	bx	lr
 8011d64:	20000018 	.word	0x20000018

08011d68 <_fstat_r>:
 8011d68:	b538      	push	{r3, r4, r5, lr}
 8011d6a:	4d07      	ldr	r5, [pc, #28]	; (8011d88 <_fstat_r+0x20>)
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	4604      	mov	r4, r0
 8011d70:	4608      	mov	r0, r1
 8011d72:	4611      	mov	r1, r2
 8011d74:	602b      	str	r3, [r5, #0]
 8011d76:	f7f2 f9e4 	bl	8004142 <_fstat>
 8011d7a:	1c43      	adds	r3, r0, #1
 8011d7c:	d102      	bne.n	8011d84 <_fstat_r+0x1c>
 8011d7e:	682b      	ldr	r3, [r5, #0]
 8011d80:	b103      	cbz	r3, 8011d84 <_fstat_r+0x1c>
 8011d82:	6023      	str	r3, [r4, #0]
 8011d84:	bd38      	pop	{r3, r4, r5, pc}
 8011d86:	bf00      	nop
 8011d88:	2000b95c 	.word	0x2000b95c

08011d8c <_isatty_r>:
 8011d8c:	b538      	push	{r3, r4, r5, lr}
 8011d8e:	4d06      	ldr	r5, [pc, #24]	; (8011da8 <_isatty_r+0x1c>)
 8011d90:	2300      	movs	r3, #0
 8011d92:	4604      	mov	r4, r0
 8011d94:	4608      	mov	r0, r1
 8011d96:	602b      	str	r3, [r5, #0]
 8011d98:	f7f2 f9e3 	bl	8004162 <_isatty>
 8011d9c:	1c43      	adds	r3, r0, #1
 8011d9e:	d102      	bne.n	8011da6 <_isatty_r+0x1a>
 8011da0:	682b      	ldr	r3, [r5, #0]
 8011da2:	b103      	cbz	r3, 8011da6 <_isatty_r+0x1a>
 8011da4:	6023      	str	r3, [r4, #0]
 8011da6:	bd38      	pop	{r3, r4, r5, pc}
 8011da8:	2000b95c 	.word	0x2000b95c

08011dac <_lseek_r>:
 8011dac:	b538      	push	{r3, r4, r5, lr}
 8011dae:	4d07      	ldr	r5, [pc, #28]	; (8011dcc <_lseek_r+0x20>)
 8011db0:	4604      	mov	r4, r0
 8011db2:	4608      	mov	r0, r1
 8011db4:	4611      	mov	r1, r2
 8011db6:	2200      	movs	r2, #0
 8011db8:	602a      	str	r2, [r5, #0]
 8011dba:	461a      	mov	r2, r3
 8011dbc:	f7f2 f9dc 	bl	8004178 <_lseek>
 8011dc0:	1c43      	adds	r3, r0, #1
 8011dc2:	d102      	bne.n	8011dca <_lseek_r+0x1e>
 8011dc4:	682b      	ldr	r3, [r5, #0]
 8011dc6:	b103      	cbz	r3, 8011dca <_lseek_r+0x1e>
 8011dc8:	6023      	str	r3, [r4, #0]
 8011dca:	bd38      	pop	{r3, r4, r5, pc}
 8011dcc:	2000b95c 	.word	0x2000b95c

08011dd0 <__ascii_mbtowc>:
 8011dd0:	b082      	sub	sp, #8
 8011dd2:	b901      	cbnz	r1, 8011dd6 <__ascii_mbtowc+0x6>
 8011dd4:	a901      	add	r1, sp, #4
 8011dd6:	b142      	cbz	r2, 8011dea <__ascii_mbtowc+0x1a>
 8011dd8:	b14b      	cbz	r3, 8011dee <__ascii_mbtowc+0x1e>
 8011dda:	7813      	ldrb	r3, [r2, #0]
 8011ddc:	600b      	str	r3, [r1, #0]
 8011dde:	7812      	ldrb	r2, [r2, #0]
 8011de0:	1e10      	subs	r0, r2, #0
 8011de2:	bf18      	it	ne
 8011de4:	2001      	movne	r0, #1
 8011de6:	b002      	add	sp, #8
 8011de8:	4770      	bx	lr
 8011dea:	4610      	mov	r0, r2
 8011dec:	e7fb      	b.n	8011de6 <__ascii_mbtowc+0x16>
 8011dee:	f06f 0001 	mvn.w	r0, #1
 8011df2:	e7f8      	b.n	8011de6 <__ascii_mbtowc+0x16>

08011df4 <memmove>:
 8011df4:	4288      	cmp	r0, r1
 8011df6:	b510      	push	{r4, lr}
 8011df8:	eb01 0402 	add.w	r4, r1, r2
 8011dfc:	d902      	bls.n	8011e04 <memmove+0x10>
 8011dfe:	4284      	cmp	r4, r0
 8011e00:	4623      	mov	r3, r4
 8011e02:	d807      	bhi.n	8011e14 <memmove+0x20>
 8011e04:	1e43      	subs	r3, r0, #1
 8011e06:	42a1      	cmp	r1, r4
 8011e08:	d008      	beq.n	8011e1c <memmove+0x28>
 8011e0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e12:	e7f8      	b.n	8011e06 <memmove+0x12>
 8011e14:	4402      	add	r2, r0
 8011e16:	4601      	mov	r1, r0
 8011e18:	428a      	cmp	r2, r1
 8011e1a:	d100      	bne.n	8011e1e <memmove+0x2a>
 8011e1c:	bd10      	pop	{r4, pc}
 8011e1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e26:	e7f7      	b.n	8011e18 <memmove+0x24>

08011e28 <__malloc_lock>:
 8011e28:	4801      	ldr	r0, [pc, #4]	; (8011e30 <__malloc_lock+0x8>)
 8011e2a:	f7fe bf9a 	b.w	8010d62 <__retarget_lock_acquire_recursive>
 8011e2e:	bf00      	nop
 8011e30:	2000b954 	.word	0x2000b954

08011e34 <__malloc_unlock>:
 8011e34:	4801      	ldr	r0, [pc, #4]	; (8011e3c <__malloc_unlock+0x8>)
 8011e36:	f7fe bf95 	b.w	8010d64 <__retarget_lock_release_recursive>
 8011e3a:	bf00      	nop
 8011e3c:	2000b954 	.word	0x2000b954

08011e40 <_realloc_r>:
 8011e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e42:	4607      	mov	r7, r0
 8011e44:	4614      	mov	r4, r2
 8011e46:	460e      	mov	r6, r1
 8011e48:	b921      	cbnz	r1, 8011e54 <_realloc_r+0x14>
 8011e4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011e4e:	4611      	mov	r1, r2
 8011e50:	f7ff bbd4 	b.w	80115fc <_malloc_r>
 8011e54:	b922      	cbnz	r2, 8011e60 <_realloc_r+0x20>
 8011e56:	f7ff fb81 	bl	801155c <_free_r>
 8011e5a:	4625      	mov	r5, r4
 8011e5c:	4628      	mov	r0, r5
 8011e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e60:	f000 f83a 	bl	8011ed8 <_malloc_usable_size_r>
 8011e64:	42a0      	cmp	r0, r4
 8011e66:	d20f      	bcs.n	8011e88 <_realloc_r+0x48>
 8011e68:	4621      	mov	r1, r4
 8011e6a:	4638      	mov	r0, r7
 8011e6c:	f7ff fbc6 	bl	80115fc <_malloc_r>
 8011e70:	4605      	mov	r5, r0
 8011e72:	2800      	cmp	r0, #0
 8011e74:	d0f2      	beq.n	8011e5c <_realloc_r+0x1c>
 8011e76:	4631      	mov	r1, r6
 8011e78:	4622      	mov	r2, r4
 8011e7a:	f7fd f939 	bl	800f0f0 <memcpy>
 8011e7e:	4631      	mov	r1, r6
 8011e80:	4638      	mov	r0, r7
 8011e82:	f7ff fb6b 	bl	801155c <_free_r>
 8011e86:	e7e9      	b.n	8011e5c <_realloc_r+0x1c>
 8011e88:	4635      	mov	r5, r6
 8011e8a:	e7e7      	b.n	8011e5c <_realloc_r+0x1c>

08011e8c <_read_r>:
 8011e8c:	b538      	push	{r3, r4, r5, lr}
 8011e8e:	4d07      	ldr	r5, [pc, #28]	; (8011eac <_read_r+0x20>)
 8011e90:	4604      	mov	r4, r0
 8011e92:	4608      	mov	r0, r1
 8011e94:	4611      	mov	r1, r2
 8011e96:	2200      	movs	r2, #0
 8011e98:	602a      	str	r2, [r5, #0]
 8011e9a:	461a      	mov	r2, r3
 8011e9c:	f7f2 f928 	bl	80040f0 <_read>
 8011ea0:	1c43      	adds	r3, r0, #1
 8011ea2:	d102      	bne.n	8011eaa <_read_r+0x1e>
 8011ea4:	682b      	ldr	r3, [r5, #0]
 8011ea6:	b103      	cbz	r3, 8011eaa <_read_r+0x1e>
 8011ea8:	6023      	str	r3, [r4, #0]
 8011eaa:	bd38      	pop	{r3, r4, r5, pc}
 8011eac:	2000b95c 	.word	0x2000b95c

08011eb0 <__ascii_wctomb>:
 8011eb0:	b149      	cbz	r1, 8011ec6 <__ascii_wctomb+0x16>
 8011eb2:	2aff      	cmp	r2, #255	; 0xff
 8011eb4:	bf85      	ittet	hi
 8011eb6:	238a      	movhi	r3, #138	; 0x8a
 8011eb8:	6003      	strhi	r3, [r0, #0]
 8011eba:	700a      	strbls	r2, [r1, #0]
 8011ebc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011ec0:	bf98      	it	ls
 8011ec2:	2001      	movls	r0, #1
 8011ec4:	4770      	bx	lr
 8011ec6:	4608      	mov	r0, r1
 8011ec8:	4770      	bx	lr

08011eca <abort>:
 8011eca:	b508      	push	{r3, lr}
 8011ecc:	2006      	movs	r0, #6
 8011ece:	f000 f833 	bl	8011f38 <raise>
 8011ed2:	2001      	movs	r0, #1
 8011ed4:	f7f2 f902 	bl	80040dc <_exit>

08011ed8 <_malloc_usable_size_r>:
 8011ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011edc:	1f18      	subs	r0, r3, #4
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	bfbc      	itt	lt
 8011ee2:	580b      	ldrlt	r3, [r1, r0]
 8011ee4:	18c0      	addlt	r0, r0, r3
 8011ee6:	4770      	bx	lr

08011ee8 <_raise_r>:
 8011ee8:	291f      	cmp	r1, #31
 8011eea:	b538      	push	{r3, r4, r5, lr}
 8011eec:	4604      	mov	r4, r0
 8011eee:	460d      	mov	r5, r1
 8011ef0:	d904      	bls.n	8011efc <_raise_r+0x14>
 8011ef2:	2316      	movs	r3, #22
 8011ef4:	6003      	str	r3, [r0, #0]
 8011ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011efa:	bd38      	pop	{r3, r4, r5, pc}
 8011efc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011efe:	b112      	cbz	r2, 8011f06 <_raise_r+0x1e>
 8011f00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f04:	b94b      	cbnz	r3, 8011f1a <_raise_r+0x32>
 8011f06:	4620      	mov	r0, r4
 8011f08:	f000 f830 	bl	8011f6c <_getpid_r>
 8011f0c:	462a      	mov	r2, r5
 8011f0e:	4601      	mov	r1, r0
 8011f10:	4620      	mov	r0, r4
 8011f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f16:	f000 b817 	b.w	8011f48 <_kill_r>
 8011f1a:	2b01      	cmp	r3, #1
 8011f1c:	d00a      	beq.n	8011f34 <_raise_r+0x4c>
 8011f1e:	1c59      	adds	r1, r3, #1
 8011f20:	d103      	bne.n	8011f2a <_raise_r+0x42>
 8011f22:	2316      	movs	r3, #22
 8011f24:	6003      	str	r3, [r0, #0]
 8011f26:	2001      	movs	r0, #1
 8011f28:	e7e7      	b.n	8011efa <_raise_r+0x12>
 8011f2a:	2400      	movs	r4, #0
 8011f2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011f30:	4628      	mov	r0, r5
 8011f32:	4798      	blx	r3
 8011f34:	2000      	movs	r0, #0
 8011f36:	e7e0      	b.n	8011efa <_raise_r+0x12>

08011f38 <raise>:
 8011f38:	4b02      	ldr	r3, [pc, #8]	; (8011f44 <raise+0xc>)
 8011f3a:	4601      	mov	r1, r0
 8011f3c:	6818      	ldr	r0, [r3, #0]
 8011f3e:	f7ff bfd3 	b.w	8011ee8 <_raise_r>
 8011f42:	bf00      	nop
 8011f44:	20000018 	.word	0x20000018

08011f48 <_kill_r>:
 8011f48:	b538      	push	{r3, r4, r5, lr}
 8011f4a:	4d07      	ldr	r5, [pc, #28]	; (8011f68 <_kill_r+0x20>)
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	4604      	mov	r4, r0
 8011f50:	4608      	mov	r0, r1
 8011f52:	4611      	mov	r1, r2
 8011f54:	602b      	str	r3, [r5, #0]
 8011f56:	f7f2 f8b1 	bl	80040bc <_kill>
 8011f5a:	1c43      	adds	r3, r0, #1
 8011f5c:	d102      	bne.n	8011f64 <_kill_r+0x1c>
 8011f5e:	682b      	ldr	r3, [r5, #0]
 8011f60:	b103      	cbz	r3, 8011f64 <_kill_r+0x1c>
 8011f62:	6023      	str	r3, [r4, #0]
 8011f64:	bd38      	pop	{r3, r4, r5, pc}
 8011f66:	bf00      	nop
 8011f68:	2000b95c 	.word	0x2000b95c

08011f6c <_getpid_r>:
 8011f6c:	f7f2 b89e 	b.w	80040ac <_getpid>

08011f70 <sqrt>:
 8011f70:	b538      	push	{r3, r4, r5, lr}
 8011f72:	ed2d 8b02 	vpush	{d8}
 8011f76:	ec55 4b10 	vmov	r4, r5, d0
 8011f7a:	f000 f82d 	bl	8011fd8 <__ieee754_sqrt>
 8011f7e:	4b15      	ldr	r3, [pc, #84]	; (8011fd4 <sqrt+0x64>)
 8011f80:	eeb0 8a40 	vmov.f32	s16, s0
 8011f84:	eef0 8a60 	vmov.f32	s17, s1
 8011f88:	f993 3000 	ldrsb.w	r3, [r3]
 8011f8c:	3301      	adds	r3, #1
 8011f8e:	d019      	beq.n	8011fc4 <sqrt+0x54>
 8011f90:	4622      	mov	r2, r4
 8011f92:	462b      	mov	r3, r5
 8011f94:	4620      	mov	r0, r4
 8011f96:	4629      	mov	r1, r5
 8011f98:	f7ee fdd0 	bl	8000b3c <__aeabi_dcmpun>
 8011f9c:	b990      	cbnz	r0, 8011fc4 <sqrt+0x54>
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	4620      	mov	r0, r4
 8011fa4:	4629      	mov	r1, r5
 8011fa6:	f7ee fda1 	bl	8000aec <__aeabi_dcmplt>
 8011faa:	b158      	cbz	r0, 8011fc4 <sqrt+0x54>
 8011fac:	f7fd f876 	bl	800f09c <__errno>
 8011fb0:	2321      	movs	r3, #33	; 0x21
 8011fb2:	6003      	str	r3, [r0, #0]
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	4610      	mov	r0, r2
 8011fba:	4619      	mov	r1, r3
 8011fbc:	f7ee fc4e 	bl	800085c <__aeabi_ddiv>
 8011fc0:	ec41 0b18 	vmov	d8, r0, r1
 8011fc4:	eeb0 0a48 	vmov.f32	s0, s16
 8011fc8:	eef0 0a68 	vmov.f32	s1, s17
 8011fcc:	ecbd 8b02 	vpop	{d8}
 8011fd0:	bd38      	pop	{r3, r4, r5, pc}
 8011fd2:	bf00      	nop
 8011fd4:	200001e8 	.word	0x200001e8

08011fd8 <__ieee754_sqrt>:
 8011fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fdc:	ec55 4b10 	vmov	r4, r5, d0
 8011fe0:	4e56      	ldr	r6, [pc, #344]	; (801213c <__ieee754_sqrt+0x164>)
 8011fe2:	43ae      	bics	r6, r5
 8011fe4:	ee10 0a10 	vmov	r0, s0
 8011fe8:	ee10 3a10 	vmov	r3, s0
 8011fec:	4629      	mov	r1, r5
 8011fee:	462a      	mov	r2, r5
 8011ff0:	d110      	bne.n	8012014 <__ieee754_sqrt+0x3c>
 8011ff2:	ee10 2a10 	vmov	r2, s0
 8011ff6:	462b      	mov	r3, r5
 8011ff8:	f7ee fb06 	bl	8000608 <__aeabi_dmul>
 8011ffc:	4602      	mov	r2, r0
 8011ffe:	460b      	mov	r3, r1
 8012000:	4620      	mov	r0, r4
 8012002:	4629      	mov	r1, r5
 8012004:	f7ee f94a 	bl	800029c <__adddf3>
 8012008:	4604      	mov	r4, r0
 801200a:	460d      	mov	r5, r1
 801200c:	ec45 4b10 	vmov	d0, r4, r5
 8012010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012014:	2d00      	cmp	r5, #0
 8012016:	dc10      	bgt.n	801203a <__ieee754_sqrt+0x62>
 8012018:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801201c:	4330      	orrs	r0, r6
 801201e:	d0f5      	beq.n	801200c <__ieee754_sqrt+0x34>
 8012020:	b15d      	cbz	r5, 801203a <__ieee754_sqrt+0x62>
 8012022:	ee10 2a10 	vmov	r2, s0
 8012026:	462b      	mov	r3, r5
 8012028:	ee10 0a10 	vmov	r0, s0
 801202c:	f7ee f934 	bl	8000298 <__aeabi_dsub>
 8012030:	4602      	mov	r2, r0
 8012032:	460b      	mov	r3, r1
 8012034:	f7ee fc12 	bl	800085c <__aeabi_ddiv>
 8012038:	e7e6      	b.n	8012008 <__ieee754_sqrt+0x30>
 801203a:	1509      	asrs	r1, r1, #20
 801203c:	d076      	beq.n	801212c <__ieee754_sqrt+0x154>
 801203e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012042:	07ce      	lsls	r6, r1, #31
 8012044:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8012048:	bf5e      	ittt	pl
 801204a:	0fda      	lsrpl	r2, r3, #31
 801204c:	005b      	lslpl	r3, r3, #1
 801204e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8012052:	0fda      	lsrs	r2, r3, #31
 8012054:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8012058:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801205c:	2000      	movs	r0, #0
 801205e:	106d      	asrs	r5, r5, #1
 8012060:	005b      	lsls	r3, r3, #1
 8012062:	f04f 0e16 	mov.w	lr, #22
 8012066:	4684      	mov	ip, r0
 8012068:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801206c:	eb0c 0401 	add.w	r4, ip, r1
 8012070:	4294      	cmp	r4, r2
 8012072:	bfde      	ittt	le
 8012074:	1b12      	suble	r2, r2, r4
 8012076:	eb04 0c01 	addle.w	ip, r4, r1
 801207a:	1840      	addle	r0, r0, r1
 801207c:	0052      	lsls	r2, r2, #1
 801207e:	f1be 0e01 	subs.w	lr, lr, #1
 8012082:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8012086:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801208a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801208e:	d1ed      	bne.n	801206c <__ieee754_sqrt+0x94>
 8012090:	4671      	mov	r1, lr
 8012092:	2720      	movs	r7, #32
 8012094:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8012098:	4562      	cmp	r2, ip
 801209a:	eb04 060e 	add.w	r6, r4, lr
 801209e:	dc02      	bgt.n	80120a6 <__ieee754_sqrt+0xce>
 80120a0:	d113      	bne.n	80120ca <__ieee754_sqrt+0xf2>
 80120a2:	429e      	cmp	r6, r3
 80120a4:	d811      	bhi.n	80120ca <__ieee754_sqrt+0xf2>
 80120a6:	2e00      	cmp	r6, #0
 80120a8:	eb06 0e04 	add.w	lr, r6, r4
 80120ac:	da43      	bge.n	8012136 <__ieee754_sqrt+0x15e>
 80120ae:	f1be 0f00 	cmp.w	lr, #0
 80120b2:	db40      	blt.n	8012136 <__ieee754_sqrt+0x15e>
 80120b4:	f10c 0801 	add.w	r8, ip, #1
 80120b8:	eba2 020c 	sub.w	r2, r2, ip
 80120bc:	429e      	cmp	r6, r3
 80120be:	bf88      	it	hi
 80120c0:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80120c4:	1b9b      	subs	r3, r3, r6
 80120c6:	4421      	add	r1, r4
 80120c8:	46c4      	mov	ip, r8
 80120ca:	0052      	lsls	r2, r2, #1
 80120cc:	3f01      	subs	r7, #1
 80120ce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80120d2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80120d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80120da:	d1dd      	bne.n	8012098 <__ieee754_sqrt+0xc0>
 80120dc:	4313      	orrs	r3, r2
 80120de:	d006      	beq.n	80120ee <__ieee754_sqrt+0x116>
 80120e0:	1c4c      	adds	r4, r1, #1
 80120e2:	bf13      	iteet	ne
 80120e4:	3101      	addne	r1, #1
 80120e6:	3001      	addeq	r0, #1
 80120e8:	4639      	moveq	r1, r7
 80120ea:	f021 0101 	bicne.w	r1, r1, #1
 80120ee:	1043      	asrs	r3, r0, #1
 80120f0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80120f4:	0849      	lsrs	r1, r1, #1
 80120f6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80120fa:	07c2      	lsls	r2, r0, #31
 80120fc:	bf48      	it	mi
 80120fe:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8012102:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8012106:	460c      	mov	r4, r1
 8012108:	463d      	mov	r5, r7
 801210a:	e77f      	b.n	801200c <__ieee754_sqrt+0x34>
 801210c:	0ada      	lsrs	r2, r3, #11
 801210e:	3815      	subs	r0, #21
 8012110:	055b      	lsls	r3, r3, #21
 8012112:	2a00      	cmp	r2, #0
 8012114:	d0fa      	beq.n	801210c <__ieee754_sqrt+0x134>
 8012116:	02d7      	lsls	r7, r2, #11
 8012118:	d50a      	bpl.n	8012130 <__ieee754_sqrt+0x158>
 801211a:	f1c1 0420 	rsb	r4, r1, #32
 801211e:	fa23 f404 	lsr.w	r4, r3, r4
 8012122:	1e4d      	subs	r5, r1, #1
 8012124:	408b      	lsls	r3, r1
 8012126:	4322      	orrs	r2, r4
 8012128:	1b41      	subs	r1, r0, r5
 801212a:	e788      	b.n	801203e <__ieee754_sqrt+0x66>
 801212c:	4608      	mov	r0, r1
 801212e:	e7f0      	b.n	8012112 <__ieee754_sqrt+0x13a>
 8012130:	0052      	lsls	r2, r2, #1
 8012132:	3101      	adds	r1, #1
 8012134:	e7ef      	b.n	8012116 <__ieee754_sqrt+0x13e>
 8012136:	46e0      	mov	r8, ip
 8012138:	e7be      	b.n	80120b8 <__ieee754_sqrt+0xe0>
 801213a:	bf00      	nop
 801213c:	7ff00000 	.word	0x7ff00000

08012140 <_init>:
 8012140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012142:	bf00      	nop
 8012144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012146:	bc08      	pop	{r3}
 8012148:	469e      	mov	lr, r3
 801214a:	4770      	bx	lr

0801214c <_fini>:
 801214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801214e:	bf00      	nop
 8012150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012152:	bc08      	pop	{r3}
 8012154:	469e      	mov	lr, r3
 8012156:	4770      	bx	lr
