
Robochess_2021_mainboard_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010100  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  080102a0  080102a0  000202a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106f4  080106f4  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  080106f4  080106f4  000206f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106fc  080106fc  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106fc  080106fc  000206fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010700  08010700  00020700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08010704  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000091bc  20000080  08010784  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000923c  08010784  0003923c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027360  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005784  00000000  00000000  00057410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  0005cb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af0  00000000  00000000  0005e890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d676  00000000  00000000  00060380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022868  00000000  00000000  0007d9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8953  00000000  00000000  000a025e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00148bb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008164  00000000  00000000  00148c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010288 	.word	0x08010288

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08010288 	.word	0x08010288

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <AS5600_M1_getPOS>:

bool FLAG_AS5600_M1 = HAL_OK, FLAG_AS5600_M2 = HAL_OK;



void AS5600_M1_getPOS(){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1,0x36<<1,_RAWANGLEAddressLSB,1,(uint8_t*)&data_AS5600_M1,2);
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	9301      	str	r3, [sp, #4]
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <AS5600_M1_getPOS+0x20>)
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2301      	movs	r3, #1
 8000f00:	220d      	movs	r2, #13
 8000f02:	216c      	movs	r1, #108	; 0x6c
 8000f04:	4803      	ldr	r0, [pc, #12]	; (8000f14 <AS5600_M1_getPOS+0x24>)
 8000f06:	f005 fdbd 	bl	8006a84 <HAL_I2C_Mem_Read_DMA>
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200089b6 	.word	0x200089b6
 8000f14:	20008d34 	.word	0x20008d34

08000f18 <AS5600_M2_getPOS>:
void AS5600_M2_getPOS(){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c3,0x36<<1,_RAWANGLEAddressLSB,1,(uint8_t *)&data_AS5600_M2,2);
 8000f1e:	2302      	movs	r3, #2
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <AS5600_M2_getPOS+0x20>)
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	220d      	movs	r2, #13
 8000f2a:	216c      	movs	r1, #108	; 0x6c
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <AS5600_M2_getPOS+0x24>)
 8000f2e:	f005 fda9 	bl	8006a84 <HAL_I2C_Mem_Read_DMA>
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200089b4 	.word	0x200089b4
 8000f3c:	20008c80 	.word	0x20008c80

08000f40 <AS5600_Start_Update>:
		case 55: return 2;  //phat hien nam cham binh thuong
		case 23: return 3; //phat hien nam cham yeu
	}
	return data_status[0];
}
void AS5600_Start_Update(){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	TIM_AS5600->ARR = 1000;         //for frequency = 100hz
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <AS5600_Start_Update+0x18>)
 8000f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&TIM_AS5600_UPDATE);
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <AS5600_Start_Update+0x1c>)
 8000f4e:	f008 fe5d 	bl	8009c0c <HAL_TIM_Base_Start_IT>
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40014400 	.word	0x40014400
 8000f5c:	2000904c 	.word	0x2000904c

08000f60 <AS5600_Start_Update_Low>:
void AS5600_Start_Update_Low(){
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
	TIM_AS5600->ARR = 1000;         //for frequency = 100hz
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <AS5600_Start_Update_Low+0x18>)
 8000f66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40014400 	.word	0x40014400

08000f7c <AS5600_Start_Update_High>:
void AS5600_Start_Update_High(){
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
	TIM_AS5600->ARR = 800;          //for frequency = 8khz
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <AS5600_Start_Update_High+0x18>)
 8000f82:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40014400 	.word	0x40014400

08000f98 <AccelStepper_init>:

#include "AccelStepper.h"
#include "config.h"

void AccelStepper_init(struct AccelStepperData * AccelMotor,TIM_HandleTypeDef htim,uint16_t startPosition, uint32_t maxSpeed,uint32_t maxAccel){
 8000f98:	b084      	sub	sp, #16
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	f107 0014 	add.w	r0, r7, #20
 8000fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  //khoi tao thu vien
	AccelMotor->_currentPos = 0;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	631a      	str	r2, [r3, #48]	; 0x30
	AccelMotor->_targetPos = 0;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
	AccelMotor->_speed = 0.0f;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	605a      	str	r2, [r3, #4]
	AccelMotor->_maxSpeed = 1.0f;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fc4:	609a      	str	r2, [r3, #8]
	AccelMotor->_acceleration = 0.0f;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
	AccelMotor->_sqrt_twoa = 1.0f;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fd4:	611a      	str	r2, [r3, #16]
	AccelMotor->_stepInterval = 0;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	615a      	str	r2, [r3, #20]
	AccelMotor->_lastStepTime = 0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
	AccelMotor->_n = 0;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	61da      	str	r2, [r3, #28]
	AccelMotor->_c0 = 0.0f;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
	AccelMotor->_cn = 0.0f;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	625a      	str	r2, [r3, #36]	; 0x24
	AccelMotor->_cmin = 1.0f;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ffe:	629a      	str	r2, [r3, #40]	; 0x28
	AccelMotor->_direction = DIRECTION_CCW;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	setMaxSpeed(AccelMotor,maxSpeed);  
 8001008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001012:	eeb0 0a67 	vmov.f32	s0, s15
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f83e 	bl	8001098 <setMaxSpeed>
	setAcceleration(AccelMotor,maxAccel);
 800101c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001026:	eeb0 0a67 	vmov.f32	s0, s15
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f880 	bl	8001130 <setAcceleration>
	AccelMotor->_currentPos = startPosition;  //setup vi tri ban dau
 8001030:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	631a      	str	r2, [r3, #48]	; 0x30
	AccelMotor->_targetPos=AccelMotor->_currentPos;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	601a      	str	r2, [r3, #0]
	computeNewSpeed(AccelMotor);  //tinh toan buoc dau tien
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f8e9 	bl	8001218 <computeNewSpeed>
	run(AccelMotor);          
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f9e0 	bl	800140c <run>
  if(AccelMotor->usingTimChanelN==ON) 	
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001052:	2b01      	cmp	r3, #1
 8001054:	d108      	bne.n	8001068 <AccelStepper_init+0xd0>
		HAL_TIMEx_PWMN_Start_IT(&htim,AccelMotor->TIM_CHANEL); 
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f009 fda9 	bl	800abb8 <HAL_TIMEx_PWMN_Start_IT>
 8001066:	e007      	b.n	8001078 <AccelStepper_init+0xe0>
	else
	HAL_TIM_PWM_Start_IT(&htim,AccelMotor->TIM_CHANEL);  //khoi dong TIMER tao xung STEP
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f008 ff36 	bl	8009ee4 <HAL_TIM_PWM_Start_IT>
	HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_SET);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001082:	2201      	movs	r2, #1
 8001084:	4619      	mov	r1, r3
 8001086:	f005 fb55 	bl	8006734 <HAL_GPIO_WritePin>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001094:	b004      	add	sp, #16
 8001096:	4770      	bx	lr

08001098 <setMaxSpeed>:

void setMaxSpeed(struct AccelStepperData * AccelMotor,float speed)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	ed87 0a00 	vstr	s0, [r7]
    if (speed < 0.0f)
 80010a4:	edd7 7a00 	vldr	s15, [r7]
 80010a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b0:	d505      	bpl.n	80010be <setMaxSpeed+0x26>
       speed = -speed;
 80010b2:	edd7 7a00 	vldr	s15, [r7]
 80010b6:	eef1 7a67 	vneg.f32	s15, s15
 80010ba:	edc7 7a00 	vstr	s15, [r7]
    if (AccelMotor->_maxSpeed != speed)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80010c4:	ed97 7a00 	vldr	s14, [r7]
 80010c8:	eeb4 7a67 	vcmp.f32	s14, s15
 80010cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d0:	d027      	beq.n	8001122 <setMaxSpeed+0x8a>
    {
	AccelMotor->_maxSpeed = speed;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	609a      	str	r2, [r3, #8]
	AccelMotor->_cmin = 1000000.0f / speed;
 80010d8:	eddf 6a14 	vldr	s13, [pc, #80]	; 800112c <setMaxSpeed+0x94>
 80010dc:	ed97 7a00 	vldr	s14, [r7]
 80010e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	// Recompute _n from current speed and adjust speed if accelerating or cruising
	if (AccelMotor->_n > 0)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	dd17      	ble.n	8001122 <setMaxSpeed+0x8a>
	{
	    AccelMotor->_n = (long)((AccelMotor->_speed * AccelMotor->_speed) / (2.0f * AccelMotor->_acceleration)); // Equation 16
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80010fe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	edd3 7a03 	vldr	s15, [r3, #12]
 8001108:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800110c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001114:	ee17 2a90 	vmov	r2, s15
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	61da      	str	r2, [r3, #28]
	    computeNewSpeed(AccelMotor);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f87b 	bl	8001218 <computeNewSpeed>
	}
    }
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	49742400 	.word	0x49742400

08001130 <setAcceleration>:
void setAcceleration(struct AccelStepperData * AccelMotor,float acceleration)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	ed87 0a00 	vstr	s0, [r7]
    if (acceleration == 0.0f)
 800113c:	edd7 7a00 	vldr	s15, [r7]
 8001140:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001148:	d058      	beq.n	80011fc <setAcceleration+0xcc>
	return;
    if (acceleration < 0.0f)
 800114a:	edd7 7a00 	vldr	s15, [r7]
 800114e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001156:	d505      	bpl.n	8001164 <setAcceleration+0x34>
      acceleration = -acceleration;
 8001158:	edd7 7a00 	vldr	s15, [r7]
 800115c:	eef1 7a67 	vneg.f32	s15, s15
 8001160:	edc7 7a00 	vstr	s15, [r7]
    if (AccelMotor->_acceleration != acceleration)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edd3 7a03 	vldr	s15, [r3, #12]
 800116a:	ed97 7a00 	vldr	s14, [r7]
 800116e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001176:	d042      	beq.n	80011fe <setAcceleration+0xce>
    {
	// Recompute _n per Equation 17
	AccelMotor->_n = AccelMotor->_n * (AccelMotor->_acceleration / acceleration);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	ed93 6a03 	vldr	s12, [r3, #12]
 800118a:	edd7 6a00 	vldr	s13, [r7]
 800118e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800119a:	ee17 2a90 	vmov	r2, s15
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	61da      	str	r2, [r3, #28]
	// New c0 per Equation 7, with correction per Equation 15
	AccelMotor->_c0 = 0.676f * sqrt(2.0f / acceleration) * 1000000.0f; // Equation 15
 80011a2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80011a6:	edd7 7a00 	vldr	s15, [r7]
 80011aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011ae:	ee16 0a90 	vmov	r0, s13
 80011b2:	f7ff f9c9 	bl	8000548 <__aeabi_f2d>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	ec43 2b10 	vmov	d0, r2, r3
 80011be:	f00e ff7b 	bl	80100b8 <sqrt>
 80011c2:	ec51 0b10 	vmov	r0, r1, d0
 80011c6:	a310      	add	r3, pc, #64	; (adr r3, 8001208 <setAcceleration+0xd8>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff fa14 	bl	80005f8 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	a30d      	add	r3, pc, #52	; (adr r3, 8001210 <setAcceleration+0xe0>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff fa0b 	bl	80005f8 <__aeabi_dmul>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f7ff fcb5 	bl	8000b58 <__aeabi_d2f>
 80011ee:	4602      	mov	r2, r0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	621a      	str	r2, [r3, #32]
	AccelMotor->_acceleration = acceleration;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	e000      	b.n	80011fe <setAcceleration+0xce>
	return;
 80011fc:	bf00      	nop
	//computeNewSpeed(AccelMotor);
    }
}
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	f3af 8000 	nop.w
 8001208:	c0000000 	.word	0xc0000000
 800120c:	3fe5a1ca 	.word	0x3fe5a1ca
 8001210:	00000000 	.word	0x00000000
 8001214:	412e8480 	.word	0x412e8480

08001218 <computeNewSpeed>:

void computeNewSpeed(struct AccelStepperData * AccelMotor)  //tinh toan 1 toc do moi
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  long distanceTo = distanceToGo(AccelMotor); // +ve is clockwise from curent location - duong neu cung chieu kim dong ho tu vi tri hien tai
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 f8e3 	bl	80013ec <distanceToGo>
 8001226:	60f8      	str	r0, [r7, #12]

  long stepsToStop = (long)((AccelMotor->_speed * AccelMotor->_speed) / (2.0f * AccelMotor->_acceleration)); // Equation 16 - phuong trinh 16 theo giai thuat By David Austin
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	ed93 7a01 	vldr	s14, [r3, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	edd3 7a01 	vldr	s15, [r3, #4]
 8001234:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	edd3 7a03 	vldr	s15, [r3, #12]
 800123e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001246:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800124a:	ee17 3a90 	vmov	r3, s15
 800124e:	60bb      	str	r3, [r7, #8]

  if (distanceTo == 0 && stepsToStop <= 1){
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10d      	bne.n	8001272 <computeNewSpeed+0x5a>
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	2b01      	cmp	r3, #1
 800125a:	dc0a      	bgt.n	8001272 <computeNewSpeed+0x5a>
	// We are at the target and its time to stop -  da den vi tri muc tieu va bay gio dung lai
	  AccelMotor->_stepInterval = 0;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
	  AccelMotor->_speed = 0.0f;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
	  AccelMotor->_n = 0;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
	  return;
 8001270:	e0b7      	b.n	80013e2 <computeNewSpeed+0x1ca>
  }

  if (distanceTo > 0){
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	dd24      	ble.n	80012c2 <computeNewSpeed+0xaa>
	  // We are anticlockwise from the target  -  chung ta dang o vi tri nguoc chieu kim dong ho 
	  // Need to go clockwise from here, maybe decelerate now  -  can quay theo chieu kim dong ho, co th giam toc ngay
	  if (AccelMotor->_n > 0){
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	2b00      	cmp	r3, #0
 800127e:	dd0d      	ble.n	800129c <computeNewSpeed+0x84>
	    // Currently accelerating, need to decel now? Or maybe going the wrong way?
			// hien tai dang tang toc,can giam toc bay ngay? hoac co the di sai huong
	    if ((stepsToStop >= distanceTo) || AccelMotor->_direction == DIRECTION_CCW)
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	da04      	bge.n	8001292 <computeNewSpeed+0x7a>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800128e:	2b00      	cmp	r3, #0
 8001290:	d140      	bne.n	8001314 <computeNewSpeed+0xfc>
		     AccelMotor->_n = -stepsToStop; // Start deceleration - bat dau giam toc
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	425a      	negs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	61da      	str	r2, [r3, #28]
 800129a:	e03b      	b.n	8001314 <computeNewSpeed+0xfc>
	  }
	  else if (AccelMotor->_n < 0){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	da37      	bge.n	8001314 <computeNewSpeed+0xfc>
	    // Currently decelerating, need to accel again? - hien tai dang giam toc ,can tang toc lai
	    if ((stepsToStop < distanceTo) && AccelMotor->_direction == DIRECTION_CW)
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	da33      	bge.n	8001314 <computeNewSpeed+0xfc>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d12e      	bne.n	8001314 <computeNewSpeed+0xfc>
		     AccelMotor->_n = -AccelMotor->_n; // Start accceleration  //bat dau tang toc
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	425a      	negs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	61da      	str	r2, [r3, #28]
 80012c0:	e028      	b.n	8001314 <computeNewSpeed+0xfc>
	  }
  }
  else if (distanceTo < 0){
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	da25      	bge.n	8001314 <computeNewSpeed+0xfc>
	// We are clockwise from the target - chung ta dang o vi tri cung chieu kim dong ho
	// Need to go anticlockwise from here, maybe decelerate - can quay theo chieu nguoc lai ,co the giam toc
	   if (AccelMotor->_n > 0){
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	dd0e      	ble.n	80012ee <computeNewSpeed+0xd6>
	      // Currently accelerating, need to decel now? Or maybe going the wrong way?
			  // hien dang tang toc,can giam toc ngay? hoac dang di sai huong?
	      if ((stepsToStop >= -distanceTo) || AccelMotor->_direction == DIRECTION_CW)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	425b      	negs	r3, r3
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	da04      	bge.n	80012e4 <computeNewSpeed+0xcc>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d117      	bne.n	8001314 <computeNewSpeed+0xfc>
		        AccelMotor->_n = -stepsToStop; // Start deceleration - bat dau giam toc
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	425a      	negs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	61da      	str	r2, [r3, #28]
 80012ec:	e012      	b.n	8001314 <computeNewSpeed+0xfc>
	   }
	   else if (AccelMotor->_n < 0){
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da0e      	bge.n	8001314 <computeNewSpeed+0xfc>
	       // Currently decelerating, need to accel again?
			   // hien dang giam toc, can tang toc lai?
	       if ((stepsToStop < -distanceTo) && AccelMotor->_direction == DIRECTION_CCW)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	425b      	negs	r3, r3
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	da09      	bge.n	8001314 <computeNewSpeed+0xfc>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001306:	2b00      	cmp	r3, #0
 8001308:	d104      	bne.n	8001314 <computeNewSpeed+0xfc>
		        AccelMotor->_n = -AccelMotor->_n; // Start accceleration  //bat dau tang toc
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	425a      	negs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	61da      	str	r2, [r3, #28]
	   }
  }
    // Need to accelerate or decelerate - can tang toc hoac giam toc
  if (AccelMotor->_n == 0){
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10e      	bne.n	800133a <computeNewSpeed+0x122>
	   // First step from stopped  -  buoc dau tien tu vi tri stop
	   AccelMotor->_cn = AccelMotor->_c0;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1a      	ldr	r2, [r3, #32]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
	   AccelMotor->_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	bfcc      	ite	gt
 800132a:	2301      	movgt	r3, #1
 800132c:	2300      	movle	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001338:	e02e      	b.n	8001398 <computeNewSpeed+0x180>
  }
	else{
	   // Subsequent step. Works for accel (n is +_ve) and decel (n is -ve).
		 //buoc tiep theo. hoat dong cho tang toc (n la duong) va giam toc (n la am)
	   AccelMotor->_cn = AccelMotor->_cn - ((2.0f * AccelMotor->_cn) / ((4.0f * AccelMotor->_n) + 1)); // Equation 13 - phuong trinh 13 
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001346:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001356:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800135a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800135e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001362:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001366:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800136a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	   AccelMotor->_cn = max(AccelMotor->_cn, AccelMotor->_cmin);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001388:	dd02      	ble.n	8001390 <computeNewSpeed+0x178>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	e001      	b.n	8001394 <computeNewSpeed+0x17c>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6253      	str	r3, [r2, #36]	; 0x24
  }
  AccelMotor->_n++;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	61da      	str	r2, [r3, #28]
  AccelMotor->_stepInterval = AccelMotor->_cn;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80013a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ac:	ee17 2a90 	vmov	r2, s15
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	615a      	str	r2, [r3, #20]
  AccelMotor->_speed = 1000000.0f / AccelMotor->_cn;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80013ba:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80013e8 <computeNewSpeed+0x1d0>
 80013be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	edc3 7a01 	vstr	s15, [r3, #4]
  if (AccelMotor->_direction == DIRECTION_CCW) AccelMotor->_speed = -AccelMotor->_speed;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d107      	bne.n	80013e2 <computeNewSpeed+0x1ca>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80013d8:	eef1 7a67 	vneg.f32	s15, s15
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	49742400 	.word	0x49742400

080013ec <distanceToGo>:

long distanceToGo(struct AccelStepperData * AccelMotor)  //tra lai khoang cach giua vi tri muc tieu va hien tai
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    return AccelMotor->_targetPos - AccelMotor->_currentPos;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fc:	1ad3      	subs	r3, r2, r3
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <run>:

void run(struct AccelStepperData * AccelMotor)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	if(AccelMotor->isStop){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800141a:	2b00      	cmp	r3, #0
 800141c:	d037      	beq.n	800148e <run+0x82>
		switch(AccelMotor->TIM_CHANEL){
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	2b0c      	cmp	r3, #12
 8001424:	f200 80cd 	bhi.w	80015c2 <run+0x1b6>
 8001428:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <run+0x24>)
 800142a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142e:	bf00      	nop
 8001430:	08001465 	.word	0x08001465
 8001434:	080015c3 	.word	0x080015c3
 8001438:	080015c3 	.word	0x080015c3
 800143c:	080015c3 	.word	0x080015c3
 8001440:	0800146f 	.word	0x0800146f
 8001444:	080015c3 	.word	0x080015c3
 8001448:	080015c3 	.word	0x080015c3
 800144c:	080015c3 	.word	0x080015c3
 8001450:	08001479 	.word	0x08001479
 8001454:	080015c3 	.word	0x080015c3
 8001458:	080015c3 	.word	0x080015c3
 800145c:	080015c3 	.word	0x080015c3
 8001460:	08001483 	.word	0x08001483
			case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001468:	2200      	movs	r2, #0
 800146a:	635a      	str	r2, [r3, #52]	; 0x34
 800146c:	e00e      	b.n	800148c <run+0x80>
			case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001472:	2200      	movs	r2, #0
 8001474:	639a      	str	r2, [r3, #56]	; 0x38
 8001476:	e009      	b.n	800148c <run+0x80>
			case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147c:	2200      	movs	r2, #0
 800147e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001480:	e004      	b.n	800148c <run+0x80>
			case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001486:	2200      	movs	r2, #0
 8001488:	641a      	str	r2, [r3, #64]	; 0x40
 800148a:	bf00      	nop
		}
		return;
 800148c:	e099      	b.n	80015c2 <run+0x1b6>
	}
  if(runSpeed(AccelMotor)){
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f89c 	bl	80015cc <runSpeed>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d043      	beq.n	8001522 <run+0x116>
	computeNewSpeed(AccelMotor);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff febc 	bl	8001218 <computeNewSpeed>
	if(AccelMotor->_stepInterval==0){
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d135      	bne.n	8001514 <run+0x108>
			switch(AccelMotor->TIM_CHANEL){
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	f200 8089 	bhi.w	80015c4 <run+0x1b8>
 80014b2:	a201      	add	r2, pc, #4	; (adr r2, 80014b8 <run+0xac>)
 80014b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b8:	080014ed 	.word	0x080014ed
 80014bc:	080015c5 	.word	0x080015c5
 80014c0:	080015c5 	.word	0x080015c5
 80014c4:	080015c5 	.word	0x080015c5
 80014c8:	080014f7 	.word	0x080014f7
 80014cc:	080015c5 	.word	0x080015c5
 80014d0:	080015c5 	.word	0x080015c5
 80014d4:	080015c5 	.word	0x080015c5
 80014d8:	08001501 	.word	0x08001501
 80014dc:	080015c5 	.word	0x080015c5
 80014e0:	080015c5 	.word	0x080015c5
 80014e4:	080015c5 	.word	0x080015c5
 80014e8:	0800150b 	.word	0x0800150b
				case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f0:	2200      	movs	r2, #0
 80014f2:	635a      	str	r2, [r3, #52]	; 0x34
 80014f4:	e066      	b.n	80015c4 <run+0x1b8>
				case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014fa:	2200      	movs	r2, #0
 80014fc:	639a      	str	r2, [r3, #56]	; 0x38
 80014fe:	e061      	b.n	80015c4 <run+0x1b8>
				case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001504:	2200      	movs	r2, #0
 8001506:	63da      	str	r2, [r3, #60]	; 0x3c
 8001508:	e05c      	b.n	80015c4 <run+0x1b8>
				case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800150e:	2200      	movs	r2, #0
 8001510:	641a      	str	r2, [r3, #64]	; 0x40
 8001512:	e057      	b.n	80015c4 <run+0x1b8>
			}
//			AccelMotor->sumComplete++;
		}
  	else{		
	    AccelMotor->USER_TIMER->ARR=(uint16_t)AccelMotor->_stepInterval;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	b29a      	uxth	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001520:	e050      	b.n	80015c4 <run+0x1b8>
//		if((distanceToGo(AccelMotor)>3) || (distanceToGo(AccelMotor)>-3)) AccelMotor->sumComplete =0;
		}
	}
	else if((distanceToGo(AccelMotor)>0) || (distanceToGo(AccelMotor)<0)){
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ff62 	bl	80013ec <distanceToGo>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	dc05      	bgt.n	800153a <run+0x12e>
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ff5c 	bl	80013ec <distanceToGo>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	da44      	bge.n	80015c4 <run+0x1b8>
		computeNewSpeed(AccelMotor);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fe6c 	bl	8001218 <computeNewSpeed>
		if(AccelMotor->_stepInterval==0){
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d135      	bne.n	80015b4 <run+0x1a8>
				switch(AccelMotor->TIM_CHANEL){
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154c:	2b0c      	cmp	r3, #12
 800154e:	d839      	bhi.n	80015c4 <run+0x1b8>
 8001550:	a201      	add	r2, pc, #4	; (adr r2, 8001558 <run+0x14c>)
 8001552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001556:	bf00      	nop
 8001558:	0800158d 	.word	0x0800158d
 800155c:	080015c5 	.word	0x080015c5
 8001560:	080015c5 	.word	0x080015c5
 8001564:	080015c5 	.word	0x080015c5
 8001568:	08001597 	.word	0x08001597
 800156c:	080015c5 	.word	0x080015c5
 8001570:	080015c5 	.word	0x080015c5
 8001574:	080015c5 	.word	0x080015c5
 8001578:	080015a1 	.word	0x080015a1
 800157c:	080015c5 	.word	0x080015c5
 8001580:	080015c5 	.word	0x080015c5
 8001584:	080015c5 	.word	0x080015c5
 8001588:	080015ab 	.word	0x080015ab
				case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001590:	2200      	movs	r2, #0
 8001592:	635a      	str	r2, [r3, #52]	; 0x34
 8001594:	e016      	b.n	80015c4 <run+0x1b8>
				case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800159a:	2200      	movs	r2, #0
 800159c:	639a      	str	r2, [r3, #56]	; 0x38
 800159e:	e011      	b.n	80015c4 <run+0x1b8>
				case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a4:	2200      	movs	r2, #0
 80015a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80015a8:	e00c      	b.n	80015c4 <run+0x1b8>
				case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ae:	2200      	movs	r2, #0
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
 80015b2:	e007      	b.n	80015c4 <run+0x1b8>
			}
//				AccelMotor->sumComplete++;
		}
	  else{
	      AccelMotor->USER_TIMER->ARR=(uint16_t)AccelMotor->_stepInterval;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
 80015c0:	e000      	b.n	80015c4 <run+0x1b8>
		return;
 80015c2:	bf00      	nop
//			  if((distanceToGo(AccelMotor)>3) || (distanceToGo(AccelMotor)>-3)) AccelMotor->sumComplete =0;
		}
	}
//	if(AccelMotor->sumComplete>50) AccelMotor->isComplete=true;
}
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop

080015cc <runSpeed>:

char runSpeed(struct AccelStepperData * AccelMotor)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
    // Dont do anything unless we actually have a step interval
	  // khong lam gi neu nhu gia tri _stepInterval = 0
  if (!AccelMotor->_stepInterval){
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d137      	bne.n	800164c <runSpeed+0x80>
		switch(AccelMotor->TIM_CHANEL){
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e0:	2b0c      	cmp	r3, #12
 80015e2:	d831      	bhi.n	8001648 <runSpeed+0x7c>
 80015e4:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <runSpeed+0x20>)
 80015e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ea:	bf00      	nop
 80015ec:	08001621 	.word	0x08001621
 80015f0:	08001649 	.word	0x08001649
 80015f4:	08001649 	.word	0x08001649
 80015f8:	08001649 	.word	0x08001649
 80015fc:	0800162b 	.word	0x0800162b
 8001600:	08001649 	.word	0x08001649
 8001604:	08001649 	.word	0x08001649
 8001608:	08001649 	.word	0x08001649
 800160c:	08001635 	.word	0x08001635
 8001610:	08001649 	.word	0x08001649
 8001614:	08001649 	.word	0x08001649
 8001618:	08001649 	.word	0x08001649
 800161c:	0800163f 	.word	0x0800163f
			case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001624:	2200      	movs	r2, #0
 8001626:	635a      	str	r2, [r3, #52]	; 0x34
 8001628:	e00e      	b.n	8001648 <runSpeed+0x7c>
			case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800162e:	2200      	movs	r2, #0
 8001630:	639a      	str	r2, [r3, #56]	; 0x38
 8001632:	e009      	b.n	8001648 <runSpeed+0x7c>
			case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001638:	2200      	movs	r2, #0
 800163a:	63da      	str	r2, [r3, #60]	; 0x3c
 800163c:	e004      	b.n	8001648 <runSpeed+0x7c>
			case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001642:	2200      	movs	r2, #0
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
 8001646:	bf00      	nop
		}
//		AccelMotor->isComplete = 1;
		return 0;
 8001648:	2300      	movs	r3, #0
 800164a:	e013      	b.n	8001674 <runSpeed+0xa8>
	}
	
	if (AccelMotor->_direction == DIRECTION_CW){ // Clockwise    
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001652:	2b01      	cmp	r3, #1
 8001654:	d105      	bne.n	8001662 <runSpeed+0x96>
	    AccelMotor->_currentPos += 1;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
 8001660:	e004      	b.n	800166c <runSpeed+0xa0>
	  }
	else{
	    // Anticlockwise
	    AccelMotor->_currentPos -= 1;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	1e5a      	subs	r2, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	631a      	str	r2, [r3, #48]	; 0x30
	  }
	step(AccelMotor);  //tao 1 step pulse
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f805 	bl	800167c <step>

	return 1;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <step>:

void step(struct AccelStepperData * AccelMotor)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	if(AccelMotor->_direction) 
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800168a:	2b00      	cmp	r3, #0
 800168c:	d009      	beq.n	80016a2 <step+0x26>
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Dir,AccelMotor->GPIO_PIN_Dir,GPIO_PIN_RESET); 
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001698:	2200      	movs	r2, #0
 800169a:	4619      	mov	r1, r3
 800169c:	f005 f84a 	bl	8006734 <HAL_GPIO_WritePin>
 80016a0:	e008      	b.n	80016b4 <step+0x38>
	else 
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Dir,AccelMotor->GPIO_PIN_Dir,GPIO_PIN_SET);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ac:	2201      	movs	r2, #1
 80016ae:	4619      	mov	r1, r3
 80016b0:	f005 f840 	bl	8006734 <HAL_GPIO_WritePin>
	if(AccelMotor->enable==1){
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d108      	bne.n	80016d0 <step+0x54>
			HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_SET);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80016c8:	2201      	movs	r2, #1
 80016ca:	4619      	mov	r1, r3
 80016cc:	f005 f832 	bl	8006734 <HAL_GPIO_WritePin>
	}
	switch(AccelMotor->TIM_CHANEL){
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	2b0c      	cmp	r3, #12
 80016d6:	d831      	bhi.n	800173c <step+0xc0>
 80016d8:	a201      	add	r2, pc, #4	; (adr r2, 80016e0 <step+0x64>)
 80016da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016de:	bf00      	nop
 80016e0:	08001715 	.word	0x08001715
 80016e4:	0800173d 	.word	0x0800173d
 80016e8:	0800173d 	.word	0x0800173d
 80016ec:	0800173d 	.word	0x0800173d
 80016f0:	0800171f 	.word	0x0800171f
 80016f4:	0800173d 	.word	0x0800173d
 80016f8:	0800173d 	.word	0x0800173d
 80016fc:	0800173d 	.word	0x0800173d
 8001700:	08001729 	.word	0x08001729
 8001704:	0800173d 	.word	0x0800173d
 8001708:	0800173d 	.word	0x0800173d
 800170c:	0800173d 	.word	0x0800173d
 8001710:	08001733 	.word	0x08001733
			case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=2; break;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001718:	2202      	movs	r2, #2
 800171a:	635a      	str	r2, [r3, #52]	; 0x34
 800171c:	e00e      	b.n	800173c <step+0xc0>
			case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=2; break;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001722:	2202      	movs	r2, #2
 8001724:	639a      	str	r2, [r3, #56]	; 0x38
 8001726:	e009      	b.n	800173c <step+0xc0>
			case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=2; break;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172c:	2202      	movs	r2, #2
 800172e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001730:	e004      	b.n	800173c <step+0xc0>
			case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=2; break;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001736:	2202      	movs	r2, #2
 8001738:	641a      	str	r2, [r3, #64]	; 0x40
 800173a:	bf00      	nop
		}
//	AccelMotor->isComplete = 0;
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <isRunning>:

char isRunning(struct AccelStepperData * AccelMotor)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
    return !(AccelMotor->_speed == 0.0f && AccelMotor->_targetPos == AccelMotor->_currentPos);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001752:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175a:	d105      	bne.n	8001768 <isRunning+0x24>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <isRunning+0x28>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <isRunning+0x2a>
 800176c:	2300      	movs	r3, #0
 800176e:	b2db      	uxtb	r3, r3
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <moveTo>:
void setCurentPos(struct AccelStepperData * AccelMotor,long position){
 AccelMotor->_currentPos=position;
}

void moveTo(struct AccelStepperData * AccelMotor,long absoluted)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
	AccelMotor->isStop = false;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	if(AccelMotor->_targetPos != absoluted){
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d005      	beq.n	80017a4 <moveTo+0x28>
	   AccelMotor->_targetPos = absoluted;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	601a      	str	r2, [r3, #0]
	   computeNewSpeed(AccelMotor);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fd3a 	bl	8001218 <computeNewSpeed>
//		AccelMotor->USER_TIMER->CNT=0;
  }
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <enableStepper>:
	AccelMotor->_stepInterval = fabs(1000000.0f / speed);
	AccelMotor->_direction = (speed > 0.0f) ? DIRECTION_CW : DIRECTION_CCW;
    }
    AccelMotor->_speed = speed;
}
void enableStepper(struct AccelStepperData * AccelMotor,enum boolean onOff){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
	if(onOff==OFF) 
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <enableStepper+0x26>
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_SET);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80017c8:	2201      	movs	r2, #1
 80017ca:	4619      	mov	r1, r3
 80017cc:	f004 ffb2 	bl	8006734 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_RESET);
}
 80017d0:	e008      	b.n	80017e4 <enableStepper+0x38>
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_RESET);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80017dc:	2200      	movs	r2, #0
 80017de:	4619      	mov	r1, r3
 80017e0:	f004 ffa8 	bl	8006734 <HAL_GPIO_WritePin>
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017f2:	463b      	mov	r3, r7
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017fe:	4b22      	ldr	r3, [pc, #136]	; (8001888 <MX_ADC1_Init+0x9c>)
 8001800:	4a22      	ldr	r2, [pc, #136]	; (800188c <MX_ADC1_Init+0xa0>)
 8001802:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001804:	4b20      	ldr	r3, [pc, #128]	; (8001888 <MX_ADC1_Init+0x9c>)
 8001806:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800180a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <MX_ADC1_Init+0x9c>)
 800180e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001812:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001814:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <MX_ADC1_Init+0x9c>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800181a:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <MX_ADC1_Init+0x9c>)
 800181c:	2201      	movs	r2, #1
 800181e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <MX_ADC1_Init+0x9c>)
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <MX_ADC1_Init+0x9c>)
 800182a:	2200      	movs	r2, #0
 800182c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <MX_ADC1_Init+0x9c>)
 8001830:	4a17      	ldr	r2, [pc, #92]	; (8001890 <MX_ADC1_Init+0xa4>)
 8001832:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <MX_ADC1_Init+0x9c>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <MX_ADC1_Init+0x9c>)
 800183c:	2201      	movs	r2, #1
 800183e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_ADC1_Init+0x9c>)
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <MX_ADC1_Init+0x9c>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800184e:	480e      	ldr	r0, [pc, #56]	; (8001888 <MX_ADC1_Init+0x9c>)
 8001850:	f003 f80a 	bl	8004868 <HAL_ADC_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800185a:	f002 f8cf 	bl	80039fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800185e:	2304      	movs	r3, #4
 8001860:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001862:	2301      	movs	r3, #1
 8001864:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001866:	2307      	movs	r3, #7
 8001868:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800186a:	463b      	mov	r3, r7
 800186c:	4619      	mov	r1, r3
 800186e:	4806      	ldr	r0, [pc, #24]	; (8001888 <MX_ADC1_Init+0x9c>)
 8001870:	f003 fa52 	bl	8004d18 <HAL_ADC_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800187a:	f002 f8bf 	bl	80039fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200089b8 	.word	0x200089b8
 800188c:	40012000 	.word	0x40012000
 8001890:	0f000001 	.word	0x0f000001

08001894 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a32      	ldr	r2, [pc, #200]	; (800197c <HAL_ADC_MspInit+0xe8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d15e      	bne.n	8001974 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b31      	ldr	r3, [pc, #196]	; (8001980 <HAL_ADC_MspInit+0xec>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	4a30      	ldr	r2, [pc, #192]	; (8001980 <HAL_ADC_MspInit+0xec>)
 80018c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c4:	6453      	str	r3, [r2, #68]	; 0x44
 80018c6:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <HAL_ADC_MspInit+0xec>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <HAL_ADC_MspInit+0xec>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a29      	ldr	r2, [pc, #164]	; (8001980 <HAL_ADC_MspInit+0xec>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b27      	ldr	r3, [pc, #156]	; (8001980 <HAL_ADC_MspInit+0xec>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_VOLT_SENSOR_Pin;
 80018ee:	2310      	movs	r3, #16
 80018f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f2:	2303      	movs	r3, #3
 80018f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VOLT_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	4820      	ldr	r0, [pc, #128]	; (8001984 <HAL_ADC_MspInit+0xf0>)
 8001902:	f004 fc97 	bl	8006234 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001906:	4b20      	ldr	r3, [pc, #128]	; (8001988 <HAL_ADC_MspInit+0xf4>)
 8001908:	4a20      	ldr	r2, [pc, #128]	; (800198c <HAL_ADC_MspInit+0xf8>)
 800190a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <HAL_ADC_MspInit+0xf4>)
 800190e:	2200      	movs	r2, #0
 8001910:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001912:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <HAL_ADC_MspInit+0xf4>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_ADC_MspInit+0xf4>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_ADC_MspInit+0xf4>)
 8001920:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001924:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <HAL_ADC_MspInit+0xf4>)
 8001928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800192c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <HAL_ADC_MspInit+0xf4>)
 8001930:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001934:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <HAL_ADC_MspInit+0xf4>)
 8001938:	2200      	movs	r2, #0
 800193a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_ADC_MspInit+0xf4>)
 800193e:	2200      	movs	r2, #0
 8001940:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_ADC_MspInit+0xf4>)
 8001944:	2200      	movs	r2, #0
 8001946:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001948:	480f      	ldr	r0, [pc, #60]	; (8001988 <HAL_ADC_MspInit+0xf4>)
 800194a:	f003 fd21 	bl	8005390 <HAL_DMA_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001954:	f002 f852 	bl	80039fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <HAL_ADC_MspInit+0xf4>)
 800195c:	639a      	str	r2, [r3, #56]	; 0x38
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <HAL_ADC_MspInit+0xf4>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	210f      	movs	r1, #15
 8001968:	2012      	movs	r0, #18
 800196a:	f003 fcd9 	bl	8005320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800196e:	2012      	movs	r0, #18
 8001970:	f003 fcf2 	bl	8005358 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001974:	bf00      	nop
 8001976:	3728      	adds	r7, #40	; 0x28
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40012000 	.word	0x40012000
 8001980:	40023800 	.word	0x40023800
 8001984:	40020000 	.word	0x40020000
 8001988:	20008a00 	.word	0x20008a00
 800198c:	40026410 	.word	0x40026410

08001990 <HAL_ADC_ConvCpltCallback>:

uint32_t battery_sum;								// Variable for Calculator Battery
uint16_t battery,battery_tik;						// Variable Battery: ex. battery=1623 => 16.23v

/* Ham Callback khi chuyen doi ADC hoan tat */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	battery_sum += ADC1->DR;						// tinh gia tri ADC trung binh trong 65000 lan lay mau , de dat duoc ket qua chinh xac
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_ADC_ConvCpltCallback+0x6c>)
 800199a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_ADC_ConvCpltCallback+0x70>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4413      	add	r3, r2
 80019a2:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <HAL_ADC_ConvCpltCallback+0x70>)
 80019a4:	6013      	str	r3, [r2, #0]
	battery_tik ++;
 80019a6:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_ADC_ConvCpltCallback+0x74>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	3301      	adds	r3, #1
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_ADC_ConvCpltCallback+0x74>)
 80019b0:	801a      	strh	r2, [r3, #0]
	if(battery_tik==65000){
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_ADC_ConvCpltCallback+0x74>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d117      	bne.n	80019ee <HAL_ADC_ConvCpltCallback+0x5e>
		battery = ((battery_sum/battery_tik)*510)/100;  	//  Ratio ADC = 16,3/1,04 => Vbattery = Val_ADC*(3,3/1024)*(16,3/1,04) with ADC is 10bit
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <HAL_ADC_ConvCpltCallback+0x70>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a10      	ldr	r2, [pc, #64]	; (8001a04 <HAL_ADC_ConvCpltCallback+0x74>)
 80019c4:	8812      	ldrh	r2, [r2, #0]
 80019c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80019ca:	4613      	mov	r3, r2
 80019cc:	021b      	lsls	r3, r3, #8
 80019ce:	1a9b      	subs	r3, r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_ADC_ConvCpltCallback+0x78>)
 80019d6:	fba3 2302 	umull	r2, r3, r3, r2
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	b29a      	uxth	r2, r3
 80019de:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_ADC_ConvCpltCallback+0x7c>)
 80019e0:	801a      	strh	r2, [r3, #0]
		battery_sum =0;
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <HAL_ADC_ConvCpltCallback+0x70>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
		battery_tik=0;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_ADC_ConvCpltCallback+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	801a      	strh	r2, [r3, #0]
	}
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40012000 	.word	0x40012000
 8001a00:	20008a60 	.word	0x20008a60
 8001a04:	20008a66 	.word	0x20008a66
 8001a08:	51eb851f 	.word	0x51eb851f
 8001a0c:	20008a64 	.word	0x20008a64

08001a10 <batteryVoltInit>:

void batteryVoltInit()
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);						// Start ADC to get Battery Votl
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <batteryVoltInit+0x10>)
 8001a16:	f002 ff6b 	bl	80048f0 <HAL_ADC_Start_IT>
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200089b8 	.word	0x200089b8

08001a24 <batteryGet>:
uint16_t batteryGet()
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
	return battery;
 8001a28:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <batteryGet+0x14>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20008a64 	.word	0x20008a64

08001a3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <MX_DMA_Init+0xb8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a2a      	ldr	r2, [pc, #168]	; (8001af4 <MX_DMA_Init+0xb8>)
 8001a4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <MX_DMA_Init+0xb8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <MX_DMA_Init+0xb8>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a23      	ldr	r2, [pc, #140]	; (8001af4 <MX_DMA_Init+0xb8>)
 8001a68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <MX_DMA_Init+0xb8>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2105      	movs	r1, #5
 8001a7e:	200b      	movs	r0, #11
 8001a80:	f003 fc4e 	bl	8005320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a84:	200b      	movs	r0, #11
 8001a86:	f003 fc67 	bl	8005358 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2105      	movs	r1, #5
 8001a8e:	200c      	movs	r0, #12
 8001a90:	f003 fc46 	bl	8005320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a94:	200c      	movs	r0, #12
 8001a96:	f003 fc5f 	bl	8005358 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2105      	movs	r1, #5
 8001a9e:	200d      	movs	r0, #13
 8001aa0:	f003 fc3e 	bl	8005320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001aa4:	200d      	movs	r0, #13
 8001aa6:	f003 fc57 	bl	8005358 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2105      	movs	r1, #5
 8001aae:	2010      	movs	r0, #16
 8001ab0:	f003 fc36 	bl	8005320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ab4:	2010      	movs	r0, #16
 8001ab6:	f003 fc4f 	bl	8005358 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2105      	movs	r1, #5
 8001abe:	202f      	movs	r0, #47	; 0x2f
 8001ac0:	f003 fc2e 	bl	8005320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001ac4:	202f      	movs	r0, #47	; 0x2f
 8001ac6:	f003 fc47 	bl	8005358 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2105      	movs	r1, #5
 8001ace:	2038      	movs	r0, #56	; 0x38
 8001ad0:	f003 fc26 	bl	8005320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ad4:	2038      	movs	r0, #56	; 0x38
 8001ad6:	f003 fc3f 	bl	8005358 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2105      	movs	r1, #5
 8001ade:	203a      	movs	r0, #58	; 0x3a
 8001ae0:	f003 fc1e 	bl	8005320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001ae4:	203a      	movs	r0, #58	; 0x3a
 8001ae6:	f003 fc37 	bl	8005358 <HAL_NVIC_EnableIRQ>

}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800

08001af8 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001afe:	2306      	movs	r3, #6
 8001b00:	847b      	strh	r3, [r7, #34]	; 0x22
 8001b02:	2306      	movs	r3, #6
 8001b04:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	83fb      	strh	r3, [r7, #30]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8001b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b16:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001b1c:	4ba1      	ldr	r3, [pc, #644]	; (8001da4 <EE_Init+0x2ac>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001b22:	4ba1      	ldr	r3, [pc, #644]	; (8001da8 <EE_Init+0x2b0>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8001b30:	2301      	movs	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001b34:	2302      	movs	r3, #2
 8001b36:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8001b38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00b      	beq.n	8001b5a <EE_Init+0x62>
 8001b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b46:	f280 8196 	bge.w	8001e76 <EE_Init+0x37e>
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 80f8 	beq.w	8001d40 <EE_Init+0x248>
 8001b50:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d050      	beq.n	8001bfa <EE_Init+0x102>
 8001b58:	e18d      	b.n	8001e76 <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8001b5a:	8c3b      	ldrh	r3, [r7, #32]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d116      	bne.n	8001b8e <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001b60:	4890      	ldr	r0, [pc, #576]	; (8001da4 <EE_Init+0x2ac>)
 8001b62:	f000 f9a9 	bl	8001eb8 <EE_VerifyPageFullyErased>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f040 818e 	bne.w	8001e8a <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001b6e:	f107 0214 	add.w	r2, r7, #20
 8001b72:	463b      	mov	r3, r7
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 fa3a 	bl	8005ff0 <HAL_FLASHEx_Erase>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001b80:	7efb      	ldrb	r3, [r7, #27]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8181 	beq.w	8001e8a <EE_Init+0x392>
          {
            return FlashStatus;
 8001b88:	7efb      	ldrb	r3, [r7, #27]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	e185      	b.n	8001e9a <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8001b8e:	8c3b      	ldrh	r3, [r7, #32]
 8001b90:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d125      	bne.n	8001be4 <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001b98:	4882      	ldr	r0, [pc, #520]	; (8001da4 <EE_Init+0x2ac>)
 8001b9a:	f000 f98d 	bl	8001eb8 <EE_VerifyPageFullyErased>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10e      	bne.n	8001bc2 <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001ba4:	f107 0214 	add.w	r2, r7, #20
 8001ba8:	463b      	mov	r3, r7
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f004 fa1f 	bl	8005ff0 <HAL_FLASHEx_Erase>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001bb6:	7efb      	ldrb	r3, [r7, #27]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <EE_Init+0xca>
          {
            return FlashStatus;
 8001bbc:	7efb      	ldrb	r3, [r7, #27]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	e16b      	b.n	8001e9a <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	4977      	ldr	r1, [pc, #476]	; (8001da8 <EE_Init+0x2b0>)
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f004 f859 	bl	8005c84 <HAL_FLASH_Program>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001bd6:	7efb      	ldrb	r3, [r7, #27]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 8156 	beq.w	8001e8a <EE_Init+0x392>
        {
          return FlashStatus;
 8001bde:	7efb      	ldrb	r3, [r7, #27]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	e15a      	b.n	8001e9a <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001be4:	f000 f9fa 	bl	8001fdc <EE_Format>
 8001be8:	4603      	mov	r3, r0
 8001bea:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001bec:	7efb      	ldrb	r3, [r7, #27]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 814b 	beq.w	8001e8a <EE_Init+0x392>
        {
          return FlashStatus;
 8001bf4:	7efb      	ldrb	r3, [r7, #27]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	e14f      	b.n	8001e9a <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001bfa:	8c3b      	ldrh	r3, [r7, #32]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d163      	bne.n	8001cc8 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c04:	e030      	b.n	8001c68 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001c06:	4b69      	ldr	r3, [pc, #420]	; (8001dac <EE_Init+0x2b4>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c0e:	4968      	ldr	r1, [pc, #416]	; (8001db0 <EE_Init+0x2b8>)
 8001c10:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d101      	bne.n	8001c1c <EE_Init+0x124>
          {
            x = VarIdx;
 8001c18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c1a:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8001c1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001c1e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d01d      	beq.n	8001c62 <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001c26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c28:	4a61      	ldr	r2, [pc, #388]	; (8001db0 <EE_Init+0x2b8>)
 8001c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c2e:	4961      	ldr	r1, [pc, #388]	; (8001db4 <EE_Init+0x2bc>)
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 f967 	bl	8001f04 <EE_ReadVariable>
 8001c36:	4603      	mov	r3, r0
 8001c38:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001c3a:	8bbb      	ldrh	r3, [r7, #28]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d010      	beq.n	8001c62 <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001c40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c42:	4a5b      	ldr	r2, [pc, #364]	; (8001db0 <EE_Init+0x2b8>)
 8001c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c48:	4a5a      	ldr	r2, [pc, #360]	; (8001db4 <EE_Init+0x2bc>)
 8001c4a:	8812      	ldrh	r2, [r2, #0]
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 fa5c 	bl	800210c <EE_VerifyPageFullWriteVariable>
 8001c54:	4603      	mov	r3, r0
 8001c56:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001c58:	8bfb      	ldrh	r3, [r7, #30]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <EE_Init+0x16a>
              {
                return EepromStatus;
 8001c5e:	8bfb      	ldrh	r3, [r7, #30]
 8001c60:	e11b      	b.n	8001e9a <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001c62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c64:	3301      	adds	r3, #1
 8001c66:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d9cb      	bls.n	8001c06 <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	494b      	ldr	r1, [pc, #300]	; (8001da4 <EE_Init+0x2ac>)
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f004 f803 	bl	8005c84 <HAL_FLASH_Program>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001c82:	7efb      	ldrb	r3, [r7, #27]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <EE_Init+0x196>
        {
          return FlashStatus;
 8001c88:	7efb      	ldrb	r3, [r7, #27]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	e105      	b.n	8001e9a <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001c96:	2302      	movs	r3, #2
 8001c98:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001c9a:	4843      	ldr	r0, [pc, #268]	; (8001da8 <EE_Init+0x2b0>)
 8001c9c:	f000 f90c 	bl	8001eb8 <EE_VerifyPageFullyErased>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f040 80f3 	bne.w	8001e8e <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001ca8:	f107 0214 	add.w	r2, r7, #20
 8001cac:	463b      	mov	r3, r7
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f004 f99d 	bl	8005ff0 <HAL_FLASHEx_Erase>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001cba:	7efb      	ldrb	r3, [r7, #27]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80e6 	beq.w	8001e8e <EE_Init+0x396>
          {
            return FlashStatus;
 8001cc2:	7efb      	ldrb	r3, [r7, #27]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	e0e8      	b.n	8001e9a <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8001cc8:	8c3b      	ldrh	r3, [r7, #32]
 8001cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d12b      	bne.n	8001d2a <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001cde:	4832      	ldr	r0, [pc, #200]	; (8001da8 <EE_Init+0x2b0>)
 8001ce0:	f000 f8ea 	bl	8001eb8 <EE_VerifyPageFullyErased>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10e      	bne.n	8001d08 <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001cea:	f107 0214 	add.w	r2, r7, #20
 8001cee:	463b      	mov	r3, r7
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f004 f97c 	bl	8005ff0 <HAL_FLASHEx_Erase>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001cfc:	7efb      	ldrb	r3, [r7, #27]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <EE_Init+0x210>
          {
            return FlashStatus;
 8001d02:	7efb      	ldrb	r3, [r7, #27]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	e0c8      	b.n	8001e9a <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	4924      	ldr	r1, [pc, #144]	; (8001da4 <EE_Init+0x2ac>)
 8001d12:	2001      	movs	r0, #1
 8001d14:	f003 ffb6 	bl	8005c84 <HAL_FLASH_Program>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001d1c:	7efb      	ldrb	r3, [r7, #27]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 80b5 	beq.w	8001e8e <EE_Init+0x396>
        {
          return FlashStatus;
 8001d24:	7efb      	ldrb	r3, [r7, #27]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	e0b7      	b.n	8001e9a <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001d2a:	f000 f957 	bl	8001fdc <EE_Format>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001d32:	7efb      	ldrb	r3, [r7, #27]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80aa 	beq.w	8001e8e <EE_Init+0x396>
        {
          return FlashStatus;
 8001d3a:	7efb      	ldrb	r3, [r7, #27]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	e0ac      	b.n	8001e9a <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8001d40:	8c3b      	ldrh	r3, [r7, #32]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10a      	bne.n	8001d5c <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001d46:	f000 f949 	bl	8001fdc <EE_Format>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001d4e:	7efb      	ldrb	r3, [r7, #27]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 809e 	beq.w	8001e92 <EE_Init+0x39a>
        {
          return FlashStatus;
 8001d56:	7efb      	ldrb	r3, [r7, #27]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	e09e      	b.n	8001e9a <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8001d5c:	8c3b      	ldrh	r3, [r7, #32]
 8001d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d11b      	bne.n	8001d9e <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001d66:	2303      	movs	r3, #3
 8001d68:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001d72:	480d      	ldr	r0, [pc, #52]	; (8001da8 <EE_Init+0x2b0>)
 8001d74:	f000 f8a0 	bl	8001eb8 <EE_VerifyPageFullyErased>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 8089 	bne.w	8001e92 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001d80:	f107 0214 	add.w	r2, r7, #20
 8001d84:	463b      	mov	r3, r7
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f004 f931 	bl	8005ff0 <HAL_FLASHEx_Erase>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001d92:	7efb      	ldrb	r3, [r7, #27]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d07c      	beq.n	8001e92 <EE_Init+0x39a>
          {
            return FlashStatus;
 8001d98:	7efb      	ldrb	r3, [r7, #27]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	e07d      	b.n	8001e9a <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001da2:	e03a      	b.n	8001e1a <EE_Init+0x322>
 8001da4:	08030000 	.word	0x08030000
 8001da8:	08034000 	.word	0x08034000
 8001dac:	08030006 	.word	0x08030006
 8001db0:	20000000 	.word	0x20000000
 8001db4:	2000009e 	.word	0x2000009e
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001db8:	4b3a      	ldr	r3, [pc, #232]	; (8001ea4 <EE_Init+0x3ac>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001dc0:	4939      	ldr	r1, [pc, #228]	; (8001ea8 <EE_Init+0x3b0>)
 8001dc2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d101      	bne.n	8001dce <EE_Init+0x2d6>
          {
            x = VarIdx;
 8001dca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001dcc:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8001dce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001dd0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d01d      	beq.n	8001e14 <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001dd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001dda:	4a33      	ldr	r2, [pc, #204]	; (8001ea8 <EE_Init+0x3b0>)
 8001ddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001de0:	4932      	ldr	r1, [pc, #200]	; (8001eac <EE_Init+0x3b4>)
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f88e 	bl	8001f04 <EE_ReadVariable>
 8001de8:	4603      	mov	r3, r0
 8001dea:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001dec:	8bbb      	ldrh	r3, [r7, #28]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d010      	beq.n	8001e14 <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001df2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001df4:	4a2c      	ldr	r2, [pc, #176]	; (8001ea8 <EE_Init+0x3b0>)
 8001df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dfa:	4a2c      	ldr	r2, [pc, #176]	; (8001eac <EE_Init+0x3b4>)
 8001dfc:	8812      	ldrh	r2, [r2, #0]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 f983 	bl	800210c <EE_VerifyPageFullWriteVariable>
 8001e06:	4603      	mov	r3, r0
 8001e08:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001e0a:	8bfb      	ldrh	r3, [r7, #30]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <EE_Init+0x31c>
              {
                return EepromStatus;
 8001e10:	8bfb      	ldrh	r3, [r7, #30]
 8001e12:	e042      	b.n	8001e9a <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001e14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e16:	3301      	adds	r3, #1
 8001e18:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001e1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d9cb      	bls.n	8001db8 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	4921      	ldr	r1, [pc, #132]	; (8001eb0 <EE_Init+0x3b8>)
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f003 ff2a 	bl	8005c84 <HAL_FLASH_Program>
 8001e30:	4603      	mov	r3, r0
 8001e32:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001e34:	7efb      	ldrb	r3, [r7, #27]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <EE_Init+0x348>
        {
          return FlashStatus;
 8001e3a:	7efb      	ldrb	r3, [r7, #27]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	e02c      	b.n	8001e9a <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 8001e40:	2302      	movs	r3, #2
 8001e42:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001e44:	2301      	movs	r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001e4c:	4819      	ldr	r0, [pc, #100]	; (8001eb4 <EE_Init+0x3bc>)
 8001e4e:	f000 f833 	bl	8001eb8 <EE_VerifyPageFullyErased>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d11c      	bne.n	8001e92 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e58:	f107 0214 	add.w	r2, r7, #20
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f004 f8c5 	bl	8005ff0 <HAL_FLASHEx_Erase>
 8001e66:	4603      	mov	r3, r0
 8001e68:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001e6a:	7efb      	ldrb	r3, [r7, #27]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d010      	beq.n	8001e92 <EE_Init+0x39a>
          {
            return FlashStatus;
 8001e70:	7efb      	ldrb	r3, [r7, #27]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	e011      	b.n	8001e9a <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001e76:	f000 f8b1 	bl	8001fdc <EE_Format>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001e7e:	7efb      	ldrb	r3, [r7, #27]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <EE_Init+0x39e>
      {
        return FlashStatus;
 8001e84:	7efb      	ldrb	r3, [r7, #27]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	e007      	b.n	8001e9a <EE_Init+0x3a2>
      break;
 8001e8a:	bf00      	nop
 8001e8c:	e004      	b.n	8001e98 <EE_Init+0x3a0>
      break;
 8001e8e:	bf00      	nop
 8001e90:	e002      	b.n	8001e98 <EE_Init+0x3a0>
      break;
 8001e92:	bf00      	nop
 8001e94:	e000      	b.n	8001e98 <EE_Init+0x3a0>
      }
      break;
 8001e96:	bf00      	nop
  }

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3728      	adds	r7, #40	; 0x28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	08034006 	.word	0x08034006
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	2000009e 	.word	0x2000009e
 8001eb0:	08034000 	.word	0x08034000
 8001eb4:	08030000 	.word	0x08030000

08001eb8 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8001ec4:	f245 5355 	movw	r3, #21845	; 0x5555
 8001ec8:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8001eca:	e00d      	b.n	8001ee8 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8001ed2:	897b      	ldrh	r3, [r7, #10]
 8001ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d002      	beq.n	8001ee2 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]

      break;
 8001ee0:	e006      	b.n	8001ef0 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <EE_VerifyPageFullyErased+0x48>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d3ed      	bcc.n	8001ecc <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	b29b      	uxth	r3, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	08034000 	.word	0x08034000

08001f04 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001f14:	f245 5355 	movw	r3, #21845	; 0x5555
 8001f18:	81bb      	strh	r3, [r7, #12]
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <EE_ReadVariable+0x8c>)
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <EE_ReadVariable+0x8c>)
 8001f24:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001f26:	2000      	movs	r0, #0
 8001f28:	f000 f8aa 	bl	8002080 <EE_FindValidPage>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001f30:	89fb      	ldrh	r3, [r7, #14]
 8001f32:	2bab      	cmp	r3, #171	; 0xab
 8001f34:	d101      	bne.n	8001f3a <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8001f36:	23ab      	movs	r3, #171	; 0xab
 8001f38:	e025      	b.n	8001f86 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001f3a:	89fb      	ldrh	r3, [r7, #14]
 8001f3c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f40:	330c      	adds	r3, #12
 8001f42:	039b      	lsls	r3, r3, #14
 8001f44:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001f46:	89fb      	ldrh	r3, [r7, #14]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	039a      	lsls	r2, r3, #14
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <EE_ReadVariable+0x90>)
 8001f4e:	4413      	add	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8001f52:	e012      	b.n	8001f7a <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8001f5a:	89ba      	ldrh	r2, [r7, #12]
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d108      	bne.n	8001f74 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	3b02      	subs	r3, #2
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	82fb      	strh	r3, [r7, #22]

      break;
 8001f72:	e007      	b.n	8001f84 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	3b04      	subs	r3, #4
 8001f78:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d8e7      	bhi.n	8001f54 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001f84:	8afb      	ldrh	r3, [r7, #22]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	08030000 	.word	0x08030000
 8001f94:	0802fffe 	.word	0x0802fffe

08001f98 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	460a      	mov	r2, r1
 8001fa2:	80fb      	strh	r3, [r7, #6]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001fac:	88ba      	ldrh	r2, [r7, #4]
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f8aa 	bl	800210c <EE_VerifyPageFullWriteVariable>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8001fbc:	89fb      	ldrh	r3, [r7, #14]
 8001fbe:	2b80      	cmp	r3, #128	; 0x80
 8001fc0:	d107      	bne.n	8001fd2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8001fc2:	88ba      	ldrh	r2, [r7, #4]
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 f8f9 	bl	80021c0 <EE_PageTransfer>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8001fd2:	89fb      	ldrh	r3, [r7, #14]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001ffa:	481f      	ldr	r0, [pc, #124]	; (8002078 <EE_Format+0x9c>)
 8001ffc:	f7ff ff5c 	bl	8001eb8 <EE_VerifyPageFullyErased>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10d      	bne.n	8002022 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8002006:	f107 0218 	add.w	r2, r7, #24
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f003 ffee 	bl	8005ff0 <HAL_FLASHEx_Erase>
 8002014:	4603      	mov	r3, r0
 8002016:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8002018:	7ffb      	ldrb	r3, [r7, #31]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <EE_Format+0x46>
    {
      return FlashStatus;
 800201e:	7ffb      	ldrb	r3, [r7, #31]
 8002020:	e025      	b.n	800206e <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	4913      	ldr	r1, [pc, #76]	; (8002078 <EE_Format+0x9c>)
 800202c:	2001      	movs	r0, #1
 800202e:	f003 fe29 	bl	8005c84 <HAL_FLASH_Program>
 8002032:	4603      	mov	r3, r0
 8002034:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8002036:	7ffb      	ldrb	r3, [r7, #31]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <EE_Format+0x64>
  {
    return FlashStatus;
 800203c:	7ffb      	ldrb	r3, [r7, #31]
 800203e:	e016      	b.n	800206e <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8002040:	2303      	movs	r3, #3
 8002042:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8002044:	480d      	ldr	r0, [pc, #52]	; (800207c <EE_Format+0xa0>)
 8002046:	f7ff ff37 	bl	8001eb8 <EE_VerifyPageFullyErased>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10d      	bne.n	800206c <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8002050:	f107 0218 	add.w	r2, r7, #24
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f003 ffc9 	bl	8005ff0 <HAL_FLASHEx_Erase>
 800205e:	4603      	mov	r3, r0
 8002060:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8002062:	7ffb      	ldrb	r3, [r7, #31]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <EE_Format+0x90>
    {
      return FlashStatus;
 8002068:	7ffb      	ldrb	r3, [r7, #31]
 800206a:	e000      	b.n	800206e <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	08030000 	.word	0x08030000
 800207c:	08034000 	.word	0x08034000

08002080 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800208a:	2306      	movs	r3, #6
 800208c:	81fb      	strh	r3, [r7, #14]
 800208e:	2306      	movs	r3, #6
 8002090:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002092:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <EE_FindValidPage+0x84>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <EE_FindValidPage+0x88>)
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01b      	beq.n	80020dc <EE_FindValidPage+0x5c>
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d125      	bne.n	80020f4 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 80020a8:	89bb      	ldrh	r3, [r7, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d108      	bne.n	80020c0 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 80020ae:	89fb      	ldrh	r3, [r7, #14]
 80020b0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d101      	bne.n	80020bc <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 80020b8:	2300      	movs	r3, #0
 80020ba:	e01c      	b.n	80020f6 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 80020bc:	2301      	movs	r3, #1
 80020be:	e01a      	b.n	80020f6 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 80020c0:	89fb      	ldrh	r3, [r7, #14]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d108      	bne.n	80020d8 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 80020c6:	89bb      	ldrh	r3, [r7, #12]
 80020c8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d101      	bne.n	80020d4 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 80020d0:	2301      	movs	r3, #1
 80020d2:	e010      	b.n	80020f6 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 80020d4:	2300      	movs	r3, #0
 80020d6:	e00e      	b.n	80020f6 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 80020d8:	23ab      	movs	r3, #171	; 0xab
 80020da:	e00c      	b.n	80020f6 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 80020dc:	89fb      	ldrh	r3, [r7, #14]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 80020e2:	2300      	movs	r3, #0
 80020e4:	e007      	b.n	80020f6 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 80020e6:	89bb      	ldrh	r3, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 80020ec:	2301      	movs	r3, #1
 80020ee:	e002      	b.n	80020f6 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 80020f0:	23ab      	movs	r3, #171	; 0xab
 80020f2:	e000      	b.n	80020f6 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 80020f4:	2300      	movs	r3, #0
  }
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	08030000 	.word	0x08030000
 8002108:	08034000 	.word	0x08034000

0800210c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	460a      	mov	r2, r1
 8002116:	80fb      	strh	r3, [r7, #6]
 8002118:	4613      	mov	r3, r2
 800211a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8002120:	2300      	movs	r3, #0
 8002122:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8002124:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <EE_VerifyPageFullWriteVariable+0xa8>)
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <EE_VerifyPageFullWriteVariable+0xac>)
 800212a:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800212c:	2001      	movs	r0, #1
 800212e:	f7ff ffa7 	bl	8002080 <EE_FindValidPage>
 8002132:	4603      	mov	r3, r0
 8002134:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8002136:	8a3b      	ldrh	r3, [r7, #16]
 8002138:	2bab      	cmp	r3, #171	; 0xab
 800213a:	d101      	bne.n	8002140 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 800213c:	23ab      	movs	r3, #171	; 0xab
 800213e:	e035      	b.n	80021ac <EE_VerifyPageFullWriteVariable+0xa0>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8002140:	8a3b      	ldrh	r3, [r7, #16]
 8002142:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002146:	330c      	adds	r3, #12
 8002148:	039b      	lsls	r3, r3, #14
 800214a:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 800214c:	8a3b      	ldrh	r3, [r7, #16]
 800214e:	3301      	adds	r3, #1
 8002150:	039a      	lsls	r2, r3, #14
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <EE_VerifyPageFullWriteVariable+0xb0>)
 8002154:	4413      	add	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8002158:	e023      	b.n	80021a2 <EE_VerifyPageFullWriteVariable+0x96>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002162:	d11b      	bne.n	800219c <EE_VerifyPageFullWriteVariable+0x90>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8002164:	88ba      	ldrh	r2, [r7, #4]
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	6979      	ldr	r1, [r7, #20]
 800216c:	2001      	movs	r0, #1
 800216e:	f003 fd89 	bl	8005c84 <HAL_FLASH_Program>
 8002172:	4603      	mov	r3, r0
 8002174:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8002176:	7cfb      	ldrb	r3, [r7, #19]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <EE_VerifyPageFullWriteVariable+0x76>
      {
        return FlashStatus;
 800217c:	7cfb      	ldrb	r3, [r7, #19]
 800217e:	b29b      	uxth	r3, r3
 8002180:	e014      	b.n	80021ac <EE_VerifyPageFullWriteVariable+0xa0>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	1c99      	adds	r1, r3, #2
 8002186:	88fa      	ldrh	r2, [r7, #6]
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	2001      	movs	r0, #1
 800218e:	f003 fd79 	bl	8005c84 <HAL_FLASH_Program>
 8002192:	4603      	mov	r3, r0
 8002194:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8002196:	7cfb      	ldrb	r3, [r7, #19]
 8002198:	b29b      	uxth	r3, r3
 800219a:	e007      	b.n	80021ac <EE_VerifyPageFullWriteVariable+0xa0>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3304      	adds	r3, #4
 80021a0:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d3d7      	bcc.n	800215a <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80021aa:	2380      	movs	r3, #128	; 0x80
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	08030000 	.word	0x08030000
 80021b8:	08034000 	.word	0x08034000
 80021bc:	0802ffff 	.word	0x0802ffff

080021c0 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08c      	sub	sp, #48	; 0x30
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	460a      	mov	r2, r1
 80021ca:	80fb      	strh	r3, [r7, #6]
 80021cc:	4613      	mov	r3, r2
 80021ce:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 80021d6:	4b54      	ldr	r3, [pc, #336]	; (8002328 <EE_PageTransfer+0x168>)
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 80021da:	2300      	movs	r3, #0
 80021dc:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80021e2:	2300      	movs	r3, #0
 80021e4:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	847b      	strh	r3, [r7, #34]	; 0x22
 80021ea:	2300      	movs	r3, #0
 80021ec:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7ff ff44 	bl	8002080 <EE_FindValidPage>
 80021f8:	4603      	mov	r3, r0
 80021fa:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 80021fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d104      	bne.n	800220c <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8002202:	4b49      	ldr	r3, [pc, #292]	; (8002328 <EE_PageTransfer+0x168>)
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8002206:	2303      	movs	r3, #3
 8002208:	857b      	strh	r3, [r7, #42]	; 0x2a
 800220a:	e009      	b.n	8002220 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 800220c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800220e:	2b00      	cmp	r3, #0
 8002210:	d104      	bne.n	800221c <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8002212:	4b46      	ldr	r3, [pc, #280]	; (800232c <EE_PageTransfer+0x16c>)
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8002216:	2302      	movs	r3, #2
 8002218:	857b      	strh	r3, [r7, #42]	; 0x2a
 800221a:	e001      	b.n	8002220 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 800221c:	23ab      	movs	r3, #171	; 0xab
 800221e:	e07e      	b.n	800231e <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8002220:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800222a:	2001      	movs	r0, #1
 800222c:	f003 fd2a 	bl	8005c84 <HAL_FLASH_Program>
 8002230:	4603      	mov	r3, r0
 8002232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8002236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 800223e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002242:	b29b      	uxth	r3, r3
 8002244:	e06b      	b.n	800231e <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8002246:	88ba      	ldrh	r2, [r7, #4]
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5d 	bl	800210c <EE_VerifyPageFullWriteVariable>
 8002252:	4603      	mov	r3, r0
 8002254:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8002256:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 800225c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800225e:	e05e      	b.n	800231e <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002260:	2300      	movs	r3, #0
 8002262:	853b      	strh	r3, [r7, #40]	; 0x28
 8002264:	e027      	b.n	80022b6 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8002266:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002268:	4a31      	ldr	r2, [pc, #196]	; (8002330 <EE_PageTransfer+0x170>)
 800226a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	429a      	cmp	r2, r3
 8002272:	d01d      	beq.n	80022b0 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8002274:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002276:	4a2e      	ldr	r2, [pc, #184]	; (8002330 <EE_PageTransfer+0x170>)
 8002278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800227c:	492d      	ldr	r1, [pc, #180]	; (8002334 <EE_PageTransfer+0x174>)
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fe40 	bl	8001f04 <EE_ReadVariable>
 8002284:	4603      	mov	r3, r0
 8002286:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8002288:	8c3b      	ldrh	r3, [r7, #32]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d010      	beq.n	80022b0 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800228e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002290:	4a27      	ldr	r2, [pc, #156]	; (8002330 <EE_PageTransfer+0x170>)
 8002292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002296:	4a27      	ldr	r2, [pc, #156]	; (8002334 <EE_PageTransfer+0x174>)
 8002298:	8812      	ldrh	r2, [r2, #0]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff35 	bl	800210c <EE_VerifyPageFullWriteVariable>
 80022a2:	4603      	mov	r3, r0
 80022a4:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 80022a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 80022ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022ae:	e036      	b.n	800231e <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80022b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022b2:	3301      	adds	r3, #1
 80022b4:	853b      	strh	r3, [r7, #40]	; 0x28
 80022b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d9d4      	bls.n	8002266 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 80022c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022c2:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 80022c4:	2301      	movs	r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80022c8:	2302      	movs	r3, #2
 80022ca:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 80022cc:	f107 021c 	add.w	r2, r7, #28
 80022d0:	f107 0308 	add.w	r3, r7, #8
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 fe8a 	bl	8005ff0 <HAL_FLASHEx_Erase>
 80022dc:	4603      	mov	r3, r0
 80022de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80022e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 80022ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	e015      	b.n	800231e <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022fc:	2001      	movs	r0, #1
 80022fe:	f003 fcc1 	bl	8005c84 <HAL_FLASH_Program>
 8002302:	4603      	mov	r3, r0
 8002304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8002308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8002310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002314:	b29b      	uxth	r3, r3
 8002316:	e002      	b.n	800231e <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8002318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800231c:	b29b      	uxth	r3, r3
}
 800231e:	4618      	mov	r0, r3
 8002320:	3730      	adds	r7, #48	; 0x30
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	08030000 	.word	0x08030000
 800232c:	08034000 	.word	0x08034000
 8002330:	20000000 	.word	0x20000000
 8002334:	2000009e 	.word	0x2000009e

08002338 <HAL_TIM_PWM_PulseFinishedCallback>:
/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

// for Motor J1 J2
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)								// Stepper J1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a33      	ldr	r2, [pc, #204]	; (8002414 <HAL_TIM_PWM_PulseFinishedCallback+0xdc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d12d      	bne.n	80023a6 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
	{
		motor_j1_data._currentPos = data_AS5600_M1;			// Set Current Position
 800234a:	4b33      	ldr	r3, [pc, #204]	; (8002418 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	4b32      	ldr	r3, [pc, #200]	; (800241c <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
		osSemaphoreRelease(binarySem_motorJ1Handle);		// Release Semaphore for Calculator Stepper (run)
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f009 fe41 	bl	800bfe0 <osSemaphoreRelease>
		accel_j1_tik++;
 800235e:	4b31      	ldr	r3, [pc, #196]	; (8002424 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	4b2f      	ldr	r3, [pc, #188]	; (8002424 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 8002368:	801a      	strh	r2, [r3, #0]
		if(accel_j1_tik==1000)								// Changer Accel
 800236a:	4b2e      	ldr	r3, [pc, #184]	; (8002424 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002372:	d118      	bne.n	80023a6 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
		{
			accel_j1_tik=0;
 8002374:	4b2b      	ldr	r3, [pc, #172]	; (8002424 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 8002376:	2200      	movs	r2, #0
 8002378:	801a      	strh	r2, [r3, #0]
			long distance = distanceToGo(&motor_j1_data);
 800237a:	4828      	ldr	r0, [pc, #160]	; (800241c <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 800237c:	f7ff f836 	bl	80013ec <distanceToGo>
 8002380:	60f8      	str	r0, [r7, #12]
			if(labs(distance) < 100){
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002388:	db08      	blt.n	800239c <HAL_TIM_PWM_PulseFinishedCallback+0x64>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b63      	cmp	r3, #99	; 0x63
 800238e:	dc05      	bgt.n	800239c <HAL_TIM_PWM_PulseFinishedCallback+0x64>
				setAcceleration(&motor_j1_data, j1_ACCEL_MIN);
 8002390:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002428 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>
 8002394:	4821      	ldr	r0, [pc, #132]	; (800241c <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 8002396:	f7fe fecb 	bl	8001130 <setAcceleration>
 800239a:	e004      	b.n	80023a6 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
			}else{
				setAcceleration(&motor_j1_data, J1_ACCEL_MAX);
 800239c:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800242c <HAL_TIM_PWM_PulseFinishedCallback+0xf4>
 80023a0:	481e      	ldr	r0, [pc, #120]	; (800241c <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 80023a2:	f7fe fec5 	bl	8001130 <setAcceleration>
			}
		}
	}
	if(htim->Instance==TIM2)								// Stepper J2
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ae:	d12d      	bne.n	800240c <HAL_TIM_PWM_PulseFinishedCallback+0xd4>
		{
			motor_j2_data._currentPos = data_AS5600_M2;		// Set Current Position
 80023b0:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80023b8:	631a      	str	r2, [r3, #48]	; 0x30
			osSemaphoreRelease(binarySem_motorJ2Handle);	// Release Semaphore for Calculator Stepper (run)
 80023ba:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f009 fe0e 	bl	800bfe0 <osSemaphoreRelease>
			accel_j2_tik++;
 80023c4:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	3301      	adds	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80023ce:	801a      	strh	r2, [r3, #0]
			if(accel_j2_tik==500)
 80023d0:	4b1a      	ldr	r3, [pc, #104]	; (800243c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023d8:	d118      	bne.n	800240c <HAL_TIM_PWM_PulseFinishedCallback+0xd4>
			{
				accel_j2_tik=0;
 80023da:	4b18      	ldr	r3, [pc, #96]	; (800243c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80023dc:	2200      	movs	r2, #0
 80023de:	801a      	strh	r2, [r3, #0]
				long distance = distanceToGo(&motor_j2_data);
 80023e0:	4814      	ldr	r0, [pc, #80]	; (8002434 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80023e2:	f7ff f803 	bl	80013ec <distanceToGo>
 80023e6:	60b8      	str	r0, [r7, #8]
				if(labs(distance) < 100){
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80023ee:	db08      	blt.n	8002402 <HAL_TIM_PWM_PulseFinishedCallback+0xca>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b63      	cmp	r3, #99	; 0x63
 80023f4:	dc05      	bgt.n	8002402 <HAL_TIM_PWM_PulseFinishedCallback+0xca>
					setAcceleration(&motor_j2_data, J2_ACCEL_MIN);
 80023f6:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8002428 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>
 80023fa:	480e      	ldr	r0, [pc, #56]	; (8002434 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80023fc:	f7fe fe98 	bl	8001130 <setAcceleration>
				}else{
					setAcceleration(&motor_j2_data, J2_ACCEL_MAX);
				}
			}
		}
}
 8002400:	e004      	b.n	800240c <HAL_TIM_PWM_PulseFinishedCallback+0xd4>
					setAcceleration(&motor_j2_data, J2_ACCEL_MAX);
 8002402:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002440 <HAL_TIM_PWM_PulseFinishedCallback+0x108>
 8002406:	480b      	ldr	r0, [pc, #44]	; (8002434 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002408:	f7fe fe92 	bl	8001130 <setAcceleration>
}
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40000400 	.word	0x40000400
 8002418:	200089b6 	.word	0x200089b6
 800241c:	20008c20 	.word	0x20008c20
 8002420:	20008a78 	.word	0x20008a78
 8002424:	200000a4 	.word	0x200000a4
 8002428:	47c35000 	.word	0x47c35000
 800242c:	48f42400 	.word	0x48f42400
 8002430:	200089b4 	.word	0x200089b4
 8002434:	20008bc0 	.word	0x20008bc0
 8002438:	20008c1c 	.word	0x20008c1c
 800243c:	200000a6 	.word	0x200000a6
 8002440:	48c35000 	.word	0x48c35000

08002444 <HAL_I2C_AddrCallback>:

// I2C-Interface
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	70fb      	strb	r3, [r7, #3]
 8002450:	4613      	mov	r3, r2
 8002452:	803b      	strh	r3, [r7, #0]
	if(hi2c->Instance==I2C2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0c      	ldr	r2, [pc, #48]	; (800248c <HAL_I2C_AddrCallback+0x48>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d112      	bne.n	8002484 <HAL_I2C_AddrCallback+0x40>
	{
		if(TransferDirection == I2C_DIRECTION_TRANSMIT)
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d106      	bne.n	8002472 <HAL_I2C_AddrCallback+0x2e>
		{
			HAL_I2C_Slave_Seq_Receive_DMA(&hi2c2,data_rev_master,4,I2C_FIRST_AND_LAST_FRAME);
 8002464:	2308      	movs	r3, #8
 8002466:	2204      	movs	r2, #4
 8002468:	4909      	ldr	r1, [pc, #36]	; (8002490 <HAL_I2C_AddrCallback+0x4c>)
 800246a:	480a      	ldr	r0, [pc, #40]	; (8002494 <HAL_I2C_AddrCallback+0x50>)
 800246c:	f004 fdca 	bl	8007004 <HAL_I2C_Slave_Seq_Receive_DMA>
		}else if(TransferDirection == I2C_DIRECTION_RECEIVE)
		{
			HAL_I2C_Slave_Seq_Transmit_DMA(&hi2c2, data_trans_master, 7, I2C_LAST_FRAME);
		}
	}
}
 8002470:	e008      	b.n	8002484 <HAL_I2C_AddrCallback+0x40>
		}else if(TransferDirection == I2C_DIRECTION_RECEIVE)
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d105      	bne.n	8002484 <HAL_I2C_AddrCallback+0x40>
			HAL_I2C_Slave_Seq_Transmit_DMA(&hi2c2, data_trans_master, 7, I2C_LAST_FRAME);
 8002478:	2320      	movs	r3, #32
 800247a:	2207      	movs	r2, #7
 800247c:	4906      	ldr	r1, [pc, #24]	; (8002498 <HAL_I2C_AddrCallback+0x54>)
 800247e:	4805      	ldr	r0, [pc, #20]	; (8002494 <HAL_I2C_AddrCallback+0x50>)
 8002480:	f004 fc86 	bl	8006d90 <HAL_I2C_Slave_Seq_Transmit_DMA>
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40005800 	.word	0x40005800
 8002490:	20008a70 	.word	0x20008a70
 8002494:	20008d88 	.word	0x20008d88
 8002498:	20008c14 	.word	0x20008c14

0800249c <HAL_I2C_ListenCpltCallback>:
// 	I2C2 for interface
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(&hi2c2);
 80024a4:	4803      	ldr	r0, [pc, #12]	; (80024b4 <HAL_I2C_ListenCpltCallback+0x18>)
 80024a6:	f004 fee7 	bl	8007278 <HAL_I2C_EnableListen_IT>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20008d88 	.word	0x20008d88

080024b8 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==I2C2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <HAL_I2C_SlaveRxCpltCallback+0x30>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d10a      	bne.n	80024e0 <HAL_I2C_SlaveRxCpltCallback+0x28>
	{
		osSemaphoreRelease(binarySem_masterCmdHandle);// sau khi nhan duoc lenh tu master
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_I2C_SlaveRxCpltCallback+0x34>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f009 fd86 	bl	800bfe0 <osSemaphoreRelease>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80024d4:	2200      	movs	r2, #0
 80024d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024da:	4805      	ldr	r0, [pc, #20]	; (80024f0 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80024dc:	f004 f92a 	bl	8006734 <HAL_GPIO_WritePin>
	}
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40005800 	.word	0x40005800
 80024ec:	20008c74 	.word	0x20008c74
 80024f0:	40020000 	.word	0x40020000

080024f4 <HAL_I2C_ErrorCallback>:

// Handler I2C Error
extern bool FLAG_AS5600_M1, FLAG_AS5600_M2;
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==I2C1){
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a14      	ldr	r2, [pc, #80]	; (8002554 <HAL_I2C_ErrorCallback+0x60>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d102      	bne.n	800250c <HAL_I2C_ErrorCallback+0x18>
       FLAG_AS5600_M1 = HAL_ERROR;
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <HAL_I2C_ErrorCallback+0x64>)
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
	}
	if(hi2c->Instance==I2C3){
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a12      	ldr	r2, [pc, #72]	; (800255c <HAL_I2C_ErrorCallback+0x68>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d102      	bne.n	800251c <HAL_I2C_ErrorCallback+0x28>
		FLAG_AS5600_M2 = HAL_ERROR;
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_I2C_ErrorCallback+0x6c>)
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
	}
	 if(hi2c->Instance==I2C2){
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a10      	ldr	r2, [pc, #64]	; (8002564 <HAL_I2C_ErrorCallback+0x70>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d112      	bne.n	800254c <HAL_I2C_ErrorCallback+0x58>
		 HAL_I2C_DeInit(&hi2c2);
 8002526:	4810      	ldr	r0, [pc, #64]	; (8002568 <HAL_I2C_ErrorCallback+0x74>)
 8002528:	f004 fa7c 	bl	8006a24 <HAL_I2C_DeInit>
		 MX_I2C2_Init();
 800252c:	f000 fe8e 	bl	800324c <MX_I2C2_Init>
		 HAL_I2C_EnableListen_IT(&hi2c2);	// I2C2 for interface
 8002530:	480d      	ldr	r0, [pc, #52]	; (8002568 <HAL_I2C_ErrorCallback+0x74>)
 8002532:	f004 fea1 	bl	8007278 <HAL_I2C_EnableListen_IT>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800253a:	480c      	ldr	r0, [pc, #48]	; (800256c <HAL_I2C_ErrorCallback+0x78>)
 800253c:	f004 f913 	bl	8006766 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002540:	2201      	movs	r2, #1
 8002542:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002546:	4809      	ldr	r0, [pc, #36]	; (800256c <HAL_I2C_ErrorCallback+0x78>)
 8002548:	f004 f8f4 	bl	8006734 <HAL_GPIO_WritePin>
	 }
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40005400 	.word	0x40005400
 8002558:	2000009c 	.word	0x2000009c
 800255c:	40005c00 	.word	0x40005c00
 8002560:	2000009d 	.word	0x2000009d
 8002564:	40005800 	.word	0x40005800
 8002568:	20008d88 	.word	0x20008d88
 800256c:	40020000 	.word	0x40020000

08002570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a07      	ldr	r2, [pc, #28]	; (800259c <vApplicationGetIdleTaskMemory+0x2c>)
 8002580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4a06      	ldr	r2, [pc, #24]	; (80025a0 <vApplicationGetIdleTaskMemory+0x30>)
 8002586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	200000ac 	.word	0x200000ac
 80025a0:	20000100 	.word	0x20000100

080025a4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4a07      	ldr	r2, [pc, #28]	; (80025d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80025b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	4a06      	ldr	r2, [pc, #24]	; (80025d4 <vApplicationGetTimerTaskMemory+0x30>)
 80025ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025c2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	20000300 	.word	0x20000300
 80025d4:	20000354 	.word	0x20000354

080025d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80025d8:	b5b0      	push	{r4, r5, r7, lr}
 80025da:	b0a2      	sub	sp, #136	; 0x88
 80025dc:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySem_motorJ1 */
  osSemaphoreDef(binarySem_motorJ1);
 80025de:	2300      	movs	r3, #0
 80025e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  binarySem_motorJ1Handle = osSemaphoreCreate(osSemaphore(binarySem_motorJ1), 1);
 80025ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025ee:	2101      	movs	r1, #1
 80025f0:	4618      	mov	r0, r3
 80025f2:	f009 fc74 	bl	800bede <osSemaphoreCreate>
 80025f6:	4603      	mov	r3, r0
 80025f8:	4a34      	ldr	r2, [pc, #208]	; (80026cc <MX_FREERTOS_Init+0xf4>)
 80025fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySem_motorJ2 */
  osSemaphoreDef(binarySem_motorJ2);
 80025fc:	2300      	movs	r3, #0
 80025fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002600:	2300      	movs	r3, #0
 8002602:	67fb      	str	r3, [r7, #124]	; 0x7c
  binarySem_motorJ2Handle = osSemaphoreCreate(osSemaphore(binarySem_motorJ2), 1);
 8002604:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002608:	2101      	movs	r1, #1
 800260a:	4618      	mov	r0, r3
 800260c:	f009 fc67 	bl	800bede <osSemaphoreCreate>
 8002610:	4603      	mov	r3, r0
 8002612:	4a2f      	ldr	r2, [pc, #188]	; (80026d0 <MX_FREERTOS_Init+0xf8>)
 8002614:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySem_masterCmd */
  osSemaphoreDef(binarySem_masterCmd);
 8002616:	2300      	movs	r3, #0
 8002618:	673b      	str	r3, [r7, #112]	; 0x70
 800261a:	2300      	movs	r3, #0
 800261c:	677b      	str	r3, [r7, #116]	; 0x74
  binarySem_masterCmdHandle = osSemaphoreCreate(osSemaphore(binarySem_masterCmd), 1);
 800261e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002622:	2101      	movs	r1, #1
 8002624:	4618      	mov	r0, r3
 8002626:	f009 fc5a 	bl	800bede <osSemaphoreCreate>
 800262a:	4603      	mov	r3, r0
 800262c:	4a29      	ldr	r2, [pc, #164]	; (80026d4 <MX_FREERTOS_Init+0xfc>)
 800262e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 2048);
 8002630:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <MX_FREERTOS_Init+0x100>)
 8002632:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002636:	461d      	mov	r5, r3
 8002638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800263a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800263c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002644:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f009 fbe7 	bl	800be1e <osThreadCreate>
 8002650:	4603      	mov	r3, r0
 8002652:	4a22      	ldr	r2, [pc, #136]	; (80026dc <MX_FREERTOS_Init+0x104>)
 8002654:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorJ1Task */
  osThreadDef(motorJ1Task, StartTaskMotorJ1, osPriorityHigh, 0, 512);
 8002656:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <MX_FREERTOS_Init+0x108>)
 8002658:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800265c:	461d      	mov	r5, r3
 800265e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorJ1TaskHandle = osThreadCreate(osThread(motorJ1Task), NULL);
 800266a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f009 fbd4 	bl	800be1e <osThreadCreate>
 8002676:	4603      	mov	r3, r0
 8002678:	4a1a      	ldr	r2, [pc, #104]	; (80026e4 <MX_FREERTOS_Init+0x10c>)
 800267a:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorJ2Task */
  osThreadDef(motorJ2Task, StartTaskMotorJ2, osPriorityHigh, 0, 512);
 800267c:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <MX_FREERTOS_Init+0x110>)
 800267e:	f107 041c 	add.w	r4, r7, #28
 8002682:	461d      	mov	r5, r3
 8002684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002688:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800268c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorJ2TaskHandle = osThreadCreate(osThread(motorJ2Task), NULL);
 8002690:	f107 031c 	add.w	r3, r7, #28
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f009 fbc1 	bl	800be1e <osThreadCreate>
 800269c:	4603      	mov	r3, r0
 800269e:	4a13      	ldr	r2, [pc, #76]	; (80026ec <MX_FREERTOS_Init+0x114>)
 80026a0:	6013      	str	r3, [r2, #0]

  /* definition and creation of moveTask */
  osThreadDef(moveTask, StartTaskMove, osPriorityRealtime, 0, 4096);
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <MX_FREERTOS_Init+0x118>)
 80026a4:	463c      	mov	r4, r7
 80026a6:	461d      	mov	r5, r3
 80026a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  moveTaskHandle = osThreadCreate(osThread(moveTask), NULL);
 80026b4:	463b      	mov	r3, r7
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f009 fbb0 	bl	800be1e <osThreadCreate>
 80026be:	4603      	mov	r3, r0
 80026c0:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <MX_FREERTOS_Init+0x11c>)
 80026c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80026c4:	bf00      	nop
 80026c6:	3788      	adds	r7, #136	; 0x88
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bdb0      	pop	{r4, r5, r7, pc}
 80026cc:	20008a78 	.word	0x20008a78
 80026d0:	20008c1c 	.word	0x20008c1c
 80026d4:	20008c74 	.word	0x20008c74
 80026d8:	080102d0 	.word	0x080102d0
 80026dc:	20008a6c 	.word	0x20008a6c
 80026e0:	080102ec 	.word	0x080102ec
 80026e4:	20008a68 	.word	0x20008a68
 80026e8:	08010308 	.word	0x08010308
 80026ec:	20008c7c 	.word	0x20008c7c
 80026f0:	08010324 	.word	0x08010324
 80026f4:	20008a74 	.word	0x20008a74

080026f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void const * argument)
{
 80026f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026fc:	b096      	sub	sp, #88	; 0x58
 80026fe:	af04      	add	r7, sp, #16
 8002700:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
#ifdef MDEBUG
	printf("Robochess 2021\r\n");
 8002702:	48a8      	ldr	r0, [pc, #672]	; (80029a4 <StartDefaultTask+0x2ac>)
 8002704:	f00c fd04 	bl	800f110 <puts>
#endif
	readSquarePosition();
 8002708:	f000 fc66 	bl	8002fd8 <readSquarePosition>
	HAL_I2C_EnableListen_IT(&hi2c2);	// I2C2 for interface
 800270c:	48a6      	ldr	r0, [pc, #664]	; (80029a8 <StartDefaultTask+0x2b0>)
 800270e:	f004 fdb3 	bl	8007278 <HAL_I2C_EnableListen_IT>
	AS5600_Start_Update();				// Start Tim10 & get data of AS5600
 8002712:	f7fe fc15 	bl	8000f40 <AS5600_Start_Update>
	batteryVoltInit();
 8002716:	f7ff f97b 	bl	8001a10 <batteryVoltInit>
	pickAndDropInit();
 800271a:	f001 f975 	bl	8003a08 <pickAndDropInit>
  /* Infinite loop */
  for(;;)
  {
	  updateInfo();
 800271e:	f000 fbb3 	bl	8002e88 <updateInfo>

#ifdef MDEBUG
	  if(uart2_onData){
 8002722:	4ba2      	ldr	r3, [pc, #648]	; (80029ac <StartDefaultTask+0x2b4>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8187 	beq.w	8002a3a <StartDefaultTask+0x342>
		  uart2_onData=false; //realease
 800272c:	4b9f      	ldr	r3, [pc, #636]	; (80029ac <StartDefaultTask+0x2b4>)
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
		  printf("Rev %dBYTE: %s\r\n",uart2_data_length,uart2_main_buf);
 8002732:	4b9f      	ldr	r3, [pc, #636]	; (80029b0 <StartDefaultTask+0x2b8>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	4a9f      	ldr	r2, [pc, #636]	; (80029b4 <StartDefaultTask+0x2bc>)
 8002738:	4619      	mov	r1, r3
 800273a:	489f      	ldr	r0, [pc, #636]	; (80029b8 <StartDefaultTask+0x2c0>)
 800273c:	f00c fc62 	bl	800f004 <iprintf>
		  // Gripper
		  if(uart2_main_buf[0]==CMD_GRIPPER){
 8002740:	4b9c      	ldr	r3, [pc, #624]	; (80029b4 <StartDefaultTask+0x2bc>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b47      	cmp	r3, #71	; 0x47
 8002746:	d120      	bne.n	800278a <StartDefaultTask+0x92>
			  char sval[1];
			  sval[0]=uart2_main_buf[1];
 8002748:	4b9a      	ldr	r3, [pc, #616]	; (80029b4 <StartDefaultTask+0x2bc>)
 800274a:	785b      	ldrb	r3, [r3, #1]
 800274c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			  int val=atoi(sval);
 8002750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002754:	4618      	mov	r0, r3
 8002756:	f00c fc11 	bl	800ef7c <atoi>
 800275a:	62b8      	str	r0, [r7, #40]	; 0x28
			  if(val==0){
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	2b00      	cmp	r3, #0
 8002760:	d107      	bne.n	8002772 <StartDefaultTask+0x7a>
				  SERVO_DROP;
 8002762:	4b96      	ldr	r3, [pc, #600]	; (80029bc <StartDefaultTask+0x2c4>)
 8002764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002768:	63da      	str	r2, [r3, #60]	; 0x3c
				  printf("Gripper open\r\n");
 800276a:	4895      	ldr	r0, [pc, #596]	; (80029c0 <StartDefaultTask+0x2c8>)
 800276c:	f00c fcd0 	bl	800f110 <puts>
 8002770:	e163      	b.n	8002a3a <StartDefaultTask+0x342>
			  }else if(val==1){
 8002772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002774:	2b01      	cmp	r3, #1
 8002776:	f040 8160 	bne.w	8002a3a <StartDefaultTask+0x342>
				  SERVO_PICKUP;
 800277a:	4b90      	ldr	r3, [pc, #576]	; (80029bc <StartDefaultTask+0x2c4>)
 800277c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002780:	63da      	str	r2, [r3, #60]	; 0x3c
				  printf("Gripper close\r\n");
 8002782:	4890      	ldr	r0, [pc, #576]	; (80029c4 <StartDefaultTask+0x2cc>)
 8002784:	f00c fcc4 	bl	800f110 <puts>
 8002788:	e157      	b.n	8002a3a <StartDefaultTask+0x342>
			  }
		// Info
		  }else if(uart2_main_buf[0]==CMD_INFO){
 800278a:	4b8a      	ldr	r3, [pc, #552]	; (80029b4 <StartDefaultTask+0x2bc>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b49      	cmp	r3, #73	; 0x49
 8002790:	d123      	bne.n	80027da <StartDefaultTask+0xe2>
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 8002792:	4b8d      	ldr	r3, [pc, #564]	; (80029c8 <StartDefaultTask+0x2d0>)
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	461d      	mov	r5, r3
 8002798:	4b8c      	ldr	r3, [pc, #560]	; (80029cc <StartDefaultTask+0x2d4>)
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	461e      	mov	r6, r3
		 			  data_AS5600_M1,data_AS5600_M2,HAL_SENSOR_UP_GET,HAL_SENSOR_DOWN_GET,
 800279e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027a2:	488b      	ldr	r0, [pc, #556]	; (80029d0 <StartDefaultTask+0x2d8>)
 80027a4:	f003 ffae 	bl	8006704 <HAL_GPIO_ReadPin>
 80027a8:	4603      	mov	r3, r0
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 80027aa:	4698      	mov	r8, r3
		 			  data_AS5600_M1,data_AS5600_M2,HAL_SENSOR_UP_GET,HAL_SENSOR_DOWN_GET,
 80027ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027b0:	4887      	ldr	r0, [pc, #540]	; (80029d0 <StartDefaultTask+0x2d8>)
 80027b2:	f003 ffa7 	bl	8006704 <HAL_GPIO_ReadPin>
 80027b6:	4603      	mov	r3, r0
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 80027b8:	461c      	mov	r4, r3
					  batteryGet(),data_trans_master[6]);
 80027ba:	f7ff f933 	bl	8001a24 <batteryGet>
 80027be:	4603      	mov	r3, r0
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 80027c0:	461a      	mov	r2, r3
					  batteryGet(),data_trans_master[6]);
 80027c2:	4b84      	ldr	r3, [pc, #528]	; (80029d4 <StartDefaultTask+0x2dc>)
 80027c4:	799b      	ldrb	r3, [r3, #6]
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 80027c6:	9302      	str	r3, [sp, #8]
 80027c8:	9201      	str	r2, [sp, #4]
 80027ca:	9400      	str	r4, [sp, #0]
 80027cc:	4643      	mov	r3, r8
 80027ce:	4632      	mov	r2, r6
 80027d0:	4629      	mov	r1, r5
 80027d2:	4881      	ldr	r0, [pc, #516]	; (80029d8 <StartDefaultTask+0x2e0>)
 80027d4:	f00c fc16 	bl	800f004 <iprintf>
 80027d8:	e12f      	b.n	8002a3a <StartDefaultTask+0x342>
		// PICK
		  }else if(uart2_main_buf[0]==CMD_PICK){
 80027da:	4b76      	ldr	r3, [pc, #472]	; (80029b4 <StartDefaultTask+0x2bc>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b70      	cmp	r3, #112	; 0x70
 80027e0:	d11c      	bne.n	800281c <StartDefaultTask+0x124>
			  char sval[1];
			  sval[0]=uart2_main_buf[1];
 80027e2:	4b74      	ldr	r3, [pc, #464]	; (80029b4 <StartDefaultTask+0x2bc>)
 80027e4:	785b      	ldrb	r3, [r3, #1]
 80027e6:	f887 3020 	strb.w	r3, [r7, #32]
			  int val=atoi(sval);
 80027ea:	f107 0320 	add.w	r3, r7, #32
 80027ee:	4618      	mov	r0, r3
 80027f0:	f00c fbc4 	bl	800ef7c <atoi>
 80027f4:	62f8      	str	r0, [r7, #44]	; 0x2c
			  if(val==0){
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d105      	bne.n	8002808 <StartDefaultTask+0x110>
				  printf("J3 MOVE UP\r\n");
 80027fc:	4877      	ldr	r0, [pc, #476]	; (80029dc <StartDefaultTask+0x2e4>)
 80027fe:	f00c fc87 	bl	800f110 <puts>
				  j3MoveUp();
 8002802:	f001 f943 	bl	8003a8c <j3MoveUp>
 8002806:	e118      	b.n	8002a3a <StartDefaultTask+0x342>
			  }else if(val==1){
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	2b01      	cmp	r3, #1
 800280c:	f040 8115 	bne.w	8002a3a <StartDefaultTask+0x342>
				  printf("J3 MOVE DOWN\r\n");
 8002810:	4873      	ldr	r0, [pc, #460]	; (80029e0 <StartDefaultTask+0x2e8>)
 8002812:	f00c fc7d 	bl	800f110 <puts>
				  j3MoveDown();
 8002816:	f001 f95f 	bl	8003ad8 <j3MoveDown>
 800281a:	e10e      	b.n	8002a3a <StartDefaultTask+0x342>
			  }
		// PICK PIECE
		  }else if(uart2_main_buf[0]==CMD_PICKPIECE){
 800281c:	4b65      	ldr	r3, [pc, #404]	; (80029b4 <StartDefaultTask+0x2bc>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b50      	cmp	r3, #80	; 0x50
 8002822:	d11b      	bne.n	800285c <StartDefaultTask+0x164>
			  char sval[1];
			  sval[0]=uart2_main_buf[1];
 8002824:	4b63      	ldr	r3, [pc, #396]	; (80029b4 <StartDefaultTask+0x2bc>)
 8002826:	785b      	ldrb	r3, [r3, #1]
 8002828:	773b      	strb	r3, [r7, #28]
			  int val=atoi(sval);
 800282a:	f107 031c 	add.w	r3, r7, #28
 800282e:	4618      	mov	r0, r3
 8002830:	f00c fba4 	bl	800ef7c <atoi>
 8002834:	6338      	str	r0, [r7, #48]	; 0x30
			  if(val==0){
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <StartDefaultTask+0x150>
				  printf("DROP PIECE\r\n");
 800283c:	4869      	ldr	r0, [pc, #420]	; (80029e4 <StartDefaultTask+0x2ec>)
 800283e:	f00c fc67 	bl	800f110 <puts>
				  dropPiece();
 8002842:	f001 f99d 	bl	8003b80 <dropPiece>
 8002846:	e0f8      	b.n	8002a3a <StartDefaultTask+0x342>
			  }else if(val==1){
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	2b01      	cmp	r3, #1
 800284c:	f040 80f5 	bne.w	8002a3a <StartDefaultTask+0x342>
				  printf("PICKUP PIECE\r\n");
 8002850:	4865      	ldr	r0, [pc, #404]	; (80029e8 <StartDefaultTask+0x2f0>)
 8002852:	f00c fc5d 	bl	800f110 <puts>
				  pickupPiece();
 8002856:	f001 f979 	bl	8003b4c <pickupPiece>
 800285a:	e0ee      	b.n	8002a3a <StartDefaultTask+0x342>
			  }
		// MOVE
		  }else if(uart2_main_buf[0]==CMD_MOVE){
 800285c:	4b55      	ldr	r3, [pc, #340]	; (80029b4 <StartDefaultTask+0x2bc>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b6d      	cmp	r3, #109	; 0x6d
 8002862:	d12b      	bne.n	80028bc <StartDefaultTask+0x1c4>
			  char sval[2];
			  if(uart2_data_length>2){
 8002864:	4b52      	ldr	r3, [pc, #328]	; (80029b0 <StartDefaultTask+0x2b8>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d906      	bls.n	800287a <StartDefaultTask+0x182>
				  sval[0]=uart2_main_buf[1];
 800286c:	4b51      	ldr	r3, [pc, #324]	; (80029b4 <StartDefaultTask+0x2bc>)
 800286e:	785b      	ldrb	r3, [r3, #1]
 8002870:	763b      	strb	r3, [r7, #24]
				  sval[1]=uart2_main_buf[2];
 8002872:	4b50      	ldr	r3, [pc, #320]	; (80029b4 <StartDefaultTask+0x2bc>)
 8002874:	789b      	ldrb	r3, [r3, #2]
 8002876:	767b      	strb	r3, [r7, #25]
 8002878:	e004      	b.n	8002884 <StartDefaultTask+0x18c>
			  }else{
				  sval[0]='0';
 800287a:	2330      	movs	r3, #48	; 0x30
 800287c:	763b      	strb	r3, [r7, #24]
				  sval[1]=uart2_main_buf[1];
 800287e:	4b4d      	ldr	r3, [pc, #308]	; (80029b4 <StartDefaultTask+0x2bc>)
 8002880:	785b      	ldrb	r3, [r3, #1]
 8002882:	767b      	strb	r3, [r7, #25]
			  }
			  int val=atoi(sval);
 8002884:	f107 0318 	add.w	r3, r7, #24
 8002888:	4618      	mov	r0, r3
 800288a:	f00c fb77 	bl	800ef7c <atoi>
 800288e:	6378      	str	r0, [r7, #52]	; 0x34
			  if(val>=0 && val<80){
 8002890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002892:	2b00      	cmp	r3, #0
 8002894:	db0d      	blt.n	80028b2 <StartDefaultTask+0x1ba>
 8002896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002898:	2b4f      	cmp	r3, #79	; 0x4f
 800289a:	dc0a      	bgt.n	80028b2 <StartDefaultTask+0x1ba>
				  printf("MOVE TO SQUARE:%d\r\n",val);
 800289c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800289e:	4853      	ldr	r0, [pc, #332]	; (80029ec <StartDefaultTask+0x2f4>)
 80028a0:	f00c fbb0 	bl	800f004 <iprintf>
				  moveToSquare(val, false);
 80028a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f9d0 	bl	8002c50 <moveToSquare>
 80028b0:	e0c3      	b.n	8002a3a <StartDefaultTask+0x342>
			  }else{
				  printf("ERROR! Cannot move to square %d\r\n",val);
 80028b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028b4:	484e      	ldr	r0, [pc, #312]	; (80029f0 <StartDefaultTask+0x2f8>)
 80028b6:	f00c fba5 	bl	800f004 <iprintf>
 80028ba:	e0be      	b.n	8002a3a <StartDefaultTask+0x342>
			  }
		// MOVE PIECE
		  }else if(uart2_main_buf[0]==CMD_MOVEPIECE){
 80028bc:	4b3d      	ldr	r3, [pc, #244]	; (80029b4 <StartDefaultTask+0x2bc>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b4d      	cmp	r3, #77	; 0x4d
 80028c2:	d140      	bne.n	8002946 <StartDefaultTask+0x24e>
			  char sFrom[2],sTo[2],sOption[1];
			  sFrom[0]=uart2_main_buf[1];
 80028c4:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <StartDefaultTask+0x2bc>)
 80028c6:	785b      	ldrb	r3, [r3, #1]
 80028c8:	753b      	strb	r3, [r7, #20]
			  sFrom[1]=uart2_main_buf[2];
 80028ca:	4b3a      	ldr	r3, [pc, #232]	; (80029b4 <StartDefaultTask+0x2bc>)
 80028cc:	789b      	ldrb	r3, [r3, #2]
 80028ce:	757b      	strb	r3, [r7, #21]
			  sTo[0]=uart2_main_buf[3];
 80028d0:	4b38      	ldr	r3, [pc, #224]	; (80029b4 <StartDefaultTask+0x2bc>)
 80028d2:	78db      	ldrb	r3, [r3, #3]
 80028d4:	743b      	strb	r3, [r7, #16]
			  sTo[1]=uart2_main_buf[4];
 80028d6:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <StartDefaultTask+0x2bc>)
 80028d8:	791b      	ldrb	r3, [r3, #4]
 80028da:	747b      	strb	r3, [r7, #17]
			  sOption[0]=uart2_main_buf[5];
 80028dc:	4b35      	ldr	r3, [pc, #212]	; (80029b4 <StartDefaultTask+0x2bc>)
 80028de:	795b      	ldrb	r3, [r3, #5]
 80028e0:	733b      	strb	r3, [r7, #12]
			  int _from=atoi(sFrom);
 80028e2:	f107 0314 	add.w	r3, r7, #20
 80028e6:	4618      	mov	r0, r3
 80028e8:	f00c fb48 	bl	800ef7c <atoi>
 80028ec:	6438      	str	r0, [r7, #64]	; 0x40
			  int _to =atoi(sTo);
 80028ee:	f107 0310 	add.w	r3, r7, #16
 80028f2:	4618      	mov	r0, r3
 80028f4:	f00c fb42 	bl	800ef7c <atoi>
 80028f8:	63f8      	str	r0, [r7, #60]	; 0x3c
			  int _option =atoi(sOption);
 80028fa:	f107 030c 	add.w	r3, r7, #12
 80028fe:	4618      	mov	r0, r3
 8002900:	f00c fb3c 	bl	800ef7c <atoi>
 8002904:	63b8      	str	r0, [r7, #56]	; 0x38
			  if((_from>=0 && _from<80) && (_to>=0 && _to<80)){
 8002906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	db18      	blt.n	800293e <StartDefaultTask+0x246>
 800290c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800290e:	2b4f      	cmp	r3, #79	; 0x4f
 8002910:	dc15      	bgt.n	800293e <StartDefaultTask+0x246>
 8002912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002914:	2b00      	cmp	r3, #0
 8002916:	db12      	blt.n	800293e <StartDefaultTask+0x246>
 8002918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800291a:	2b4f      	cmp	r3, #79	; 0x4f
 800291c:	dc0f      	bgt.n	800293e <StartDefaultTask+0x246>
				  printf("MOVEPIECE %d->%d Option:%d\r\n",_from,_to,_option);
 800291e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002920:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002922:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002924:	4833      	ldr	r0, [pc, #204]	; (80029f4 <StartDefaultTask+0x2fc>)
 8002926:	f00c fb6d 	bl	800f004 <iprintf>
				  movePiece(_from, _to, _option);
 800292a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800292c:	b2db      	uxtb	r3, r3
 800292e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002930:	b2d1      	uxtb	r1, r2
 8002932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fa1e 	bl	8002d78 <movePiece>
 800293c:	e07d      	b.n	8002a3a <StartDefaultTask+0x342>
			  }else{
				  printf("ERROR! Out Range of square\r\n");
 800293e:	482e      	ldr	r0, [pc, #184]	; (80029f8 <StartDefaultTask+0x300>)
 8002940:	f00c fbe6 	bl	800f110 <puts>
 8002944:	e079      	b.n	8002a3a <StartDefaultTask+0x342>
			  }
		  }else if(uart2_main_buf[0]==CMD_MOVEHOME){
 8002946:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <StartDefaultTask+0x2bc>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b48      	cmp	r3, #72	; 0x48
 800294c:	d105      	bne.n	800295a <StartDefaultTask+0x262>
			  printf("MOVE HOME\r\n");
 800294e:	482b      	ldr	r0, [pc, #172]	; (80029fc <StartDefaultTask+0x304>)
 8002950:	f00c fbde 	bl	800f110 <puts>
			  moveToHome();
 8002954:	f000 f9f4 	bl	8002d40 <moveToHome>
 8002958:	e06f      	b.n	8002a3a <StartDefaultTask+0x342>
		  }else if(uart2_main_buf[0]=='w'){
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <StartDefaultTask+0x2bc>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b77      	cmp	r3, #119	; 0x77
 8002960:	d118      	bne.n	8002994 <StartDefaultTask+0x29c>
			  char sdat[3];
			  sdat[0]=uart2_main_buf[1];
 8002962:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <StartDefaultTask+0x2bc>)
 8002964:	785b      	ldrb	r3, [r3, #1]
 8002966:	723b      	strb	r3, [r7, #8]
			  sdat[1]=uart2_main_buf[2];
 8002968:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <StartDefaultTask+0x2bc>)
 800296a:	789b      	ldrb	r3, [r3, #2]
 800296c:	727b      	strb	r3, [r7, #9]
			  uint16_t squa = atoi(sdat);
 800296e:	f107 0308 	add.w	r3, r7, #8
 8002972:	4618      	mov	r0, r3
 8002974:	f00c fb02 	bl	800ef7c <atoi>
 8002978:	4603      	mov	r3, r0
 800297a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			  num_squa = squa;
 800297e:	4a20      	ldr	r2, [pc, #128]	; (8002a00 <StartDefaultTask+0x308>)
 8002980:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002984:	8013      	strh	r3, [r2, #0]
			  printf("set square to %d\r\n",num_squa);
 8002986:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <StartDefaultTask+0x308>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	4619      	mov	r1, r3
 800298c:	481d      	ldr	r0, [pc, #116]	; (8002a04 <StartDefaultTask+0x30c>)
 800298e:	f00c fb39 	bl	800f004 <iprintf>
 8002992:	e052      	b.n	8002a3a <StartDefaultTask+0x342>
		  }else if(uart2_main_buf[0]=='r'){
 8002994:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <StartDefaultTask+0x2bc>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b72      	cmp	r3, #114	; 0x72
 800299a:	d135      	bne.n	8002a08 <StartDefaultTask+0x310>
			  readSquarePosition();
 800299c:	f000 fb1c 	bl	8002fd8 <readSquarePosition>
 80029a0:	e04b      	b.n	8002a3a <StartDefaultTask+0x342>
 80029a2:	bf00      	nop
 80029a4:	08010340 	.word	0x08010340
 80029a8:	20008d88 	.word	0x20008d88
 80029ac:	20000754 	.word	0x20000754
 80029b0:	20008f68 	.word	0x20008f68
 80029b4:	20008f5c 	.word	0x20008f5c
 80029b8:	08010350 	.word	0x08010350
 80029bc:	40000800 	.word	0x40000800
 80029c0:	08010364 	.word	0x08010364
 80029c4:	08010374 	.word	0x08010374
 80029c8:	200089b6 	.word	0x200089b6
 80029cc:	200089b4 	.word	0x200089b4
 80029d0:	40020800 	.word	0x40020800
 80029d4:	20008c14 	.word	0x20008c14
 80029d8:	08010384 	.word	0x08010384
 80029dc:	080103c0 	.word	0x080103c0
 80029e0:	080103cc 	.word	0x080103cc
 80029e4:	080103dc 	.word	0x080103dc
 80029e8:	080103e8 	.word	0x080103e8
 80029ec:	080103f8 	.word	0x080103f8
 80029f0:	0801040c 	.word	0x0801040c
 80029f4:	08010430 	.word	0x08010430
 80029f8:	08010450 	.word	0x08010450
 80029fc:	0801046c 	.word	0x0801046c
 8002a00:	200000a2 	.word	0x200000a2
 8002a04:	08010478 	.word	0x08010478
		  }
		  else if(uart2_main_buf[0]=='W'){
 8002a08:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <StartDefaultTask+0x354>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b57      	cmp	r3, #87	; 0x57
 8002a0e:	d114      	bne.n	8002a3a <StartDefaultTask+0x342>
			  if(num_squa>=80) return;
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <StartDefaultTask+0x358>)
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	2b4f      	cmp	r3, #79	; 0x4f
 8002a16:	d814      	bhi.n	8002a42 <StartDefaultTask+0x34a>
		  	updateSquarePosition(num_squa);
 8002a18:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <StartDefaultTask+0x358>)
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fab1 	bl	8002f84 <updateSquarePosition>
		  	num_squa++;
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <StartDefaultTask+0x358>)
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <StartDefaultTask+0x358>)
 8002a2c:	801a      	strh	r2, [r3, #0]
		  	printf("next square:%d\r\n",num_squa);
 8002a2e:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <StartDefaultTask+0x358>)
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	4619      	mov	r1, r3
 8002a34:	4807      	ldr	r0, [pc, #28]	; (8002a54 <StartDefaultTask+0x35c>)
 8002a36:	f00c fae5 	bl	800f004 <iprintf>
			}
#endif
//		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  }
#endif
	 	  osDelay(100);
 8002a3a:	2064      	movs	r0, #100	; 0x64
 8002a3c:	f009 fa3b 	bl	800beb6 <osDelay>
	  updateInfo();
 8002a40:	e66d      	b.n	800271e <StartDefaultTask+0x26>
			  if(num_squa>=80) return;
 8002a42:	bf00      	nop
  }
  /* USER CODE END StartDefaultTask */
}
 8002a44:	3748      	adds	r7, #72	; 0x48
 8002a46:	46bd      	mov	sp, r7
 8002a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a4c:	20008f5c 	.word	0x20008f5c
 8002a50:	200000a2 	.word	0x200000a2
 8002a54:	0801048c 	.word	0x0801048c

08002a58 <StartTaskMotorJ1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMotorJ1 */
__weak void StartTaskMotorJ1(void const * argument)
{
 8002a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5a:	b095      	sub	sp, #84	; 0x54
 8002a5c:	af12      	add	r7, sp, #72	; 0x48
 8002a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMotorJ1 */
		osDelay(2000);						// Wait for finish Init
 8002a60:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a64:	f009 fa27 	bl	800beb6 <osDelay>
		motor_j1_data.GPIO_PIN_Dir		= J1_DIR_Pin;
 8002a68:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <StartTaskMotorJ1+0x8c>)
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		motor_j1_data.GPIO_PORT_Dir		= J1_DIR_GPIO_Port;
 8002a70:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <StartTaskMotorJ1+0x8c>)
 8002a72:	4a1d      	ldr	r2, [pc, #116]	; (8002ae8 <StartTaskMotorJ1+0x90>)
 8002a74:	63da      	str	r2, [r3, #60]	; 0x3c
		motor_j1_data.GPIO_PORT_Enable	= J1_EN_GPIO_Port;
 8002a76:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <StartTaskMotorJ1+0x8c>)
 8002a78:	4a1b      	ldr	r2, [pc, #108]	; (8002ae8 <StartTaskMotorJ1+0x90>)
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40
		motor_j1_data.GPIO_PIN_Enable	= J1_EN_Pin;
 8002a7c:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <StartTaskMotorJ1+0x8c>)
 8002a7e:	2204      	movs	r2, #4
 8002a80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		motor_j1_data.USER_TIMER		= TIM3;
 8002a84:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <StartTaskMotorJ1+0x8c>)
 8002a86:	4a19      	ldr	r2, [pc, #100]	; (8002aec <StartTaskMotorJ1+0x94>)
 8002a88:	649a      	str	r2, [r3, #72]	; 0x48
		motor_j1_data.TIM_CHANEL		= TIM_CHANNEL_3;
 8002a8a:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <StartTaskMotorJ1+0x8c>)
 8002a8c:	2208      	movs	r2, #8
 8002a8e:	64da      	str	r2, [r3, #76]	; 0x4c
		motor_j1_data.isStop			= false;
 8002a90:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <StartTaskMotorJ1+0x8c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		AccelStepper_init(&motor_j1_data, htim3, data_AS5600_M1, J1_SPEED, J1_ACCEL_MAX);
 8002a98:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <StartTaskMotorJ1+0x98>)
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	4e15      	ldr	r6, [pc, #84]	; (8002af4 <StartTaskMotorJ1+0x9c>)
 8002a9e:	4a16      	ldr	r2, [pc, #88]	; (8002af8 <StartTaskMotorJ1+0xa0>)
 8002aa0:	9211      	str	r2, [sp, #68]	; 0x44
 8002aa2:	f242 7210 	movw	r2, #10000	; 0x2710
 8002aa6:	9210      	str	r2, [sp, #64]	; 0x40
 8002aa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8002aaa:	466d      	mov	r5, sp
 8002aac:	f106 040c 	add.w	r4, r6, #12
 8002ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002abc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002ac0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002ac4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002ac8:	4806      	ldr	r0, [pc, #24]	; (8002ae4 <StartTaskMotorJ1+0x8c>)
 8002aca:	f7fe fa65 	bl	8000f98 <AccelStepper_init>
	}
#endif
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(binarySem_motorJ1Handle, osWaitForever);
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <StartTaskMotorJ1+0xa4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f009 fa34 	bl	800bf44 <osSemaphoreWait>
	  	  run(&motor_j1_data);
 8002adc:	4801      	ldr	r0, [pc, #4]	; (8002ae4 <StartTaskMotorJ1+0x8c>)
 8002ade:	f7fe fc95 	bl	800140c <run>
	  osSemaphoreWait(binarySem_motorJ1Handle, osWaitForever);
 8002ae2:	e7f4      	b.n	8002ace <StartTaskMotorJ1+0x76>
 8002ae4:	20008c20 	.word	0x20008c20
 8002ae8:	40020400 	.word	0x40020400
 8002aec:	40000400 	.word	0x40000400
 8002af0:	200089b6 	.word	0x200089b6
 8002af4:	20009094 	.word	0x20009094
 8002af8:	0007a120 	.word	0x0007a120
 8002afc:	20008a78 	.word	0x20008a78

08002b00 <StartTaskMotorJ2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMotorJ2 */
__weak void StartTaskMotorJ2(void const * argument)
{
 8002b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b02:	b095      	sub	sp, #84	; 0x54
 8002b04:	af12      	add	r7, sp, #72	; 0x48
 8002b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMotorJ2 */

		osDelay(2000);						// Wait for finish Init
 8002b08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b0c:	f009 f9d3 	bl	800beb6 <osDelay>
		motor_j2_data.GPIO_PIN_Dir		= J2_DIR_Pin;
 8002b10:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <StartTaskMotorJ2+0x90>)
 8002b12:	2240      	movs	r2, #64	; 0x40
 8002b14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		motor_j2_data.GPIO_PORT_Dir		= J2_DIR_GPIO_Port;
 8002b18:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <StartTaskMotorJ2+0x90>)
 8002b1a:	4a1e      	ldr	r2, [pc, #120]	; (8002b94 <StartTaskMotorJ2+0x94>)
 8002b1c:	63da      	str	r2, [r3, #60]	; 0x3c
		motor_j2_data.GPIO_PORT_Enable	= J2_EN_GPIO_Port;
 8002b1e:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <StartTaskMotorJ2+0x90>)
 8002b20:	4a1c      	ldr	r2, [pc, #112]	; (8002b94 <StartTaskMotorJ2+0x94>)
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40
		motor_j2_data.GPIO_PIN_Enable	= J2_EN_Pin;
 8002b24:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <StartTaskMotorJ2+0x90>)
 8002b26:	2280      	movs	r2, #128	; 0x80
 8002b28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		motor_j2_data.USER_TIMER		= TIM2;
 8002b2c:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <StartTaskMotorJ2+0x90>)
 8002b2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b32:	649a      	str	r2, [r3, #72]	; 0x48
		motor_j2_data.TIM_CHANEL		= TIM_CHANNEL_1;
 8002b34:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <StartTaskMotorJ2+0x90>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	64da      	str	r2, [r3, #76]	; 0x4c
		motor_j2_data.isStop			= false;
 8002b3a:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <StartTaskMotorJ2+0x90>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		AccelStepper_init(&motor_j2_data, htim2, data_AS5600_M2, J2_SPEED, J2_ACCEL_MAX);
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <StartTaskMotorJ2+0x98>)
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	4e15      	ldr	r6, [pc, #84]	; (8002b9c <StartTaskMotorJ2+0x9c>)
 8002b48:	4a15      	ldr	r2, [pc, #84]	; (8002ba0 <StartTaskMotorJ2+0xa0>)
 8002b4a:	9211      	str	r2, [sp, #68]	; 0x44
 8002b4c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b50:	9210      	str	r2, [sp, #64]	; 0x40
 8002b52:	930f      	str	r3, [sp, #60]	; 0x3c
 8002b54:	466d      	mov	r5, sp
 8002b56:	f106 040c 	add.w	r4, r6, #12
 8002b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b66:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002b6a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002b6e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002b72:	4807      	ldr	r0, [pc, #28]	; (8002b90 <StartTaskMotorJ2+0x90>)
 8002b74:	f7fe fa10 	bl	8000f98 <AccelStepper_init>
	}
#endif
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(binarySem_motorJ2Handle, osWaitForever);
 8002b78:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <StartTaskMotorJ2+0xa4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b80:	4618      	mov	r0, r3
 8002b82:	f009 f9df 	bl	800bf44 <osSemaphoreWait>
	  run(&motor_j2_data);
 8002b86:	4802      	ldr	r0, [pc, #8]	; (8002b90 <StartTaskMotorJ2+0x90>)
 8002b88:	f7fe fc40 	bl	800140c <run>
	  osSemaphoreWait(binarySem_motorJ2Handle, osWaitForever);
 8002b8c:	e7f4      	b.n	8002b78 <StartTaskMotorJ2+0x78>
 8002b8e:	bf00      	nop
 8002b90:	20008bc0 	.word	0x20008bc0
 8002b94:	40020000 	.word	0x40020000
 8002b98:	200089b4 	.word	0x200089b4
 8002b9c:	200090dc 	.word	0x200090dc
 8002ba0:	00061a80 	.word	0x00061a80
 8002ba4:	20008c1c 	.word	0x20008c1c

08002ba8 <StartTaskMove>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMove */
__weak void StartTaskMove(void const * argument)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMove */
	osDelay(2500);
 8002bb0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002bb4:	f009 f97f 	bl	800beb6 <osDelay>
  /* Infinite loop */
	for (;;) {
		osSemaphoreWait(binarySem_masterCmdHandle, osWaitForever);
 8002bb8:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <StartTaskMove+0x94>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f009 f9bf 	bl	800bf44 <osSemaphoreWait>
		moveIsFinish = false;
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <StartTaskMove+0x98>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
		if (data_rev_master[0] == CMD_I2C_MOVE_PIECE) {
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <StartTaskMove+0x9c>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d117      	bne.n	8002c04 <StartTaskMove+0x5c>
#ifdef MDEBUG
			printf("I2C-MOVE-%d->%d OP:%d\r\n",data_rev_master[1],data_rev_master[2],data_rev_master[3]);
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <StartTaskMove+0x9c>)
 8002bd6:	785b      	ldrb	r3, [r3, #1]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <StartTaskMove+0x9c>)
 8002bdc:	789b      	ldrb	r3, [r3, #2]
 8002bde:	461a      	mov	r2, r3
 8002be0:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <StartTaskMove+0x9c>)
 8002be2:	78db      	ldrb	r3, [r3, #3]
 8002be4:	4818      	ldr	r0, [pc, #96]	; (8002c48 <StartTaskMove+0xa0>)
 8002be6:	f00c fa0d 	bl	800f004 <iprintf>
#endif
			movePiece(data_rev_master[1], data_rev_master[2],data_rev_master[3]);
 8002bea:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <StartTaskMove+0x9c>)
 8002bec:	785b      	ldrb	r3, [r3, #1]
 8002bee:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <StartTaskMove+0x9c>)
 8002bf0:	7891      	ldrb	r1, [r2, #2]
 8002bf2:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <StartTaskMove+0x9c>)
 8002bf4:	78d2      	ldrb	r2, [r2, #3]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f8be 	bl	8002d78 <movePiece>
			moveIsFinish = true;
 8002bfc:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <StartTaskMove+0x98>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e016      	b.n	8002c32 <StartTaskMove+0x8a>
		} else if (data_rev_master[0] == CMD_I2C_MOVE_HOME) {
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <StartTaskMove+0x9c>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d108      	bne.n	8002c1e <StartTaskMove+0x76>
#ifdef MDEBUG
			printf("I2C-MOVEHOME\r\n");
 8002c0c:	480f      	ldr	r0, [pc, #60]	; (8002c4c <StartTaskMove+0xa4>)
 8002c0e:	f00c fa7f 	bl	800f110 <puts>
#endif
			moveToHome();
 8002c12:	f000 f895 	bl	8002d40 <moveToHome>
			moveIsFinish = true;
 8002c16:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <StartTaskMove+0x98>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	e009      	b.n	8002c32 <StartTaskMove+0x8a>
		}else if(data_rev_master[0] == CMD_I2C_SETPOS_SQUARE){
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <StartTaskMove+0x9c>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d105      	bne.n	8002c32 <StartTaskMove+0x8a>
			updateSquarePosition(data_rev_master[1]);
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <StartTaskMove+0x9c>)
 8002c28:	785b      	ldrb	r3, [r3, #1]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 f9a9 	bl	8002f84 <updateSquarePosition>
		}
		osDelay(10);
 8002c32:	200a      	movs	r0, #10
 8002c34:	f009 f93f 	bl	800beb6 <osDelay>
		osSemaphoreWait(binarySem_masterCmdHandle, osWaitForever);
 8002c38:	e7be      	b.n	8002bb8 <StartTaskMove+0x10>
 8002c3a:	bf00      	nop
 8002c3c:	20008c74 	.word	0x20008c74
 8002c40:	200000a8 	.word	0x200000a8
 8002c44:	20008a70 	.word	0x20008a70
 8002c48:	080104a0 	.word	0x080104a0
 8002c4c:	080104b8 	.word	0x080104b8

08002c50 <moveToSquare>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void moveToSquare(uint8_t point,bool continues)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	460a      	mov	r2, r1
 8002c5a:	71fb      	strb	r3, [r7, #7]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	71bb      	strb	r3, [r7, #6]
	AS5600_Start_Update_High();
 8002c60:	f7fe f98c 	bl	8000f7c <AS5600_Start_Update_High>
	enableStepper(&motor_j1_data, ON);
 8002c64:	2101      	movs	r1, #1
 8002c66:	4833      	ldr	r0, [pc, #204]	; (8002d34 <moveToSquare+0xe4>)
 8002c68:	f7fe fda0 	bl	80017ac <enableStepper>
	enableStepper(&motor_j2_data, ON);
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	4832      	ldr	r0, [pc, #200]	; (8002d38 <moveToSquare+0xe8>)
 8002c70:	f7fe fd9c 	bl	80017ac <enableStepper>
	moveTo(&motor_j1_data,square[point].j1);
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	4a31      	ldr	r2, [pc, #196]	; (8002d3c <moveToSquare+0xec>)
 8002c78:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	482d      	ldr	r0, [pc, #180]	; (8002d34 <moveToSquare+0xe4>)
 8002c80:	f7fe fd7c 	bl	800177c <moveTo>
	run(&motor_j1_data);
 8002c84:	482b      	ldr	r0, [pc, #172]	; (8002d34 <moveToSquare+0xe4>)
 8002c86:	f7fe fbc1 	bl	800140c <run>
	moveTo(&motor_j2_data,square[point].j2);
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	4a2b      	ldr	r2, [pc, #172]	; (8002d3c <moveToSquare+0xec>)
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	885b      	ldrh	r3, [r3, #2]
 8002c94:	4619      	mov	r1, r3
 8002c96:	4828      	ldr	r0, [pc, #160]	; (8002d38 <moveToSquare+0xe8>)
 8002c98:	f7fe fd70 	bl	800177c <moveTo>
	run(&motor_j2_data);
 8002c9c:	4826      	ldr	r0, [pc, #152]	; (8002d38 <moveToSquare+0xe8>)
 8002c9e:	f7fe fbb5 	bl	800140c <run>
	uint16_t check_time_out=0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	81fb      	strh	r3, [r7, #14]
	while( isRunning(&motor_j1_data) || isRunning(&motor_j2_data) ){	// Waiting for move finish
 8002ca6:	e01a      	b.n	8002cde <moveToSquare+0x8e>
		if( labs(distanceToGo(&motor_j1_data)) < 2  &&  labs(distanceToGo(&motor_j2_data)) < 2 ){		// neu dung sai la nho thi thoat trong khoang 500ms
 8002ca8:	4822      	ldr	r0, [pc, #136]	; (8002d34 <moveToSquare+0xe4>)
 8002caa:	f7fe fb9f 	bl	80013ec <distanceToGo>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bfb8      	it	lt
 8002cb4:	425b      	neglt	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	dc0e      	bgt.n	8002cd8 <moveToSquare+0x88>
 8002cba:	481f      	ldr	r0, [pc, #124]	; (8002d38 <moveToSquare+0xe8>)
 8002cbc:	f7fe fb96 	bl	80013ec <distanceToGo>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	bfb8      	it	lt
 8002cc6:	425b      	neglt	r3, r3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	dc05      	bgt.n	8002cd8 <moveToSquare+0x88>
			check_time_out++;
 8002ccc:	89fb      	ldrh	r3, [r7, #14]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	81fb      	strh	r3, [r7, #14]
			if(check_time_out > 100) break;
 8002cd2:	89fb      	ldrh	r3, [r7, #14]
 8002cd4:	2b64      	cmp	r3, #100	; 0x64
 8002cd6:	d80f      	bhi.n	8002cf8 <moveToSquare+0xa8>
		}
		osDelay(10);
 8002cd8:	200a      	movs	r0, #10
 8002cda:	f009 f8ec 	bl	800beb6 <osDelay>
	while( isRunning(&motor_j1_data) || isRunning(&motor_j2_data) ){	// Waiting for move finish
 8002cde:	4815      	ldr	r0, [pc, #84]	; (8002d34 <moveToSquare+0xe4>)
 8002ce0:	f7fe fd30 	bl	8001744 <isRunning>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1de      	bne.n	8002ca8 <moveToSquare+0x58>
 8002cea:	4813      	ldr	r0, [pc, #76]	; (8002d38 <moveToSquare+0xe8>)
 8002cec:	f7fe fd2a 	bl	8001744 <isRunning>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1d8      	bne.n	8002ca8 <moveToSquare+0x58>
 8002cf6:	e000      	b.n	8002cfa <moveToSquare+0xaa>
			if(check_time_out > 100) break;
 8002cf8:	bf00      	nop
	}
	motor_j1_data.isStop = true;
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <moveToSquare+0xe4>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	motor_j2_data.isStop = true;
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <moveToSquare+0xe8>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	if(continues==false)
 8002d0a:	79bb      	ldrb	r3, [r7, #6]
 8002d0c:	f083 0301 	eor.w	r3, r3, #1
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <moveToSquare+0xda>
	{
		enableStepper(&motor_j1_data, OFF);
 8002d16:	2100      	movs	r1, #0
 8002d18:	4806      	ldr	r0, [pc, #24]	; (8002d34 <moveToSquare+0xe4>)
 8002d1a:	f7fe fd47 	bl	80017ac <enableStepper>
		enableStepper(&motor_j2_data, OFF);
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4805      	ldr	r0, [pc, #20]	; (8002d38 <moveToSquare+0xe8>)
 8002d22:	f7fe fd43 	bl	80017ac <enableStepper>
		AS5600_Start_Update_Low();
 8002d26:	f7fe f91b 	bl	8000f60 <AS5600_Start_Update_Low>
	}
}
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20008c20 	.word	0x20008c20
 8002d38:	20008bc0 	.word	0x20008bc0
 8002d3c:	20008a80 	.word	0x20008a80

08002d40 <moveToHome>:

void moveToHome()
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
	moveToSquare(79, false);
 8002d44:	2100      	movs	r1, #0
 8002d46:	204f      	movs	r0, #79	; 0x4f
 8002d48:	f7ff ff82 	bl	8002c50 <moveToSquare>
}
 8002d4c:	bf00      	nop
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <moveToKill>:
void moveToKill()
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
	moveToSquare(square_kill_number + 64, true);
 8002d54:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <moveToKill+0x24>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	3340      	adds	r3, #64	; 0x40
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff ff76 	bl	8002c50 <moveToSquare>
	square_kill_number++;
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <moveToKill+0x24>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	4b01      	ldr	r3, [pc, #4]	; (8002d74 <moveToKill+0x24>)
 8002d6e:	701a      	strb	r2, [r3, #0]
}
 8002d70:	bf00      	nop
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	200000a0 	.word	0x200000a0

08002d78 <movePiece>:
void movePiece(uint8_t qFrom,uint8_t qTo,uint8_t option)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
 8002d82:	460b      	mov	r3, r1
 8002d84:	71bb      	strb	r3, [r7, #6]
 8002d86:	4613      	mov	r3, r2
 8002d88:	717b      	strb	r3, [r7, #5]
	if(option == CMD_I2C_MOVE_KILL)										// Neu la nuoc di an quan thi gap piece ra khoi ban co
 8002d8a:	797b      	ldrb	r3, [r7, #5]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d10b      	bne.n	8002da8 <movePiece+0x30>
	{
		moveToSquare(qTo, true);		// move to piece kill
 8002d90:	79bb      	ldrb	r3, [r7, #6]
 8002d92:	2101      	movs	r1, #1
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff5b 	bl	8002c50 <moveToSquare>
		pickupPiece();					// pickup
 8002d9a:	f000 fed7 	bl	8003b4c <pickupPiece>
		moveToKill();		// move to square die
 8002d9e:	f7ff ffd7 	bl	8002d50 <moveToKill>
		dropPiece();					// drop
 8002da2:	f000 feed 	bl	8003b80 <dropPiece>
 8002da6:	e05c      	b.n	8002e62 <movePiece+0xea>
	}else if(option == CMD_I2C_MOVE_CASLLING_KING)
 8002da8:	797b      	ldrb	r3, [r7, #5]
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d11a      	bne.n	8002de4 <movePiece+0x6c>
	{
		moveToSquare(4, true);
 8002dae:	2101      	movs	r1, #1
 8002db0:	2004      	movs	r0, #4
 8002db2:	f7ff ff4d 	bl	8002c50 <moveToSquare>
		pickupPiece();
 8002db6:	f000 fec9 	bl	8003b4c <pickupPiece>
		moveToSquare(6, true);
 8002dba:	2101      	movs	r1, #1
 8002dbc:	2006      	movs	r0, #6
 8002dbe:	f7ff ff47 	bl	8002c50 <moveToSquare>
		dropPiece();
 8002dc2:	f000 fedd 	bl	8003b80 <dropPiece>
		moveToSquare(7, true);
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	2007      	movs	r0, #7
 8002dca:	f7ff ff41 	bl	8002c50 <moveToSquare>
		pickupPiece();
 8002dce:	f000 febd 	bl	8003b4c <pickupPiece>
		moveToSquare(5, true);
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	2005      	movs	r0, #5
 8002dd6:	f7ff ff3b 	bl	8002c50 <moveToSquare>
		dropPiece();
 8002dda:	f000 fed1 	bl	8003b80 <dropPiece>
		moveToHome();
 8002dde:	f7ff ffaf 	bl	8002d40 <moveToHome>
		return;
 8002de2:	e04e      	b.n	8002e82 <movePiece+0x10a>
	}else if(option == CMD_I2C_MOVE_CASLLINGG_QUEEN)
 8002de4:	797b      	ldrb	r3, [r7, #5]
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d11a      	bne.n	8002e20 <movePiece+0xa8>
	{
		moveToSquare(4, true);
 8002dea:	2101      	movs	r1, #1
 8002dec:	2004      	movs	r0, #4
 8002dee:	f7ff ff2f 	bl	8002c50 <moveToSquare>
		pickupPiece();
 8002df2:	f000 feab 	bl	8003b4c <pickupPiece>
		moveToSquare(2, true);
 8002df6:	2101      	movs	r1, #1
 8002df8:	2002      	movs	r0, #2
 8002dfa:	f7ff ff29 	bl	8002c50 <moveToSquare>
		dropPiece();
 8002dfe:	f000 febf 	bl	8003b80 <dropPiece>
		moveToSquare(0, true);
 8002e02:	2101      	movs	r1, #1
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7ff ff23 	bl	8002c50 <moveToSquare>
		pickupPiece();
 8002e0a:	f000 fe9f 	bl	8003b4c <pickupPiece>
		moveToSquare(3, true);
 8002e0e:	2101      	movs	r1, #1
 8002e10:	2003      	movs	r0, #3
 8002e12:	f7ff ff1d 	bl	8002c50 <moveToSquare>
		dropPiece();
 8002e16:	f000 feb3 	bl	8003b80 <dropPiece>
		moveToHome();
 8002e1a:	f7ff ff91 	bl	8002d40 <moveToHome>
		return;
 8002e1e:	e030      	b.n	8002e82 <movePiece+0x10a>
	}else if(option == CMD_I2C_MOVE_PASSANT){
 8002e20:	797b      	ldrb	r3, [r7, #5]
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	d11d      	bne.n	8002e62 <movePiece+0xea>
		moveToSquare(qTo-8, true);
 8002e26:	79bb      	ldrb	r3, [r7, #6]
 8002e28:	3b08      	subs	r3, #8
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff ff0e 	bl	8002c50 <moveToSquare>
		pickupPiece();
 8002e34:	f000 fe8a 	bl	8003b4c <pickupPiece>
		moveToKill();
 8002e38:	f7ff ff8a 	bl	8002d50 <moveToKill>
		dropPiece();
 8002e3c:	f000 fea0 	bl	8003b80 <dropPiece>
		moveToSquare(qFrom, true);
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	2101      	movs	r1, #1
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff03 	bl	8002c50 <moveToSquare>
		pickupPiece();
 8002e4a:	f000 fe7f 	bl	8003b4c <pickupPiece>
		moveToSquare(qTo, true);
 8002e4e:	79bb      	ldrb	r3, [r7, #6]
 8002e50:	2101      	movs	r1, #1
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fefc 	bl	8002c50 <moveToSquare>
		dropPiece();
 8002e58:	f000 fe92 	bl	8003b80 <dropPiece>
		moveToHome();
 8002e5c:	f7ff ff70 	bl	8002d40 <moveToHome>
		return;
 8002e60:	e00f      	b.n	8002e82 <movePiece+0x10a>
	}
	moveToSquare(qFrom, true);
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	2101      	movs	r1, #1
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fef2 	bl	8002c50 <moveToSquare>
	pickupPiece();
 8002e6c:	f000 fe6e 	bl	8003b4c <pickupPiece>
	moveToSquare(qTo, true);
 8002e70:	79bb      	ldrb	r3, [r7, #6]
 8002e72:	2101      	movs	r1, #1
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff feeb 	bl	8002c50 <moveToSquare>
	dropPiece();
 8002e7a:	f000 fe81 	bl	8003b80 <dropPiece>
	moveToHome();
 8002e7e:	f7ff ff5f 	bl	8002d40 <moveToHome>
}
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <updateInfo>:

void updateInfo(){
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
	  int bat_volt	= batteryGet();
 8002e8e:	f7fe fdc9 	bl	8001a24 <batteryGet>
 8002e92:	4603      	mov	r3, r0
 8002e94:	603b      	str	r3, [r7, #0]
	  uint8_t status=0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	71fb      	strb	r3, [r7, #7]
	  data_trans_master[0] = (uint8_t)(data_AS5600_M1 & 0xFF);
 8002e9a:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <updateInfo+0xe4>)
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	4b33      	ldr	r3, [pc, #204]	; (8002f70 <updateInfo+0xe8>)
 8002ea2:	701a      	strb	r2, [r3, #0]
	  data_trans_master[1] = (uint8_t)((data_AS5600_M1>>8) & 0xFF);
 8002ea4:	4b31      	ldr	r3, [pc, #196]	; (8002f6c <updateInfo+0xe4>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4b30      	ldr	r3, [pc, #192]	; (8002f70 <updateInfo+0xe8>)
 8002eb0:	705a      	strb	r2, [r3, #1]
	  data_trans_master[2] = (uint8_t)(data_AS5600_M2 & 0xFF);
 8002eb2:	4b30      	ldr	r3, [pc, #192]	; (8002f74 <updateInfo+0xec>)
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	4b2d      	ldr	r3, [pc, #180]	; (8002f70 <updateInfo+0xe8>)
 8002eba:	709a      	strb	r2, [r3, #2]
	  data_trans_master[3] = (uint8_t)((data_AS5600_M2>>8) & 0xFF);
 8002ebc:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <updateInfo+0xec>)
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	4b2a      	ldr	r3, [pc, #168]	; (8002f70 <updateInfo+0xe8>)
 8002ec8:	70da      	strb	r2, [r3, #3]
	  data_trans_master[4] = (uint8_t)(bat_volt & 0xFF);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <updateInfo+0xe8>)
 8002ed0:	711a      	strb	r2, [r3, #4]
	  data_trans_master[5] = (uint8_t)((bat_volt>>8) & 0xFF);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	121b      	asrs	r3, r3, #8
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <updateInfo+0xe8>)
 8002eda:	715a      	strb	r2, [r3, #5]
	  if(HAL_SENSOR_UP_GET) status|=(1<<0); else status &=~(1<<0);																// Hal_sensor_up
 8002edc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ee0:	4825      	ldr	r0, [pc, #148]	; (8002f78 <updateInfo+0xf0>)
 8002ee2:	f003 fc0f 	bl	8006704 <HAL_GPIO_ReadPin>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d004      	beq.n	8002ef6 <updateInfo+0x6e>
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	71fb      	strb	r3, [r7, #7]
 8002ef4:	e003      	b.n	8002efe <updateInfo+0x76>
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	71fb      	strb	r3, [r7, #7]
	  if(HAL_SENSOR_DOWN_GET) status |= (1<<1); else status &=~(1<<1);															// Hal_sensor_down
 8002efe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f02:	481d      	ldr	r0, [pc, #116]	; (8002f78 <updateInfo+0xf0>)
 8002f04:	f003 fbfe 	bl	8006704 <HAL_GPIO_ReadPin>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <updateInfo+0x90>
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	f043 0302 	orr.w	r3, r3, #2
 8002f14:	71fb      	strb	r3, [r7, #7]
 8002f16:	e003      	b.n	8002f20 <updateInfo+0x98>
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	f023 0302 	bic.w	r3, r3, #2
 8002f1e:	71fb      	strb	r3, [r7, #7]
	  if(HAL_GPIO_ReadPin(BATTERY_CHANGER_GPIO_Port, BATTERY_CHANGER_Pin)==GPIO_PIN_RESET) status |=(1<<2); else status &=~(1<<2);  	// Battery Chnager
 8002f20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f24:	4815      	ldr	r0, [pc, #84]	; (8002f7c <updateInfo+0xf4>)
 8002f26:	f003 fbed 	bl	8006704 <HAL_GPIO_ReadPin>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d104      	bne.n	8002f3a <updateInfo+0xb2>
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	f043 0304 	orr.w	r3, r3, #4
 8002f36:	71fb      	strb	r3, [r7, #7]
 8002f38:	e003      	b.n	8002f42 <updateInfo+0xba>
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	f023 0304 	bic.w	r3, r3, #4
 8002f40:	71fb      	strb	r3, [r7, #7]
	  if(moveIsFinish == true) status |=(1<<3); else status &=~(1<<3);
 8002f42:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <updateInfo+0xf8>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d004      	beq.n	8002f54 <updateInfo+0xcc>
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	f043 0308 	orr.w	r3, r3, #8
 8002f50:	71fb      	strb	r3, [r7, #7]
 8002f52:	e003      	b.n	8002f5c <updateInfo+0xd4>
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	f023 0308 	bic.w	r3, r3, #8
 8002f5a:	71fb      	strb	r3, [r7, #7]
	  data_trans_master[6] = status;
 8002f5c:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <updateInfo+0xe8>)
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	7193      	strb	r3, [r2, #6]
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	200089b6 	.word	0x200089b6
 8002f70:	20008c14 	.word	0x20008c14
 8002f74:	200089b4 	.word	0x200089b4
 8002f78:	40020800 	.word	0x40020800
 8002f7c:	40020400 	.word	0x40020400
 8002f80:	200000a8 	.word	0x200000a8

08002f84 <updateSquarePosition>:

void updateSquarePosition(uint16_t squa){
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	80fb      	strh	r3, [r7, #6]
	EE_WriteVariable(ADDR_EE_POSJ1 + squa, data_AS5600_M1);
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8002f94:	3355      	adds	r3, #85	; 0x55
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	4a0c      	ldr	r2, [pc, #48]	; (8002fcc <updateSquarePosition+0x48>)
 8002f9a:	8812      	ldrh	r2, [r2, #0]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe fffa 	bl	8001f98 <EE_WriteVariable>
	EE_WriteVariable(ADDR_EE_POSJ2 + squa, data_AS5600_M2);
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	f503 43ee 	add.w	r3, r3, #30464	; 0x7700
 8002faa:	3377      	adds	r3, #119	; 0x77
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	4a08      	ldr	r2, [pc, #32]	; (8002fd0 <updateSquarePosition+0x4c>)
 8002fb0:	8812      	ldrh	r2, [r2, #0]
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fe ffef 	bl	8001f98 <EE_WriteVariable>
	printf("Saved square %d to EEPROM\r\n",squa);
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4805      	ldr	r0, [pc, #20]	; (8002fd4 <updateSquarePosition+0x50>)
 8002fc0:	f00c f820 	bl	800f004 <iprintf>
}
 8002fc4:	bf00      	nop
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	200089b6 	.word	0x200089b6
 8002fd0:	200089b4 	.word	0x200089b4
 8002fd4:	080104c8 	.word	0x080104c8

08002fd8 <readSquarePosition>:
void readSquarePosition(){
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
#ifdef MDEBUG
	printf("reading...\r\n");
 8002fde:	482f      	ldr	r0, [pc, #188]	; (800309c <readSquarePosition+0xc4>)
 8002fe0:	f00c f896 	bl	800f110 <puts>
#endif
	uint16_t posj1,posj2;
	for(int i=0;i<80;i++){
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	e024      	b.n	8003034 <readSquarePosition+0x5c>
		EE_ReadVariable(ADDR_EE_POSJ1 + i, &posj1);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8002ff2:	3355      	adds	r3, #85	; 0x55
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	1cba      	adds	r2, r7, #2
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe ff82 	bl	8001f04 <EE_ReadVariable>
		EE_ReadVariable(ADDR_EE_POSJ2 + i, &posj2);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	b29b      	uxth	r3, r3
 8003004:	f503 43ee 	add.w	r3, r3, #30464	; 0x7700
 8003008:	3377      	adds	r3, #119	; 0x77
 800300a:	b29b      	uxth	r3, r3
 800300c:	463a      	mov	r2, r7
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f7fe ff77 	bl	8001f04 <EE_ReadVariable>
		square[i].j1 = posj1;
 8003016:	8879      	ldrh	r1, [r7, #2]
 8003018:	4a21      	ldr	r2, [pc, #132]	; (80030a0 <readSquarePosition+0xc8>)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		square[i].j2 = posj2;
 8003020:	8839      	ldrh	r1, [r7, #0]
 8003022:	4a1f      	ldr	r2, [pc, #124]	; (80030a0 <readSquarePosition+0xc8>)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	460a      	mov	r2, r1
 800302c:	805a      	strh	r2, [r3, #2]
	for(int i=0;i<80;i++){
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	3301      	adds	r3, #1
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b4f      	cmp	r3, #79	; 0x4f
 8003038:	ddd7      	ble.n	8002fea <readSquarePosition+0x12>
	}
#ifdef MDEBUG
	for(int x=0;x<10;x++){
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	e022      	b.n	8003086 <readSquarePosition+0xae>
		for(int y=0;y<8;y++){
 8003040:	2300      	movs	r3, #0
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	e016      	b.n	8003074 <readSquarePosition+0x9c>
			printf("{%d,%d},",square[x*8 +y].j1,square[x*8 +y].j2);
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	00da      	lsls	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	4a14      	ldr	r2, [pc, #80]	; (80030a0 <readSquarePosition+0xc8>)
 8003050:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8003054:	4619      	mov	r1, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	00da      	lsls	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	4a10      	ldr	r2, [pc, #64]	; (80030a0 <readSquarePosition+0xc8>)
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	885b      	ldrh	r3, [r3, #2]
 8003066:	461a      	mov	r2, r3
 8003068:	480e      	ldr	r0, [pc, #56]	; (80030a4 <readSquarePosition+0xcc>)
 800306a:	f00b ffcb 	bl	800f004 <iprintf>
		for(int y=0;y<8;y++){
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3301      	adds	r3, #1
 8003072:	607b      	str	r3, [r7, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b07      	cmp	r3, #7
 8003078:	dde5      	ble.n	8003046 <readSquarePosition+0x6e>
		}
		printf("\r\n");
 800307a:	480b      	ldr	r0, [pc, #44]	; (80030a8 <readSquarePosition+0xd0>)
 800307c:	f00c f848 	bl	800f110 <puts>
	for(int x=0;x<10;x++){
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	3301      	adds	r3, #1
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b09      	cmp	r3, #9
 800308a:	ddd9      	ble.n	8003040 <readSquarePosition+0x68>
	}
	printf("read finish\r\n");
 800308c:	4807      	ldr	r0, [pc, #28]	; (80030ac <readSquarePosition+0xd4>)
 800308e:	f00c f83f 	bl	800f110 <puts>
#endif
}
 8003092:	bf00      	nop
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	080104e4 	.word	0x080104e4
 80030a0:	20008a80 	.word	0x20008a80
 80030a4:	080104f0 	.word	0x080104f0
 80030a8:	080104fc 	.word	0x080104fc
 80030ac:	08010500 	.word	0x08010500

080030b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	; 0x28
 80030b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b6:	f107 0314 	add.w	r3, r7, #20
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	605a      	str	r2, [r3, #4]
 80030c0:	609a      	str	r2, [r3, #8]
 80030c2:	60da      	str	r2, [r3, #12]
 80030c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	4b45      	ldr	r3, [pc, #276]	; (80031e0 <MX_GPIO_Init+0x130>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	4a44      	ldr	r2, [pc, #272]	; (80031e0 <MX_GPIO_Init+0x130>)
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
 80030d6:	4b42      	ldr	r3, [pc, #264]	; (80031e0 <MX_GPIO_Init+0x130>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	4b3e      	ldr	r3, [pc, #248]	; (80031e0 <MX_GPIO_Init+0x130>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	4a3d      	ldr	r2, [pc, #244]	; (80031e0 <MX_GPIO_Init+0x130>)
 80030ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f0:	6313      	str	r3, [r2, #48]	; 0x30
 80030f2:	4b3b      	ldr	r3, [pc, #236]	; (80031e0 <MX_GPIO_Init+0x130>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	4b37      	ldr	r3, [pc, #220]	; (80031e0 <MX_GPIO_Init+0x130>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a36      	ldr	r2, [pc, #216]	; (80031e0 <MX_GPIO_Init+0x130>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	6313      	str	r3, [r2, #48]	; 0x30
 800310e:	4b34      	ldr	r3, [pc, #208]	; (80031e0 <MX_GPIO_Init+0x130>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]
 800311e:	4b30      	ldr	r3, [pc, #192]	; (80031e0 <MX_GPIO_Init+0x130>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	4a2f      	ldr	r2, [pc, #188]	; (80031e0 <MX_GPIO_Init+0x130>)
 8003124:	f043 0302 	orr.w	r3, r3, #2
 8003128:	6313      	str	r3, [r2, #48]	; 0x30
 800312a:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <MX_GPIO_Init+0x130>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	607b      	str	r3, [r7, #4]
 8003134:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, J3_A_Pin|J3_B_Pin|J2_DIR_Pin|J2_EN_Pin
 8003136:	2200      	movs	r2, #0
 8003138:	f248 01c3 	movw	r1, #32963	; 0x80c3
 800313c:	4829      	ldr	r0, [pc, #164]	; (80031e4 <MX_GPIO_Init+0x134>)
 800313e:	f003 faf9 	bl	8006734 <HAL_GPIO_WritePin>
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, J1_DIR_Pin|J1_EN_Pin|OUT_GND_Pin, GPIO_PIN_RESET);
 8003142:	2200      	movs	r2, #0
 8003144:	f248 0106 	movw	r1, #32774	; 0x8006
 8003148:	4827      	ldr	r0, [pc, #156]	; (80031e8 <MX_GPIO_Init+0x138>)
 800314a:	f003 faf3 	bl	8006734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 800314e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003154:	2300      	movs	r3, #0
 8003156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003158:	2301      	movs	r3, #1
 800315a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	4619      	mov	r1, r3
 8003162:	4822      	ldr	r0, [pc, #136]	; (80031ec <MX_GPIO_Init+0x13c>)
 8003164:	f003 f866 	bl	8006234 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = HAL_SENSOR_B_Pin|HAL_SENSOR_A_Pin;
 8003168:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800316c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800316e:	2300      	movs	r3, #0
 8003170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003176:	f107 0314 	add.w	r3, r7, #20
 800317a:	4619      	mov	r1, r3
 800317c:	481b      	ldr	r0, [pc, #108]	; (80031ec <MX_GPIO_Init+0x13c>)
 800317e:	f003 f859 	bl	8006234 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = J3_A_Pin|J3_B_Pin|J2_DIR_Pin|J2_EN_Pin
 8003182:	f248 03c3 	movw	r3, #32963	; 0x80c3
 8003186:	617b      	str	r3, [r7, #20]
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003188:	2301      	movs	r3, #1
 800318a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003190:	2300      	movs	r3, #0
 8003192:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	4619      	mov	r1, r3
 800319a:	4812      	ldr	r0, [pc, #72]	; (80031e4 <MX_GPIO_Init+0x134>)
 800319c:	f003 f84a 	bl	8006234 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = J1_DIR_Pin|J1_EN_Pin|OUT_GND_Pin;
 80031a0:	f248 0306 	movw	r3, #32774	; 0x8006
 80031a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a6:	2301      	movs	r3, #1
 80031a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ae:	2300      	movs	r3, #0
 80031b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b2:	f107 0314 	add.w	r3, r7, #20
 80031b6:	4619      	mov	r1, r3
 80031b8:	480b      	ldr	r0, [pc, #44]	; (80031e8 <MX_GPIO_Init+0x138>)
 80031ba:	f003 f83b 	bl	8006234 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BTN2_Pin|BATTERY_CHANGER_Pin;
 80031be:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80031c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031c8:	2301      	movs	r3, #1
 80031ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031cc:	f107 0314 	add.w	r3, r7, #20
 80031d0:	4619      	mov	r1, r3
 80031d2:	4805      	ldr	r0, [pc, #20]	; (80031e8 <MX_GPIO_Init+0x138>)
 80031d4:	f003 f82e 	bl	8006234 <HAL_GPIO_Init>

}
 80031d8:	bf00      	nop
 80031da:	3728      	adds	r7, #40	; 0x28
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40020000 	.word	0x40020000
 80031e8:	40020400 	.word	0x40020400
 80031ec:	40020800 	.word	0x40020800

080031f0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_tx;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <MX_I2C1_Init+0x50>)
 80031f6:	4a13      	ldr	r2, [pc, #76]	; (8003244 <MX_I2C1_Init+0x54>)
 80031f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <MX_I2C1_Init+0x50>)
 80031fc:	4a12      	ldr	r2, [pc, #72]	; (8003248 <MX_I2C1_Init+0x58>)
 80031fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <MX_I2C1_Init+0x50>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003206:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <MX_I2C1_Init+0x50>)
 8003208:	2200      	movs	r2, #0
 800320a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <MX_I2C1_Init+0x50>)
 800320e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003212:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003214:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <MX_I2C1_Init+0x50>)
 8003216:	2200      	movs	r2, #0
 8003218:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <MX_I2C1_Init+0x50>)
 800321c:	2200      	movs	r2, #0
 800321e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003220:	4b07      	ldr	r3, [pc, #28]	; (8003240 <MX_I2C1_Init+0x50>)
 8003222:	2200      	movs	r2, #0
 8003224:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <MX_I2C1_Init+0x50>)
 8003228:	2200      	movs	r2, #0
 800322a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800322c:	4804      	ldr	r0, [pc, #16]	; (8003240 <MX_I2C1_Init+0x50>)
 800322e:	f003 fab5 	bl	800679c <HAL_I2C_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003238:	f000 fbe0 	bl	80039fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20008d34 	.word	0x20008d34
 8003244:	40005400 	.word	0x40005400
 8003248:	000186a0 	.word	0x000186a0

0800324c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003250:	4b12      	ldr	r3, [pc, #72]	; (800329c <MX_I2C2_Init+0x50>)
 8003252:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <MX_I2C2_Init+0x54>)
 8003254:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003256:	4b11      	ldr	r3, [pc, #68]	; (800329c <MX_I2C2_Init+0x50>)
 8003258:	4a12      	ldr	r2, [pc, #72]	; (80032a4 <MX_I2C2_Init+0x58>)
 800325a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <MX_I2C2_Init+0x50>)
 800325e:	2200      	movs	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 32;
 8003262:	4b0e      	ldr	r3, [pc, #56]	; (800329c <MX_I2C2_Init+0x50>)
 8003264:	2220      	movs	r2, #32
 8003266:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <MX_I2C2_Init+0x50>)
 800326a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800326e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <MX_I2C2_Init+0x50>)
 8003272:	2200      	movs	r2, #0
 8003274:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003276:	4b09      	ldr	r3, [pc, #36]	; (800329c <MX_I2C2_Init+0x50>)
 8003278:	2200      	movs	r2, #0
 800327a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800327c:	4b07      	ldr	r3, [pc, #28]	; (800329c <MX_I2C2_Init+0x50>)
 800327e:	2200      	movs	r2, #0
 8003280:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <MX_I2C2_Init+0x50>)
 8003284:	2200      	movs	r2, #0
 8003286:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003288:	4804      	ldr	r0, [pc, #16]	; (800329c <MX_I2C2_Init+0x50>)
 800328a:	f003 fa87 	bl	800679c <HAL_I2C_Init>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003294:	f000 fbb2 	bl	80039fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003298:	bf00      	nop
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20008d88 	.word	0x20008d88
 80032a0:	40005800 	.word	0x40005800
 80032a4:	000186a0 	.word	0x000186a0

080032a8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <MX_I2C3_Init+0x50>)
 80032ae:	4a13      	ldr	r2, [pc, #76]	; (80032fc <MX_I2C3_Init+0x54>)
 80032b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <MX_I2C3_Init+0x50>)
 80032b4:	4a12      	ldr	r2, [pc, #72]	; (8003300 <MX_I2C3_Init+0x58>)
 80032b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <MX_I2C3_Init+0x50>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80032be:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <MX_I2C3_Init+0x50>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <MX_I2C3_Init+0x50>)
 80032c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032ca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032cc:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <MX_I2C3_Init+0x50>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <MX_I2C3_Init+0x50>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032d8:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <MX_I2C3_Init+0x50>)
 80032da:	2200      	movs	r2, #0
 80032dc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <MX_I2C3_Init+0x50>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80032e4:	4804      	ldr	r0, [pc, #16]	; (80032f8 <MX_I2C3_Init+0x50>)
 80032e6:	f003 fa59 	bl	800679c <HAL_I2C_Init>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80032f0:	f000 fb84 	bl	80039fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20008c80 	.word	0x20008c80
 80032fc:	40005c00 	.word	0x40005c00
 8003300:	000186a0 	.word	0x000186a0

08003304 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08e      	sub	sp, #56	; 0x38
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a90      	ldr	r2, [pc, #576]	; (8003564 <HAL_I2C_MspInit+0x260>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d16b      	bne.n	80033fe <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	623b      	str	r3, [r7, #32]
 800332a:	4b8f      	ldr	r3, [pc, #572]	; (8003568 <HAL_I2C_MspInit+0x264>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a8e      	ldr	r2, [pc, #568]	; (8003568 <HAL_I2C_MspInit+0x264>)
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
 8003336:	4b8c      	ldr	r3, [pc, #560]	; (8003568 <HAL_I2C_MspInit+0x264>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	623b      	str	r3, [r7, #32]
 8003340:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AS5600_1_SCL_Pin|AS5600_1_SDA_Pin;
 8003342:	23c0      	movs	r3, #192	; 0xc0
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003346:	2312      	movs	r3, #18
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800334a:	2301      	movs	r3, #1
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334e:	2303      	movs	r3, #3
 8003350:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003352:	2304      	movs	r3, #4
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800335a:	4619      	mov	r1, r3
 800335c:	4883      	ldr	r0, [pc, #524]	; (800356c <HAL_I2C_MspInit+0x268>)
 800335e:	f002 ff69 	bl	8006234 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	4b80      	ldr	r3, [pc, #512]	; (8003568 <HAL_I2C_MspInit+0x264>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a7f      	ldr	r2, [pc, #508]	; (8003568 <HAL_I2C_MspInit+0x264>)
 800336c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b7d      	ldr	r3, [pc, #500]	; (8003568 <HAL_I2C_MspInit+0x264>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800337e:	4b7c      	ldr	r3, [pc, #496]	; (8003570 <HAL_I2C_MspInit+0x26c>)
 8003380:	4a7c      	ldr	r2, [pc, #496]	; (8003574 <HAL_I2C_MspInit+0x270>)
 8003382:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003384:	4b7a      	ldr	r3, [pc, #488]	; (8003570 <HAL_I2C_MspInit+0x26c>)
 8003386:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800338a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800338c:	4b78      	ldr	r3, [pc, #480]	; (8003570 <HAL_I2C_MspInit+0x26c>)
 800338e:	2200      	movs	r2, #0
 8003390:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003392:	4b77      	ldr	r3, [pc, #476]	; (8003570 <HAL_I2C_MspInit+0x26c>)
 8003394:	2200      	movs	r2, #0
 8003396:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003398:	4b75      	ldr	r3, [pc, #468]	; (8003570 <HAL_I2C_MspInit+0x26c>)
 800339a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800339e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033a0:	4b73      	ldr	r3, [pc, #460]	; (8003570 <HAL_I2C_MspInit+0x26c>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033a6:	4b72      	ldr	r3, [pc, #456]	; (8003570 <HAL_I2C_MspInit+0x26c>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80033ac:	4b70      	ldr	r3, [pc, #448]	; (8003570 <HAL_I2C_MspInit+0x26c>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80033b2:	4b6f      	ldr	r3, [pc, #444]	; (8003570 <HAL_I2C_MspInit+0x26c>)
 80033b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033b8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033ba:	4b6d      	ldr	r3, [pc, #436]	; (8003570 <HAL_I2C_MspInit+0x26c>)
 80033bc:	2200      	movs	r2, #0
 80033be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80033c0:	486b      	ldr	r0, [pc, #428]	; (8003570 <HAL_I2C_MspInit+0x26c>)
 80033c2:	f001 ffe5 	bl	8005390 <HAL_DMA_Init>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80033cc:	f000 fb16 	bl	80039fc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a67      	ldr	r2, [pc, #412]	; (8003570 <HAL_I2C_MspInit+0x26c>)
 80033d4:	639a      	str	r2, [r3, #56]	; 0x38
 80033d6:	4a66      	ldr	r2, [pc, #408]	; (8003570 <HAL_I2C_MspInit+0x26c>)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 7, 0);
 80033dc:	2200      	movs	r2, #0
 80033de:	2107      	movs	r1, #7
 80033e0:	201f      	movs	r0, #31
 80033e2:	f001 ff9d 	bl	8005320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80033e6:	201f      	movs	r0, #31
 80033e8:	f001 ffb6 	bl	8005358 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 15, 0);
 80033ec:	2200      	movs	r2, #0
 80033ee:	210f      	movs	r1, #15
 80033f0:	2020      	movs	r0, #32
 80033f2:	f001 ff95 	bl	8005320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80033f6:	2020      	movs	r0, #32
 80033f8:	f001 ffae 	bl	8005358 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80033fc:	e156      	b.n	80036ac <HAL_I2C_MspInit+0x3a8>
  else if(i2cHandle->Instance==I2C2)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a5d      	ldr	r2, [pc, #372]	; (8003578 <HAL_I2C_MspInit+0x274>)
 8003404:	4293      	cmp	r3, r2
 8003406:	f040 80c1 	bne.w	800358c <HAL_I2C_MspInit+0x288>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	4b56      	ldr	r3, [pc, #344]	; (8003568 <HAL_I2C_MspInit+0x264>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	4a55      	ldr	r2, [pc, #340]	; (8003568 <HAL_I2C_MspInit+0x264>)
 8003414:	f043 0302 	orr.w	r3, r3, #2
 8003418:	6313      	str	r3, [r2, #48]	; 0x30
 800341a:	4b53      	ldr	r3, [pc, #332]	; (8003568 <HAL_I2C_MspInit+0x264>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800342c:	2312      	movs	r3, #18
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003430:	2301      	movs	r3, #1
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003434:	2303      	movs	r3, #3
 8003436:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003438:	2304      	movs	r3, #4
 800343a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003440:	4619      	mov	r1, r3
 8003442:	484a      	ldr	r0, [pc, #296]	; (800356c <HAL_I2C_MspInit+0x268>)
 8003444:	f002 fef6 	bl	8006234 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003448:	2308      	movs	r3, #8
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800344c:	2312      	movs	r3, #18
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003450:	2301      	movs	r3, #1
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003454:	2303      	movs	r3, #3
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003458:	2309      	movs	r3, #9
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003460:	4619      	mov	r1, r3
 8003462:	4842      	ldr	r0, [pc, #264]	; (800356c <HAL_I2C_MspInit+0x268>)
 8003464:	f002 fee6 	bl	8006234 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	4b3e      	ldr	r3, [pc, #248]	; (8003568 <HAL_I2C_MspInit+0x264>)
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	4a3d      	ldr	r2, [pc, #244]	; (8003568 <HAL_I2C_MspInit+0x264>)
 8003472:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003476:	6413      	str	r3, [r2, #64]	; 0x40
 8003478:	4b3b      	ldr	r3, [pc, #236]	; (8003568 <HAL_I2C_MspInit+0x264>)
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	697b      	ldr	r3, [r7, #20]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8003484:	4b3d      	ldr	r3, [pc, #244]	; (800357c <HAL_I2C_MspInit+0x278>)
 8003486:	4a3e      	ldr	r2, [pc, #248]	; (8003580 <HAL_I2C_MspInit+0x27c>)
 8003488:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800348a:	4b3c      	ldr	r3, [pc, #240]	; (800357c <HAL_I2C_MspInit+0x278>)
 800348c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003490:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003492:	4b3a      	ldr	r3, [pc, #232]	; (800357c <HAL_I2C_MspInit+0x278>)
 8003494:	2200      	movs	r2, #0
 8003496:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003498:	4b38      	ldr	r3, [pc, #224]	; (800357c <HAL_I2C_MspInit+0x278>)
 800349a:	2200      	movs	r2, #0
 800349c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800349e:	4b37      	ldr	r3, [pc, #220]	; (800357c <HAL_I2C_MspInit+0x278>)
 80034a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034a4:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034a6:	4b35      	ldr	r3, [pc, #212]	; (800357c <HAL_I2C_MspInit+0x278>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034ac:	4b33      	ldr	r3, [pc, #204]	; (800357c <HAL_I2C_MspInit+0x278>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80034b2:	4b32      	ldr	r3, [pc, #200]	; (800357c <HAL_I2C_MspInit+0x278>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80034b8:	4b30      	ldr	r3, [pc, #192]	; (800357c <HAL_I2C_MspInit+0x278>)
 80034ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034be:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034c0:	4b2e      	ldr	r3, [pc, #184]	; (800357c <HAL_I2C_MspInit+0x278>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80034c6:	482d      	ldr	r0, [pc, #180]	; (800357c <HAL_I2C_MspInit+0x278>)
 80034c8:	f001 ff62 	bl	8005390 <HAL_DMA_Init>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 80034d2:	f000 fa93 	bl	80039fc <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a28      	ldr	r2, [pc, #160]	; (800357c <HAL_I2C_MspInit+0x278>)
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
 80034dc:	4a27      	ldr	r2, [pc, #156]	; (800357c <HAL_I2C_MspInit+0x278>)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80034e2:	4b28      	ldr	r3, [pc, #160]	; (8003584 <HAL_I2C_MspInit+0x280>)
 80034e4:	4a28      	ldr	r2, [pc, #160]	; (8003588 <HAL_I2C_MspInit+0x284>)
 80034e6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80034e8:	4b26      	ldr	r3, [pc, #152]	; (8003584 <HAL_I2C_MspInit+0x280>)
 80034ea:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80034ee:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034f0:	4b24      	ldr	r3, [pc, #144]	; (8003584 <HAL_I2C_MspInit+0x280>)
 80034f2:	2240      	movs	r2, #64	; 0x40
 80034f4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034f6:	4b23      	ldr	r3, [pc, #140]	; (8003584 <HAL_I2C_MspInit+0x280>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034fc:	4b21      	ldr	r3, [pc, #132]	; (8003584 <HAL_I2C_MspInit+0x280>)
 80034fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003502:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003504:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <HAL_I2C_MspInit+0x280>)
 8003506:	2200      	movs	r2, #0
 8003508:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800350a:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <HAL_I2C_MspInit+0x280>)
 800350c:	2200      	movs	r2, #0
 800350e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8003510:	4b1c      	ldr	r3, [pc, #112]	; (8003584 <HAL_I2C_MspInit+0x280>)
 8003512:	2200      	movs	r2, #0
 8003514:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003516:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <HAL_I2C_MspInit+0x280>)
 8003518:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800351c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800351e:	4b19      	ldr	r3, [pc, #100]	; (8003584 <HAL_I2C_MspInit+0x280>)
 8003520:	2200      	movs	r2, #0
 8003522:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8003524:	4817      	ldr	r0, [pc, #92]	; (8003584 <HAL_I2C_MspInit+0x280>)
 8003526:	f001 ff33 	bl	8005390 <HAL_DMA_Init>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_I2C_MspInit+0x230>
      Error_Handler();
 8003530:	f000 fa64 	bl	80039fc <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a13      	ldr	r2, [pc, #76]	; (8003584 <HAL_I2C_MspInit+0x280>)
 8003538:	635a      	str	r2, [r3, #52]	; 0x34
 800353a:	4a12      	ldr	r2, [pc, #72]	; (8003584 <HAL_I2C_MspInit+0x280>)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8003540:	2200      	movs	r2, #0
 8003542:	2105      	movs	r1, #5
 8003544:	2021      	movs	r0, #33	; 0x21
 8003546:	f001 feeb 	bl	8005320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800354a:	2021      	movs	r0, #33	; 0x21
 800354c:	f001 ff04 	bl	8005358 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 15, 0);
 8003550:	2200      	movs	r2, #0
 8003552:	210f      	movs	r1, #15
 8003554:	2022      	movs	r0, #34	; 0x22
 8003556:	f001 fee3 	bl	8005320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800355a:	2022      	movs	r0, #34	; 0x22
 800355c:	f001 fefc 	bl	8005358 <HAL_NVIC_EnableIRQ>
}
 8003560:	e0a4      	b.n	80036ac <HAL_I2C_MspInit+0x3a8>
 8003562:	bf00      	nop
 8003564:	40005400 	.word	0x40005400
 8003568:	40023800 	.word	0x40023800
 800356c:	40020400 	.word	0x40020400
 8003570:	20008e9c 	.word	0x20008e9c
 8003574:	40026010 	.word	0x40026010
 8003578:	40005800 	.word	0x40005800
 800357c:	20008ddc 	.word	0x20008ddc
 8003580:	40026040 	.word	0x40026040
 8003584:	20008e3c 	.word	0x20008e3c
 8003588:	400260b8 	.word	0x400260b8
  else if(i2cHandle->Instance==I2C3)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a48      	ldr	r2, [pc, #288]	; (80036b4 <HAL_I2C_MspInit+0x3b0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	f040 808a 	bne.w	80036ac <HAL_I2C_MspInit+0x3a8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003598:	2300      	movs	r3, #0
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	4b46      	ldr	r3, [pc, #280]	; (80036b8 <HAL_I2C_MspInit+0x3b4>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	4a45      	ldr	r2, [pc, #276]	; (80036b8 <HAL_I2C_MspInit+0x3b4>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6313      	str	r3, [r2, #48]	; 0x30
 80035a8:	4b43      	ldr	r3, [pc, #268]	; (80036b8 <HAL_I2C_MspInit+0x3b4>)
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <HAL_I2C_MspInit+0x3b4>)
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	4a3e      	ldr	r2, [pc, #248]	; (80036b8 <HAL_I2C_MspInit+0x3b4>)
 80035be:	f043 0302 	orr.w	r3, r3, #2
 80035c2:	6313      	str	r3, [r2, #48]	; 0x30
 80035c4:	4b3c      	ldr	r3, [pc, #240]	; (80036b8 <HAL_I2C_MspInit+0x3b4>)
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AS5600_2_SCL_Pin;
 80035d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035d6:	2312      	movs	r3, #18
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035da:	2301      	movs	r3, #1
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035de:	2303      	movs	r3, #3
 80035e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80035e2:	2304      	movs	r3, #4
 80035e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AS5600_2_SCL_GPIO_Port, &GPIO_InitStruct);
 80035e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ea:	4619      	mov	r1, r3
 80035ec:	4833      	ldr	r0, [pc, #204]	; (80036bc <HAL_I2C_MspInit+0x3b8>)
 80035ee:	f002 fe21 	bl	8006234 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AS5600_2_SDA_Pin;
 80035f2:	2310      	movs	r3, #16
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035f6:	2312      	movs	r3, #18
 80035f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035fa:	2301      	movs	r3, #1
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fe:	2303      	movs	r3, #3
 8003600:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8003602:	2309      	movs	r3, #9
 8003604:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AS5600_2_SDA_GPIO_Port, &GPIO_InitStruct);
 8003606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800360a:	4619      	mov	r1, r3
 800360c:	482c      	ldr	r0, [pc, #176]	; (80036c0 <HAL_I2C_MspInit+0x3bc>)
 800360e:	f002 fe11 	bl	8006234 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	4b28      	ldr	r3, [pc, #160]	; (80036b8 <HAL_I2C_MspInit+0x3b4>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	4a27      	ldr	r2, [pc, #156]	; (80036b8 <HAL_I2C_MspInit+0x3b4>)
 800361c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003620:	6413      	str	r3, [r2, #64]	; 0x40
 8003622:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <HAL_I2C_MspInit+0x3b4>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 800362e:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <HAL_I2C_MspInit+0x3c0>)
 8003630:	4a25      	ldr	r2, [pc, #148]	; (80036c8 <HAL_I2C_MspInit+0x3c4>)
 8003632:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 8003634:	4b23      	ldr	r3, [pc, #140]	; (80036c4 <HAL_I2C_MspInit+0x3c0>)
 8003636:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800363a:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800363c:	4b21      	ldr	r3, [pc, #132]	; (80036c4 <HAL_I2C_MspInit+0x3c0>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_I2C_MspInit+0x3c0>)
 8003644:	2200      	movs	r2, #0
 8003646:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003648:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <HAL_I2C_MspInit+0x3c0>)
 800364a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800364e:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003650:	4b1c      	ldr	r3, [pc, #112]	; (80036c4 <HAL_I2C_MspInit+0x3c0>)
 8003652:	2200      	movs	r2, #0
 8003654:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003656:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <HAL_I2C_MspInit+0x3c0>)
 8003658:	2200      	movs	r2, #0
 800365a:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <HAL_I2C_MspInit+0x3c0>)
 800365e:	2200      	movs	r2, #0
 8003660:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003662:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <HAL_I2C_MspInit+0x3c0>)
 8003664:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003668:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800366a:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <HAL_I2C_MspInit+0x3c0>)
 800366c:	2200      	movs	r2, #0
 800366e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8003670:	4814      	ldr	r0, [pc, #80]	; (80036c4 <HAL_I2C_MspInit+0x3c0>)
 8003672:	f001 fe8d 	bl	8005390 <HAL_DMA_Init>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_I2C_MspInit+0x37c>
      Error_Handler();
 800367c:	f000 f9be 	bl	80039fc <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a10      	ldr	r2, [pc, #64]	; (80036c4 <HAL_I2C_MspInit+0x3c0>)
 8003684:	639a      	str	r2, [r3, #56]	; 0x38
 8003686:	4a0f      	ldr	r2, [pc, #60]	; (80036c4 <HAL_I2C_MspInit+0x3c0>)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 7, 0);
 800368c:	2200      	movs	r2, #0
 800368e:	2107      	movs	r1, #7
 8003690:	2048      	movs	r0, #72	; 0x48
 8003692:	f001 fe45 	bl	8005320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003696:	2048      	movs	r0, #72	; 0x48
 8003698:	f001 fe5e 	bl	8005358 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 15, 0);
 800369c:	2200      	movs	r2, #0
 800369e:	210f      	movs	r1, #15
 80036a0:	2049      	movs	r0, #73	; 0x49
 80036a2:	f001 fe3d 	bl	8005320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80036a6:	2049      	movs	r0, #73	; 0x49
 80036a8:	f001 fe56 	bl	8005358 <HAL_NVIC_EnableIRQ>
}
 80036ac:	bf00      	nop
 80036ae:	3738      	adds	r7, #56	; 0x38
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40005c00 	.word	0x40005c00
 80036b8:	40023800 	.word	0x40023800
 80036bc:	40020000 	.word	0x40020000
 80036c0:	40020400 	.word	0x40020400
 80036c4:	20008cd4 	.word	0x20008cd4
 80036c8:	40026028 	.word	0x40026028

080036cc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a32      	ldr	r2, [pc, #200]	; (80037a4 <HAL_I2C_MspDeInit+0xd8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d119      	bne.n	8003712 <HAL_I2C_MspDeInit+0x46>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80036de:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <HAL_I2C_MspDeInit+0xdc>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	4a31      	ldr	r2, [pc, #196]	; (80037a8 <HAL_I2C_MspDeInit+0xdc>)
 80036e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036e8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(AS5600_1_SCL_GPIO_Port, AS5600_1_SCL_Pin);
 80036ea:	2140      	movs	r1, #64	; 0x40
 80036ec:	482f      	ldr	r0, [pc, #188]	; (80037ac <HAL_I2C_MspDeInit+0xe0>)
 80036ee:	f002 ff25 	bl	800653c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(AS5600_1_SDA_GPIO_Port, AS5600_1_SDA_Pin);
 80036f2:	2180      	movs	r1, #128	; 0x80
 80036f4:	482d      	ldr	r0, [pc, #180]	; (80037ac <HAL_I2C_MspDeInit+0xe0>)
 80036f6:	f002 ff21 	bl	800653c <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	4618      	mov	r0, r3
 8003700:	f001 fef4 	bl	80054ec <HAL_DMA_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8003704:	201f      	movs	r0, #31
 8003706:	f001 fe35 	bl	8005374 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800370a:	2020      	movs	r0, #32
 800370c:	f001 fe32 	bl	8005374 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8003710:	e043      	b.n	800379a <HAL_I2C_MspDeInit+0xce>
  else if(i2cHandle->Instance==I2C2)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a26      	ldr	r2, [pc, #152]	; (80037b0 <HAL_I2C_MspDeInit+0xe4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d11f      	bne.n	800375c <HAL_I2C_MspDeInit+0x90>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800371c:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <HAL_I2C_MspDeInit+0xdc>)
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	4a21      	ldr	r2, [pc, #132]	; (80037a8 <HAL_I2C_MspDeInit+0xdc>)
 8003722:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003726:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8003728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800372c:	481f      	ldr	r0, [pc, #124]	; (80037ac <HAL_I2C_MspDeInit+0xe0>)
 800372e:	f002 ff05 	bl	800653c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8003732:	2108      	movs	r1, #8
 8003734:	481d      	ldr	r0, [pc, #116]	; (80037ac <HAL_I2C_MspDeInit+0xe0>)
 8003736:	f002 ff01 	bl	800653c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	4618      	mov	r0, r3
 8003740:	f001 fed4 	bl	80054ec <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003748:	4618      	mov	r0, r3
 800374a:	f001 fecf 	bl	80054ec <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800374e:	2021      	movs	r0, #33	; 0x21
 8003750:	f001 fe10 	bl	8005374 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8003754:	2022      	movs	r0, #34	; 0x22
 8003756:	f001 fe0d 	bl	8005374 <HAL_NVIC_DisableIRQ>
}
 800375a:	e01e      	b.n	800379a <HAL_I2C_MspDeInit+0xce>
  else if(i2cHandle->Instance==I2C3)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <HAL_I2C_MspDeInit+0xe8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d119      	bne.n	800379a <HAL_I2C_MspDeInit+0xce>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_I2C_MspDeInit+0xdc>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	4a0f      	ldr	r2, [pc, #60]	; (80037a8 <HAL_I2C_MspDeInit+0xdc>)
 800376c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003770:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(AS5600_2_SCL_GPIO_Port, AS5600_2_SCL_Pin);
 8003772:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003776:	4810      	ldr	r0, [pc, #64]	; (80037b8 <HAL_I2C_MspDeInit+0xec>)
 8003778:	f002 fee0 	bl	800653c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AS5600_2_SDA_GPIO_Port, AS5600_2_SDA_Pin);
 800377c:	2110      	movs	r1, #16
 800377e:	480b      	ldr	r0, [pc, #44]	; (80037ac <HAL_I2C_MspDeInit+0xe0>)
 8003780:	f002 fedc 	bl	800653c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	4618      	mov	r0, r3
 800378a:	f001 feaf 	bl	80054ec <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 800378e:	2048      	movs	r0, #72	; 0x48
 8003790:	f001 fdf0 	bl	8005374 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8003794:	2049      	movs	r0, #73	; 0x49
 8003796:	f001 fded 	bl	8005374 <HAL_NVIC_DisableIRQ>
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40005400 	.word	0x40005400
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40020400 	.word	0x40020400
 80037b0:	40005800 	.word	0x40005800
 80037b4:	40005c00 	.word	0x40005c00
 80037b8:	40020000 	.word	0x40020000

080037bc <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 1000);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	4804      	ldr	r0, [pc, #16]	; (80037e4 <_write+0x28>)
 80037d4:	f007 fbc0 	bl	800af58 <HAL_UART_Transmit>
  return len;
 80037d8:	687b      	ldr	r3, [r7, #4]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20008f78 	.word	0x20008f78

080037e8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART2){
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a0d      	ldr	r2, [pc, #52]	; (8003830 <HAL_UARTEx_RxEventCallback+0x48>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d113      	bne.n	8003826 <HAL_UARTEx_RxEventCallback+0x3e>
		memcpy(uart2_main_buf,uart2_rx_buf,UART2_BUFFER_LENGTH);
 80037fe:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <HAL_UARTEx_RxEventCallback+0x4c>)
 8003800:	4a0d      	ldr	r2, [pc, #52]	; (8003838 <HAL_UARTEx_RxEventCallback+0x50>)
 8003802:	6810      	ldr	r0, [r2, #0]
 8003804:	6851      	ldr	r1, [r2, #4]
 8003806:	6018      	str	r0, [r3, #0]
 8003808:	6059      	str	r1, [r3, #4]
 800380a:	8912      	ldrh	r2, [r2, #8]
 800380c:	811a      	strh	r2, [r3, #8]
		uart2_onData=true;
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_UARTEx_RxEventCallback+0x54>)
 8003810:	2201      	movs	r2, #1
 8003812:	701a      	strb	r2, [r3, #0]
		uart2_data_length=Size;
 8003814:	887b      	ldrh	r3, [r7, #2]
 8003816:	b2da      	uxtb	r2, r3
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_UARTEx_RxEventCallback+0x58>)
 800381a:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart2_rx_buf, UART2_BUFFER_LENGTH);
 800381c:	220a      	movs	r2, #10
 800381e:	4906      	ldr	r1, [pc, #24]	; (8003838 <HAL_UARTEx_RxEventCallback+0x50>)
 8003820:	4808      	ldr	r0, [pc, #32]	; (8003844 <HAL_UARTEx_RxEventCallback+0x5c>)
 8003822:	f007 fc2b 	bl	800b07c <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40004400 	.word	0x40004400
 8003834:	20008f5c 	.word	0x20008f5c
 8003838:	20008f6c 	.word	0x20008f6c
 800383c:	20000754 	.word	0x20000754
 8003840:	20008f68 	.word	0x20008f68
 8003844:	20008f78 	.word	0x20008f78

08003848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800384c:	f000 ffa6 	bl	800479c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003850:	f000 f83c 	bl	80038cc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_FLASH_Unlock();
 8003854:	f002 fa6a 	bl	8005d2c <HAL_FLASH_Unlock>
  if( EE_Init() != EE_OK)
 8003858:	f7fe f94e 	bl	8001af8 <EE_Init>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <main+0x1e>
  {
    Error_Handler();
 8003862:	f000 f8cb 	bl	80039fc <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003866:	f7ff fc23 	bl	80030b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800386a:	f7fe f8e7 	bl	8001a3c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800386e:	f000 fe25 	bl	80044bc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8003872:	f7fd ffbb 	bl	80017ec <MX_ADC1_Init>
  MX_TIM2_Init();
 8003876:	f000 fb91 	bl	8003f9c <MX_TIM2_Init>
  MX_TIM3_Init();
 800387a:	f000 fc05 	bl	8004088 <MX_TIM3_Init>
  MX_TIM4_Init();
 800387e:	f000 fc79 	bl	8004174 <MX_TIM4_Init>
  MX_TIM10_Init();
 8003882:	f000 fcf9 	bl	8004278 <MX_TIM10_Init>
  MX_I2C1_Init();
 8003886:	f7ff fcb3 	bl	80031f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800388a:	f7ff fcdf 	bl	800324c <MX_I2C2_Init>
  MX_I2C3_Init();
 800388e:	f7ff fd0b 	bl	80032a8 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8003892:	f000 fe3d 	bl	8004510 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart2_rx_buf, UART2_BUFFER_LENGTH);
 8003896:	220a      	movs	r2, #10
 8003898:	4909      	ldr	r1, [pc, #36]	; (80038c0 <main+0x78>)
 800389a:	480a      	ldr	r0, [pc, #40]	; (80038c4 <main+0x7c>)
 800389c:	f007 fbee 	bl	800b07c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 80038a0:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <main+0x80>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <main+0x80>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0208 	bic.w	r2, r2, #8
 80038ae:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80038b0:	f7fe fe92 	bl	80025d8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80038b4:	f008 faac 	bl	800be10 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  HAL_Delay(100);
 80038b8:	2064      	movs	r0, #100	; 0x64
 80038ba:	f000 ffb1 	bl	8004820 <HAL_Delay>
 80038be:	e7fb      	b.n	80038b8 <main+0x70>
 80038c0:	20008f6c 	.word	0x20008f6c
 80038c4:	20008f78 	.word	0x20008f78
 80038c8:	20008efc 	.word	0x20008efc

080038cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b094      	sub	sp, #80	; 0x50
 80038d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038d2:	f107 0320 	add.w	r3, r7, #32
 80038d6:	2230      	movs	r2, #48	; 0x30
 80038d8:	2100      	movs	r1, #0
 80038da:	4618      	mov	r0, r3
 80038dc:	f00b fb8a 	bl	800eff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038e0:	f107 030c 	add.w	r3, r7, #12
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	60da      	str	r2, [r3, #12]
 80038ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038f0:	2300      	movs	r3, #0
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	4b28      	ldr	r3, [pc, #160]	; (8003998 <SystemClock_Config+0xcc>)
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	4a27      	ldr	r2, [pc, #156]	; (8003998 <SystemClock_Config+0xcc>)
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003900:	4b25      	ldr	r3, [pc, #148]	; (8003998 <SystemClock_Config+0xcc>)
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800390c:	2300      	movs	r3, #0
 800390e:	607b      	str	r3, [r7, #4]
 8003910:	4b22      	ldr	r3, [pc, #136]	; (800399c <SystemClock_Config+0xd0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003918:	4a20      	ldr	r2, [pc, #128]	; (800399c <SystemClock_Config+0xd0>)
 800391a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	4b1e      	ldr	r3, [pc, #120]	; (800399c <SystemClock_Config+0xd0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800392c:	2301      	movs	r3, #1
 800392e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003936:	2302      	movs	r3, #2
 8003938:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800393a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800393e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 24;
 8003940:	2318      	movs	r3, #24
 8003942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003944:	23a8      	movs	r3, #168	; 0xa8
 8003946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003948:	2302      	movs	r3, #2
 800394a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800394c:	2304      	movs	r3, #4
 800394e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003950:	f107 0320 	add.w	r3, r7, #32
 8003954:	4618      	mov	r0, r3
 8003956:	f005 fc8f 	bl	8009278 <HAL_RCC_OscConfig>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003960:	f000 f84c 	bl	80039fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003964:	230f      	movs	r3, #15
 8003966:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003968:	2302      	movs	r3, #2
 800396a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003974:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800397a:	f107 030c 	add.w	r3, r7, #12
 800397e:	2102      	movs	r1, #2
 8003980:	4618      	mov	r0, r3
 8003982:	f005 fef1 	bl	8009768 <HAL_RCC_ClockConfig>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800398c:	f000 f836 	bl	80039fc <Error_Handler>
  }
}
 8003990:	bf00      	nop
 8003992:	3750      	adds	r7, #80	; 0x50
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40023800 	.word	0x40023800
 800399c:	40007000 	.word	0x40007000

080039a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a0f      	ldr	r2, [pc, #60]	; (80039ec <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80039b2:	f000 ff15 	bl	80047e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM10){ // UPDATE AS5600
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a0d      	ldr	r2, [pc, #52]	; (80039f0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d111      	bne.n	80039e4 <HAL_TIM_PeriodElapsedCallback+0x44>
           if(FLAG_AS5600_M1==HAL_OK){
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	f083 0301 	eor.w	r3, r3, #1
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_TIM_PeriodElapsedCallback+0x32>
          	 AS5600_M1_getPOS();
 80039ce:	f7fd fa8f 	bl	8000ef0 <AS5600_M1_getPOS>
           }
           if(FLAG_AS5600_M2 == HAL_OK){
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	f083 0301 	eor.w	r3, r3, #1
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_TIM_PeriodElapsedCallback+0x44>
          	 AS5600_M2_getPOS();
 80039e0:	f7fd fa9a 	bl	8000f18 <AS5600_M2_getPOS>
           }
    }
  /* USER CODE END Callback 1 */
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40014800 	.word	0x40014800
 80039f0:	40014400 	.word	0x40014400
 80039f4:	2000009c 	.word	0x2000009c
 80039f8:	2000009d 	.word	0x2000009d

080039fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a00:	b672      	cpsid	i
}
 8003a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a04:	e7fe      	b.n	8003a04 <Error_Handler+0x8>
	...

08003a08 <pickAndDropInit>:
extern TIM_HandleTypeDef htim4;	// For Servo
extern TIM_HandleTypeDef htim5;	// For Motor_J3


void pickAndDropInit()
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);	// Start PWM for Servo
 8003a0c:	2108      	movs	r1, #8
 8003a0e:	4809      	ldr	r0, [pc, #36]	; (8003a34 <pickAndDropInit+0x2c>)
 8003a10:	f006 f9b8 	bl	8009d84 <HAL_TIM_PWM_Start>
	osDelay(100);
 8003a14:	2064      	movs	r0, #100	; 0x64
 8003a16:	f008 fa4e 	bl	800beb6 <osDelay>
	SERVO_DROP;
 8003a1a:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <pickAndDropInit+0x30>)
 8003a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a20:	63da      	str	r2, [r3, #60]	; 0x3c
	j3Stop();
 8003a22:	f000 f827 	bl	8003a74 <j3Stop>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);	// Start PWM for Servo_J3
 8003a26:	210c      	movs	r1, #12
 8003a28:	4802      	ldr	r0, [pc, #8]	; (8003a34 <pickAndDropInit+0x2c>)
 8003a2a:	f006 f9ab 	bl	8009d84 <HAL_TIM_PWM_Start>
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20009004 	.word	0x20009004
 8003a38:	40000800 	.word	0x40000800

08003a3c <j3Up>:
/* Control Motor J3 (0 < speed <= 1000) */
void j3Up()
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(J3_A_GPIO_Port, J3_A_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(J3_B_GPIO_Port, J3_B_Pin, GPIO_PIN_RESET);
	TIM4->CCR4=2000;
 8003a40:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <j3Up+0x18>)
 8003a42:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003a48:	bf00      	nop
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40000800 	.word	0x40000800

08003a58 <j3Down>:
void j3Down(){
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(J3_A_GPIO_Port, J3_A_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(J3_B_GPIO_Port, J3_B_Pin, GPIO_PIN_SET);
	TIM4->CCR4=1580;
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <j3Down+0x18>)
 8003a5e:	f240 622c 	movw	r2, #1580	; 0x62c
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40000800 	.word	0x40000800

08003a74 <j3Stop>:
void j3Stop()
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(J3_A_GPIO_Port, J3_A_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(J3_B_GPIO_Port, J3_B_Pin, GPIO_PIN_RESET);
	TIM4->CCR4=0;
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <j3Stop+0x14>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003a7e:	bf00      	nop
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	40000800 	.word	0x40000800

08003a8c <j3MoveUp>:
void j3MoveUp()
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
	uint16_t left = 1000; 	// thoi gian dichuyen laf 1000ms
 8003a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a96:	80fb      	strh	r3, [r7, #6]
	j3Up();							// Move Up
 8003a98:	f7ff ffd0 	bl	8003a3c <j3Up>
	while(HAL_SENSOR_UP_GET==1 && left>0){
 8003a9c:	e005      	b.n	8003aaa <j3MoveUp+0x1e>
		osDelay(1);		// Wait for finish
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	f008 fa09 	bl	800beb6 <osDelay>
		left--;
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	80fb      	strh	r3, [r7, #6]
	while(HAL_SENSOR_UP_GET==1 && left>0){
 8003aaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003aae:	4809      	ldr	r0, [pc, #36]	; (8003ad4 <j3MoveUp+0x48>)
 8003ab0:	f002 fe28 	bl	8006704 <HAL_GPIO_ReadPin>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d102      	bne.n	8003ac0 <j3MoveUp+0x34>
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ee      	bne.n	8003a9e <j3MoveUp+0x12>
	}
	j3Stop();									// Stop
 8003ac0:	f7ff ffd8 	bl	8003a74 <j3Stop>
	osDelay(300);
 8003ac4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003ac8:	f008 f9f5 	bl	800beb6 <osDelay>
}
 8003acc:	bf00      	nop
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40020800 	.word	0x40020800

08003ad8 <j3MoveDown>:
void j3MoveDown()
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
	uint16_t lefttim = 1000; 	// thoi gian dichuyen laf 1000ms
 8003ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ae2:	80fb      	strh	r3, [r7, #6]
	j3Down();							// Move Down
 8003ae4:	f7ff ffb8 	bl	8003a58 <j3Down>
	while(HAL_SENSOR_DOWN_GET==1 && lefttim>0){
 8003ae8:	e005      	b.n	8003af6 <j3MoveDown+0x1e>
		osDelay(1);		// Wait for finish
 8003aea:	2001      	movs	r0, #1
 8003aec:	f008 f9e3 	bl	800beb6 <osDelay>
		lefttim--;
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	80fb      	strh	r3, [r7, #6]
	while(HAL_SENSOR_DOWN_GET==1 && lefttim>0){
 8003af6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003afa:	4813      	ldr	r0, [pc, #76]	; (8003b48 <j3MoveDown+0x70>)
 8003afc:	f002 fe02 	bl	8006704 <HAL_GPIO_ReadPin>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d102      	bne.n	8003b0c <j3MoveDown+0x34>
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ee      	bne.n	8003aea <j3MoveDown+0x12>
	}
	j3Stop();									// Stop
 8003b0c:	f7ff ffb2 	bl	8003a74 <j3Stop>
	lefttim = 1000;
 8003b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b14:	80fb      	strh	r3, [r7, #6]
	while(HAL_SENSOR_DOWN_GET==1 && lefttim>0){
 8003b16:	e005      	b.n	8003b24 <j3MoveDown+0x4c>
			osDelay(1);		// Wait for finish
 8003b18:	2001      	movs	r0, #1
 8003b1a:	f008 f9cc 	bl	800beb6 <osDelay>
			lefttim--;
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	80fb      	strh	r3, [r7, #6]
	while(HAL_SENSOR_DOWN_GET==1 && lefttim>0){
 8003b24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b28:	4807      	ldr	r0, [pc, #28]	; (8003b48 <j3MoveDown+0x70>)
 8003b2a:	f002 fdeb 	bl	8006704 <HAL_GPIO_ReadPin>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d102      	bne.n	8003b3a <j3MoveDown+0x62>
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1ee      	bne.n	8003b18 <j3MoveDown+0x40>
	}
	osDelay(200);
 8003b3a:	20c8      	movs	r0, #200	; 0xc8
 8003b3c:	f008 f9bb 	bl	800beb6 <osDelay>
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40020800 	.word	0x40020800

08003b4c <pickupPiece>:
void pickupPiece()
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
	SERVO_DROP;
 8003b50:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <pickupPiece+0x30>)
 8003b52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b56:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(200);
 8003b58:	20c8      	movs	r0, #200	; 0xc8
 8003b5a:	f008 f9ac 	bl	800beb6 <osDelay>
	j3MoveDown();
 8003b5e:	f7ff ffbb 	bl	8003ad8 <j3MoveDown>
	SERVO_PICKUP;
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <pickupPiece+0x30>)
 8003b64:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003b68:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(500);
 8003b6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b6e:	f008 f9a2 	bl	800beb6 <osDelay>
	j3MoveUp();
 8003b72:	f7ff ff8b 	bl	8003a8c <j3MoveUp>
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40000800 	.word	0x40000800

08003b80 <dropPiece>:
void dropPiece()
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
	j3MoveDown();
 8003b84:	f7ff ffa8 	bl	8003ad8 <j3MoveDown>
	SERVO_DROP;
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <dropPiece+0x20>)
 8003b8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b8e:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(500);
 8003b90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b94:	f008 f98f 	bl	800beb6 <osDelay>
	j3MoveUp();
 8003b98:	f7ff ff78 	bl	8003a8c <j3MoveUp>
}
 8003b9c:	bf00      	nop
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40000800 	.word	0x40000800

08003ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_MspInit+0x54>)
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <HAL_MspInit+0x54>)
 8003bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003bba:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <HAL_MspInit+0x54>)
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bc2:	607b      	str	r3, [r7, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	603b      	str	r3, [r7, #0]
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_MspInit+0x54>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <HAL_MspInit+0x54>)
 8003bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd6:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <HAL_MspInit+0x54>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003be2:	2200      	movs	r2, #0
 8003be4:	210f      	movs	r1, #15
 8003be6:	f06f 0001 	mvn.w	r0, #1
 8003bea:	f001 fb99 	bl	8005320 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800

08003bfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08c      	sub	sp, #48	; 0x30
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	201a      	movs	r0, #26
 8003c12:	f001 fb85 	bl	8005320 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003c16:	201a      	movs	r0, #26
 8003c18:	f001 fb9e 	bl	8005358 <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	4b1e      	ldr	r3, [pc, #120]	; (8003c9c <HAL_InitTick+0xa0>)
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	4a1d      	ldr	r2, [pc, #116]	; (8003c9c <HAL_InitTick+0xa0>)
 8003c26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c2a:	6453      	str	r3, [r2, #68]	; 0x44
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <HAL_InitTick+0xa0>)
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c38:	f107 0210 	add.w	r2, r7, #16
 8003c3c:	f107 0314 	add.w	r3, r7, #20
 8003c40:	4611      	mov	r1, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f005 ff60 	bl	8009b08 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003c48:	f005 ff4a 	bl	8009ae0 <HAL_RCC_GetPCLK2Freq>
 8003c4c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c50:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <HAL_InitTick+0xa4>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	0c9b      	lsrs	r3, r3, #18
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <HAL_InitTick+0xa8>)
 8003c5e:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <HAL_InitTick+0xac>)
 8003c60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <HAL_InitTick+0xa8>)
 8003c64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c68:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8003c6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ca4 <HAL_InitTick+0xa8>)
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <HAL_InitTick+0xa8>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_InitTick+0xa8>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8003c7c:	4809      	ldr	r0, [pc, #36]	; (8003ca4 <HAL_InitTick+0xa8>)
 8003c7e:	f005 ff75 	bl	8009b6c <HAL_TIM_Base_Init>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d104      	bne.n	8003c92 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8003c88:	4806      	ldr	r0, [pc, #24]	; (8003ca4 <HAL_InitTick+0xa8>)
 8003c8a:	f005 ffbf 	bl	8009c0c <HAL_TIM_Base_Start_IT>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	e000      	b.n	8003c94 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3730      	adds	r7, #48	; 0x30
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	431bde83 	.word	0x431bde83
 8003ca4:	20008fbc 	.word	0x20008fbc
 8003ca8:	40014800 	.word	0x40014800

08003cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cb0:	e7fe      	b.n	8003cb0 <NMI_Handler+0x4>

08003cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cb6:	e7fe      	b.n	8003cb6 <HardFault_Handler+0x4>

08003cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cbc:	e7fe      	b.n	8003cbc <MemManage_Handler+0x4>

08003cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cc2:	e7fe      	b.n	8003cc2 <BusFault_Handler+0x4>

08003cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cc8:	e7fe      	b.n	8003cc8 <UsageFault_Handler+0x4>

08003cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cce:	bf00      	nop
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003cdc:	4802      	ldr	r0, [pc, #8]	; (8003ce8 <DMA1_Stream0_IRQHandler+0x10>)
 8003cde:	f001 fd4d 	bl	800577c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20008e9c 	.word	0x20008e9c

08003cec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8003cf0:	4802      	ldr	r0, [pc, #8]	; (8003cfc <DMA1_Stream1_IRQHandler+0x10>)
 8003cf2:	f001 fd43 	bl	800577c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003cf6:	bf00      	nop
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20008cd4 	.word	0x20008cd4

08003d00 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8003d04:	4802      	ldr	r0, [pc, #8]	; (8003d10 <DMA1_Stream2_IRQHandler+0x10>)
 8003d06:	f001 fd39 	bl	800577c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20008ddc 	.word	0x20008ddc

08003d14 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003d18:	4802      	ldr	r0, [pc, #8]	; (8003d24 <DMA1_Stream5_IRQHandler+0x10>)
 8003d1a:	f001 fd2f 	bl	800577c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20008efc 	.word	0x20008efc

08003d28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003d2c:	4802      	ldr	r0, [pc, #8]	; (8003d38 <ADC_IRQHandler+0x10>)
 8003d2e:	f000 fe9d 	bl	8004a6c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003d32:	bf00      	nop
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	200089b8 	.word	0x200089b8

08003d3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003d40:	4802      	ldr	r0, [pc, #8]	; (8003d4c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003d42:	f006 f9c5 	bl	800a0d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	2000904c 	.word	0x2000904c

08003d50 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003d54:	4802      	ldr	r0, [pc, #8]	; (8003d60 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003d56:	f006 f9bb 	bl	800a0d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20008fbc 	.word	0x20008fbc

08003d64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d68:	4802      	ldr	r0, [pc, #8]	; (8003d74 <TIM2_IRQHandler+0x10>)
 8003d6a:	f006 f9b1 	bl	800a0d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	200090dc 	.word	0x200090dc

08003d78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003d7c:	4802      	ldr	r0, [pc, #8]	; (8003d88 <TIM3_IRQHandler+0x10>)
 8003d7e:	f006 f9a7 	bl	800a0d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20009094 	.word	0x20009094

08003d8c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003d90:	4802      	ldr	r0, [pc, #8]	; (8003d9c <I2C1_EV_IRQHandler+0x10>)
 8003d92:	f003 faa7 	bl	80072e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20008d34 	.word	0x20008d34

08003da0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003da4:	4802      	ldr	r0, [pc, #8]	; (8003db0 <I2C1_ER_IRQHandler+0x10>)
 8003da6:	f003 fc0a 	bl	80075be <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20008d34 	.word	0x20008d34

08003db4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003db8:	4802      	ldr	r0, [pc, #8]	; (8003dc4 <I2C2_EV_IRQHandler+0x10>)
 8003dba:	f003 fa93 	bl	80072e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20008d88 	.word	0x20008d88

08003dc8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003dcc:	4802      	ldr	r0, [pc, #8]	; (8003dd8 <I2C2_ER_IRQHandler+0x10>)
 8003dce:	f003 fbf6 	bl	80075be <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20008d88 	.word	0x20008d88

08003ddc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003de0:	4802      	ldr	r0, [pc, #8]	; (8003dec <USART1_IRQHandler+0x10>)
 8003de2:	f007 f99b 	bl	800b11c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20009184 	.word	0x20009184

08003df0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003df4:	4802      	ldr	r0, [pc, #8]	; (8003e00 <USART2_IRQHandler+0x10>)
 8003df6:	f007 f991 	bl	800b11c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20008f78 	.word	0x20008f78

08003e04 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8003e08:	4802      	ldr	r0, [pc, #8]	; (8003e14 <DMA1_Stream7_IRQHandler+0x10>)
 8003e0a:	f001 fcb7 	bl	800577c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20008e3c 	.word	0x20008e3c

08003e18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e1c:	4802      	ldr	r0, [pc, #8]	; (8003e28 <DMA2_Stream0_IRQHandler+0x10>)
 8003e1e:	f001 fcad 	bl	800577c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20008a00 	.word	0x20008a00

08003e2c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003e30:	4802      	ldr	r0, [pc, #8]	; (8003e3c <DMA2_Stream2_IRQHandler+0x10>)
 8003e32:	f001 fca3 	bl	800577c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20009124 	.word	0x20009124

08003e40 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003e44:	4802      	ldr	r0, [pc, #8]	; (8003e50 <I2C3_EV_IRQHandler+0x10>)
 8003e46:	f003 fa4d 	bl	80072e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20008c80 	.word	0x20008c80

08003e54 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8003e58:	4802      	ldr	r0, [pc, #8]	; (8003e64 <I2C3_ER_IRQHandler+0x10>)
 8003e5a:	f003 fbb0 	bl	80075be <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20008c80 	.word	0x20008c80

08003e68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	e00a      	b.n	8003e90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e7a:	f3af 8000 	nop.w
 8003e7e:	4601      	mov	r1, r0
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	60ba      	str	r2, [r7, #8]
 8003e86:	b2ca      	uxtb	r2, r1
 8003e88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	dbf0      	blt.n	8003e7a <_read+0x12>
	}

return len;
 8003e98:	687b      	ldr	r3, [r7, #4]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
	return -1;
 8003eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003eca:	605a      	str	r2, [r3, #4]
	return 0;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <_isatty>:

int _isatty(int file)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
	return 1;
 8003ee2:	2301      	movs	r3, #1
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
	return 0;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f14:	4a14      	ldr	r2, [pc, #80]	; (8003f68 <_sbrk+0x5c>)
 8003f16:	4b15      	ldr	r3, [pc, #84]	; (8003f6c <_sbrk+0x60>)
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f20:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <_sbrk+0x64>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <_sbrk+0x64>)
 8003f2a:	4a12      	ldr	r2, [pc, #72]	; (8003f74 <_sbrk+0x68>)
 8003f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f2e:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <_sbrk+0x64>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4413      	add	r3, r2
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d207      	bcs.n	8003f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f3c:	f00b f822 	bl	800ef84 <__errno>
 8003f40:	4603      	mov	r3, r0
 8003f42:	220c      	movs	r2, #12
 8003f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f4a:	e009      	b.n	8003f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f4c:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <_sbrk+0x64>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f52:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <_sbrk+0x64>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4413      	add	r3, r2
 8003f5a:	4a05      	ldr	r2, [pc, #20]	; (8003f70 <_sbrk+0x64>)
 8003f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20010000 	.word	0x20010000
 8003f6c:	00000400 	.word	0x00000400
 8003f70:	20000758 	.word	0x20000758
 8003f74:	20009240 	.word	0x20009240

08003f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <SystemInit+0x20>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	4a05      	ldr	r2, [pc, #20]	; (8003f98 <SystemInit+0x20>)
 8003f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	e000ed00 	.word	0xe000ed00

08003f9c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08e      	sub	sp, #56	; 0x38
 8003fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	605a      	str	r2, [r3, #4]
 8003fac:	609a      	str	r2, [r3, #8]
 8003fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fb0:	f107 0320 	add.w	r3, r7, #32
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fba:	1d3b      	adds	r3, r7, #4
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	60da      	str	r2, [r3, #12]
 8003fc6:	611a      	str	r2, [r3, #16]
 8003fc8:	615a      	str	r2, [r3, #20]
 8003fca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003fcc:	4b2d      	ldr	r3, [pc, #180]	; (8004084 <MX_TIM2_Init+0xe8>)
 8003fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8003fd4:	4b2b      	ldr	r3, [pc, #172]	; (8004084 <MX_TIM2_Init+0xe8>)
 8003fd6:	2253      	movs	r2, #83	; 0x53
 8003fd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fda:	4b2a      	ldr	r3, [pc, #168]	; (8004084 <MX_TIM2_Init+0xe8>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8003fe0:	4b28      	ldr	r3, [pc, #160]	; (8004084 <MX_TIM2_Init+0xe8>)
 8003fe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fe6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fe8:	4b26      	ldr	r3, [pc, #152]	; (8004084 <MX_TIM2_Init+0xe8>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003fee:	4b25      	ldr	r3, [pc, #148]	; (8004084 <MX_TIM2_Init+0xe8>)
 8003ff0:	2280      	movs	r2, #128	; 0x80
 8003ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ff4:	4823      	ldr	r0, [pc, #140]	; (8004084 <MX_TIM2_Init+0xe8>)
 8003ff6:	f005 fdb9 	bl	8009b6c <HAL_TIM_Base_Init>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004000:	f7ff fcfc 	bl	80039fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004008:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800400a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800400e:	4619      	mov	r1, r3
 8004010:	481c      	ldr	r0, [pc, #112]	; (8004084 <MX_TIM2_Init+0xe8>)
 8004012:	f006 fa23 	bl	800a45c <HAL_TIM_ConfigClockSource>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800401c:	f7ff fcee 	bl	80039fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004020:	4818      	ldr	r0, [pc, #96]	; (8004084 <MX_TIM2_Init+0xe8>)
 8004022:	f005 fe55 	bl	8009cd0 <HAL_TIM_PWM_Init>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800402c:	f7ff fce6 	bl	80039fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004030:	2300      	movs	r3, #0
 8004032:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004034:	2300      	movs	r3, #0
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004038:	f107 0320 	add.w	r3, r7, #32
 800403c:	4619      	mov	r1, r3
 800403e:	4811      	ldr	r0, [pc, #68]	; (8004084 <MX_TIM2_Init+0xe8>)
 8004040:	f006 fe96 	bl	800ad70 <HAL_TIMEx_MasterConfigSynchronization>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800404a:	f7ff fcd7 	bl	80039fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800404e:	2360      	movs	r3, #96	; 0x60
 8004050:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 8004052:	2302      	movs	r3, #2
 8004054:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	2200      	movs	r2, #0
 8004062:	4619      	mov	r1, r3
 8004064:	4807      	ldr	r0, [pc, #28]	; (8004084 <MX_TIM2_Init+0xe8>)
 8004066:	f006 f93b 	bl	800a2e0 <HAL_TIM_PWM_ConfigChannel>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004070:	f7ff fcc4 	bl	80039fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004074:	4803      	ldr	r0, [pc, #12]	; (8004084 <MX_TIM2_Init+0xe8>)
 8004076:	f000 f99b 	bl	80043b0 <HAL_TIM_MspPostInit>

}
 800407a:	bf00      	nop
 800407c:	3738      	adds	r7, #56	; 0x38
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	200090dc 	.word	0x200090dc

08004088 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08e      	sub	sp, #56	; 0x38
 800408c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800408e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	605a      	str	r2, [r3, #4]
 8004098:	609a      	str	r2, [r3, #8]
 800409a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800409c:	f107 0320 	add.w	r3, r7, #32
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040a6:	1d3b      	adds	r3, r7, #4
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	60da      	str	r2, [r3, #12]
 80040b2:	611a      	str	r2, [r3, #16]
 80040b4:	615a      	str	r2, [r3, #20]
 80040b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80040b8:	4b2c      	ldr	r3, [pc, #176]	; (800416c <MX_TIM3_Init+0xe4>)
 80040ba:	4a2d      	ldr	r2, [pc, #180]	; (8004170 <MX_TIM3_Init+0xe8>)
 80040bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80040be:	4b2b      	ldr	r3, [pc, #172]	; (800416c <MX_TIM3_Init+0xe4>)
 80040c0:	2253      	movs	r2, #83	; 0x53
 80040c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040c4:	4b29      	ldr	r3, [pc, #164]	; (800416c <MX_TIM3_Init+0xe4>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80040ca:	4b28      	ldr	r3, [pc, #160]	; (800416c <MX_TIM3_Init+0xe4>)
 80040cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040d2:	4b26      	ldr	r3, [pc, #152]	; (800416c <MX_TIM3_Init+0xe4>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040d8:	4b24      	ldr	r3, [pc, #144]	; (800416c <MX_TIM3_Init+0xe4>)
 80040da:	2280      	movs	r2, #128	; 0x80
 80040dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040de:	4823      	ldr	r0, [pc, #140]	; (800416c <MX_TIM3_Init+0xe4>)
 80040e0:	f005 fd44 	bl	8009b6c <HAL_TIM_Base_Init>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80040ea:	f7ff fc87 	bl	80039fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040f8:	4619      	mov	r1, r3
 80040fa:	481c      	ldr	r0, [pc, #112]	; (800416c <MX_TIM3_Init+0xe4>)
 80040fc:	f006 f9ae 	bl	800a45c <HAL_TIM_ConfigClockSource>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004106:	f7ff fc79 	bl	80039fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800410a:	4818      	ldr	r0, [pc, #96]	; (800416c <MX_TIM3_Init+0xe4>)
 800410c:	f005 fde0 	bl	8009cd0 <HAL_TIM_PWM_Init>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004116:	f7ff fc71 	bl	80039fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800411a:	2300      	movs	r3, #0
 800411c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800411e:	2300      	movs	r3, #0
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004122:	f107 0320 	add.w	r3, r7, #32
 8004126:	4619      	mov	r1, r3
 8004128:	4810      	ldr	r0, [pc, #64]	; (800416c <MX_TIM3_Init+0xe4>)
 800412a:	f006 fe21 	bl	800ad70 <HAL_TIMEx_MasterConfigSynchronization>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004134:	f7ff fc62 	bl	80039fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004138:	2360      	movs	r3, #96	; 0x60
 800413a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 800413c:	2302      	movs	r3, #2
 800413e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004148:	1d3b      	adds	r3, r7, #4
 800414a:	2208      	movs	r2, #8
 800414c:	4619      	mov	r1, r3
 800414e:	4807      	ldr	r0, [pc, #28]	; (800416c <MX_TIM3_Init+0xe4>)
 8004150:	f006 f8c6 	bl	800a2e0 <HAL_TIM_PWM_ConfigChannel>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800415a:	f7ff fc4f 	bl	80039fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800415e:	4803      	ldr	r0, [pc, #12]	; (800416c <MX_TIM3_Init+0xe4>)
 8004160:	f000 f926 	bl	80043b0 <HAL_TIM_MspPostInit>

}
 8004164:	bf00      	nop
 8004166:	3738      	adds	r7, #56	; 0x38
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20009094 	.word	0x20009094
 8004170:	40000400 	.word	0x40000400

08004174 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08e      	sub	sp, #56	; 0x38
 8004178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800417a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	605a      	str	r2, [r3, #4]
 8004184:	609a      	str	r2, [r3, #8]
 8004186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004188:	f107 0320 	add.w	r3, r7, #32
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004192:	1d3b      	adds	r3, r7, #4
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	609a      	str	r2, [r3, #8]
 800419c:	60da      	str	r2, [r3, #12]
 800419e:	611a      	str	r2, [r3, #16]
 80041a0:	615a      	str	r2, [r3, #20]
 80041a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80041a4:	4b32      	ldr	r3, [pc, #200]	; (8004270 <MX_TIM4_Init+0xfc>)
 80041a6:	4a33      	ldr	r2, [pc, #204]	; (8004274 <MX_TIM4_Init+0x100>)
 80041a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80041aa:	4b31      	ldr	r3, [pc, #196]	; (8004270 <MX_TIM4_Init+0xfc>)
 80041ac:	2253      	movs	r2, #83	; 0x53
 80041ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041b0:	4b2f      	ldr	r3, [pc, #188]	; (8004270 <MX_TIM4_Init+0xfc>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 80041b6:	4b2e      	ldr	r3, [pc, #184]	; (8004270 <MX_TIM4_Init+0xfc>)
 80041b8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80041bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041be:	4b2c      	ldr	r3, [pc, #176]	; (8004270 <MX_TIM4_Init+0xfc>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041c4:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <MX_TIM4_Init+0xfc>)
 80041c6:	2280      	movs	r2, #128	; 0x80
 80041c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80041ca:	4829      	ldr	r0, [pc, #164]	; (8004270 <MX_TIM4_Init+0xfc>)
 80041cc:	f005 fcce 	bl	8009b6c <HAL_TIM_Base_Init>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80041d6:	f7ff fc11 	bl	80039fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80041e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041e4:	4619      	mov	r1, r3
 80041e6:	4822      	ldr	r0, [pc, #136]	; (8004270 <MX_TIM4_Init+0xfc>)
 80041e8:	f006 f938 	bl	800a45c <HAL_TIM_ConfigClockSource>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80041f2:	f7ff fc03 	bl	80039fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80041f6:	481e      	ldr	r0, [pc, #120]	; (8004270 <MX_TIM4_Init+0xfc>)
 80041f8:	f005 fd6a 	bl	8009cd0 <HAL_TIM_PWM_Init>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8004202:	f7ff fbfb 	bl	80039fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004206:	2300      	movs	r3, #0
 8004208:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800420a:	2300      	movs	r3, #0
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800420e:	f107 0320 	add.w	r3, r7, #32
 8004212:	4619      	mov	r1, r3
 8004214:	4816      	ldr	r0, [pc, #88]	; (8004270 <MX_TIM4_Init+0xfc>)
 8004216:	f006 fdab 	bl	800ad70 <HAL_TIMEx_MasterConfigSynchronization>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8004220:	f7ff fbec 	bl	80039fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004224:	2360      	movs	r3, #96	; 0x60
 8004226:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8004228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800422c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004236:	1d3b      	adds	r3, r7, #4
 8004238:	2208      	movs	r2, #8
 800423a:	4619      	mov	r1, r3
 800423c:	480c      	ldr	r0, [pc, #48]	; (8004270 <MX_TIM4_Init+0xfc>)
 800423e:	f006 f84f 	bl	800a2e0 <HAL_TIM_PWM_ConfigChannel>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004248:	f7ff fbd8 	bl	80039fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800424c:	1d3b      	adds	r3, r7, #4
 800424e:	220c      	movs	r2, #12
 8004250:	4619      	mov	r1, r3
 8004252:	4807      	ldr	r0, [pc, #28]	; (8004270 <MX_TIM4_Init+0xfc>)
 8004254:	f006 f844 	bl	800a2e0 <HAL_TIM_PWM_ConfigChannel>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800425e:	f7ff fbcd 	bl	80039fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004262:	4803      	ldr	r0, [pc, #12]	; (8004270 <MX_TIM4_Init+0xfc>)
 8004264:	f000 f8a4 	bl	80043b0 <HAL_TIM_MspPostInit>

}
 8004268:	bf00      	nop
 800426a:	3738      	adds	r7, #56	; 0x38
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20009004 	.word	0x20009004
 8004274:	40000800 	.word	0x40000800

08004278 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800427c:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <MX_TIM10_Init+0x40>)
 800427e:	4a0f      	ldr	r2, [pc, #60]	; (80042bc <MX_TIM10_Init+0x44>)
 8004280:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 8004282:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <MX_TIM10_Init+0x40>)
 8004284:	2253      	movs	r2, #83	; 0x53
 8004286:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <MX_TIM10_Init+0x40>)
 800428a:	2200      	movs	r2, #0
 800428c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 800428e:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <MX_TIM10_Init+0x40>)
 8004290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004294:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004296:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <MX_TIM10_Init+0x40>)
 8004298:	2200      	movs	r2, #0
 800429a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <MX_TIM10_Init+0x40>)
 800429e:	2280      	movs	r2, #128	; 0x80
 80042a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80042a2:	4805      	ldr	r0, [pc, #20]	; (80042b8 <MX_TIM10_Init+0x40>)
 80042a4:	f005 fc62 	bl	8009b6c <HAL_TIM_Base_Init>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80042ae:	f7ff fba5 	bl	80039fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80042b2:	bf00      	nop
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	2000904c 	.word	0x2000904c
 80042bc:	40014400 	.word	0x40014400

080042c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d0:	d116      	bne.n	8004300 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	4b32      	ldr	r3, [pc, #200]	; (80043a0 <HAL_TIM_Base_MspInit+0xe0>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	4a31      	ldr	r2, [pc, #196]	; (80043a0 <HAL_TIM_Base_MspInit+0xe0>)
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	6413      	str	r3, [r2, #64]	; 0x40
 80042e2:	4b2f      	ldr	r3, [pc, #188]	; (80043a0 <HAL_TIM_Base_MspInit+0xe0>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80042ee:	2200      	movs	r2, #0
 80042f0:	2106      	movs	r1, #6
 80042f2:	201c      	movs	r0, #28
 80042f4:	f001 f814 	bl	8005320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80042f8:	201c      	movs	r0, #28
 80042fa:	f001 f82d 	bl	8005358 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80042fe:	e04a      	b.n	8004396 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a27      	ldr	r2, [pc, #156]	; (80043a4 <HAL_TIM_Base_MspInit+0xe4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d116      	bne.n	8004338 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	4b24      	ldr	r3, [pc, #144]	; (80043a0 <HAL_TIM_Base_MspInit+0xe0>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	4a23      	ldr	r2, [pc, #140]	; (80043a0 <HAL_TIM_Base_MspInit+0xe0>)
 8004314:	f043 0302 	orr.w	r3, r3, #2
 8004318:	6413      	str	r3, [r2, #64]	; 0x40
 800431a:	4b21      	ldr	r3, [pc, #132]	; (80043a0 <HAL_TIM_Base_MspInit+0xe0>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8004326:	2200      	movs	r2, #0
 8004328:	2106      	movs	r1, #6
 800432a:	201d      	movs	r0, #29
 800432c:	f000 fff8 	bl	8005320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004330:	201d      	movs	r0, #29
 8004332:	f001 f811 	bl	8005358 <HAL_NVIC_EnableIRQ>
}
 8004336:	e02e      	b.n	8004396 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1a      	ldr	r2, [pc, #104]	; (80043a8 <HAL_TIM_Base_MspInit+0xe8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d10e      	bne.n	8004360 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <HAL_TIM_Base_MspInit+0xe0>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <HAL_TIM_Base_MspInit+0xe0>)
 800434c:	f043 0304 	orr.w	r3, r3, #4
 8004350:	6413      	str	r3, [r2, #64]	; 0x40
 8004352:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <HAL_TIM_Base_MspInit+0xe0>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
}
 800435e:	e01a      	b.n	8004396 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM10)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a11      	ldr	r2, [pc, #68]	; (80043ac <HAL_TIM_Base_MspInit+0xec>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d115      	bne.n	8004396 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <HAL_TIM_Base_MspInit+0xe0>)
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	4a0b      	ldr	r2, [pc, #44]	; (80043a0 <HAL_TIM_Base_MspInit+0xe0>)
 8004374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004378:	6453      	str	r3, [r2, #68]	; 0x44
 800437a:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <HAL_TIM_Base_MspInit+0xe0>)
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 6, 0);
 8004386:	2200      	movs	r2, #0
 8004388:	2106      	movs	r1, #6
 800438a:	2019      	movs	r0, #25
 800438c:	f000 ffc8 	bl	8005320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004390:	2019      	movs	r0, #25
 8004392:	f000 ffe1 	bl	8005358 <HAL_NVIC_EnableIRQ>
}
 8004396:	bf00      	nop
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40023800 	.word	0x40023800
 80043a4:	40000400 	.word	0x40000400
 80043a8:	40000800 	.word	0x40000800
 80043ac:	40014400 	.word	0x40014400

080043b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	605a      	str	r2, [r3, #4]
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	60da      	str	r2, [r3, #12]
 80043c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d0:	d11e      	bne.n	8004410 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	4b34      	ldr	r3, [pc, #208]	; (80044a8 <HAL_TIM_MspPostInit+0xf8>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	4a33      	ldr	r2, [pc, #204]	; (80044a8 <HAL_TIM_MspPostInit+0xf8>)
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	6313      	str	r3, [r2, #48]	; 0x30
 80043e2:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <HAL_TIM_MspPostInit+0xf8>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = J2_STEP_TIM2_CH1_Pin;
 80043ee:	2320      	movs	r3, #32
 80043f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f2:	2302      	movs	r3, #2
 80043f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043fa:	2300      	movs	r3, #0
 80043fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80043fe:	2301      	movs	r3, #1
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(J2_STEP_TIM2_CH1_GPIO_Port, &GPIO_InitStruct);
 8004402:	f107 0314 	add.w	r3, r7, #20
 8004406:	4619      	mov	r1, r3
 8004408:	4828      	ldr	r0, [pc, #160]	; (80044ac <HAL_TIM_MspPostInit+0xfc>)
 800440a:	f001 ff13 	bl	8006234 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800440e:	e047      	b.n	80044a0 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a26      	ldr	r2, [pc, #152]	; (80044b0 <HAL_TIM_MspPostInit+0x100>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d11e      	bne.n	8004458 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	4b22      	ldr	r3, [pc, #136]	; (80044a8 <HAL_TIM_MspPostInit+0xf8>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	4a21      	ldr	r2, [pc, #132]	; (80044a8 <HAL_TIM_MspPostInit+0xf8>)
 8004424:	f043 0302 	orr.w	r3, r3, #2
 8004428:	6313      	str	r3, [r2, #48]	; 0x30
 800442a:	4b1f      	ldr	r3, [pc, #124]	; (80044a8 <HAL_TIM_MspPostInit+0xf8>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = J1_STEP_TIM3_CH3_Pin;
 8004436:	2301      	movs	r3, #1
 8004438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443a:	2302      	movs	r3, #2
 800443c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443e:	2300      	movs	r3, #0
 8004440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004442:	2300      	movs	r3, #0
 8004444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004446:	2302      	movs	r3, #2
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(J1_STEP_TIM3_CH3_GPIO_Port, &GPIO_InitStruct);
 800444a:	f107 0314 	add.w	r3, r7, #20
 800444e:	4619      	mov	r1, r3
 8004450:	4818      	ldr	r0, [pc, #96]	; (80044b4 <HAL_TIM_MspPostInit+0x104>)
 8004452:	f001 feef 	bl	8006234 <HAL_GPIO_Init>
}
 8004456:	e023      	b.n	80044a0 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a16      	ldr	r2, [pc, #88]	; (80044b8 <HAL_TIM_MspPostInit+0x108>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d11e      	bne.n	80044a0 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <HAL_TIM_MspPostInit+0xf8>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	4a0f      	ldr	r2, [pc, #60]	; (80044a8 <HAL_TIM_MspPostInit+0xf8>)
 800446c:	f043 0302 	orr.w	r3, r3, #2
 8004470:	6313      	str	r3, [r2, #48]	; 0x30
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <HAL_TIM_MspPostInit+0xf8>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO1_TIM4_CH3_Pin|SERVO_J3_TIM4_CH4_Pin;
 800447e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004484:	2302      	movs	r3, #2
 8004486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004488:	2300      	movs	r3, #0
 800448a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800448c:	2300      	movs	r3, #0
 800448e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004490:	2302      	movs	r3, #2
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004494:	f107 0314 	add.w	r3, r7, #20
 8004498:	4619      	mov	r1, r3
 800449a:	4806      	ldr	r0, [pc, #24]	; (80044b4 <HAL_TIM_MspPostInit+0x104>)
 800449c:	f001 feca 	bl	8006234 <HAL_GPIO_Init>
}
 80044a0:	bf00      	nop
 80044a2:	3728      	adds	r7, #40	; 0x28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40023800 	.word	0x40023800
 80044ac:	40020000 	.word	0x40020000
 80044b0:	40000400 	.word	0x40000400
 80044b4:	40020400 	.word	0x40020400
 80044b8:	40000800 	.word	0x40000800

080044bc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80044c0:	4b11      	ldr	r3, [pc, #68]	; (8004508 <MX_USART1_UART_Init+0x4c>)
 80044c2:	4a12      	ldr	r2, [pc, #72]	; (800450c <MX_USART1_UART_Init+0x50>)
 80044c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80044c6:	4b10      	ldr	r3, [pc, #64]	; (8004508 <MX_USART1_UART_Init+0x4c>)
 80044c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044ce:	4b0e      	ldr	r3, [pc, #56]	; (8004508 <MX_USART1_UART_Init+0x4c>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044d4:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <MX_USART1_UART_Init+0x4c>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <MX_USART1_UART_Init+0x4c>)
 80044dc:	2200      	movs	r2, #0
 80044de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <MX_USART1_UART_Init+0x4c>)
 80044e2:	220c      	movs	r2, #12
 80044e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044e6:	4b08      	ldr	r3, [pc, #32]	; (8004508 <MX_USART1_UART_Init+0x4c>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <MX_USART1_UART_Init+0x4c>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044f2:	4805      	ldr	r0, [pc, #20]	; (8004508 <MX_USART1_UART_Init+0x4c>)
 80044f4:	f006 fce3 	bl	800aebe <HAL_UART_Init>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80044fe:	f7ff fa7d 	bl	80039fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004502:	bf00      	nop
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20009184 	.word	0x20009184
 800450c:	40011000 	.word	0x40011000

08004510 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004514:	4b11      	ldr	r3, [pc, #68]	; (800455c <MX_USART2_UART_Init+0x4c>)
 8004516:	4a12      	ldr	r2, [pc, #72]	; (8004560 <MX_USART2_UART_Init+0x50>)
 8004518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800451a:	4b10      	ldr	r3, [pc, #64]	; (800455c <MX_USART2_UART_Init+0x4c>)
 800451c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004522:	4b0e      	ldr	r3, [pc, #56]	; (800455c <MX_USART2_UART_Init+0x4c>)
 8004524:	2200      	movs	r2, #0
 8004526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004528:	4b0c      	ldr	r3, [pc, #48]	; (800455c <MX_USART2_UART_Init+0x4c>)
 800452a:	2200      	movs	r2, #0
 800452c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800452e:	4b0b      	ldr	r3, [pc, #44]	; (800455c <MX_USART2_UART_Init+0x4c>)
 8004530:	2200      	movs	r2, #0
 8004532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004534:	4b09      	ldr	r3, [pc, #36]	; (800455c <MX_USART2_UART_Init+0x4c>)
 8004536:	220c      	movs	r2, #12
 8004538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800453a:	4b08      	ldr	r3, [pc, #32]	; (800455c <MX_USART2_UART_Init+0x4c>)
 800453c:	2200      	movs	r2, #0
 800453e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <MX_USART2_UART_Init+0x4c>)
 8004542:	2200      	movs	r2, #0
 8004544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004546:	4805      	ldr	r0, [pc, #20]	; (800455c <MX_USART2_UART_Init+0x4c>)
 8004548:	f006 fcb9 	bl	800aebe <HAL_UART_Init>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004552:	f7ff fa53 	bl	80039fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	20008f78 	.word	0x20008f78
 8004560:	40004400 	.word	0x40004400

08004564 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b08c      	sub	sp, #48	; 0x30
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800456c:	f107 031c 	add.w	r3, r7, #28
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	605a      	str	r2, [r3, #4]
 8004576:	609a      	str	r2, [r3, #8]
 8004578:	60da      	str	r2, [r3, #12]
 800457a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a69      	ldr	r2, [pc, #420]	; (8004728 <HAL_UART_MspInit+0x1c4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d164      	bne.n	8004650 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004586:	2300      	movs	r3, #0
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	4b68      	ldr	r3, [pc, #416]	; (800472c <HAL_UART_MspInit+0x1c8>)
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	4a67      	ldr	r2, [pc, #412]	; (800472c <HAL_UART_MspInit+0x1c8>)
 8004590:	f043 0310 	orr.w	r3, r3, #16
 8004594:	6453      	str	r3, [r2, #68]	; 0x44
 8004596:	4b65      	ldr	r3, [pc, #404]	; (800472c <HAL_UART_MspInit+0x1c8>)
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	f003 0310 	and.w	r3, r3, #16
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	4b61      	ldr	r3, [pc, #388]	; (800472c <HAL_UART_MspInit+0x1c8>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	4a60      	ldr	r2, [pc, #384]	; (800472c <HAL_UART_MspInit+0x1c8>)
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	6313      	str	r3, [r2, #48]	; 0x30
 80045b2:	4b5e      	ldr	r3, [pc, #376]	; (800472c <HAL_UART_MspInit+0x1c8>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80045be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80045c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c4:	2302      	movs	r3, #2
 80045c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045cc:	2303      	movs	r3, #3
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045d0:	2307      	movs	r3, #7
 80045d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d4:	f107 031c 	add.w	r3, r7, #28
 80045d8:	4619      	mov	r1, r3
 80045da:	4855      	ldr	r0, [pc, #340]	; (8004730 <HAL_UART_MspInit+0x1cc>)
 80045dc:	f001 fe2a 	bl	8006234 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80045e0:	4b54      	ldr	r3, [pc, #336]	; (8004734 <HAL_UART_MspInit+0x1d0>)
 80045e2:	4a55      	ldr	r2, [pc, #340]	; (8004738 <HAL_UART_MspInit+0x1d4>)
 80045e4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80045e6:	4b53      	ldr	r3, [pc, #332]	; (8004734 <HAL_UART_MspInit+0x1d0>)
 80045e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045ee:	4b51      	ldr	r3, [pc, #324]	; (8004734 <HAL_UART_MspInit+0x1d0>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045f4:	4b4f      	ldr	r3, [pc, #316]	; (8004734 <HAL_UART_MspInit+0x1d0>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045fa:	4b4e      	ldr	r3, [pc, #312]	; (8004734 <HAL_UART_MspInit+0x1d0>)
 80045fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004600:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004602:	4b4c      	ldr	r3, [pc, #304]	; (8004734 <HAL_UART_MspInit+0x1d0>)
 8004604:	2200      	movs	r2, #0
 8004606:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004608:	4b4a      	ldr	r3, [pc, #296]	; (8004734 <HAL_UART_MspInit+0x1d0>)
 800460a:	2200      	movs	r2, #0
 800460c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800460e:	4b49      	ldr	r3, [pc, #292]	; (8004734 <HAL_UART_MspInit+0x1d0>)
 8004610:	2200      	movs	r2, #0
 8004612:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004614:	4b47      	ldr	r3, [pc, #284]	; (8004734 <HAL_UART_MspInit+0x1d0>)
 8004616:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800461a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800461c:	4b45      	ldr	r3, [pc, #276]	; (8004734 <HAL_UART_MspInit+0x1d0>)
 800461e:	2200      	movs	r2, #0
 8004620:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004622:	4844      	ldr	r0, [pc, #272]	; (8004734 <HAL_UART_MspInit+0x1d0>)
 8004624:	f000 feb4 	bl	8005390 <HAL_DMA_Init>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800462e:	f7ff f9e5 	bl	80039fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a3f      	ldr	r2, [pc, #252]	; (8004734 <HAL_UART_MspInit+0x1d0>)
 8004636:	639a      	str	r2, [r3, #56]	; 0x38
 8004638:	4a3e      	ldr	r2, [pc, #248]	; (8004734 <HAL_UART_MspInit+0x1d0>)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800463e:	2200      	movs	r2, #0
 8004640:	2105      	movs	r1, #5
 8004642:	2025      	movs	r0, #37	; 0x25
 8004644:	f000 fe6c 	bl	8005320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004648:	2025      	movs	r0, #37	; 0x25
 800464a:	f000 fe85 	bl	8005358 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800464e:	e067      	b.n	8004720 <HAL_UART_MspInit+0x1bc>
  else if(uartHandle->Instance==USART2)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a39      	ldr	r2, [pc, #228]	; (800473c <HAL_UART_MspInit+0x1d8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d162      	bne.n	8004720 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	4b33      	ldr	r3, [pc, #204]	; (800472c <HAL_UART_MspInit+0x1c8>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	4a32      	ldr	r2, [pc, #200]	; (800472c <HAL_UART_MspInit+0x1c8>)
 8004664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004668:	6413      	str	r3, [r2, #64]	; 0x40
 800466a:	4b30      	ldr	r3, [pc, #192]	; (800472c <HAL_UART_MspInit+0x1c8>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	4b2c      	ldr	r3, [pc, #176]	; (800472c <HAL_UART_MspInit+0x1c8>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	4a2b      	ldr	r2, [pc, #172]	; (800472c <HAL_UART_MspInit+0x1c8>)
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	6313      	str	r3, [r2, #48]	; 0x30
 8004686:	4b29      	ldr	r3, [pc, #164]	; (800472c <HAL_UART_MspInit+0x1c8>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004692:	230c      	movs	r3, #12
 8004694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004696:	2302      	movs	r3, #2
 8004698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469a:	2300      	movs	r3, #0
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800469e:	2303      	movs	r3, #3
 80046a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046a2:	2307      	movs	r3, #7
 80046a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046a6:	f107 031c 	add.w	r3, r7, #28
 80046aa:	4619      	mov	r1, r3
 80046ac:	4820      	ldr	r0, [pc, #128]	; (8004730 <HAL_UART_MspInit+0x1cc>)
 80046ae:	f001 fdc1 	bl	8006234 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80046b2:	4b23      	ldr	r3, [pc, #140]	; (8004740 <HAL_UART_MspInit+0x1dc>)
 80046b4:	4a23      	ldr	r2, [pc, #140]	; (8004744 <HAL_UART_MspInit+0x1e0>)
 80046b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80046b8:	4b21      	ldr	r3, [pc, #132]	; (8004740 <HAL_UART_MspInit+0x1dc>)
 80046ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046be:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046c0:	4b1f      	ldr	r3, [pc, #124]	; (8004740 <HAL_UART_MspInit+0x1dc>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046c6:	4b1e      	ldr	r3, [pc, #120]	; (8004740 <HAL_UART_MspInit+0x1dc>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046cc:	4b1c      	ldr	r3, [pc, #112]	; (8004740 <HAL_UART_MspInit+0x1dc>)
 80046ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046d4:	4b1a      	ldr	r3, [pc, #104]	; (8004740 <HAL_UART_MspInit+0x1dc>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046da:	4b19      	ldr	r3, [pc, #100]	; (8004740 <HAL_UART_MspInit+0x1dc>)
 80046dc:	2200      	movs	r2, #0
 80046de:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80046e0:	4b17      	ldr	r3, [pc, #92]	; (8004740 <HAL_UART_MspInit+0x1dc>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80046e6:	4b16      	ldr	r3, [pc, #88]	; (8004740 <HAL_UART_MspInit+0x1dc>)
 80046e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046ec:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046ee:	4b14      	ldr	r3, [pc, #80]	; (8004740 <HAL_UART_MspInit+0x1dc>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80046f4:	4812      	ldr	r0, [pc, #72]	; (8004740 <HAL_UART_MspInit+0x1dc>)
 80046f6:	f000 fe4b 	bl	8005390 <HAL_DMA_Init>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8004700:	f7ff f97c 	bl	80039fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a0e      	ldr	r2, [pc, #56]	; (8004740 <HAL_UART_MspInit+0x1dc>)
 8004708:	639a      	str	r2, [r3, #56]	; 0x38
 800470a:	4a0d      	ldr	r2, [pc, #52]	; (8004740 <HAL_UART_MspInit+0x1dc>)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004710:	2200      	movs	r2, #0
 8004712:	2105      	movs	r1, #5
 8004714:	2026      	movs	r0, #38	; 0x26
 8004716:	f000 fe03 	bl	8005320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800471a:	2026      	movs	r0, #38	; 0x26
 800471c:	f000 fe1c 	bl	8005358 <HAL_NVIC_EnableIRQ>
}
 8004720:	bf00      	nop
 8004722:	3730      	adds	r7, #48	; 0x30
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40011000 	.word	0x40011000
 800472c:	40023800 	.word	0x40023800
 8004730:	40020000 	.word	0x40020000
 8004734:	20009124 	.word	0x20009124
 8004738:	40026440 	.word	0x40026440
 800473c:	40004400 	.word	0x40004400
 8004740:	20008efc 	.word	0x20008efc
 8004744:	40026088 	.word	0x40026088

08004748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004780 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800474c:	480d      	ldr	r0, [pc, #52]	; (8004784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800474e:	490e      	ldr	r1, [pc, #56]	; (8004788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004750:	4a0e      	ldr	r2, [pc, #56]	; (800478c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004754:	e002      	b.n	800475c <LoopCopyDataInit>

08004756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800475a:	3304      	adds	r3, #4

0800475c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800475c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800475e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004760:	d3f9      	bcc.n	8004756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004762:	4a0b      	ldr	r2, [pc, #44]	; (8004790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004764:	4c0b      	ldr	r4, [pc, #44]	; (8004794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004768:	e001      	b.n	800476e <LoopFillZerobss>

0800476a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800476a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800476c:	3204      	adds	r2, #4

0800476e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800476e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004770:	d3fb      	bcc.n	800476a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004772:	f7ff fc01 	bl	8003f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004776:	f00a fc0b 	bl	800ef90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800477a:	f7ff f865 	bl	8003848 <main>
  bx  lr    
 800477e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004780:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004788:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800478c:	08010704 	.word	0x08010704
  ldr r2, =_sbss
 8004790:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8004794:	2000923c 	.word	0x2000923c

08004798 <DMA1_Stream3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004798:	e7fe      	b.n	8004798 <DMA1_Stream3_IRQHandler>
	...

0800479c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047a0:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <HAL_Init+0x40>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a0d      	ldr	r2, [pc, #52]	; (80047dc <HAL_Init+0x40>)
 80047a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80047ac:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <HAL_Init+0x40>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a0a      	ldr	r2, [pc, #40]	; (80047dc <HAL_Init+0x40>)
 80047b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047b8:	4b08      	ldr	r3, [pc, #32]	; (80047dc <HAL_Init+0x40>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a07      	ldr	r2, [pc, #28]	; (80047dc <HAL_Init+0x40>)
 80047be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047c4:	2003      	movs	r0, #3
 80047c6:	f000 fda0 	bl	800530a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047ca:	2000      	movs	r0, #0
 80047cc:	f7ff fa16 	bl	8003bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047d0:	f7ff f9e8 	bl	8003ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40023c00 	.word	0x40023c00

080047e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047e4:	4b06      	ldr	r3, [pc, #24]	; (8004800 <HAL_IncTick+0x20>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	461a      	mov	r2, r3
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <HAL_IncTick+0x24>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4413      	add	r3, r2
 80047f0:	4a04      	ldr	r2, [pc, #16]	; (8004804 <HAL_IncTick+0x24>)
 80047f2:	6013      	str	r3, [r2, #0]
}
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000010 	.word	0x20000010
 8004804:	200091c8 	.word	0x200091c8

08004808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return uwTick;
 800480c:	4b03      	ldr	r3, [pc, #12]	; (800481c <HAL_GetTick+0x14>)
 800480e:	681b      	ldr	r3, [r3, #0]
}
 8004810:	4618      	mov	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	200091c8 	.word	0x200091c8

08004820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004828:	f7ff ffee 	bl	8004808 <HAL_GetTick>
 800482c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004838:	d005      	beq.n	8004846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <HAL_Delay+0x44>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004846:	bf00      	nop
 8004848:	f7ff ffde 	bl	8004808 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	429a      	cmp	r2, r3
 8004856:	d8f7      	bhi.n	8004848 <HAL_Delay+0x28>
  {
  }
}
 8004858:	bf00      	nop
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000010 	.word	0x20000010

08004868 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e033      	b.n	80048e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fd f804 	bl	8001894 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d118      	bne.n	80048d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80048ae:	f023 0302 	bic.w	r3, r3, #2
 80048b2:	f043 0202 	orr.w	r2, r3, #2
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fb4e 	bl	8004f5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f023 0303 	bic.w	r3, r3, #3
 80048ce:	f043 0201 	orr.w	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	641a      	str	r2, [r3, #64]	; 0x40
 80048d6:	e001      	b.n	80048dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <HAL_ADC_Start_IT+0x1a>
 8004906:	2302      	movs	r3, #2
 8004908:	e0a1      	b.n	8004a4e <HAL_ADC_Start_IT+0x15e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b01      	cmp	r3, #1
 800491e:	d018      	beq.n	8004952 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004930:	4b4a      	ldr	r3, [pc, #296]	; (8004a5c <HAL_ADC_Start_IT+0x16c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a4a      	ldr	r2, [pc, #296]	; (8004a60 <HAL_ADC_Start_IT+0x170>)
 8004936:	fba2 2303 	umull	r2, r3, r2, r3
 800493a:	0c9a      	lsrs	r2, r3, #18
 800493c:	4613      	mov	r3, r2
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	4413      	add	r3, r2
 8004942:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004944:	e002      	b.n	800494c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	3b01      	subs	r3, #1
 800494a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f9      	bne.n	8004946 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b01      	cmp	r3, #1
 800495e:	d169      	bne.n	8004a34 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004968:	f023 0301 	bic.w	r3, r3, #1
 800496c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800498a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800499a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800499e:	d106      	bne.n	80049ae <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a4:	f023 0206 	bic.w	r2, r3, #6
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	645a      	str	r2, [r3, #68]	; 0x44
 80049ac:	e002      	b.n	80049b4 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049bc:	4b29      	ldr	r3, [pc, #164]	; (8004a64 <HAL_ADC_Start_IT+0x174>)
 80049be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80049c8:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049d8:	f043 0320 	orr.w	r3, r3, #32
 80049dc:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10f      	bne.n	8004a0a <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d129      	bne.n	8004a4c <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a06:	609a      	str	r2, [r3, #8]
 8004a08:	e020      	b.n	8004a4c <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a16      	ldr	r2, [pc, #88]	; (8004a68 <HAL_ADC_Start_IT+0x178>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d11b      	bne.n	8004a4c <HAL_ADC_Start_IT+0x15c>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d114      	bne.n	8004a4c <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a30:	609a      	str	r2, [r3, #8]
 8004a32:	e00b      	b.n	8004a4c <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	f043 0210 	orr.w	r2, r3, #16
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a44:	f043 0201 	orr.w	r2, r3, #1
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	20000008 	.word	0x20000008
 8004a60:	431bde83 	.word	0x431bde83
 8004a64:	40012300 	.word	0x40012300
 8004a68:	40012000 	.word	0x40012000

08004a6c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	bf0c      	ite	eq
 8004a8a:	2301      	moveq	r3, #1
 8004a8c:	2300      	movne	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d049      	beq.n	8004b42 <HAL_ADC_IRQHandler+0xd6>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d046      	beq.n	8004b42 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	f003 0310 	and.w	r3, r3, #16
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d105      	bne.n	8004acc <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d12b      	bne.n	8004b32 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d127      	bne.n	8004b32 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d006      	beq.n	8004afe <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d119      	bne.n	8004b32 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0220 	bic.w	r2, r2, #32
 8004b0c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d105      	bne.n	8004b32 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f043 0201 	orr.w	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fc ff2c 	bl	8001990 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0212 	mvn.w	r2, #18
 8004b40:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	bf0c      	ite	eq
 8004b50:	2301      	moveq	r3, #1
 8004b52:	2300      	movne	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b62:	2b80      	cmp	r3, #128	; 0x80
 8004b64:	bf0c      	ite	eq
 8004b66:	2301      	moveq	r3, #1
 8004b68:	2300      	movne	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d057      	beq.n	8004c24 <HAL_ADC_IRQHandler+0x1b8>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d054      	beq.n	8004c24 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d105      	bne.n	8004b92 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d139      	bne.n	8004c14 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d006      	beq.n	8004bbc <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d12b      	bne.n	8004c14 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d124      	bne.n	8004c14 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d11d      	bne.n	8004c14 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d119      	bne.n	8004c14 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d105      	bne.n	8004c14 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	f043 0201 	orr.w	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fa9d 	bl	8005154 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f06f 020c 	mvn.w	r2, #12
 8004c22:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	bf0c      	ite	eq
 8004c32:	2301      	moveq	r3, #1
 8004c34:	2300      	movne	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b40      	cmp	r3, #64	; 0x40
 8004c46:	bf0c      	ite	eq
 8004c48:	2301      	moveq	r3, #1
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d017      	beq.n	8004c86 <HAL_ADC_IRQHandler+0x21a>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d014      	beq.n	8004c86 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d10d      	bne.n	8004c86 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f839 	bl	8004cee <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0201 	mvn.w	r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	bf0c      	ite	eq
 8004c94:	2301      	moveq	r3, #1
 8004c96:	2300      	movne	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ca6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d015      	beq.n	8004ce6 <HAL_ADC_IRQHandler+0x27a>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d012      	beq.n	8004ce6 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc4:	f043 0202 	orr.w	r2, r3, #2
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0220 	mvn.w	r2, #32
 8004cd4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f813 	bl	8004d02 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0220 	mvn.w	r2, #32
 8004ce4:	601a      	str	r2, [r3, #0]
  }
}
 8004ce6:	bf00      	nop
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
	...

08004d18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x1c>
 8004d30:	2302      	movs	r3, #2
 8004d32:	e105      	b.n	8004f40 <HAL_ADC_ConfigChannel+0x228>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b09      	cmp	r3, #9
 8004d42:	d925      	bls.n	8004d90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68d9      	ldr	r1, [r3, #12]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	4613      	mov	r3, r2
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	4413      	add	r3, r2
 8004d58:	3b1e      	subs	r3, #30
 8004d5a:	2207      	movs	r2, #7
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	43da      	mvns	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	400a      	ands	r2, r1
 8004d68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68d9      	ldr	r1, [r3, #12]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	4403      	add	r3, r0
 8004d82:	3b1e      	subs	r3, #30
 8004d84:	409a      	lsls	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	60da      	str	r2, [r3, #12]
 8004d8e:	e022      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6919      	ldr	r1, [r3, #16]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4613      	mov	r3, r2
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	4413      	add	r3, r2
 8004da4:	2207      	movs	r2, #7
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	43da      	mvns	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	400a      	ands	r2, r1
 8004db2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6919      	ldr	r1, [r3, #16]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	4403      	add	r3, r0
 8004dcc:	409a      	lsls	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b06      	cmp	r3, #6
 8004ddc:	d824      	bhi.n	8004e28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	3b05      	subs	r3, #5
 8004df0:	221f      	movs	r2, #31
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	43da      	mvns	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	400a      	ands	r2, r1
 8004dfe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	3b05      	subs	r3, #5
 8004e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	635a      	str	r2, [r3, #52]	; 0x34
 8004e26:	e04c      	b.n	8004ec2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b0c      	cmp	r3, #12
 8004e2e:	d824      	bhi.n	8004e7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	3b23      	subs	r3, #35	; 0x23
 8004e42:	221f      	movs	r2, #31
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	43da      	mvns	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	400a      	ands	r2, r1
 8004e50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	4618      	mov	r0, r3
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	3b23      	subs	r3, #35	; 0x23
 8004e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	631a      	str	r2, [r3, #48]	; 0x30
 8004e78:	e023      	b.n	8004ec2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	3b41      	subs	r3, #65	; 0x41
 8004e8c:	221f      	movs	r2, #31
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43da      	mvns	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	400a      	ands	r2, r1
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	3b41      	subs	r3, #65	; 0x41
 8004eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ec2:	4b22      	ldr	r3, [pc, #136]	; (8004f4c <HAL_ADC_ConfigChannel+0x234>)
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a21      	ldr	r2, [pc, #132]	; (8004f50 <HAL_ADC_ConfigChannel+0x238>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d109      	bne.n	8004ee4 <HAL_ADC_ConfigChannel+0x1cc>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b12      	cmp	r3, #18
 8004ed6:	d105      	bne.n	8004ee4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a19      	ldr	r2, [pc, #100]	; (8004f50 <HAL_ADC_ConfigChannel+0x238>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d123      	bne.n	8004f36 <HAL_ADC_ConfigChannel+0x21e>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b10      	cmp	r3, #16
 8004ef4:	d003      	beq.n	8004efe <HAL_ADC_ConfigChannel+0x1e6>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b11      	cmp	r3, #17
 8004efc:	d11b      	bne.n	8004f36 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b10      	cmp	r3, #16
 8004f10:	d111      	bne.n	8004f36 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f12:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <HAL_ADC_ConfigChannel+0x23c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a10      	ldr	r2, [pc, #64]	; (8004f58 <HAL_ADC_ConfigChannel+0x240>)
 8004f18:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1c:	0c9a      	lsrs	r2, r3, #18
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004f28:	e002      	b.n	8004f30 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f9      	bne.n	8004f2a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	40012300 	.word	0x40012300
 8004f50:	40012000 	.word	0x40012000
 8004f54:	20000008 	.word	0x20000008
 8004f58:	431bde83 	.word	0x431bde83

08004f5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f64:	4b79      	ldr	r3, [pc, #484]	; (800514c <ADC_Init+0x1f0>)
 8004f66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6859      	ldr	r1, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	021a      	lsls	r2, r3, #8
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004fb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6859      	ldr	r1, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6899      	ldr	r1, [r3, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	4a58      	ldr	r2, [pc, #352]	; (8005150 <ADC_Init+0x1f4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d022      	beq.n	800503a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005002:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6899      	ldr	r1, [r3, #8]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005024:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6899      	ldr	r1, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	609a      	str	r2, [r3, #8]
 8005038:	e00f      	b.n	800505a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005058:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0202 	bic.w	r2, r2, #2
 8005068:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6899      	ldr	r1, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	7e1b      	ldrb	r3, [r3, #24]
 8005074:	005a      	lsls	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01b      	beq.n	80050c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005096:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80050a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6859      	ldr	r1, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	3b01      	subs	r3, #1
 80050b4:	035a      	lsls	r2, r3, #13
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
 80050be:	e007      	b.n	80050d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80050de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	051a      	lsls	r2, r3, #20
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005104:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6899      	ldr	r1, [r3, #8]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005112:	025a      	lsls	r2, r3, #9
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800512a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6899      	ldr	r1, [r3, #8]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	029a      	lsls	r2, r3, #10
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	609a      	str	r2, [r3, #8]
}
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	40012300 	.word	0x40012300
 8005150:	0f000001 	.word	0x0f000001

08005154 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005178:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <__NVIC_SetPriorityGrouping+0x44>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005184:	4013      	ands	r3, r2
 8005186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800519a:	4a04      	ldr	r2, [pc, #16]	; (80051ac <__NVIC_SetPriorityGrouping+0x44>)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	60d3      	str	r3, [r2, #12]
}
 80051a0:	bf00      	nop
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	e000ed00 	.word	0xe000ed00

080051b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051b4:	4b04      	ldr	r3, [pc, #16]	; (80051c8 <__NVIC_GetPriorityGrouping+0x18>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	0a1b      	lsrs	r3, r3, #8
 80051ba:	f003 0307 	and.w	r3, r3, #7
}
 80051be:	4618      	mov	r0, r3
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	e000ed00 	.word	0xe000ed00

080051cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	db0b      	blt.n	80051f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	f003 021f 	and.w	r2, r3, #31
 80051e4:	4907      	ldr	r1, [pc, #28]	; (8005204 <__NVIC_EnableIRQ+0x38>)
 80051e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	2001      	movs	r0, #1
 80051ee:	fa00 f202 	lsl.w	r2, r0, r2
 80051f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	e000e100 	.word	0xe000e100

08005208 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005216:	2b00      	cmp	r3, #0
 8005218:	db12      	blt.n	8005240 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	f003 021f 	and.w	r2, r3, #31
 8005220:	490a      	ldr	r1, [pc, #40]	; (800524c <__NVIC_DisableIRQ+0x44>)
 8005222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	2001      	movs	r0, #1
 800522a:	fa00 f202 	lsl.w	r2, r0, r2
 800522e:	3320      	adds	r3, #32
 8005230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005234:	f3bf 8f4f 	dsb	sy
}
 8005238:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800523a:	f3bf 8f6f 	isb	sy
}
 800523e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	e000e100 	.word	0xe000e100

08005250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	6039      	str	r1, [r7, #0]
 800525a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800525c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005260:	2b00      	cmp	r3, #0
 8005262:	db0a      	blt.n	800527a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	b2da      	uxtb	r2, r3
 8005268:	490c      	ldr	r1, [pc, #48]	; (800529c <__NVIC_SetPriority+0x4c>)
 800526a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526e:	0112      	lsls	r2, r2, #4
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	440b      	add	r3, r1
 8005274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005278:	e00a      	b.n	8005290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	b2da      	uxtb	r2, r3
 800527e:	4908      	ldr	r1, [pc, #32]	; (80052a0 <__NVIC_SetPriority+0x50>)
 8005280:	79fb      	ldrb	r3, [r7, #7]
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	3b04      	subs	r3, #4
 8005288:	0112      	lsls	r2, r2, #4
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	440b      	add	r3, r1
 800528e:	761a      	strb	r2, [r3, #24]
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	e000e100 	.word	0xe000e100
 80052a0:	e000ed00 	.word	0xe000ed00

080052a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b089      	sub	sp, #36	; 0x24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	f1c3 0307 	rsb	r3, r3, #7
 80052be:	2b04      	cmp	r3, #4
 80052c0:	bf28      	it	cs
 80052c2:	2304      	movcs	r3, #4
 80052c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	3304      	adds	r3, #4
 80052ca:	2b06      	cmp	r3, #6
 80052cc:	d902      	bls.n	80052d4 <NVIC_EncodePriority+0x30>
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	3b03      	subs	r3, #3
 80052d2:	e000      	b.n	80052d6 <NVIC_EncodePriority+0x32>
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	fa02 f303 	lsl.w	r3, r2, r3
 80052e2:	43da      	mvns	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	401a      	ands	r2, r3
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	fa01 f303 	lsl.w	r3, r1, r3
 80052f6:	43d9      	mvns	r1, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052fc:	4313      	orrs	r3, r2
         );
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3724      	adds	r7, #36	; 0x24
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b082      	sub	sp, #8
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff ff28 	bl	8005168 <__NVIC_SetPriorityGrouping>
}
 8005318:	bf00      	nop
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005332:	f7ff ff3d 	bl	80051b0 <__NVIC_GetPriorityGrouping>
 8005336:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	6978      	ldr	r0, [r7, #20]
 800533e:	f7ff ffb1 	bl	80052a4 <NVIC_EncodePriority>
 8005342:	4602      	mov	r2, r0
 8005344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005348:	4611      	mov	r1, r2
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff ff80 	bl	8005250 <__NVIC_SetPriority>
}
 8005350:	bf00      	nop
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff ff30 	bl	80051cc <__NVIC_EnableIRQ>
}
 800536c:	bf00      	nop
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	4603      	mov	r3, r0
 800537c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800537e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff ff40 	bl	8005208 <__NVIC_DisableIRQ>
}
 8005388:	bf00      	nop
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800539c:	f7ff fa34 	bl	8004808 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e099      	b.n	80054e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053cc:	e00f      	b.n	80053ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053ce:	f7ff fa1b 	bl	8004808 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b05      	cmp	r3, #5
 80053da:	d908      	bls.n	80053ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2203      	movs	r2, #3
 80053e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e078      	b.n	80054e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e8      	bne.n	80053ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4b38      	ldr	r3, [pc, #224]	; (80054e8 <HAL_DMA_Init+0x158>)
 8005408:	4013      	ands	r3, r2
 800540a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800541a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	2b04      	cmp	r3, #4
 8005446:	d107      	bne.n	8005458 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005450:	4313      	orrs	r3, r2
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f023 0307 	bic.w	r3, r3, #7
 800546e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b04      	cmp	r3, #4
 8005480:	d117      	bne.n	80054b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00e      	beq.n	80054b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fb79 	bl	8005b8c <DMA_CheckFifoParam>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2240      	movs	r2, #64	; 0x40
 80054a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80054ae:	2301      	movs	r3, #1
 80054b0:	e016      	b.n	80054e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fb30 	bl	8005b20 <DMA_CalcBaseAndBitshift>
 80054c0:	4603      	mov	r3, r0
 80054c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c8:	223f      	movs	r2, #63	; 0x3f
 80054ca:	409a      	lsls	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	f010803f 	.word	0xf010803f

080054ec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e050      	b.n	80055a0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d101      	bne.n	800550e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800550a:	2302      	movs	r3, #2
 800550c:	e048      	b.n	80055a0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0201 	bic.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2200      	movs	r2, #0
 8005534:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2200      	movs	r2, #0
 800553c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2200      	movs	r2, #0
 8005544:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2221      	movs	r2, #33	; 0x21
 800554c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fae6 	bl	8005b20 <DMA_CalcBaseAndBitshift>
 8005554:	4603      	mov	r3, r0
 8005556:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005580:	223f      	movs	r2, #63	; 0x3f
 8005582:	409a      	lsls	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_DMA_Start_IT+0x26>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e040      	b.n	8005650 <HAL_DMA_Start_IT+0xa8>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d12f      	bne.n	8005642 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2202      	movs	r2, #2
 80055e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 fa64 	bl	8005ac4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005600:	223f      	movs	r2, #63	; 0x3f
 8005602:	409a      	lsls	r2, r3
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0216 	orr.w	r2, r2, #22
 8005616:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d007      	beq.n	8005630 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0208 	orr.w	r2, r2, #8
 800562e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	e005      	b.n	800564e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800564a:	2302      	movs	r3, #2
 800564c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800564e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005664:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005666:	f7ff f8cf 	bl	8004808 <HAL_GetTick>
 800566a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d008      	beq.n	800568a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2280      	movs	r2, #128	; 0x80
 800567c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e052      	b.n	8005730 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0216 	bic.w	r2, r2, #22
 8005698:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695a      	ldr	r2, [r3, #20]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d103      	bne.n	80056ba <HAL_DMA_Abort+0x62>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d007      	beq.n	80056ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0208 	bic.w	r2, r2, #8
 80056c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 0201 	bic.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056da:	e013      	b.n	8005704 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056dc:	f7ff f894 	bl	8004808 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b05      	cmp	r3, #5
 80056e8:	d90c      	bls.n	8005704 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2203      	movs	r2, #3
 80056fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e015      	b.n	8005730 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e4      	bne.n	80056dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005716:	223f      	movs	r2, #63	; 0x3f
 8005718:	409a      	lsls	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d004      	beq.n	8005756 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2280      	movs	r2, #128	; 0x80
 8005750:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e00c      	b.n	8005770 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2205      	movs	r2, #5
 800575a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0201 	bic.w	r2, r2, #1
 800576c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005788:	4b92      	ldr	r3, [pc, #584]	; (80059d4 <HAL_DMA_IRQHandler+0x258>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a92      	ldr	r2, [pc, #584]	; (80059d8 <HAL_DMA_IRQHandler+0x25c>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	0a9b      	lsrs	r3, r3, #10
 8005794:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a6:	2208      	movs	r2, #8
 80057a8:	409a      	lsls	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4013      	ands	r3, r2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d01a      	beq.n	80057e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d013      	beq.n	80057e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0204 	bic.w	r2, r2, #4
 80057ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d4:	2208      	movs	r2, #8
 80057d6:	409a      	lsls	r2, r3
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e0:	f043 0201 	orr.w	r2, r3, #1
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ec:	2201      	movs	r2, #1
 80057ee:	409a      	lsls	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4013      	ands	r3, r2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d012      	beq.n	800581e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580a:	2201      	movs	r2, #1
 800580c:	409a      	lsls	r2, r3
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005816:	f043 0202 	orr.w	r2, r3, #2
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005822:	2204      	movs	r2, #4
 8005824:	409a      	lsls	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4013      	ands	r3, r2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d012      	beq.n	8005854 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00b      	beq.n	8005854 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005840:	2204      	movs	r2, #4
 8005842:	409a      	lsls	r2, r3
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584c:	f043 0204 	orr.w	r2, r3, #4
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005858:	2210      	movs	r2, #16
 800585a:	409a      	lsls	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4013      	ands	r3, r2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d043      	beq.n	80058ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d03c      	beq.n	80058ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005876:	2210      	movs	r2, #16
 8005878:	409a      	lsls	r2, r3
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d018      	beq.n	80058be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d108      	bne.n	80058ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d024      	beq.n	80058ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	4798      	blx	r3
 80058aa:	e01f      	b.n	80058ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01b      	beq.n	80058ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	4798      	blx	r3
 80058bc:	e016      	b.n	80058ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d107      	bne.n	80058dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0208 	bic.w	r2, r2, #8
 80058da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f0:	2220      	movs	r2, #32
 80058f2:	409a      	lsls	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 808e 	beq.w	8005a1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0310 	and.w	r3, r3, #16
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 8086 	beq.w	8005a1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005912:	2220      	movs	r2, #32
 8005914:	409a      	lsls	r2, r3
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b05      	cmp	r3, #5
 8005924:	d136      	bne.n	8005994 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0216 	bic.w	r2, r2, #22
 8005934:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695a      	ldr	r2, [r3, #20]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005944:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d103      	bne.n	8005956 <HAL_DMA_IRQHandler+0x1da>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005952:	2b00      	cmp	r3, #0
 8005954:	d007      	beq.n	8005966 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0208 	bic.w	r2, r2, #8
 8005964:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800596a:	223f      	movs	r2, #63	; 0x3f
 800596c:	409a      	lsls	r2, r3
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005986:	2b00      	cmp	r3, #0
 8005988:	d07d      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	4798      	blx	r3
        }
        return;
 8005992:	e078      	b.n	8005a86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d01c      	beq.n	80059dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d108      	bne.n	80059c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d030      	beq.n	8005a1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	4798      	blx	r3
 80059c0:	e02b      	b.n	8005a1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d027      	beq.n	8005a1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	4798      	blx	r3
 80059d2:	e022      	b.n	8005a1a <HAL_DMA_IRQHandler+0x29e>
 80059d4:	20000008 	.word	0x20000008
 80059d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10f      	bne.n	8005a0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0210 	bic.w	r2, r2, #16
 80059f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d032      	beq.n	8005a88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d022      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2205      	movs	r2, #5
 8005a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0201 	bic.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	60bb      	str	r3, [r7, #8]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d307      	bcc.n	8005a62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1f2      	bne.n	8005a46 <HAL_DMA_IRQHandler+0x2ca>
 8005a60:	e000      	b.n	8005a64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005a62:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	4798      	blx	r3
 8005a84:	e000      	b.n	8005a88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005a86:	bf00      	nop
    }
  }
}
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop

08005a90 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a9e:	b2db      	uxtb	r3, r3
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ae0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b40      	cmp	r3, #64	; 0x40
 8005af0:	d108      	bne.n	8005b04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b02:	e007      	b.n	8005b14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	60da      	str	r2, [r3, #12]
}
 8005b14:	bf00      	nop
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	3b10      	subs	r3, #16
 8005b30:	4a14      	ldr	r2, [pc, #80]	; (8005b84 <DMA_CalcBaseAndBitshift+0x64>)
 8005b32:	fba2 2303 	umull	r2, r3, r2, r3
 8005b36:	091b      	lsrs	r3, r3, #4
 8005b38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b3a:	4a13      	ldr	r2, [pc, #76]	; (8005b88 <DMA_CalcBaseAndBitshift+0x68>)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d909      	bls.n	8005b62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b56:	f023 0303 	bic.w	r3, r3, #3
 8005b5a:	1d1a      	adds	r2, r3, #4
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	659a      	str	r2, [r3, #88]	; 0x58
 8005b60:	e007      	b.n	8005b72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	aaaaaaab 	.word	0xaaaaaaab
 8005b88:	08010550 	.word	0x08010550

08005b8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d11f      	bne.n	8005be6 <DMA_CheckFifoParam+0x5a>
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d856      	bhi.n	8005c5a <DMA_CheckFifoParam+0xce>
 8005bac:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <DMA_CheckFifoParam+0x28>)
 8005bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb2:	bf00      	nop
 8005bb4:	08005bc5 	.word	0x08005bc5
 8005bb8:	08005bd7 	.word	0x08005bd7
 8005bbc:	08005bc5 	.word	0x08005bc5
 8005bc0:	08005c5b 	.word	0x08005c5b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d046      	beq.n	8005c5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bd4:	e043      	b.n	8005c5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bde:	d140      	bne.n	8005c62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005be4:	e03d      	b.n	8005c62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bee:	d121      	bne.n	8005c34 <DMA_CheckFifoParam+0xa8>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d837      	bhi.n	8005c66 <DMA_CheckFifoParam+0xda>
 8005bf6:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <DMA_CheckFifoParam+0x70>)
 8005bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfc:	08005c0d 	.word	0x08005c0d
 8005c00:	08005c13 	.word	0x08005c13
 8005c04:	08005c0d 	.word	0x08005c0d
 8005c08:	08005c25 	.word	0x08005c25
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c10:	e030      	b.n	8005c74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d025      	beq.n	8005c6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c22:	e022      	b.n	8005c6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c2c:	d11f      	bne.n	8005c6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c32:	e01c      	b.n	8005c6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d903      	bls.n	8005c42 <DMA_CheckFifoParam+0xb6>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d003      	beq.n	8005c48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c40:	e018      	b.n	8005c74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	73fb      	strb	r3, [r7, #15]
      break;
 8005c46:	e015      	b.n	8005c74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00e      	beq.n	8005c72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
      break;
 8005c58:	e00b      	b.n	8005c72 <DMA_CheckFifoParam+0xe6>
      break;
 8005c5a:	bf00      	nop
 8005c5c:	e00a      	b.n	8005c74 <DMA_CheckFifoParam+0xe8>
      break;
 8005c5e:	bf00      	nop
 8005c60:	e008      	b.n	8005c74 <DMA_CheckFifoParam+0xe8>
      break;
 8005c62:	bf00      	nop
 8005c64:	e006      	b.n	8005c74 <DMA_CheckFifoParam+0xe8>
      break;
 8005c66:	bf00      	nop
 8005c68:	e004      	b.n	8005c74 <DMA_CheckFifoParam+0xe8>
      break;
 8005c6a:	bf00      	nop
 8005c6c:	e002      	b.n	8005c74 <DMA_CheckFifoParam+0xe8>
      break;   
 8005c6e:	bf00      	nop
 8005c70:	e000      	b.n	8005c74 <DMA_CheckFifoParam+0xe8>
      break;
 8005c72:	bf00      	nop
    }
  } 
  
  return status; 
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop

08005c84 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005c96:	4b23      	ldr	r3, [pc, #140]	; (8005d24 <HAL_FLASH_Program+0xa0>)
 8005c98:	7e1b      	ldrb	r3, [r3, #24]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d101      	bne.n	8005ca2 <HAL_FLASH_Program+0x1e>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e03b      	b.n	8005d1a <HAL_FLASH_Program+0x96>
 8005ca2:	4b20      	ldr	r3, [pc, #128]	; (8005d24 <HAL_FLASH_Program+0xa0>)
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ca8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005cac:	f000 f860 	bl	8005d70 <FLASH_WaitForLastOperation>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d12b      	bne.n	8005d12 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d105      	bne.n	8005ccc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005cc0:	783b      	ldrb	r3, [r7, #0]
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	68b8      	ldr	r0, [r7, #8]
 8005cc6:	f000 f90b 	bl	8005ee0 <FLASH_Program_Byte>
 8005cca:	e016      	b.n	8005cfa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d105      	bne.n	8005cde <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005cd2:	883b      	ldrh	r3, [r7, #0]
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	68b8      	ldr	r0, [r7, #8]
 8005cd8:	f000 f8de 	bl	8005e98 <FLASH_Program_HalfWord>
 8005cdc:	e00d      	b.n	8005cfa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d105      	bne.n	8005cf0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	68b8      	ldr	r0, [r7, #8]
 8005cea:	f000 f8b3 	bl	8005e54 <FLASH_Program_Word>
 8005cee:	e004      	b.n	8005cfa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cf4:	68b8      	ldr	r0, [r7, #8]
 8005cf6:	f000 f87b 	bl	8005df0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005cfa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005cfe:	f000 f837 	bl	8005d70 <FLASH_WaitForLastOperation>
 8005d02:	4603      	mov	r3, r0
 8005d04:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005d06:	4b08      	ldr	r3, [pc, #32]	; (8005d28 <HAL_FLASH_Program+0xa4>)
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	4a07      	ldr	r2, [pc, #28]	; (8005d28 <HAL_FLASH_Program+0xa4>)
 8005d0c:	f023 0301 	bic.w	r3, r3, #1
 8005d10:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005d12:	4b04      	ldr	r3, [pc, #16]	; (8005d24 <HAL_FLASH_Program+0xa0>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	200091cc 	.word	0x200091cc
 8005d28:	40023c00 	.word	0x40023c00

08005d2c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005d36:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <HAL_FLASH_Unlock+0x38>)
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	da0b      	bge.n	8005d56 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005d3e:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <HAL_FLASH_Unlock+0x38>)
 8005d40:	4a09      	ldr	r2, [pc, #36]	; (8005d68 <HAL_FLASH_Unlock+0x3c>)
 8005d42:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005d44:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <HAL_FLASH_Unlock+0x38>)
 8005d46:	4a09      	ldr	r2, [pc, #36]	; (8005d6c <HAL_FLASH_Unlock+0x40>)
 8005d48:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005d4a:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <HAL_FLASH_Unlock+0x38>)
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	da01      	bge.n	8005d56 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005d56:	79fb      	ldrb	r3, [r7, #7]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	40023c00 	.word	0x40023c00
 8005d68:	45670123 	.word	0x45670123
 8005d6c:	cdef89ab 	.word	0xcdef89ab

08005d70 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d7c:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <FLASH_WaitForLastOperation+0x78>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005d82:	f7fe fd41 	bl	8004808 <HAL_GetTick>
 8005d86:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005d88:	e010      	b.n	8005dac <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d90:	d00c      	beq.n	8005dac <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <FLASH_WaitForLastOperation+0x38>
 8005d98:	f7fe fd36 	bl	8004808 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d201      	bcs.n	8005dac <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e019      	b.n	8005de0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005dac:	4b0f      	ldr	r3, [pc, #60]	; (8005dec <FLASH_WaitForLastOperation+0x7c>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e8      	bne.n	8005d8a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005db8:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <FLASH_WaitForLastOperation+0x7c>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005dc4:	4b09      	ldr	r3, [pc, #36]	; (8005dec <FLASH_WaitForLastOperation+0x7c>)
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005dca:	4b08      	ldr	r3, [pc, #32]	; (8005dec <FLASH_WaitForLastOperation+0x7c>)
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005dd6:	f000 f8a5 	bl	8005f24 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e000      	b.n	8005de0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
  
}  
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	200091cc 	.word	0x200091cc
 8005dec:	40023c00 	.word	0x40023c00

08005df0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005dfc:	4b14      	ldr	r3, [pc, #80]	; (8005e50 <FLASH_Program_DoubleWord+0x60>)
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	4a13      	ldr	r2, [pc, #76]	; (8005e50 <FLASH_Program_DoubleWord+0x60>)
 8005e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005e08:	4b11      	ldr	r3, [pc, #68]	; (8005e50 <FLASH_Program_DoubleWord+0x60>)
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	4a10      	ldr	r2, [pc, #64]	; (8005e50 <FLASH_Program_DoubleWord+0x60>)
 8005e0e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005e12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005e14:	4b0e      	ldr	r3, [pc, #56]	; (8005e50 <FLASH_Program_DoubleWord+0x60>)
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	4a0d      	ldr	r2, [pc, #52]	; (8005e50 <FLASH_Program_DoubleWord+0x60>)
 8005e1a:	f043 0301 	orr.w	r3, r3, #1
 8005e1e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005e26:	f3bf 8f6f 	isb	sy
}
 8005e2a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005e2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e30:	f04f 0200 	mov.w	r2, #0
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	000a      	movs	r2, r1
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	68f9      	ldr	r1, [r7, #12]
 8005e3e:	3104      	adds	r1, #4
 8005e40:	4613      	mov	r3, r2
 8005e42:	600b      	str	r3, [r1, #0]
}
 8005e44:	bf00      	nop
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	40023c00 	.word	0x40023c00

08005e54 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005e5e:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <FLASH_Program_Word+0x40>)
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	4a0c      	ldr	r2, [pc, #48]	; (8005e94 <FLASH_Program_Word+0x40>)
 8005e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005e6a:	4b0a      	ldr	r3, [pc, #40]	; (8005e94 <FLASH_Program_Word+0x40>)
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	4a09      	ldr	r2, [pc, #36]	; (8005e94 <FLASH_Program_Word+0x40>)
 8005e70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e74:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005e76:	4b07      	ldr	r3, [pc, #28]	; (8005e94 <FLASH_Program_Word+0x40>)
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	4a06      	ldr	r2, [pc, #24]	; (8005e94 <FLASH_Program_Word+0x40>)
 8005e7c:	f043 0301 	orr.w	r3, r3, #1
 8005e80:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	601a      	str	r2, [r3, #0]
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	40023c00 	.word	0x40023c00

08005e98 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ea4:	4b0d      	ldr	r3, [pc, #52]	; (8005edc <FLASH_Program_HalfWord+0x44>)
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	4a0c      	ldr	r2, [pc, #48]	; (8005edc <FLASH_Program_HalfWord+0x44>)
 8005eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <FLASH_Program_HalfWord+0x44>)
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	4a09      	ldr	r2, [pc, #36]	; (8005edc <FLASH_Program_HalfWord+0x44>)
 8005eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005ebc:	4b07      	ldr	r3, [pc, #28]	; (8005edc <FLASH_Program_HalfWord+0x44>)
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	4a06      	ldr	r2, [pc, #24]	; (8005edc <FLASH_Program_HalfWord+0x44>)
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	887a      	ldrh	r2, [r7, #2]
 8005ecc:	801a      	strh	r2, [r3, #0]
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40023c00 	.word	0x40023c00

08005ee0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005eec:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <FLASH_Program_Byte+0x40>)
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	4a0b      	ldr	r2, [pc, #44]	; (8005f20 <FLASH_Program_Byte+0x40>)
 8005ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005ef8:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <FLASH_Program_Byte+0x40>)
 8005efa:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <FLASH_Program_Byte+0x40>)
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005f00:	4b07      	ldr	r3, [pc, #28]	; (8005f20 <FLASH_Program_Byte+0x40>)
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	4a06      	ldr	r2, [pc, #24]	; (8005f20 <FLASH_Program_Byte+0x40>)
 8005f06:	f043 0301 	orr.w	r3, r3, #1
 8005f0a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	78fa      	ldrb	r2, [r7, #3]
 8005f10:	701a      	strb	r2, [r3, #0]
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40023c00 	.word	0x40023c00

08005f24 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005f28:	4b2f      	ldr	r3, [pc, #188]	; (8005fe8 <FLASH_SetErrorCode+0xc4>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0310 	and.w	r3, r3, #16
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d008      	beq.n	8005f46 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005f34:	4b2d      	ldr	r3, [pc, #180]	; (8005fec <FLASH_SetErrorCode+0xc8>)
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	f043 0310 	orr.w	r3, r3, #16
 8005f3c:	4a2b      	ldr	r2, [pc, #172]	; (8005fec <FLASH_SetErrorCode+0xc8>)
 8005f3e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005f40:	4b29      	ldr	r3, [pc, #164]	; (8005fe8 <FLASH_SetErrorCode+0xc4>)
 8005f42:	2210      	movs	r2, #16
 8005f44:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005f46:	4b28      	ldr	r3, [pc, #160]	; (8005fe8 <FLASH_SetErrorCode+0xc4>)
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d008      	beq.n	8005f64 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005f52:	4b26      	ldr	r3, [pc, #152]	; (8005fec <FLASH_SetErrorCode+0xc8>)
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	f043 0308 	orr.w	r3, r3, #8
 8005f5a:	4a24      	ldr	r2, [pc, #144]	; (8005fec <FLASH_SetErrorCode+0xc8>)
 8005f5c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005f5e:	4b22      	ldr	r3, [pc, #136]	; (8005fe8 <FLASH_SetErrorCode+0xc4>)
 8005f60:	2220      	movs	r2, #32
 8005f62:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005f64:	4b20      	ldr	r3, [pc, #128]	; (8005fe8 <FLASH_SetErrorCode+0xc4>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d008      	beq.n	8005f82 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005f70:	4b1e      	ldr	r3, [pc, #120]	; (8005fec <FLASH_SetErrorCode+0xc8>)
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	f043 0304 	orr.w	r3, r3, #4
 8005f78:	4a1c      	ldr	r2, [pc, #112]	; (8005fec <FLASH_SetErrorCode+0xc8>)
 8005f7a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005f7c:	4b1a      	ldr	r3, [pc, #104]	; (8005fe8 <FLASH_SetErrorCode+0xc4>)
 8005f7e:	2240      	movs	r2, #64	; 0x40
 8005f80:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005f82:	4b19      	ldr	r3, [pc, #100]	; (8005fe8 <FLASH_SetErrorCode+0xc4>)
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d008      	beq.n	8005fa0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005f8e:	4b17      	ldr	r3, [pc, #92]	; (8005fec <FLASH_SetErrorCode+0xc8>)
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f043 0302 	orr.w	r3, r3, #2
 8005f96:	4a15      	ldr	r2, [pc, #84]	; (8005fec <FLASH_SetErrorCode+0xc8>)
 8005f98:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005f9a:	4b13      	ldr	r3, [pc, #76]	; (8005fe8 <FLASH_SetErrorCode+0xc4>)
 8005f9c:	2280      	movs	r2, #128	; 0x80
 8005f9e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005fa0:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <FLASH_SetErrorCode+0xc4>)
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d009      	beq.n	8005fc0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005fac:	4b0f      	ldr	r3, [pc, #60]	; (8005fec <FLASH_SetErrorCode+0xc8>)
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	4a0d      	ldr	r2, [pc, #52]	; (8005fec <FLASH_SetErrorCode+0xc8>)
 8005fb6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005fb8:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <FLASH_SetErrorCode+0xc4>)
 8005fba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fbe:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005fc0:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <FLASH_SetErrorCode+0xc4>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d008      	beq.n	8005fde <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005fcc:	4b07      	ldr	r3, [pc, #28]	; (8005fec <FLASH_SetErrorCode+0xc8>)
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	f043 0320 	orr.w	r3, r3, #32
 8005fd4:	4a05      	ldr	r2, [pc, #20]	; (8005fec <FLASH_SetErrorCode+0xc8>)
 8005fd6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005fd8:	4b03      	ldr	r3, [pc, #12]	; (8005fe8 <FLASH_SetErrorCode+0xc4>)
 8005fda:	2202      	movs	r2, #2
 8005fdc:	60da      	str	r2, [r3, #12]
  }
}
 8005fde:	bf00      	nop
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	40023c00 	.word	0x40023c00
 8005fec:	200091cc 	.word	0x200091cc

08005ff0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006002:	4b31      	ldr	r3, [pc, #196]	; (80060c8 <HAL_FLASHEx_Erase+0xd8>)
 8006004:	7e1b      	ldrb	r3, [r3, #24]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_FLASHEx_Erase+0x1e>
 800600a:	2302      	movs	r3, #2
 800600c:	e058      	b.n	80060c0 <HAL_FLASHEx_Erase+0xd0>
 800600e:	4b2e      	ldr	r3, [pc, #184]	; (80060c8 <HAL_FLASHEx_Erase+0xd8>)
 8006010:	2201      	movs	r2, #1
 8006012:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006014:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006018:	f7ff feaa 	bl	8005d70 <FLASH_WaitForLastOperation>
 800601c:	4603      	mov	r3, r0
 800601e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8006020:	7bfb      	ldrb	r3, [r7, #15]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d148      	bne.n	80060b8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800602c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d115      	bne.n	8006062 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	b2da      	uxtb	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	4619      	mov	r1, r3
 8006042:	4610      	mov	r0, r2
 8006044:	f000 f844 	bl	80060d0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006048:	f24c 3050 	movw	r0, #50000	; 0xc350
 800604c:	f7ff fe90 	bl	8005d70 <FLASH_WaitForLastOperation>
 8006050:	4603      	mov	r3, r0
 8006052:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006054:	4b1d      	ldr	r3, [pc, #116]	; (80060cc <HAL_FLASHEx_Erase+0xdc>)
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	4a1c      	ldr	r2, [pc, #112]	; (80060cc <HAL_FLASHEx_Erase+0xdc>)
 800605a:	f023 0304 	bic.w	r3, r3, #4
 800605e:	6113      	str	r3, [r2, #16]
 8006060:	e028      	b.n	80060b4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	60bb      	str	r3, [r7, #8]
 8006068:	e01c      	b.n	80060a4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	b2db      	uxtb	r3, r3
 8006070:	4619      	mov	r1, r3
 8006072:	68b8      	ldr	r0, [r7, #8]
 8006074:	f000 f850 	bl	8006118 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006078:	f24c 3050 	movw	r0, #50000	; 0xc350
 800607c:	f7ff fe78 	bl	8005d70 <FLASH_WaitForLastOperation>
 8006080:	4603      	mov	r3, r0
 8006082:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006084:	4b11      	ldr	r3, [pc, #68]	; (80060cc <HAL_FLASHEx_Erase+0xdc>)
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	4a10      	ldr	r2, [pc, #64]	; (80060cc <HAL_FLASHEx_Erase+0xdc>)
 800608a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800608e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8006090:	7bfb      	ldrb	r3, [r7, #15]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	601a      	str	r2, [r3, #0]
          break;
 800609c:	e00a      	b.n	80060b4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	3301      	adds	r3, #1
 80060a2:	60bb      	str	r3, [r7, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	4413      	add	r3, r2
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d3da      	bcc.n	800606a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80060b4:	f000 f878 	bl	80061a8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80060b8:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <HAL_FLASHEx_Erase+0xd8>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	761a      	strb	r2, [r3, #24]

  return status;
 80060be:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	200091cc 	.word	0x200091cc
 80060cc:	40023c00 	.word	0x40023c00

080060d0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	6039      	str	r1, [r7, #0]
 80060da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80060dc:	4b0d      	ldr	r3, [pc, #52]	; (8006114 <FLASH_MassErase+0x44>)
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	4a0c      	ldr	r2, [pc, #48]	; (8006114 <FLASH_MassErase+0x44>)
 80060e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80060e8:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <FLASH_MassErase+0x44>)
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	4a09      	ldr	r2, [pc, #36]	; (8006114 <FLASH_MassErase+0x44>)
 80060ee:	f043 0304 	orr.w	r3, r3, #4
 80060f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80060f4:	4b07      	ldr	r3, [pc, #28]	; (8006114 <FLASH_MassErase+0x44>)
 80060f6:	691a      	ldr	r2, [r3, #16]
 80060f8:	79fb      	ldrb	r3, [r7, #7]
 80060fa:	021b      	lsls	r3, r3, #8
 80060fc:	4313      	orrs	r3, r2
 80060fe:	4a05      	ldr	r2, [pc, #20]	; (8006114 <FLASH_MassErase+0x44>)
 8006100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006104:	6113      	str	r3, [r2, #16]
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40023c00 	.word	0x40023c00

08006118 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d102      	bne.n	8006134 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	e010      	b.n	8006156 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d103      	bne.n	8006142 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800613a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	e009      	b.n	8006156 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006142:	78fb      	ldrb	r3, [r7, #3]
 8006144:	2b02      	cmp	r3, #2
 8006146:	d103      	bne.n	8006150 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	e002      	b.n	8006156 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006150:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006154:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006156:	4b13      	ldr	r3, [pc, #76]	; (80061a4 <FLASH_Erase_Sector+0x8c>)
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	4a12      	ldr	r2, [pc, #72]	; (80061a4 <FLASH_Erase_Sector+0x8c>)
 800615c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006160:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006162:	4b10      	ldr	r3, [pc, #64]	; (80061a4 <FLASH_Erase_Sector+0x8c>)
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	490f      	ldr	r1, [pc, #60]	; (80061a4 <FLASH_Erase_Sector+0x8c>)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4313      	orrs	r3, r2
 800616c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800616e:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <FLASH_Erase_Sector+0x8c>)
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	4a0c      	ldr	r2, [pc, #48]	; (80061a4 <FLASH_Erase_Sector+0x8c>)
 8006174:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006178:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800617a:	4b0a      	ldr	r3, [pc, #40]	; (80061a4 <FLASH_Erase_Sector+0x8c>)
 800617c:	691a      	ldr	r2, [r3, #16]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	4313      	orrs	r3, r2
 8006184:	4a07      	ldr	r2, [pc, #28]	; (80061a4 <FLASH_Erase_Sector+0x8c>)
 8006186:	f043 0302 	orr.w	r3, r3, #2
 800618a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800618c:	4b05      	ldr	r3, [pc, #20]	; (80061a4 <FLASH_Erase_Sector+0x8c>)
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	4a04      	ldr	r2, [pc, #16]	; (80061a4 <FLASH_Erase_Sector+0x8c>)
 8006192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006196:	6113      	str	r3, [r2, #16]
}
 8006198:	bf00      	nop
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	40023c00 	.word	0x40023c00

080061a8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80061ac:	4b20      	ldr	r3, [pc, #128]	; (8006230 <FLASH_FlushCaches+0x88>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d017      	beq.n	80061e8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80061b8:	4b1d      	ldr	r3, [pc, #116]	; (8006230 <FLASH_FlushCaches+0x88>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1c      	ldr	r2, [pc, #112]	; (8006230 <FLASH_FlushCaches+0x88>)
 80061be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061c2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80061c4:	4b1a      	ldr	r3, [pc, #104]	; (8006230 <FLASH_FlushCaches+0x88>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a19      	ldr	r2, [pc, #100]	; (8006230 <FLASH_FlushCaches+0x88>)
 80061ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	4b17      	ldr	r3, [pc, #92]	; (8006230 <FLASH_FlushCaches+0x88>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a16      	ldr	r2, [pc, #88]	; (8006230 <FLASH_FlushCaches+0x88>)
 80061d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061da:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80061dc:	4b14      	ldr	r3, [pc, #80]	; (8006230 <FLASH_FlushCaches+0x88>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a13      	ldr	r2, [pc, #76]	; (8006230 <FLASH_FlushCaches+0x88>)
 80061e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061e6:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80061e8:	4b11      	ldr	r3, [pc, #68]	; (8006230 <FLASH_FlushCaches+0x88>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d017      	beq.n	8006224 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80061f4:	4b0e      	ldr	r3, [pc, #56]	; (8006230 <FLASH_FlushCaches+0x88>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a0d      	ldr	r2, [pc, #52]	; (8006230 <FLASH_FlushCaches+0x88>)
 80061fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061fe:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006200:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <FLASH_FlushCaches+0x88>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a0a      	ldr	r2, [pc, #40]	; (8006230 <FLASH_FlushCaches+0x88>)
 8006206:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	4b08      	ldr	r3, [pc, #32]	; (8006230 <FLASH_FlushCaches+0x88>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a07      	ldr	r2, [pc, #28]	; (8006230 <FLASH_FlushCaches+0x88>)
 8006212:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006216:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006218:	4b05      	ldr	r3, [pc, #20]	; (8006230 <FLASH_FlushCaches+0x88>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a04      	ldr	r2, [pc, #16]	; (8006230 <FLASH_FlushCaches+0x88>)
 800621e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006222:	6013      	str	r3, [r2, #0]
  }
}
 8006224:	bf00      	nop
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40023c00 	.word	0x40023c00

08006234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006234:	b480      	push	{r7}
 8006236:	b089      	sub	sp, #36	; 0x24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800623e:	2300      	movs	r3, #0
 8006240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006242:	2300      	movs	r3, #0
 8006244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006246:	2300      	movs	r3, #0
 8006248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800624a:	2300      	movs	r3, #0
 800624c:	61fb      	str	r3, [r7, #28]
 800624e:	e159      	b.n	8006504 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006250:	2201      	movs	r2, #1
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	fa02 f303 	lsl.w	r3, r2, r3
 8006258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4013      	ands	r3, r2
 8006262:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	429a      	cmp	r2, r3
 800626a:	f040 8148 	bne.w	80064fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b01      	cmp	r3, #1
 8006278:	d005      	beq.n	8006286 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006282:	2b02      	cmp	r3, #2
 8006284:	d130      	bne.n	80062e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	2203      	movs	r2, #3
 8006292:	fa02 f303 	lsl.w	r3, r2, r3
 8006296:	43db      	mvns	r3, r3
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	4013      	ands	r3, r2
 800629c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	fa02 f303 	lsl.w	r3, r2, r3
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062bc:	2201      	movs	r2, #1
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	fa02 f303 	lsl.w	r3, r2, r3
 80062c4:	43db      	mvns	r3, r3
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	4013      	ands	r3, r2
 80062ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	091b      	lsrs	r3, r3, #4
 80062d2:	f003 0201 	and.w	r2, r3, #1
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	fa02 f303 	lsl.w	r3, r2, r3
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	4313      	orrs	r3, r2
 80062e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f003 0303 	and.w	r3, r3, #3
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d017      	beq.n	8006324 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	2203      	movs	r2, #3
 8006300:	fa02 f303 	lsl.w	r3, r2, r3
 8006304:	43db      	mvns	r3, r3
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	4013      	ands	r3, r2
 800630a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	fa02 f303 	lsl.w	r3, r2, r3
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	4313      	orrs	r3, r2
 800631c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f003 0303 	and.w	r3, r3, #3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d123      	bne.n	8006378 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	08da      	lsrs	r2, r3, #3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3208      	adds	r2, #8
 8006338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800633c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	f003 0307 	and.w	r3, r3, #7
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	220f      	movs	r2, #15
 8006348:	fa02 f303 	lsl.w	r3, r2, r3
 800634c:	43db      	mvns	r3, r3
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	4013      	ands	r3, r2
 8006352:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	691a      	ldr	r2, [r3, #16]
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	fa02 f303 	lsl.w	r3, r2, r3
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	4313      	orrs	r3, r2
 8006368:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	08da      	lsrs	r2, r3, #3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	3208      	adds	r2, #8
 8006372:	69b9      	ldr	r1, [r7, #24]
 8006374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	2203      	movs	r2, #3
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	43db      	mvns	r3, r3
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	4013      	ands	r3, r2
 800638e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f003 0203 	and.w	r2, r3, #3
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	fa02 f303 	lsl.w	r3, r2, r3
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 80a2 	beq.w	80064fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	4b57      	ldr	r3, [pc, #348]	; (800651c <HAL_GPIO_Init+0x2e8>)
 80063c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c2:	4a56      	ldr	r2, [pc, #344]	; (800651c <HAL_GPIO_Init+0x2e8>)
 80063c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063c8:	6453      	str	r3, [r2, #68]	; 0x44
 80063ca:	4b54      	ldr	r3, [pc, #336]	; (800651c <HAL_GPIO_Init+0x2e8>)
 80063cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063d6:	4a52      	ldr	r2, [pc, #328]	; (8006520 <HAL_GPIO_Init+0x2ec>)
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	089b      	lsrs	r3, r3, #2
 80063dc:	3302      	adds	r3, #2
 80063de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	220f      	movs	r2, #15
 80063ee:	fa02 f303 	lsl.w	r3, r2, r3
 80063f2:	43db      	mvns	r3, r3
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	4013      	ands	r3, r2
 80063f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a49      	ldr	r2, [pc, #292]	; (8006524 <HAL_GPIO_Init+0x2f0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d019      	beq.n	8006436 <HAL_GPIO_Init+0x202>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a48      	ldr	r2, [pc, #288]	; (8006528 <HAL_GPIO_Init+0x2f4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d013      	beq.n	8006432 <HAL_GPIO_Init+0x1fe>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a47      	ldr	r2, [pc, #284]	; (800652c <HAL_GPIO_Init+0x2f8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00d      	beq.n	800642e <HAL_GPIO_Init+0x1fa>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a46      	ldr	r2, [pc, #280]	; (8006530 <HAL_GPIO_Init+0x2fc>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d007      	beq.n	800642a <HAL_GPIO_Init+0x1f6>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a45      	ldr	r2, [pc, #276]	; (8006534 <HAL_GPIO_Init+0x300>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d101      	bne.n	8006426 <HAL_GPIO_Init+0x1f2>
 8006422:	2304      	movs	r3, #4
 8006424:	e008      	b.n	8006438 <HAL_GPIO_Init+0x204>
 8006426:	2307      	movs	r3, #7
 8006428:	e006      	b.n	8006438 <HAL_GPIO_Init+0x204>
 800642a:	2303      	movs	r3, #3
 800642c:	e004      	b.n	8006438 <HAL_GPIO_Init+0x204>
 800642e:	2302      	movs	r3, #2
 8006430:	e002      	b.n	8006438 <HAL_GPIO_Init+0x204>
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <HAL_GPIO_Init+0x204>
 8006436:	2300      	movs	r3, #0
 8006438:	69fa      	ldr	r2, [r7, #28]
 800643a:	f002 0203 	and.w	r2, r2, #3
 800643e:	0092      	lsls	r2, r2, #2
 8006440:	4093      	lsls	r3, r2
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	4313      	orrs	r3, r2
 8006446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006448:	4935      	ldr	r1, [pc, #212]	; (8006520 <HAL_GPIO_Init+0x2ec>)
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	089b      	lsrs	r3, r3, #2
 800644e:	3302      	adds	r3, #2
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006456:	4b38      	ldr	r3, [pc, #224]	; (8006538 <HAL_GPIO_Init+0x304>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	43db      	mvns	r3, r3
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	4013      	ands	r3, r2
 8006464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800647a:	4a2f      	ldr	r2, [pc, #188]	; (8006538 <HAL_GPIO_Init+0x304>)
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006480:	4b2d      	ldr	r3, [pc, #180]	; (8006538 <HAL_GPIO_Init+0x304>)
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	43db      	mvns	r3, r3
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	4013      	ands	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064a4:	4a24      	ldr	r2, [pc, #144]	; (8006538 <HAL_GPIO_Init+0x304>)
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064aa:	4b23      	ldr	r3, [pc, #140]	; (8006538 <HAL_GPIO_Init+0x304>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	43db      	mvns	r3, r3
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	4013      	ands	r3, r2
 80064b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064ce:	4a1a      	ldr	r2, [pc, #104]	; (8006538 <HAL_GPIO_Init+0x304>)
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064d4:	4b18      	ldr	r3, [pc, #96]	; (8006538 <HAL_GPIO_Init+0x304>)
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	43db      	mvns	r3, r3
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	4013      	ands	r3, r2
 80064e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064f8:	4a0f      	ldr	r2, [pc, #60]	; (8006538 <HAL_GPIO_Init+0x304>)
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	3301      	adds	r3, #1
 8006502:	61fb      	str	r3, [r7, #28]
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	2b0f      	cmp	r3, #15
 8006508:	f67f aea2 	bls.w	8006250 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800650c:	bf00      	nop
 800650e:	bf00      	nop
 8006510:	3724      	adds	r7, #36	; 0x24
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	40023800 	.word	0x40023800
 8006520:	40013800 	.word	0x40013800
 8006524:	40020000 	.word	0x40020000
 8006528:	40020400 	.word	0x40020400
 800652c:	40020800 	.word	0x40020800
 8006530:	40020c00 	.word	0x40020c00
 8006534:	40021000 	.word	0x40021000
 8006538:	40013c00 	.word	0x40013c00

0800653c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006546:	2300      	movs	r3, #0
 8006548:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800654e:	2300      	movs	r3, #0
 8006550:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006552:	2300      	movs	r3, #0
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	e0bb      	b.n	80066d0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006558:	2201      	movs	r2, #1
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	fa02 f303 	lsl.w	r3, r2, r3
 8006560:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	4013      	ands	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	429a      	cmp	r2, r3
 8006570:	f040 80ab 	bne.w	80066ca <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006574:	4a5c      	ldr	r2, [pc, #368]	; (80066e8 <HAL_GPIO_DeInit+0x1ac>)
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	089b      	lsrs	r3, r3, #2
 800657a:	3302      	adds	r3, #2
 800657c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006580:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f003 0303 	and.w	r3, r3, #3
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	220f      	movs	r2, #15
 800658c:	fa02 f303 	lsl.w	r3, r2, r3
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	4013      	ands	r3, r2
 8006594:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a54      	ldr	r2, [pc, #336]	; (80066ec <HAL_GPIO_DeInit+0x1b0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d019      	beq.n	80065d2 <HAL_GPIO_DeInit+0x96>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a53      	ldr	r2, [pc, #332]	; (80066f0 <HAL_GPIO_DeInit+0x1b4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <HAL_GPIO_DeInit+0x92>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a52      	ldr	r2, [pc, #328]	; (80066f4 <HAL_GPIO_DeInit+0x1b8>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00d      	beq.n	80065ca <HAL_GPIO_DeInit+0x8e>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a51      	ldr	r2, [pc, #324]	; (80066f8 <HAL_GPIO_DeInit+0x1bc>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d007      	beq.n	80065c6 <HAL_GPIO_DeInit+0x8a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a50      	ldr	r2, [pc, #320]	; (80066fc <HAL_GPIO_DeInit+0x1c0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d101      	bne.n	80065c2 <HAL_GPIO_DeInit+0x86>
 80065be:	2304      	movs	r3, #4
 80065c0:	e008      	b.n	80065d4 <HAL_GPIO_DeInit+0x98>
 80065c2:	2307      	movs	r3, #7
 80065c4:	e006      	b.n	80065d4 <HAL_GPIO_DeInit+0x98>
 80065c6:	2303      	movs	r3, #3
 80065c8:	e004      	b.n	80065d4 <HAL_GPIO_DeInit+0x98>
 80065ca:	2302      	movs	r3, #2
 80065cc:	e002      	b.n	80065d4 <HAL_GPIO_DeInit+0x98>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <HAL_GPIO_DeInit+0x98>
 80065d2:	2300      	movs	r3, #0
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	f002 0203 	and.w	r2, r2, #3
 80065da:	0092      	lsls	r2, r2, #2
 80065dc:	4093      	lsls	r3, r2
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d132      	bne.n	800664a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80065e4:	4b46      	ldr	r3, [pc, #280]	; (8006700 <HAL_GPIO_DeInit+0x1c4>)
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	43db      	mvns	r3, r3
 80065ec:	4944      	ldr	r1, [pc, #272]	; (8006700 <HAL_GPIO_DeInit+0x1c4>)
 80065ee:	4013      	ands	r3, r2
 80065f0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80065f2:	4b43      	ldr	r3, [pc, #268]	; (8006700 <HAL_GPIO_DeInit+0x1c4>)
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	43db      	mvns	r3, r3
 80065fa:	4941      	ldr	r1, [pc, #260]	; (8006700 <HAL_GPIO_DeInit+0x1c4>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006600:	4b3f      	ldr	r3, [pc, #252]	; (8006700 <HAL_GPIO_DeInit+0x1c4>)
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	43db      	mvns	r3, r3
 8006608:	493d      	ldr	r1, [pc, #244]	; (8006700 <HAL_GPIO_DeInit+0x1c4>)
 800660a:	4013      	ands	r3, r2
 800660c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800660e:	4b3c      	ldr	r3, [pc, #240]	; (8006700 <HAL_GPIO_DeInit+0x1c4>)
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	43db      	mvns	r3, r3
 8006616:	493a      	ldr	r1, [pc, #232]	; (8006700 <HAL_GPIO_DeInit+0x1c4>)
 8006618:	4013      	ands	r3, r2
 800661a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	220f      	movs	r2, #15
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800662c:	4a2e      	ldr	r2, [pc, #184]	; (80066e8 <HAL_GPIO_DeInit+0x1ac>)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	089b      	lsrs	r3, r3, #2
 8006632:	3302      	adds	r3, #2
 8006634:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	43da      	mvns	r2, r3
 800663c:	482a      	ldr	r0, [pc, #168]	; (80066e8 <HAL_GPIO_DeInit+0x1ac>)
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	089b      	lsrs	r3, r3, #2
 8006642:	400a      	ands	r2, r1
 8006644:	3302      	adds	r3, #2
 8006646:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	2103      	movs	r1, #3
 8006654:	fa01 f303 	lsl.w	r3, r1, r3
 8006658:	43db      	mvns	r3, r3
 800665a:	401a      	ands	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	08da      	lsrs	r2, r3, #3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3208      	adds	r2, #8
 8006668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f003 0307 	and.w	r3, r3, #7
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	220f      	movs	r2, #15
 8006676:	fa02 f303 	lsl.w	r3, r2, r3
 800667a:	43db      	mvns	r3, r3
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	08d2      	lsrs	r2, r2, #3
 8006680:	4019      	ands	r1, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3208      	adds	r2, #8
 8006686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	2103      	movs	r1, #3
 8006694:	fa01 f303 	lsl.w	r3, r1, r3
 8006698:	43db      	mvns	r3, r3
 800669a:	401a      	ands	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	2101      	movs	r1, #1
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	fa01 f303 	lsl.w	r3, r1, r3
 80066ac:	43db      	mvns	r3, r3
 80066ae:	401a      	ands	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	2103      	movs	r1, #3
 80066be:	fa01 f303 	lsl.w	r3, r1, r3
 80066c2:	43db      	mvns	r3, r3
 80066c4:	401a      	ands	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	3301      	adds	r3, #1
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	2b0f      	cmp	r3, #15
 80066d4:	f67f af40 	bls.w	8006558 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80066d8:	bf00      	nop
 80066da:	bf00      	nop
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	40013800 	.word	0x40013800
 80066ec:	40020000 	.word	0x40020000
 80066f0:	40020400 	.word	0x40020400
 80066f4:	40020800 	.word	0x40020800
 80066f8:	40020c00 	.word	0x40020c00
 80066fc:	40021000 	.word	0x40021000
 8006700:	40013c00 	.word	0x40013c00

08006704 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691a      	ldr	r2, [r3, #16]
 8006714:	887b      	ldrh	r3, [r7, #2]
 8006716:	4013      	ands	r3, r2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800671c:	2301      	movs	r3, #1
 800671e:	73fb      	strb	r3, [r7, #15]
 8006720:	e001      	b.n	8006726 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006722:	2300      	movs	r3, #0
 8006724:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006726:	7bfb      	ldrb	r3, [r7, #15]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	807b      	strh	r3, [r7, #2]
 8006740:	4613      	mov	r3, r2
 8006742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006744:	787b      	ldrb	r3, [r7, #1]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800674a:	887a      	ldrh	r2, [r7, #2]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006750:	e003      	b.n	800675a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006752:	887b      	ldrh	r3, [r7, #2]
 8006754:	041a      	lsls	r2, r3, #16
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	619a      	str	r2, [r3, #24]
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006766:	b480      	push	{r7}
 8006768:	b085      	sub	sp, #20
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	460b      	mov	r3, r1
 8006770:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006778:	887a      	ldrh	r2, [r7, #2]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4013      	ands	r3, r2
 800677e:	041a      	lsls	r2, r3, #16
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	43d9      	mvns	r1, r3
 8006784:	887b      	ldrh	r3, [r7, #2]
 8006786:	400b      	ands	r3, r1
 8006788:	431a      	orrs	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	619a      	str	r2, [r3, #24]
}
 800678e:	bf00      	nop
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
	...

0800679c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e12b      	b.n	8006a06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d106      	bne.n	80067c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fc fd9e 	bl	8003304 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2224      	movs	r2, #36	; 0x24
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0201 	bic.w	r2, r2, #1
 80067de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006800:	f003 f95a 	bl	8009ab8 <HAL_RCC_GetPCLK1Freq>
 8006804:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	4a81      	ldr	r2, [pc, #516]	; (8006a10 <HAL_I2C_Init+0x274>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d807      	bhi.n	8006820 <HAL_I2C_Init+0x84>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4a80      	ldr	r2, [pc, #512]	; (8006a14 <HAL_I2C_Init+0x278>)
 8006814:	4293      	cmp	r3, r2
 8006816:	bf94      	ite	ls
 8006818:	2301      	movls	r3, #1
 800681a:	2300      	movhi	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	e006      	b.n	800682e <HAL_I2C_Init+0x92>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4a7d      	ldr	r2, [pc, #500]	; (8006a18 <HAL_I2C_Init+0x27c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	bf94      	ite	ls
 8006828:	2301      	movls	r3, #1
 800682a:	2300      	movhi	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e0e7      	b.n	8006a06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4a78      	ldr	r2, [pc, #480]	; (8006a1c <HAL_I2C_Init+0x280>)
 800683a:	fba2 2303 	umull	r2, r3, r2, r3
 800683e:	0c9b      	lsrs	r3, r3, #18
 8006840:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	430a      	orrs	r2, r1
 8006854:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	4a6a      	ldr	r2, [pc, #424]	; (8006a10 <HAL_I2C_Init+0x274>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d802      	bhi.n	8006870 <HAL_I2C_Init+0xd4>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	3301      	adds	r3, #1
 800686e:	e009      	b.n	8006884 <HAL_I2C_Init+0xe8>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006876:	fb02 f303 	mul.w	r3, r2, r3
 800687a:	4a69      	ldr	r2, [pc, #420]	; (8006a20 <HAL_I2C_Init+0x284>)
 800687c:	fba2 2303 	umull	r2, r3, r2, r3
 8006880:	099b      	lsrs	r3, r3, #6
 8006882:	3301      	adds	r3, #1
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6812      	ldr	r2, [r2, #0]
 8006888:	430b      	orrs	r3, r1
 800688a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006896:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	495c      	ldr	r1, [pc, #368]	; (8006a10 <HAL_I2C_Init+0x274>)
 80068a0:	428b      	cmp	r3, r1
 80068a2:	d819      	bhi.n	80068d8 <HAL_I2C_Init+0x13c>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	1e59      	subs	r1, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80068b2:	1c59      	adds	r1, r3, #1
 80068b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80068b8:	400b      	ands	r3, r1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <HAL_I2C_Init+0x138>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	1e59      	subs	r1, r3, #1
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	005b      	lsls	r3, r3, #1
 80068c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80068cc:	3301      	adds	r3, #1
 80068ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068d2:	e051      	b.n	8006978 <HAL_I2C_Init+0x1dc>
 80068d4:	2304      	movs	r3, #4
 80068d6:	e04f      	b.n	8006978 <HAL_I2C_Init+0x1dc>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d111      	bne.n	8006904 <HAL_I2C_Init+0x168>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	1e58      	subs	r0, r3, #1
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6859      	ldr	r1, [r3, #4]
 80068e8:	460b      	mov	r3, r1
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	440b      	add	r3, r1
 80068ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80068f2:	3301      	adds	r3, #1
 80068f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bf0c      	ite	eq
 80068fc:	2301      	moveq	r3, #1
 80068fe:	2300      	movne	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	e012      	b.n	800692a <HAL_I2C_Init+0x18e>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	1e58      	subs	r0, r3, #1
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6859      	ldr	r1, [r3, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	0099      	lsls	r1, r3, #2
 8006914:	440b      	add	r3, r1
 8006916:	fbb0 f3f3 	udiv	r3, r0, r3
 800691a:	3301      	adds	r3, #1
 800691c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006920:	2b00      	cmp	r3, #0
 8006922:	bf0c      	ite	eq
 8006924:	2301      	moveq	r3, #1
 8006926:	2300      	movne	r3, #0
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <HAL_I2C_Init+0x196>
 800692e:	2301      	movs	r3, #1
 8006930:	e022      	b.n	8006978 <HAL_I2C_Init+0x1dc>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10e      	bne.n	8006958 <HAL_I2C_Init+0x1bc>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	1e58      	subs	r0, r3, #1
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6859      	ldr	r1, [r3, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	440b      	add	r3, r1
 8006948:	fbb0 f3f3 	udiv	r3, r0, r3
 800694c:	3301      	adds	r3, #1
 800694e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006956:	e00f      	b.n	8006978 <HAL_I2C_Init+0x1dc>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	1e58      	subs	r0, r3, #1
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6859      	ldr	r1, [r3, #4]
 8006960:	460b      	mov	r3, r1
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	440b      	add	r3, r1
 8006966:	0099      	lsls	r1, r3, #2
 8006968:	440b      	add	r3, r1
 800696a:	fbb0 f3f3 	udiv	r3, r0, r3
 800696e:	3301      	adds	r3, #1
 8006970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006978:	6879      	ldr	r1, [r7, #4]
 800697a:	6809      	ldr	r1, [r1, #0]
 800697c:	4313      	orrs	r3, r2
 800697e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	69da      	ldr	r2, [r3, #28]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	431a      	orrs	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80069a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6911      	ldr	r1, [r2, #16]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	68d2      	ldr	r2, [r2, #12]
 80069b2:	4311      	orrs	r1, r2
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6812      	ldr	r2, [r2, #0]
 80069b8:	430b      	orrs	r3, r1
 80069ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	695a      	ldr	r2, [r3, #20]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	431a      	orrs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0201 	orr.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2220      	movs	r2, #32
 80069f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	000186a0 	.word	0x000186a0
 8006a14:	001e847f 	.word	0x001e847f
 8006a18:	003d08ff 	.word	0x003d08ff
 8006a1c:	431bde83 	.word	0x431bde83
 8006a20:	10624dd3 	.word	0x10624dd3

08006a24 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e021      	b.n	8006a7a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2224      	movs	r2, #36	; 0x24
 8006a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 0201 	bic.w	r2, r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7fc fe3c 	bl	80036cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08c      	sub	sp, #48	; 0x30
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	4608      	mov	r0, r1
 8006a8e:	4611      	mov	r1, r2
 8006a90:	461a      	mov	r2, r3
 8006a92:	4603      	mov	r3, r0
 8006a94:	817b      	strh	r3, [r7, #10]
 8006a96:	460b      	mov	r3, r1
 8006a98:	813b      	strh	r3, [r7, #8]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a9e:	f7fd feb3 	bl	8004808 <HAL_GetTick>
 8006aa2:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	f040 8168 	bne.w	8006d86 <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006ab6:	4b98      	ldr	r3, [pc, #608]	; (8006d18 <HAL_I2C_Mem_Read_DMA+0x294>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	08db      	lsrs	r3, r3, #3
 8006abc:	4a97      	ldr	r2, [pc, #604]	; (8006d1c <HAL_I2C_Mem_Read_DMA+0x298>)
 8006abe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac2:	0a1a      	lsrs	r2, r3, #8
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	009a      	lsls	r2, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d116      	bne.n	8006b0a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af6:	f043 0220 	orr.w	r2, r3, #32
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e13e      	b.n	8006d88 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d0db      	beq.n	8006ad0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d101      	bne.n	8006b26 <HAL_I2C_Mem_Read_DMA+0xa2>
 8006b22:	2302      	movs	r3, #2
 8006b24:	e130      	b.n	8006d88 <HAL_I2C_Mem_Read_DMA+0x304>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d007      	beq.n	8006b4c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f042 0201 	orr.w	r2, r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2222      	movs	r2, #34	; 0x22
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2240      	movs	r2, #64	; 0x40
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4a65      	ldr	r2, [pc, #404]	; (8006d20 <HAL_I2C_Mem_Read_DMA+0x29c>)
 8006b8c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 80ca 	beq.w	8006d2c <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d02c      	beq.n	8006bfa <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	4a5f      	ldr	r2, [pc, #380]	; (8006d24 <HAL_I2C_Mem_Read_DMA+0x2a0>)
 8006ba6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	4a5e      	ldr	r2, [pc, #376]	; (8006d28 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 8006bae:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	2200      	movs	r2, #0
 8006bce:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3310      	adds	r3, #16
 8006bda:	4619      	mov	r1, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	461a      	mov	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be6:	f7fe fcdf 	bl	80055a8 <HAL_DMA_Start_IT>
 8006bea:	4603      	mov	r3, r0
 8006bec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006bf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d17b      	bne.n	8006cf0 <HAL_I2C_Mem_Read_DMA+0x26c>
 8006bf8:	e013      	b.n	8006c22 <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e0b2      	b.n	8006d88 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006c22:	88f8      	ldrh	r0, [r7, #6]
 8006c24:	893a      	ldrh	r2, [r7, #8]
 8006c26:	8979      	ldrh	r1, [r7, #10]
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	9301      	str	r3, [sp, #4]
 8006c2c:	2323      	movs	r3, #35	; 0x23
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4603      	mov	r3, r0
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f001 feea 	bl	8008a0c <I2C_RequestMemoryRead>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d023      	beq.n	8006c86 <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe fd78 	bl	8005738 <HAL_DMA_Abort_IT>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c52:	2200      	movs	r2, #0
 8006c54:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c64:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0201 	bic.w	r2, r2, #1
 8006c80:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e080      	b.n	8006d88 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d108      	bne.n	8006ca0 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	e007      	b.n	8006cb0 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cae:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	61bb      	str	r3, [r7, #24]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	61bb      	str	r3, [r7, #24]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cdc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cec:	605a      	str	r2, [r3, #4]
 8006cee:	e048      	b.n	8006d82 <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	f043 0210 	orr.w	r2, r3, #16
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e037      	b.n	8006d88 <HAL_I2C_Mem_Read_DMA+0x304>
 8006d18:	20000008 	.word	0x20000008
 8006d1c:	14f8b589 	.word	0x14f8b589
 8006d20:	ffff0000 	.word	0xffff0000
 8006d24:	08008bdd 	.word	0x08008bdd
 8006d28:	08008d87 	.word	0x08008d87
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006d2c:	88f8      	ldrh	r0, [r7, #6]
 8006d2e:	893a      	ldrh	r2, [r7, #8]
 8006d30:	8979      	ldrh	r1, [r7, #10]
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	9301      	str	r3, [sp, #4]
 8006d36:	2323      	movs	r3, #35	; 0x23
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f001 fe65 	bl	8008a0c <I2C_RequestMemoryRead>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e01d      	b.n	8006d88 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d70:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	e000      	b.n	8006d88 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 8006d86:	2302      	movs	r3, #2
  }
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3728      	adds	r7, #40	; 0x28
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	603b      	str	r3, [r7, #0]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006dac:	2b28      	cmp	r3, #40	; 0x28
 8006dae:	f040 811e 	bne.w	8006fee <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 8006db8:	88fb      	ldrh	r3, [r7, #6]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e116      	b.n	8006ff0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d101      	bne.n	8006dd0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	e10f      	b.n	8006ff0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006de6:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b2a      	cmp	r3, #42	; 0x2a
 8006df2:	d127      	bne.n	8006e44 <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e02:	d14c      	bne.n	8006e9e <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d048      	beq.n	8006e9e <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e1a:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e20:	4a75      	ldr	r2, [pc, #468]	; (8006ff8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
 8006e22:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fe fc85 	bl	8005738 <HAL_DMA_Abort_IT>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d034      	beq.n	8006e9e <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e3e:	4610      	mov	r0, r2
 8006e40:	4798      	blx	r3
 8006e42:	e02c      	b.n	8006e9e <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b29      	cmp	r3, #41	; 0x29
 8006e4e:	d126      	bne.n	8006e9e <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e5e:	d11e      	bne.n	8006e9e <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e6e:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d012      	beq.n	8006e9e <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7c:	4a5e      	ldr	r2, [pc, #376]	; (8006ff8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
 8006e7e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fe fc57 	bl	8005738 <HAL_DMA_Abort_IT>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d006      	beq.n	8006e9e <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d007      	beq.n	8006ebc <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f042 0201 	orr.w	r2, r2, #1
 8006eba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006eca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2229      	movs	r2, #41	; 0x29
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	88fa      	ldrh	r2, [r7, #6]
 8006eec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d022      	beq.n	8006f4c <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0a:	4a3c      	ldr	r2, [pc, #240]	; (8006ffc <HAL_I2C_Slave_Seq_Transmit_DMA+0x26c>)
 8006f0c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f12:	4a3b      	ldr	r2, [pc, #236]	; (8007000 <HAL_I2C_Slave_Seq_Transmit_DMA+0x270>)
 8006f14:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f22:	2200      	movs	r2, #0
 8006f24:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	4619      	mov	r1, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3310      	adds	r3, #16
 8006f36:	461a      	mov	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f3c:	f7fe fb34 	bl	80055a8 <HAL_DMA_Start_IT>
 8006f40:	4603      	mov	r3, r0
 8006f42:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8006f44:	7dfb      	ldrb	r3, [r7, #23]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d13d      	bne.n	8006fc6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 8006f4a:	e013      	b.n	8006f74 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2228      	movs	r2, #40	; 0x28
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e03d      	b.n	8006ff0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f82:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f84:	2300      	movs	r3, #0
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	613b      	str	r3, [r7, #16]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	613b      	str	r3, [r7, #16]
 8006f98:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006fb0:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fc0:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e014      	b.n	8006ff0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	f043 0210 	orr.w	r2, r3, #16
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 8006fee:	2302      	movs	r3, #2
  }
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	08008e01 	.word	0x08008e01
 8006ffc:	08008bdd 	.word	0x08008bdd
 8007000:	08008d87 	.word	0x08008d87

08007004 <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	603b      	str	r3, [r7, #0]
 8007010:	4613      	mov	r3, r2
 8007012:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800701a:	b2db      	uxtb	r3, r3
 800701c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007020:	2b28      	cmp	r3, #40	; 0x28
 8007022:	f040 811e 	bne.w	8007262 <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 800702c:	88fb      	ldrh	r3, [r7, #6]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e116      	b.n	8007264 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800703c:	2b01      	cmp	r3, #1
 800703e:	d101      	bne.n	8007044 <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 8007040:	2302      	movs	r3, #2
 8007042:	e10f      	b.n	8007264 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800705a:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b2a      	cmp	r3, #42	; 0x2a
 8007066:	d127      	bne.n	80070b8 <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007076:	d14c      	bne.n	8007112 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707c:	2b00      	cmp	r3, #0
 800707e:	d048      	beq.n	8007112 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800708e:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007094:	4a75      	ldr	r2, [pc, #468]	; (800726c <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 8007096:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	4618      	mov	r0, r3
 800709e:	f7fe fb4b 	bl	8005738 <HAL_DMA_Abort_IT>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d034      	beq.n	8007112 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070b2:	4610      	mov	r0, r2
 80070b4:	4798      	blx	r3
 80070b6:	e02c      	b.n	8007112 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b29      	cmp	r3, #41	; 0x29
 80070c2:	d126      	bne.n	8007112 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070d2:	d11e      	bne.n	8007112 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070e2:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d012      	beq.n	8007112 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f0:	4a5e      	ldr	r2, [pc, #376]	; (800726c <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 80070f2:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7fe fb1d 	bl	8005738 <HAL_DMA_Abort_IT>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d006      	beq.n	8007112 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800710e:	4610      	mov	r0, r2
 8007110:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b01      	cmp	r3, #1
 800711e:	d007      	beq.n	8007130 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0201 	orr.w	r2, r2, #1
 800712e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800713e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	222a      	movs	r2, #42	; 0x2a
 8007144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2220      	movs	r2, #32
 800714c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	88fa      	ldrh	r2, [r7, #6]
 8007160:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007166:	b29a      	uxth	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007176:	2b00      	cmp	r3, #0
 8007178:	d022      	beq.n	80071c0 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717e:	4a3c      	ldr	r2, [pc, #240]	; (8007270 <HAL_I2C_Slave_Seq_Receive_DMA+0x26c>)
 8007180:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007186:	4a3b      	ldr	r2, [pc, #236]	; (8007274 <HAL_I2C_Slave_Seq_Receive_DMA+0x270>)
 8007188:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718e:	2200      	movs	r2, #0
 8007190:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007196:	2200      	movs	r2, #0
 8007198:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3310      	adds	r3, #16
 80071a4:	4619      	mov	r1, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071aa:	461a      	mov	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b0:	f7fe f9fa 	bl	80055a8 <HAL_DMA_Start_IT>
 80071b4:	4603      	mov	r3, r0
 80071b6:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d13d      	bne.n	800723a <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 80071be:	e013      	b.n	80071e8 <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2228      	movs	r2, #40	; 0x28
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e03d      	b.n	8007264 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071f6:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071f8:	2300      	movs	r3, #0
 80071fa:	613b      	str	r3, [r7, #16]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	613b      	str	r3, [r7, #16]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	613b      	str	r3, [r7, #16]
 800720c:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007224:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007234:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	e014      	b.n	8007264 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2220      	movs	r2, #32
 800723e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724e:	f043 0210 	orr.w	r2, r3, #16
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e000      	b.n	8007264 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 8007262:	2302      	movs	r3, #2
  }
}
 8007264:	4618      	mov	r0, r3
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	08008e01 	.word	0x08008e01
 8007270:	08008bdd 	.word	0x08008bdd
 8007274:	08008d87 	.word	0x08008d87

08007278 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b20      	cmp	r3, #32
 800728a:	d124      	bne.n	80072d6 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2228      	movs	r2, #40	; 0x28
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d007      	beq.n	80072b2 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0201 	orr.w	r2, r2, #1
 80072b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072c0:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80072d0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	e000      	b.n	80072d8 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80072d6:	2302      	movs	r3, #2
  }
}
 80072d8:	4618      	mov	r0, r3
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b088      	sub	sp, #32
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007304:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800730c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800730e:	7bfb      	ldrb	r3, [r7, #15]
 8007310:	2b10      	cmp	r3, #16
 8007312:	d003      	beq.n	800731c <HAL_I2C_EV_IRQHandler+0x38>
 8007314:	7bfb      	ldrb	r3, [r7, #15]
 8007316:	2b40      	cmp	r3, #64	; 0x40
 8007318:	f040 80bd 	bne.w	8007496 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10d      	bne.n	8007352 <HAL_I2C_EV_IRQHandler+0x6e>
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800733c:	d003      	beq.n	8007346 <HAL_I2C_EV_IRQHandler+0x62>
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007344:	d101      	bne.n	800734a <HAL_I2C_EV_IRQHandler+0x66>
 8007346:	2301      	movs	r3, #1
 8007348:	e000      	b.n	800734c <HAL_I2C_EV_IRQHandler+0x68>
 800734a:	2300      	movs	r3, #0
 800734c:	2b01      	cmp	r3, #1
 800734e:	f000 812e 	beq.w	80075ae <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00c      	beq.n	8007376 <HAL_I2C_EV_IRQHandler+0x92>
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	0a5b      	lsrs	r3, r3, #9
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d006      	beq.n	8007376 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f001 ff6a 	bl	8009242 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fd36 	bl	8007de0 <I2C_Master_SB>
 8007374:	e08e      	b.n	8007494 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	08db      	lsrs	r3, r3, #3
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	d009      	beq.n	8007396 <HAL_I2C_EV_IRQHandler+0xb2>
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	0a5b      	lsrs	r3, r3, #9
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fdac 	bl	8007eec <I2C_Master_ADD10>
 8007394:	e07e      	b.n	8007494 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	085b      	lsrs	r3, r3, #1
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d009      	beq.n	80073b6 <HAL_I2C_EV_IRQHandler+0xd2>
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	0a5b      	lsrs	r3, r3, #9
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fdc6 	bl	8007f40 <I2C_Master_ADDR>
 80073b4:	e06e      	b.n	8007494 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	089b      	lsrs	r3, r3, #2
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d037      	beq.n	8007432 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073d0:	f000 80ef 	beq.w	80075b2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	09db      	lsrs	r3, r3, #7
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00f      	beq.n	8007400 <HAL_I2C_EV_IRQHandler+0x11c>
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	0a9b      	lsrs	r3, r3, #10
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d009      	beq.n	8007400 <HAL_I2C_EV_IRQHandler+0x11c>
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	089b      	lsrs	r3, r3, #2
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d103      	bne.n	8007400 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f9c3 	bl	8007784 <I2C_MasterTransmit_TXE>
 80073fe:	e049      	b.n	8007494 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	089b      	lsrs	r3, r3, #2
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 80d2 	beq.w	80075b2 <HAL_I2C_EV_IRQHandler+0x2ce>
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	0a5b      	lsrs	r3, r3, #9
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 80cb 	beq.w	80075b2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	2b10      	cmp	r3, #16
 8007420:	d103      	bne.n	800742a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fa4a 	bl	80078bc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007428:	e0c3      	b.n	80075b2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 faae 	bl	800798c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007430:	e0bf      	b.n	80075b2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800743c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007440:	f000 80b7 	beq.w	80075b2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	099b      	lsrs	r3, r3, #6
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00f      	beq.n	8007470 <HAL_I2C_EV_IRQHandler+0x18c>
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	0a9b      	lsrs	r3, r3, #10
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b00      	cmp	r3, #0
 800745a:	d009      	beq.n	8007470 <HAL_I2C_EV_IRQHandler+0x18c>
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	089b      	lsrs	r3, r3, #2
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b00      	cmp	r3, #0
 8007466:	d103      	bne.n	8007470 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fb1e 	bl	8007aaa <I2C_MasterReceive_RXNE>
 800746e:	e011      	b.n	8007494 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	089b      	lsrs	r3, r3, #2
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 809a 	beq.w	80075b2 <HAL_I2C_EV_IRQHandler+0x2ce>
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	0a5b      	lsrs	r3, r3, #9
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	f000 8093 	beq.w	80075b2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fbbd 	bl	8007c0c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007492:	e08e      	b.n	80075b2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8007494:	e08d      	b.n	80075b2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	2b00      	cmp	r3, #0
 800749c:	d004      	beq.n	80074a8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	61fb      	str	r3, [r7, #28]
 80074a6:	e007      	b.n	80074b8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	085b      	lsrs	r3, r3, #1
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d012      	beq.n	80074ea <HAL_I2C_EV_IRQHandler+0x206>
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	0a5b      	lsrs	r3, r3, #9
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00c      	beq.n	80074ea <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d003      	beq.n	80074e0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80074e0:	69b9      	ldr	r1, [r7, #24]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 ff7b 	bl	80083de <I2C_Slave_ADDR>
 80074e8:	e066      	b.n	80075b8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	091b      	lsrs	r3, r3, #4
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d009      	beq.n	800750a <HAL_I2C_EV_IRQHandler+0x226>
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	0a5b      	lsrs	r3, r3, #9
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 ffb0 	bl	8008468 <I2C_Slave_STOPF>
 8007508:	e056      	b.n	80075b8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	2b21      	cmp	r3, #33	; 0x21
 800750e:	d002      	beq.n	8007516 <HAL_I2C_EV_IRQHandler+0x232>
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	2b29      	cmp	r3, #41	; 0x29
 8007514:	d125      	bne.n	8007562 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	09db      	lsrs	r3, r3, #7
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00f      	beq.n	8007542 <HAL_I2C_EV_IRQHandler+0x25e>
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	0a9b      	lsrs	r3, r3, #10
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d009      	beq.n	8007542 <HAL_I2C_EV_IRQHandler+0x25e>
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	089b      	lsrs	r3, r3, #2
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b00      	cmp	r3, #0
 8007538:	d103      	bne.n	8007542 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fe91 	bl	8008262 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007540:	e039      	b.n	80075b6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	089b      	lsrs	r3, r3, #2
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	d033      	beq.n	80075b6 <HAL_I2C_EV_IRQHandler+0x2d2>
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	0a5b      	lsrs	r3, r3, #9
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	d02d      	beq.n	80075b6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 febe 	bl	80082dc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007560:	e029      	b.n	80075b6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	099b      	lsrs	r3, r3, #6
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00f      	beq.n	800758e <HAL_I2C_EV_IRQHandler+0x2aa>
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	0a9b      	lsrs	r3, r3, #10
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d009      	beq.n	800758e <HAL_I2C_EV_IRQHandler+0x2aa>
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	089b      	lsrs	r3, r3, #2
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d103      	bne.n	800758e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fec9 	bl	800831e <I2C_SlaveReceive_RXNE>
 800758c:	e014      	b.n	80075b8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	089b      	lsrs	r3, r3, #2
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00e      	beq.n	80075b8 <HAL_I2C_EV_IRQHandler+0x2d4>
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	0a5b      	lsrs	r3, r3, #9
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d008      	beq.n	80075b8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fef7 	bl	800839a <I2C_SlaveReceive_BTF>
 80075ac:	e004      	b.n	80075b8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80075ae:	bf00      	nop
 80075b0:	e002      	b.n	80075b8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80075b2:	bf00      	nop
 80075b4:	e000      	b.n	80075b8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80075b6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80075b8:	3720      	adds	r7, #32
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b08a      	sub	sp, #40	; 0x28
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80075d6:	2300      	movs	r3, #0
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075e0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	0a1b      	lsrs	r3, r3, #8
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00e      	beq.n	800760c <HAL_I2C_ER_IRQHandler+0x4e>
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	0a1b      	lsrs	r3, r3, #8
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d008      	beq.n	800760c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	f043 0301 	orr.w	r3, r3, #1
 8007600:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800760a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	0a5b      	lsrs	r3, r3, #9
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00e      	beq.n	8007636 <HAL_I2C_ER_IRQHandler+0x78>
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	0a1b      	lsrs	r3, r3, #8
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b00      	cmp	r3, #0
 8007622:	d008      	beq.n	8007636 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	f043 0302 	orr.w	r3, r3, #2
 800762a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007634:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	0a9b      	lsrs	r3, r3, #10
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b00      	cmp	r3, #0
 8007640:	d03f      	beq.n	80076c2 <HAL_I2C_ER_IRQHandler+0x104>
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	0a1b      	lsrs	r3, r3, #8
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d039      	beq.n	80076c2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800764e:	7efb      	ldrb	r3, [r7, #27]
 8007650:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007656:	b29b      	uxth	r3, r3
 8007658:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007660:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007668:	7ebb      	ldrb	r3, [r7, #26]
 800766a:	2b20      	cmp	r3, #32
 800766c:	d112      	bne.n	8007694 <HAL_I2C_ER_IRQHandler+0xd6>
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10f      	bne.n	8007694 <HAL_I2C_ER_IRQHandler+0xd6>
 8007674:	7cfb      	ldrb	r3, [r7, #19]
 8007676:	2b21      	cmp	r3, #33	; 0x21
 8007678:	d008      	beq.n	800768c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800767a:	7cfb      	ldrb	r3, [r7, #19]
 800767c:	2b29      	cmp	r3, #41	; 0x29
 800767e:	d005      	beq.n	800768c <HAL_I2C_ER_IRQHandler+0xce>
 8007680:	7cfb      	ldrb	r3, [r7, #19]
 8007682:	2b28      	cmp	r3, #40	; 0x28
 8007684:	d106      	bne.n	8007694 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2b21      	cmp	r3, #33	; 0x21
 800768a:	d103      	bne.n	8007694 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 f81b 	bl	80086c8 <I2C_Slave_AF>
 8007692:	e016      	b.n	80076c2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800769c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	f043 0304 	orr.w	r3, r3, #4
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80076a6:	7efb      	ldrb	r3, [r7, #27]
 80076a8:	2b10      	cmp	r3, #16
 80076aa:	d002      	beq.n	80076b2 <HAL_I2C_ER_IRQHandler+0xf4>
 80076ac:	7efb      	ldrb	r3, [r7, #27]
 80076ae:	2b40      	cmp	r3, #64	; 0x40
 80076b0:	d107      	bne.n	80076c2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076c0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	0adb      	lsrs	r3, r3, #11
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00e      	beq.n	80076ec <HAL_I2C_ER_IRQHandler+0x12e>
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	0a1b      	lsrs	r3, r3, #8
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d008      	beq.n	80076ec <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	f043 0308 	orr.w	r3, r3, #8
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80076ea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d008      	beq.n	8007704 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	431a      	orrs	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f001 f852 	bl	80087a8 <I2C_ITError>
  }
}
 8007704:	bf00      	nop
 8007706:	3728      	adds	r7, #40	; 0x28
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007792:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800779a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d150      	bne.n	800784c <I2C_MasterTransmit_TXE+0xc8>
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	2b21      	cmp	r3, #33	; 0x21
 80077ae:	d14d      	bne.n	800784c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b08      	cmp	r3, #8
 80077b4:	d01d      	beq.n	80077f2 <I2C_MasterTransmit_TXE+0x6e>
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b20      	cmp	r3, #32
 80077ba:	d01a      	beq.n	80077f2 <I2C_MasterTransmit_TXE+0x6e>
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077c2:	d016      	beq.n	80077f2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80077d2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2211      	movs	r2, #17
 80077d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff ff8e 	bl	800770c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80077f0:	e060      	b.n	80078b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007800:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007810:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2220      	movs	r2, #32
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007826:	b2db      	uxtb	r3, r3
 8007828:	2b40      	cmp	r3, #64	; 0x40
 800782a:	d107      	bne.n	800783c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7ff ff87 	bl	8007748 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800783a:	e03b      	b.n	80078b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff ff61 	bl	800770c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800784a:	e033      	b.n	80078b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	2b21      	cmp	r3, #33	; 0x21
 8007850:	d005      	beq.n	800785e <I2C_MasterTransmit_TXE+0xda>
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	2b40      	cmp	r3, #64	; 0x40
 8007856:	d12d      	bne.n	80078b4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	2b22      	cmp	r3, #34	; 0x22
 800785c:	d12a      	bne.n	80078b4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007862:	b29b      	uxth	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d108      	bne.n	800787a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007876:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007878:	e01c      	b.n	80078b4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b40      	cmp	r3, #64	; 0x40
 8007884:	d103      	bne.n	800788e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f880 	bl	800798c <I2C_MemoryTransmit_TXE_BTF>
}
 800788c:	e012      	b.n	80078b4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007892:	781a      	ldrb	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80078b2:	e7ff      	b.n	80078b4 <I2C_MasterTransmit_TXE+0x130>
 80078b4:	bf00      	nop
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b21      	cmp	r3, #33	; 0x21
 80078d4:	d156      	bne.n	8007984 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078da:	b29b      	uxth	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d012      	beq.n	8007906 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e4:	781a      	ldrb	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	1c5a      	adds	r2, r3, #1
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b29a      	uxth	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007904:	e03e      	b.n	8007984 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b08      	cmp	r3, #8
 800790a:	d01d      	beq.n	8007948 <I2C_MasterTransmit_BTF+0x8c>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2b20      	cmp	r3, #32
 8007910:	d01a      	beq.n	8007948 <I2C_MasterTransmit_BTF+0x8c>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007918:	d016      	beq.n	8007948 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007928:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2211      	movs	r2, #17
 800792e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2220      	movs	r2, #32
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff fee3 	bl	800770c <HAL_I2C_MasterTxCpltCallback>
}
 8007946:	e01d      	b.n	8007984 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007956:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007966:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2220      	movs	r2, #32
 8007972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7ff fec4 	bl	800770c <HAL_I2C_MasterTxCpltCallback>
}
 8007984:	bf00      	nop
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800799a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d11d      	bne.n	80079e0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d10b      	bne.n	80079c4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079bc:	1c9a      	adds	r2, r3, #2
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80079c2:	e06e      	b.n	8007aa2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	121b      	asrs	r3, r3, #8
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80079de:	e060      	b.n	8007aa2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d10b      	bne.n	8007a00 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f8:	1c5a      	adds	r2, r3, #1
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80079fe:	e050      	b.n	8007aa2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d14c      	bne.n	8007aa2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	2b22      	cmp	r3, #34	; 0x22
 8007a0c:	d108      	bne.n	8007a20 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a1c:	601a      	str	r2, [r3, #0]
}
 8007a1e:	e040      	b.n	8007aa2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d015      	beq.n	8007a56 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
 8007a2c:	2b21      	cmp	r3, #33	; 0x21
 8007a2e:	d112      	bne.n	8007a56 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	781a      	ldrb	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007a54:	e025      	b.n	8007aa2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d120      	bne.n	8007aa2 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	2b21      	cmp	r3, #33	; 0x21
 8007a64:	d11d      	bne.n	8007aa2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a74:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a84:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff fe53 	bl	8007748 <HAL_I2C_MemTxCpltCallback>
}
 8007aa2:	bf00      	nop
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b22      	cmp	r3, #34	; 0x22
 8007abc:	f040 80a2 	bne.w	8007c04 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d921      	bls.n	8007b12 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	691a      	ldr	r2, [r3, #16]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	b2d2      	uxtb	r2, r2
 8007ada:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	1c5a      	adds	r2, r3, #1
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	3b01      	subs	r3, #1
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	f040 8082 	bne.w	8007c04 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b0e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8007b10:	e078      	b.n	8007c04 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d074      	beq.n	8007c04 <I2C_MasterReceive_RXNE+0x15a>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d002      	beq.n	8007b26 <I2C_MasterReceive_RXNE+0x7c>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d16e      	bne.n	8007c04 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 fb2a 	bl	8009180 <I2C_WaitOnSTOPRequestThroughIT>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d142      	bne.n	8007bb8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b40:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b50:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	691a      	ldr	r2, [r3, #16]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	b2d2      	uxtb	r2, r2
 8007b5e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b64:	1c5a      	adds	r2, r3, #1
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	3b01      	subs	r3, #1
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b40      	cmp	r3, #64	; 0x40
 8007b8a:	d10a      	bne.n	8007ba2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff fdde 	bl	800775c <HAL_I2C_MemRxCpltCallback>
}
 8007ba0:	e030      	b.n	8007c04 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2212      	movs	r2, #18
 8007bae:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7ff fdb5 	bl	8007720 <HAL_I2C_MasterRxCpltCallback>
}
 8007bb6:	e025      	b.n	8007c04 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bc6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	691a      	ldr	r2, [r3, #16]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	b2d2      	uxtb	r2, r2
 8007bd4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7fa fc78 	bl	80024f4 <HAL_I2C_ErrorCallback>
}
 8007c04:	bf00      	nop
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c18:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	d11b      	bne.n	8007c5c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c32:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691a      	ldr	r2, [r3, #16]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	b2d2      	uxtb	r2, r2
 8007c40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	3b01      	subs	r3, #1
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007c5a:	e0bd      	b.n	8007dd8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d129      	bne.n	8007cba <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c74:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	d00a      	beq.n	8007c92 <I2C_MasterReceive_BTF+0x86>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d007      	beq.n	8007c92 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c90:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	691a      	ldr	r2, [r3, #16]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	b2d2      	uxtb	r2, r2
 8007c9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	1c5a      	adds	r2, r3, #1
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007cb8:	e08e      	b.n	8007dd8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d176      	bne.n	8007db2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d002      	beq.n	8007cd0 <I2C_MasterReceive_BTF+0xc4>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2b10      	cmp	r3, #16
 8007cce:	d108      	bne.n	8007ce2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cde:	601a      	str	r2, [r3, #0]
 8007ce0:	e019      	b.n	8007d16 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	d002      	beq.n	8007cee <I2C_MasterReceive_BTF+0xe2>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d108      	bne.n	8007d00 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	e00a      	b.n	8007d16 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2b10      	cmp	r3, #16
 8007d04:	d007      	beq.n	8007d16 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d14:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	691a      	ldr	r2, [r3, #16]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	b2d2      	uxtb	r2, r2
 8007d22:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	3b01      	subs	r3, #1
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	691a      	ldr	r2, [r3, #16]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d46:	b2d2      	uxtb	r2, r2
 8007d48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007d70:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2220      	movs	r2, #32
 8007d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b40      	cmp	r3, #64	; 0x40
 8007d84:	d10a      	bne.n	8007d9c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7ff fce1 	bl	800775c <HAL_I2C_MemRxCpltCallback>
}
 8007d9a:	e01d      	b.n	8007dd8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2212      	movs	r2, #18
 8007da8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7ff fcb8 	bl	8007720 <HAL_I2C_MasterRxCpltCallback>
}
 8007db0:	e012      	b.n	8007dd8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	691a      	ldr	r2, [r3, #16]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	b2d2      	uxtb	r2, r2
 8007dbe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007dd8:	bf00      	nop
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b40      	cmp	r3, #64	; 0x40
 8007df2:	d117      	bne.n	8007e24 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d109      	bne.n	8007e10 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	461a      	mov	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e0c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007e0e:	e067      	b.n	8007ee0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	f043 0301 	orr.w	r3, r3, #1
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	611a      	str	r2, [r3, #16]
}
 8007e22:	e05d      	b.n	8007ee0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e2c:	d133      	bne.n	8007e96 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b21      	cmp	r3, #33	; 0x21
 8007e38:	d109      	bne.n	8007e4e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	461a      	mov	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e4a:	611a      	str	r2, [r3, #16]
 8007e4c:	e008      	b.n	8007e60 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	f043 0301 	orr.w	r3, r3, #1
 8007e58:	b2da      	uxtb	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d004      	beq.n	8007e72 <I2C_Master_SB+0x92>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d108      	bne.n	8007e84 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d032      	beq.n	8007ee0 <I2C_Master_SB+0x100>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d02d      	beq.n	8007ee0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e92:	605a      	str	r2, [r3, #4]
}
 8007e94:	e024      	b.n	8007ee0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10e      	bne.n	8007ebc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	11db      	asrs	r3, r3, #7
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	f003 0306 	and.w	r3, r3, #6
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	f063 030f 	orn	r3, r3, #15
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	611a      	str	r2, [r3, #16]
}
 8007eba:	e011      	b.n	8007ee0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d10d      	bne.n	8007ee0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	11db      	asrs	r3, r3, #7
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	f003 0306 	and.w	r3, r3, #6
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f063 030e 	orn	r3, r3, #14
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	611a      	str	r2, [r3, #16]
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d004      	beq.n	8007f12 <I2C_Master_ADD10+0x26>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d108      	bne.n	8007f24 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00c      	beq.n	8007f34 <I2C_Master_ADD10+0x48>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d007      	beq.n	8007f34 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685a      	ldr	r2, [r3, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f32:	605a      	str	r2, [r3, #4]
  }
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b091      	sub	sp, #68	; 0x44
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f56:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b22      	cmp	r3, #34	; 0x22
 8007f68:	f040 8169 	bne.w	800823e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10f      	bne.n	8007f94 <I2C_Master_ADDR+0x54>
 8007f74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f78:	2b40      	cmp	r3, #64	; 0x40
 8007f7a:	d10b      	bne.n	8007f94 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	633b      	str	r3, [r7, #48]	; 0x30
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8007f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f92:	e160      	b.n	8008256 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d11d      	bne.n	8007fd8 <I2C_Master_ADDR+0x98>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007fa4:	d118      	bne.n	8007fd8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fca:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	651a      	str	r2, [r3, #80]	; 0x50
 8007fd6:	e13e      	b.n	8008256 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d113      	bne.n	800800a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	e115      	b.n	8008236 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800800e:	b29b      	uxth	r3, r3
 8008010:	2b01      	cmp	r3, #1
 8008012:	f040 808a 	bne.w	800812a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008018:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800801c:	d137      	bne.n	800808e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800802c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800803c:	d113      	bne.n	8008066 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800804c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800804e:	2300      	movs	r3, #0
 8008050:	627b      	str	r3, [r7, #36]	; 0x24
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	e0e7      	b.n	8008236 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008066:	2300      	movs	r3, #0
 8008068:	623b      	str	r3, [r7, #32]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	623b      	str	r3, [r7, #32]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	623b      	str	r3, [r7, #32]
 800807a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	e0d3      	b.n	8008236 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800808e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008090:	2b08      	cmp	r3, #8
 8008092:	d02e      	beq.n	80080f2 <I2C_Master_ADDR+0x1b2>
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	2b20      	cmp	r3, #32
 8008098:	d02b      	beq.n	80080f2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800809a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809c:	2b12      	cmp	r3, #18
 800809e:	d102      	bne.n	80080a6 <I2C_Master_ADDR+0x166>
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d125      	bne.n	80080f2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80080a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	d00e      	beq.n	80080ca <I2C_Master_ADDR+0x18a>
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d00b      	beq.n	80080ca <I2C_Master_ADDR+0x18a>
 80080b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b4:	2b10      	cmp	r3, #16
 80080b6:	d008      	beq.n	80080ca <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080c6:	601a      	str	r2, [r3, #0]
 80080c8:	e007      	b.n	80080da <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080da:	2300      	movs	r3, #0
 80080dc:	61fb      	str	r3, [r7, #28]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	61fb      	str	r3, [r7, #28]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	61fb      	str	r3, [r7, #28]
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	e0a1      	b.n	8008236 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008100:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008102:	2300      	movs	r3, #0
 8008104:	61bb      	str	r3, [r7, #24]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	61bb      	str	r3, [r7, #24]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	61bb      	str	r3, [r7, #24]
 8008116:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	e085      	b.n	8008236 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800812e:	b29b      	uxth	r3, r3
 8008130:	2b02      	cmp	r3, #2
 8008132:	d14d      	bne.n	80081d0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008136:	2b04      	cmp	r3, #4
 8008138:	d016      	beq.n	8008168 <I2C_Master_ADDR+0x228>
 800813a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813c:	2b02      	cmp	r3, #2
 800813e:	d013      	beq.n	8008168 <I2C_Master_ADDR+0x228>
 8008140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008142:	2b10      	cmp	r3, #16
 8008144:	d010      	beq.n	8008168 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008154:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	e007      	b.n	8008178 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008176:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008186:	d117      	bne.n	80081b8 <I2C_Master_ADDR+0x278>
 8008188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800818e:	d00b      	beq.n	80081a8 <I2C_Master_ADDR+0x268>
 8008190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008192:	2b01      	cmp	r3, #1
 8008194:	d008      	beq.n	80081a8 <I2C_Master_ADDR+0x268>
 8008196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008198:	2b08      	cmp	r3, #8
 800819a:	d005      	beq.n	80081a8 <I2C_Master_ADDR+0x268>
 800819c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819e:	2b10      	cmp	r3, #16
 80081a0:	d002      	beq.n	80081a8 <I2C_Master_ADDR+0x268>
 80081a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a4:	2b20      	cmp	r3, #32
 80081a6:	d107      	bne.n	80081b8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80081b6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081b8:	2300      	movs	r3, #0
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	617b      	str	r3, [r7, #20]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	617b      	str	r3, [r7, #20]
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	e032      	b.n	8008236 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081de:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081ee:	d117      	bne.n	8008220 <I2C_Master_ADDR+0x2e0>
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80081f6:	d00b      	beq.n	8008210 <I2C_Master_ADDR+0x2d0>
 80081f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d008      	beq.n	8008210 <I2C_Master_ADDR+0x2d0>
 80081fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008200:	2b08      	cmp	r3, #8
 8008202:	d005      	beq.n	8008210 <I2C_Master_ADDR+0x2d0>
 8008204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008206:	2b10      	cmp	r3, #16
 8008208:	d002      	beq.n	8008210 <I2C_Master_ADDR+0x2d0>
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	2b20      	cmp	r3, #32
 800820e:	d107      	bne.n	8008220 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800821e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008220:	2300      	movs	r3, #0
 8008222:	613b      	str	r3, [r7, #16]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	613b      	str	r3, [r7, #16]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	613b      	str	r3, [r7, #16]
 8008234:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800823c:	e00b      	b.n	8008256 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800823e:	2300      	movs	r3, #0
 8008240:	60fb      	str	r3, [r7, #12]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	60fb      	str	r3, [r7, #12]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	60fb      	str	r3, [r7, #12]
 8008252:	68fb      	ldr	r3, [r7, #12]
}
 8008254:	e7ff      	b.n	8008256 <I2C_Master_ADDR+0x316>
 8008256:	bf00      	nop
 8008258:	3744      	adds	r7, #68	; 0x44
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b084      	sub	sp, #16
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008270:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008276:	b29b      	uxth	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d02b      	beq.n	80082d4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	781a      	ldrb	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828c:	1c5a      	adds	r2, r3, #1
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008296:	b29b      	uxth	r3, r3
 8008298:	3b01      	subs	r3, #1
 800829a:	b29a      	uxth	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d114      	bne.n	80082d4 <I2C_SlaveTransmit_TXE+0x72>
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
 80082ac:	2b29      	cmp	r3, #41	; 0x29
 80082ae:	d111      	bne.n	80082d4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	685a      	ldr	r2, [r3, #4]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082be:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2221      	movs	r2, #33	; 0x21
 80082c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2228      	movs	r2, #40	; 0x28
 80082ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f7ff fa30 	bl	8007734 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80082d4:	bf00      	nop
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d011      	beq.n	8008312 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f2:	781a      	ldrb	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fe:	1c5a      	adds	r2, r3, #1
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008308:	b29b      	uxth	r3, r3
 800830a:	3b01      	subs	r3, #1
 800830c:	b29a      	uxth	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008312:	bf00      	nop
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b084      	sub	sp, #16
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800832c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008332:	b29b      	uxth	r3, r3
 8008334:	2b00      	cmp	r3, #0
 8008336:	d02c      	beq.n	8008392 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	691a      	ldr	r2, [r3, #16]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	b2d2      	uxtb	r2, r2
 8008344:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834a:	1c5a      	adds	r2, r3, #1
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	b29a      	uxth	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008362:	b29b      	uxth	r3, r3
 8008364:	2b00      	cmp	r3, #0
 8008366:	d114      	bne.n	8008392 <I2C_SlaveReceive_RXNE+0x74>
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	2b2a      	cmp	r3, #42	; 0x2a
 800836c:	d111      	bne.n	8008392 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800837c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2222      	movs	r2, #34	; 0x22
 8008382:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2228      	movs	r2, #40	; 0x28
 8008388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7fa f893 	bl	80024b8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008392:	bf00      	nop
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800839a:	b480      	push	{r7}
 800839c:	b083      	sub	sp, #12
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d012      	beq.n	80083d2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	691a      	ldr	r2, [r3, #16]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b6:	b2d2      	uxtb	r2, r2
 80083b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	3b01      	subs	r3, #1
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80083d2:	bf00      	nop
 80083d4:	370c      	adds	r7, #12
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80083f8:	2b28      	cmp	r3, #40	; 0x28
 80083fa:	d127      	bne.n	800844c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800840a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	089b      	lsrs	r3, r3, #2
 8008410:	f003 0301 	and.w	r3, r3, #1
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008418:	2301      	movs	r3, #1
 800841a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	09db      	lsrs	r3, r3, #7
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	d103      	bne.n	8008430 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	81bb      	strh	r3, [r7, #12]
 800842e:	e002      	b.n	8008436 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800843e:	89ba      	ldrh	r2, [r7, #12]
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7f9 fffd 	bl	8002444 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800844a:	e008      	b.n	800845e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f06f 0202 	mvn.w	r2, #2
 8008454:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800845e:	bf00      	nop
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
	...

08008468 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008476:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008486:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008488:	2300      	movs	r3, #0
 800848a:	60bb      	str	r3, [r7, #8]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	60bb      	str	r3, [r7, #8]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 0201 	orr.w	r2, r2, #1
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084b4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084c4:	d172      	bne.n	80085ac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80084c6:	7bfb      	ldrb	r3, [r7, #15]
 80084c8:	2b22      	cmp	r3, #34	; 0x22
 80084ca:	d002      	beq.n	80084d2 <I2C_Slave_STOPF+0x6a>
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	2b2a      	cmp	r3, #42	; 0x2a
 80084d0:	d135      	bne.n	800853e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	b29a      	uxth	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d005      	beq.n	80084f6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ee:	f043 0204 	orr.w	r2, r3, #4
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008504:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850a:	4618      	mov	r0, r3
 800850c:	f7fd fac0 	bl	8005a90 <HAL_DMA_GetState>
 8008510:	4603      	mov	r3, r0
 8008512:	2b01      	cmp	r3, #1
 8008514:	d049      	beq.n	80085aa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851a:	4a69      	ldr	r2, [pc, #420]	; (80086c0 <I2C_Slave_STOPF+0x258>)
 800851c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	4618      	mov	r0, r3
 8008524:	f7fd f908 	bl	8005738 <HAL_DMA_Abort_IT>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d03d      	beq.n	80085aa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008538:	4610      	mov	r0, r2
 800853a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800853c:	e035      	b.n	80085aa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	b29a      	uxth	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008550:	b29b      	uxth	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	d005      	beq.n	8008562 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855a:	f043 0204 	orr.w	r2, r3, #4
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008570:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008576:	4618      	mov	r0, r3
 8008578:	f7fd fa8a 	bl	8005a90 <HAL_DMA_GetState>
 800857c:	4603      	mov	r3, r0
 800857e:	2b01      	cmp	r3, #1
 8008580:	d014      	beq.n	80085ac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008586:	4a4e      	ldr	r2, [pc, #312]	; (80086c0 <I2C_Slave_STOPF+0x258>)
 8008588:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800858e:	4618      	mov	r0, r3
 8008590:	f7fd f8d2 	bl	8005738 <HAL_DMA_Abort_IT>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d008      	beq.n	80085ac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80085a4:	4610      	mov	r0, r2
 80085a6:	4798      	blx	r3
 80085a8:	e000      	b.n	80085ac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80085aa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d03e      	beq.n	8008634 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	695b      	ldr	r3, [r3, #20]
 80085bc:	f003 0304 	and.w	r3, r3, #4
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d112      	bne.n	80085ea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	691a      	ldr	r2, [r3, #16]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	b2d2      	uxtb	r2, r2
 80085d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	1c5a      	adds	r2, r3, #1
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	3b01      	subs	r3, #1
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f4:	2b40      	cmp	r3, #64	; 0x40
 80085f6:	d112      	bne.n	800861e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	691a      	ldr	r2, [r3, #16]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008602:	b2d2      	uxtb	r2, r2
 8008604:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008614:	b29b      	uxth	r3, r3
 8008616:	3b01      	subs	r3, #1
 8008618:	b29a      	uxth	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008622:	b29b      	uxth	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d005      	beq.n	8008634 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862c:	f043 0204 	orr.w	r2, r3, #4
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008638:	2b00      	cmp	r3, #0
 800863a:	d003      	beq.n	8008644 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f8b3 	bl	80087a8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008642:	e039      	b.n	80086b8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008644:	7bfb      	ldrb	r3, [r7, #15]
 8008646:	2b2a      	cmp	r3, #42	; 0x2a
 8008648:	d109      	bne.n	800865e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2228      	movs	r2, #40	; 0x28
 8008654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7f9 ff2d 	bl	80024b8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b28      	cmp	r3, #40	; 0x28
 8008668:	d111      	bne.n	800868e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a15      	ldr	r2, [pc, #84]	; (80086c4 <I2C_Slave_STOPF+0x25c>)
 800866e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7f9 ff08 	bl	800249c <HAL_I2C_ListenCpltCallback>
}
 800868c:	e014      	b.n	80086b8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008692:	2b22      	cmp	r3, #34	; 0x22
 8008694:	d002      	beq.n	800869c <I2C_Slave_STOPF+0x234>
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	2b22      	cmp	r3, #34	; 0x22
 800869a:	d10d      	bne.n	80086b8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2220      	movs	r2, #32
 80086a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7f9 ff00 	bl	80024b8 <HAL_I2C_SlaveRxCpltCallback>
}
 80086b8:	bf00      	nop
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	08008e01 	.word	0x08008e01
 80086c4:	ffff0000 	.word	0xffff0000

080086c8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086d6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d002      	beq.n	80086ea <I2C_Slave_AF+0x22>
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d129      	bne.n	800873e <I2C_Slave_AF+0x76>
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
 80086ec:	2b28      	cmp	r3, #40	; 0x28
 80086ee:	d126      	bne.n	800873e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a2c      	ldr	r2, [pc, #176]	; (80087a4 <I2C_Slave_AF+0xdc>)
 80086f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008704:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800870e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800871e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2220      	movs	r2, #32
 800872a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7f9 feb0 	bl	800249c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800873c:	e02e      	b.n	800879c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	2b21      	cmp	r3, #33	; 0x21
 8008742:	d126      	bne.n	8008792 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a17      	ldr	r2, [pc, #92]	; (80087a4 <I2C_Slave_AF+0xdc>)
 8008748:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2221      	movs	r2, #33	; 0x21
 800874e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2220      	movs	r2, #32
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800876e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008778:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008788:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7fe ffd2 	bl	8007734 <HAL_I2C_SlaveTxCpltCallback>
}
 8008790:	e004      	b.n	800879c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800879a:	615a      	str	r2, [r3, #20]
}
 800879c:	bf00      	nop
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	ffff0000 	.word	0xffff0000

080087a8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
 80087c2:	2b10      	cmp	r3, #16
 80087c4:	d002      	beq.n	80087cc <I2C_ITError+0x24>
 80087c6:	7bbb      	ldrb	r3, [r7, #14]
 80087c8:	2b40      	cmp	r3, #64	; 0x40
 80087ca:	d10a      	bne.n	80087e2 <I2C_ITError+0x3a>
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
 80087ce:	2b22      	cmp	r3, #34	; 0x22
 80087d0:	d107      	bne.n	80087e2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087e0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
 80087e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80087e8:	2b28      	cmp	r3, #40	; 0x28
 80087ea:	d107      	bne.n	80087fc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2228      	movs	r2, #40	; 0x28
 80087f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80087fa:	e015      	b.n	8008828 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800880a:	d00a      	beq.n	8008822 <I2C_ITError+0x7a>
 800880c:	7bfb      	ldrb	r3, [r7, #15]
 800880e:	2b60      	cmp	r3, #96	; 0x60
 8008810:	d007      	beq.n	8008822 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2220      	movs	r2, #32
 8008816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008836:	d162      	bne.n	80088fe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008846:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b01      	cmp	r3, #1
 8008854:	d020      	beq.n	8008898 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885a:	4a6a      	ldr	r2, [pc, #424]	; (8008a04 <I2C_ITError+0x25c>)
 800885c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008862:	4618      	mov	r0, r3
 8008864:	f7fc ff68 	bl	8005738 <HAL_DMA_Abort_IT>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 8089 	beq.w	8008982 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f022 0201 	bic.w	r2, r2, #1
 800887e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2220      	movs	r2, #32
 8008884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800888c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008892:	4610      	mov	r0, r2
 8008894:	4798      	blx	r3
 8008896:	e074      	b.n	8008982 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889c:	4a59      	ldr	r2, [pc, #356]	; (8008a04 <I2C_ITError+0x25c>)
 800889e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fc ff47 	bl	8005738 <HAL_DMA_Abort_IT>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d068      	beq.n	8008982 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ba:	2b40      	cmp	r3, #64	; 0x40
 80088bc:	d10b      	bne.n	80088d6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	691a      	ldr	r2, [r3, #16]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c8:	b2d2      	uxtb	r2, r2
 80088ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 0201 	bic.w	r2, r2, #1
 80088e4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2220      	movs	r2, #32
 80088ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
 80088fc:	e041      	b.n	8008982 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b60      	cmp	r3, #96	; 0x60
 8008908:	d125      	bne.n	8008956 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2220      	movs	r2, #32
 800890e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008922:	2b40      	cmp	r3, #64	; 0x40
 8008924:	d10b      	bne.n	800893e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	691a      	ldr	r2, [r3, #16]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008930:	b2d2      	uxtb	r2, r2
 8008932:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 0201 	bic.w	r2, r2, #1
 800894c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7fe ff0e 	bl	8007770 <HAL_I2C_AbortCpltCallback>
 8008954:	e015      	b.n	8008982 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	695b      	ldr	r3, [r3, #20]
 800895c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008960:	2b40      	cmp	r3, #64	; 0x40
 8008962:	d10b      	bne.n	800897c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	691a      	ldr	r2, [r3, #16]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896e:	b2d2      	uxtb	r2, r2
 8008970:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7f9 fdb9 	bl	80024f4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008986:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10e      	bne.n	80089b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008998:	2b00      	cmp	r3, #0
 800899a:	d109      	bne.n	80089b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d104      	bne.n	80089b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d007      	beq.n	80089c0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80089be:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089cc:	f003 0304 	and.w	r3, r3, #4
 80089d0:	2b04      	cmp	r3, #4
 80089d2:	d113      	bne.n	80089fc <I2C_ITError+0x254>
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	2b28      	cmp	r3, #40	; 0x28
 80089d8:	d110      	bne.n	80089fc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a0a      	ldr	r2, [pc, #40]	; (8008a08 <I2C_ITError+0x260>)
 80089de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2220      	movs	r2, #32
 80089ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7f9 fd50 	bl	800249c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80089fc:	bf00      	nop
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	08008e01 	.word	0x08008e01
 8008a08:	ffff0000 	.word	0xffff0000

08008a0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af02      	add	r7, sp, #8
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	4608      	mov	r0, r1
 8008a16:	4611      	mov	r1, r2
 8008a18:	461a      	mov	r2, r3
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	817b      	strh	r3, [r7, #10]
 8008a1e:	460b      	mov	r3, r1
 8008a20:	813b      	strh	r3, [r7, #8]
 8008a22:	4613      	mov	r3, r2
 8008a24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f000 fa7c 	bl	8008f50 <I2C_WaitOnFlagUntilTimeout>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00d      	beq.n	8008a7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a6c:	d103      	bne.n	8008a76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e0aa      	b.n	8008bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a7a:	897b      	ldrh	r3, [r7, #10]
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	461a      	mov	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	6a3a      	ldr	r2, [r7, #32]
 8008a8e:	4952      	ldr	r1, [pc, #328]	; (8008bd8 <I2C_RequestMemoryRead+0x1cc>)
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f000 fab4 	bl	8008ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e097      	b.n	8008bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	617b      	str	r3, [r7, #20]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	617b      	str	r3, [r7, #20]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	617b      	str	r3, [r7, #20]
 8008ab4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab8:	6a39      	ldr	r1, [r7, #32]
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f000 fb1e 	bl	80090fc <I2C_WaitOnTXEFlagUntilTimeout>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00d      	beq.n	8008ae2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aca:	2b04      	cmp	r3, #4
 8008acc:	d107      	bne.n	8008ade <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008adc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e076      	b.n	8008bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ae2:	88fb      	ldrh	r3, [r7, #6]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d105      	bne.n	8008af4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ae8:	893b      	ldrh	r3, [r7, #8]
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	611a      	str	r2, [r3, #16]
 8008af2:	e021      	b.n	8008b38 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008af4:	893b      	ldrh	r3, [r7, #8]
 8008af6:	0a1b      	lsrs	r3, r3, #8
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b04:	6a39      	ldr	r1, [r7, #32]
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 faf8 	bl	80090fc <I2C_WaitOnTXEFlagUntilTimeout>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00d      	beq.n	8008b2e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b16:	2b04      	cmp	r3, #4
 8008b18:	d107      	bne.n	8008b2a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e050      	b.n	8008bd0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b2e:	893b      	ldrh	r3, [r7, #8]
 8008b30:	b2da      	uxtb	r2, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b3a:	6a39      	ldr	r1, [r7, #32]
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 fadd 	bl	80090fc <I2C_WaitOnTXEFlagUntilTimeout>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00d      	beq.n	8008b64 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4c:	2b04      	cmp	r3, #4
 8008b4e:	d107      	bne.n	8008b60 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e035      	b.n	8008bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b72:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 f9e5 	bl	8008f50 <I2C_WaitOnFlagUntilTimeout>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00d      	beq.n	8008ba8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b9a:	d103      	bne.n	8008ba4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ba2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e013      	b.n	8008bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008ba8:	897b      	ldrh	r3, [r7, #10]
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	f043 0301 	orr.w	r3, r3, #1
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	6a3a      	ldr	r2, [r7, #32]
 8008bbc:	4906      	ldr	r1, [pc, #24]	; (8008bd8 <I2C_RequestMemoryRead+0x1cc>)
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f000 fa1d 	bl	8008ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e000      	b.n	8008bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3718      	adds	r7, #24
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	00010002 	.word	0x00010002

08008bdc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bf0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bf8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfe:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008c0e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d003      	beq.n	8008c30 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8008c30:	7cfb      	ldrb	r3, [r7, #19]
 8008c32:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008c36:	2b21      	cmp	r3, #33	; 0x21
 8008c38:	d007      	beq.n	8008c4a <I2C_DMAXferCplt+0x6e>
 8008c3a:	7cfb      	ldrb	r3, [r7, #19]
 8008c3c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8008c40:	2b22      	cmp	r3, #34	; 0x22
 8008c42:	d131      	bne.n	8008ca8 <I2C_DMAXferCplt+0xcc>
 8008c44:	7cbb      	ldrb	r3, [r7, #18]
 8008c46:	2b20      	cmp	r3, #32
 8008c48:	d12e      	bne.n	8008ca8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	685a      	ldr	r2, [r3, #4]
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c58:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008c60:	7cfb      	ldrb	r3, [r7, #19]
 8008c62:	2b29      	cmp	r3, #41	; 0x29
 8008c64:	d10a      	bne.n	8008c7c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2221      	movs	r2, #33	; 0x21
 8008c6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	2228      	movs	r2, #40	; 0x28
 8008c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008c74:	6978      	ldr	r0, [r7, #20]
 8008c76:	f7fe fd5d 	bl	8007734 <HAL_I2C_SlaveTxCpltCallback>
 8008c7a:	e00c      	b.n	8008c96 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008c7c:	7cfb      	ldrb	r3, [r7, #19]
 8008c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c80:	d109      	bne.n	8008c96 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2222      	movs	r2, #34	; 0x22
 8008c86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2228      	movs	r2, #40	; 0x28
 8008c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c90:	6978      	ldr	r0, [r7, #20]
 8008c92:	f7f9 fc11 	bl	80024b8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008ca4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008ca6:	e06a      	b.n	8008d7e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d064      	beq.n	8008d7e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d107      	bne.n	8008cce <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ccc:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008cdc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ce4:	d009      	beq.n	8008cfa <I2C_DMAXferCplt+0x11e>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b08      	cmp	r3, #8
 8008cea:	d006      	beq.n	8008cfa <I2C_DMAXferCplt+0x11e>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008cf2:	d002      	beq.n	8008cfa <I2C_DMAXferCplt+0x11e>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b20      	cmp	r3, #32
 8008cf8:	d107      	bne.n	8008d0a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d08:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d18:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	685a      	ldr	r2, [r3, #4]
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d28:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d003      	beq.n	8008d40 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8008d38:	6978      	ldr	r0, [r7, #20]
 8008d3a:	f7f9 fbdb 	bl	80024f4 <HAL_I2C_ErrorCallback>
}
 8008d3e:	e01e      	b.n	8008d7e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	2220      	movs	r2, #32
 8008d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b40      	cmp	r3, #64	; 0x40
 8008d52:	d10a      	bne.n	8008d6a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8008d62:	6978      	ldr	r0, [r7, #20]
 8008d64:	f7fe fcfa 	bl	800775c <HAL_I2C_MemRxCpltCallback>
}
 8008d68:	e009      	b.n	8008d7e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2212      	movs	r2, #18
 8008d76:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8008d78:	6978      	ldr	r0, [r7, #20]
 8008d7a:	f7fe fcd1 	bl	8007720 <HAL_I2C_MasterRxCpltCallback>
}
 8008d7e:	bf00      	nop
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d92:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d003      	beq.n	8008da4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da0:	2200      	movs	r2, #0
 8008da2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d003      	beq.n	8008db4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	2200      	movs	r2, #0
 8008db2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7fc fe79 	bl	8005aac <HAL_DMA_GetError>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d01b      	beq.n	8008df8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dce:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2220      	movs	r2, #32
 8008dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dea:	f043 0210 	orr.w	r2, r3, #16
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f7f9 fb7e 	bl	80024f4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008df8:	bf00      	nop
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e10:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e18:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008e1a:	4b4b      	ldr	r3, [pc, #300]	; (8008f48 <I2C_DMAAbort+0x148>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	08db      	lsrs	r3, r3, #3
 8008e20:	4a4a      	ldr	r2, [pc, #296]	; (8008f4c <I2C_DMAAbort+0x14c>)
 8008e22:	fba2 2303 	umull	r2, r3, r2, r3
 8008e26:	0a1a      	lsrs	r2, r3, #8
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	00da      	lsls	r2, r3, #3
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d106      	bne.n	8008e48 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3e:	f043 0220 	orr.w	r2, r3, #32
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008e46:	e00a      	b.n	8008e5e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e5c:	d0ea      	beq.n	8008e34 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d003      	beq.n	8008e7e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e8c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	2200      	movs	r2, #0
 8008e92:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f022 0201 	bic.w	r2, r2, #1
 8008ec2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	2b60      	cmp	r3, #96	; 0x60
 8008ece:	d10e      	bne.n	8008eee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008ee6:	6978      	ldr	r0, [r7, #20]
 8008ee8:	f7fe fc42 	bl	8007770 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008eec:	e027      	b.n	8008f3e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008eee:	7cfb      	ldrb	r3, [r7, #19]
 8008ef0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008ef4:	2b28      	cmp	r3, #40	; 0x28
 8008ef6:	d117      	bne.n	8008f28 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f042 0201 	orr.w	r2, r2, #1
 8008f06:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f16:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2228      	movs	r2, #40	; 0x28
 8008f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008f26:	e007      	b.n	8008f38 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	2220      	movs	r2, #32
 8008f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008f38:	6978      	ldr	r0, [r7, #20]
 8008f3a:	f7f9 fadb 	bl	80024f4 <HAL_I2C_ErrorCallback>
}
 8008f3e:	bf00      	nop
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	20000008 	.word	0x20000008
 8008f4c:	14f8b589 	.word	0x14f8b589

08008f50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	603b      	str	r3, [r7, #0]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f60:	e025      	b.n	8008fae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f68:	d021      	beq.n	8008fae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f6a:	f7fb fc4d 	bl	8004808 <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d302      	bcc.n	8008f80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d116      	bne.n	8008fae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2220      	movs	r2, #32
 8008f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9a:	f043 0220 	orr.w	r2, r3, #32
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e023      	b.n	8008ff6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	0c1b      	lsrs	r3, r3, #16
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d10d      	bne.n	8008fd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	43da      	mvns	r2, r3
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	bf0c      	ite	eq
 8008fca:	2301      	moveq	r3, #1
 8008fcc:	2300      	movne	r3, #0
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	e00c      	b.n	8008fee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	699b      	ldr	r3, [r3, #24]
 8008fda:	43da      	mvns	r2, r3
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	4013      	ands	r3, r2
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	bf0c      	ite	eq
 8008fe6:	2301      	moveq	r3, #1
 8008fe8:	2300      	movne	r3, #0
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	461a      	mov	r2, r3
 8008fee:	79fb      	ldrb	r3, [r7, #7]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d0b6      	beq.n	8008f62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b084      	sub	sp, #16
 8009002:	af00      	add	r7, sp, #0
 8009004:	60f8      	str	r0, [r7, #12]
 8009006:	60b9      	str	r1, [r7, #8]
 8009008:	607a      	str	r2, [r7, #4]
 800900a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800900c:	e051      	b.n	80090b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	695b      	ldr	r3, [r3, #20]
 8009014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800901c:	d123      	bne.n	8009066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800902c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009036:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2220      	movs	r2, #32
 8009042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009052:	f043 0204 	orr.w	r2, r3, #4
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e046      	b.n	80090f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800906c:	d021      	beq.n	80090b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800906e:	f7fb fbcb 	bl	8004808 <HAL_GetTick>
 8009072:	4602      	mov	r2, r0
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	429a      	cmp	r2, r3
 800907c:	d302      	bcc.n	8009084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d116      	bne.n	80090b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2220      	movs	r2, #32
 800908e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909e:	f043 0220 	orr.w	r2, r3, #32
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e020      	b.n	80090f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	0c1b      	lsrs	r3, r3, #16
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d10c      	bne.n	80090d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	43da      	mvns	r2, r3
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	4013      	ands	r3, r2
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	bf14      	ite	ne
 80090ce:	2301      	movne	r3, #1
 80090d0:	2300      	moveq	r3, #0
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	e00b      	b.n	80090ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	43da      	mvns	r2, r3
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	4013      	ands	r3, r2
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	bf14      	ite	ne
 80090e8:	2301      	movne	r3, #1
 80090ea:	2300      	moveq	r3, #0
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d18d      	bne.n	800900e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009108:	e02d      	b.n	8009166 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f000 f86a 	bl	80091e4 <I2C_IsAcknowledgeFailed>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e02d      	b.n	8009176 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009120:	d021      	beq.n	8009166 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009122:	f7fb fb71 	bl	8004808 <HAL_GetTick>
 8009126:	4602      	mov	r2, r0
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	1ad3      	subs	r3, r2, r3
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	429a      	cmp	r2, r3
 8009130:	d302      	bcc.n	8009138 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d116      	bne.n	8009166 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2220      	movs	r2, #32
 8009142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009152:	f043 0220 	orr.w	r2, r3, #32
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e007      	b.n	8009176 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	695b      	ldr	r3, [r3, #20]
 800916c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009170:	2b80      	cmp	r3, #128	; 0x80
 8009172:	d1ca      	bne.n	800910a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
	...

08009180 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800918c:	4b13      	ldr	r3, [pc, #76]	; (80091dc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	08db      	lsrs	r3, r3, #3
 8009192:	4a13      	ldr	r2, [pc, #76]	; (80091e0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009194:	fba2 2303 	umull	r2, r3, r2, r3
 8009198:	0a1a      	lsrs	r2, r3, #8
 800919a:	4613      	mov	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d107      	bne.n	80091be <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b2:	f043 0220 	orr.w	r2, r3, #32
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e008      	b.n	80091d0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091cc:	d0e9      	beq.n	80091a2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	20000008 	.word	0x20000008
 80091e0:	14f8b589 	.word	0x14f8b589

080091e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091fa:	d11b      	bne.n	8009234 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009204:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2220      	movs	r2, #32
 8009210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009220:	f043 0204 	orr.w	r2, r3, #4
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e000      	b.n	8009236 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009242:	b480      	push	{r7}
 8009244:	b083      	sub	sp, #12
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009252:	d103      	bne.n	800925c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800925a:	e007      	b.n	800926c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009260:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009264:	d102      	bne.n	800926c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2208      	movs	r2, #8
 800926a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e264      	b.n	8009754 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	2b00      	cmp	r3, #0
 8009294:	d075      	beq.n	8009382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009296:	4ba3      	ldr	r3, [pc, #652]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	f003 030c 	and.w	r3, r3, #12
 800929e:	2b04      	cmp	r3, #4
 80092a0:	d00c      	beq.n	80092bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80092a2:	4ba0      	ldr	r3, [pc, #640]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80092aa:	2b08      	cmp	r3, #8
 80092ac:	d112      	bne.n	80092d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80092ae:	4b9d      	ldr	r3, [pc, #628]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092ba:	d10b      	bne.n	80092d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092bc:	4b99      	ldr	r3, [pc, #612]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d05b      	beq.n	8009380 <HAL_RCC_OscConfig+0x108>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d157      	bne.n	8009380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e23f      	b.n	8009754 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092dc:	d106      	bne.n	80092ec <HAL_RCC_OscConfig+0x74>
 80092de:	4b91      	ldr	r3, [pc, #580]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a90      	ldr	r2, [pc, #576]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80092e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	e01d      	b.n	8009328 <HAL_RCC_OscConfig+0xb0>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092f4:	d10c      	bne.n	8009310 <HAL_RCC_OscConfig+0x98>
 80092f6:	4b8b      	ldr	r3, [pc, #556]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a8a      	ldr	r2, [pc, #552]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80092fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009300:	6013      	str	r3, [r2, #0]
 8009302:	4b88      	ldr	r3, [pc, #544]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a87      	ldr	r2, [pc, #540]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 8009308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800930c:	6013      	str	r3, [r2, #0]
 800930e:	e00b      	b.n	8009328 <HAL_RCC_OscConfig+0xb0>
 8009310:	4b84      	ldr	r3, [pc, #528]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a83      	ldr	r2, [pc, #524]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 8009316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800931a:	6013      	str	r3, [r2, #0]
 800931c:	4b81      	ldr	r3, [pc, #516]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a80      	ldr	r2, [pc, #512]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 8009322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d013      	beq.n	8009358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009330:	f7fb fa6a 	bl	8004808 <HAL_GetTick>
 8009334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009336:	e008      	b.n	800934a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009338:	f7fb fa66 	bl	8004808 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	2b64      	cmp	r3, #100	; 0x64
 8009344:	d901      	bls.n	800934a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e204      	b.n	8009754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800934a:	4b76      	ldr	r3, [pc, #472]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0f0      	beq.n	8009338 <HAL_RCC_OscConfig+0xc0>
 8009356:	e014      	b.n	8009382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009358:	f7fb fa56 	bl	8004808 <HAL_GetTick>
 800935c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800935e:	e008      	b.n	8009372 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009360:	f7fb fa52 	bl	8004808 <HAL_GetTick>
 8009364:	4602      	mov	r2, r0
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	2b64      	cmp	r3, #100	; 0x64
 800936c:	d901      	bls.n	8009372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800936e:	2303      	movs	r3, #3
 8009370:	e1f0      	b.n	8009754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009372:	4b6c      	ldr	r3, [pc, #432]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1f0      	bne.n	8009360 <HAL_RCC_OscConfig+0xe8>
 800937e:	e000      	b.n	8009382 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 0302 	and.w	r3, r3, #2
 800938a:	2b00      	cmp	r3, #0
 800938c:	d063      	beq.n	8009456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800938e:	4b65      	ldr	r3, [pc, #404]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	f003 030c 	and.w	r3, r3, #12
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00b      	beq.n	80093b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800939a:	4b62      	ldr	r3, [pc, #392]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80093a2:	2b08      	cmp	r3, #8
 80093a4:	d11c      	bne.n	80093e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80093a6:	4b5f      	ldr	r3, [pc, #380]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d116      	bne.n	80093e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093b2:	4b5c      	ldr	r3, [pc, #368]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 0302 	and.w	r3, r3, #2
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d005      	beq.n	80093ca <HAL_RCC_OscConfig+0x152>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d001      	beq.n	80093ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e1c4      	b.n	8009754 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093ca:	4b56      	ldr	r3, [pc, #344]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	00db      	lsls	r3, r3, #3
 80093d8:	4952      	ldr	r1, [pc, #328]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093de:	e03a      	b.n	8009456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d020      	beq.n	800942a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093e8:	4b4f      	ldr	r3, [pc, #316]	; (8009528 <HAL_RCC_OscConfig+0x2b0>)
 80093ea:	2201      	movs	r2, #1
 80093ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ee:	f7fb fa0b 	bl	8004808 <HAL_GetTick>
 80093f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093f4:	e008      	b.n	8009408 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093f6:	f7fb fa07 	bl	8004808 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	2b02      	cmp	r3, #2
 8009402:	d901      	bls.n	8009408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e1a5      	b.n	8009754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009408:	4b46      	ldr	r3, [pc, #280]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0302 	and.w	r3, r3, #2
 8009410:	2b00      	cmp	r3, #0
 8009412:	d0f0      	beq.n	80093f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009414:	4b43      	ldr	r3, [pc, #268]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	00db      	lsls	r3, r3, #3
 8009422:	4940      	ldr	r1, [pc, #256]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 8009424:	4313      	orrs	r3, r2
 8009426:	600b      	str	r3, [r1, #0]
 8009428:	e015      	b.n	8009456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800942a:	4b3f      	ldr	r3, [pc, #252]	; (8009528 <HAL_RCC_OscConfig+0x2b0>)
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009430:	f7fb f9ea 	bl	8004808 <HAL_GetTick>
 8009434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009436:	e008      	b.n	800944a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009438:	f7fb f9e6 	bl	8004808 <HAL_GetTick>
 800943c:	4602      	mov	r2, r0
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	2b02      	cmp	r3, #2
 8009444:	d901      	bls.n	800944a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e184      	b.n	8009754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800944a:	4b36      	ldr	r3, [pc, #216]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1f0      	bne.n	8009438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0308 	and.w	r3, r3, #8
 800945e:	2b00      	cmp	r3, #0
 8009460:	d030      	beq.n	80094c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d016      	beq.n	8009498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800946a:	4b30      	ldr	r3, [pc, #192]	; (800952c <HAL_RCC_OscConfig+0x2b4>)
 800946c:	2201      	movs	r2, #1
 800946e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009470:	f7fb f9ca 	bl	8004808 <HAL_GetTick>
 8009474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009476:	e008      	b.n	800948a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009478:	f7fb f9c6 	bl	8004808 <HAL_GetTick>
 800947c:	4602      	mov	r2, r0
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	2b02      	cmp	r3, #2
 8009484:	d901      	bls.n	800948a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e164      	b.n	8009754 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800948a:	4b26      	ldr	r3, [pc, #152]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 800948c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d0f0      	beq.n	8009478 <HAL_RCC_OscConfig+0x200>
 8009496:	e015      	b.n	80094c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009498:	4b24      	ldr	r3, [pc, #144]	; (800952c <HAL_RCC_OscConfig+0x2b4>)
 800949a:	2200      	movs	r2, #0
 800949c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800949e:	f7fb f9b3 	bl	8004808 <HAL_GetTick>
 80094a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094a4:	e008      	b.n	80094b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094a6:	f7fb f9af 	bl	8004808 <HAL_GetTick>
 80094aa:	4602      	mov	r2, r0
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d901      	bls.n	80094b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80094b4:	2303      	movs	r3, #3
 80094b6:	e14d      	b.n	8009754 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094b8:	4b1a      	ldr	r3, [pc, #104]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80094ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094bc:	f003 0302 	and.w	r3, r3, #2
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d1f0      	bne.n	80094a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0304 	and.w	r3, r3, #4
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 80a0 	beq.w	8009612 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094d2:	2300      	movs	r3, #0
 80094d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094d6:	4b13      	ldr	r3, [pc, #76]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80094d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10f      	bne.n	8009502 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094e2:	2300      	movs	r3, #0
 80094e4:	60bb      	str	r3, [r7, #8]
 80094e6:	4b0f      	ldr	r3, [pc, #60]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80094e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ea:	4a0e      	ldr	r2, [pc, #56]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80094ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094f0:	6413      	str	r3, [r2, #64]	; 0x40
 80094f2:	4b0c      	ldr	r3, [pc, #48]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80094f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094fa:	60bb      	str	r3, [r7, #8]
 80094fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094fe:	2301      	movs	r3, #1
 8009500:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009502:	4b0b      	ldr	r3, [pc, #44]	; (8009530 <HAL_RCC_OscConfig+0x2b8>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800950a:	2b00      	cmp	r3, #0
 800950c:	d121      	bne.n	8009552 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800950e:	4b08      	ldr	r3, [pc, #32]	; (8009530 <HAL_RCC_OscConfig+0x2b8>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a07      	ldr	r2, [pc, #28]	; (8009530 <HAL_RCC_OscConfig+0x2b8>)
 8009514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800951a:	f7fb f975 	bl	8004808 <HAL_GetTick>
 800951e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009520:	e011      	b.n	8009546 <HAL_RCC_OscConfig+0x2ce>
 8009522:	bf00      	nop
 8009524:	40023800 	.word	0x40023800
 8009528:	42470000 	.word	0x42470000
 800952c:	42470e80 	.word	0x42470e80
 8009530:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009534:	f7fb f968 	bl	8004808 <HAL_GetTick>
 8009538:	4602      	mov	r2, r0
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	2b02      	cmp	r3, #2
 8009540:	d901      	bls.n	8009546 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009542:	2303      	movs	r3, #3
 8009544:	e106      	b.n	8009754 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009546:	4b85      	ldr	r3, [pc, #532]	; (800975c <HAL_RCC_OscConfig+0x4e4>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800954e:	2b00      	cmp	r3, #0
 8009550:	d0f0      	beq.n	8009534 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d106      	bne.n	8009568 <HAL_RCC_OscConfig+0x2f0>
 800955a:	4b81      	ldr	r3, [pc, #516]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 800955c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800955e:	4a80      	ldr	r2, [pc, #512]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 8009560:	f043 0301 	orr.w	r3, r3, #1
 8009564:	6713      	str	r3, [r2, #112]	; 0x70
 8009566:	e01c      	b.n	80095a2 <HAL_RCC_OscConfig+0x32a>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	2b05      	cmp	r3, #5
 800956e:	d10c      	bne.n	800958a <HAL_RCC_OscConfig+0x312>
 8009570:	4b7b      	ldr	r3, [pc, #492]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 8009572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009574:	4a7a      	ldr	r2, [pc, #488]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 8009576:	f043 0304 	orr.w	r3, r3, #4
 800957a:	6713      	str	r3, [r2, #112]	; 0x70
 800957c:	4b78      	ldr	r3, [pc, #480]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 800957e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009580:	4a77      	ldr	r2, [pc, #476]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 8009582:	f043 0301 	orr.w	r3, r3, #1
 8009586:	6713      	str	r3, [r2, #112]	; 0x70
 8009588:	e00b      	b.n	80095a2 <HAL_RCC_OscConfig+0x32a>
 800958a:	4b75      	ldr	r3, [pc, #468]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 800958c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800958e:	4a74      	ldr	r2, [pc, #464]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 8009590:	f023 0301 	bic.w	r3, r3, #1
 8009594:	6713      	str	r3, [r2, #112]	; 0x70
 8009596:	4b72      	ldr	r3, [pc, #456]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 8009598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959a:	4a71      	ldr	r2, [pc, #452]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 800959c:	f023 0304 	bic.w	r3, r3, #4
 80095a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d015      	beq.n	80095d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095aa:	f7fb f92d 	bl	8004808 <HAL_GetTick>
 80095ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095b0:	e00a      	b.n	80095c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095b2:	f7fb f929 	bl	8004808 <HAL_GetTick>
 80095b6:	4602      	mov	r2, r0
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d901      	bls.n	80095c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80095c4:	2303      	movs	r3, #3
 80095c6:	e0c5      	b.n	8009754 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095c8:	4b65      	ldr	r3, [pc, #404]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 80095ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095cc:	f003 0302 	and.w	r3, r3, #2
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d0ee      	beq.n	80095b2 <HAL_RCC_OscConfig+0x33a>
 80095d4:	e014      	b.n	8009600 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095d6:	f7fb f917 	bl	8004808 <HAL_GetTick>
 80095da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095dc:	e00a      	b.n	80095f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095de:	f7fb f913 	bl	8004808 <HAL_GetTick>
 80095e2:	4602      	mov	r2, r0
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d901      	bls.n	80095f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e0af      	b.n	8009754 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095f4:	4b5a      	ldr	r3, [pc, #360]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 80095f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f8:	f003 0302 	and.w	r3, r3, #2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1ee      	bne.n	80095de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009600:	7dfb      	ldrb	r3, [r7, #23]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d105      	bne.n	8009612 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009606:	4b56      	ldr	r3, [pc, #344]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 8009608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960a:	4a55      	ldr	r2, [pc, #340]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 800960c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009610:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	2b00      	cmp	r3, #0
 8009618:	f000 809b 	beq.w	8009752 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800961c:	4b50      	ldr	r3, [pc, #320]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	f003 030c 	and.w	r3, r3, #12
 8009624:	2b08      	cmp	r3, #8
 8009626:	d05c      	beq.n	80096e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	2b02      	cmp	r3, #2
 800962e:	d141      	bne.n	80096b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009630:	4b4c      	ldr	r3, [pc, #304]	; (8009764 <HAL_RCC_OscConfig+0x4ec>)
 8009632:	2200      	movs	r2, #0
 8009634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009636:	f7fb f8e7 	bl	8004808 <HAL_GetTick>
 800963a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800963c:	e008      	b.n	8009650 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800963e:	f7fb f8e3 	bl	8004808 <HAL_GetTick>
 8009642:	4602      	mov	r2, r0
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	2b02      	cmp	r3, #2
 800964a:	d901      	bls.n	8009650 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800964c:	2303      	movs	r3, #3
 800964e:	e081      	b.n	8009754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009650:	4b43      	ldr	r3, [pc, #268]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1f0      	bne.n	800963e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	69da      	ldr	r2, [r3, #28]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a1b      	ldr	r3, [r3, #32]
 8009664:	431a      	orrs	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966a:	019b      	lsls	r3, r3, #6
 800966c:	431a      	orrs	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009672:	085b      	lsrs	r3, r3, #1
 8009674:	3b01      	subs	r3, #1
 8009676:	041b      	lsls	r3, r3, #16
 8009678:	431a      	orrs	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967e:	061b      	lsls	r3, r3, #24
 8009680:	4937      	ldr	r1, [pc, #220]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 8009682:	4313      	orrs	r3, r2
 8009684:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009686:	4b37      	ldr	r3, [pc, #220]	; (8009764 <HAL_RCC_OscConfig+0x4ec>)
 8009688:	2201      	movs	r2, #1
 800968a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800968c:	f7fb f8bc 	bl	8004808 <HAL_GetTick>
 8009690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009692:	e008      	b.n	80096a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009694:	f7fb f8b8 	bl	8004808 <HAL_GetTick>
 8009698:	4602      	mov	r2, r0
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d901      	bls.n	80096a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e056      	b.n	8009754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096a6:	4b2e      	ldr	r3, [pc, #184]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0f0      	beq.n	8009694 <HAL_RCC_OscConfig+0x41c>
 80096b2:	e04e      	b.n	8009752 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096b4:	4b2b      	ldr	r3, [pc, #172]	; (8009764 <HAL_RCC_OscConfig+0x4ec>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096ba:	f7fb f8a5 	bl	8004808 <HAL_GetTick>
 80096be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096c0:	e008      	b.n	80096d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096c2:	f7fb f8a1 	bl	8004808 <HAL_GetTick>
 80096c6:	4602      	mov	r2, r0
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d901      	bls.n	80096d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e03f      	b.n	8009754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096d4:	4b22      	ldr	r3, [pc, #136]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1f0      	bne.n	80096c2 <HAL_RCC_OscConfig+0x44a>
 80096e0:	e037      	b.n	8009752 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d101      	bne.n	80096ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e032      	b.n	8009754 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80096ee:	4b1c      	ldr	r3, [pc, #112]	; (8009760 <HAL_RCC_OscConfig+0x4e8>)
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d028      	beq.n	800974e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009706:	429a      	cmp	r2, r3
 8009708:	d121      	bne.n	800974e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009714:	429a      	cmp	r2, r3
 8009716:	d11a      	bne.n	800974e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800971e:	4013      	ands	r3, r2
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009724:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009726:	4293      	cmp	r3, r2
 8009728:	d111      	bne.n	800974e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009734:	085b      	lsrs	r3, r3, #1
 8009736:	3b01      	subs	r3, #1
 8009738:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800973a:	429a      	cmp	r2, r3
 800973c:	d107      	bne.n	800974e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009748:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800974a:	429a      	cmp	r2, r3
 800974c:	d001      	beq.n	8009752 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e000      	b.n	8009754 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3718      	adds	r7, #24
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	40007000 	.word	0x40007000
 8009760:	40023800 	.word	0x40023800
 8009764:	42470060 	.word	0x42470060

08009768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e0cc      	b.n	8009916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800977c:	4b68      	ldr	r3, [pc, #416]	; (8009920 <HAL_RCC_ClockConfig+0x1b8>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0307 	and.w	r3, r3, #7
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	429a      	cmp	r2, r3
 8009788:	d90c      	bls.n	80097a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800978a:	4b65      	ldr	r3, [pc, #404]	; (8009920 <HAL_RCC_ClockConfig+0x1b8>)
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	b2d2      	uxtb	r2, r2
 8009790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009792:	4b63      	ldr	r3, [pc, #396]	; (8009920 <HAL_RCC_ClockConfig+0x1b8>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 0307 	and.w	r3, r3, #7
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	429a      	cmp	r2, r3
 800979e:	d001      	beq.n	80097a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e0b8      	b.n	8009916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 0302 	and.w	r3, r3, #2
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d020      	beq.n	80097f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 0304 	and.w	r3, r3, #4
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d005      	beq.n	80097c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80097bc:	4b59      	ldr	r3, [pc, #356]	; (8009924 <HAL_RCC_ClockConfig+0x1bc>)
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	4a58      	ldr	r2, [pc, #352]	; (8009924 <HAL_RCC_ClockConfig+0x1bc>)
 80097c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80097c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0308 	and.w	r3, r3, #8
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d005      	beq.n	80097e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80097d4:	4b53      	ldr	r3, [pc, #332]	; (8009924 <HAL_RCC_ClockConfig+0x1bc>)
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	4a52      	ldr	r2, [pc, #328]	; (8009924 <HAL_RCC_ClockConfig+0x1bc>)
 80097da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80097de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097e0:	4b50      	ldr	r3, [pc, #320]	; (8009924 <HAL_RCC_ClockConfig+0x1bc>)
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	494d      	ldr	r1, [pc, #308]	; (8009924 <HAL_RCC_ClockConfig+0x1bc>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d044      	beq.n	8009888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	2b01      	cmp	r3, #1
 8009804:	d107      	bne.n	8009816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009806:	4b47      	ldr	r3, [pc, #284]	; (8009924 <HAL_RCC_ClockConfig+0x1bc>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d119      	bne.n	8009846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e07f      	b.n	8009916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	2b02      	cmp	r3, #2
 800981c:	d003      	beq.n	8009826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009822:	2b03      	cmp	r3, #3
 8009824:	d107      	bne.n	8009836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009826:	4b3f      	ldr	r3, [pc, #252]	; (8009924 <HAL_RCC_ClockConfig+0x1bc>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d109      	bne.n	8009846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	e06f      	b.n	8009916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009836:	4b3b      	ldr	r3, [pc, #236]	; (8009924 <HAL_RCC_ClockConfig+0x1bc>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 0302 	and.w	r3, r3, #2
 800983e:	2b00      	cmp	r3, #0
 8009840:	d101      	bne.n	8009846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e067      	b.n	8009916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009846:	4b37      	ldr	r3, [pc, #220]	; (8009924 <HAL_RCC_ClockConfig+0x1bc>)
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f023 0203 	bic.w	r2, r3, #3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	4934      	ldr	r1, [pc, #208]	; (8009924 <HAL_RCC_ClockConfig+0x1bc>)
 8009854:	4313      	orrs	r3, r2
 8009856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009858:	f7fa ffd6 	bl	8004808 <HAL_GetTick>
 800985c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800985e:	e00a      	b.n	8009876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009860:	f7fa ffd2 	bl	8004808 <HAL_GetTick>
 8009864:	4602      	mov	r2, r0
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	f241 3288 	movw	r2, #5000	; 0x1388
 800986e:	4293      	cmp	r3, r2
 8009870:	d901      	bls.n	8009876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009872:	2303      	movs	r3, #3
 8009874:	e04f      	b.n	8009916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009876:	4b2b      	ldr	r3, [pc, #172]	; (8009924 <HAL_RCC_ClockConfig+0x1bc>)
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f003 020c 	and.w	r2, r3, #12
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	429a      	cmp	r2, r3
 8009886:	d1eb      	bne.n	8009860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009888:	4b25      	ldr	r3, [pc, #148]	; (8009920 <HAL_RCC_ClockConfig+0x1b8>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0307 	and.w	r3, r3, #7
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	429a      	cmp	r2, r3
 8009894:	d20c      	bcs.n	80098b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009896:	4b22      	ldr	r3, [pc, #136]	; (8009920 <HAL_RCC_ClockConfig+0x1b8>)
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	b2d2      	uxtb	r2, r2
 800989c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800989e:	4b20      	ldr	r3, [pc, #128]	; (8009920 <HAL_RCC_ClockConfig+0x1b8>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 0307 	and.w	r3, r3, #7
 80098a6:	683a      	ldr	r2, [r7, #0]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d001      	beq.n	80098b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e032      	b.n	8009916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 0304 	and.w	r3, r3, #4
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d008      	beq.n	80098ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80098bc:	4b19      	ldr	r3, [pc, #100]	; (8009924 <HAL_RCC_ClockConfig+0x1bc>)
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	4916      	ldr	r1, [pc, #88]	; (8009924 <HAL_RCC_ClockConfig+0x1bc>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f003 0308 	and.w	r3, r3, #8
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d009      	beq.n	80098ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80098da:	4b12      	ldr	r3, [pc, #72]	; (8009924 <HAL_RCC_ClockConfig+0x1bc>)
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	00db      	lsls	r3, r3, #3
 80098e8:	490e      	ldr	r1, [pc, #56]	; (8009924 <HAL_RCC_ClockConfig+0x1bc>)
 80098ea:	4313      	orrs	r3, r2
 80098ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80098ee:	f000 f821 	bl	8009934 <HAL_RCC_GetSysClockFreq>
 80098f2:	4602      	mov	r2, r0
 80098f4:	4b0b      	ldr	r3, [pc, #44]	; (8009924 <HAL_RCC_ClockConfig+0x1bc>)
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	091b      	lsrs	r3, r3, #4
 80098fa:	f003 030f 	and.w	r3, r3, #15
 80098fe:	490a      	ldr	r1, [pc, #40]	; (8009928 <HAL_RCC_ClockConfig+0x1c0>)
 8009900:	5ccb      	ldrb	r3, [r1, r3]
 8009902:	fa22 f303 	lsr.w	r3, r2, r3
 8009906:	4a09      	ldr	r2, [pc, #36]	; (800992c <HAL_RCC_ClockConfig+0x1c4>)
 8009908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800990a:	4b09      	ldr	r3, [pc, #36]	; (8009930 <HAL_RCC_ClockConfig+0x1c8>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4618      	mov	r0, r3
 8009910:	f7fa f974 	bl	8003bfc <HAL_InitTick>

  return HAL_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	40023c00 	.word	0x40023c00
 8009924:	40023800 	.word	0x40023800
 8009928:	08010538 	.word	0x08010538
 800992c:	20000008 	.word	0x20000008
 8009930:	2000000c 	.word	0x2000000c

08009934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009934:	b5b0      	push	{r4, r5, r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800993a:	2100      	movs	r1, #0
 800993c:	6079      	str	r1, [r7, #4]
 800993e:	2100      	movs	r1, #0
 8009940:	60f9      	str	r1, [r7, #12]
 8009942:	2100      	movs	r1, #0
 8009944:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009946:	2100      	movs	r1, #0
 8009948:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800994a:	4952      	ldr	r1, [pc, #328]	; (8009a94 <HAL_RCC_GetSysClockFreq+0x160>)
 800994c:	6889      	ldr	r1, [r1, #8]
 800994e:	f001 010c 	and.w	r1, r1, #12
 8009952:	2908      	cmp	r1, #8
 8009954:	d00d      	beq.n	8009972 <HAL_RCC_GetSysClockFreq+0x3e>
 8009956:	2908      	cmp	r1, #8
 8009958:	f200 8094 	bhi.w	8009a84 <HAL_RCC_GetSysClockFreq+0x150>
 800995c:	2900      	cmp	r1, #0
 800995e:	d002      	beq.n	8009966 <HAL_RCC_GetSysClockFreq+0x32>
 8009960:	2904      	cmp	r1, #4
 8009962:	d003      	beq.n	800996c <HAL_RCC_GetSysClockFreq+0x38>
 8009964:	e08e      	b.n	8009a84 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009966:	4b4c      	ldr	r3, [pc, #304]	; (8009a98 <HAL_RCC_GetSysClockFreq+0x164>)
 8009968:	60bb      	str	r3, [r7, #8]
       break;
 800996a:	e08e      	b.n	8009a8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800996c:	4b4b      	ldr	r3, [pc, #300]	; (8009a9c <HAL_RCC_GetSysClockFreq+0x168>)
 800996e:	60bb      	str	r3, [r7, #8]
      break;
 8009970:	e08b      	b.n	8009a8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009972:	4948      	ldr	r1, [pc, #288]	; (8009a94 <HAL_RCC_GetSysClockFreq+0x160>)
 8009974:	6849      	ldr	r1, [r1, #4]
 8009976:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800997a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800997c:	4945      	ldr	r1, [pc, #276]	; (8009a94 <HAL_RCC_GetSysClockFreq+0x160>)
 800997e:	6849      	ldr	r1, [r1, #4]
 8009980:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009984:	2900      	cmp	r1, #0
 8009986:	d024      	beq.n	80099d2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009988:	4942      	ldr	r1, [pc, #264]	; (8009a94 <HAL_RCC_GetSysClockFreq+0x160>)
 800998a:	6849      	ldr	r1, [r1, #4]
 800998c:	0989      	lsrs	r1, r1, #6
 800998e:	4608      	mov	r0, r1
 8009990:	f04f 0100 	mov.w	r1, #0
 8009994:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009998:	f04f 0500 	mov.w	r5, #0
 800999c:	ea00 0204 	and.w	r2, r0, r4
 80099a0:	ea01 0305 	and.w	r3, r1, r5
 80099a4:	493d      	ldr	r1, [pc, #244]	; (8009a9c <HAL_RCC_GetSysClockFreq+0x168>)
 80099a6:	fb01 f003 	mul.w	r0, r1, r3
 80099aa:	2100      	movs	r1, #0
 80099ac:	fb01 f102 	mul.w	r1, r1, r2
 80099b0:	1844      	adds	r4, r0, r1
 80099b2:	493a      	ldr	r1, [pc, #232]	; (8009a9c <HAL_RCC_GetSysClockFreq+0x168>)
 80099b4:	fba2 0101 	umull	r0, r1, r2, r1
 80099b8:	1863      	adds	r3, r4, r1
 80099ba:	4619      	mov	r1, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	461a      	mov	r2, r3
 80099c0:	f04f 0300 	mov.w	r3, #0
 80099c4:	f7f7 f918 	bl	8000bf8 <__aeabi_uldivmod>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4613      	mov	r3, r2
 80099ce:	60fb      	str	r3, [r7, #12]
 80099d0:	e04a      	b.n	8009a68 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80099d2:	4b30      	ldr	r3, [pc, #192]	; (8009a94 <HAL_RCC_GetSysClockFreq+0x160>)
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	099b      	lsrs	r3, r3, #6
 80099d8:	461a      	mov	r2, r3
 80099da:	f04f 0300 	mov.w	r3, #0
 80099de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80099e2:	f04f 0100 	mov.w	r1, #0
 80099e6:	ea02 0400 	and.w	r4, r2, r0
 80099ea:	ea03 0501 	and.w	r5, r3, r1
 80099ee:	4620      	mov	r0, r4
 80099f0:	4629      	mov	r1, r5
 80099f2:	f04f 0200 	mov.w	r2, #0
 80099f6:	f04f 0300 	mov.w	r3, #0
 80099fa:	014b      	lsls	r3, r1, #5
 80099fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009a00:	0142      	lsls	r2, r0, #5
 8009a02:	4610      	mov	r0, r2
 8009a04:	4619      	mov	r1, r3
 8009a06:	1b00      	subs	r0, r0, r4
 8009a08:	eb61 0105 	sbc.w	r1, r1, r5
 8009a0c:	f04f 0200 	mov.w	r2, #0
 8009a10:	f04f 0300 	mov.w	r3, #0
 8009a14:	018b      	lsls	r3, r1, #6
 8009a16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009a1a:	0182      	lsls	r2, r0, #6
 8009a1c:	1a12      	subs	r2, r2, r0
 8009a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8009a22:	f04f 0000 	mov.w	r0, #0
 8009a26:	f04f 0100 	mov.w	r1, #0
 8009a2a:	00d9      	lsls	r1, r3, #3
 8009a2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009a30:	00d0      	lsls	r0, r2, #3
 8009a32:	4602      	mov	r2, r0
 8009a34:	460b      	mov	r3, r1
 8009a36:	1912      	adds	r2, r2, r4
 8009a38:	eb45 0303 	adc.w	r3, r5, r3
 8009a3c:	f04f 0000 	mov.w	r0, #0
 8009a40:	f04f 0100 	mov.w	r1, #0
 8009a44:	0299      	lsls	r1, r3, #10
 8009a46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009a4a:	0290      	lsls	r0, r2, #10
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4610      	mov	r0, r2
 8009a52:	4619      	mov	r1, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	461a      	mov	r2, r3
 8009a58:	f04f 0300 	mov.w	r3, #0
 8009a5c:	f7f7 f8cc 	bl	8000bf8 <__aeabi_uldivmod>
 8009a60:	4602      	mov	r2, r0
 8009a62:	460b      	mov	r3, r1
 8009a64:	4613      	mov	r3, r2
 8009a66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a68:	4b0a      	ldr	r3, [pc, #40]	; (8009a94 <HAL_RCC_GetSysClockFreq+0x160>)
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	0c1b      	lsrs	r3, r3, #16
 8009a6e:	f003 0303 	and.w	r3, r3, #3
 8009a72:	3301      	adds	r3, #1
 8009a74:	005b      	lsls	r3, r3, #1
 8009a76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a80:	60bb      	str	r3, [r7, #8]
      break;
 8009a82:	e002      	b.n	8009a8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009a84:	4b04      	ldr	r3, [pc, #16]	; (8009a98 <HAL_RCC_GetSysClockFreq+0x164>)
 8009a86:	60bb      	str	r3, [r7, #8]
      break;
 8009a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009a8a:	68bb      	ldr	r3, [r7, #8]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bdb0      	pop	{r4, r5, r7, pc}
 8009a94:	40023800 	.word	0x40023800
 8009a98:	00f42400 	.word	0x00f42400
 8009a9c:	016e3600 	.word	0x016e3600

08009aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009aa4:	4b03      	ldr	r3, [pc, #12]	; (8009ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	20000008 	.word	0x20000008

08009ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009abc:	f7ff fff0 	bl	8009aa0 <HAL_RCC_GetHCLKFreq>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	4b05      	ldr	r3, [pc, #20]	; (8009ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	0a9b      	lsrs	r3, r3, #10
 8009ac8:	f003 0307 	and.w	r3, r3, #7
 8009acc:	4903      	ldr	r1, [pc, #12]	; (8009adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ace:	5ccb      	ldrb	r3, [r1, r3]
 8009ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	40023800 	.word	0x40023800
 8009adc:	08010548 	.word	0x08010548

08009ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009ae4:	f7ff ffdc 	bl	8009aa0 <HAL_RCC_GetHCLKFreq>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	0b5b      	lsrs	r3, r3, #13
 8009af0:	f003 0307 	and.w	r3, r3, #7
 8009af4:	4903      	ldr	r1, [pc, #12]	; (8009b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009af6:	5ccb      	ldrb	r3, [r1, r3]
 8009af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	40023800 	.word	0x40023800
 8009b04:	08010548 	.word	0x08010548

08009b08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	220f      	movs	r2, #15
 8009b16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009b18:	4b12      	ldr	r3, [pc, #72]	; (8009b64 <HAL_RCC_GetClockConfig+0x5c>)
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	f003 0203 	and.w	r2, r3, #3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009b24:	4b0f      	ldr	r3, [pc, #60]	; (8009b64 <HAL_RCC_GetClockConfig+0x5c>)
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009b30:	4b0c      	ldr	r3, [pc, #48]	; (8009b64 <HAL_RCC_GetClockConfig+0x5c>)
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009b3c:	4b09      	ldr	r3, [pc, #36]	; (8009b64 <HAL_RCC_GetClockConfig+0x5c>)
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	08db      	lsrs	r3, r3, #3
 8009b42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009b4a:	4b07      	ldr	r3, [pc, #28]	; (8009b68 <HAL_RCC_GetClockConfig+0x60>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 0207 	and.w	r2, r3, #7
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	601a      	str	r2, [r3, #0]
}
 8009b56:	bf00      	nop
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	40023800 	.word	0x40023800
 8009b68:	40023c00 	.word	0x40023c00

08009b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d101      	bne.n	8009b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e041      	b.n	8009c02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d106      	bne.n	8009b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7fa fb94 	bl	80042c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	4619      	mov	r1, r3
 8009baa:	4610      	mov	r0, r2
 8009bac:	f000 fd38 	bl	800a620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
	...

08009c0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b085      	sub	sp, #20
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d001      	beq.n	8009c24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e044      	b.n	8009cae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2202      	movs	r2, #2
 8009c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68da      	ldr	r2, [r3, #12]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f042 0201 	orr.w	r2, r2, #1
 8009c3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a1e      	ldr	r2, [pc, #120]	; (8009cbc <HAL_TIM_Base_Start_IT+0xb0>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d018      	beq.n	8009c78 <HAL_TIM_Base_Start_IT+0x6c>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c4e:	d013      	beq.n	8009c78 <HAL_TIM_Base_Start_IT+0x6c>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a1a      	ldr	r2, [pc, #104]	; (8009cc0 <HAL_TIM_Base_Start_IT+0xb4>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d00e      	beq.n	8009c78 <HAL_TIM_Base_Start_IT+0x6c>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a19      	ldr	r2, [pc, #100]	; (8009cc4 <HAL_TIM_Base_Start_IT+0xb8>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d009      	beq.n	8009c78 <HAL_TIM_Base_Start_IT+0x6c>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a17      	ldr	r2, [pc, #92]	; (8009cc8 <HAL_TIM_Base_Start_IT+0xbc>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d004      	beq.n	8009c78 <HAL_TIM_Base_Start_IT+0x6c>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a16      	ldr	r2, [pc, #88]	; (8009ccc <HAL_TIM_Base_Start_IT+0xc0>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d111      	bne.n	8009c9c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f003 0307 	and.w	r3, r3, #7
 8009c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2b06      	cmp	r3, #6
 8009c88:	d010      	beq.n	8009cac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f042 0201 	orr.w	r2, r2, #1
 8009c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c9a:	e007      	b.n	8009cac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f042 0201 	orr.w	r2, r2, #1
 8009caa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	40010000 	.word	0x40010000
 8009cc0:	40000400 	.word	0x40000400
 8009cc4:	40000800 	.word	0x40000800
 8009cc8:	40000c00 	.word	0x40000c00
 8009ccc:	40014000 	.word	0x40014000

08009cd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d101      	bne.n	8009ce2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e041      	b.n	8009d66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d106      	bne.n	8009cfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f839 	bl	8009d6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4610      	mov	r0, r2
 8009d10:	f000 fc86 	bl	800a620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b083      	sub	sp, #12
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009d76:	bf00      	nop
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
	...

08009d84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d109      	bne.n	8009da8 <HAL_TIM_PWM_Start+0x24>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	bf14      	ite	ne
 8009da0:	2301      	movne	r3, #1
 8009da2:	2300      	moveq	r3, #0
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	e022      	b.n	8009dee <HAL_TIM_PWM_Start+0x6a>
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	2b04      	cmp	r3, #4
 8009dac:	d109      	bne.n	8009dc2 <HAL_TIM_PWM_Start+0x3e>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	bf14      	ite	ne
 8009dba:	2301      	movne	r3, #1
 8009dbc:	2300      	moveq	r3, #0
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	e015      	b.n	8009dee <HAL_TIM_PWM_Start+0x6a>
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	2b08      	cmp	r3, #8
 8009dc6:	d109      	bne.n	8009ddc <HAL_TIM_PWM_Start+0x58>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	bf14      	ite	ne
 8009dd4:	2301      	movne	r3, #1
 8009dd6:	2300      	moveq	r3, #0
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	e008      	b.n	8009dee <HAL_TIM_PWM_Start+0x6a>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	bf14      	ite	ne
 8009de8:	2301      	movne	r3, #1
 8009dea:	2300      	moveq	r3, #0
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e068      	b.n	8009ec8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d104      	bne.n	8009e06 <HAL_TIM_PWM_Start+0x82>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2202      	movs	r2, #2
 8009e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e04:	e013      	b.n	8009e2e <HAL_TIM_PWM_Start+0xaa>
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	2b04      	cmp	r3, #4
 8009e0a:	d104      	bne.n	8009e16 <HAL_TIM_PWM_Start+0x92>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2202      	movs	r2, #2
 8009e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e14:	e00b      	b.n	8009e2e <HAL_TIM_PWM_Start+0xaa>
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	2b08      	cmp	r3, #8
 8009e1a:	d104      	bne.n	8009e26 <HAL_TIM_PWM_Start+0xa2>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2202      	movs	r2, #2
 8009e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e24:	e003      	b.n	8009e2e <HAL_TIM_PWM_Start+0xaa>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2202      	movs	r2, #2
 8009e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2201      	movs	r2, #1
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 fe98 	bl	800ab6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a23      	ldr	r2, [pc, #140]	; (8009ed0 <HAL_TIM_PWM_Start+0x14c>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d107      	bne.n	8009e56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a1d      	ldr	r2, [pc, #116]	; (8009ed0 <HAL_TIM_PWM_Start+0x14c>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d018      	beq.n	8009e92 <HAL_TIM_PWM_Start+0x10e>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e68:	d013      	beq.n	8009e92 <HAL_TIM_PWM_Start+0x10e>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a19      	ldr	r2, [pc, #100]	; (8009ed4 <HAL_TIM_PWM_Start+0x150>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d00e      	beq.n	8009e92 <HAL_TIM_PWM_Start+0x10e>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a17      	ldr	r2, [pc, #92]	; (8009ed8 <HAL_TIM_PWM_Start+0x154>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d009      	beq.n	8009e92 <HAL_TIM_PWM_Start+0x10e>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a16      	ldr	r2, [pc, #88]	; (8009edc <HAL_TIM_PWM_Start+0x158>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d004      	beq.n	8009e92 <HAL_TIM_PWM_Start+0x10e>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a14      	ldr	r2, [pc, #80]	; (8009ee0 <HAL_TIM_PWM_Start+0x15c>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d111      	bne.n	8009eb6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	f003 0307 	and.w	r3, r3, #7
 8009e9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2b06      	cmp	r3, #6
 8009ea2:	d010      	beq.n	8009ec6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f042 0201 	orr.w	r2, r2, #1
 8009eb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eb4:	e007      	b.n	8009ec6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f042 0201 	orr.w	r2, r2, #1
 8009ec4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	40010000 	.word	0x40010000
 8009ed4:	40000400 	.word	0x40000400
 8009ed8:	40000800 	.word	0x40000800
 8009edc:	40000c00 	.word	0x40000c00
 8009ee0:	40014000 	.word	0x40014000

08009ee4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d109      	bne.n	8009f08 <HAL_TIM_PWM_Start_IT+0x24>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	bf14      	ite	ne
 8009f00:	2301      	movne	r3, #1
 8009f02:	2300      	moveq	r3, #0
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	e022      	b.n	8009f4e <HAL_TIM_PWM_Start_IT+0x6a>
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	2b04      	cmp	r3, #4
 8009f0c:	d109      	bne.n	8009f22 <HAL_TIM_PWM_Start_IT+0x3e>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	bf14      	ite	ne
 8009f1a:	2301      	movne	r3, #1
 8009f1c:	2300      	moveq	r3, #0
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	e015      	b.n	8009f4e <HAL_TIM_PWM_Start_IT+0x6a>
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2b08      	cmp	r3, #8
 8009f26:	d109      	bne.n	8009f3c <HAL_TIM_PWM_Start_IT+0x58>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	bf14      	ite	ne
 8009f34:	2301      	movne	r3, #1
 8009f36:	2300      	moveq	r3, #0
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	e008      	b.n	8009f4e <HAL_TIM_PWM_Start_IT+0x6a>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	bf14      	ite	ne
 8009f48:	2301      	movne	r3, #1
 8009f4a:	2300      	moveq	r3, #0
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e0ae      	b.n	800a0b4 <HAL_TIM_PWM_Start_IT+0x1d0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d104      	bne.n	8009f66 <HAL_TIM_PWM_Start_IT+0x82>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2202      	movs	r2, #2
 8009f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f64:	e013      	b.n	8009f8e <HAL_TIM_PWM_Start_IT+0xaa>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	2b04      	cmp	r3, #4
 8009f6a:	d104      	bne.n	8009f76 <HAL_TIM_PWM_Start_IT+0x92>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2202      	movs	r2, #2
 8009f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f74:	e00b      	b.n	8009f8e <HAL_TIM_PWM_Start_IT+0xaa>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b08      	cmp	r3, #8
 8009f7a:	d104      	bne.n	8009f86 <HAL_TIM_PWM_Start_IT+0xa2>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2202      	movs	r2, #2
 8009f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f84:	e003      	b.n	8009f8e <HAL_TIM_PWM_Start_IT+0xaa>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2202      	movs	r2, #2
 8009f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	2b0c      	cmp	r3, #12
 8009f92:	d841      	bhi.n	800a018 <HAL_TIM_PWM_Start_IT+0x134>
 8009f94:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <HAL_TIM_PWM_Start_IT+0xb8>)
 8009f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9a:	bf00      	nop
 8009f9c:	08009fd1 	.word	0x08009fd1
 8009fa0:	0800a019 	.word	0x0800a019
 8009fa4:	0800a019 	.word	0x0800a019
 8009fa8:	0800a019 	.word	0x0800a019
 8009fac:	08009fe3 	.word	0x08009fe3
 8009fb0:	0800a019 	.word	0x0800a019
 8009fb4:	0800a019 	.word	0x0800a019
 8009fb8:	0800a019 	.word	0x0800a019
 8009fbc:	08009ff5 	.word	0x08009ff5
 8009fc0:	0800a019 	.word	0x0800a019
 8009fc4:	0800a019 	.word	0x0800a019
 8009fc8:	0800a019 	.word	0x0800a019
 8009fcc:	0800a007 	.word	0x0800a007
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68da      	ldr	r2, [r3, #12]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f042 0202 	orr.w	r2, r2, #2
 8009fde:	60da      	str	r2, [r3, #12]
      break;
 8009fe0:	e01b      	b.n	800a01a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68da      	ldr	r2, [r3, #12]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f042 0204 	orr.w	r2, r2, #4
 8009ff0:	60da      	str	r2, [r3, #12]
      break;
 8009ff2:	e012      	b.n	800a01a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68da      	ldr	r2, [r3, #12]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f042 0208 	orr.w	r2, r2, #8
 800a002:	60da      	str	r2, [r3, #12]
      break;
 800a004:	e009      	b.n	800a01a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68da      	ldr	r2, [r3, #12]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f042 0210 	orr.w	r2, r2, #16
 800a014:	60da      	str	r2, [r3, #12]
      break;
 800a016:	e000      	b.n	800a01a <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 800a018:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2201      	movs	r2, #1
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	4618      	mov	r0, r3
 800a024:	f000 fda2 	bl	800ab6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a23      	ldr	r2, [pc, #140]	; (800a0bc <HAL_TIM_PWM_Start_IT+0x1d8>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d107      	bne.n	800a042 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a040:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a1d      	ldr	r2, [pc, #116]	; (800a0bc <HAL_TIM_PWM_Start_IT+0x1d8>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d018      	beq.n	800a07e <HAL_TIM_PWM_Start_IT+0x19a>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a054:	d013      	beq.n	800a07e <HAL_TIM_PWM_Start_IT+0x19a>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a19      	ldr	r2, [pc, #100]	; (800a0c0 <HAL_TIM_PWM_Start_IT+0x1dc>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d00e      	beq.n	800a07e <HAL_TIM_PWM_Start_IT+0x19a>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a17      	ldr	r2, [pc, #92]	; (800a0c4 <HAL_TIM_PWM_Start_IT+0x1e0>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d009      	beq.n	800a07e <HAL_TIM_PWM_Start_IT+0x19a>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a16      	ldr	r2, [pc, #88]	; (800a0c8 <HAL_TIM_PWM_Start_IT+0x1e4>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d004      	beq.n	800a07e <HAL_TIM_PWM_Start_IT+0x19a>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a14      	ldr	r2, [pc, #80]	; (800a0cc <HAL_TIM_PWM_Start_IT+0x1e8>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d111      	bne.n	800a0a2 <HAL_TIM_PWM_Start_IT+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f003 0307 	and.w	r3, r3, #7
 800a088:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2b06      	cmp	r3, #6
 800a08e:	d010      	beq.n	800a0b2 <HAL_TIM_PWM_Start_IT+0x1ce>
    {
      __HAL_TIM_ENABLE(htim);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f042 0201 	orr.w	r2, r2, #1
 800a09e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0a0:	e007      	b.n	800a0b2 <HAL_TIM_PWM_Start_IT+0x1ce>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f042 0201 	orr.w	r2, r2, #1
 800a0b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	40010000 	.word	0x40010000
 800a0c0:	40000400 	.word	0x40000400
 800a0c4:	40000800 	.word	0x40000800
 800a0c8:	40000c00 	.word	0x40000c00
 800a0cc:	40014000 	.word	0x40014000

0800a0d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	f003 0302 	and.w	r3, r3, #2
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d122      	bne.n	800a12c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	f003 0302 	and.w	r3, r3, #2
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d11b      	bne.n	800a12c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f06f 0202 	mvn.w	r2, #2
 800a0fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	f003 0303 	and.w	r3, r3, #3
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 fa70 	bl	800a5f8 <HAL_TIM_IC_CaptureCallback>
 800a118:	e005      	b.n	800a126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fa62 	bl	800a5e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7f8 f909 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	f003 0304 	and.w	r3, r3, #4
 800a136:	2b04      	cmp	r3, #4
 800a138:	d122      	bne.n	800a180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	f003 0304 	and.w	r3, r3, #4
 800a144:	2b04      	cmp	r3, #4
 800a146:	d11b      	bne.n	800a180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f06f 0204 	mvn.w	r2, #4
 800a150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2202      	movs	r2, #2
 800a156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	699b      	ldr	r3, [r3, #24]
 800a15e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a162:	2b00      	cmp	r3, #0
 800a164:	d003      	beq.n	800a16e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fa46 	bl	800a5f8 <HAL_TIM_IC_CaptureCallback>
 800a16c:	e005      	b.n	800a17a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fa38 	bl	800a5e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7f8 f8df 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	f003 0308 	and.w	r3, r3, #8
 800a18a:	2b08      	cmp	r3, #8
 800a18c:	d122      	bne.n	800a1d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	f003 0308 	and.w	r3, r3, #8
 800a198:	2b08      	cmp	r3, #8
 800a19a:	d11b      	bne.n	800a1d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f06f 0208 	mvn.w	r2, #8
 800a1a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2204      	movs	r2, #4
 800a1aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	69db      	ldr	r3, [r3, #28]
 800a1b2:	f003 0303 	and.w	r3, r3, #3
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d003      	beq.n	800a1c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fa1c 	bl	800a5f8 <HAL_TIM_IC_CaptureCallback>
 800a1c0:	e005      	b.n	800a1ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fa0e 	bl	800a5e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7f8 f8b5 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	f003 0310 	and.w	r3, r3, #16
 800a1de:	2b10      	cmp	r3, #16
 800a1e0:	d122      	bne.n	800a228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f003 0310 	and.w	r3, r3, #16
 800a1ec:	2b10      	cmp	r3, #16
 800a1ee:	d11b      	bne.n	800a228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f06f 0210 	mvn.w	r2, #16
 800a1f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2208      	movs	r2, #8
 800a1fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	69db      	ldr	r3, [r3, #28]
 800a206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d003      	beq.n	800a216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f9f2 	bl	800a5f8 <HAL_TIM_IC_CaptureCallback>
 800a214:	e005      	b.n	800a222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f9e4 	bl	800a5e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f7f8 f88b 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	f003 0301 	and.w	r3, r3, #1
 800a232:	2b01      	cmp	r3, #1
 800a234:	d10e      	bne.n	800a254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	f003 0301 	and.w	r3, r3, #1
 800a240:	2b01      	cmp	r3, #1
 800a242:	d107      	bne.n	800a254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f06f 0201 	mvn.w	r2, #1
 800a24c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f7f9 fba6 	bl	80039a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a25e:	2b80      	cmp	r3, #128	; 0x80
 800a260:	d10e      	bne.n	800a280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a26c:	2b80      	cmp	r3, #128	; 0x80
 800a26e:	d107      	bne.n	800a280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 fdf0 	bl	800ae60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28a:	2b40      	cmp	r3, #64	; 0x40
 800a28c:	d10e      	bne.n	800a2ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a298:	2b40      	cmp	r3, #64	; 0x40
 800a29a:	d107      	bne.n	800a2ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f9b0 	bl	800a60c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	691b      	ldr	r3, [r3, #16]
 800a2b2:	f003 0320 	and.w	r3, r3, #32
 800a2b6:	2b20      	cmp	r3, #32
 800a2b8:	d10e      	bne.n	800a2d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	f003 0320 	and.w	r3, r3, #32
 800a2c4:	2b20      	cmp	r3, #32
 800a2c6:	d107      	bne.n	800a2d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f06f 0220 	mvn.w	r2, #32
 800a2d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fdba 	bl	800ae4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2d8:	bf00      	nop
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d101      	bne.n	800a2fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a2f6:	2302      	movs	r3, #2
 800a2f8:	e0ac      	b.n	800a454 <HAL_TIM_PWM_ConfigChannel+0x174>
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b0c      	cmp	r3, #12
 800a306:	f200 809f 	bhi.w	800a448 <HAL_TIM_PWM_ConfigChannel+0x168>
 800a30a:	a201      	add	r2, pc, #4	; (adr r2, 800a310 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a310:	0800a345 	.word	0x0800a345
 800a314:	0800a449 	.word	0x0800a449
 800a318:	0800a449 	.word	0x0800a449
 800a31c:	0800a449 	.word	0x0800a449
 800a320:	0800a385 	.word	0x0800a385
 800a324:	0800a449 	.word	0x0800a449
 800a328:	0800a449 	.word	0x0800a449
 800a32c:	0800a449 	.word	0x0800a449
 800a330:	0800a3c7 	.word	0x0800a3c7
 800a334:	0800a449 	.word	0x0800a449
 800a338:	0800a449 	.word	0x0800a449
 800a33c:	0800a449 	.word	0x0800a449
 800a340:	0800a407 	.word	0x0800a407
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68b9      	ldr	r1, [r7, #8]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 f9e8 	bl	800a720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	699a      	ldr	r2, [r3, #24]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f042 0208 	orr.w	r2, r2, #8
 800a35e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	699a      	ldr	r2, [r3, #24]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f022 0204 	bic.w	r2, r2, #4
 800a36e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	6999      	ldr	r1, [r3, #24]
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	691a      	ldr	r2, [r3, #16]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	430a      	orrs	r2, r1
 800a380:	619a      	str	r2, [r3, #24]
      break;
 800a382:	e062      	b.n	800a44a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68b9      	ldr	r1, [r7, #8]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 fa2e 	bl	800a7ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	699a      	ldr	r2, [r3, #24]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a39e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	699a      	ldr	r2, [r3, #24]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6999      	ldr	r1, [r3, #24]
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	021a      	lsls	r2, r3, #8
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	430a      	orrs	r2, r1
 800a3c2:	619a      	str	r2, [r3, #24]
      break;
 800a3c4:	e041      	b.n	800a44a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68b9      	ldr	r1, [r7, #8]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 fa79 	bl	800a8c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	69da      	ldr	r2, [r3, #28]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f042 0208 	orr.w	r2, r2, #8
 800a3e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	69da      	ldr	r2, [r3, #28]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f022 0204 	bic.w	r2, r2, #4
 800a3f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	69d9      	ldr	r1, [r3, #28]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	691a      	ldr	r2, [r3, #16]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	430a      	orrs	r2, r1
 800a402:	61da      	str	r2, [r3, #28]
      break;
 800a404:	e021      	b.n	800a44a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	68b9      	ldr	r1, [r7, #8]
 800a40c:	4618      	mov	r0, r3
 800a40e:	f000 fac3 	bl	800a998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	69da      	ldr	r2, [r3, #28]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	69da      	ldr	r2, [r3, #28]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	69d9      	ldr	r1, [r3, #28]
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	021a      	lsls	r2, r3, #8
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	430a      	orrs	r2, r1
 800a444:	61da      	str	r2, [r3, #28]
      break;
 800a446:	e000      	b.n	800a44a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800a448:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d101      	bne.n	800a474 <HAL_TIM_ConfigClockSource+0x18>
 800a470:	2302      	movs	r3, #2
 800a472:	e0b3      	b.n	800a5dc <HAL_TIM_ConfigClockSource+0x180>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2202      	movs	r2, #2
 800a480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a492:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a49a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4ac:	d03e      	beq.n	800a52c <HAL_TIM_ConfigClockSource+0xd0>
 800a4ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4b2:	f200 8087 	bhi.w	800a5c4 <HAL_TIM_ConfigClockSource+0x168>
 800a4b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ba:	f000 8085 	beq.w	800a5c8 <HAL_TIM_ConfigClockSource+0x16c>
 800a4be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4c2:	d87f      	bhi.n	800a5c4 <HAL_TIM_ConfigClockSource+0x168>
 800a4c4:	2b70      	cmp	r3, #112	; 0x70
 800a4c6:	d01a      	beq.n	800a4fe <HAL_TIM_ConfigClockSource+0xa2>
 800a4c8:	2b70      	cmp	r3, #112	; 0x70
 800a4ca:	d87b      	bhi.n	800a5c4 <HAL_TIM_ConfigClockSource+0x168>
 800a4cc:	2b60      	cmp	r3, #96	; 0x60
 800a4ce:	d050      	beq.n	800a572 <HAL_TIM_ConfigClockSource+0x116>
 800a4d0:	2b60      	cmp	r3, #96	; 0x60
 800a4d2:	d877      	bhi.n	800a5c4 <HAL_TIM_ConfigClockSource+0x168>
 800a4d4:	2b50      	cmp	r3, #80	; 0x50
 800a4d6:	d03c      	beq.n	800a552 <HAL_TIM_ConfigClockSource+0xf6>
 800a4d8:	2b50      	cmp	r3, #80	; 0x50
 800a4da:	d873      	bhi.n	800a5c4 <HAL_TIM_ConfigClockSource+0x168>
 800a4dc:	2b40      	cmp	r3, #64	; 0x40
 800a4de:	d058      	beq.n	800a592 <HAL_TIM_ConfigClockSource+0x136>
 800a4e0:	2b40      	cmp	r3, #64	; 0x40
 800a4e2:	d86f      	bhi.n	800a5c4 <HAL_TIM_ConfigClockSource+0x168>
 800a4e4:	2b30      	cmp	r3, #48	; 0x30
 800a4e6:	d064      	beq.n	800a5b2 <HAL_TIM_ConfigClockSource+0x156>
 800a4e8:	2b30      	cmp	r3, #48	; 0x30
 800a4ea:	d86b      	bhi.n	800a5c4 <HAL_TIM_ConfigClockSource+0x168>
 800a4ec:	2b20      	cmp	r3, #32
 800a4ee:	d060      	beq.n	800a5b2 <HAL_TIM_ConfigClockSource+0x156>
 800a4f0:	2b20      	cmp	r3, #32
 800a4f2:	d867      	bhi.n	800a5c4 <HAL_TIM_ConfigClockSource+0x168>
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d05c      	beq.n	800a5b2 <HAL_TIM_ConfigClockSource+0x156>
 800a4f8:	2b10      	cmp	r3, #16
 800a4fa:	d05a      	beq.n	800a5b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a4fc:	e062      	b.n	800a5c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6818      	ldr	r0, [r3, #0]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	6899      	ldr	r1, [r3, #8]
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	f000 fb0d 	bl	800ab2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a520:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	609a      	str	r2, [r3, #8]
      break;
 800a52a:	e04e      	b.n	800a5ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6818      	ldr	r0, [r3, #0]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	6899      	ldr	r1, [r3, #8]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	685a      	ldr	r2, [r3, #4]
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	f000 faf6 	bl	800ab2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	689a      	ldr	r2, [r3, #8]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a54e:	609a      	str	r2, [r3, #8]
      break;
 800a550:	e03b      	b.n	800a5ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6818      	ldr	r0, [r3, #0]
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	6859      	ldr	r1, [r3, #4]
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	461a      	mov	r2, r3
 800a560:	f000 fa6a 	bl	800aa38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2150      	movs	r1, #80	; 0x50
 800a56a:	4618      	mov	r0, r3
 800a56c:	f000 fac3 	bl	800aaf6 <TIM_ITRx_SetConfig>
      break;
 800a570:	e02b      	b.n	800a5ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6818      	ldr	r0, [r3, #0]
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	6859      	ldr	r1, [r3, #4]
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	461a      	mov	r2, r3
 800a580:	f000 fa89 	bl	800aa96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2160      	movs	r1, #96	; 0x60
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 fab3 	bl	800aaf6 <TIM_ITRx_SetConfig>
      break;
 800a590:	e01b      	b.n	800a5ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6818      	ldr	r0, [r3, #0]
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	6859      	ldr	r1, [r3, #4]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	461a      	mov	r2, r3
 800a5a0:	f000 fa4a 	bl	800aa38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2140      	movs	r1, #64	; 0x40
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f000 faa3 	bl	800aaf6 <TIM_ITRx_SetConfig>
      break;
 800a5b0:	e00b      	b.n	800a5ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	4610      	mov	r0, r2
 800a5be:	f000 fa9a 	bl	800aaf6 <TIM_ITRx_SetConfig>
        break;
 800a5c2:	e002      	b.n	800a5ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a5c4:	bf00      	nop
 800a5c6:	e000      	b.n	800a5ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a5c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a34      	ldr	r2, [pc, #208]	; (800a704 <TIM_Base_SetConfig+0xe4>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d00f      	beq.n	800a658 <TIM_Base_SetConfig+0x38>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a63e:	d00b      	beq.n	800a658 <TIM_Base_SetConfig+0x38>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a31      	ldr	r2, [pc, #196]	; (800a708 <TIM_Base_SetConfig+0xe8>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d007      	beq.n	800a658 <TIM_Base_SetConfig+0x38>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	4a30      	ldr	r2, [pc, #192]	; (800a70c <TIM_Base_SetConfig+0xec>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d003      	beq.n	800a658 <TIM_Base_SetConfig+0x38>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	4a2f      	ldr	r2, [pc, #188]	; (800a710 <TIM_Base_SetConfig+0xf0>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d108      	bne.n	800a66a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a65e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a25      	ldr	r2, [pc, #148]	; (800a704 <TIM_Base_SetConfig+0xe4>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d01b      	beq.n	800a6aa <TIM_Base_SetConfig+0x8a>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a678:	d017      	beq.n	800a6aa <TIM_Base_SetConfig+0x8a>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a22      	ldr	r2, [pc, #136]	; (800a708 <TIM_Base_SetConfig+0xe8>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d013      	beq.n	800a6aa <TIM_Base_SetConfig+0x8a>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a21      	ldr	r2, [pc, #132]	; (800a70c <TIM_Base_SetConfig+0xec>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d00f      	beq.n	800a6aa <TIM_Base_SetConfig+0x8a>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a20      	ldr	r2, [pc, #128]	; (800a710 <TIM_Base_SetConfig+0xf0>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d00b      	beq.n	800a6aa <TIM_Base_SetConfig+0x8a>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a1f      	ldr	r2, [pc, #124]	; (800a714 <TIM_Base_SetConfig+0xf4>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d007      	beq.n	800a6aa <TIM_Base_SetConfig+0x8a>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a1e      	ldr	r2, [pc, #120]	; (800a718 <TIM_Base_SetConfig+0xf8>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d003      	beq.n	800a6aa <TIM_Base_SetConfig+0x8a>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a1d      	ldr	r2, [pc, #116]	; (800a71c <TIM_Base_SetConfig+0xfc>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d108      	bne.n	800a6bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	695b      	ldr	r3, [r3, #20]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	689a      	ldr	r2, [r3, #8]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	4a08      	ldr	r2, [pc, #32]	; (800a704 <TIM_Base_SetConfig+0xe4>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d103      	bne.n	800a6f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	691a      	ldr	r2, [r3, #16]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	615a      	str	r2, [r3, #20]
}
 800a6f6:	bf00      	nop
 800a6f8:	3714      	adds	r7, #20
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop
 800a704:	40010000 	.word	0x40010000
 800a708:	40000400 	.word	0x40000400
 800a70c:	40000800 	.word	0x40000800
 800a710:	40000c00 	.word	0x40000c00
 800a714:	40014000 	.word	0x40014000
 800a718:	40014400 	.word	0x40014400
 800a71c:	40014800 	.word	0x40014800

0800a720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a720:	b480      	push	{r7}
 800a722:	b087      	sub	sp, #28
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a1b      	ldr	r3, [r3, #32]
 800a72e:	f023 0201 	bic.w	r2, r3, #1
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a1b      	ldr	r3, [r3, #32]
 800a73a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a74e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f023 0303 	bic.w	r3, r3, #3
 800a756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	4313      	orrs	r3, r2
 800a760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	f023 0302 	bic.w	r3, r3, #2
 800a768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	697a      	ldr	r2, [r7, #20]
 800a770:	4313      	orrs	r3, r2
 800a772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a1c      	ldr	r2, [pc, #112]	; (800a7e8 <TIM_OC1_SetConfig+0xc8>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d10c      	bne.n	800a796 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f023 0308 	bic.w	r3, r3, #8
 800a782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	f023 0304 	bic.w	r3, r3, #4
 800a794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	4a13      	ldr	r2, [pc, #76]	; (800a7e8 <TIM_OC1_SetConfig+0xc8>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d111      	bne.n	800a7c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	695b      	ldr	r3, [r3, #20]
 800a7b2:	693a      	ldr	r2, [r7, #16]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	699b      	ldr	r3, [r3, #24]
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	693a      	ldr	r2, [r7, #16]
 800a7c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	685a      	ldr	r2, [r3, #4]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	697a      	ldr	r2, [r7, #20]
 800a7da:	621a      	str	r2, [r3, #32]
}
 800a7dc:	bf00      	nop
 800a7de:	371c      	adds	r7, #28
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	40010000 	.word	0x40010000

0800a7ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b087      	sub	sp, #28
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a1b      	ldr	r3, [r3, #32]
 800a7fa:	f023 0210 	bic.w	r2, r3, #16
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a1b      	ldr	r3, [r3, #32]
 800a806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	699b      	ldr	r3, [r3, #24]
 800a812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a81a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	021b      	lsls	r3, r3, #8
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	4313      	orrs	r3, r2
 800a82e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	f023 0320 	bic.w	r3, r3, #32
 800a836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	011b      	lsls	r3, r3, #4
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	4313      	orrs	r3, r2
 800a842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a1e      	ldr	r2, [pc, #120]	; (800a8c0 <TIM_OC2_SetConfig+0xd4>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d10d      	bne.n	800a868 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	011b      	lsls	r3, r3, #4
 800a85a:	697a      	ldr	r2, [r7, #20]
 800a85c:	4313      	orrs	r3, r2
 800a85e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a866:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4a15      	ldr	r2, [pc, #84]	; (800a8c0 <TIM_OC2_SetConfig+0xd4>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d113      	bne.n	800a898 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a87e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	695b      	ldr	r3, [r3, #20]
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	4313      	orrs	r3, r2
 800a88a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	693a      	ldr	r2, [r7, #16]
 800a894:	4313      	orrs	r3, r2
 800a896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	693a      	ldr	r2, [r7, #16]
 800a89c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	697a      	ldr	r2, [r7, #20]
 800a8b0:	621a      	str	r2, [r3, #32]
}
 800a8b2:	bf00      	nop
 800a8b4:	371c      	adds	r7, #28
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	40010000 	.word	0x40010000

0800a8c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b087      	sub	sp, #28
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6a1b      	ldr	r3, [r3, #32]
 800a8d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	69db      	ldr	r3, [r3, #28]
 800a8ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f023 0303 	bic.w	r3, r3, #3
 800a8fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	4313      	orrs	r3, r2
 800a904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a90c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	021b      	lsls	r3, r3, #8
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	4313      	orrs	r3, r2
 800a918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a1d      	ldr	r2, [pc, #116]	; (800a994 <TIM_OC3_SetConfig+0xd0>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d10d      	bne.n	800a93e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	021b      	lsls	r3, r3, #8
 800a930:	697a      	ldr	r2, [r7, #20]
 800a932:	4313      	orrs	r3, r2
 800a934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a93c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a14      	ldr	r2, [pc, #80]	; (800a994 <TIM_OC3_SetConfig+0xd0>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d113      	bne.n	800a96e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a94c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	011b      	lsls	r3, r3, #4
 800a95c:	693a      	ldr	r2, [r7, #16]
 800a95e:	4313      	orrs	r3, r2
 800a960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	699b      	ldr	r3, [r3, #24]
 800a966:	011b      	lsls	r3, r3, #4
 800a968:	693a      	ldr	r2, [r7, #16]
 800a96a:	4313      	orrs	r3, r2
 800a96c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	693a      	ldr	r2, [r7, #16]
 800a972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	685a      	ldr	r2, [r3, #4]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	697a      	ldr	r2, [r7, #20]
 800a986:	621a      	str	r2, [r3, #32]
}
 800a988:	bf00      	nop
 800a98a:	371c      	adds	r7, #28
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	40010000 	.word	0x40010000

0800a998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a998:	b480      	push	{r7}
 800a99a:	b087      	sub	sp, #28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	69db      	ldr	r3, [r3, #28]
 800a9be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	021b      	lsls	r3, r3, #8
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a9e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	031b      	lsls	r3, r3, #12
 800a9ea:	693a      	ldr	r2, [r7, #16]
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a10      	ldr	r2, [pc, #64]	; (800aa34 <TIM_OC4_SetConfig+0x9c>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d109      	bne.n	800aa0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	695b      	ldr	r3, [r3, #20]
 800aa04:	019b      	lsls	r3, r3, #6
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	685a      	ldr	r2, [r3, #4]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	621a      	str	r2, [r3, #32]
}
 800aa26:	bf00      	nop
 800aa28:	371c      	adds	r7, #28
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	40010000 	.word	0x40010000

0800aa38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b087      	sub	sp, #28
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6a1b      	ldr	r3, [r3, #32]
 800aa48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	f023 0201 	bic.w	r2, r3, #1
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	699b      	ldr	r3, [r3, #24]
 800aa5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	011b      	lsls	r3, r3, #4
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	f023 030a 	bic.w	r3, r3, #10
 800aa74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa76:	697a      	ldr	r2, [r7, #20]
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	693a      	ldr	r2, [r7, #16]
 800aa82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	697a      	ldr	r2, [r7, #20]
 800aa88:	621a      	str	r2, [r3, #32]
}
 800aa8a:	bf00      	nop
 800aa8c:	371c      	adds	r7, #28
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b087      	sub	sp, #28
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	60f8      	str	r0, [r7, #12]
 800aa9e:	60b9      	str	r1, [r7, #8]
 800aaa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6a1b      	ldr	r3, [r3, #32]
 800aaa6:	f023 0210 	bic.w	r2, r3, #16
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	699b      	ldr	r3, [r3, #24]
 800aab2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6a1b      	ldr	r3, [r3, #32]
 800aab8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aac0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	031b      	lsls	r3, r3, #12
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aad2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	011b      	lsls	r3, r3, #4
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	4313      	orrs	r3, r2
 800aadc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	697a      	ldr	r2, [r7, #20]
 800aae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	693a      	ldr	r2, [r7, #16]
 800aae8:	621a      	str	r2, [r3, #32]
}
 800aaea:	bf00      	nop
 800aaec:	371c      	adds	r7, #28
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b085      	sub	sp, #20
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	f043 0307 	orr.w	r3, r3, #7
 800ab18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	609a      	str	r2, [r3, #8]
}
 800ab20:	bf00      	nop
 800ab22:	3714      	adds	r7, #20
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b087      	sub	sp, #28
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
 800ab38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	021a      	lsls	r2, r3, #8
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	431a      	orrs	r2, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	697a      	ldr	r2, [r7, #20]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	697a      	ldr	r2, [r7, #20]
 800ab5e:	609a      	str	r2, [r3, #8]
}
 800ab60:	bf00      	nop
 800ab62:	371c      	adds	r7, #28
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b087      	sub	sp, #28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f003 031f 	and.w	r3, r3, #31
 800ab7e:	2201      	movs	r2, #1
 800ab80:	fa02 f303 	lsl.w	r3, r2, r3
 800ab84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6a1a      	ldr	r2, [r3, #32]
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	43db      	mvns	r3, r3
 800ab8e:	401a      	ands	r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6a1a      	ldr	r2, [r3, #32]
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	f003 031f 	and.w	r3, r3, #31
 800ab9e:	6879      	ldr	r1, [r7, #4]
 800aba0:	fa01 f303 	lsl.w	r3, r1, r3
 800aba4:	431a      	orrs	r2, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	621a      	str	r2, [r3, #32]
}
 800abaa:	bf00      	nop
 800abac:	371c      	adds	r7, #28
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
	...

0800abb8 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d109      	bne.n	800abdc <HAL_TIMEx_PWMN_Start_IT+0x24>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	bf14      	ite	ne
 800abd4:	2301      	movne	r3, #1
 800abd6:	2300      	moveq	r3, #0
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	e022      	b.n	800ac22 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	2b04      	cmp	r3, #4
 800abe0:	d109      	bne.n	800abf6 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b01      	cmp	r3, #1
 800abec:	bf14      	ite	ne
 800abee:	2301      	movne	r3, #1
 800abf0:	2300      	moveq	r3, #0
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	e015      	b.n	800ac22 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2b08      	cmp	r3, #8
 800abfa:	d109      	bne.n	800ac10 <HAL_TIMEx_PWMN_Start_IT+0x58>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	bf14      	ite	ne
 800ac08:	2301      	movne	r3, #1
 800ac0a:	2300      	moveq	r3, #0
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	e008      	b.n	800ac22 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	bf14      	ite	ne
 800ac1c:	2301      	movne	r3, #1
 800ac1e:	2300      	moveq	r3, #0
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d001      	beq.n	800ac2a <HAL_TIMEx_PWMN_Start_IT+0x72>
  {
    return HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	e094      	b.n	800ad54 <HAL_TIMEx_PWMN_Start_IT+0x19c>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d104      	bne.n	800ac3a <HAL_TIMEx_PWMN_Start_IT+0x82>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2202      	movs	r2, #2
 800ac34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac38:	e013      	b.n	800ac62 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	2b04      	cmp	r3, #4
 800ac3e:	d104      	bne.n	800ac4a <HAL_TIMEx_PWMN_Start_IT+0x92>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2202      	movs	r2, #2
 800ac44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac48:	e00b      	b.n	800ac62 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	2b08      	cmp	r3, #8
 800ac4e:	d104      	bne.n	800ac5a <HAL_TIMEx_PWMN_Start_IT+0xa2>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2202      	movs	r2, #2
 800ac54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac58:	e003      	b.n	800ac62 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2202      	movs	r2, #2
 800ac5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	2b08      	cmp	r3, #8
 800ac66:	d01b      	beq.n	800aca0 <HAL_TIMEx_PWMN_Start_IT+0xe8>
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	2b08      	cmp	r3, #8
 800ac6c:	d821      	bhi.n	800acb2 <HAL_TIMEx_PWMN_Start_IT+0xfa>
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d003      	beq.n	800ac7c <HAL_TIMEx_PWMN_Start_IT+0xc4>
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	2b04      	cmp	r3, #4
 800ac78:	d009      	beq.n	800ac8e <HAL_TIMEx_PWMN_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800ac7a:	e01a      	b.n	800acb2 <HAL_TIMEx_PWMN_Start_IT+0xfa>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68da      	ldr	r2, [r3, #12]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f042 0202 	orr.w	r2, r2, #2
 800ac8a:	60da      	str	r2, [r3, #12]
      break;
 800ac8c:	e012      	b.n	800acb4 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68da      	ldr	r2, [r3, #12]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f042 0204 	orr.w	r2, r2, #4
 800ac9c:	60da      	str	r2, [r3, #12]
      break;
 800ac9e:	e009      	b.n	800acb4 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	68da      	ldr	r2, [r3, #12]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f042 0208 	orr.w	r2, r2, #8
 800acae:	60da      	str	r2, [r3, #12]
      break;
 800acb0:	e000      	b.n	800acb4 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      break;
 800acb2:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68da      	ldr	r2, [r3, #12]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800acc2:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2204      	movs	r2, #4
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	4618      	mov	r0, r3
 800acce:	f000 f8d1 	bl	800ae74 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ace0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a1d      	ldr	r2, [pc, #116]	; (800ad5c <HAL_TIMEx_PWMN_Start_IT+0x1a4>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d018      	beq.n	800ad1e <HAL_TIMEx_PWMN_Start_IT+0x166>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acf4:	d013      	beq.n	800ad1e <HAL_TIMEx_PWMN_Start_IT+0x166>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a19      	ldr	r2, [pc, #100]	; (800ad60 <HAL_TIMEx_PWMN_Start_IT+0x1a8>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d00e      	beq.n	800ad1e <HAL_TIMEx_PWMN_Start_IT+0x166>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a17      	ldr	r2, [pc, #92]	; (800ad64 <HAL_TIMEx_PWMN_Start_IT+0x1ac>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d009      	beq.n	800ad1e <HAL_TIMEx_PWMN_Start_IT+0x166>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a16      	ldr	r2, [pc, #88]	; (800ad68 <HAL_TIMEx_PWMN_Start_IT+0x1b0>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d004      	beq.n	800ad1e <HAL_TIMEx_PWMN_Start_IT+0x166>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a14      	ldr	r2, [pc, #80]	; (800ad6c <HAL_TIMEx_PWMN_Start_IT+0x1b4>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d111      	bne.n	800ad42 <HAL_TIMEx_PWMN_Start_IT+0x18a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	f003 0307 	and.w	r3, r3, #7
 800ad28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2b06      	cmp	r3, #6
 800ad2e:	d010      	beq.n	800ad52 <HAL_TIMEx_PWMN_Start_IT+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f042 0201 	orr.w	r2, r2, #1
 800ad3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad40:	e007      	b.n	800ad52 <HAL_TIMEx_PWMN_Start_IT+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f042 0201 	orr.w	r2, r2, #1
 800ad50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	40010000 	.word	0x40010000
 800ad60:	40000400 	.word	0x40000400
 800ad64:	40000800 	.word	0x40000800
 800ad68:	40000c00 	.word	0x40000c00
 800ad6c:	40014000 	.word	0x40014000

0800ad70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d101      	bne.n	800ad88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad84:	2302      	movs	r3, #2
 800ad86:	e050      	b.n	800ae2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2202      	movs	r2, #2
 800ad94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a1c      	ldr	r2, [pc, #112]	; (800ae38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d018      	beq.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800add4:	d013      	beq.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a18      	ldr	r2, [pc, #96]	; (800ae3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d00e      	beq.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a16      	ldr	r2, [pc, #88]	; (800ae40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d009      	beq.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a15      	ldr	r2, [pc, #84]	; (800ae44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d004      	beq.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a13      	ldr	r2, [pc, #76]	; (800ae48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d10c      	bne.n	800ae18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3714      	adds	r7, #20
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	40010000 	.word	0x40010000
 800ae3c:	40000400 	.word	0x40000400
 800ae40:	40000800 	.word	0x40000800
 800ae44:	40000c00 	.word	0x40000c00
 800ae48:	40014000 	.word	0x40014000

0800ae4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae54:	bf00      	nop
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae68:	bf00      	nop
 800ae6a:	370c      	adds	r7, #12
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b087      	sub	sp, #28
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	f003 031f 	and.w	r3, r3, #31
 800ae86:	2204      	movs	r2, #4
 800ae88:	fa02 f303 	lsl.w	r3, r2, r3
 800ae8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6a1a      	ldr	r2, [r3, #32]
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	43db      	mvns	r3, r3
 800ae96:	401a      	ands	r2, r3
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6a1a      	ldr	r2, [r3, #32]
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	f003 031f 	and.w	r3, r3, #31
 800aea6:	6879      	ldr	r1, [r7, #4]
 800aea8:	fa01 f303 	lsl.w	r3, r1, r3
 800aeac:	431a      	orrs	r2, r3
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	621a      	str	r2, [r3, #32]
}
 800aeb2:	bf00      	nop
 800aeb4:	371c      	adds	r7, #28
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b082      	sub	sp, #8
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d101      	bne.n	800aed0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e03f      	b.n	800af50 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d106      	bne.n	800aeea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f7f9 fb3d 	bl	8004564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2224      	movs	r2, #36	; 0x24
 800aeee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	68da      	ldr	r2, [r3, #12]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 fd92 	bl	800ba2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	691a      	ldr	r2, [r3, #16]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	695a      	ldr	r2, [r3, #20]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af26:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68da      	ldr	r2, [r3, #12]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af36:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2220      	movs	r2, #32
 800af42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2220      	movs	r2, #32
 800af4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b08a      	sub	sp, #40	; 0x28
 800af5c:	af02      	add	r7, sp, #8
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	603b      	str	r3, [r7, #0]
 800af64:	4613      	mov	r3, r2
 800af66:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800af68:	2300      	movs	r3, #0
 800af6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af72:	b2db      	uxtb	r3, r3
 800af74:	2b20      	cmp	r3, #32
 800af76:	d17c      	bne.n	800b072 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d002      	beq.n	800af84 <HAL_UART_Transmit+0x2c>
 800af7e:	88fb      	ldrh	r3, [r7, #6]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d101      	bne.n	800af88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	e075      	b.n	800b074 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d101      	bne.n	800af96 <HAL_UART_Transmit+0x3e>
 800af92:	2302      	movs	r3, #2
 800af94:	e06e      	b.n	800b074 <HAL_UART_Transmit+0x11c>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2201      	movs	r2, #1
 800af9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2200      	movs	r2, #0
 800afa2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2221      	movs	r2, #33	; 0x21
 800afa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800afac:	f7f9 fc2c 	bl	8004808 <HAL_GetTick>
 800afb0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	88fa      	ldrh	r2, [r7, #6]
 800afb6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	88fa      	ldrh	r2, [r7, #6]
 800afbc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afc6:	d108      	bne.n	800afda <HAL_UART_Transmit+0x82>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d104      	bne.n	800afda <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800afd0:	2300      	movs	r3, #0
 800afd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	61bb      	str	r3, [r7, #24]
 800afd8:	e003      	b.n	800afe2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800afde:	2300      	movs	r3, #0
 800afe0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800afea:	e02a      	b.n	800b042 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	2200      	movs	r2, #0
 800aff4:	2180      	movs	r1, #128	; 0x80
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f000 fb14 	bl	800b624 <UART_WaitOnFlagUntilTimeout>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d001      	beq.n	800b006 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b002:	2303      	movs	r3, #3
 800b004:	e036      	b.n	800b074 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d10b      	bne.n	800b024 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	881b      	ldrh	r3, [r3, #0]
 800b010:	461a      	mov	r2, r3
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b01a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	3302      	adds	r3, #2
 800b020:	61bb      	str	r3, [r7, #24]
 800b022:	e007      	b.n	800b034 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	781a      	ldrb	r2, [r3, #0]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	3301      	adds	r3, #1
 800b032:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b038:	b29b      	uxth	r3, r3
 800b03a:	3b01      	subs	r3, #1
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b046:	b29b      	uxth	r3, r3
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1cf      	bne.n	800afec <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	2200      	movs	r2, #0
 800b054:	2140      	movs	r1, #64	; 0x40
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f000 fae4 	bl	800b624 <UART_WaitOnFlagUntilTimeout>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b062:	2303      	movs	r3, #3
 800b064:	e006      	b.n	800b074 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2220      	movs	r2, #32
 800b06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b06e:	2300      	movs	r3, #0
 800b070:	e000      	b.n	800b074 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b072:	2302      	movs	r3, #2
  }
}
 800b074:	4618      	mov	r0, r3
 800b076:	3720      	adds	r7, #32
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b086      	sub	sp, #24
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	4613      	mov	r3, r2
 800b088:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b090:	b2db      	uxtb	r3, r3
 800b092:	2b20      	cmp	r3, #32
 800b094:	d13c      	bne.n	800b110 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800b09c:	88fb      	ldrh	r3, [r7, #6]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e035      	b.n	800b112 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d101      	bne.n	800b0b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	e02e      	b.n	800b112 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b0c2:	88fb      	ldrh	r3, [r7, #6]
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	68b9      	ldr	r1, [r7, #8]
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f000 faf5 	bl	800b6b8 <UART_Start_Receive_DMA>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b0d2:	7dfb      	ldrb	r3, [r7, #23]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d119      	bne.n	800b10c <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d113      	bne.n	800b108 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	613b      	str	r3, [r7, #16]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	613b      	str	r3, [r7, #16]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	613b      	str	r3, [r7, #16]
 800b0f4:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68da      	ldr	r2, [r3, #12]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f042 0210 	orr.w	r2, r2, #16
 800b104:	60da      	str	r2, [r3, #12]
 800b106:	e001      	b.n	800b10c <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b108:	2301      	movs	r3, #1
 800b10a:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800b10c:	7dfb      	ldrb	r3, [r7, #23]
 800b10e:	e000      	b.n	800b112 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 800b110:	2302      	movs	r3, #2
  }
}
 800b112:	4618      	mov	r0, r3
 800b114:	3718      	adds	r7, #24
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
	...

0800b11c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b08a      	sub	sp, #40	; 0x28
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	695b      	ldr	r3, [r3, #20]
 800b13a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800b13c:	2300      	movs	r3, #0
 800b13e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800b140:	2300      	movs	r3, #0
 800b142:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	f003 030f 	and.w	r3, r3, #15
 800b14a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10d      	bne.n	800b16e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b154:	f003 0320 	and.w	r3, r3, #32
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d008      	beq.n	800b16e <HAL_UART_IRQHandler+0x52>
 800b15c:	6a3b      	ldr	r3, [r7, #32]
 800b15e:	f003 0320 	and.w	r3, r3, #32
 800b162:	2b00      	cmp	r3, #0
 800b164:	d003      	beq.n	800b16e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fbc9 	bl	800b8fe <UART_Receive_IT>
      return;
 800b16c:	e17c      	b.n	800b468 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	2b00      	cmp	r3, #0
 800b172:	f000 80b1 	beq.w	800b2d8 <HAL_UART_IRQHandler+0x1bc>
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	f003 0301 	and.w	r3, r3, #1
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d105      	bne.n	800b18c <HAL_UART_IRQHandler+0x70>
 800b180:	6a3b      	ldr	r3, [r7, #32]
 800b182:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b186:	2b00      	cmp	r3, #0
 800b188:	f000 80a6 	beq.w	800b2d8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18e:	f003 0301 	and.w	r3, r3, #1
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00a      	beq.n	800b1ac <HAL_UART_IRQHandler+0x90>
 800b196:	6a3b      	ldr	r3, [r7, #32]
 800b198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d005      	beq.n	800b1ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a4:	f043 0201 	orr.w	r2, r3, #1
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ae:	f003 0304 	and.w	r3, r3, #4
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00a      	beq.n	800b1cc <HAL_UART_IRQHandler+0xb0>
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	f003 0301 	and.w	r3, r3, #1
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d005      	beq.n	800b1cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c4:	f043 0202 	orr.w	r2, r3, #2
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ce:	f003 0302 	and.w	r3, r3, #2
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00a      	beq.n	800b1ec <HAL_UART_IRQHandler+0xd0>
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	f003 0301 	and.w	r3, r3, #1
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d005      	beq.n	800b1ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e4:	f043 0204 	orr.w	r2, r3, #4
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ee:	f003 0308 	and.w	r3, r3, #8
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00f      	beq.n	800b216 <HAL_UART_IRQHandler+0xfa>
 800b1f6:	6a3b      	ldr	r3, [r7, #32]
 800b1f8:	f003 0320 	and.w	r3, r3, #32
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d104      	bne.n	800b20a <HAL_UART_IRQHandler+0xee>
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	f003 0301 	and.w	r3, r3, #1
 800b206:	2b00      	cmp	r3, #0
 800b208:	d005      	beq.n	800b216 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20e:	f043 0208 	orr.w	r2, r3, #8
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f000 811f 	beq.w	800b45e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b222:	f003 0320 	and.w	r3, r3, #32
 800b226:	2b00      	cmp	r3, #0
 800b228:	d007      	beq.n	800b23a <HAL_UART_IRQHandler+0x11e>
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	f003 0320 	and.w	r3, r3, #32
 800b230:	2b00      	cmp	r3, #0
 800b232:	d002      	beq.n	800b23a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 fb62 	bl	800b8fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	695b      	ldr	r3, [r3, #20]
 800b240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b244:	2b40      	cmp	r3, #64	; 0x40
 800b246:	bf0c      	ite	eq
 800b248:	2301      	moveq	r3, #1
 800b24a:	2300      	movne	r3, #0
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b254:	f003 0308 	and.w	r3, r3, #8
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d102      	bne.n	800b262 <HAL_UART_IRQHandler+0x146>
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d031      	beq.n	800b2c6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 faa2 	bl	800b7ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	695b      	ldr	r3, [r3, #20]
 800b26e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b272:	2b40      	cmp	r3, #64	; 0x40
 800b274:	d123      	bne.n	800b2be <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	695a      	ldr	r2, [r3, #20]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b284:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d013      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b292:	4a77      	ldr	r2, [pc, #476]	; (800b470 <HAL_UART_IRQHandler+0x354>)
 800b294:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fa fa4c 	bl	8005738 <HAL_DMA_Abort_IT>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d016      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b2b0:	4610      	mov	r0, r2
 800b2b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2b4:	e00e      	b.n	800b2d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f8fa 	bl	800b4b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2bc:	e00a      	b.n	800b2d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 f8f6 	bl	800b4b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2c4:	e006      	b.n	800b2d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 f8f2 	bl	800b4b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b2d2:	e0c4      	b.n	800b45e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2d4:	bf00      	nop
    return;
 800b2d6:	e0c2      	b.n	800b45e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	f040 80a2 	bne.w	800b426 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e4:	f003 0310 	and.w	r3, r3, #16
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f000 809c 	beq.w	800b426 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800b2ee:	6a3b      	ldr	r3, [r7, #32]
 800b2f0:	f003 0310 	and.w	r3, r3, #16
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f000 8096 	beq.w	800b426 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	60fb      	str	r3, [r7, #12]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	60fb      	str	r3, [r7, #12]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	60fb      	str	r3, [r7, #12]
 800b30e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	695b      	ldr	r3, [r3, #20]
 800b316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b31a:	2b40      	cmp	r3, #64	; 0x40
 800b31c:	d14f      	bne.n	800b3be <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800b328:	8a3b      	ldrh	r3, [r7, #16]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 8099 	beq.w	800b462 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b334:	8a3a      	ldrh	r2, [r7, #16]
 800b336:	429a      	cmp	r2, r3
 800b338:	f080 8093 	bcs.w	800b462 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	8a3a      	ldrh	r2, [r7, #16]
 800b340:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b346:	69db      	ldr	r3, [r3, #28]
 800b348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b34c:	d02b      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	68da      	ldr	r2, [r3, #12]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b35c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	695a      	ldr	r2, [r3, #20]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f022 0201 	bic.w	r2, r2, #1
 800b36c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	695a      	ldr	r2, [r3, #20]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b37c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2220      	movs	r2, #32
 800b382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	68da      	ldr	r2, [r3, #12]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f022 0210 	bic.w	r2, r2, #16
 800b39a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fa f959 	bl	8005658 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7f8 fa16 	bl	80037e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b3bc:	e051      	b.n	800b462 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d047      	beq.n	800b466 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800b3d6:	8a7b      	ldrh	r3, [r7, #18]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d044      	beq.n	800b466 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68da      	ldr	r2, [r3, #12]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b3ea:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	695a      	ldr	r2, [r3, #20]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f022 0201 	bic.w	r2, r2, #1
 800b3fa:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2220      	movs	r2, #32
 800b400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68da      	ldr	r2, [r3, #12]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f022 0210 	bic.w	r2, r2, #16
 800b418:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b41a:	8a7b      	ldrh	r3, [r7, #18]
 800b41c:	4619      	mov	r1, r3
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f7f8 f9e2 	bl	80037e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b424:	e01f      	b.n	800b466 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d008      	beq.n	800b442 <HAL_UART_IRQHandler+0x326>
 800b430:	6a3b      	ldr	r3, [r7, #32]
 800b432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b436:	2b00      	cmp	r3, #0
 800b438:	d003      	beq.n	800b442 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f9f7 	bl	800b82e <UART_Transmit_IT>
    return;
 800b440:	e012      	b.n	800b468 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00d      	beq.n	800b468 <HAL_UART_IRQHandler+0x34c>
 800b44c:	6a3b      	ldr	r3, [r7, #32]
 800b44e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b452:	2b00      	cmp	r3, #0
 800b454:	d008      	beq.n	800b468 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fa39 	bl	800b8ce <UART_EndTransmit_IT>
    return;
 800b45c:	e004      	b.n	800b468 <HAL_UART_IRQHandler+0x34c>
    return;
 800b45e:	bf00      	nop
 800b460:	e002      	b.n	800b468 <HAL_UART_IRQHandler+0x34c>
      return;
 800b462:	bf00      	nop
 800b464:	e000      	b.n	800b468 <HAL_UART_IRQHandler+0x34c>
      return;
 800b466:	bf00      	nop
  }
}
 800b468:	3728      	adds	r7, #40	; 0x28
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	0800b807 	.word	0x0800b807

0800b474 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b47c:	bf00      	nop
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b490:	bf00      	nop
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b4a4:	bf00      	nop
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b4b8:	bf00      	nop
 800b4ba:	370c      	adds	r7, #12
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d12a      	bne.n	800b536 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68da      	ldr	r2, [r3, #12]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4f4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	695a      	ldr	r2, [r3, #20]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f022 0201 	bic.w	r2, r2, #1
 800b504:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	695a      	ldr	r2, [r3, #20]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b514:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2220      	movs	r2, #32
 800b51a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b522:	2b01      	cmp	r3, #1
 800b524:	d107      	bne.n	800b536 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	68da      	ldr	r2, [r3, #12]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f022 0210 	bic.w	r2, r2, #16
 800b534:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d106      	bne.n	800b54c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b542:	4619      	mov	r1, r3
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f7f8 f94f 	bl	80037e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b54a:	e002      	b.n	800b552 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f7ff ff9b 	bl	800b488 <HAL_UART_RxCpltCallback>
}
 800b552:	bf00      	nop
 800b554:	3710      	adds	r7, #16
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b084      	sub	sp, #16
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b566:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d108      	bne.n	800b582 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b574:	085b      	lsrs	r3, r3, #1
 800b576:	b29b      	uxth	r3, r3
 800b578:	4619      	mov	r1, r3
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f7f8 f934 	bl	80037e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b580:	e002      	b.n	800b588 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f7ff ff8a 	bl	800b49c <HAL_UART_RxHalfCpltCallback>
}
 800b588:	bf00      	nop
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b598:	2300      	movs	r3, #0
 800b59a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	695b      	ldr	r3, [r3, #20]
 800b5a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5ac:	2b80      	cmp	r3, #128	; 0x80
 800b5ae:	bf0c      	ite	eq
 800b5b0:	2301      	moveq	r3, #1
 800b5b2:	2300      	movne	r3, #0
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	2b21      	cmp	r3, #33	; 0x21
 800b5c2:	d108      	bne.n	800b5d6 <UART_DMAError+0x46>
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d005      	beq.n	800b5d6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b5d0:	68b8      	ldr	r0, [r7, #8]
 800b5d2:	f000 f8d5 	bl	800b780 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	695b      	ldr	r3, [r3, #20]
 800b5dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e0:	2b40      	cmp	r3, #64	; 0x40
 800b5e2:	bf0c      	ite	eq
 800b5e4:	2301      	moveq	r3, #1
 800b5e6:	2300      	movne	r3, #0
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	2b22      	cmp	r3, #34	; 0x22
 800b5f6:	d108      	bne.n	800b60a <UART_DMAError+0x7a>
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d005      	beq.n	800b60a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	2200      	movs	r2, #0
 800b602:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b604:	68b8      	ldr	r0, [r7, #8]
 800b606:	f000 f8d1 	bl	800b7ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60e:	f043 0210 	orr.w	r2, r3, #16
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b616:	68b8      	ldr	r0, [r7, #8]
 800b618:	f7ff ff4a 	bl	800b4b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b61c:	bf00      	nop
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	603b      	str	r3, [r7, #0]
 800b630:	4613      	mov	r3, r2
 800b632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b634:	e02c      	b.n	800b690 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b63c:	d028      	beq.n	800b690 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d007      	beq.n	800b654 <UART_WaitOnFlagUntilTimeout+0x30>
 800b644:	f7f9 f8e0 	bl	8004808 <HAL_GetTick>
 800b648:	4602      	mov	r2, r0
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	1ad3      	subs	r3, r2, r3
 800b64e:	69ba      	ldr	r2, [r7, #24]
 800b650:	429a      	cmp	r2, r3
 800b652:	d21d      	bcs.n	800b690 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68da      	ldr	r2, [r3, #12]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b662:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	695a      	ldr	r2, [r3, #20]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f022 0201 	bic.w	r2, r2, #1
 800b672:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2220      	movs	r2, #32
 800b678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2220      	movs	r2, #32
 800b680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b68c:	2303      	movs	r3, #3
 800b68e:	e00f      	b.n	800b6b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	4013      	ands	r3, r2
 800b69a:	68ba      	ldr	r2, [r7, #8]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	bf0c      	ite	eq
 800b6a0:	2301      	moveq	r3, #1
 800b6a2:	2300      	movne	r3, #0
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	79fb      	ldrb	r3, [r7, #7]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d0c3      	beq.n	800b636 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b6ae:	2300      	movs	r3, #0
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3710      	adds	r7, #16
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b6c6:	68ba      	ldr	r2, [r7, #8]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	88fa      	ldrh	r2, [r7, #6]
 800b6d0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2222      	movs	r2, #34	; 0x22
 800b6dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e4:	4a23      	ldr	r2, [pc, #140]	; (800b774 <UART_Start_Receive_DMA+0xbc>)
 800b6e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ec:	4a22      	ldr	r2, [pc, #136]	; (800b778 <UART_Start_Receive_DMA+0xc0>)
 800b6ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f4:	4a21      	ldr	r2, [pc, #132]	; (800b77c <UART_Start_Receive_DMA+0xc4>)
 800b6f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b700:	f107 0308 	add.w	r3, r7, #8
 800b704:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	3304      	adds	r3, #4
 800b710:	4619      	mov	r1, r3
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	88fb      	ldrh	r3, [r7, #6]
 800b718:	f7f9 ff46 	bl	80055a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b71c:	2300      	movs	r3, #0
 800b71e:	613b      	str	r3, [r7, #16]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	613b      	str	r3, [r7, #16]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	613b      	str	r3, [r7, #16]
 800b730:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2200      	movs	r2, #0
 800b736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68da      	ldr	r2, [r3, #12]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b748:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	695a      	ldr	r2, [r3, #20]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f042 0201 	orr.w	r2, r2, #1
 800b758:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	695a      	ldr	r2, [r3, #20]
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b768:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b76a:	2300      	movs	r3, #0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3718      	adds	r7, #24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	0800b4c5 	.word	0x0800b4c5
 800b778:	0800b55b 	.word	0x0800b55b
 800b77c:	0800b591 	.word	0x0800b591

0800b780 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68da      	ldr	r2, [r3, #12]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b796:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2220      	movs	r2, #32
 800b79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b7a0:	bf00      	nop
 800b7a2:	370c      	adds	r7, #12
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr

0800b7ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68da      	ldr	r2, [r3, #12]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b7c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	695a      	ldr	r2, [r3, #20]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f022 0201 	bic.w	r2, r2, #1
 800b7d2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d107      	bne.n	800b7ec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	68da      	ldr	r2, [r3, #12]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f022 0210 	bic.w	r2, r2, #16
 800b7ea:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2220      	movs	r2, #32
 800b7f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b7fa:	bf00      	nop
 800b7fc:	370c      	adds	r7, #12
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b084      	sub	sp, #16
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b812:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2200      	movs	r2, #0
 800b81e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f7ff fe45 	bl	800b4b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b826:	bf00      	nop
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b82e:	b480      	push	{r7}
 800b830:	b085      	sub	sp, #20
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	2b21      	cmp	r3, #33	; 0x21
 800b840:	d13e      	bne.n	800b8c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b84a:	d114      	bne.n	800b876 <UART_Transmit_IT+0x48>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	691b      	ldr	r3, [r3, #16]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d110      	bne.n	800b876 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a1b      	ldr	r3, [r3, #32]
 800b858:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	881b      	ldrh	r3, [r3, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b868:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a1b      	ldr	r3, [r3, #32]
 800b86e:	1c9a      	adds	r2, r3, #2
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	621a      	str	r2, [r3, #32]
 800b874:	e008      	b.n	800b888 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a1b      	ldr	r3, [r3, #32]
 800b87a:	1c59      	adds	r1, r3, #1
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	6211      	str	r1, [r2, #32]
 800b880:	781a      	ldrb	r2, [r3, #0]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	3b01      	subs	r3, #1
 800b890:	b29b      	uxth	r3, r3
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	4619      	mov	r1, r3
 800b896:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10f      	bne.n	800b8bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68da      	ldr	r2, [r3, #12]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	68da      	ldr	r2, [r3, #12]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	e000      	b.n	800b8c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b8c0:	2302      	movs	r3, #2
  }
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3714      	adds	r7, #20
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr

0800b8ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b082      	sub	sp, #8
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68da      	ldr	r2, [r3, #12]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2220      	movs	r2, #32
 800b8ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f7ff fdc0 	bl	800b474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b22      	cmp	r3, #34	; 0x22
 800b910:	f040 8087 	bne.w	800ba22 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b91c:	d117      	bne.n	800b94e <UART_Receive_IT+0x50>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	691b      	ldr	r3, [r3, #16]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d113      	bne.n	800b94e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b926:	2300      	movs	r3, #0
 800b928:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b92e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	b29b      	uxth	r3, r3
 800b938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b946:	1c9a      	adds	r2, r3, #2
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	629a      	str	r2, [r3, #40]	; 0x28
 800b94c:	e026      	b.n	800b99c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b952:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800b954:	2300      	movs	r3, #0
 800b956:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b960:	d007      	beq.n	800b972 <UART_Receive_IT+0x74>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d10a      	bne.n	800b980 <UART_Receive_IT+0x82>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d106      	bne.n	800b980 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	b2da      	uxtb	r2, r3
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	701a      	strb	r2, [r3, #0]
 800b97e:	e008      	b.n	800b992 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	b2db      	uxtb	r3, r3
 800b988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b98c:	b2da      	uxtb	r2, r3
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b996:	1c5a      	adds	r2, r3, #1
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9a0:	b29b      	uxth	r3, r3
 800b9a2:	3b01      	subs	r3, #1
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d136      	bne.n	800ba1e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	68da      	ldr	r2, [r3, #12]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f022 0220 	bic.w	r2, r2, #32
 800b9be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	68da      	ldr	r2, [r3, #12]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b9ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	695a      	ldr	r2, [r3, #20]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f022 0201 	bic.w	r2, r2, #1
 800b9de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2220      	movs	r2, #32
 800b9e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d10e      	bne.n	800ba0e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68da      	ldr	r2, [r3, #12]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f022 0210 	bic.w	r2, r2, #16
 800b9fe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba04:	4619      	mov	r1, r3
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7f7 feee 	bl	80037e8 <HAL_UARTEx_RxEventCallback>
 800ba0c:	e002      	b.n	800ba14 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f7ff fd3a 	bl	800b488 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	e002      	b.n	800ba24 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	e000      	b.n	800ba24 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800ba22:	2302      	movs	r3, #2
  }
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba30:	b09f      	sub	sp, #124	; 0x7c
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	691b      	ldr	r3, [r3, #16]
 800ba3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ba40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba42:	68d9      	ldr	r1, [r3, #12]
 800ba44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	ea40 0301 	orr.w	r3, r0, r1
 800ba4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ba4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba50:	689a      	ldr	r2, [r3, #8]
 800ba52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	431a      	orrs	r2, r3
 800ba58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba5a:	695b      	ldr	r3, [r3, #20]
 800ba5c:	431a      	orrs	r2, r3
 800ba5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba60:	69db      	ldr	r3, [r3, #28]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ba66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ba70:	f021 010c 	bic.w	r1, r1, #12
 800ba74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba7a:	430b      	orrs	r3, r1
 800ba7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ba7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	695b      	ldr	r3, [r3, #20]
 800ba84:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ba88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba8a:	6999      	ldr	r1, [r3, #24]
 800ba8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	ea40 0301 	orr.w	r3, r0, r1
 800ba94:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ba96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	4bc5      	ldr	r3, [pc, #788]	; (800bdb0 <UART_SetConfig+0x384>)
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d004      	beq.n	800baaa <UART_SetConfig+0x7e>
 800baa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	4bc3      	ldr	r3, [pc, #780]	; (800bdb4 <UART_SetConfig+0x388>)
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d103      	bne.n	800bab2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800baaa:	f7fe f819 	bl	8009ae0 <HAL_RCC_GetPCLK2Freq>
 800baae:	6778      	str	r0, [r7, #116]	; 0x74
 800bab0:	e002      	b.n	800bab8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bab2:	f7fe f801 	bl	8009ab8 <HAL_RCC_GetPCLK1Freq>
 800bab6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baba:	69db      	ldr	r3, [r3, #28]
 800babc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bac0:	f040 80b6 	bne.w	800bc30 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bac6:	461c      	mov	r4, r3
 800bac8:	f04f 0500 	mov.w	r5, #0
 800bacc:	4622      	mov	r2, r4
 800bace:	462b      	mov	r3, r5
 800bad0:	1891      	adds	r1, r2, r2
 800bad2:	6439      	str	r1, [r7, #64]	; 0x40
 800bad4:	415b      	adcs	r3, r3
 800bad6:	647b      	str	r3, [r7, #68]	; 0x44
 800bad8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800badc:	1912      	adds	r2, r2, r4
 800bade:	eb45 0303 	adc.w	r3, r5, r3
 800bae2:	f04f 0000 	mov.w	r0, #0
 800bae6:	f04f 0100 	mov.w	r1, #0
 800baea:	00d9      	lsls	r1, r3, #3
 800baec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800baf0:	00d0      	lsls	r0, r2, #3
 800baf2:	4602      	mov	r2, r0
 800baf4:	460b      	mov	r3, r1
 800baf6:	1911      	adds	r1, r2, r4
 800baf8:	6639      	str	r1, [r7, #96]	; 0x60
 800bafa:	416b      	adcs	r3, r5
 800bafc:	667b      	str	r3, [r7, #100]	; 0x64
 800bafe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	461a      	mov	r2, r3
 800bb04:	f04f 0300 	mov.w	r3, #0
 800bb08:	1891      	adds	r1, r2, r2
 800bb0a:	63b9      	str	r1, [r7, #56]	; 0x38
 800bb0c:	415b      	adcs	r3, r3
 800bb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bb14:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800bb18:	f7f5 f86e 	bl	8000bf8 <__aeabi_uldivmod>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	460b      	mov	r3, r1
 800bb20:	4ba5      	ldr	r3, [pc, #660]	; (800bdb8 <UART_SetConfig+0x38c>)
 800bb22:	fba3 2302 	umull	r2, r3, r3, r2
 800bb26:	095b      	lsrs	r3, r3, #5
 800bb28:	011e      	lsls	r6, r3, #4
 800bb2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb2c:	461c      	mov	r4, r3
 800bb2e:	f04f 0500 	mov.w	r5, #0
 800bb32:	4622      	mov	r2, r4
 800bb34:	462b      	mov	r3, r5
 800bb36:	1891      	adds	r1, r2, r2
 800bb38:	6339      	str	r1, [r7, #48]	; 0x30
 800bb3a:	415b      	adcs	r3, r3
 800bb3c:	637b      	str	r3, [r7, #52]	; 0x34
 800bb3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800bb42:	1912      	adds	r2, r2, r4
 800bb44:	eb45 0303 	adc.w	r3, r5, r3
 800bb48:	f04f 0000 	mov.w	r0, #0
 800bb4c:	f04f 0100 	mov.w	r1, #0
 800bb50:	00d9      	lsls	r1, r3, #3
 800bb52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bb56:	00d0      	lsls	r0, r2, #3
 800bb58:	4602      	mov	r2, r0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	1911      	adds	r1, r2, r4
 800bb5e:	65b9      	str	r1, [r7, #88]	; 0x58
 800bb60:	416b      	adcs	r3, r5
 800bb62:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	461a      	mov	r2, r3
 800bb6a:	f04f 0300 	mov.w	r3, #0
 800bb6e:	1891      	adds	r1, r2, r2
 800bb70:	62b9      	str	r1, [r7, #40]	; 0x28
 800bb72:	415b      	adcs	r3, r3
 800bb74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bb7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800bb7e:	f7f5 f83b 	bl	8000bf8 <__aeabi_uldivmod>
 800bb82:	4602      	mov	r2, r0
 800bb84:	460b      	mov	r3, r1
 800bb86:	4b8c      	ldr	r3, [pc, #560]	; (800bdb8 <UART_SetConfig+0x38c>)
 800bb88:	fba3 1302 	umull	r1, r3, r3, r2
 800bb8c:	095b      	lsrs	r3, r3, #5
 800bb8e:	2164      	movs	r1, #100	; 0x64
 800bb90:	fb01 f303 	mul.w	r3, r1, r3
 800bb94:	1ad3      	subs	r3, r2, r3
 800bb96:	00db      	lsls	r3, r3, #3
 800bb98:	3332      	adds	r3, #50	; 0x32
 800bb9a:	4a87      	ldr	r2, [pc, #540]	; (800bdb8 <UART_SetConfig+0x38c>)
 800bb9c:	fba2 2303 	umull	r2, r3, r2, r3
 800bba0:	095b      	lsrs	r3, r3, #5
 800bba2:	005b      	lsls	r3, r3, #1
 800bba4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bba8:	441e      	add	r6, r3
 800bbaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbac:	4618      	mov	r0, r3
 800bbae:	f04f 0100 	mov.w	r1, #0
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	1894      	adds	r4, r2, r2
 800bbb8:	623c      	str	r4, [r7, #32]
 800bbba:	415b      	adcs	r3, r3
 800bbbc:	627b      	str	r3, [r7, #36]	; 0x24
 800bbbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bbc2:	1812      	adds	r2, r2, r0
 800bbc4:	eb41 0303 	adc.w	r3, r1, r3
 800bbc8:	f04f 0400 	mov.w	r4, #0
 800bbcc:	f04f 0500 	mov.w	r5, #0
 800bbd0:	00dd      	lsls	r5, r3, #3
 800bbd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bbd6:	00d4      	lsls	r4, r2, #3
 800bbd8:	4622      	mov	r2, r4
 800bbda:	462b      	mov	r3, r5
 800bbdc:	1814      	adds	r4, r2, r0
 800bbde:	653c      	str	r4, [r7, #80]	; 0x50
 800bbe0:	414b      	adcs	r3, r1
 800bbe2:	657b      	str	r3, [r7, #84]	; 0x54
 800bbe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	461a      	mov	r2, r3
 800bbea:	f04f 0300 	mov.w	r3, #0
 800bbee:	1891      	adds	r1, r2, r2
 800bbf0:	61b9      	str	r1, [r7, #24]
 800bbf2:	415b      	adcs	r3, r3
 800bbf4:	61fb      	str	r3, [r7, #28]
 800bbf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bbfa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800bbfe:	f7f4 fffb 	bl	8000bf8 <__aeabi_uldivmod>
 800bc02:	4602      	mov	r2, r0
 800bc04:	460b      	mov	r3, r1
 800bc06:	4b6c      	ldr	r3, [pc, #432]	; (800bdb8 <UART_SetConfig+0x38c>)
 800bc08:	fba3 1302 	umull	r1, r3, r3, r2
 800bc0c:	095b      	lsrs	r3, r3, #5
 800bc0e:	2164      	movs	r1, #100	; 0x64
 800bc10:	fb01 f303 	mul.w	r3, r1, r3
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	00db      	lsls	r3, r3, #3
 800bc18:	3332      	adds	r3, #50	; 0x32
 800bc1a:	4a67      	ldr	r2, [pc, #412]	; (800bdb8 <UART_SetConfig+0x38c>)
 800bc1c:	fba2 2303 	umull	r2, r3, r2, r3
 800bc20:	095b      	lsrs	r3, r3, #5
 800bc22:	f003 0207 	and.w	r2, r3, #7
 800bc26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4432      	add	r2, r6
 800bc2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bc2e:	e0b9      	b.n	800bda4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc32:	461c      	mov	r4, r3
 800bc34:	f04f 0500 	mov.w	r5, #0
 800bc38:	4622      	mov	r2, r4
 800bc3a:	462b      	mov	r3, r5
 800bc3c:	1891      	adds	r1, r2, r2
 800bc3e:	6139      	str	r1, [r7, #16]
 800bc40:	415b      	adcs	r3, r3
 800bc42:	617b      	str	r3, [r7, #20]
 800bc44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bc48:	1912      	adds	r2, r2, r4
 800bc4a:	eb45 0303 	adc.w	r3, r5, r3
 800bc4e:	f04f 0000 	mov.w	r0, #0
 800bc52:	f04f 0100 	mov.w	r1, #0
 800bc56:	00d9      	lsls	r1, r3, #3
 800bc58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bc5c:	00d0      	lsls	r0, r2, #3
 800bc5e:	4602      	mov	r2, r0
 800bc60:	460b      	mov	r3, r1
 800bc62:	eb12 0804 	adds.w	r8, r2, r4
 800bc66:	eb43 0905 	adc.w	r9, r3, r5
 800bc6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f04f 0100 	mov.w	r1, #0
 800bc74:	f04f 0200 	mov.w	r2, #0
 800bc78:	f04f 0300 	mov.w	r3, #0
 800bc7c:	008b      	lsls	r3, r1, #2
 800bc7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bc82:	0082      	lsls	r2, r0, #2
 800bc84:	4640      	mov	r0, r8
 800bc86:	4649      	mov	r1, r9
 800bc88:	f7f4 ffb6 	bl	8000bf8 <__aeabi_uldivmod>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	4b49      	ldr	r3, [pc, #292]	; (800bdb8 <UART_SetConfig+0x38c>)
 800bc92:	fba3 2302 	umull	r2, r3, r3, r2
 800bc96:	095b      	lsrs	r3, r3, #5
 800bc98:	011e      	lsls	r6, r3, #4
 800bc9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f04f 0100 	mov.w	r1, #0
 800bca2:	4602      	mov	r2, r0
 800bca4:	460b      	mov	r3, r1
 800bca6:	1894      	adds	r4, r2, r2
 800bca8:	60bc      	str	r4, [r7, #8]
 800bcaa:	415b      	adcs	r3, r3
 800bcac:	60fb      	str	r3, [r7, #12]
 800bcae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bcb2:	1812      	adds	r2, r2, r0
 800bcb4:	eb41 0303 	adc.w	r3, r1, r3
 800bcb8:	f04f 0400 	mov.w	r4, #0
 800bcbc:	f04f 0500 	mov.w	r5, #0
 800bcc0:	00dd      	lsls	r5, r3, #3
 800bcc2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bcc6:	00d4      	lsls	r4, r2, #3
 800bcc8:	4622      	mov	r2, r4
 800bcca:	462b      	mov	r3, r5
 800bccc:	1814      	adds	r4, r2, r0
 800bcce:	64bc      	str	r4, [r7, #72]	; 0x48
 800bcd0:	414b      	adcs	r3, r1
 800bcd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f04f 0100 	mov.w	r1, #0
 800bcde:	f04f 0200 	mov.w	r2, #0
 800bce2:	f04f 0300 	mov.w	r3, #0
 800bce6:	008b      	lsls	r3, r1, #2
 800bce8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bcec:	0082      	lsls	r2, r0, #2
 800bcee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bcf2:	f7f4 ff81 	bl	8000bf8 <__aeabi_uldivmod>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	4b2f      	ldr	r3, [pc, #188]	; (800bdb8 <UART_SetConfig+0x38c>)
 800bcfc:	fba3 1302 	umull	r1, r3, r3, r2
 800bd00:	095b      	lsrs	r3, r3, #5
 800bd02:	2164      	movs	r1, #100	; 0x64
 800bd04:	fb01 f303 	mul.w	r3, r1, r3
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	011b      	lsls	r3, r3, #4
 800bd0c:	3332      	adds	r3, #50	; 0x32
 800bd0e:	4a2a      	ldr	r2, [pc, #168]	; (800bdb8 <UART_SetConfig+0x38c>)
 800bd10:	fba2 2303 	umull	r2, r3, r2, r3
 800bd14:	095b      	lsrs	r3, r3, #5
 800bd16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd1a:	441e      	add	r6, r3
 800bd1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f04f 0100 	mov.w	r1, #0
 800bd24:	4602      	mov	r2, r0
 800bd26:	460b      	mov	r3, r1
 800bd28:	1894      	adds	r4, r2, r2
 800bd2a:	603c      	str	r4, [r7, #0]
 800bd2c:	415b      	adcs	r3, r3
 800bd2e:	607b      	str	r3, [r7, #4]
 800bd30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd34:	1812      	adds	r2, r2, r0
 800bd36:	eb41 0303 	adc.w	r3, r1, r3
 800bd3a:	f04f 0400 	mov.w	r4, #0
 800bd3e:	f04f 0500 	mov.w	r5, #0
 800bd42:	00dd      	lsls	r5, r3, #3
 800bd44:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bd48:	00d4      	lsls	r4, r2, #3
 800bd4a:	4622      	mov	r2, r4
 800bd4c:	462b      	mov	r3, r5
 800bd4e:	eb12 0a00 	adds.w	sl, r2, r0
 800bd52:	eb43 0b01 	adc.w	fp, r3, r1
 800bd56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f04f 0100 	mov.w	r1, #0
 800bd60:	f04f 0200 	mov.w	r2, #0
 800bd64:	f04f 0300 	mov.w	r3, #0
 800bd68:	008b      	lsls	r3, r1, #2
 800bd6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bd6e:	0082      	lsls	r2, r0, #2
 800bd70:	4650      	mov	r0, sl
 800bd72:	4659      	mov	r1, fp
 800bd74:	f7f4 ff40 	bl	8000bf8 <__aeabi_uldivmod>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	4b0e      	ldr	r3, [pc, #56]	; (800bdb8 <UART_SetConfig+0x38c>)
 800bd7e:	fba3 1302 	umull	r1, r3, r3, r2
 800bd82:	095b      	lsrs	r3, r3, #5
 800bd84:	2164      	movs	r1, #100	; 0x64
 800bd86:	fb01 f303 	mul.w	r3, r1, r3
 800bd8a:	1ad3      	subs	r3, r2, r3
 800bd8c:	011b      	lsls	r3, r3, #4
 800bd8e:	3332      	adds	r3, #50	; 0x32
 800bd90:	4a09      	ldr	r2, [pc, #36]	; (800bdb8 <UART_SetConfig+0x38c>)
 800bd92:	fba2 2303 	umull	r2, r3, r2, r3
 800bd96:	095b      	lsrs	r3, r3, #5
 800bd98:	f003 020f 	and.w	r2, r3, #15
 800bd9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4432      	add	r2, r6
 800bda2:	609a      	str	r2, [r3, #8]
}
 800bda4:	bf00      	nop
 800bda6:	377c      	adds	r7, #124	; 0x7c
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdae:	bf00      	nop
 800bdb0:	40011000 	.word	0x40011000
 800bdb4:	40011400 	.word	0x40011400
 800bdb8:	51eb851f 	.word	0x51eb851f

0800bdbc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bdca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdce:	2b84      	cmp	r3, #132	; 0x84
 800bdd0:	d005      	beq.n	800bdde <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bdd2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	4413      	add	r3, r2
 800bdda:	3303      	adds	r3, #3
 800bddc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bdde:	68fb      	ldr	r3, [r7, #12]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3714      	adds	r7, #20
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdf2:	f3ef 8305 	mrs	r3, IPSR
 800bdf6:	607b      	str	r3, [r7, #4]
  return(result);
 800bdf8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	bf14      	ite	ne
 800bdfe:	2301      	movne	r3, #1
 800be00:	2300      	moveq	r3, #0
 800be02:	b2db      	uxtb	r3, r3
}
 800be04:	4618      	mov	r0, r3
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800be14:	f001 fae8 	bl	800d3e8 <vTaskStartScheduler>
  
  return osOK;
 800be18:	2300      	movs	r3, #0
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800be1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be20:	b089      	sub	sp, #36	; 0x24
 800be22:	af04      	add	r7, sp, #16
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	695b      	ldr	r3, [r3, #20]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d020      	beq.n	800be72 <osThreadCreate+0x54>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	699b      	ldr	r3, [r3, #24]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d01c      	beq.n	800be72 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685c      	ldr	r4, [r3, #4]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681d      	ldr	r5, [r3, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	691e      	ldr	r6, [r3, #16]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7ff ffb6 	bl	800bdbc <makeFreeRtosPriority>
 800be50:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	695b      	ldr	r3, [r3, #20]
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be5a:	9202      	str	r2, [sp, #8]
 800be5c:	9301      	str	r3, [sp, #4]
 800be5e:	9100      	str	r1, [sp, #0]
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	4632      	mov	r2, r6
 800be64:	4629      	mov	r1, r5
 800be66:	4620      	mov	r0, r4
 800be68:	f001 f8f6 	bl	800d058 <xTaskCreateStatic>
 800be6c:	4603      	mov	r3, r0
 800be6e:	60fb      	str	r3, [r7, #12]
 800be70:	e01c      	b.n	800beac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	685c      	ldr	r4, [r3, #4]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be7e:	b29e      	uxth	r6, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800be86:	4618      	mov	r0, r3
 800be88:	f7ff ff98 	bl	800bdbc <makeFreeRtosPriority>
 800be8c:	4602      	mov	r2, r0
 800be8e:	f107 030c 	add.w	r3, r7, #12
 800be92:	9301      	str	r3, [sp, #4]
 800be94:	9200      	str	r2, [sp, #0]
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	4632      	mov	r2, r6
 800be9a:	4629      	mov	r1, r5
 800be9c:	4620      	mov	r0, r4
 800be9e:	f001 f938 	bl	800d112 <xTaskCreate>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d001      	beq.n	800beac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bea8:	2300      	movs	r3, #0
 800beaa:	e000      	b.n	800beae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800beac:	68fb      	ldr	r3, [r7, #12]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3714      	adds	r7, #20
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800beb6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b084      	sub	sp, #16
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d001      	beq.n	800becc <osDelay+0x16>
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	e000      	b.n	800bece <osDelay+0x18>
 800becc:	2301      	movs	r3, #1
 800bece:	4618      	mov	r0, r3
 800bed0:	f001 fa56 	bl	800d380 <vTaskDelay>
  
  return osOK;
 800bed4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800bede:	b580      	push	{r7, lr}
 800bee0:	b086      	sub	sp, #24
 800bee2:	af02      	add	r7, sp, #8
 800bee4:	6078      	str	r0, [r7, #4]
 800bee6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00f      	beq.n	800bf10 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d10a      	bne.n	800bf0c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	2203      	movs	r2, #3
 800befc:	9200      	str	r2, [sp, #0]
 800befe:	2200      	movs	r2, #0
 800bf00:	2100      	movs	r1, #0
 800bf02:	2001      	movs	r0, #1
 800bf04:	f000 f9be 	bl	800c284 <xQueueGenericCreateStatic>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	e016      	b.n	800bf3a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	e014      	b.n	800bf3a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d110      	bne.n	800bf38 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800bf16:	2203      	movs	r2, #3
 800bf18:	2100      	movs	r1, #0
 800bf1a:	2001      	movs	r0, #1
 800bf1c:	f000 fa2a 	bl	800c374 <xQueueGenericCreate>
 800bf20:	60f8      	str	r0, [r7, #12]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d005      	beq.n	800bf34 <osSemaphoreCreate+0x56>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f000 fa7a 	bl	800c428 <xQueueGenericSend>
      return sema;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	e000      	b.n	800bf3a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800bf38:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3710      	adds	r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
	...

0800bf44 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bf4e:	2300      	movs	r3, #0
 800bf50:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d101      	bne.n	800bf5c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bf58:	2380      	movs	r3, #128	; 0x80
 800bf5a:	e03a      	b.n	800bfd2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf66:	d103      	bne.n	800bf70 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bf68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf6c:	60fb      	str	r3, [r7, #12]
 800bf6e:	e009      	b.n	800bf84 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d006      	beq.n	800bf84 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d101      	bne.n	800bf84 <osSemaphoreWait+0x40>
      ticks = 1;
 800bf80:	2301      	movs	r3, #1
 800bf82:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bf84:	f7ff ff32 	bl	800bdec <inHandlerMode>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d017      	beq.n	800bfbe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bf8e:	f107 0308 	add.w	r3, r7, #8
 800bf92:	461a      	mov	r2, r3
 800bf94:	2100      	movs	r1, #0
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fe58 	bl	800cc4c <xQueueReceiveFromISR>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d001      	beq.n	800bfa6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800bfa2:	23ff      	movs	r3, #255	; 0xff
 800bfa4:	e015      	b.n	800bfd2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d011      	beq.n	800bfd0 <osSemaphoreWait+0x8c>
 800bfac:	4b0b      	ldr	r3, [pc, #44]	; (800bfdc <osSemaphoreWait+0x98>)
 800bfae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfb2:	601a      	str	r2, [r3, #0]
 800bfb4:	f3bf 8f4f 	dsb	sy
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	e008      	b.n	800bfd0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bfbe:	68f9      	ldr	r1, [r7, #12]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fd37 	bl	800ca34 <xQueueSemaphoreTake>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d001      	beq.n	800bfd0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800bfcc:	23ff      	movs	r3, #255	; 0xff
 800bfce:	e000      	b.n	800bfd2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	e000ed04 	.word	0xe000ed04

0800bfe0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b084      	sub	sp, #16
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bfec:	2300      	movs	r3, #0
 800bfee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800bff0:	f7ff fefc 	bl	800bdec <inHandlerMode>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d016      	beq.n	800c028 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bffa:	f107 0308 	add.w	r3, r7, #8
 800bffe:	4619      	mov	r1, r3
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 fbaa 	bl	800c75a <xQueueGiveFromISR>
 800c006:	4603      	mov	r3, r0
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d001      	beq.n	800c010 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c00c:	23ff      	movs	r3, #255	; 0xff
 800c00e:	e017      	b.n	800c040 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d013      	beq.n	800c03e <osSemaphoreRelease+0x5e>
 800c016:	4b0c      	ldr	r3, [pc, #48]	; (800c048 <osSemaphoreRelease+0x68>)
 800c018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c01c:	601a      	str	r2, [r3, #0]
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	f3bf 8f6f 	isb	sy
 800c026:	e00a      	b.n	800c03e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c028:	2300      	movs	r3, #0
 800c02a:	2200      	movs	r2, #0
 800c02c:	2100      	movs	r1, #0
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f9fa 	bl	800c428 <xQueueGenericSend>
 800c034:	4603      	mov	r3, r0
 800c036:	2b01      	cmp	r3, #1
 800c038:	d001      	beq.n	800c03e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c03a:	23ff      	movs	r3, #255	; 0xff
 800c03c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c03e:	68fb      	ldr	r3, [r7, #12]
}
 800c040:	4618      	mov	r0, r3
 800c042:	3710      	adds	r7, #16
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	e000ed04 	.word	0xe000ed04

0800c04c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f103 0208 	add.w	r2, r3, #8
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c064:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f103 0208 	add.w	r2, r3, #8
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f103 0208 	add.w	r2, r3, #8
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c09a:	bf00      	nop
 800c09c:	370c      	adds	r7, #12
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c0a6:	b480      	push	{r7}
 800c0a8:	b085      	sub	sp, #20
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	68fa      	ldr	r2, [r7, #12]
 800c0ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	689a      	ldr	r2, [r3, #8]
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	683a      	ldr	r2, [r7, #0]
 800c0ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	683a      	ldr	r2, [r7, #0]
 800c0d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	1c5a      	adds	r2, r3, #1
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	601a      	str	r2, [r3, #0]
}
 800c0e2:	bf00      	nop
 800c0e4:	3714      	adds	r7, #20
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr

0800c0ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c0ee:	b480      	push	{r7}
 800c0f0:	b085      	sub	sp, #20
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
 800c0f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c104:	d103      	bne.n	800c10e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	691b      	ldr	r3, [r3, #16]
 800c10a:	60fb      	str	r3, [r7, #12]
 800c10c:	e00c      	b.n	800c128 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	3308      	adds	r3, #8
 800c112:	60fb      	str	r3, [r7, #12]
 800c114:	e002      	b.n	800c11c <vListInsert+0x2e>
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	60fb      	str	r3, [r7, #12]
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68ba      	ldr	r2, [r7, #8]
 800c124:	429a      	cmp	r2, r3
 800c126:	d2f6      	bcs.n	800c116 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	685a      	ldr	r2, [r3, #4]
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	683a      	ldr	r2, [r7, #0]
 800c136:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	68fa      	ldr	r2, [r7, #12]
 800c13c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	683a      	ldr	r2, [r7, #0]
 800c142:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	1c5a      	adds	r2, r3, #1
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	601a      	str	r2, [r3, #0]
}
 800c154:	bf00      	nop
 800c156:	3714      	adds	r7, #20
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c160:	b480      	push	{r7}
 800c162:	b085      	sub	sp, #20
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	691b      	ldr	r3, [r3, #16]
 800c16c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	6892      	ldr	r2, [r2, #8]
 800c176:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	6852      	ldr	r2, [r2, #4]
 800c180:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d103      	bne.n	800c194 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	689a      	ldr	r2, [r3, #8]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	1e5a      	subs	r2, r3, #1
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3714      	adds	r7, #20
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10a      	bne.n	800c1de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1cc:	f383 8811 	msr	BASEPRI, r3
 800c1d0:	f3bf 8f6f 	isb	sy
 800c1d4:	f3bf 8f4f 	dsb	sy
 800c1d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c1da:	bf00      	nop
 800c1dc:	e7fe      	b.n	800c1dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c1de:	f002 fbc1 	bl	800e964 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ea:	68f9      	ldr	r1, [r7, #12]
 800c1ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c1ee:	fb01 f303 	mul.w	r3, r1, r3
 800c1f2:	441a      	add	r2, r3
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c20e:	3b01      	subs	r3, #1
 800c210:	68f9      	ldr	r1, [r7, #12]
 800c212:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c214:	fb01 f303 	mul.w	r3, r1, r3
 800c218:	441a      	add	r2, r3
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	22ff      	movs	r2, #255	; 0xff
 800c222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	22ff      	movs	r2, #255	; 0xff
 800c22a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d114      	bne.n	800c25e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	691b      	ldr	r3, [r3, #16]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d01a      	beq.n	800c272 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	3310      	adds	r3, #16
 800c240:	4618      	mov	r0, r3
 800c242:	f001 fb55 	bl	800d8f0 <xTaskRemoveFromEventList>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d012      	beq.n	800c272 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c24c:	4b0c      	ldr	r3, [pc, #48]	; (800c280 <xQueueGenericReset+0xcc>)
 800c24e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c252:	601a      	str	r2, [r3, #0]
 800c254:	f3bf 8f4f 	dsb	sy
 800c258:	f3bf 8f6f 	isb	sy
 800c25c:	e009      	b.n	800c272 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	3310      	adds	r3, #16
 800c262:	4618      	mov	r0, r3
 800c264:	f7ff fef2 	bl	800c04c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	3324      	adds	r3, #36	; 0x24
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7ff feed 	bl	800c04c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c272:	f002 fba7 	bl	800e9c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c276:	2301      	movs	r3, #1
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	e000ed04 	.word	0xe000ed04

0800c284 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c284:	b580      	push	{r7, lr}
 800c286:	b08e      	sub	sp, #56	; 0x38
 800c288:	af02      	add	r7, sp, #8
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10a      	bne.n	800c2ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29c:	f383 8811 	msr	BASEPRI, r3
 800c2a0:	f3bf 8f6f 	isb	sy
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c2aa:	bf00      	nop
 800c2ac:	e7fe      	b.n	800c2ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d10a      	bne.n	800c2ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b8:	f383 8811 	msr	BASEPRI, r3
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	f3bf 8f4f 	dsb	sy
 800c2c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c2c6:	bf00      	nop
 800c2c8:	e7fe      	b.n	800c2c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d002      	beq.n	800c2d6 <xQueueGenericCreateStatic+0x52>
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d001      	beq.n	800c2da <xQueueGenericCreateStatic+0x56>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e000      	b.n	800c2dc <xQueueGenericCreateStatic+0x58>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d10a      	bne.n	800c2f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	623b      	str	r3, [r7, #32]
}
 800c2f2:	bf00      	nop
 800c2f4:	e7fe      	b.n	800c2f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d102      	bne.n	800c302 <xQueueGenericCreateStatic+0x7e>
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d101      	bne.n	800c306 <xQueueGenericCreateStatic+0x82>
 800c302:	2301      	movs	r3, #1
 800c304:	e000      	b.n	800c308 <xQueueGenericCreateStatic+0x84>
 800c306:	2300      	movs	r3, #0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d10a      	bne.n	800c322 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c310:	f383 8811 	msr	BASEPRI, r3
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	61fb      	str	r3, [r7, #28]
}
 800c31e:	bf00      	nop
 800c320:	e7fe      	b.n	800c320 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c322:	2348      	movs	r3, #72	; 0x48
 800c324:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	2b48      	cmp	r3, #72	; 0x48
 800c32a:	d00a      	beq.n	800c342 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	61bb      	str	r3, [r7, #24]
}
 800c33e:	bf00      	nop
 800c340:	e7fe      	b.n	800c340 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c342:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00d      	beq.n	800c36a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c350:	2201      	movs	r2, #1
 800c352:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c356:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35c:	9300      	str	r3, [sp, #0]
 800c35e:	4613      	mov	r3, r2
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	68b9      	ldr	r1, [r7, #8]
 800c364:	68f8      	ldr	r0, [r7, #12]
 800c366:	f000 f83f 	bl	800c3e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3730      	adds	r7, #48	; 0x30
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c374:	b580      	push	{r7, lr}
 800c376:	b08a      	sub	sp, #40	; 0x28
 800c378:	af02      	add	r7, sp, #8
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	4613      	mov	r3, r2
 800c380:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d10a      	bne.n	800c39e <xQueueGenericCreate+0x2a>
	__asm volatile
 800c388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38c:	f383 8811 	msr	BASEPRI, r3
 800c390:	f3bf 8f6f 	isb	sy
 800c394:	f3bf 8f4f 	dsb	sy
 800c398:	613b      	str	r3, [r7, #16]
}
 800c39a:	bf00      	nop
 800c39c:	e7fe      	b.n	800c39c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	68ba      	ldr	r2, [r7, #8]
 800c3a2:	fb02 f303 	mul.w	r3, r2, r3
 800c3a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	3348      	adds	r3, #72	; 0x48
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f002 fbfb 	bl	800eba8 <pvPortMalloc>
 800c3b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d011      	beq.n	800c3de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	3348      	adds	r3, #72	; 0x48
 800c3c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c3cc:	79fa      	ldrb	r2, [r7, #7]
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	9300      	str	r3, [sp, #0]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	697a      	ldr	r2, [r7, #20]
 800c3d6:	68b9      	ldr	r1, [r7, #8]
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f000 f805 	bl	800c3e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c3de:	69bb      	ldr	r3, [r7, #24]
	}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3720      	adds	r7, #32
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d103      	bne.n	800c404 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	69ba      	ldr	r2, [r7, #24]
 800c400:	601a      	str	r2, [r3, #0]
 800c402:	e002      	b.n	800c40a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	68ba      	ldr	r2, [r7, #8]
 800c414:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c416:	2101      	movs	r1, #1
 800c418:	69b8      	ldr	r0, [r7, #24]
 800c41a:	f7ff fecb 	bl	800c1b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c41e:	bf00      	nop
 800c420:	3710      	adds	r7, #16
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
	...

0800c428 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b08e      	sub	sp, #56	; 0x38
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
 800c434:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c436:	2300      	movs	r3, #0
 800c438:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c440:	2b00      	cmp	r3, #0
 800c442:	d10a      	bne.n	800c45a <xQueueGenericSend+0x32>
	__asm volatile
 800c444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c456:	bf00      	nop
 800c458:	e7fe      	b.n	800c458 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d103      	bne.n	800c468 <xQueueGenericSend+0x40>
 800c460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c464:	2b00      	cmp	r3, #0
 800c466:	d101      	bne.n	800c46c <xQueueGenericSend+0x44>
 800c468:	2301      	movs	r3, #1
 800c46a:	e000      	b.n	800c46e <xQueueGenericSend+0x46>
 800c46c:	2300      	movs	r3, #0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d10a      	bne.n	800c488 <xQueueGenericSend+0x60>
	__asm volatile
 800c472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c476:	f383 8811 	msr	BASEPRI, r3
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c484:	bf00      	nop
 800c486:	e7fe      	b.n	800c486 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	2b02      	cmp	r3, #2
 800c48c:	d103      	bne.n	800c496 <xQueueGenericSend+0x6e>
 800c48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c492:	2b01      	cmp	r3, #1
 800c494:	d101      	bne.n	800c49a <xQueueGenericSend+0x72>
 800c496:	2301      	movs	r3, #1
 800c498:	e000      	b.n	800c49c <xQueueGenericSend+0x74>
 800c49a:	2300      	movs	r3, #0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d10a      	bne.n	800c4b6 <xQueueGenericSend+0x8e>
	__asm volatile
 800c4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	623b      	str	r3, [r7, #32]
}
 800c4b2:	bf00      	nop
 800c4b4:	e7fe      	b.n	800c4b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4b6:	f001 fbd7 	bl	800dc68 <xTaskGetSchedulerState>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d102      	bne.n	800c4c6 <xQueueGenericSend+0x9e>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d101      	bne.n	800c4ca <xQueueGenericSend+0xa2>
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e000      	b.n	800c4cc <xQueueGenericSend+0xa4>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d10a      	bne.n	800c4e6 <xQueueGenericSend+0xbe>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	61fb      	str	r3, [r7, #28]
}
 800c4e2:	bf00      	nop
 800c4e4:	e7fe      	b.n	800c4e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4e6:	f002 fa3d 	bl	800e964 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d302      	bcc.n	800c4fc <xQueueGenericSend+0xd4>
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	2b02      	cmp	r3, #2
 800c4fa:	d129      	bne.n	800c550 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c4fc:	683a      	ldr	r2, [r7, #0]
 800c4fe:	68b9      	ldr	r1, [r7, #8]
 800c500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c502:	f000 fc3b 	bl	800cd7c <prvCopyDataToQueue>
 800c506:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d010      	beq.n	800c532 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c512:	3324      	adds	r3, #36	; 0x24
 800c514:	4618      	mov	r0, r3
 800c516:	f001 f9eb 	bl	800d8f0 <xTaskRemoveFromEventList>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d013      	beq.n	800c548 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c520:	4b3f      	ldr	r3, [pc, #252]	; (800c620 <xQueueGenericSend+0x1f8>)
 800c522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c526:	601a      	str	r2, [r3, #0]
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	f3bf 8f6f 	isb	sy
 800c530:	e00a      	b.n	800c548 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c534:	2b00      	cmp	r3, #0
 800c536:	d007      	beq.n	800c548 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c538:	4b39      	ldr	r3, [pc, #228]	; (800c620 <xQueueGenericSend+0x1f8>)
 800c53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c53e:	601a      	str	r2, [r3, #0]
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c548:	f002 fa3c 	bl	800e9c4 <vPortExitCritical>
				return pdPASS;
 800c54c:	2301      	movs	r3, #1
 800c54e:	e063      	b.n	800c618 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d103      	bne.n	800c55e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c556:	f002 fa35 	bl	800e9c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c55a:	2300      	movs	r3, #0
 800c55c:	e05c      	b.n	800c618 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c560:	2b00      	cmp	r3, #0
 800c562:	d106      	bne.n	800c572 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c564:	f107 0314 	add.w	r3, r7, #20
 800c568:	4618      	mov	r0, r3
 800c56a:	f001 fa23 	bl	800d9b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c56e:	2301      	movs	r3, #1
 800c570:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c572:	f002 fa27 	bl	800e9c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c576:	f000 ff9d 	bl	800d4b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c57a:	f002 f9f3 	bl	800e964 <vPortEnterCritical>
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c584:	b25b      	sxtb	r3, r3
 800c586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c58a:	d103      	bne.n	800c594 <xQueueGenericSend+0x16c>
 800c58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c596:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c59a:	b25b      	sxtb	r3, r3
 800c59c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5a0:	d103      	bne.n	800c5aa <xQueueGenericSend+0x182>
 800c5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5aa:	f002 fa0b 	bl	800e9c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5ae:	1d3a      	adds	r2, r7, #4
 800c5b0:	f107 0314 	add.w	r3, r7, #20
 800c5b4:	4611      	mov	r1, r2
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f001 fa12 	bl	800d9e0 <xTaskCheckForTimeOut>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d124      	bne.n	800c60c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c5c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5c4:	f000 fcd2 	bl	800cf6c <prvIsQueueFull>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d018      	beq.n	800c600 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d0:	3310      	adds	r3, #16
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	4611      	mov	r1, r2
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f001 f93a 	bl	800d850 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c5dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5de:	f000 fc5d 	bl	800ce9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c5e2:	f000 ff75 	bl	800d4d0 <xTaskResumeAll>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	f47f af7c 	bne.w	800c4e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c5ee:	4b0c      	ldr	r3, [pc, #48]	; (800c620 <xQueueGenericSend+0x1f8>)
 800c5f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5f4:	601a      	str	r2, [r3, #0]
 800c5f6:	f3bf 8f4f 	dsb	sy
 800c5fa:	f3bf 8f6f 	isb	sy
 800c5fe:	e772      	b.n	800c4e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c602:	f000 fc4b 	bl	800ce9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c606:	f000 ff63 	bl	800d4d0 <xTaskResumeAll>
 800c60a:	e76c      	b.n	800c4e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c60c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c60e:	f000 fc45 	bl	800ce9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c612:	f000 ff5d 	bl	800d4d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c616:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3738      	adds	r7, #56	; 0x38
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	e000ed04 	.word	0xe000ed04

0800c624 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b090      	sub	sp, #64	; 0x40
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
 800c630:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d10a      	bne.n	800c652 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c640:	f383 8811 	msr	BASEPRI, r3
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c64e:	bf00      	nop
 800c650:	e7fe      	b.n	800c650 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d103      	bne.n	800c660 <xQueueGenericSendFromISR+0x3c>
 800c658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d101      	bne.n	800c664 <xQueueGenericSendFromISR+0x40>
 800c660:	2301      	movs	r3, #1
 800c662:	e000      	b.n	800c666 <xQueueGenericSendFromISR+0x42>
 800c664:	2300      	movs	r3, #0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d10a      	bne.n	800c680 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66e:	f383 8811 	msr	BASEPRI, r3
 800c672:	f3bf 8f6f 	isb	sy
 800c676:	f3bf 8f4f 	dsb	sy
 800c67a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c67c:	bf00      	nop
 800c67e:	e7fe      	b.n	800c67e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	2b02      	cmp	r3, #2
 800c684:	d103      	bne.n	800c68e <xQueueGenericSendFromISR+0x6a>
 800c686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d101      	bne.n	800c692 <xQueueGenericSendFromISR+0x6e>
 800c68e:	2301      	movs	r3, #1
 800c690:	e000      	b.n	800c694 <xQueueGenericSendFromISR+0x70>
 800c692:	2300      	movs	r3, #0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d10a      	bne.n	800c6ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69c:	f383 8811 	msr	BASEPRI, r3
 800c6a0:	f3bf 8f6f 	isb	sy
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	623b      	str	r3, [r7, #32]
}
 800c6aa:	bf00      	nop
 800c6ac:	e7fe      	b.n	800c6ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6ae:	f002 fa3b 	bl	800eb28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c6b2:	f3ef 8211 	mrs	r2, BASEPRI
 800c6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	61fa      	str	r2, [r7, #28]
 800c6c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c6ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d302      	bcc.n	800c6e0 <xQueueGenericSendFromISR+0xbc>
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	2b02      	cmp	r3, #2
 800c6de:	d12f      	bne.n	800c740 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c6f0:	683a      	ldr	r2, [r7, #0]
 800c6f2:	68b9      	ldr	r1, [r7, #8]
 800c6f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c6f6:	f000 fb41 	bl	800cd7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c6fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c6fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c702:	d112      	bne.n	800c72a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d016      	beq.n	800c73a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70e:	3324      	adds	r3, #36	; 0x24
 800c710:	4618      	mov	r0, r3
 800c712:	f001 f8ed 	bl	800d8f0 <xTaskRemoveFromEventList>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00e      	beq.n	800c73a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d00b      	beq.n	800c73a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2201      	movs	r2, #1
 800c726:	601a      	str	r2, [r3, #0]
 800c728:	e007      	b.n	800c73a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c72a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c72e:	3301      	adds	r3, #1
 800c730:	b2db      	uxtb	r3, r3
 800c732:	b25a      	sxtb	r2, r3
 800c734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c73a:	2301      	movs	r3, #1
 800c73c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c73e:	e001      	b.n	800c744 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c740:	2300      	movs	r3, #0
 800c742:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c746:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c74e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c752:	4618      	mov	r0, r3
 800c754:	3740      	adds	r7, #64	; 0x40
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b08e      	sub	sp, #56	; 0x38
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d10a      	bne.n	800c784 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c772:	f383 8811 	msr	BASEPRI, r3
 800c776:	f3bf 8f6f 	isb	sy
 800c77a:	f3bf 8f4f 	dsb	sy
 800c77e:	623b      	str	r3, [r7, #32]
}
 800c780:	bf00      	nop
 800c782:	e7fe      	b.n	800c782 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d00a      	beq.n	800c7a2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c790:	f383 8811 	msr	BASEPRI, r3
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	61fb      	str	r3, [r7, #28]
}
 800c79e:	bf00      	nop
 800c7a0:	e7fe      	b.n	800c7a0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d103      	bne.n	800c7b2 <xQueueGiveFromISR+0x58>
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d101      	bne.n	800c7b6 <xQueueGiveFromISR+0x5c>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e000      	b.n	800c7b8 <xQueueGiveFromISR+0x5e>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d10a      	bne.n	800c7d2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c0:	f383 8811 	msr	BASEPRI, r3
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	61bb      	str	r3, [r7, #24]
}
 800c7ce:	bf00      	nop
 800c7d0:	e7fe      	b.n	800c7d0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7d2:	f002 f9a9 	bl	800eb28 <vPortValidateInterruptPriority>
	__asm volatile
 800c7d6:	f3ef 8211 	mrs	r2, BASEPRI
 800c7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7de:	f383 8811 	msr	BASEPRI, r3
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	f3bf 8f4f 	dsb	sy
 800c7ea:	617a      	str	r2, [r7, #20]
 800c7ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c7ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d22b      	bcs.n	800c85a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80e:	1c5a      	adds	r2, r3, #1
 800c810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c812:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c814:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c81c:	d112      	bne.n	800c844 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c822:	2b00      	cmp	r3, #0
 800c824:	d016      	beq.n	800c854 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c828:	3324      	adds	r3, #36	; 0x24
 800c82a:	4618      	mov	r0, r3
 800c82c:	f001 f860 	bl	800d8f0 <xTaskRemoveFromEventList>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d00e      	beq.n	800c854 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d00b      	beq.n	800c854 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	2201      	movs	r2, #1
 800c840:	601a      	str	r2, [r3, #0]
 800c842:	e007      	b.n	800c854 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c848:	3301      	adds	r3, #1
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	b25a      	sxtb	r2, r3
 800c84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c854:	2301      	movs	r3, #1
 800c856:	637b      	str	r3, [r7, #52]	; 0x34
 800c858:	e001      	b.n	800c85e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c85a:	2300      	movs	r3, #0
 800c85c:	637b      	str	r3, [r7, #52]	; 0x34
 800c85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c860:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f383 8811 	msr	BASEPRI, r3
}
 800c868:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3738      	adds	r7, #56	; 0x38
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08c      	sub	sp, #48	; 0x30
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c880:	2300      	movs	r3, #0
 800c882:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d10a      	bne.n	800c8a4 <xQueueReceive+0x30>
	__asm volatile
 800c88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c892:	f383 8811 	msr	BASEPRI, r3
 800c896:	f3bf 8f6f 	isb	sy
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	623b      	str	r3, [r7, #32]
}
 800c8a0:	bf00      	nop
 800c8a2:	e7fe      	b.n	800c8a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d103      	bne.n	800c8b2 <xQueueReceive+0x3e>
 800c8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d101      	bne.n	800c8b6 <xQueueReceive+0x42>
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	e000      	b.n	800c8b8 <xQueueReceive+0x44>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d10a      	bne.n	800c8d2 <xQueueReceive+0x5e>
	__asm volatile
 800c8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c0:	f383 8811 	msr	BASEPRI, r3
 800c8c4:	f3bf 8f6f 	isb	sy
 800c8c8:	f3bf 8f4f 	dsb	sy
 800c8cc:	61fb      	str	r3, [r7, #28]
}
 800c8ce:	bf00      	nop
 800c8d0:	e7fe      	b.n	800c8d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8d2:	f001 f9c9 	bl	800dc68 <xTaskGetSchedulerState>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d102      	bne.n	800c8e2 <xQueueReceive+0x6e>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d101      	bne.n	800c8e6 <xQueueReceive+0x72>
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e000      	b.n	800c8e8 <xQueueReceive+0x74>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d10a      	bne.n	800c902 <xQueueReceive+0x8e>
	__asm volatile
 800c8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f0:	f383 8811 	msr	BASEPRI, r3
 800c8f4:	f3bf 8f6f 	isb	sy
 800c8f8:	f3bf 8f4f 	dsb	sy
 800c8fc:	61bb      	str	r3, [r7, #24]
}
 800c8fe:	bf00      	nop
 800c900:	e7fe      	b.n	800c900 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c902:	f002 f82f 	bl	800e964 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c90a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d01f      	beq.n	800c952 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c912:	68b9      	ldr	r1, [r7, #8]
 800c914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c916:	f000 fa9b 	bl	800ce50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	1e5a      	subs	r2, r3, #1
 800c91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c920:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d00f      	beq.n	800c94a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92c:	3310      	adds	r3, #16
 800c92e:	4618      	mov	r0, r3
 800c930:	f000 ffde 	bl	800d8f0 <xTaskRemoveFromEventList>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d007      	beq.n	800c94a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c93a:	4b3d      	ldr	r3, [pc, #244]	; (800ca30 <xQueueReceive+0x1bc>)
 800c93c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c940:	601a      	str	r2, [r3, #0]
 800c942:	f3bf 8f4f 	dsb	sy
 800c946:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c94a:	f002 f83b 	bl	800e9c4 <vPortExitCritical>
				return pdPASS;
 800c94e:	2301      	movs	r3, #1
 800c950:	e069      	b.n	800ca26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d103      	bne.n	800c960 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c958:	f002 f834 	bl	800e9c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c95c:	2300      	movs	r3, #0
 800c95e:	e062      	b.n	800ca26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c962:	2b00      	cmp	r3, #0
 800c964:	d106      	bne.n	800c974 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c966:	f107 0310 	add.w	r3, r7, #16
 800c96a:	4618      	mov	r0, r3
 800c96c:	f001 f822 	bl	800d9b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c970:	2301      	movs	r3, #1
 800c972:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c974:	f002 f826 	bl	800e9c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c978:	f000 fd9c 	bl	800d4b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c97c:	f001 fff2 	bl	800e964 <vPortEnterCritical>
 800c980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c982:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c986:	b25b      	sxtb	r3, r3
 800c988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c98c:	d103      	bne.n	800c996 <xQueueReceive+0x122>
 800c98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c990:	2200      	movs	r2, #0
 800c992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c998:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c99c:	b25b      	sxtb	r3, r3
 800c99e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9a2:	d103      	bne.n	800c9ac <xQueueReceive+0x138>
 800c9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9ac:	f002 f80a 	bl	800e9c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c9b0:	1d3a      	adds	r2, r7, #4
 800c9b2:	f107 0310 	add.w	r3, r7, #16
 800c9b6:	4611      	mov	r1, r2
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f001 f811 	bl	800d9e0 <xTaskCheckForTimeOut>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d123      	bne.n	800ca0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9c6:	f000 fabb 	bl	800cf40 <prvIsQueueEmpty>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d017      	beq.n	800ca00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d2:	3324      	adds	r3, #36	; 0x24
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	4611      	mov	r1, r2
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f000 ff39 	bl	800d850 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c9de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9e0:	f000 fa5c 	bl	800ce9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c9e4:	f000 fd74 	bl	800d4d0 <xTaskResumeAll>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d189      	bne.n	800c902 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c9ee:	4b10      	ldr	r3, [pc, #64]	; (800ca30 <xQueueReceive+0x1bc>)
 800c9f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9f4:	601a      	str	r2, [r3, #0]
 800c9f6:	f3bf 8f4f 	dsb	sy
 800c9fa:	f3bf 8f6f 	isb	sy
 800c9fe:	e780      	b.n	800c902 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ca00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca02:	f000 fa4b 	bl	800ce9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca06:	f000 fd63 	bl	800d4d0 <xTaskResumeAll>
 800ca0a:	e77a      	b.n	800c902 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ca0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca0e:	f000 fa45 	bl	800ce9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca12:	f000 fd5d 	bl	800d4d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca18:	f000 fa92 	bl	800cf40 <prvIsQueueEmpty>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f43f af6f 	beq.w	800c902 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ca24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3730      	adds	r7, #48	; 0x30
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	e000ed04 	.word	0xe000ed04

0800ca34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b08e      	sub	sp, #56	; 0x38
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ca46:	2300      	movs	r3, #0
 800ca48:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ca4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10a      	bne.n	800ca66 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ca50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	623b      	str	r3, [r7, #32]
}
 800ca62:	bf00      	nop
 800ca64:	e7fe      	b.n	800ca64 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ca66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00a      	beq.n	800ca84 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ca6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca72:	f383 8811 	msr	BASEPRI, r3
 800ca76:	f3bf 8f6f 	isb	sy
 800ca7a:	f3bf 8f4f 	dsb	sy
 800ca7e:	61fb      	str	r3, [r7, #28]
}
 800ca80:	bf00      	nop
 800ca82:	e7fe      	b.n	800ca82 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca84:	f001 f8f0 	bl	800dc68 <xTaskGetSchedulerState>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d102      	bne.n	800ca94 <xQueueSemaphoreTake+0x60>
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d101      	bne.n	800ca98 <xQueueSemaphoreTake+0x64>
 800ca94:	2301      	movs	r3, #1
 800ca96:	e000      	b.n	800ca9a <xQueueSemaphoreTake+0x66>
 800ca98:	2300      	movs	r3, #0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d10a      	bne.n	800cab4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ca9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa2:	f383 8811 	msr	BASEPRI, r3
 800caa6:	f3bf 8f6f 	isb	sy
 800caaa:	f3bf 8f4f 	dsb	sy
 800caae:	61bb      	str	r3, [r7, #24]
}
 800cab0:	bf00      	nop
 800cab2:	e7fe      	b.n	800cab2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cab4:	f001 ff56 	bl	800e964 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cabc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d024      	beq.n	800cb0e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac6:	1e5a      	subs	r2, r3, #1
 800cac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d104      	bne.n	800cade <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cad4:	f001 fa70 	bl	800dfb8 <pvTaskIncrementMutexHeldCount>
 800cad8:	4602      	mov	r2, r0
 800cada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cadc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00f      	beq.n	800cb06 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae8:	3310      	adds	r3, #16
 800caea:	4618      	mov	r0, r3
 800caec:	f000 ff00 	bl	800d8f0 <xTaskRemoveFromEventList>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d007      	beq.n	800cb06 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800caf6:	4b54      	ldr	r3, [pc, #336]	; (800cc48 <xQueueSemaphoreTake+0x214>)
 800caf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cafc:	601a      	str	r2, [r3, #0]
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cb06:	f001 ff5d 	bl	800e9c4 <vPortExitCritical>
				return pdPASS;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e097      	b.n	800cc3e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d111      	bne.n	800cb38 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00a      	beq.n	800cb30 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1e:	f383 8811 	msr	BASEPRI, r3
 800cb22:	f3bf 8f6f 	isb	sy
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	617b      	str	r3, [r7, #20]
}
 800cb2c:	bf00      	nop
 800cb2e:	e7fe      	b.n	800cb2e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cb30:	f001 ff48 	bl	800e9c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb34:	2300      	movs	r3, #0
 800cb36:	e082      	b.n	800cc3e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d106      	bne.n	800cb4c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb3e:	f107 030c 	add.w	r3, r7, #12
 800cb42:	4618      	mov	r0, r3
 800cb44:	f000 ff36 	bl	800d9b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb4c:	f001 ff3a 	bl	800e9c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb50:	f000 fcb0 	bl	800d4b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb54:	f001 ff06 	bl	800e964 <vPortEnterCritical>
 800cb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb5e:	b25b      	sxtb	r3, r3
 800cb60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb64:	d103      	bne.n	800cb6e <xQueueSemaphoreTake+0x13a>
 800cb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb74:	b25b      	sxtb	r3, r3
 800cb76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb7a:	d103      	bne.n	800cb84 <xQueueSemaphoreTake+0x150>
 800cb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb84:	f001 ff1e 	bl	800e9c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb88:	463a      	mov	r2, r7
 800cb8a:	f107 030c 	add.w	r3, r7, #12
 800cb8e:	4611      	mov	r1, r2
 800cb90:	4618      	mov	r0, r3
 800cb92:	f000 ff25 	bl	800d9e0 <xTaskCheckForTimeOut>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d132      	bne.n	800cc02 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb9e:	f000 f9cf 	bl	800cf40 <prvIsQueueEmpty>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d026      	beq.n	800cbf6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d109      	bne.n	800cbc4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cbb0:	f001 fed8 	bl	800e964 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f001 f873 	bl	800dca4 <xTaskPriorityInherit>
 800cbbe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cbc0:	f001 ff00 	bl	800e9c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc6:	3324      	adds	r3, #36	; 0x24
 800cbc8:	683a      	ldr	r2, [r7, #0]
 800cbca:	4611      	mov	r1, r2
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f000 fe3f 	bl	800d850 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cbd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbd4:	f000 f962 	bl	800ce9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cbd8:	f000 fc7a 	bl	800d4d0 <xTaskResumeAll>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	f47f af68 	bne.w	800cab4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800cbe4:	4b18      	ldr	r3, [pc, #96]	; (800cc48 <xQueueSemaphoreTake+0x214>)
 800cbe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbea:	601a      	str	r2, [r3, #0]
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	f3bf 8f6f 	isb	sy
 800cbf4:	e75e      	b.n	800cab4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cbf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbf8:	f000 f950 	bl	800ce9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cbfc:	f000 fc68 	bl	800d4d0 <xTaskResumeAll>
 800cc00:	e758      	b.n	800cab4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cc02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc04:	f000 f94a 	bl	800ce9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc08:	f000 fc62 	bl	800d4d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc0e:	f000 f997 	bl	800cf40 <prvIsQueueEmpty>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	f43f af4d 	beq.w	800cab4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d00d      	beq.n	800cc3c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800cc20:	f001 fea0 	bl	800e964 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cc24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc26:	f000 f891 	bl	800cd4c <prvGetDisinheritPriorityAfterTimeout>
 800cc2a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc32:	4618      	mov	r0, r3
 800cc34:	f001 f932 	bl	800de9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cc38:	f001 fec4 	bl	800e9c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cc3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3738      	adds	r7, #56	; 0x38
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	e000ed04 	.word	0xe000ed04

0800cc4c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b08e      	sub	sp, #56	; 0x38
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	60f8      	str	r0, [r7, #12]
 800cc54:	60b9      	str	r1, [r7, #8]
 800cc56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d10a      	bne.n	800cc78 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc66:	f383 8811 	msr	BASEPRI, r3
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	f3bf 8f4f 	dsb	sy
 800cc72:	623b      	str	r3, [r7, #32]
}
 800cc74:	bf00      	nop
 800cc76:	e7fe      	b.n	800cc76 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d103      	bne.n	800cc86 <xQueueReceiveFromISR+0x3a>
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d101      	bne.n	800cc8a <xQueueReceiveFromISR+0x3e>
 800cc86:	2301      	movs	r3, #1
 800cc88:	e000      	b.n	800cc8c <xQueueReceiveFromISR+0x40>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d10a      	bne.n	800cca6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc94:	f383 8811 	msr	BASEPRI, r3
 800cc98:	f3bf 8f6f 	isb	sy
 800cc9c:	f3bf 8f4f 	dsb	sy
 800cca0:	61fb      	str	r3, [r7, #28]
}
 800cca2:	bf00      	nop
 800cca4:	e7fe      	b.n	800cca4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cca6:	f001 ff3f 	bl	800eb28 <vPortValidateInterruptPriority>
	__asm volatile
 800ccaa:	f3ef 8211 	mrs	r2, BASEPRI
 800ccae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	61ba      	str	r2, [r7, #24]
 800ccc0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ccc2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ccc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d02f      	beq.n	800cd32 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ccd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ccdc:	68b9      	ldr	r1, [r7, #8]
 800ccde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cce0:	f000 f8b6 	bl	800ce50 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce6:	1e5a      	subs	r2, r3, #1
 800cce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ccec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ccf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccf4:	d112      	bne.n	800cd1c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf8:	691b      	ldr	r3, [r3, #16]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d016      	beq.n	800cd2c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd00:	3310      	adds	r3, #16
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 fdf4 	bl	800d8f0 <xTaskRemoveFromEventList>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00e      	beq.n	800cd2c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00b      	beq.n	800cd2c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2201      	movs	r2, #1
 800cd18:	601a      	str	r2, [r3, #0]
 800cd1a:	e007      	b.n	800cd2c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cd1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd20:	3301      	adds	r3, #1
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	b25a      	sxtb	r2, r3
 800cd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	637b      	str	r3, [r7, #52]	; 0x34
 800cd30:	e001      	b.n	800cd36 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cd32:	2300      	movs	r3, #0
 800cd34:	637b      	str	r3, [r7, #52]	; 0x34
 800cd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd38:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	f383 8811 	msr	BASEPRI, r3
}
 800cd40:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3738      	adds	r7, #56	; 0x38
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d006      	beq.n	800cd6a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f1c3 0307 	rsb	r3, r3, #7
 800cd66:	60fb      	str	r3, [r7, #12]
 800cd68:	e001      	b.n	800cd6e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
	}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3714      	adds	r7, #20
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr

0800cd7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b086      	sub	sp, #24
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d10d      	bne.n	800cdb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d14d      	bne.n	800ce3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	689b      	ldr	r3, [r3, #8]
 800cda6:	4618      	mov	r0, r3
 800cda8:	f000 fff2 	bl	800dd90 <xTaskPriorityDisinherit>
 800cdac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	609a      	str	r2, [r3, #8]
 800cdb4:	e043      	b.n	800ce3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d119      	bne.n	800cdf0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	6858      	ldr	r0, [r3, #4]
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	68b9      	ldr	r1, [r7, #8]
 800cdc8:	f002 f906 	bl	800efd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	685a      	ldr	r2, [r3, #4]
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd4:	441a      	add	r2, r3
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	685a      	ldr	r2, [r3, #4]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d32b      	bcc.n	800ce3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	605a      	str	r2, [r3, #4]
 800cdee:	e026      	b.n	800ce3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	68d8      	ldr	r0, [r3, #12]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	68b9      	ldr	r1, [r7, #8]
 800cdfc:	f002 f8ec 	bl	800efd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	68da      	ldr	r2, [r3, #12]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce08:	425b      	negs	r3, r3
 800ce0a:	441a      	add	r2, r3
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	68da      	ldr	r2, [r3, #12]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d207      	bcs.n	800ce2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	689a      	ldr	r2, [r3, #8]
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce24:	425b      	negs	r3, r3
 800ce26:	441a      	add	r2, r3
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2b02      	cmp	r3, #2
 800ce30:	d105      	bne.n	800ce3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d002      	beq.n	800ce3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	3b01      	subs	r3, #1
 800ce3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	1c5a      	adds	r2, r3, #1
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ce46:	697b      	ldr	r3, [r7, #20]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3718      	adds	r7, #24
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d018      	beq.n	800ce94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	68da      	ldr	r2, [r3, #12]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce6a:	441a      	add	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	68da      	ldr	r2, [r3, #12]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	689b      	ldr	r3, [r3, #8]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d303      	bcc.n	800ce84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	68d9      	ldr	r1, [r3, #12]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	6838      	ldr	r0, [r7, #0]
 800ce90:	f002 f8a2 	bl	800efd8 <memcpy>
	}
}
 800ce94:	bf00      	nop
 800ce96:	3708      	adds	r7, #8
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cea4:	f001 fd5e 	bl	800e964 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ceae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ceb0:	e011      	b.n	800ced6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d012      	beq.n	800cee0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	3324      	adds	r3, #36	; 0x24
 800cebe:	4618      	mov	r0, r3
 800cec0:	f000 fd16 	bl	800d8f0 <xTaskRemoveFromEventList>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ceca:	f000 fdeb 	bl	800daa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cece:	7bfb      	ldrb	r3, [r7, #15]
 800ced0:	3b01      	subs	r3, #1
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ced6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	dce9      	bgt.n	800ceb2 <prvUnlockQueue+0x16>
 800cede:	e000      	b.n	800cee2 <prvUnlockQueue+0x46>
					break;
 800cee0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	22ff      	movs	r2, #255	; 0xff
 800cee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ceea:	f001 fd6b 	bl	800e9c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ceee:	f001 fd39 	bl	800e964 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cef8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cefa:	e011      	b.n	800cf20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	691b      	ldr	r3, [r3, #16]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d012      	beq.n	800cf2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	3310      	adds	r3, #16
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f000 fcf1 	bl	800d8f0 <xTaskRemoveFromEventList>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d001      	beq.n	800cf18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cf14:	f000 fdc6 	bl	800daa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cf18:	7bbb      	ldrb	r3, [r7, #14]
 800cf1a:	3b01      	subs	r3, #1
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	dce9      	bgt.n	800cefc <prvUnlockQueue+0x60>
 800cf28:	e000      	b.n	800cf2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cf2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	22ff      	movs	r2, #255	; 0xff
 800cf30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cf34:	f001 fd46 	bl	800e9c4 <vPortExitCritical>
}
 800cf38:	bf00      	nop
 800cf3a:	3710      	adds	r7, #16
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf48:	f001 fd0c 	bl	800e964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d102      	bne.n	800cf5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cf54:	2301      	movs	r3, #1
 800cf56:	60fb      	str	r3, [r7, #12]
 800cf58:	e001      	b.n	800cf5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cf5e:	f001 fd31 	bl	800e9c4 <vPortExitCritical>

	return xReturn;
 800cf62:	68fb      	ldr	r3, [r7, #12]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf74:	f001 fcf6 	bl	800e964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d102      	bne.n	800cf8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cf84:	2301      	movs	r3, #1
 800cf86:	60fb      	str	r3, [r7, #12]
 800cf88:	e001      	b.n	800cf8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cf8e:	f001 fd19 	bl	800e9c4 <vPortExitCritical>

	return xReturn;
 800cf92:	68fb      	ldr	r3, [r7, #12]
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3710      	adds	r7, #16
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b085      	sub	sp, #20
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	60fb      	str	r3, [r7, #12]
 800cfaa:	e014      	b.n	800cfd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cfac:	4a0f      	ldr	r2, [pc, #60]	; (800cfec <vQueueAddToRegistry+0x50>)
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d10b      	bne.n	800cfd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cfb8:	490c      	ldr	r1, [pc, #48]	; (800cfec <vQueueAddToRegistry+0x50>)
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	683a      	ldr	r2, [r7, #0]
 800cfbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cfc2:	4a0a      	ldr	r2, [pc, #40]	; (800cfec <vQueueAddToRegistry+0x50>)
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	00db      	lsls	r3, r3, #3
 800cfc8:	4413      	add	r3, r2
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cfce:	e006      	b.n	800cfde <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	60fb      	str	r3, [r7, #12]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2b07      	cmp	r3, #7
 800cfda:	d9e7      	bls.n	800cfac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cfdc:	bf00      	nop
 800cfde:	bf00      	nop
 800cfe0:	3714      	adds	r7, #20
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	200091ec 	.word	0x200091ec

0800cff0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b086      	sub	sp, #24
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d000:	f001 fcb0 	bl	800e964 <vPortEnterCritical>
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d00a:	b25b      	sxtb	r3, r3
 800d00c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d010:	d103      	bne.n	800d01a <vQueueWaitForMessageRestricted+0x2a>
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	2200      	movs	r2, #0
 800d016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d020:	b25b      	sxtb	r3, r3
 800d022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d026:	d103      	bne.n	800d030 <vQueueWaitForMessageRestricted+0x40>
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	2200      	movs	r2, #0
 800d02c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d030:	f001 fcc8 	bl	800e9c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d106      	bne.n	800d04a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	3324      	adds	r3, #36	; 0x24
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	68b9      	ldr	r1, [r7, #8]
 800d044:	4618      	mov	r0, r3
 800d046:	f000 fc27 	bl	800d898 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d04a:	6978      	ldr	r0, [r7, #20]
 800d04c:	f7ff ff26 	bl	800ce9c <prvUnlockQueue>
	}
 800d050:	bf00      	nop
 800d052:	3718      	adds	r7, #24
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b08e      	sub	sp, #56	; 0x38
 800d05c:	af04      	add	r7, sp, #16
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
 800d064:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d10a      	bne.n	800d082 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d070:	f383 8811 	msr	BASEPRI, r3
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	623b      	str	r3, [r7, #32]
}
 800d07e:	bf00      	nop
 800d080:	e7fe      	b.n	800d080 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d084:	2b00      	cmp	r3, #0
 800d086:	d10a      	bne.n	800d09e <xTaskCreateStatic+0x46>
	__asm volatile
 800d088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08c:	f383 8811 	msr	BASEPRI, r3
 800d090:	f3bf 8f6f 	isb	sy
 800d094:	f3bf 8f4f 	dsb	sy
 800d098:	61fb      	str	r3, [r7, #28]
}
 800d09a:	bf00      	nop
 800d09c:	e7fe      	b.n	800d09c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d09e:	2354      	movs	r3, #84	; 0x54
 800d0a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	2b54      	cmp	r3, #84	; 0x54
 800d0a6:	d00a      	beq.n	800d0be <xTaskCreateStatic+0x66>
	__asm volatile
 800d0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ac:	f383 8811 	msr	BASEPRI, r3
 800d0b0:	f3bf 8f6f 	isb	sy
 800d0b4:	f3bf 8f4f 	dsb	sy
 800d0b8:	61bb      	str	r3, [r7, #24]
}
 800d0ba:	bf00      	nop
 800d0bc:	e7fe      	b.n	800d0bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d0be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d01e      	beq.n	800d104 <xTaskCreateStatic+0xac>
 800d0c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d01b      	beq.n	800d104 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d8:	2202      	movs	r2, #2
 800d0da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d0de:	2300      	movs	r3, #0
 800d0e0:	9303      	str	r3, [sp, #12]
 800d0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e4:	9302      	str	r3, [sp, #8]
 800d0e6:	f107 0314 	add.w	r3, r7, #20
 800d0ea:	9301      	str	r3, [sp, #4]
 800d0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ee:	9300      	str	r3, [sp, #0]
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	68b9      	ldr	r1, [r7, #8]
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f000 f850 	bl	800d19c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d0fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d0fe:	f000 f8d5 	bl	800d2ac <prvAddNewTaskToReadyList>
 800d102:	e001      	b.n	800d108 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d104:	2300      	movs	r3, #0
 800d106:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d108:	697b      	ldr	r3, [r7, #20]
	}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3728      	adds	r7, #40	; 0x28
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d112:	b580      	push	{r7, lr}
 800d114:	b08c      	sub	sp, #48	; 0x30
 800d116:	af04      	add	r7, sp, #16
 800d118:	60f8      	str	r0, [r7, #12]
 800d11a:	60b9      	str	r1, [r7, #8]
 800d11c:	603b      	str	r3, [r7, #0]
 800d11e:	4613      	mov	r3, r2
 800d120:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d122:	88fb      	ldrh	r3, [r7, #6]
 800d124:	009b      	lsls	r3, r3, #2
 800d126:	4618      	mov	r0, r3
 800d128:	f001 fd3e 	bl	800eba8 <pvPortMalloc>
 800d12c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d00e      	beq.n	800d152 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d134:	2054      	movs	r0, #84	; 0x54
 800d136:	f001 fd37 	bl	800eba8 <pvPortMalloc>
 800d13a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d003      	beq.n	800d14a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d142:	69fb      	ldr	r3, [r7, #28]
 800d144:	697a      	ldr	r2, [r7, #20]
 800d146:	631a      	str	r2, [r3, #48]	; 0x30
 800d148:	e005      	b.n	800d156 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d14a:	6978      	ldr	r0, [r7, #20]
 800d14c:	f001 fdf8 	bl	800ed40 <vPortFree>
 800d150:	e001      	b.n	800d156 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d152:	2300      	movs	r3, #0
 800d154:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d156:	69fb      	ldr	r3, [r7, #28]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d017      	beq.n	800d18c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d15c:	69fb      	ldr	r3, [r7, #28]
 800d15e:	2200      	movs	r2, #0
 800d160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d164:	88fa      	ldrh	r2, [r7, #6]
 800d166:	2300      	movs	r3, #0
 800d168:	9303      	str	r3, [sp, #12]
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	9302      	str	r3, [sp, #8]
 800d16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d170:	9301      	str	r3, [sp, #4]
 800d172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d174:	9300      	str	r3, [sp, #0]
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	68b9      	ldr	r1, [r7, #8]
 800d17a:	68f8      	ldr	r0, [r7, #12]
 800d17c:	f000 f80e 	bl	800d19c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d180:	69f8      	ldr	r0, [r7, #28]
 800d182:	f000 f893 	bl	800d2ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d186:	2301      	movs	r3, #1
 800d188:	61bb      	str	r3, [r7, #24]
 800d18a:	e002      	b.n	800d192 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d18c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d190:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d192:	69bb      	ldr	r3, [r7, #24]
	}
 800d194:	4618      	mov	r0, r3
 800d196:	3720      	adds	r7, #32
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b088      	sub	sp, #32
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	60b9      	str	r1, [r7, #8]
 800d1a6:	607a      	str	r2, [r7, #4]
 800d1a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d1b4:	3b01      	subs	r3, #1
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	4413      	add	r3, r2
 800d1ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d1bc:	69bb      	ldr	r3, [r7, #24]
 800d1be:	f023 0307 	bic.w	r3, r3, #7
 800d1c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d1c4:	69bb      	ldr	r3, [r7, #24]
 800d1c6:	f003 0307 	and.w	r3, r3, #7
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00a      	beq.n	800d1e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d2:	f383 8811 	msr	BASEPRI, r3
 800d1d6:	f3bf 8f6f 	isb	sy
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	617b      	str	r3, [r7, #20]
}
 800d1e0:	bf00      	nop
 800d1e2:	e7fe      	b.n	800d1e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d01f      	beq.n	800d22a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	61fb      	str	r3, [r7, #28]
 800d1ee:	e012      	b.n	800d216 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d1f0:	68ba      	ldr	r2, [r7, #8]
 800d1f2:	69fb      	ldr	r3, [r7, #28]
 800d1f4:	4413      	add	r3, r2
 800d1f6:	7819      	ldrb	r1, [r3, #0]
 800d1f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	3334      	adds	r3, #52	; 0x34
 800d200:	460a      	mov	r2, r1
 800d202:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d204:	68ba      	ldr	r2, [r7, #8]
 800d206:	69fb      	ldr	r3, [r7, #28]
 800d208:	4413      	add	r3, r2
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d006      	beq.n	800d21e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	3301      	adds	r3, #1
 800d214:	61fb      	str	r3, [r7, #28]
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	2b0f      	cmp	r3, #15
 800d21a:	d9e9      	bls.n	800d1f0 <prvInitialiseNewTask+0x54>
 800d21c:	e000      	b.n	800d220 <prvInitialiseNewTask+0x84>
			{
				break;
 800d21e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d222:	2200      	movs	r2, #0
 800d224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d228:	e003      	b.n	800d232 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d22c:	2200      	movs	r2, #0
 800d22e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d234:	2b06      	cmp	r3, #6
 800d236:	d901      	bls.n	800d23c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d238:	2306      	movs	r3, #6
 800d23a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d240:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d246:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24a:	2200      	movs	r2, #0
 800d24c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d250:	3304      	adds	r3, #4
 800d252:	4618      	mov	r0, r3
 800d254:	f7fe ff1a 	bl	800c08c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25a:	3318      	adds	r3, #24
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7fe ff15 	bl	800c08c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d266:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26a:	f1c3 0207 	rsb	r2, r3, #7
 800d26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d270:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d276:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27a:	2200      	movs	r2, #0
 800d27c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d280:	2200      	movs	r2, #0
 800d282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d286:	683a      	ldr	r2, [r7, #0]
 800d288:	68f9      	ldr	r1, [r7, #12]
 800d28a:	69b8      	ldr	r0, [r7, #24]
 800d28c:	f001 fa40 	bl	800e710 <pxPortInitialiseStack>
 800d290:	4602      	mov	r2, r0
 800d292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d294:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d002      	beq.n	800d2a2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2a2:	bf00      	nop
 800d2a4:	3720      	adds	r7, #32
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
	...

0800d2ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d2b4:	f001 fb56 	bl	800e964 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d2b8:	4b2a      	ldr	r3, [pc, #168]	; (800d364 <prvAddNewTaskToReadyList+0xb8>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	3301      	adds	r3, #1
 800d2be:	4a29      	ldr	r2, [pc, #164]	; (800d364 <prvAddNewTaskToReadyList+0xb8>)
 800d2c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d2c2:	4b29      	ldr	r3, [pc, #164]	; (800d368 <prvAddNewTaskToReadyList+0xbc>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d109      	bne.n	800d2de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d2ca:	4a27      	ldr	r2, [pc, #156]	; (800d368 <prvAddNewTaskToReadyList+0xbc>)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d2d0:	4b24      	ldr	r3, [pc, #144]	; (800d364 <prvAddNewTaskToReadyList+0xb8>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d110      	bne.n	800d2fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d2d8:	f000 fc08 	bl	800daec <prvInitialiseTaskLists>
 800d2dc:	e00d      	b.n	800d2fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d2de:	4b23      	ldr	r3, [pc, #140]	; (800d36c <prvAddNewTaskToReadyList+0xc0>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d109      	bne.n	800d2fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d2e6:	4b20      	ldr	r3, [pc, #128]	; (800d368 <prvAddNewTaskToReadyList+0xbc>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d802      	bhi.n	800d2fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d2f4:	4a1c      	ldr	r2, [pc, #112]	; (800d368 <prvAddNewTaskToReadyList+0xbc>)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d2fa:	4b1d      	ldr	r3, [pc, #116]	; (800d370 <prvAddNewTaskToReadyList+0xc4>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	3301      	adds	r3, #1
 800d300:	4a1b      	ldr	r2, [pc, #108]	; (800d370 <prvAddNewTaskToReadyList+0xc4>)
 800d302:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d308:	2201      	movs	r2, #1
 800d30a:	409a      	lsls	r2, r3
 800d30c:	4b19      	ldr	r3, [pc, #100]	; (800d374 <prvAddNewTaskToReadyList+0xc8>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4313      	orrs	r3, r2
 800d312:	4a18      	ldr	r2, [pc, #96]	; (800d374 <prvAddNewTaskToReadyList+0xc8>)
 800d314:	6013      	str	r3, [r2, #0]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d31a:	4613      	mov	r3, r2
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	4413      	add	r3, r2
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	4a15      	ldr	r2, [pc, #84]	; (800d378 <prvAddNewTaskToReadyList+0xcc>)
 800d324:	441a      	add	r2, r3
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	3304      	adds	r3, #4
 800d32a:	4619      	mov	r1, r3
 800d32c:	4610      	mov	r0, r2
 800d32e:	f7fe feba 	bl	800c0a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d332:	f001 fb47 	bl	800e9c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d336:	4b0d      	ldr	r3, [pc, #52]	; (800d36c <prvAddNewTaskToReadyList+0xc0>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00e      	beq.n	800d35c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d33e:	4b0a      	ldr	r3, [pc, #40]	; (800d368 <prvAddNewTaskToReadyList+0xbc>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d348:	429a      	cmp	r2, r3
 800d34a:	d207      	bcs.n	800d35c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d34c:	4b0b      	ldr	r3, [pc, #44]	; (800d37c <prvAddNewTaskToReadyList+0xd0>)
 800d34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d352:	601a      	str	r2, [r3, #0]
 800d354:	f3bf 8f4f 	dsb	sy
 800d358:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d35c:	bf00      	nop
 800d35e:	3708      	adds	r7, #8
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}
 800d364:	2000085c 	.word	0x2000085c
 800d368:	2000075c 	.word	0x2000075c
 800d36c:	20000868 	.word	0x20000868
 800d370:	20000878 	.word	0x20000878
 800d374:	20000864 	.word	0x20000864
 800d378:	20000760 	.word	0x20000760
 800d37c:	e000ed04 	.word	0xe000ed04

0800d380 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d388:	2300      	movs	r3, #0
 800d38a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d017      	beq.n	800d3c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d392:	4b13      	ldr	r3, [pc, #76]	; (800d3e0 <vTaskDelay+0x60>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00a      	beq.n	800d3b0 <vTaskDelay+0x30>
	__asm volatile
 800d39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39e:	f383 8811 	msr	BASEPRI, r3
 800d3a2:	f3bf 8f6f 	isb	sy
 800d3a6:	f3bf 8f4f 	dsb	sy
 800d3aa:	60bb      	str	r3, [r7, #8]
}
 800d3ac:	bf00      	nop
 800d3ae:	e7fe      	b.n	800d3ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d3b0:	f000 f880 	bl	800d4b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d3b4:	2100      	movs	r1, #0
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 fe12 	bl	800dfe0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d3bc:	f000 f888 	bl	800d4d0 <xTaskResumeAll>
 800d3c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d107      	bne.n	800d3d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d3c8:	4b06      	ldr	r3, [pc, #24]	; (800d3e4 <vTaskDelay+0x64>)
 800d3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ce:	601a      	str	r2, [r3, #0]
 800d3d0:	f3bf 8f4f 	dsb	sy
 800d3d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d3d8:	bf00      	nop
 800d3da:	3710      	adds	r7, #16
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	20000884 	.word	0x20000884
 800d3e4:	e000ed04 	.word	0xe000ed04

0800d3e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b08a      	sub	sp, #40	; 0x28
 800d3ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d3f6:	463a      	mov	r2, r7
 800d3f8:	1d39      	adds	r1, r7, #4
 800d3fa:	f107 0308 	add.w	r3, r7, #8
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7f5 f8b6 	bl	8002570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d404:	6839      	ldr	r1, [r7, #0]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	68ba      	ldr	r2, [r7, #8]
 800d40a:	9202      	str	r2, [sp, #8]
 800d40c:	9301      	str	r3, [sp, #4]
 800d40e:	2300      	movs	r3, #0
 800d410:	9300      	str	r3, [sp, #0]
 800d412:	2300      	movs	r3, #0
 800d414:	460a      	mov	r2, r1
 800d416:	4921      	ldr	r1, [pc, #132]	; (800d49c <vTaskStartScheduler+0xb4>)
 800d418:	4821      	ldr	r0, [pc, #132]	; (800d4a0 <vTaskStartScheduler+0xb8>)
 800d41a:	f7ff fe1d 	bl	800d058 <xTaskCreateStatic>
 800d41e:	4603      	mov	r3, r0
 800d420:	4a20      	ldr	r2, [pc, #128]	; (800d4a4 <vTaskStartScheduler+0xbc>)
 800d422:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d424:	4b1f      	ldr	r3, [pc, #124]	; (800d4a4 <vTaskStartScheduler+0xbc>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d002      	beq.n	800d432 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d42c:	2301      	movs	r3, #1
 800d42e:	617b      	str	r3, [r7, #20]
 800d430:	e001      	b.n	800d436 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d432:	2300      	movs	r3, #0
 800d434:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d102      	bne.n	800d442 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d43c:	f000 fe36 	bl	800e0ac <xTimerCreateTimerTask>
 800d440:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	2b01      	cmp	r3, #1
 800d446:	d116      	bne.n	800d476 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44c:	f383 8811 	msr	BASEPRI, r3
 800d450:	f3bf 8f6f 	isb	sy
 800d454:	f3bf 8f4f 	dsb	sy
 800d458:	613b      	str	r3, [r7, #16]
}
 800d45a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d45c:	4b12      	ldr	r3, [pc, #72]	; (800d4a8 <vTaskStartScheduler+0xc0>)
 800d45e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d462:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d464:	4b11      	ldr	r3, [pc, #68]	; (800d4ac <vTaskStartScheduler+0xc4>)
 800d466:	2201      	movs	r2, #1
 800d468:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d46a:	4b11      	ldr	r3, [pc, #68]	; (800d4b0 <vTaskStartScheduler+0xc8>)
 800d46c:	2200      	movs	r2, #0
 800d46e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d470:	f001 f9d6 	bl	800e820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d474:	e00e      	b.n	800d494 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d47c:	d10a      	bne.n	800d494 <vTaskStartScheduler+0xac>
	__asm volatile
 800d47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d482:	f383 8811 	msr	BASEPRI, r3
 800d486:	f3bf 8f6f 	isb	sy
 800d48a:	f3bf 8f4f 	dsb	sy
 800d48e:	60fb      	str	r3, [r7, #12]
}
 800d490:	bf00      	nop
 800d492:	e7fe      	b.n	800d492 <vTaskStartScheduler+0xaa>
}
 800d494:	bf00      	nop
 800d496:	3718      	adds	r7, #24
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	08010520 	.word	0x08010520
 800d4a0:	0800dabd 	.word	0x0800dabd
 800d4a4:	20000880 	.word	0x20000880
 800d4a8:	2000087c 	.word	0x2000087c
 800d4ac:	20000868 	.word	0x20000868
 800d4b0:	20000860 	.word	0x20000860

0800d4b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d4b8:	4b04      	ldr	r3, [pc, #16]	; (800d4cc <vTaskSuspendAll+0x18>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	4a03      	ldr	r2, [pc, #12]	; (800d4cc <vTaskSuspendAll+0x18>)
 800d4c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d4c2:	bf00      	nop
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr
 800d4cc:	20000884 	.word	0x20000884

0800d4d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d4de:	4b41      	ldr	r3, [pc, #260]	; (800d5e4 <xTaskResumeAll+0x114>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d10a      	bne.n	800d4fc <xTaskResumeAll+0x2c>
	__asm volatile
 800d4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f3bf 8f4f 	dsb	sy
 800d4f6:	603b      	str	r3, [r7, #0]
}
 800d4f8:	bf00      	nop
 800d4fa:	e7fe      	b.n	800d4fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d4fc:	f001 fa32 	bl	800e964 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d500:	4b38      	ldr	r3, [pc, #224]	; (800d5e4 <xTaskResumeAll+0x114>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	3b01      	subs	r3, #1
 800d506:	4a37      	ldr	r2, [pc, #220]	; (800d5e4 <xTaskResumeAll+0x114>)
 800d508:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d50a:	4b36      	ldr	r3, [pc, #216]	; (800d5e4 <xTaskResumeAll+0x114>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d161      	bne.n	800d5d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d512:	4b35      	ldr	r3, [pc, #212]	; (800d5e8 <xTaskResumeAll+0x118>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d05d      	beq.n	800d5d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d51a:	e02e      	b.n	800d57a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d51c:	4b33      	ldr	r3, [pc, #204]	; (800d5ec <xTaskResumeAll+0x11c>)
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	3318      	adds	r3, #24
 800d528:	4618      	mov	r0, r3
 800d52a:	f7fe fe19 	bl	800c160 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	3304      	adds	r3, #4
 800d532:	4618      	mov	r0, r3
 800d534:	f7fe fe14 	bl	800c160 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d53c:	2201      	movs	r2, #1
 800d53e:	409a      	lsls	r2, r3
 800d540:	4b2b      	ldr	r3, [pc, #172]	; (800d5f0 <xTaskResumeAll+0x120>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4313      	orrs	r3, r2
 800d546:	4a2a      	ldr	r2, [pc, #168]	; (800d5f0 <xTaskResumeAll+0x120>)
 800d548:	6013      	str	r3, [r2, #0]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d54e:	4613      	mov	r3, r2
 800d550:	009b      	lsls	r3, r3, #2
 800d552:	4413      	add	r3, r2
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	4a27      	ldr	r2, [pc, #156]	; (800d5f4 <xTaskResumeAll+0x124>)
 800d558:	441a      	add	r2, r3
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	3304      	adds	r3, #4
 800d55e:	4619      	mov	r1, r3
 800d560:	4610      	mov	r0, r2
 800d562:	f7fe fda0 	bl	800c0a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d56a:	4b23      	ldr	r3, [pc, #140]	; (800d5f8 <xTaskResumeAll+0x128>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d570:	429a      	cmp	r2, r3
 800d572:	d302      	bcc.n	800d57a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d574:	4b21      	ldr	r3, [pc, #132]	; (800d5fc <xTaskResumeAll+0x12c>)
 800d576:	2201      	movs	r2, #1
 800d578:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d57a:	4b1c      	ldr	r3, [pc, #112]	; (800d5ec <xTaskResumeAll+0x11c>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d1cc      	bne.n	800d51c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d001      	beq.n	800d58c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d588:	f000 fb4e 	bl	800dc28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d58c:	4b1c      	ldr	r3, [pc, #112]	; (800d600 <xTaskResumeAll+0x130>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d010      	beq.n	800d5ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d598:	f000 f846 	bl	800d628 <xTaskIncrementTick>
 800d59c:	4603      	mov	r3, r0
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d002      	beq.n	800d5a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d5a2:	4b16      	ldr	r3, [pc, #88]	; (800d5fc <xTaskResumeAll+0x12c>)
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d1f1      	bne.n	800d598 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d5b4:	4b12      	ldr	r3, [pc, #72]	; (800d600 <xTaskResumeAll+0x130>)
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d5ba:	4b10      	ldr	r3, [pc, #64]	; (800d5fc <xTaskResumeAll+0x12c>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d009      	beq.n	800d5d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d5c6:	4b0f      	ldr	r3, [pc, #60]	; (800d604 <xTaskResumeAll+0x134>)
 800d5c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5cc:	601a      	str	r2, [r3, #0]
 800d5ce:	f3bf 8f4f 	dsb	sy
 800d5d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d5d6:	f001 f9f5 	bl	800e9c4 <vPortExitCritical>

	return xAlreadyYielded;
 800d5da:	68bb      	ldr	r3, [r7, #8]
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3710      	adds	r7, #16
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	20000884 	.word	0x20000884
 800d5e8:	2000085c 	.word	0x2000085c
 800d5ec:	2000081c 	.word	0x2000081c
 800d5f0:	20000864 	.word	0x20000864
 800d5f4:	20000760 	.word	0x20000760
 800d5f8:	2000075c 	.word	0x2000075c
 800d5fc:	20000870 	.word	0x20000870
 800d600:	2000086c 	.word	0x2000086c
 800d604:	e000ed04 	.word	0xe000ed04

0800d608 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d608:	b480      	push	{r7}
 800d60a:	b083      	sub	sp, #12
 800d60c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d60e:	4b05      	ldr	r3, [pc, #20]	; (800d624 <xTaskGetTickCount+0x1c>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d614:	687b      	ldr	r3, [r7, #4]
}
 800d616:	4618      	mov	r0, r3
 800d618:	370c      	adds	r7, #12
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr
 800d622:	bf00      	nop
 800d624:	20000860 	.word	0x20000860

0800d628 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b086      	sub	sp, #24
 800d62c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d62e:	2300      	movs	r3, #0
 800d630:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d632:	4b4e      	ldr	r3, [pc, #312]	; (800d76c <xTaskIncrementTick+0x144>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	f040 808e 	bne.w	800d758 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d63c:	4b4c      	ldr	r3, [pc, #304]	; (800d770 <xTaskIncrementTick+0x148>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	3301      	adds	r3, #1
 800d642:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d644:	4a4a      	ldr	r2, [pc, #296]	; (800d770 <xTaskIncrementTick+0x148>)
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d120      	bne.n	800d692 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d650:	4b48      	ldr	r3, [pc, #288]	; (800d774 <xTaskIncrementTick+0x14c>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d00a      	beq.n	800d670 <xTaskIncrementTick+0x48>
	__asm volatile
 800d65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65e:	f383 8811 	msr	BASEPRI, r3
 800d662:	f3bf 8f6f 	isb	sy
 800d666:	f3bf 8f4f 	dsb	sy
 800d66a:	603b      	str	r3, [r7, #0]
}
 800d66c:	bf00      	nop
 800d66e:	e7fe      	b.n	800d66e <xTaskIncrementTick+0x46>
 800d670:	4b40      	ldr	r3, [pc, #256]	; (800d774 <xTaskIncrementTick+0x14c>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	60fb      	str	r3, [r7, #12]
 800d676:	4b40      	ldr	r3, [pc, #256]	; (800d778 <xTaskIncrementTick+0x150>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a3e      	ldr	r2, [pc, #248]	; (800d774 <xTaskIncrementTick+0x14c>)
 800d67c:	6013      	str	r3, [r2, #0]
 800d67e:	4a3e      	ldr	r2, [pc, #248]	; (800d778 <xTaskIncrementTick+0x150>)
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	6013      	str	r3, [r2, #0]
 800d684:	4b3d      	ldr	r3, [pc, #244]	; (800d77c <xTaskIncrementTick+0x154>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	3301      	adds	r3, #1
 800d68a:	4a3c      	ldr	r2, [pc, #240]	; (800d77c <xTaskIncrementTick+0x154>)
 800d68c:	6013      	str	r3, [r2, #0]
 800d68e:	f000 facb 	bl	800dc28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d692:	4b3b      	ldr	r3, [pc, #236]	; (800d780 <xTaskIncrementTick+0x158>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	693a      	ldr	r2, [r7, #16]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d348      	bcc.n	800d72e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d69c:	4b35      	ldr	r3, [pc, #212]	; (800d774 <xTaskIncrementTick+0x14c>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d104      	bne.n	800d6b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6a6:	4b36      	ldr	r3, [pc, #216]	; (800d780 <xTaskIncrementTick+0x158>)
 800d6a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6ac:	601a      	str	r2, [r3, #0]
					break;
 800d6ae:	e03e      	b.n	800d72e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6b0:	4b30      	ldr	r3, [pc, #192]	; (800d774 <xTaskIncrementTick+0x14c>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	68db      	ldr	r3, [r3, #12]
 800d6b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d6c0:	693a      	ldr	r2, [r7, #16]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d203      	bcs.n	800d6d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d6c8:	4a2d      	ldr	r2, [pc, #180]	; (800d780 <xTaskIncrementTick+0x158>)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d6ce:	e02e      	b.n	800d72e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	3304      	adds	r3, #4
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7fe fd43 	bl	800c160 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d004      	beq.n	800d6ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	3318      	adds	r3, #24
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fe fd3a 	bl	800c160 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	409a      	lsls	r2, r3
 800d6f4:	4b23      	ldr	r3, [pc, #140]	; (800d784 <xTaskIncrementTick+0x15c>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	4a22      	ldr	r2, [pc, #136]	; (800d784 <xTaskIncrementTick+0x15c>)
 800d6fc:	6013      	str	r3, [r2, #0]
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d702:	4613      	mov	r3, r2
 800d704:	009b      	lsls	r3, r3, #2
 800d706:	4413      	add	r3, r2
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	4a1f      	ldr	r2, [pc, #124]	; (800d788 <xTaskIncrementTick+0x160>)
 800d70c:	441a      	add	r2, r3
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	3304      	adds	r3, #4
 800d712:	4619      	mov	r1, r3
 800d714:	4610      	mov	r0, r2
 800d716:	f7fe fcc6 	bl	800c0a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d71e:	4b1b      	ldr	r3, [pc, #108]	; (800d78c <xTaskIncrementTick+0x164>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d724:	429a      	cmp	r2, r3
 800d726:	d3b9      	bcc.n	800d69c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d728:	2301      	movs	r3, #1
 800d72a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d72c:	e7b6      	b.n	800d69c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d72e:	4b17      	ldr	r3, [pc, #92]	; (800d78c <xTaskIncrementTick+0x164>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d734:	4914      	ldr	r1, [pc, #80]	; (800d788 <xTaskIncrementTick+0x160>)
 800d736:	4613      	mov	r3, r2
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	4413      	add	r3, r2
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	440b      	add	r3, r1
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2b01      	cmp	r3, #1
 800d744:	d901      	bls.n	800d74a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d746:	2301      	movs	r3, #1
 800d748:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d74a:	4b11      	ldr	r3, [pc, #68]	; (800d790 <xTaskIncrementTick+0x168>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d007      	beq.n	800d762 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d752:	2301      	movs	r3, #1
 800d754:	617b      	str	r3, [r7, #20]
 800d756:	e004      	b.n	800d762 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d758:	4b0e      	ldr	r3, [pc, #56]	; (800d794 <xTaskIncrementTick+0x16c>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	3301      	adds	r3, #1
 800d75e:	4a0d      	ldr	r2, [pc, #52]	; (800d794 <xTaskIncrementTick+0x16c>)
 800d760:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d762:	697b      	ldr	r3, [r7, #20]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3718      	adds	r7, #24
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	20000884 	.word	0x20000884
 800d770:	20000860 	.word	0x20000860
 800d774:	20000814 	.word	0x20000814
 800d778:	20000818 	.word	0x20000818
 800d77c:	20000874 	.word	0x20000874
 800d780:	2000087c 	.word	0x2000087c
 800d784:	20000864 	.word	0x20000864
 800d788:	20000760 	.word	0x20000760
 800d78c:	2000075c 	.word	0x2000075c
 800d790:	20000870 	.word	0x20000870
 800d794:	2000086c 	.word	0x2000086c

0800d798 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d798:	b480      	push	{r7}
 800d79a:	b087      	sub	sp, #28
 800d79c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d79e:	4b27      	ldr	r3, [pc, #156]	; (800d83c <vTaskSwitchContext+0xa4>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d003      	beq.n	800d7ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d7a6:	4b26      	ldr	r3, [pc, #152]	; (800d840 <vTaskSwitchContext+0xa8>)
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d7ac:	e03f      	b.n	800d82e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d7ae:	4b24      	ldr	r3, [pc, #144]	; (800d840 <vTaskSwitchContext+0xa8>)
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7b4:	4b23      	ldr	r3, [pc, #140]	; (800d844 <vTaskSwitchContext+0xac>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	fab3 f383 	clz	r3, r3
 800d7c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d7c2:	7afb      	ldrb	r3, [r7, #11]
 800d7c4:	f1c3 031f 	rsb	r3, r3, #31
 800d7c8:	617b      	str	r3, [r7, #20]
 800d7ca:	491f      	ldr	r1, [pc, #124]	; (800d848 <vTaskSwitchContext+0xb0>)
 800d7cc:	697a      	ldr	r2, [r7, #20]
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	4413      	add	r3, r2
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	440b      	add	r3, r1
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d10a      	bne.n	800d7f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e2:	f383 8811 	msr	BASEPRI, r3
 800d7e6:	f3bf 8f6f 	isb	sy
 800d7ea:	f3bf 8f4f 	dsb	sy
 800d7ee:	607b      	str	r3, [r7, #4]
}
 800d7f0:	bf00      	nop
 800d7f2:	e7fe      	b.n	800d7f2 <vTaskSwitchContext+0x5a>
 800d7f4:	697a      	ldr	r2, [r7, #20]
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	009b      	lsls	r3, r3, #2
 800d7fa:	4413      	add	r3, r2
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	4a12      	ldr	r2, [pc, #72]	; (800d848 <vTaskSwitchContext+0xb0>)
 800d800:	4413      	add	r3, r2
 800d802:	613b      	str	r3, [r7, #16]
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	685a      	ldr	r2, [r3, #4]
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	605a      	str	r2, [r3, #4]
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	685a      	ldr	r2, [r3, #4]
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	3308      	adds	r3, #8
 800d816:	429a      	cmp	r2, r3
 800d818:	d104      	bne.n	800d824 <vTaskSwitchContext+0x8c>
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	685a      	ldr	r2, [r3, #4]
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	605a      	str	r2, [r3, #4]
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	4a08      	ldr	r2, [pc, #32]	; (800d84c <vTaskSwitchContext+0xb4>)
 800d82c:	6013      	str	r3, [r2, #0]
}
 800d82e:	bf00      	nop
 800d830:	371c      	adds	r7, #28
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop
 800d83c:	20000884 	.word	0x20000884
 800d840:	20000870 	.word	0x20000870
 800d844:	20000864 	.word	0x20000864
 800d848:	20000760 	.word	0x20000760
 800d84c:	2000075c 	.word	0x2000075c

0800d850 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d10a      	bne.n	800d876 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	60fb      	str	r3, [r7, #12]
}
 800d872:	bf00      	nop
 800d874:	e7fe      	b.n	800d874 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d876:	4b07      	ldr	r3, [pc, #28]	; (800d894 <vTaskPlaceOnEventList+0x44>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	3318      	adds	r3, #24
 800d87c:	4619      	mov	r1, r3
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f7fe fc35 	bl	800c0ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d884:	2101      	movs	r1, #1
 800d886:	6838      	ldr	r0, [r7, #0]
 800d888:	f000 fbaa 	bl	800dfe0 <prvAddCurrentTaskToDelayedList>
}
 800d88c:	bf00      	nop
 800d88e:	3710      	adds	r7, #16
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	2000075c 	.word	0x2000075c

0800d898 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b086      	sub	sp, #24
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d10a      	bne.n	800d8c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ae:	f383 8811 	msr	BASEPRI, r3
 800d8b2:	f3bf 8f6f 	isb	sy
 800d8b6:	f3bf 8f4f 	dsb	sy
 800d8ba:	617b      	str	r3, [r7, #20]
}
 800d8bc:	bf00      	nop
 800d8be:	e7fe      	b.n	800d8be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8c0:	4b0a      	ldr	r3, [pc, #40]	; (800d8ec <vTaskPlaceOnEventListRestricted+0x54>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	3318      	adds	r3, #24
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	68f8      	ldr	r0, [r7, #12]
 800d8ca:	f7fe fbec 	bl	800c0a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d002      	beq.n	800d8da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d8d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d8da:	6879      	ldr	r1, [r7, #4]
 800d8dc:	68b8      	ldr	r0, [r7, #8]
 800d8de:	f000 fb7f 	bl	800dfe0 <prvAddCurrentTaskToDelayedList>
	}
 800d8e2:	bf00      	nop
 800d8e4:	3718      	adds	r7, #24
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	2000075c 	.word	0x2000075c

0800d8f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b086      	sub	sp, #24
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	68db      	ldr	r3, [r3, #12]
 800d8fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d10a      	bne.n	800d91c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90a:	f383 8811 	msr	BASEPRI, r3
 800d90e:	f3bf 8f6f 	isb	sy
 800d912:	f3bf 8f4f 	dsb	sy
 800d916:	60fb      	str	r3, [r7, #12]
}
 800d918:	bf00      	nop
 800d91a:	e7fe      	b.n	800d91a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	3318      	adds	r3, #24
 800d920:	4618      	mov	r0, r3
 800d922:	f7fe fc1d 	bl	800c160 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d926:	4b1d      	ldr	r3, [pc, #116]	; (800d99c <xTaskRemoveFromEventList+0xac>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d11c      	bne.n	800d968 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	3304      	adds	r3, #4
 800d932:	4618      	mov	r0, r3
 800d934:	f7fe fc14 	bl	800c160 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93c:	2201      	movs	r2, #1
 800d93e:	409a      	lsls	r2, r3
 800d940:	4b17      	ldr	r3, [pc, #92]	; (800d9a0 <xTaskRemoveFromEventList+0xb0>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4313      	orrs	r3, r2
 800d946:	4a16      	ldr	r2, [pc, #88]	; (800d9a0 <xTaskRemoveFromEventList+0xb0>)
 800d948:	6013      	str	r3, [r2, #0]
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d94e:	4613      	mov	r3, r2
 800d950:	009b      	lsls	r3, r3, #2
 800d952:	4413      	add	r3, r2
 800d954:	009b      	lsls	r3, r3, #2
 800d956:	4a13      	ldr	r2, [pc, #76]	; (800d9a4 <xTaskRemoveFromEventList+0xb4>)
 800d958:	441a      	add	r2, r3
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	3304      	adds	r3, #4
 800d95e:	4619      	mov	r1, r3
 800d960:	4610      	mov	r0, r2
 800d962:	f7fe fba0 	bl	800c0a6 <vListInsertEnd>
 800d966:	e005      	b.n	800d974 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	3318      	adds	r3, #24
 800d96c:	4619      	mov	r1, r3
 800d96e:	480e      	ldr	r0, [pc, #56]	; (800d9a8 <xTaskRemoveFromEventList+0xb8>)
 800d970:	f7fe fb99 	bl	800c0a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d978:	4b0c      	ldr	r3, [pc, #48]	; (800d9ac <xTaskRemoveFromEventList+0xbc>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d97e:	429a      	cmp	r2, r3
 800d980:	d905      	bls.n	800d98e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d982:	2301      	movs	r3, #1
 800d984:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d986:	4b0a      	ldr	r3, [pc, #40]	; (800d9b0 <xTaskRemoveFromEventList+0xc0>)
 800d988:	2201      	movs	r2, #1
 800d98a:	601a      	str	r2, [r3, #0]
 800d98c:	e001      	b.n	800d992 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d98e:	2300      	movs	r3, #0
 800d990:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d992:	697b      	ldr	r3, [r7, #20]
}
 800d994:	4618      	mov	r0, r3
 800d996:	3718      	adds	r7, #24
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	20000884 	.word	0x20000884
 800d9a0:	20000864 	.word	0x20000864
 800d9a4:	20000760 	.word	0x20000760
 800d9a8:	2000081c 	.word	0x2000081c
 800d9ac:	2000075c 	.word	0x2000075c
 800d9b0:	20000870 	.word	0x20000870

0800d9b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d9bc:	4b06      	ldr	r3, [pc, #24]	; (800d9d8 <vTaskInternalSetTimeOutState+0x24>)
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d9c4:	4b05      	ldr	r3, [pc, #20]	; (800d9dc <vTaskInternalSetTimeOutState+0x28>)
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	605a      	str	r2, [r3, #4]
}
 800d9cc:	bf00      	nop
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr
 800d9d8:	20000874 	.word	0x20000874
 800d9dc:	20000860 	.word	0x20000860

0800d9e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b088      	sub	sp, #32
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d10a      	bne.n	800da06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f4:	f383 8811 	msr	BASEPRI, r3
 800d9f8:	f3bf 8f6f 	isb	sy
 800d9fc:	f3bf 8f4f 	dsb	sy
 800da00:	613b      	str	r3, [r7, #16]
}
 800da02:	bf00      	nop
 800da04:	e7fe      	b.n	800da04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d10a      	bne.n	800da22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800da0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	60fb      	str	r3, [r7, #12]
}
 800da1e:	bf00      	nop
 800da20:	e7fe      	b.n	800da20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800da22:	f000 ff9f 	bl	800e964 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800da26:	4b1d      	ldr	r3, [pc, #116]	; (800da9c <xTaskCheckForTimeOut+0xbc>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	69ba      	ldr	r2, [r7, #24]
 800da32:	1ad3      	subs	r3, r2, r3
 800da34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da3e:	d102      	bne.n	800da46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800da40:	2300      	movs	r3, #0
 800da42:	61fb      	str	r3, [r7, #28]
 800da44:	e023      	b.n	800da8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	4b15      	ldr	r3, [pc, #84]	; (800daa0 <xTaskCheckForTimeOut+0xc0>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d007      	beq.n	800da62 <xTaskCheckForTimeOut+0x82>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	69ba      	ldr	r2, [r7, #24]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d302      	bcc.n	800da62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800da5c:	2301      	movs	r3, #1
 800da5e:	61fb      	str	r3, [r7, #28]
 800da60:	e015      	b.n	800da8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	697a      	ldr	r2, [r7, #20]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d20b      	bcs.n	800da84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	1ad2      	subs	r2, r2, r3
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f7ff ff9b 	bl	800d9b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800da7e:	2300      	movs	r3, #0
 800da80:	61fb      	str	r3, [r7, #28]
 800da82:	e004      	b.n	800da8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	2200      	movs	r2, #0
 800da88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800da8a:	2301      	movs	r3, #1
 800da8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800da8e:	f000 ff99 	bl	800e9c4 <vPortExitCritical>

	return xReturn;
 800da92:	69fb      	ldr	r3, [r7, #28]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3720      	adds	r7, #32
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	20000860 	.word	0x20000860
 800daa0:	20000874 	.word	0x20000874

0800daa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800daa4:	b480      	push	{r7}
 800daa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800daa8:	4b03      	ldr	r3, [pc, #12]	; (800dab8 <vTaskMissedYield+0x14>)
 800daaa:	2201      	movs	r2, #1
 800daac:	601a      	str	r2, [r3, #0]
}
 800daae:	bf00      	nop
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr
 800dab8:	20000870 	.word	0x20000870

0800dabc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dac4:	f000 f852 	bl	800db6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dac8:	4b06      	ldr	r3, [pc, #24]	; (800dae4 <prvIdleTask+0x28>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d9f9      	bls.n	800dac4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dad0:	4b05      	ldr	r3, [pc, #20]	; (800dae8 <prvIdleTask+0x2c>)
 800dad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dad6:	601a      	str	r2, [r3, #0]
 800dad8:	f3bf 8f4f 	dsb	sy
 800dadc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dae0:	e7f0      	b.n	800dac4 <prvIdleTask+0x8>
 800dae2:	bf00      	nop
 800dae4:	20000760 	.word	0x20000760
 800dae8:	e000ed04 	.word	0xe000ed04

0800daec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800daf2:	2300      	movs	r3, #0
 800daf4:	607b      	str	r3, [r7, #4]
 800daf6:	e00c      	b.n	800db12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800daf8:	687a      	ldr	r2, [r7, #4]
 800dafa:	4613      	mov	r3, r2
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	4413      	add	r3, r2
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	4a12      	ldr	r2, [pc, #72]	; (800db4c <prvInitialiseTaskLists+0x60>)
 800db04:	4413      	add	r3, r2
 800db06:	4618      	mov	r0, r3
 800db08:	f7fe faa0 	bl	800c04c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	3301      	adds	r3, #1
 800db10:	607b      	str	r3, [r7, #4]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2b06      	cmp	r3, #6
 800db16:	d9ef      	bls.n	800daf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800db18:	480d      	ldr	r0, [pc, #52]	; (800db50 <prvInitialiseTaskLists+0x64>)
 800db1a:	f7fe fa97 	bl	800c04c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800db1e:	480d      	ldr	r0, [pc, #52]	; (800db54 <prvInitialiseTaskLists+0x68>)
 800db20:	f7fe fa94 	bl	800c04c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800db24:	480c      	ldr	r0, [pc, #48]	; (800db58 <prvInitialiseTaskLists+0x6c>)
 800db26:	f7fe fa91 	bl	800c04c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800db2a:	480c      	ldr	r0, [pc, #48]	; (800db5c <prvInitialiseTaskLists+0x70>)
 800db2c:	f7fe fa8e 	bl	800c04c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800db30:	480b      	ldr	r0, [pc, #44]	; (800db60 <prvInitialiseTaskLists+0x74>)
 800db32:	f7fe fa8b 	bl	800c04c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800db36:	4b0b      	ldr	r3, [pc, #44]	; (800db64 <prvInitialiseTaskLists+0x78>)
 800db38:	4a05      	ldr	r2, [pc, #20]	; (800db50 <prvInitialiseTaskLists+0x64>)
 800db3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800db3c:	4b0a      	ldr	r3, [pc, #40]	; (800db68 <prvInitialiseTaskLists+0x7c>)
 800db3e:	4a05      	ldr	r2, [pc, #20]	; (800db54 <prvInitialiseTaskLists+0x68>)
 800db40:	601a      	str	r2, [r3, #0]
}
 800db42:	bf00      	nop
 800db44:	3708      	adds	r7, #8
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	20000760 	.word	0x20000760
 800db50:	200007ec 	.word	0x200007ec
 800db54:	20000800 	.word	0x20000800
 800db58:	2000081c 	.word	0x2000081c
 800db5c:	20000830 	.word	0x20000830
 800db60:	20000848 	.word	0x20000848
 800db64:	20000814 	.word	0x20000814
 800db68:	20000818 	.word	0x20000818

0800db6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db72:	e019      	b.n	800dba8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800db74:	f000 fef6 	bl	800e964 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db78:	4b10      	ldr	r3, [pc, #64]	; (800dbbc <prvCheckTasksWaitingTermination+0x50>)
 800db7a:	68db      	ldr	r3, [r3, #12]
 800db7c:	68db      	ldr	r3, [r3, #12]
 800db7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	3304      	adds	r3, #4
 800db84:	4618      	mov	r0, r3
 800db86:	f7fe faeb 	bl	800c160 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800db8a:	4b0d      	ldr	r3, [pc, #52]	; (800dbc0 <prvCheckTasksWaitingTermination+0x54>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	3b01      	subs	r3, #1
 800db90:	4a0b      	ldr	r2, [pc, #44]	; (800dbc0 <prvCheckTasksWaitingTermination+0x54>)
 800db92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800db94:	4b0b      	ldr	r3, [pc, #44]	; (800dbc4 <prvCheckTasksWaitingTermination+0x58>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	3b01      	subs	r3, #1
 800db9a:	4a0a      	ldr	r2, [pc, #40]	; (800dbc4 <prvCheckTasksWaitingTermination+0x58>)
 800db9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800db9e:	f000 ff11 	bl	800e9c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 f810 	bl	800dbc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dba8:	4b06      	ldr	r3, [pc, #24]	; (800dbc4 <prvCheckTasksWaitingTermination+0x58>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d1e1      	bne.n	800db74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dbb0:	bf00      	nop
 800dbb2:	bf00      	nop
 800dbb4:	3708      	adds	r7, #8
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	20000830 	.word	0x20000830
 800dbc0:	2000085c 	.word	0x2000085c
 800dbc4:	20000844 	.word	0x20000844

0800dbc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d108      	bne.n	800dbec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f001 f8ae 	bl	800ed40 <vPortFree>
				vPortFree( pxTCB );
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f001 f8ab 	bl	800ed40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dbea:	e018      	b.n	800dc1e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d103      	bne.n	800dbfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f001 f8a2 	bl	800ed40 <vPortFree>
	}
 800dbfc:	e00f      	b.n	800dc1e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dc04:	2b02      	cmp	r3, #2
 800dc06:	d00a      	beq.n	800dc1e <prvDeleteTCB+0x56>
	__asm volatile
 800dc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc0c:	f383 8811 	msr	BASEPRI, r3
 800dc10:	f3bf 8f6f 	isb	sy
 800dc14:	f3bf 8f4f 	dsb	sy
 800dc18:	60fb      	str	r3, [r7, #12]
}
 800dc1a:	bf00      	nop
 800dc1c:	e7fe      	b.n	800dc1c <prvDeleteTCB+0x54>
	}
 800dc1e:	bf00      	nop
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
	...

0800dc28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc2e:	4b0c      	ldr	r3, [pc, #48]	; (800dc60 <prvResetNextTaskUnblockTime+0x38>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d104      	bne.n	800dc42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dc38:	4b0a      	ldr	r3, [pc, #40]	; (800dc64 <prvResetNextTaskUnblockTime+0x3c>)
 800dc3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dc40:	e008      	b.n	800dc54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc42:	4b07      	ldr	r3, [pc, #28]	; (800dc60 <prvResetNextTaskUnblockTime+0x38>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	4a04      	ldr	r2, [pc, #16]	; (800dc64 <prvResetNextTaskUnblockTime+0x3c>)
 800dc52:	6013      	str	r3, [r2, #0]
}
 800dc54:	bf00      	nop
 800dc56:	370c      	adds	r7, #12
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr
 800dc60:	20000814 	.word	0x20000814
 800dc64:	2000087c 	.word	0x2000087c

0800dc68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dc6e:	4b0b      	ldr	r3, [pc, #44]	; (800dc9c <xTaskGetSchedulerState+0x34>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d102      	bne.n	800dc7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dc76:	2301      	movs	r3, #1
 800dc78:	607b      	str	r3, [r7, #4]
 800dc7a:	e008      	b.n	800dc8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc7c:	4b08      	ldr	r3, [pc, #32]	; (800dca0 <xTaskGetSchedulerState+0x38>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d102      	bne.n	800dc8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dc84:	2302      	movs	r3, #2
 800dc86:	607b      	str	r3, [r7, #4]
 800dc88:	e001      	b.n	800dc8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dc8e:	687b      	ldr	r3, [r7, #4]
	}
 800dc90:	4618      	mov	r0, r3
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr
 800dc9c:	20000868 	.word	0x20000868
 800dca0:	20000884 	.word	0x20000884

0800dca4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d05e      	beq.n	800dd78 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcbe:	4b31      	ldr	r3, [pc, #196]	; (800dd84 <xTaskPriorityInherit+0xe0>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d24e      	bcs.n	800dd66 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	699b      	ldr	r3, [r3, #24]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	db06      	blt.n	800dcde <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcd0:	4b2c      	ldr	r3, [pc, #176]	; (800dd84 <xTaskPriorityInherit+0xe0>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd6:	f1c3 0207 	rsb	r2, r3, #7
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	6959      	ldr	r1, [r3, #20]
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dce6:	4613      	mov	r3, r2
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	4413      	add	r3, r2
 800dcec:	009b      	lsls	r3, r3, #2
 800dcee:	4a26      	ldr	r2, [pc, #152]	; (800dd88 <xTaskPriorityInherit+0xe4>)
 800dcf0:	4413      	add	r3, r2
 800dcf2:	4299      	cmp	r1, r3
 800dcf4:	d12f      	bne.n	800dd56 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	3304      	adds	r3, #4
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7fe fa30 	bl	800c160 <uxListRemove>
 800dd00:	4603      	mov	r3, r0
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d10a      	bne.n	800dd1c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	fa02 f303 	lsl.w	r3, r2, r3
 800dd10:	43da      	mvns	r2, r3
 800dd12:	4b1e      	ldr	r3, [pc, #120]	; (800dd8c <xTaskPriorityInherit+0xe8>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	4013      	ands	r3, r2
 800dd18:	4a1c      	ldr	r2, [pc, #112]	; (800dd8c <xTaskPriorityInherit+0xe8>)
 800dd1a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dd1c:	4b19      	ldr	r3, [pc, #100]	; (800dd84 <xTaskPriorityInherit+0xe0>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	409a      	lsls	r2, r3
 800dd2e:	4b17      	ldr	r3, [pc, #92]	; (800dd8c <xTaskPriorityInherit+0xe8>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4313      	orrs	r3, r2
 800dd34:	4a15      	ldr	r2, [pc, #84]	; (800dd8c <xTaskPriorityInherit+0xe8>)
 800dd36:	6013      	str	r3, [r2, #0]
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	4413      	add	r3, r2
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	4a10      	ldr	r2, [pc, #64]	; (800dd88 <xTaskPriorityInherit+0xe4>)
 800dd46:	441a      	add	r2, r3
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	3304      	adds	r3, #4
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	4610      	mov	r0, r2
 800dd50:	f7fe f9a9 	bl	800c0a6 <vListInsertEnd>
 800dd54:	e004      	b.n	800dd60 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dd56:	4b0b      	ldr	r3, [pc, #44]	; (800dd84 <xTaskPriorityInherit+0xe0>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dd60:	2301      	movs	r3, #1
 800dd62:	60fb      	str	r3, [r7, #12]
 800dd64:	e008      	b.n	800dd78 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd6a:	4b06      	ldr	r3, [pc, #24]	; (800dd84 <xTaskPriorityInherit+0xe0>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d201      	bcs.n	800dd78 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dd74:	2301      	movs	r3, #1
 800dd76:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd78:	68fb      	ldr	r3, [r7, #12]
	}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	2000075c 	.word	0x2000075c
 800dd88:	20000760 	.word	0x20000760
 800dd8c:	20000864 	.word	0x20000864

0800dd90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b086      	sub	sp, #24
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d06e      	beq.n	800de84 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dda6:	4b3a      	ldr	r3, [pc, #232]	; (800de90 <xTaskPriorityDisinherit+0x100>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	693a      	ldr	r2, [r7, #16]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d00a      	beq.n	800ddc6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ddb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb4:	f383 8811 	msr	BASEPRI, r3
 800ddb8:	f3bf 8f6f 	isb	sy
 800ddbc:	f3bf 8f4f 	dsb	sy
 800ddc0:	60fb      	str	r3, [r7, #12]
}
 800ddc2:	bf00      	nop
 800ddc4:	e7fe      	b.n	800ddc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d10a      	bne.n	800dde4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ddce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd2:	f383 8811 	msr	BASEPRI, r3
 800ddd6:	f3bf 8f6f 	isb	sy
 800ddda:	f3bf 8f4f 	dsb	sy
 800ddde:	60bb      	str	r3, [r7, #8]
}
 800dde0:	bf00      	nop
 800dde2:	e7fe      	b.n	800dde2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dde8:	1e5a      	subs	r2, r3, #1
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d044      	beq.n	800de84 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d140      	bne.n	800de84 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	3304      	adds	r3, #4
 800de06:	4618      	mov	r0, r3
 800de08:	f7fe f9aa 	bl	800c160 <uxListRemove>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d115      	bne.n	800de3e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de16:	491f      	ldr	r1, [pc, #124]	; (800de94 <xTaskPriorityDisinherit+0x104>)
 800de18:	4613      	mov	r3, r2
 800de1a:	009b      	lsls	r3, r3, #2
 800de1c:	4413      	add	r3, r2
 800de1e:	009b      	lsls	r3, r3, #2
 800de20:	440b      	add	r3, r1
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d10a      	bne.n	800de3e <xTaskPriorityDisinherit+0xae>
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de2c:	2201      	movs	r2, #1
 800de2e:	fa02 f303 	lsl.w	r3, r2, r3
 800de32:	43da      	mvns	r2, r3
 800de34:	4b18      	ldr	r3, [pc, #96]	; (800de98 <xTaskPriorityDisinherit+0x108>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4013      	ands	r3, r2
 800de3a:	4a17      	ldr	r2, [pc, #92]	; (800de98 <xTaskPriorityDisinherit+0x108>)
 800de3c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de4a:	f1c3 0207 	rsb	r2, r3, #7
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de56:	2201      	movs	r2, #1
 800de58:	409a      	lsls	r2, r3
 800de5a:	4b0f      	ldr	r3, [pc, #60]	; (800de98 <xTaskPriorityDisinherit+0x108>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4313      	orrs	r3, r2
 800de60:	4a0d      	ldr	r2, [pc, #52]	; (800de98 <xTaskPriorityDisinherit+0x108>)
 800de62:	6013      	str	r3, [r2, #0]
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de68:	4613      	mov	r3, r2
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	4413      	add	r3, r2
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	4a08      	ldr	r2, [pc, #32]	; (800de94 <xTaskPriorityDisinherit+0x104>)
 800de72:	441a      	add	r2, r3
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	3304      	adds	r3, #4
 800de78:	4619      	mov	r1, r3
 800de7a:	4610      	mov	r0, r2
 800de7c:	f7fe f913 	bl	800c0a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800de80:	2301      	movs	r3, #1
 800de82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800de84:	697b      	ldr	r3, [r7, #20]
	}
 800de86:	4618      	mov	r0, r3
 800de88:	3718      	adds	r7, #24
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	2000075c 	.word	0x2000075c
 800de94:	20000760 	.word	0x20000760
 800de98:	20000864 	.word	0x20000864

0800de9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b088      	sub	sp, #32
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800deaa:	2301      	movs	r3, #1
 800deac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d077      	beq.n	800dfa4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800deb4:	69bb      	ldr	r3, [r7, #24]
 800deb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d10a      	bne.n	800ded2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800debc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec0:	f383 8811 	msr	BASEPRI, r3
 800dec4:	f3bf 8f6f 	isb	sy
 800dec8:	f3bf 8f4f 	dsb	sy
 800decc:	60fb      	str	r3, [r7, #12]
}
 800dece:	bf00      	nop
 800ded0:	e7fe      	b.n	800ded0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ded6:	683a      	ldr	r2, [r7, #0]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d902      	bls.n	800dee2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	61fb      	str	r3, [r7, #28]
 800dee0:	e002      	b.n	800dee8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dee2:	69bb      	ldr	r3, [r7, #24]
 800dee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dee6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dee8:	69bb      	ldr	r3, [r7, #24]
 800deea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deec:	69fa      	ldr	r2, [r7, #28]
 800deee:	429a      	cmp	r2, r3
 800def0:	d058      	beq.n	800dfa4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800def2:	69bb      	ldr	r3, [r7, #24]
 800def4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800def6:	697a      	ldr	r2, [r7, #20]
 800def8:	429a      	cmp	r2, r3
 800defa:	d153      	bne.n	800dfa4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800defc:	4b2b      	ldr	r3, [pc, #172]	; (800dfac <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	69ba      	ldr	r2, [r7, #24]
 800df02:	429a      	cmp	r2, r3
 800df04:	d10a      	bne.n	800df1c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800df06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0a:	f383 8811 	msr	BASEPRI, r3
 800df0e:	f3bf 8f6f 	isb	sy
 800df12:	f3bf 8f4f 	dsb	sy
 800df16:	60bb      	str	r3, [r7, #8]
}
 800df18:	bf00      	nop
 800df1a:	e7fe      	b.n	800df1a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800df1c:	69bb      	ldr	r3, [r7, #24]
 800df1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800df22:	69bb      	ldr	r3, [r7, #24]
 800df24:	69fa      	ldr	r2, [r7, #28]
 800df26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800df28:	69bb      	ldr	r3, [r7, #24]
 800df2a:	699b      	ldr	r3, [r3, #24]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	db04      	blt.n	800df3a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	f1c3 0207 	rsb	r2, r3, #7
 800df36:	69bb      	ldr	r3, [r7, #24]
 800df38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800df3a:	69bb      	ldr	r3, [r7, #24]
 800df3c:	6959      	ldr	r1, [r3, #20]
 800df3e:	693a      	ldr	r2, [r7, #16]
 800df40:	4613      	mov	r3, r2
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	4413      	add	r3, r2
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	4a19      	ldr	r2, [pc, #100]	; (800dfb0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800df4a:	4413      	add	r3, r2
 800df4c:	4299      	cmp	r1, r3
 800df4e:	d129      	bne.n	800dfa4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df50:	69bb      	ldr	r3, [r7, #24]
 800df52:	3304      	adds	r3, #4
 800df54:	4618      	mov	r0, r3
 800df56:	f7fe f903 	bl	800c160 <uxListRemove>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d10a      	bne.n	800df76 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800df60:	69bb      	ldr	r3, [r7, #24]
 800df62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df64:	2201      	movs	r2, #1
 800df66:	fa02 f303 	lsl.w	r3, r2, r3
 800df6a:	43da      	mvns	r2, r3
 800df6c:	4b11      	ldr	r3, [pc, #68]	; (800dfb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4013      	ands	r3, r2
 800df72:	4a10      	ldr	r2, [pc, #64]	; (800dfb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800df74:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df7a:	2201      	movs	r2, #1
 800df7c:	409a      	lsls	r2, r3
 800df7e:	4b0d      	ldr	r3, [pc, #52]	; (800dfb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4313      	orrs	r3, r2
 800df84:	4a0b      	ldr	r2, [pc, #44]	; (800dfb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800df86:	6013      	str	r3, [r2, #0]
 800df88:	69bb      	ldr	r3, [r7, #24]
 800df8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df8c:	4613      	mov	r3, r2
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	4413      	add	r3, r2
 800df92:	009b      	lsls	r3, r3, #2
 800df94:	4a06      	ldr	r2, [pc, #24]	; (800dfb0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800df96:	441a      	add	r2, r3
 800df98:	69bb      	ldr	r3, [r7, #24]
 800df9a:	3304      	adds	r3, #4
 800df9c:	4619      	mov	r1, r3
 800df9e:	4610      	mov	r0, r2
 800dfa0:	f7fe f881 	bl	800c0a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dfa4:	bf00      	nop
 800dfa6:	3720      	adds	r7, #32
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	2000075c 	.word	0x2000075c
 800dfb0:	20000760 	.word	0x20000760
 800dfb4:	20000864 	.word	0x20000864

0800dfb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dfb8:	b480      	push	{r7}
 800dfba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dfbc:	4b07      	ldr	r3, [pc, #28]	; (800dfdc <pvTaskIncrementMutexHeldCount+0x24>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d004      	beq.n	800dfce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dfc4:	4b05      	ldr	r3, [pc, #20]	; (800dfdc <pvTaskIncrementMutexHeldCount+0x24>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dfca:	3201      	adds	r2, #1
 800dfcc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800dfce:	4b03      	ldr	r3, [pc, #12]	; (800dfdc <pvTaskIncrementMutexHeldCount+0x24>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
	}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr
 800dfdc:	2000075c 	.word	0x2000075c

0800dfe0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dfea:	4b29      	ldr	r3, [pc, #164]	; (800e090 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dff0:	4b28      	ldr	r3, [pc, #160]	; (800e094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	3304      	adds	r3, #4
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fe f8b2 	bl	800c160 <uxListRemove>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d10b      	bne.n	800e01a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e002:	4b24      	ldr	r3, [pc, #144]	; (800e094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e008:	2201      	movs	r2, #1
 800e00a:	fa02 f303 	lsl.w	r3, r2, r3
 800e00e:	43da      	mvns	r2, r3
 800e010:	4b21      	ldr	r3, [pc, #132]	; (800e098 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4013      	ands	r3, r2
 800e016:	4a20      	ldr	r2, [pc, #128]	; (800e098 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e018:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e020:	d10a      	bne.n	800e038 <prvAddCurrentTaskToDelayedList+0x58>
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d007      	beq.n	800e038 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e028:	4b1a      	ldr	r3, [pc, #104]	; (800e094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	3304      	adds	r3, #4
 800e02e:	4619      	mov	r1, r3
 800e030:	481a      	ldr	r0, [pc, #104]	; (800e09c <prvAddCurrentTaskToDelayedList+0xbc>)
 800e032:	f7fe f838 	bl	800c0a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e036:	e026      	b.n	800e086 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e038:	68fa      	ldr	r2, [r7, #12]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	4413      	add	r3, r2
 800e03e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e040:	4b14      	ldr	r3, [pc, #80]	; (800e094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	68ba      	ldr	r2, [r7, #8]
 800e046:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e048:	68ba      	ldr	r2, [r7, #8]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d209      	bcs.n	800e064 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e050:	4b13      	ldr	r3, [pc, #76]	; (800e0a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	4b0f      	ldr	r3, [pc, #60]	; (800e094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	3304      	adds	r3, #4
 800e05a:	4619      	mov	r1, r3
 800e05c:	4610      	mov	r0, r2
 800e05e:	f7fe f846 	bl	800c0ee <vListInsert>
}
 800e062:	e010      	b.n	800e086 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e064:	4b0f      	ldr	r3, [pc, #60]	; (800e0a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	4b0a      	ldr	r3, [pc, #40]	; (800e094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	3304      	adds	r3, #4
 800e06e:	4619      	mov	r1, r3
 800e070:	4610      	mov	r0, r2
 800e072:	f7fe f83c 	bl	800c0ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e076:	4b0c      	ldr	r3, [pc, #48]	; (800e0a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	68ba      	ldr	r2, [r7, #8]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d202      	bcs.n	800e086 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e080:	4a09      	ldr	r2, [pc, #36]	; (800e0a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	6013      	str	r3, [r2, #0]
}
 800e086:	bf00      	nop
 800e088:	3710      	adds	r7, #16
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	20000860 	.word	0x20000860
 800e094:	2000075c 	.word	0x2000075c
 800e098:	20000864 	.word	0x20000864
 800e09c:	20000848 	.word	0x20000848
 800e0a0:	20000818 	.word	0x20000818
 800e0a4:	20000814 	.word	0x20000814
 800e0a8:	2000087c 	.word	0x2000087c

0800e0ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b08a      	sub	sp, #40	; 0x28
 800e0b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e0b6:	f000 faeb 	bl	800e690 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e0ba:	4b1c      	ldr	r3, [pc, #112]	; (800e12c <xTimerCreateTimerTask+0x80>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d021      	beq.n	800e106 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e0ca:	1d3a      	adds	r2, r7, #4
 800e0cc:	f107 0108 	add.w	r1, r7, #8
 800e0d0:	f107 030c 	add.w	r3, r7, #12
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7f4 fa65 	bl	80025a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e0da:	6879      	ldr	r1, [r7, #4]
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	68fa      	ldr	r2, [r7, #12]
 800e0e0:	9202      	str	r2, [sp, #8]
 800e0e2:	9301      	str	r3, [sp, #4]
 800e0e4:	2302      	movs	r3, #2
 800e0e6:	9300      	str	r3, [sp, #0]
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	460a      	mov	r2, r1
 800e0ec:	4910      	ldr	r1, [pc, #64]	; (800e130 <xTimerCreateTimerTask+0x84>)
 800e0ee:	4811      	ldr	r0, [pc, #68]	; (800e134 <xTimerCreateTimerTask+0x88>)
 800e0f0:	f7fe ffb2 	bl	800d058 <xTaskCreateStatic>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	4a10      	ldr	r2, [pc, #64]	; (800e138 <xTimerCreateTimerTask+0x8c>)
 800e0f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e0fa:	4b0f      	ldr	r3, [pc, #60]	; (800e138 <xTimerCreateTimerTask+0x8c>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d001      	beq.n	800e106 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e102:	2301      	movs	r3, #1
 800e104:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d10a      	bne.n	800e122 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e110:	f383 8811 	msr	BASEPRI, r3
 800e114:	f3bf 8f6f 	isb	sy
 800e118:	f3bf 8f4f 	dsb	sy
 800e11c:	613b      	str	r3, [r7, #16]
}
 800e11e:	bf00      	nop
 800e120:	e7fe      	b.n	800e120 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e122:	697b      	ldr	r3, [r7, #20]
}
 800e124:	4618      	mov	r0, r3
 800e126:	3718      	adds	r7, #24
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	200008b8 	.word	0x200008b8
 800e130:	08010528 	.word	0x08010528
 800e134:	0800e271 	.word	0x0800e271
 800e138:	200008bc 	.word	0x200008bc

0800e13c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b08a      	sub	sp, #40	; 0x28
 800e140:	af00      	add	r7, sp, #0
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	607a      	str	r2, [r7, #4]
 800e148:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e14a:	2300      	movs	r3, #0
 800e14c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d10a      	bne.n	800e16a <xTimerGenericCommand+0x2e>
	__asm volatile
 800e154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e158:	f383 8811 	msr	BASEPRI, r3
 800e15c:	f3bf 8f6f 	isb	sy
 800e160:	f3bf 8f4f 	dsb	sy
 800e164:	623b      	str	r3, [r7, #32]
}
 800e166:	bf00      	nop
 800e168:	e7fe      	b.n	800e168 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e16a:	4b1a      	ldr	r3, [pc, #104]	; (800e1d4 <xTimerGenericCommand+0x98>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d02a      	beq.n	800e1c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	2b05      	cmp	r3, #5
 800e182:	dc18      	bgt.n	800e1b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e184:	f7ff fd70 	bl	800dc68 <xTaskGetSchedulerState>
 800e188:	4603      	mov	r3, r0
 800e18a:	2b02      	cmp	r3, #2
 800e18c:	d109      	bne.n	800e1a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e18e:	4b11      	ldr	r3, [pc, #68]	; (800e1d4 <xTimerGenericCommand+0x98>)
 800e190:	6818      	ldr	r0, [r3, #0]
 800e192:	f107 0114 	add.w	r1, r7, #20
 800e196:	2300      	movs	r3, #0
 800e198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e19a:	f7fe f945 	bl	800c428 <xQueueGenericSend>
 800e19e:	6278      	str	r0, [r7, #36]	; 0x24
 800e1a0:	e012      	b.n	800e1c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e1a2:	4b0c      	ldr	r3, [pc, #48]	; (800e1d4 <xTimerGenericCommand+0x98>)
 800e1a4:	6818      	ldr	r0, [r3, #0]
 800e1a6:	f107 0114 	add.w	r1, r7, #20
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	f7fe f93b 	bl	800c428 <xQueueGenericSend>
 800e1b2:	6278      	str	r0, [r7, #36]	; 0x24
 800e1b4:	e008      	b.n	800e1c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e1b6:	4b07      	ldr	r3, [pc, #28]	; (800e1d4 <xTimerGenericCommand+0x98>)
 800e1b8:	6818      	ldr	r0, [r3, #0]
 800e1ba:	f107 0114 	add.w	r1, r7, #20
 800e1be:	2300      	movs	r3, #0
 800e1c0:	683a      	ldr	r2, [r7, #0]
 800e1c2:	f7fe fa2f 	bl	800c624 <xQueueGenericSendFromISR>
 800e1c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3728      	adds	r7, #40	; 0x28
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	200008b8 	.word	0x200008b8

0800e1d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b088      	sub	sp, #32
 800e1dc:	af02      	add	r7, sp, #8
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1e2:	4b22      	ldr	r3, [pc, #136]	; (800e26c <prvProcessExpiredTimer+0x94>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	68db      	ldr	r3, [r3, #12]
 800e1ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	3304      	adds	r3, #4
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7fd ffb5 	bl	800c160 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e1fc:	f003 0304 	and.w	r3, r3, #4
 800e200:	2b00      	cmp	r3, #0
 800e202:	d022      	beq.n	800e24a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	699a      	ldr	r2, [r3, #24]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	18d1      	adds	r1, r2, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	683a      	ldr	r2, [r7, #0]
 800e210:	6978      	ldr	r0, [r7, #20]
 800e212:	f000 f8d1 	bl	800e3b8 <prvInsertTimerInActiveList>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d01f      	beq.n	800e25c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e21c:	2300      	movs	r3, #0
 800e21e:	9300      	str	r3, [sp, #0]
 800e220:	2300      	movs	r3, #0
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	2100      	movs	r1, #0
 800e226:	6978      	ldr	r0, [r7, #20]
 800e228:	f7ff ff88 	bl	800e13c <xTimerGenericCommand>
 800e22c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d113      	bne.n	800e25c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e238:	f383 8811 	msr	BASEPRI, r3
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	60fb      	str	r3, [r7, #12]
}
 800e246:	bf00      	nop
 800e248:	e7fe      	b.n	800e248 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e250:	f023 0301 	bic.w	r3, r3, #1
 800e254:	b2da      	uxtb	r2, r3
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	6a1b      	ldr	r3, [r3, #32]
 800e260:	6978      	ldr	r0, [r7, #20]
 800e262:	4798      	blx	r3
}
 800e264:	bf00      	nop
 800e266:	3718      	adds	r7, #24
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	200008b0 	.word	0x200008b0

0800e270 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e278:	f107 0308 	add.w	r3, r7, #8
 800e27c:	4618      	mov	r0, r3
 800e27e:	f000 f857 	bl	800e330 <prvGetNextExpireTime>
 800e282:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	4619      	mov	r1, r3
 800e288:	68f8      	ldr	r0, [r7, #12]
 800e28a:	f000 f803 	bl	800e294 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e28e:	f000 f8d5 	bl	800e43c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e292:	e7f1      	b.n	800e278 <prvTimerTask+0x8>

0800e294 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e29e:	f7ff f909 	bl	800d4b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e2a2:	f107 0308 	add.w	r3, r7, #8
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f000 f866 	bl	800e378 <prvSampleTimeNow>
 800e2ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d130      	bne.n	800e316 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d10a      	bne.n	800e2d0 <prvProcessTimerOrBlockTask+0x3c>
 800e2ba:	687a      	ldr	r2, [r7, #4]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d806      	bhi.n	800e2d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e2c2:	f7ff f905 	bl	800d4d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e2c6:	68f9      	ldr	r1, [r7, #12]
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f7ff ff85 	bl	800e1d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e2ce:	e024      	b.n	800e31a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d008      	beq.n	800e2e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e2d6:	4b13      	ldr	r3, [pc, #76]	; (800e324 <prvProcessTimerOrBlockTask+0x90>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d101      	bne.n	800e2e4 <prvProcessTimerOrBlockTask+0x50>
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	e000      	b.n	800e2e6 <prvProcessTimerOrBlockTask+0x52>
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e2e8:	4b0f      	ldr	r3, [pc, #60]	; (800e328 <prvProcessTimerOrBlockTask+0x94>)
 800e2ea:	6818      	ldr	r0, [r3, #0]
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	1ad3      	subs	r3, r2, r3
 800e2f2:	683a      	ldr	r2, [r7, #0]
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	f7fe fe7b 	bl	800cff0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e2fa:	f7ff f8e9 	bl	800d4d0 <xTaskResumeAll>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d10a      	bne.n	800e31a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e304:	4b09      	ldr	r3, [pc, #36]	; (800e32c <prvProcessTimerOrBlockTask+0x98>)
 800e306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e30a:	601a      	str	r2, [r3, #0]
 800e30c:	f3bf 8f4f 	dsb	sy
 800e310:	f3bf 8f6f 	isb	sy
}
 800e314:	e001      	b.n	800e31a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e316:	f7ff f8db 	bl	800d4d0 <xTaskResumeAll>
}
 800e31a:	bf00      	nop
 800e31c:	3710      	adds	r7, #16
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
 800e322:	bf00      	nop
 800e324:	200008b4 	.word	0x200008b4
 800e328:	200008b8 	.word	0x200008b8
 800e32c:	e000ed04 	.word	0xe000ed04

0800e330 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e330:	b480      	push	{r7}
 800e332:	b085      	sub	sp, #20
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e338:	4b0e      	ldr	r3, [pc, #56]	; (800e374 <prvGetNextExpireTime+0x44>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d101      	bne.n	800e346 <prvGetNextExpireTime+0x16>
 800e342:	2201      	movs	r2, #1
 800e344:	e000      	b.n	800e348 <prvGetNextExpireTime+0x18>
 800e346:	2200      	movs	r2, #0
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d105      	bne.n	800e360 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e354:	4b07      	ldr	r3, [pc, #28]	; (800e374 <prvGetNextExpireTime+0x44>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	60fb      	str	r3, [r7, #12]
 800e35e:	e001      	b.n	800e364 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e360:	2300      	movs	r3, #0
 800e362:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e364:	68fb      	ldr	r3, [r7, #12]
}
 800e366:	4618      	mov	r0, r3
 800e368:	3714      	adds	r7, #20
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr
 800e372:	bf00      	nop
 800e374:	200008b0 	.word	0x200008b0

0800e378 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b084      	sub	sp, #16
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e380:	f7ff f942 	bl	800d608 <xTaskGetTickCount>
 800e384:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e386:	4b0b      	ldr	r3, [pc, #44]	; (800e3b4 <prvSampleTimeNow+0x3c>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	68fa      	ldr	r2, [r7, #12]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d205      	bcs.n	800e39c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e390:	f000 f91a 	bl	800e5c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2201      	movs	r2, #1
 800e398:	601a      	str	r2, [r3, #0]
 800e39a:	e002      	b.n	800e3a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e3a2:	4a04      	ldr	r2, [pc, #16]	; (800e3b4 <prvSampleTimeNow+0x3c>)
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3710      	adds	r7, #16
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	200008c0 	.word	0x200008c0

0800e3b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b086      	sub	sp, #24
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	607a      	str	r2, [r7, #4]
 800e3c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	68ba      	ldr	r2, [r7, #8]
 800e3ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	68fa      	ldr	r2, [r7, #12]
 800e3d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e3d6:	68ba      	ldr	r2, [r7, #8]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d812      	bhi.n	800e404 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	1ad2      	subs	r2, r2, r3
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	699b      	ldr	r3, [r3, #24]
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d302      	bcc.n	800e3f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	617b      	str	r3, [r7, #20]
 800e3f0:	e01b      	b.n	800e42a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e3f2:	4b10      	ldr	r3, [pc, #64]	; (800e434 <prvInsertTimerInActiveList+0x7c>)
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	3304      	adds	r3, #4
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	4610      	mov	r0, r2
 800e3fe:	f7fd fe76 	bl	800c0ee <vListInsert>
 800e402:	e012      	b.n	800e42a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	429a      	cmp	r2, r3
 800e40a:	d206      	bcs.n	800e41a <prvInsertTimerInActiveList+0x62>
 800e40c:	68ba      	ldr	r2, [r7, #8]
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	429a      	cmp	r2, r3
 800e412:	d302      	bcc.n	800e41a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e414:	2301      	movs	r3, #1
 800e416:	617b      	str	r3, [r7, #20]
 800e418:	e007      	b.n	800e42a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e41a:	4b07      	ldr	r3, [pc, #28]	; (800e438 <prvInsertTimerInActiveList+0x80>)
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	3304      	adds	r3, #4
 800e422:	4619      	mov	r1, r3
 800e424:	4610      	mov	r0, r2
 800e426:	f7fd fe62 	bl	800c0ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e42a:	697b      	ldr	r3, [r7, #20]
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3718      	adds	r7, #24
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}
 800e434:	200008b4 	.word	0x200008b4
 800e438:	200008b0 	.word	0x200008b0

0800e43c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b08c      	sub	sp, #48	; 0x30
 800e440:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e442:	e0ae      	b.n	800e5a2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	2b00      	cmp	r3, #0
 800e448:	f2c0 80aa 	blt.w	800e5a0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e452:	695b      	ldr	r3, [r3, #20]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d004      	beq.n	800e462 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45a:	3304      	adds	r3, #4
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7fd fe7f 	bl	800c160 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e462:	1d3b      	adds	r3, r7, #4
 800e464:	4618      	mov	r0, r3
 800e466:	f7ff ff87 	bl	800e378 <prvSampleTimeNow>
 800e46a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	2b09      	cmp	r3, #9
 800e470:	f200 8097 	bhi.w	800e5a2 <prvProcessReceivedCommands+0x166>
 800e474:	a201      	add	r2, pc, #4	; (adr r2, 800e47c <prvProcessReceivedCommands+0x40>)
 800e476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e47a:	bf00      	nop
 800e47c:	0800e4a5 	.word	0x0800e4a5
 800e480:	0800e4a5 	.word	0x0800e4a5
 800e484:	0800e4a5 	.word	0x0800e4a5
 800e488:	0800e519 	.word	0x0800e519
 800e48c:	0800e52d 	.word	0x0800e52d
 800e490:	0800e577 	.word	0x0800e577
 800e494:	0800e4a5 	.word	0x0800e4a5
 800e498:	0800e4a5 	.word	0x0800e4a5
 800e49c:	0800e519 	.word	0x0800e519
 800e4a0:	0800e52d 	.word	0x0800e52d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e4aa:	f043 0301 	orr.w	r3, r3, #1
 800e4ae:	b2da      	uxtb	r2, r3
 800e4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e4b6:	68fa      	ldr	r2, [r7, #12]
 800e4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ba:	699b      	ldr	r3, [r3, #24]
 800e4bc:	18d1      	adds	r1, r2, r3
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	6a3a      	ldr	r2, [r7, #32]
 800e4c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4c4:	f7ff ff78 	bl	800e3b8 <prvInsertTimerInActiveList>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d069      	beq.n	800e5a2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d0:	6a1b      	ldr	r3, [r3, #32]
 800e4d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e4dc:	f003 0304 	and.w	r3, r3, #4
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d05e      	beq.n	800e5a2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e4e4:	68fa      	ldr	r2, [r7, #12]
 800e4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e8:	699b      	ldr	r3, [r3, #24]
 800e4ea:	441a      	add	r2, r3
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	9300      	str	r3, [sp, #0]
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	2100      	movs	r1, #0
 800e4f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4f6:	f7ff fe21 	bl	800e13c <xTimerGenericCommand>
 800e4fa:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d14f      	bne.n	800e5a2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800e502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e506:	f383 8811 	msr	BASEPRI, r3
 800e50a:	f3bf 8f6f 	isb	sy
 800e50e:	f3bf 8f4f 	dsb	sy
 800e512:	61bb      	str	r3, [r7, #24]
}
 800e514:	bf00      	nop
 800e516:	e7fe      	b.n	800e516 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e51e:	f023 0301 	bic.w	r3, r3, #1
 800e522:	b2da      	uxtb	r2, r3
 800e524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800e52a:	e03a      	b.n	800e5a2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e532:	f043 0301 	orr.w	r3, r3, #1
 800e536:	b2da      	uxtb	r2, r3
 800e538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e53e:	68fa      	ldr	r2, [r7, #12]
 800e540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e542:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e546:	699b      	ldr	r3, [r3, #24]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d10a      	bne.n	800e562 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800e54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e550:	f383 8811 	msr	BASEPRI, r3
 800e554:	f3bf 8f6f 	isb	sy
 800e558:	f3bf 8f4f 	dsb	sy
 800e55c:	617b      	str	r3, [r7, #20]
}
 800e55e:	bf00      	nop
 800e560:	e7fe      	b.n	800e560 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e564:	699a      	ldr	r2, [r3, #24]
 800e566:	6a3b      	ldr	r3, [r7, #32]
 800e568:	18d1      	adds	r1, r2, r3
 800e56a:	6a3b      	ldr	r3, [r7, #32]
 800e56c:	6a3a      	ldr	r2, [r7, #32]
 800e56e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e570:	f7ff ff22 	bl	800e3b8 <prvInsertTimerInActiveList>
					break;
 800e574:	e015      	b.n	800e5a2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e578:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e57c:	f003 0302 	and.w	r3, r3, #2
 800e580:	2b00      	cmp	r3, #0
 800e582:	d103      	bne.n	800e58c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800e584:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e586:	f000 fbdb 	bl	800ed40 <vPortFree>
 800e58a:	e00a      	b.n	800e5a2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e592:	f023 0301 	bic.w	r3, r3, #1
 800e596:	b2da      	uxtb	r2, r3
 800e598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e59e:	e000      	b.n	800e5a2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e5a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e5a2:	4b08      	ldr	r3, [pc, #32]	; (800e5c4 <prvProcessReceivedCommands+0x188>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f107 0108 	add.w	r1, r7, #8
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7fe f961 	bl	800c874 <xQueueReceive>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	f47f af45 	bne.w	800e444 <prvProcessReceivedCommands+0x8>
	}
}
 800e5ba:	bf00      	nop
 800e5bc:	bf00      	nop
 800e5be:	3728      	adds	r7, #40	; 0x28
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}
 800e5c4:	200008b8 	.word	0x200008b8

0800e5c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b088      	sub	sp, #32
 800e5cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e5ce:	e048      	b.n	800e662 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e5d0:	4b2d      	ldr	r3, [pc, #180]	; (800e688 <prvSwitchTimerLists+0xc0>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	68db      	ldr	r3, [r3, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5da:	4b2b      	ldr	r3, [pc, #172]	; (800e688 <prvSwitchTimerLists+0xc0>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	68db      	ldr	r3, [r3, #12]
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	3304      	adds	r3, #4
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7fd fdb9 	bl	800c160 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	6a1b      	ldr	r3, [r3, #32]
 800e5f2:	68f8      	ldr	r0, [r7, #12]
 800e5f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e5fc:	f003 0304 	and.w	r3, r3, #4
 800e600:	2b00      	cmp	r3, #0
 800e602:	d02e      	beq.n	800e662 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	699b      	ldr	r3, [r3, #24]
 800e608:	693a      	ldr	r2, [r7, #16]
 800e60a:	4413      	add	r3, r2
 800e60c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e60e:	68ba      	ldr	r2, [r7, #8]
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	429a      	cmp	r2, r3
 800e614:	d90e      	bls.n	800e634 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	68ba      	ldr	r2, [r7, #8]
 800e61a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	68fa      	ldr	r2, [r7, #12]
 800e620:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e622:	4b19      	ldr	r3, [pc, #100]	; (800e688 <prvSwitchTimerLists+0xc0>)
 800e624:	681a      	ldr	r2, [r3, #0]
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	3304      	adds	r3, #4
 800e62a:	4619      	mov	r1, r3
 800e62c:	4610      	mov	r0, r2
 800e62e:	f7fd fd5e 	bl	800c0ee <vListInsert>
 800e632:	e016      	b.n	800e662 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e634:	2300      	movs	r3, #0
 800e636:	9300      	str	r3, [sp, #0]
 800e638:	2300      	movs	r3, #0
 800e63a:	693a      	ldr	r2, [r7, #16]
 800e63c:	2100      	movs	r1, #0
 800e63e:	68f8      	ldr	r0, [r7, #12]
 800e640:	f7ff fd7c 	bl	800e13c <xTimerGenericCommand>
 800e644:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d10a      	bne.n	800e662 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e650:	f383 8811 	msr	BASEPRI, r3
 800e654:	f3bf 8f6f 	isb	sy
 800e658:	f3bf 8f4f 	dsb	sy
 800e65c:	603b      	str	r3, [r7, #0]
}
 800e65e:	bf00      	nop
 800e660:	e7fe      	b.n	800e660 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e662:	4b09      	ldr	r3, [pc, #36]	; (800e688 <prvSwitchTimerLists+0xc0>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d1b1      	bne.n	800e5d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e66c:	4b06      	ldr	r3, [pc, #24]	; (800e688 <prvSwitchTimerLists+0xc0>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e672:	4b06      	ldr	r3, [pc, #24]	; (800e68c <prvSwitchTimerLists+0xc4>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	4a04      	ldr	r2, [pc, #16]	; (800e688 <prvSwitchTimerLists+0xc0>)
 800e678:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e67a:	4a04      	ldr	r2, [pc, #16]	; (800e68c <prvSwitchTimerLists+0xc4>)
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	6013      	str	r3, [r2, #0]
}
 800e680:	bf00      	nop
 800e682:	3718      	adds	r7, #24
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	200008b0 	.word	0x200008b0
 800e68c:	200008b4 	.word	0x200008b4

0800e690 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e696:	f000 f965 	bl	800e964 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e69a:	4b15      	ldr	r3, [pc, #84]	; (800e6f0 <prvCheckForValidListAndQueue+0x60>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d120      	bne.n	800e6e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e6a2:	4814      	ldr	r0, [pc, #80]	; (800e6f4 <prvCheckForValidListAndQueue+0x64>)
 800e6a4:	f7fd fcd2 	bl	800c04c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e6a8:	4813      	ldr	r0, [pc, #76]	; (800e6f8 <prvCheckForValidListAndQueue+0x68>)
 800e6aa:	f7fd fccf 	bl	800c04c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e6ae:	4b13      	ldr	r3, [pc, #76]	; (800e6fc <prvCheckForValidListAndQueue+0x6c>)
 800e6b0:	4a10      	ldr	r2, [pc, #64]	; (800e6f4 <prvCheckForValidListAndQueue+0x64>)
 800e6b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e6b4:	4b12      	ldr	r3, [pc, #72]	; (800e700 <prvCheckForValidListAndQueue+0x70>)
 800e6b6:	4a10      	ldr	r2, [pc, #64]	; (800e6f8 <prvCheckForValidListAndQueue+0x68>)
 800e6b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	9300      	str	r3, [sp, #0]
 800e6be:	4b11      	ldr	r3, [pc, #68]	; (800e704 <prvCheckForValidListAndQueue+0x74>)
 800e6c0:	4a11      	ldr	r2, [pc, #68]	; (800e708 <prvCheckForValidListAndQueue+0x78>)
 800e6c2:	210c      	movs	r1, #12
 800e6c4:	200a      	movs	r0, #10
 800e6c6:	f7fd fddd 	bl	800c284 <xQueueGenericCreateStatic>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	4a08      	ldr	r2, [pc, #32]	; (800e6f0 <prvCheckForValidListAndQueue+0x60>)
 800e6ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e6d0:	4b07      	ldr	r3, [pc, #28]	; (800e6f0 <prvCheckForValidListAndQueue+0x60>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d005      	beq.n	800e6e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e6d8:	4b05      	ldr	r3, [pc, #20]	; (800e6f0 <prvCheckForValidListAndQueue+0x60>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	490b      	ldr	r1, [pc, #44]	; (800e70c <prvCheckForValidListAndQueue+0x7c>)
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7fe fc5c 	bl	800cf9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6e4:	f000 f96e 	bl	800e9c4 <vPortExitCritical>
}
 800e6e8:	bf00      	nop
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	200008b8 	.word	0x200008b8
 800e6f4:	20000888 	.word	0x20000888
 800e6f8:	2000089c 	.word	0x2000089c
 800e6fc:	200008b0 	.word	0x200008b0
 800e700:	200008b4 	.word	0x200008b4
 800e704:	2000093c 	.word	0x2000093c
 800e708:	200008c4 	.word	0x200008c4
 800e70c:	08010530 	.word	0x08010530

0800e710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e710:	b480      	push	{r7}
 800e712:	b085      	sub	sp, #20
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	3b04      	subs	r3, #4
 800e720:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	3b04      	subs	r3, #4
 800e72e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	f023 0201 	bic.w	r2, r3, #1
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	3b04      	subs	r3, #4
 800e73e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e740:	4a0c      	ldr	r2, [pc, #48]	; (800e774 <pxPortInitialiseStack+0x64>)
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	3b14      	subs	r3, #20
 800e74a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	3b04      	subs	r3, #4
 800e756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f06f 0202 	mvn.w	r2, #2
 800e75e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	3b20      	subs	r3, #32
 800e764:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e766:	68fb      	ldr	r3, [r7, #12]
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3714      	adds	r7, #20
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr
 800e774:	0800e779 	.word	0x0800e779

0800e778 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e778:	b480      	push	{r7}
 800e77a:	b085      	sub	sp, #20
 800e77c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e77e:	2300      	movs	r3, #0
 800e780:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e782:	4b12      	ldr	r3, [pc, #72]	; (800e7cc <prvTaskExitError+0x54>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e78a:	d00a      	beq.n	800e7a2 <prvTaskExitError+0x2a>
	__asm volatile
 800e78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e790:	f383 8811 	msr	BASEPRI, r3
 800e794:	f3bf 8f6f 	isb	sy
 800e798:	f3bf 8f4f 	dsb	sy
 800e79c:	60fb      	str	r3, [r7, #12]
}
 800e79e:	bf00      	nop
 800e7a0:	e7fe      	b.n	800e7a0 <prvTaskExitError+0x28>
	__asm volatile
 800e7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a6:	f383 8811 	msr	BASEPRI, r3
 800e7aa:	f3bf 8f6f 	isb	sy
 800e7ae:	f3bf 8f4f 	dsb	sy
 800e7b2:	60bb      	str	r3, [r7, #8]
}
 800e7b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e7b6:	bf00      	nop
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d0fc      	beq.n	800e7b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e7be:	bf00      	nop
 800e7c0:	bf00      	nop
 800e7c2:	3714      	adds	r7, #20
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr
 800e7cc:	20000014 	.word	0x20000014

0800e7d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e7d0:	4b07      	ldr	r3, [pc, #28]	; (800e7f0 <pxCurrentTCBConst2>)
 800e7d2:	6819      	ldr	r1, [r3, #0]
 800e7d4:	6808      	ldr	r0, [r1, #0]
 800e7d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7da:	f380 8809 	msr	PSP, r0
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f04f 0000 	mov.w	r0, #0
 800e7e6:	f380 8811 	msr	BASEPRI, r0
 800e7ea:	4770      	bx	lr
 800e7ec:	f3af 8000 	nop.w

0800e7f0 <pxCurrentTCBConst2>:
 800e7f0:	2000075c 	.word	0x2000075c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e7f4:	bf00      	nop
 800e7f6:	bf00      	nop

0800e7f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e7f8:	4808      	ldr	r0, [pc, #32]	; (800e81c <prvPortStartFirstTask+0x24>)
 800e7fa:	6800      	ldr	r0, [r0, #0]
 800e7fc:	6800      	ldr	r0, [r0, #0]
 800e7fe:	f380 8808 	msr	MSP, r0
 800e802:	f04f 0000 	mov.w	r0, #0
 800e806:	f380 8814 	msr	CONTROL, r0
 800e80a:	b662      	cpsie	i
 800e80c:	b661      	cpsie	f
 800e80e:	f3bf 8f4f 	dsb	sy
 800e812:	f3bf 8f6f 	isb	sy
 800e816:	df00      	svc	0
 800e818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e81a:	bf00      	nop
 800e81c:	e000ed08 	.word	0xe000ed08

0800e820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e826:	4b46      	ldr	r3, [pc, #280]	; (800e940 <xPortStartScheduler+0x120>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4a46      	ldr	r2, [pc, #280]	; (800e944 <xPortStartScheduler+0x124>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d10a      	bne.n	800e846 <xPortStartScheduler+0x26>
	__asm volatile
 800e830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e834:	f383 8811 	msr	BASEPRI, r3
 800e838:	f3bf 8f6f 	isb	sy
 800e83c:	f3bf 8f4f 	dsb	sy
 800e840:	613b      	str	r3, [r7, #16]
}
 800e842:	bf00      	nop
 800e844:	e7fe      	b.n	800e844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e846:	4b3e      	ldr	r3, [pc, #248]	; (800e940 <xPortStartScheduler+0x120>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	4a3f      	ldr	r2, [pc, #252]	; (800e948 <xPortStartScheduler+0x128>)
 800e84c:	4293      	cmp	r3, r2
 800e84e:	d10a      	bne.n	800e866 <xPortStartScheduler+0x46>
	__asm volatile
 800e850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e854:	f383 8811 	msr	BASEPRI, r3
 800e858:	f3bf 8f6f 	isb	sy
 800e85c:	f3bf 8f4f 	dsb	sy
 800e860:	60fb      	str	r3, [r7, #12]
}
 800e862:	bf00      	nop
 800e864:	e7fe      	b.n	800e864 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e866:	4b39      	ldr	r3, [pc, #228]	; (800e94c <xPortStartScheduler+0x12c>)
 800e868:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	22ff      	movs	r2, #255	; 0xff
 800e876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e880:	78fb      	ldrb	r3, [r7, #3]
 800e882:	b2db      	uxtb	r3, r3
 800e884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e888:	b2da      	uxtb	r2, r3
 800e88a:	4b31      	ldr	r3, [pc, #196]	; (800e950 <xPortStartScheduler+0x130>)
 800e88c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e88e:	4b31      	ldr	r3, [pc, #196]	; (800e954 <xPortStartScheduler+0x134>)
 800e890:	2207      	movs	r2, #7
 800e892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e894:	e009      	b.n	800e8aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e896:	4b2f      	ldr	r3, [pc, #188]	; (800e954 <xPortStartScheduler+0x134>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	3b01      	subs	r3, #1
 800e89c:	4a2d      	ldr	r2, [pc, #180]	; (800e954 <xPortStartScheduler+0x134>)
 800e89e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e8a0:	78fb      	ldrb	r3, [r7, #3]
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	005b      	lsls	r3, r3, #1
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8aa:	78fb      	ldrb	r3, [r7, #3]
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8b2:	2b80      	cmp	r3, #128	; 0x80
 800e8b4:	d0ef      	beq.n	800e896 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e8b6:	4b27      	ldr	r3, [pc, #156]	; (800e954 <xPortStartScheduler+0x134>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f1c3 0307 	rsb	r3, r3, #7
 800e8be:	2b04      	cmp	r3, #4
 800e8c0:	d00a      	beq.n	800e8d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c6:	f383 8811 	msr	BASEPRI, r3
 800e8ca:	f3bf 8f6f 	isb	sy
 800e8ce:	f3bf 8f4f 	dsb	sy
 800e8d2:	60bb      	str	r3, [r7, #8]
}
 800e8d4:	bf00      	nop
 800e8d6:	e7fe      	b.n	800e8d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e8d8:	4b1e      	ldr	r3, [pc, #120]	; (800e954 <xPortStartScheduler+0x134>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	021b      	lsls	r3, r3, #8
 800e8de:	4a1d      	ldr	r2, [pc, #116]	; (800e954 <xPortStartScheduler+0x134>)
 800e8e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e8e2:	4b1c      	ldr	r3, [pc, #112]	; (800e954 <xPortStartScheduler+0x134>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e8ea:	4a1a      	ldr	r2, [pc, #104]	; (800e954 <xPortStartScheduler+0x134>)
 800e8ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	b2da      	uxtb	r2, r3
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e8f6:	4b18      	ldr	r3, [pc, #96]	; (800e958 <xPortStartScheduler+0x138>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	4a17      	ldr	r2, [pc, #92]	; (800e958 <xPortStartScheduler+0x138>)
 800e8fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e902:	4b15      	ldr	r3, [pc, #84]	; (800e958 <xPortStartScheduler+0x138>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	4a14      	ldr	r2, [pc, #80]	; (800e958 <xPortStartScheduler+0x138>)
 800e908:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e90c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e90e:	f000 f8dd 	bl	800eacc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e912:	4b12      	ldr	r3, [pc, #72]	; (800e95c <xPortStartScheduler+0x13c>)
 800e914:	2200      	movs	r2, #0
 800e916:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e918:	f000 f8fc 	bl	800eb14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e91c:	4b10      	ldr	r3, [pc, #64]	; (800e960 <xPortStartScheduler+0x140>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	4a0f      	ldr	r2, [pc, #60]	; (800e960 <xPortStartScheduler+0x140>)
 800e922:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e926:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e928:	f7ff ff66 	bl	800e7f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e92c:	f7fe ff34 	bl	800d798 <vTaskSwitchContext>
	prvTaskExitError();
 800e930:	f7ff ff22 	bl	800e778 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e934:	2300      	movs	r3, #0
}
 800e936:	4618      	mov	r0, r3
 800e938:	3718      	adds	r7, #24
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
 800e93e:	bf00      	nop
 800e940:	e000ed00 	.word	0xe000ed00
 800e944:	410fc271 	.word	0x410fc271
 800e948:	410fc270 	.word	0x410fc270
 800e94c:	e000e400 	.word	0xe000e400
 800e950:	20000984 	.word	0x20000984
 800e954:	20000988 	.word	0x20000988
 800e958:	e000ed20 	.word	0xe000ed20
 800e95c:	20000014 	.word	0x20000014
 800e960:	e000ef34 	.word	0xe000ef34

0800e964 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
	__asm volatile
 800e96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96e:	f383 8811 	msr	BASEPRI, r3
 800e972:	f3bf 8f6f 	isb	sy
 800e976:	f3bf 8f4f 	dsb	sy
 800e97a:	607b      	str	r3, [r7, #4]
}
 800e97c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e97e:	4b0f      	ldr	r3, [pc, #60]	; (800e9bc <vPortEnterCritical+0x58>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	3301      	adds	r3, #1
 800e984:	4a0d      	ldr	r2, [pc, #52]	; (800e9bc <vPortEnterCritical+0x58>)
 800e986:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e988:	4b0c      	ldr	r3, [pc, #48]	; (800e9bc <vPortEnterCritical+0x58>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d10f      	bne.n	800e9b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e990:	4b0b      	ldr	r3, [pc, #44]	; (800e9c0 <vPortEnterCritical+0x5c>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	b2db      	uxtb	r3, r3
 800e996:	2b00      	cmp	r3, #0
 800e998:	d00a      	beq.n	800e9b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99e:	f383 8811 	msr	BASEPRI, r3
 800e9a2:	f3bf 8f6f 	isb	sy
 800e9a6:	f3bf 8f4f 	dsb	sy
 800e9aa:	603b      	str	r3, [r7, #0]
}
 800e9ac:	bf00      	nop
 800e9ae:	e7fe      	b.n	800e9ae <vPortEnterCritical+0x4a>
	}
}
 800e9b0:	bf00      	nop
 800e9b2:	370c      	adds	r7, #12
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr
 800e9bc:	20000014 	.word	0x20000014
 800e9c0:	e000ed04 	.word	0xe000ed04

0800e9c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	b083      	sub	sp, #12
 800e9c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e9ca:	4b12      	ldr	r3, [pc, #72]	; (800ea14 <vPortExitCritical+0x50>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d10a      	bne.n	800e9e8 <vPortExitCritical+0x24>
	__asm volatile
 800e9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d6:	f383 8811 	msr	BASEPRI, r3
 800e9da:	f3bf 8f6f 	isb	sy
 800e9de:	f3bf 8f4f 	dsb	sy
 800e9e2:	607b      	str	r3, [r7, #4]
}
 800e9e4:	bf00      	nop
 800e9e6:	e7fe      	b.n	800e9e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e9e8:	4b0a      	ldr	r3, [pc, #40]	; (800ea14 <vPortExitCritical+0x50>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	3b01      	subs	r3, #1
 800e9ee:	4a09      	ldr	r2, [pc, #36]	; (800ea14 <vPortExitCritical+0x50>)
 800e9f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e9f2:	4b08      	ldr	r3, [pc, #32]	; (800ea14 <vPortExitCritical+0x50>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d105      	bne.n	800ea06 <vPortExitCritical+0x42>
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	f383 8811 	msr	BASEPRI, r3
}
 800ea04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ea06:	bf00      	nop
 800ea08:	370c      	adds	r7, #12
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr
 800ea12:	bf00      	nop
 800ea14:	20000014 	.word	0x20000014
	...

0800ea20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ea20:	f3ef 8009 	mrs	r0, PSP
 800ea24:	f3bf 8f6f 	isb	sy
 800ea28:	4b15      	ldr	r3, [pc, #84]	; (800ea80 <pxCurrentTCBConst>)
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	f01e 0f10 	tst.w	lr, #16
 800ea30:	bf08      	it	eq
 800ea32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea3a:	6010      	str	r0, [r2, #0]
 800ea3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ea40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ea44:	f380 8811 	msr	BASEPRI, r0
 800ea48:	f3bf 8f4f 	dsb	sy
 800ea4c:	f3bf 8f6f 	isb	sy
 800ea50:	f7fe fea2 	bl	800d798 <vTaskSwitchContext>
 800ea54:	f04f 0000 	mov.w	r0, #0
 800ea58:	f380 8811 	msr	BASEPRI, r0
 800ea5c:	bc09      	pop	{r0, r3}
 800ea5e:	6819      	ldr	r1, [r3, #0]
 800ea60:	6808      	ldr	r0, [r1, #0]
 800ea62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea66:	f01e 0f10 	tst.w	lr, #16
 800ea6a:	bf08      	it	eq
 800ea6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ea70:	f380 8809 	msr	PSP, r0
 800ea74:	f3bf 8f6f 	isb	sy
 800ea78:	4770      	bx	lr
 800ea7a:	bf00      	nop
 800ea7c:	f3af 8000 	nop.w

0800ea80 <pxCurrentTCBConst>:
 800ea80:	2000075c 	.word	0x2000075c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ea84:	bf00      	nop
 800ea86:	bf00      	nop

0800ea88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b082      	sub	sp, #8
 800ea8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ea8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea92:	f383 8811 	msr	BASEPRI, r3
 800ea96:	f3bf 8f6f 	isb	sy
 800ea9a:	f3bf 8f4f 	dsb	sy
 800ea9e:	607b      	str	r3, [r7, #4]
}
 800eaa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eaa2:	f7fe fdc1 	bl	800d628 <xTaskIncrementTick>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d003      	beq.n	800eab4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eaac:	4b06      	ldr	r3, [pc, #24]	; (800eac8 <SysTick_Handler+0x40>)
 800eaae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eab2:	601a      	str	r2, [r3, #0]
 800eab4:	2300      	movs	r3, #0
 800eab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	f383 8811 	msr	BASEPRI, r3
}
 800eabe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eac0:	bf00      	nop
 800eac2:	3708      	adds	r7, #8
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	e000ed04 	.word	0xe000ed04

0800eacc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eacc:	b480      	push	{r7}
 800eace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ead0:	4b0b      	ldr	r3, [pc, #44]	; (800eb00 <vPortSetupTimerInterrupt+0x34>)
 800ead2:	2200      	movs	r2, #0
 800ead4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ead6:	4b0b      	ldr	r3, [pc, #44]	; (800eb04 <vPortSetupTimerInterrupt+0x38>)
 800ead8:	2200      	movs	r2, #0
 800eada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eadc:	4b0a      	ldr	r3, [pc, #40]	; (800eb08 <vPortSetupTimerInterrupt+0x3c>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a0a      	ldr	r2, [pc, #40]	; (800eb0c <vPortSetupTimerInterrupt+0x40>)
 800eae2:	fba2 2303 	umull	r2, r3, r2, r3
 800eae6:	099b      	lsrs	r3, r3, #6
 800eae8:	4a09      	ldr	r2, [pc, #36]	; (800eb10 <vPortSetupTimerInterrupt+0x44>)
 800eaea:	3b01      	subs	r3, #1
 800eaec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eaee:	4b04      	ldr	r3, [pc, #16]	; (800eb00 <vPortSetupTimerInterrupt+0x34>)
 800eaf0:	2207      	movs	r2, #7
 800eaf2:	601a      	str	r2, [r3, #0]
}
 800eaf4:	bf00      	nop
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop
 800eb00:	e000e010 	.word	0xe000e010
 800eb04:	e000e018 	.word	0xe000e018
 800eb08:	20000008 	.word	0x20000008
 800eb0c:	10624dd3 	.word	0x10624dd3
 800eb10:	e000e014 	.word	0xe000e014

0800eb14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eb14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eb24 <vPortEnableVFP+0x10>
 800eb18:	6801      	ldr	r1, [r0, #0]
 800eb1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eb1e:	6001      	str	r1, [r0, #0]
 800eb20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eb22:	bf00      	nop
 800eb24:	e000ed88 	.word	0xe000ed88

0800eb28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eb2e:	f3ef 8305 	mrs	r3, IPSR
 800eb32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2b0f      	cmp	r3, #15
 800eb38:	d914      	bls.n	800eb64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eb3a:	4a17      	ldr	r2, [pc, #92]	; (800eb98 <vPortValidateInterruptPriority+0x70>)
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	4413      	add	r3, r2
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eb44:	4b15      	ldr	r3, [pc, #84]	; (800eb9c <vPortValidateInterruptPriority+0x74>)
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	7afa      	ldrb	r2, [r7, #11]
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d20a      	bcs.n	800eb64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800eb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb52:	f383 8811 	msr	BASEPRI, r3
 800eb56:	f3bf 8f6f 	isb	sy
 800eb5a:	f3bf 8f4f 	dsb	sy
 800eb5e:	607b      	str	r3, [r7, #4]
}
 800eb60:	bf00      	nop
 800eb62:	e7fe      	b.n	800eb62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eb64:	4b0e      	ldr	r3, [pc, #56]	; (800eba0 <vPortValidateInterruptPriority+0x78>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eb6c:	4b0d      	ldr	r3, [pc, #52]	; (800eba4 <vPortValidateInterruptPriority+0x7c>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d90a      	bls.n	800eb8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800eb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb78:	f383 8811 	msr	BASEPRI, r3
 800eb7c:	f3bf 8f6f 	isb	sy
 800eb80:	f3bf 8f4f 	dsb	sy
 800eb84:	603b      	str	r3, [r7, #0]
}
 800eb86:	bf00      	nop
 800eb88:	e7fe      	b.n	800eb88 <vPortValidateInterruptPriority+0x60>
	}
 800eb8a:	bf00      	nop
 800eb8c:	3714      	adds	r7, #20
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	e000e3f0 	.word	0xe000e3f0
 800eb9c:	20000984 	.word	0x20000984
 800eba0:	e000ed0c 	.word	0xe000ed0c
 800eba4:	20000988 	.word	0x20000988

0800eba8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b08a      	sub	sp, #40	; 0x28
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ebb4:	f7fe fc7e 	bl	800d4b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ebb8:	4b5b      	ldr	r3, [pc, #364]	; (800ed28 <pvPortMalloc+0x180>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d101      	bne.n	800ebc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ebc0:	f000 f920 	bl	800ee04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ebc4:	4b59      	ldr	r3, [pc, #356]	; (800ed2c <pvPortMalloc+0x184>)
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	4013      	ands	r3, r2
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	f040 8093 	bne.w	800ecf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d01d      	beq.n	800ec14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ebd8:	2208      	movs	r2, #8
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4413      	add	r3, r2
 800ebde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f003 0307 	and.w	r3, r3, #7
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d014      	beq.n	800ec14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f023 0307 	bic.w	r3, r3, #7
 800ebf0:	3308      	adds	r3, #8
 800ebf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f003 0307 	and.w	r3, r3, #7
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d00a      	beq.n	800ec14 <pvPortMalloc+0x6c>
	__asm volatile
 800ebfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec02:	f383 8811 	msr	BASEPRI, r3
 800ec06:	f3bf 8f6f 	isb	sy
 800ec0a:	f3bf 8f4f 	dsb	sy
 800ec0e:	617b      	str	r3, [r7, #20]
}
 800ec10:	bf00      	nop
 800ec12:	e7fe      	b.n	800ec12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d06e      	beq.n	800ecf8 <pvPortMalloc+0x150>
 800ec1a:	4b45      	ldr	r3, [pc, #276]	; (800ed30 <pvPortMalloc+0x188>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d869      	bhi.n	800ecf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ec24:	4b43      	ldr	r3, [pc, #268]	; (800ed34 <pvPortMalloc+0x18c>)
 800ec26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ec28:	4b42      	ldr	r3, [pc, #264]	; (800ed34 <pvPortMalloc+0x18c>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec2e:	e004      	b.n	800ec3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ec30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ec34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d903      	bls.n	800ec4c <pvPortMalloc+0xa4>
 800ec44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d1f1      	bne.n	800ec30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ec4c:	4b36      	ldr	r3, [pc, #216]	; (800ed28 <pvPortMalloc+0x180>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d050      	beq.n	800ecf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec56:	6a3b      	ldr	r3, [r7, #32]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	2208      	movs	r2, #8
 800ec5c:	4413      	add	r3, r2
 800ec5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec62:	681a      	ldr	r2, [r3, #0]
 800ec64:	6a3b      	ldr	r3, [r7, #32]
 800ec66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6a:	685a      	ldr	r2, [r3, #4]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	1ad2      	subs	r2, r2, r3
 800ec70:	2308      	movs	r3, #8
 800ec72:	005b      	lsls	r3, r3, #1
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d91f      	bls.n	800ecb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ec78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	4413      	add	r3, r2
 800ec7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec80:	69bb      	ldr	r3, [r7, #24]
 800ec82:	f003 0307 	and.w	r3, r3, #7
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d00a      	beq.n	800eca0 <pvPortMalloc+0xf8>
	__asm volatile
 800ec8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8e:	f383 8811 	msr	BASEPRI, r3
 800ec92:	f3bf 8f6f 	isb	sy
 800ec96:	f3bf 8f4f 	dsb	sy
 800ec9a:	613b      	str	r3, [r7, #16]
}
 800ec9c:	bf00      	nop
 800ec9e:	e7fe      	b.n	800ec9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca2:	685a      	ldr	r2, [r3, #4]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	1ad2      	subs	r2, r2, r3
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ecac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ecb2:	69b8      	ldr	r0, [r7, #24]
 800ecb4:	f000 f908 	bl	800eec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ecb8:	4b1d      	ldr	r3, [pc, #116]	; (800ed30 <pvPortMalloc+0x188>)
 800ecba:	681a      	ldr	r2, [r3, #0]
 800ecbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	1ad3      	subs	r3, r2, r3
 800ecc2:	4a1b      	ldr	r2, [pc, #108]	; (800ed30 <pvPortMalloc+0x188>)
 800ecc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ecc6:	4b1a      	ldr	r3, [pc, #104]	; (800ed30 <pvPortMalloc+0x188>)
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	4b1b      	ldr	r3, [pc, #108]	; (800ed38 <pvPortMalloc+0x190>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d203      	bcs.n	800ecda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ecd2:	4b17      	ldr	r3, [pc, #92]	; (800ed30 <pvPortMalloc+0x188>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	4a18      	ldr	r2, [pc, #96]	; (800ed38 <pvPortMalloc+0x190>)
 800ecd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ecda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecdc:	685a      	ldr	r2, [r3, #4]
 800ecde:	4b13      	ldr	r3, [pc, #76]	; (800ed2c <pvPortMalloc+0x184>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	431a      	orrs	r2, r3
 800ece4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ece8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecea:	2200      	movs	r2, #0
 800ecec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ecee:	4b13      	ldr	r3, [pc, #76]	; (800ed3c <pvPortMalloc+0x194>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	4a11      	ldr	r2, [pc, #68]	; (800ed3c <pvPortMalloc+0x194>)
 800ecf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ecf8:	f7fe fbea 	bl	800d4d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	f003 0307 	and.w	r3, r3, #7
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d00a      	beq.n	800ed1c <pvPortMalloc+0x174>
	__asm volatile
 800ed06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed0a:	f383 8811 	msr	BASEPRI, r3
 800ed0e:	f3bf 8f6f 	isb	sy
 800ed12:	f3bf 8f4f 	dsb	sy
 800ed16:	60fb      	str	r3, [r7, #12]
}
 800ed18:	bf00      	nop
 800ed1a:	e7fe      	b.n	800ed1a <pvPortMalloc+0x172>
	return pvReturn;
 800ed1c:	69fb      	ldr	r3, [r7, #28]
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3728      	adds	r7, #40	; 0x28
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
 800ed26:	bf00      	nop
 800ed28:	20008994 	.word	0x20008994
 800ed2c:	200089a8 	.word	0x200089a8
 800ed30:	20008998 	.word	0x20008998
 800ed34:	2000898c 	.word	0x2000898c
 800ed38:	2000899c 	.word	0x2000899c
 800ed3c:	200089a0 	.word	0x200089a0

0800ed40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b086      	sub	sp, #24
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d04d      	beq.n	800edee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ed52:	2308      	movs	r3, #8
 800ed54:	425b      	negs	r3, r3
 800ed56:	697a      	ldr	r2, [r7, #20]
 800ed58:	4413      	add	r3, r2
 800ed5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	685a      	ldr	r2, [r3, #4]
 800ed64:	4b24      	ldr	r3, [pc, #144]	; (800edf8 <vPortFree+0xb8>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4013      	ands	r3, r2
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d10a      	bne.n	800ed84 <vPortFree+0x44>
	__asm volatile
 800ed6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed72:	f383 8811 	msr	BASEPRI, r3
 800ed76:	f3bf 8f6f 	isb	sy
 800ed7a:	f3bf 8f4f 	dsb	sy
 800ed7e:	60fb      	str	r3, [r7, #12]
}
 800ed80:	bf00      	nop
 800ed82:	e7fe      	b.n	800ed82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d00a      	beq.n	800eda2 <vPortFree+0x62>
	__asm volatile
 800ed8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed90:	f383 8811 	msr	BASEPRI, r3
 800ed94:	f3bf 8f6f 	isb	sy
 800ed98:	f3bf 8f4f 	dsb	sy
 800ed9c:	60bb      	str	r3, [r7, #8]
}
 800ed9e:	bf00      	nop
 800eda0:	e7fe      	b.n	800eda0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eda2:	693b      	ldr	r3, [r7, #16]
 800eda4:	685a      	ldr	r2, [r3, #4]
 800eda6:	4b14      	ldr	r3, [pc, #80]	; (800edf8 <vPortFree+0xb8>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	4013      	ands	r3, r2
 800edac:	2b00      	cmp	r3, #0
 800edae:	d01e      	beq.n	800edee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d11a      	bne.n	800edee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	685a      	ldr	r2, [r3, #4]
 800edbc:	4b0e      	ldr	r3, [pc, #56]	; (800edf8 <vPortFree+0xb8>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	43db      	mvns	r3, r3
 800edc2:	401a      	ands	r2, r3
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800edc8:	f7fe fb74 	bl	800d4b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	685a      	ldr	r2, [r3, #4]
 800edd0:	4b0a      	ldr	r3, [pc, #40]	; (800edfc <vPortFree+0xbc>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4413      	add	r3, r2
 800edd6:	4a09      	ldr	r2, [pc, #36]	; (800edfc <vPortFree+0xbc>)
 800edd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800edda:	6938      	ldr	r0, [r7, #16]
 800eddc:	f000 f874 	bl	800eec8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ede0:	4b07      	ldr	r3, [pc, #28]	; (800ee00 <vPortFree+0xc0>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	3301      	adds	r3, #1
 800ede6:	4a06      	ldr	r2, [pc, #24]	; (800ee00 <vPortFree+0xc0>)
 800ede8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800edea:	f7fe fb71 	bl	800d4d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800edee:	bf00      	nop
 800edf0:	3718      	adds	r7, #24
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	200089a8 	.word	0x200089a8
 800edfc:	20008998 	.word	0x20008998
 800ee00:	200089a4 	.word	0x200089a4

0800ee04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ee04:	b480      	push	{r7}
 800ee06:	b085      	sub	sp, #20
 800ee08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ee0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ee10:	4b27      	ldr	r3, [pc, #156]	; (800eeb0 <prvHeapInit+0xac>)
 800ee12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f003 0307 	and.w	r3, r3, #7
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d00c      	beq.n	800ee38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	3307      	adds	r3, #7
 800ee22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	f023 0307 	bic.w	r3, r3, #7
 800ee2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ee2c:	68ba      	ldr	r2, [r7, #8]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	1ad3      	subs	r3, r2, r3
 800ee32:	4a1f      	ldr	r2, [pc, #124]	; (800eeb0 <prvHeapInit+0xac>)
 800ee34:	4413      	add	r3, r2
 800ee36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee3c:	4a1d      	ldr	r2, [pc, #116]	; (800eeb4 <prvHeapInit+0xb0>)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee42:	4b1c      	ldr	r3, [pc, #112]	; (800eeb4 <prvHeapInit+0xb0>)
 800ee44:	2200      	movs	r2, #0
 800ee46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	68ba      	ldr	r2, [r7, #8]
 800ee4c:	4413      	add	r3, r2
 800ee4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ee50:	2208      	movs	r2, #8
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	1a9b      	subs	r3, r3, r2
 800ee56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	f023 0307 	bic.w	r3, r3, #7
 800ee5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	4a15      	ldr	r2, [pc, #84]	; (800eeb8 <prvHeapInit+0xb4>)
 800ee64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ee66:	4b14      	ldr	r3, [pc, #80]	; (800eeb8 <prvHeapInit+0xb4>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee6e:	4b12      	ldr	r3, [pc, #72]	; (800eeb8 <prvHeapInit+0xb4>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	2200      	movs	r2, #0
 800ee74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	68fa      	ldr	r2, [r7, #12]
 800ee7e:	1ad2      	subs	r2, r2, r3
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ee84:	4b0c      	ldr	r3, [pc, #48]	; (800eeb8 <prvHeapInit+0xb4>)
 800ee86:	681a      	ldr	r2, [r3, #0]
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	685b      	ldr	r3, [r3, #4]
 800ee90:	4a0a      	ldr	r2, [pc, #40]	; (800eebc <prvHeapInit+0xb8>)
 800ee92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	685b      	ldr	r3, [r3, #4]
 800ee98:	4a09      	ldr	r2, [pc, #36]	; (800eec0 <prvHeapInit+0xbc>)
 800ee9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ee9c:	4b09      	ldr	r3, [pc, #36]	; (800eec4 <prvHeapInit+0xc0>)
 800ee9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eea2:	601a      	str	r2, [r3, #0]
}
 800eea4:	bf00      	nop
 800eea6:	3714      	adds	r7, #20
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeae:	4770      	bx	lr
 800eeb0:	2000098c 	.word	0x2000098c
 800eeb4:	2000898c 	.word	0x2000898c
 800eeb8:	20008994 	.word	0x20008994
 800eebc:	2000899c 	.word	0x2000899c
 800eec0:	20008998 	.word	0x20008998
 800eec4:	200089a8 	.word	0x200089a8

0800eec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eec8:	b480      	push	{r7}
 800eeca:	b085      	sub	sp, #20
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eed0:	4b28      	ldr	r3, [pc, #160]	; (800ef74 <prvInsertBlockIntoFreeList+0xac>)
 800eed2:	60fb      	str	r3, [r7, #12]
 800eed4:	e002      	b.n	800eedc <prvInsertBlockIntoFreeList+0x14>
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	60fb      	str	r3, [r7, #12]
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	687a      	ldr	r2, [r7, #4]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d8f7      	bhi.n	800eed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	68ba      	ldr	r2, [r7, #8]
 800eef0:	4413      	add	r3, r2
 800eef2:	687a      	ldr	r2, [r7, #4]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d108      	bne.n	800ef0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	685a      	ldr	r2, [r3, #4]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	441a      	add	r2, r3
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	685b      	ldr	r3, [r3, #4]
 800ef12:	68ba      	ldr	r2, [r7, #8]
 800ef14:	441a      	add	r2, r3
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d118      	bne.n	800ef50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681a      	ldr	r2, [r3, #0]
 800ef22:	4b15      	ldr	r3, [pc, #84]	; (800ef78 <prvInsertBlockIntoFreeList+0xb0>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d00d      	beq.n	800ef46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	685a      	ldr	r2, [r3, #4]
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	441a      	add	r2, r3
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	601a      	str	r2, [r3, #0]
 800ef44:	e008      	b.n	800ef58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ef46:	4b0c      	ldr	r3, [pc, #48]	; (800ef78 <prvInsertBlockIntoFreeList+0xb0>)
 800ef48:	681a      	ldr	r2, [r3, #0]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	601a      	str	r2, [r3, #0]
 800ef4e:	e003      	b.n	800ef58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef58:	68fa      	ldr	r2, [r7, #12]
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d002      	beq.n	800ef66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	687a      	ldr	r2, [r7, #4]
 800ef64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef66:	bf00      	nop
 800ef68:	3714      	adds	r7, #20
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef70:	4770      	bx	lr
 800ef72:	bf00      	nop
 800ef74:	2000898c 	.word	0x2000898c
 800ef78:	20008994 	.word	0x20008994

0800ef7c <atoi>:
 800ef7c:	220a      	movs	r2, #10
 800ef7e:	2100      	movs	r1, #0
 800ef80:	f000 b952 	b.w	800f228 <strtol>

0800ef84 <__errno>:
 800ef84:	4b01      	ldr	r3, [pc, #4]	; (800ef8c <__errno+0x8>)
 800ef86:	6818      	ldr	r0, [r3, #0]
 800ef88:	4770      	bx	lr
 800ef8a:	bf00      	nop
 800ef8c:	20000018 	.word	0x20000018

0800ef90 <__libc_init_array>:
 800ef90:	b570      	push	{r4, r5, r6, lr}
 800ef92:	4d0d      	ldr	r5, [pc, #52]	; (800efc8 <__libc_init_array+0x38>)
 800ef94:	4c0d      	ldr	r4, [pc, #52]	; (800efcc <__libc_init_array+0x3c>)
 800ef96:	1b64      	subs	r4, r4, r5
 800ef98:	10a4      	asrs	r4, r4, #2
 800ef9a:	2600      	movs	r6, #0
 800ef9c:	42a6      	cmp	r6, r4
 800ef9e:	d109      	bne.n	800efb4 <__libc_init_array+0x24>
 800efa0:	4d0b      	ldr	r5, [pc, #44]	; (800efd0 <__libc_init_array+0x40>)
 800efa2:	4c0c      	ldr	r4, [pc, #48]	; (800efd4 <__libc_init_array+0x44>)
 800efa4:	f001 f970 	bl	8010288 <_init>
 800efa8:	1b64      	subs	r4, r4, r5
 800efaa:	10a4      	asrs	r4, r4, #2
 800efac:	2600      	movs	r6, #0
 800efae:	42a6      	cmp	r6, r4
 800efb0:	d105      	bne.n	800efbe <__libc_init_array+0x2e>
 800efb2:	bd70      	pop	{r4, r5, r6, pc}
 800efb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800efb8:	4798      	blx	r3
 800efba:	3601      	adds	r6, #1
 800efbc:	e7ee      	b.n	800ef9c <__libc_init_array+0xc>
 800efbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800efc2:	4798      	blx	r3
 800efc4:	3601      	adds	r6, #1
 800efc6:	e7f2      	b.n	800efae <__libc_init_array+0x1e>
 800efc8:	080106fc 	.word	0x080106fc
 800efcc:	080106fc 	.word	0x080106fc
 800efd0:	080106fc 	.word	0x080106fc
 800efd4:	08010700 	.word	0x08010700

0800efd8 <memcpy>:
 800efd8:	440a      	add	r2, r1
 800efda:	4291      	cmp	r1, r2
 800efdc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800efe0:	d100      	bne.n	800efe4 <memcpy+0xc>
 800efe2:	4770      	bx	lr
 800efe4:	b510      	push	{r4, lr}
 800efe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efee:	4291      	cmp	r1, r2
 800eff0:	d1f9      	bne.n	800efe6 <memcpy+0xe>
 800eff2:	bd10      	pop	{r4, pc}

0800eff4 <memset>:
 800eff4:	4402      	add	r2, r0
 800eff6:	4603      	mov	r3, r0
 800eff8:	4293      	cmp	r3, r2
 800effa:	d100      	bne.n	800effe <memset+0xa>
 800effc:	4770      	bx	lr
 800effe:	f803 1b01 	strb.w	r1, [r3], #1
 800f002:	e7f9      	b.n	800eff8 <memset+0x4>

0800f004 <iprintf>:
 800f004:	b40f      	push	{r0, r1, r2, r3}
 800f006:	4b0a      	ldr	r3, [pc, #40]	; (800f030 <iprintf+0x2c>)
 800f008:	b513      	push	{r0, r1, r4, lr}
 800f00a:	681c      	ldr	r4, [r3, #0]
 800f00c:	b124      	cbz	r4, 800f018 <iprintf+0x14>
 800f00e:	69a3      	ldr	r3, [r4, #24]
 800f010:	b913      	cbnz	r3, 800f018 <iprintf+0x14>
 800f012:	4620      	mov	r0, r4
 800f014:	f000 faec 	bl	800f5f0 <__sinit>
 800f018:	ab05      	add	r3, sp, #20
 800f01a:	9a04      	ldr	r2, [sp, #16]
 800f01c:	68a1      	ldr	r1, [r4, #8]
 800f01e:	9301      	str	r3, [sp, #4]
 800f020:	4620      	mov	r0, r4
 800f022:	f000 fcbd 	bl	800f9a0 <_vfiprintf_r>
 800f026:	b002      	add	sp, #8
 800f028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f02c:	b004      	add	sp, #16
 800f02e:	4770      	bx	lr
 800f030:	20000018 	.word	0x20000018

0800f034 <_puts_r>:
 800f034:	b570      	push	{r4, r5, r6, lr}
 800f036:	460e      	mov	r6, r1
 800f038:	4605      	mov	r5, r0
 800f03a:	b118      	cbz	r0, 800f044 <_puts_r+0x10>
 800f03c:	6983      	ldr	r3, [r0, #24]
 800f03e:	b90b      	cbnz	r3, 800f044 <_puts_r+0x10>
 800f040:	f000 fad6 	bl	800f5f0 <__sinit>
 800f044:	69ab      	ldr	r3, [r5, #24]
 800f046:	68ac      	ldr	r4, [r5, #8]
 800f048:	b913      	cbnz	r3, 800f050 <_puts_r+0x1c>
 800f04a:	4628      	mov	r0, r5
 800f04c:	f000 fad0 	bl	800f5f0 <__sinit>
 800f050:	4b2c      	ldr	r3, [pc, #176]	; (800f104 <_puts_r+0xd0>)
 800f052:	429c      	cmp	r4, r3
 800f054:	d120      	bne.n	800f098 <_puts_r+0x64>
 800f056:	686c      	ldr	r4, [r5, #4]
 800f058:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f05a:	07db      	lsls	r3, r3, #31
 800f05c:	d405      	bmi.n	800f06a <_puts_r+0x36>
 800f05e:	89a3      	ldrh	r3, [r4, #12]
 800f060:	0598      	lsls	r0, r3, #22
 800f062:	d402      	bmi.n	800f06a <_puts_r+0x36>
 800f064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f066:	f000 fb61 	bl	800f72c <__retarget_lock_acquire_recursive>
 800f06a:	89a3      	ldrh	r3, [r4, #12]
 800f06c:	0719      	lsls	r1, r3, #28
 800f06e:	d51d      	bpl.n	800f0ac <_puts_r+0x78>
 800f070:	6923      	ldr	r3, [r4, #16]
 800f072:	b1db      	cbz	r3, 800f0ac <_puts_r+0x78>
 800f074:	3e01      	subs	r6, #1
 800f076:	68a3      	ldr	r3, [r4, #8]
 800f078:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f07c:	3b01      	subs	r3, #1
 800f07e:	60a3      	str	r3, [r4, #8]
 800f080:	bb39      	cbnz	r1, 800f0d2 <_puts_r+0x9e>
 800f082:	2b00      	cmp	r3, #0
 800f084:	da38      	bge.n	800f0f8 <_puts_r+0xc4>
 800f086:	4622      	mov	r2, r4
 800f088:	210a      	movs	r1, #10
 800f08a:	4628      	mov	r0, r5
 800f08c:	f000 f8d6 	bl	800f23c <__swbuf_r>
 800f090:	3001      	adds	r0, #1
 800f092:	d011      	beq.n	800f0b8 <_puts_r+0x84>
 800f094:	250a      	movs	r5, #10
 800f096:	e011      	b.n	800f0bc <_puts_r+0x88>
 800f098:	4b1b      	ldr	r3, [pc, #108]	; (800f108 <_puts_r+0xd4>)
 800f09a:	429c      	cmp	r4, r3
 800f09c:	d101      	bne.n	800f0a2 <_puts_r+0x6e>
 800f09e:	68ac      	ldr	r4, [r5, #8]
 800f0a0:	e7da      	b.n	800f058 <_puts_r+0x24>
 800f0a2:	4b1a      	ldr	r3, [pc, #104]	; (800f10c <_puts_r+0xd8>)
 800f0a4:	429c      	cmp	r4, r3
 800f0a6:	bf08      	it	eq
 800f0a8:	68ec      	ldreq	r4, [r5, #12]
 800f0aa:	e7d5      	b.n	800f058 <_puts_r+0x24>
 800f0ac:	4621      	mov	r1, r4
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	f000 f916 	bl	800f2e0 <__swsetup_r>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	d0dd      	beq.n	800f074 <_puts_r+0x40>
 800f0b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f0bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0be:	07da      	lsls	r2, r3, #31
 800f0c0:	d405      	bmi.n	800f0ce <_puts_r+0x9a>
 800f0c2:	89a3      	ldrh	r3, [r4, #12]
 800f0c4:	059b      	lsls	r3, r3, #22
 800f0c6:	d402      	bmi.n	800f0ce <_puts_r+0x9a>
 800f0c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0ca:	f000 fb30 	bl	800f72e <__retarget_lock_release_recursive>
 800f0ce:	4628      	mov	r0, r5
 800f0d0:	bd70      	pop	{r4, r5, r6, pc}
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	da04      	bge.n	800f0e0 <_puts_r+0xac>
 800f0d6:	69a2      	ldr	r2, [r4, #24]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	dc06      	bgt.n	800f0ea <_puts_r+0xb6>
 800f0dc:	290a      	cmp	r1, #10
 800f0de:	d004      	beq.n	800f0ea <_puts_r+0xb6>
 800f0e0:	6823      	ldr	r3, [r4, #0]
 800f0e2:	1c5a      	adds	r2, r3, #1
 800f0e4:	6022      	str	r2, [r4, #0]
 800f0e6:	7019      	strb	r1, [r3, #0]
 800f0e8:	e7c5      	b.n	800f076 <_puts_r+0x42>
 800f0ea:	4622      	mov	r2, r4
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	f000 f8a5 	bl	800f23c <__swbuf_r>
 800f0f2:	3001      	adds	r0, #1
 800f0f4:	d1bf      	bne.n	800f076 <_puts_r+0x42>
 800f0f6:	e7df      	b.n	800f0b8 <_puts_r+0x84>
 800f0f8:	6823      	ldr	r3, [r4, #0]
 800f0fa:	250a      	movs	r5, #10
 800f0fc:	1c5a      	adds	r2, r3, #1
 800f0fe:	6022      	str	r2, [r4, #0]
 800f100:	701d      	strb	r5, [r3, #0]
 800f102:	e7db      	b.n	800f0bc <_puts_r+0x88>
 800f104:	08010680 	.word	0x08010680
 800f108:	080106a0 	.word	0x080106a0
 800f10c:	08010660 	.word	0x08010660

0800f110 <puts>:
 800f110:	4b02      	ldr	r3, [pc, #8]	; (800f11c <puts+0xc>)
 800f112:	4601      	mov	r1, r0
 800f114:	6818      	ldr	r0, [r3, #0]
 800f116:	f7ff bf8d 	b.w	800f034 <_puts_r>
 800f11a:	bf00      	nop
 800f11c:	20000018 	.word	0x20000018

0800f120 <_strtol_l.isra.0>:
 800f120:	2b01      	cmp	r3, #1
 800f122:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f126:	d001      	beq.n	800f12c <_strtol_l.isra.0+0xc>
 800f128:	2b24      	cmp	r3, #36	; 0x24
 800f12a:	d906      	bls.n	800f13a <_strtol_l.isra.0+0x1a>
 800f12c:	f7ff ff2a 	bl	800ef84 <__errno>
 800f130:	2316      	movs	r3, #22
 800f132:	6003      	str	r3, [r0, #0]
 800f134:	2000      	movs	r0, #0
 800f136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f13a:	4f3a      	ldr	r7, [pc, #232]	; (800f224 <_strtol_l.isra.0+0x104>)
 800f13c:	468e      	mov	lr, r1
 800f13e:	4676      	mov	r6, lr
 800f140:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f144:	5de5      	ldrb	r5, [r4, r7]
 800f146:	f015 0508 	ands.w	r5, r5, #8
 800f14a:	d1f8      	bne.n	800f13e <_strtol_l.isra.0+0x1e>
 800f14c:	2c2d      	cmp	r4, #45	; 0x2d
 800f14e:	d134      	bne.n	800f1ba <_strtol_l.isra.0+0x9a>
 800f150:	f89e 4000 	ldrb.w	r4, [lr]
 800f154:	f04f 0801 	mov.w	r8, #1
 800f158:	f106 0e02 	add.w	lr, r6, #2
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d05c      	beq.n	800f21a <_strtol_l.isra.0+0xfa>
 800f160:	2b10      	cmp	r3, #16
 800f162:	d10c      	bne.n	800f17e <_strtol_l.isra.0+0x5e>
 800f164:	2c30      	cmp	r4, #48	; 0x30
 800f166:	d10a      	bne.n	800f17e <_strtol_l.isra.0+0x5e>
 800f168:	f89e 4000 	ldrb.w	r4, [lr]
 800f16c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f170:	2c58      	cmp	r4, #88	; 0x58
 800f172:	d14d      	bne.n	800f210 <_strtol_l.isra.0+0xf0>
 800f174:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800f178:	2310      	movs	r3, #16
 800f17a:	f10e 0e02 	add.w	lr, lr, #2
 800f17e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800f182:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800f186:	2600      	movs	r6, #0
 800f188:	fbbc f9f3 	udiv	r9, ip, r3
 800f18c:	4635      	mov	r5, r6
 800f18e:	fb03 ca19 	mls	sl, r3, r9, ip
 800f192:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f196:	2f09      	cmp	r7, #9
 800f198:	d818      	bhi.n	800f1cc <_strtol_l.isra.0+0xac>
 800f19a:	463c      	mov	r4, r7
 800f19c:	42a3      	cmp	r3, r4
 800f19e:	dd24      	ble.n	800f1ea <_strtol_l.isra.0+0xca>
 800f1a0:	2e00      	cmp	r6, #0
 800f1a2:	db1f      	blt.n	800f1e4 <_strtol_l.isra.0+0xc4>
 800f1a4:	45a9      	cmp	r9, r5
 800f1a6:	d31d      	bcc.n	800f1e4 <_strtol_l.isra.0+0xc4>
 800f1a8:	d101      	bne.n	800f1ae <_strtol_l.isra.0+0x8e>
 800f1aa:	45a2      	cmp	sl, r4
 800f1ac:	db1a      	blt.n	800f1e4 <_strtol_l.isra.0+0xc4>
 800f1ae:	fb05 4503 	mla	r5, r5, r3, r4
 800f1b2:	2601      	movs	r6, #1
 800f1b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f1b8:	e7eb      	b.n	800f192 <_strtol_l.isra.0+0x72>
 800f1ba:	2c2b      	cmp	r4, #43	; 0x2b
 800f1bc:	bf08      	it	eq
 800f1be:	f89e 4000 	ldrbeq.w	r4, [lr]
 800f1c2:	46a8      	mov	r8, r5
 800f1c4:	bf08      	it	eq
 800f1c6:	f106 0e02 	addeq.w	lr, r6, #2
 800f1ca:	e7c7      	b.n	800f15c <_strtol_l.isra.0+0x3c>
 800f1cc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f1d0:	2f19      	cmp	r7, #25
 800f1d2:	d801      	bhi.n	800f1d8 <_strtol_l.isra.0+0xb8>
 800f1d4:	3c37      	subs	r4, #55	; 0x37
 800f1d6:	e7e1      	b.n	800f19c <_strtol_l.isra.0+0x7c>
 800f1d8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f1dc:	2f19      	cmp	r7, #25
 800f1de:	d804      	bhi.n	800f1ea <_strtol_l.isra.0+0xca>
 800f1e0:	3c57      	subs	r4, #87	; 0x57
 800f1e2:	e7db      	b.n	800f19c <_strtol_l.isra.0+0x7c>
 800f1e4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800f1e8:	e7e4      	b.n	800f1b4 <_strtol_l.isra.0+0x94>
 800f1ea:	2e00      	cmp	r6, #0
 800f1ec:	da05      	bge.n	800f1fa <_strtol_l.isra.0+0xda>
 800f1ee:	2322      	movs	r3, #34	; 0x22
 800f1f0:	6003      	str	r3, [r0, #0]
 800f1f2:	4665      	mov	r5, ip
 800f1f4:	b942      	cbnz	r2, 800f208 <_strtol_l.isra.0+0xe8>
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	e79d      	b.n	800f136 <_strtol_l.isra.0+0x16>
 800f1fa:	f1b8 0f00 	cmp.w	r8, #0
 800f1fe:	d000      	beq.n	800f202 <_strtol_l.isra.0+0xe2>
 800f200:	426d      	negs	r5, r5
 800f202:	2a00      	cmp	r2, #0
 800f204:	d0f7      	beq.n	800f1f6 <_strtol_l.isra.0+0xd6>
 800f206:	b10e      	cbz	r6, 800f20c <_strtol_l.isra.0+0xec>
 800f208:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800f20c:	6011      	str	r1, [r2, #0]
 800f20e:	e7f2      	b.n	800f1f6 <_strtol_l.isra.0+0xd6>
 800f210:	2430      	movs	r4, #48	; 0x30
 800f212:	2b00      	cmp	r3, #0
 800f214:	d1b3      	bne.n	800f17e <_strtol_l.isra.0+0x5e>
 800f216:	2308      	movs	r3, #8
 800f218:	e7b1      	b.n	800f17e <_strtol_l.isra.0+0x5e>
 800f21a:	2c30      	cmp	r4, #48	; 0x30
 800f21c:	d0a4      	beq.n	800f168 <_strtol_l.isra.0+0x48>
 800f21e:	230a      	movs	r3, #10
 800f220:	e7ad      	b.n	800f17e <_strtol_l.isra.0+0x5e>
 800f222:	bf00      	nop
 800f224:	0801055d 	.word	0x0801055d

0800f228 <strtol>:
 800f228:	4613      	mov	r3, r2
 800f22a:	460a      	mov	r2, r1
 800f22c:	4601      	mov	r1, r0
 800f22e:	4802      	ldr	r0, [pc, #8]	; (800f238 <strtol+0x10>)
 800f230:	6800      	ldr	r0, [r0, #0]
 800f232:	f7ff bf75 	b.w	800f120 <_strtol_l.isra.0>
 800f236:	bf00      	nop
 800f238:	20000018 	.word	0x20000018

0800f23c <__swbuf_r>:
 800f23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f23e:	460e      	mov	r6, r1
 800f240:	4614      	mov	r4, r2
 800f242:	4605      	mov	r5, r0
 800f244:	b118      	cbz	r0, 800f24e <__swbuf_r+0x12>
 800f246:	6983      	ldr	r3, [r0, #24]
 800f248:	b90b      	cbnz	r3, 800f24e <__swbuf_r+0x12>
 800f24a:	f000 f9d1 	bl	800f5f0 <__sinit>
 800f24e:	4b21      	ldr	r3, [pc, #132]	; (800f2d4 <__swbuf_r+0x98>)
 800f250:	429c      	cmp	r4, r3
 800f252:	d12b      	bne.n	800f2ac <__swbuf_r+0x70>
 800f254:	686c      	ldr	r4, [r5, #4]
 800f256:	69a3      	ldr	r3, [r4, #24]
 800f258:	60a3      	str	r3, [r4, #8]
 800f25a:	89a3      	ldrh	r3, [r4, #12]
 800f25c:	071a      	lsls	r2, r3, #28
 800f25e:	d52f      	bpl.n	800f2c0 <__swbuf_r+0x84>
 800f260:	6923      	ldr	r3, [r4, #16]
 800f262:	b36b      	cbz	r3, 800f2c0 <__swbuf_r+0x84>
 800f264:	6923      	ldr	r3, [r4, #16]
 800f266:	6820      	ldr	r0, [r4, #0]
 800f268:	1ac0      	subs	r0, r0, r3
 800f26a:	6963      	ldr	r3, [r4, #20]
 800f26c:	b2f6      	uxtb	r6, r6
 800f26e:	4283      	cmp	r3, r0
 800f270:	4637      	mov	r7, r6
 800f272:	dc04      	bgt.n	800f27e <__swbuf_r+0x42>
 800f274:	4621      	mov	r1, r4
 800f276:	4628      	mov	r0, r5
 800f278:	f000 f926 	bl	800f4c8 <_fflush_r>
 800f27c:	bb30      	cbnz	r0, 800f2cc <__swbuf_r+0x90>
 800f27e:	68a3      	ldr	r3, [r4, #8]
 800f280:	3b01      	subs	r3, #1
 800f282:	60a3      	str	r3, [r4, #8]
 800f284:	6823      	ldr	r3, [r4, #0]
 800f286:	1c5a      	adds	r2, r3, #1
 800f288:	6022      	str	r2, [r4, #0]
 800f28a:	701e      	strb	r6, [r3, #0]
 800f28c:	6963      	ldr	r3, [r4, #20]
 800f28e:	3001      	adds	r0, #1
 800f290:	4283      	cmp	r3, r0
 800f292:	d004      	beq.n	800f29e <__swbuf_r+0x62>
 800f294:	89a3      	ldrh	r3, [r4, #12]
 800f296:	07db      	lsls	r3, r3, #31
 800f298:	d506      	bpl.n	800f2a8 <__swbuf_r+0x6c>
 800f29a:	2e0a      	cmp	r6, #10
 800f29c:	d104      	bne.n	800f2a8 <__swbuf_r+0x6c>
 800f29e:	4621      	mov	r1, r4
 800f2a0:	4628      	mov	r0, r5
 800f2a2:	f000 f911 	bl	800f4c8 <_fflush_r>
 800f2a6:	b988      	cbnz	r0, 800f2cc <__swbuf_r+0x90>
 800f2a8:	4638      	mov	r0, r7
 800f2aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2ac:	4b0a      	ldr	r3, [pc, #40]	; (800f2d8 <__swbuf_r+0x9c>)
 800f2ae:	429c      	cmp	r4, r3
 800f2b0:	d101      	bne.n	800f2b6 <__swbuf_r+0x7a>
 800f2b2:	68ac      	ldr	r4, [r5, #8]
 800f2b4:	e7cf      	b.n	800f256 <__swbuf_r+0x1a>
 800f2b6:	4b09      	ldr	r3, [pc, #36]	; (800f2dc <__swbuf_r+0xa0>)
 800f2b8:	429c      	cmp	r4, r3
 800f2ba:	bf08      	it	eq
 800f2bc:	68ec      	ldreq	r4, [r5, #12]
 800f2be:	e7ca      	b.n	800f256 <__swbuf_r+0x1a>
 800f2c0:	4621      	mov	r1, r4
 800f2c2:	4628      	mov	r0, r5
 800f2c4:	f000 f80c 	bl	800f2e0 <__swsetup_r>
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	d0cb      	beq.n	800f264 <__swbuf_r+0x28>
 800f2cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f2d0:	e7ea      	b.n	800f2a8 <__swbuf_r+0x6c>
 800f2d2:	bf00      	nop
 800f2d4:	08010680 	.word	0x08010680
 800f2d8:	080106a0 	.word	0x080106a0
 800f2dc:	08010660 	.word	0x08010660

0800f2e0 <__swsetup_r>:
 800f2e0:	4b32      	ldr	r3, [pc, #200]	; (800f3ac <__swsetup_r+0xcc>)
 800f2e2:	b570      	push	{r4, r5, r6, lr}
 800f2e4:	681d      	ldr	r5, [r3, #0]
 800f2e6:	4606      	mov	r6, r0
 800f2e8:	460c      	mov	r4, r1
 800f2ea:	b125      	cbz	r5, 800f2f6 <__swsetup_r+0x16>
 800f2ec:	69ab      	ldr	r3, [r5, #24]
 800f2ee:	b913      	cbnz	r3, 800f2f6 <__swsetup_r+0x16>
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	f000 f97d 	bl	800f5f0 <__sinit>
 800f2f6:	4b2e      	ldr	r3, [pc, #184]	; (800f3b0 <__swsetup_r+0xd0>)
 800f2f8:	429c      	cmp	r4, r3
 800f2fa:	d10f      	bne.n	800f31c <__swsetup_r+0x3c>
 800f2fc:	686c      	ldr	r4, [r5, #4]
 800f2fe:	89a3      	ldrh	r3, [r4, #12]
 800f300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f304:	0719      	lsls	r1, r3, #28
 800f306:	d42c      	bmi.n	800f362 <__swsetup_r+0x82>
 800f308:	06dd      	lsls	r5, r3, #27
 800f30a:	d411      	bmi.n	800f330 <__swsetup_r+0x50>
 800f30c:	2309      	movs	r3, #9
 800f30e:	6033      	str	r3, [r6, #0]
 800f310:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f314:	81a3      	strh	r3, [r4, #12]
 800f316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f31a:	e03e      	b.n	800f39a <__swsetup_r+0xba>
 800f31c:	4b25      	ldr	r3, [pc, #148]	; (800f3b4 <__swsetup_r+0xd4>)
 800f31e:	429c      	cmp	r4, r3
 800f320:	d101      	bne.n	800f326 <__swsetup_r+0x46>
 800f322:	68ac      	ldr	r4, [r5, #8]
 800f324:	e7eb      	b.n	800f2fe <__swsetup_r+0x1e>
 800f326:	4b24      	ldr	r3, [pc, #144]	; (800f3b8 <__swsetup_r+0xd8>)
 800f328:	429c      	cmp	r4, r3
 800f32a:	bf08      	it	eq
 800f32c:	68ec      	ldreq	r4, [r5, #12]
 800f32e:	e7e6      	b.n	800f2fe <__swsetup_r+0x1e>
 800f330:	0758      	lsls	r0, r3, #29
 800f332:	d512      	bpl.n	800f35a <__swsetup_r+0x7a>
 800f334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f336:	b141      	cbz	r1, 800f34a <__swsetup_r+0x6a>
 800f338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f33c:	4299      	cmp	r1, r3
 800f33e:	d002      	beq.n	800f346 <__swsetup_r+0x66>
 800f340:	4630      	mov	r0, r6
 800f342:	f000 fa59 	bl	800f7f8 <_free_r>
 800f346:	2300      	movs	r3, #0
 800f348:	6363      	str	r3, [r4, #52]	; 0x34
 800f34a:	89a3      	ldrh	r3, [r4, #12]
 800f34c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f350:	81a3      	strh	r3, [r4, #12]
 800f352:	2300      	movs	r3, #0
 800f354:	6063      	str	r3, [r4, #4]
 800f356:	6923      	ldr	r3, [r4, #16]
 800f358:	6023      	str	r3, [r4, #0]
 800f35a:	89a3      	ldrh	r3, [r4, #12]
 800f35c:	f043 0308 	orr.w	r3, r3, #8
 800f360:	81a3      	strh	r3, [r4, #12]
 800f362:	6923      	ldr	r3, [r4, #16]
 800f364:	b94b      	cbnz	r3, 800f37a <__swsetup_r+0x9a>
 800f366:	89a3      	ldrh	r3, [r4, #12]
 800f368:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f36c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f370:	d003      	beq.n	800f37a <__swsetup_r+0x9a>
 800f372:	4621      	mov	r1, r4
 800f374:	4630      	mov	r0, r6
 800f376:	f000 f9ff 	bl	800f778 <__smakebuf_r>
 800f37a:	89a0      	ldrh	r0, [r4, #12]
 800f37c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f380:	f010 0301 	ands.w	r3, r0, #1
 800f384:	d00a      	beq.n	800f39c <__swsetup_r+0xbc>
 800f386:	2300      	movs	r3, #0
 800f388:	60a3      	str	r3, [r4, #8]
 800f38a:	6963      	ldr	r3, [r4, #20]
 800f38c:	425b      	negs	r3, r3
 800f38e:	61a3      	str	r3, [r4, #24]
 800f390:	6923      	ldr	r3, [r4, #16]
 800f392:	b943      	cbnz	r3, 800f3a6 <__swsetup_r+0xc6>
 800f394:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f398:	d1ba      	bne.n	800f310 <__swsetup_r+0x30>
 800f39a:	bd70      	pop	{r4, r5, r6, pc}
 800f39c:	0781      	lsls	r1, r0, #30
 800f39e:	bf58      	it	pl
 800f3a0:	6963      	ldrpl	r3, [r4, #20]
 800f3a2:	60a3      	str	r3, [r4, #8]
 800f3a4:	e7f4      	b.n	800f390 <__swsetup_r+0xb0>
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	e7f7      	b.n	800f39a <__swsetup_r+0xba>
 800f3aa:	bf00      	nop
 800f3ac:	20000018 	.word	0x20000018
 800f3b0:	08010680 	.word	0x08010680
 800f3b4:	080106a0 	.word	0x080106a0
 800f3b8:	08010660 	.word	0x08010660

0800f3bc <__sflush_r>:
 800f3bc:	898a      	ldrh	r2, [r1, #12]
 800f3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3c2:	4605      	mov	r5, r0
 800f3c4:	0710      	lsls	r0, r2, #28
 800f3c6:	460c      	mov	r4, r1
 800f3c8:	d458      	bmi.n	800f47c <__sflush_r+0xc0>
 800f3ca:	684b      	ldr	r3, [r1, #4]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	dc05      	bgt.n	800f3dc <__sflush_r+0x20>
 800f3d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	dc02      	bgt.n	800f3dc <__sflush_r+0x20>
 800f3d6:	2000      	movs	r0, #0
 800f3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f3de:	2e00      	cmp	r6, #0
 800f3e0:	d0f9      	beq.n	800f3d6 <__sflush_r+0x1a>
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f3e8:	682f      	ldr	r7, [r5, #0]
 800f3ea:	602b      	str	r3, [r5, #0]
 800f3ec:	d032      	beq.n	800f454 <__sflush_r+0x98>
 800f3ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f3f0:	89a3      	ldrh	r3, [r4, #12]
 800f3f2:	075a      	lsls	r2, r3, #29
 800f3f4:	d505      	bpl.n	800f402 <__sflush_r+0x46>
 800f3f6:	6863      	ldr	r3, [r4, #4]
 800f3f8:	1ac0      	subs	r0, r0, r3
 800f3fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f3fc:	b10b      	cbz	r3, 800f402 <__sflush_r+0x46>
 800f3fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f400:	1ac0      	subs	r0, r0, r3
 800f402:	2300      	movs	r3, #0
 800f404:	4602      	mov	r2, r0
 800f406:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f408:	6a21      	ldr	r1, [r4, #32]
 800f40a:	4628      	mov	r0, r5
 800f40c:	47b0      	blx	r6
 800f40e:	1c43      	adds	r3, r0, #1
 800f410:	89a3      	ldrh	r3, [r4, #12]
 800f412:	d106      	bne.n	800f422 <__sflush_r+0x66>
 800f414:	6829      	ldr	r1, [r5, #0]
 800f416:	291d      	cmp	r1, #29
 800f418:	d82c      	bhi.n	800f474 <__sflush_r+0xb8>
 800f41a:	4a2a      	ldr	r2, [pc, #168]	; (800f4c4 <__sflush_r+0x108>)
 800f41c:	40ca      	lsrs	r2, r1
 800f41e:	07d6      	lsls	r6, r2, #31
 800f420:	d528      	bpl.n	800f474 <__sflush_r+0xb8>
 800f422:	2200      	movs	r2, #0
 800f424:	6062      	str	r2, [r4, #4]
 800f426:	04d9      	lsls	r1, r3, #19
 800f428:	6922      	ldr	r2, [r4, #16]
 800f42a:	6022      	str	r2, [r4, #0]
 800f42c:	d504      	bpl.n	800f438 <__sflush_r+0x7c>
 800f42e:	1c42      	adds	r2, r0, #1
 800f430:	d101      	bne.n	800f436 <__sflush_r+0x7a>
 800f432:	682b      	ldr	r3, [r5, #0]
 800f434:	b903      	cbnz	r3, 800f438 <__sflush_r+0x7c>
 800f436:	6560      	str	r0, [r4, #84]	; 0x54
 800f438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f43a:	602f      	str	r7, [r5, #0]
 800f43c:	2900      	cmp	r1, #0
 800f43e:	d0ca      	beq.n	800f3d6 <__sflush_r+0x1a>
 800f440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f444:	4299      	cmp	r1, r3
 800f446:	d002      	beq.n	800f44e <__sflush_r+0x92>
 800f448:	4628      	mov	r0, r5
 800f44a:	f000 f9d5 	bl	800f7f8 <_free_r>
 800f44e:	2000      	movs	r0, #0
 800f450:	6360      	str	r0, [r4, #52]	; 0x34
 800f452:	e7c1      	b.n	800f3d8 <__sflush_r+0x1c>
 800f454:	6a21      	ldr	r1, [r4, #32]
 800f456:	2301      	movs	r3, #1
 800f458:	4628      	mov	r0, r5
 800f45a:	47b0      	blx	r6
 800f45c:	1c41      	adds	r1, r0, #1
 800f45e:	d1c7      	bne.n	800f3f0 <__sflush_r+0x34>
 800f460:	682b      	ldr	r3, [r5, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d0c4      	beq.n	800f3f0 <__sflush_r+0x34>
 800f466:	2b1d      	cmp	r3, #29
 800f468:	d001      	beq.n	800f46e <__sflush_r+0xb2>
 800f46a:	2b16      	cmp	r3, #22
 800f46c:	d101      	bne.n	800f472 <__sflush_r+0xb6>
 800f46e:	602f      	str	r7, [r5, #0]
 800f470:	e7b1      	b.n	800f3d6 <__sflush_r+0x1a>
 800f472:	89a3      	ldrh	r3, [r4, #12]
 800f474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f478:	81a3      	strh	r3, [r4, #12]
 800f47a:	e7ad      	b.n	800f3d8 <__sflush_r+0x1c>
 800f47c:	690f      	ldr	r7, [r1, #16]
 800f47e:	2f00      	cmp	r7, #0
 800f480:	d0a9      	beq.n	800f3d6 <__sflush_r+0x1a>
 800f482:	0793      	lsls	r3, r2, #30
 800f484:	680e      	ldr	r6, [r1, #0]
 800f486:	bf08      	it	eq
 800f488:	694b      	ldreq	r3, [r1, #20]
 800f48a:	600f      	str	r7, [r1, #0]
 800f48c:	bf18      	it	ne
 800f48e:	2300      	movne	r3, #0
 800f490:	eba6 0807 	sub.w	r8, r6, r7
 800f494:	608b      	str	r3, [r1, #8]
 800f496:	f1b8 0f00 	cmp.w	r8, #0
 800f49a:	dd9c      	ble.n	800f3d6 <__sflush_r+0x1a>
 800f49c:	6a21      	ldr	r1, [r4, #32]
 800f49e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f4a0:	4643      	mov	r3, r8
 800f4a2:	463a      	mov	r2, r7
 800f4a4:	4628      	mov	r0, r5
 800f4a6:	47b0      	blx	r6
 800f4a8:	2800      	cmp	r0, #0
 800f4aa:	dc06      	bgt.n	800f4ba <__sflush_r+0xfe>
 800f4ac:	89a3      	ldrh	r3, [r4, #12]
 800f4ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4b2:	81a3      	strh	r3, [r4, #12]
 800f4b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f4b8:	e78e      	b.n	800f3d8 <__sflush_r+0x1c>
 800f4ba:	4407      	add	r7, r0
 800f4bc:	eba8 0800 	sub.w	r8, r8, r0
 800f4c0:	e7e9      	b.n	800f496 <__sflush_r+0xda>
 800f4c2:	bf00      	nop
 800f4c4:	20400001 	.word	0x20400001

0800f4c8 <_fflush_r>:
 800f4c8:	b538      	push	{r3, r4, r5, lr}
 800f4ca:	690b      	ldr	r3, [r1, #16]
 800f4cc:	4605      	mov	r5, r0
 800f4ce:	460c      	mov	r4, r1
 800f4d0:	b913      	cbnz	r3, 800f4d8 <_fflush_r+0x10>
 800f4d2:	2500      	movs	r5, #0
 800f4d4:	4628      	mov	r0, r5
 800f4d6:	bd38      	pop	{r3, r4, r5, pc}
 800f4d8:	b118      	cbz	r0, 800f4e2 <_fflush_r+0x1a>
 800f4da:	6983      	ldr	r3, [r0, #24]
 800f4dc:	b90b      	cbnz	r3, 800f4e2 <_fflush_r+0x1a>
 800f4de:	f000 f887 	bl	800f5f0 <__sinit>
 800f4e2:	4b14      	ldr	r3, [pc, #80]	; (800f534 <_fflush_r+0x6c>)
 800f4e4:	429c      	cmp	r4, r3
 800f4e6:	d11b      	bne.n	800f520 <_fflush_r+0x58>
 800f4e8:	686c      	ldr	r4, [r5, #4]
 800f4ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d0ef      	beq.n	800f4d2 <_fflush_r+0xa>
 800f4f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f4f4:	07d0      	lsls	r0, r2, #31
 800f4f6:	d404      	bmi.n	800f502 <_fflush_r+0x3a>
 800f4f8:	0599      	lsls	r1, r3, #22
 800f4fa:	d402      	bmi.n	800f502 <_fflush_r+0x3a>
 800f4fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4fe:	f000 f915 	bl	800f72c <__retarget_lock_acquire_recursive>
 800f502:	4628      	mov	r0, r5
 800f504:	4621      	mov	r1, r4
 800f506:	f7ff ff59 	bl	800f3bc <__sflush_r>
 800f50a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f50c:	07da      	lsls	r2, r3, #31
 800f50e:	4605      	mov	r5, r0
 800f510:	d4e0      	bmi.n	800f4d4 <_fflush_r+0xc>
 800f512:	89a3      	ldrh	r3, [r4, #12]
 800f514:	059b      	lsls	r3, r3, #22
 800f516:	d4dd      	bmi.n	800f4d4 <_fflush_r+0xc>
 800f518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f51a:	f000 f908 	bl	800f72e <__retarget_lock_release_recursive>
 800f51e:	e7d9      	b.n	800f4d4 <_fflush_r+0xc>
 800f520:	4b05      	ldr	r3, [pc, #20]	; (800f538 <_fflush_r+0x70>)
 800f522:	429c      	cmp	r4, r3
 800f524:	d101      	bne.n	800f52a <_fflush_r+0x62>
 800f526:	68ac      	ldr	r4, [r5, #8]
 800f528:	e7df      	b.n	800f4ea <_fflush_r+0x22>
 800f52a:	4b04      	ldr	r3, [pc, #16]	; (800f53c <_fflush_r+0x74>)
 800f52c:	429c      	cmp	r4, r3
 800f52e:	bf08      	it	eq
 800f530:	68ec      	ldreq	r4, [r5, #12]
 800f532:	e7da      	b.n	800f4ea <_fflush_r+0x22>
 800f534:	08010680 	.word	0x08010680
 800f538:	080106a0 	.word	0x080106a0
 800f53c:	08010660 	.word	0x08010660

0800f540 <std>:
 800f540:	2300      	movs	r3, #0
 800f542:	b510      	push	{r4, lr}
 800f544:	4604      	mov	r4, r0
 800f546:	e9c0 3300 	strd	r3, r3, [r0]
 800f54a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f54e:	6083      	str	r3, [r0, #8]
 800f550:	8181      	strh	r1, [r0, #12]
 800f552:	6643      	str	r3, [r0, #100]	; 0x64
 800f554:	81c2      	strh	r2, [r0, #14]
 800f556:	6183      	str	r3, [r0, #24]
 800f558:	4619      	mov	r1, r3
 800f55a:	2208      	movs	r2, #8
 800f55c:	305c      	adds	r0, #92	; 0x5c
 800f55e:	f7ff fd49 	bl	800eff4 <memset>
 800f562:	4b05      	ldr	r3, [pc, #20]	; (800f578 <std+0x38>)
 800f564:	6263      	str	r3, [r4, #36]	; 0x24
 800f566:	4b05      	ldr	r3, [pc, #20]	; (800f57c <std+0x3c>)
 800f568:	62a3      	str	r3, [r4, #40]	; 0x28
 800f56a:	4b05      	ldr	r3, [pc, #20]	; (800f580 <std+0x40>)
 800f56c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f56e:	4b05      	ldr	r3, [pc, #20]	; (800f584 <std+0x44>)
 800f570:	6224      	str	r4, [r4, #32]
 800f572:	6323      	str	r3, [r4, #48]	; 0x30
 800f574:	bd10      	pop	{r4, pc}
 800f576:	bf00      	nop
 800f578:	0800ff49 	.word	0x0800ff49
 800f57c:	0800ff6b 	.word	0x0800ff6b
 800f580:	0800ffa3 	.word	0x0800ffa3
 800f584:	0800ffc7 	.word	0x0800ffc7

0800f588 <_cleanup_r>:
 800f588:	4901      	ldr	r1, [pc, #4]	; (800f590 <_cleanup_r+0x8>)
 800f58a:	f000 b8af 	b.w	800f6ec <_fwalk_reent>
 800f58e:	bf00      	nop
 800f590:	0800f4c9 	.word	0x0800f4c9

0800f594 <__sfmoreglue>:
 800f594:	b570      	push	{r4, r5, r6, lr}
 800f596:	1e4a      	subs	r2, r1, #1
 800f598:	2568      	movs	r5, #104	; 0x68
 800f59a:	4355      	muls	r5, r2
 800f59c:	460e      	mov	r6, r1
 800f59e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f5a2:	f000 f979 	bl	800f898 <_malloc_r>
 800f5a6:	4604      	mov	r4, r0
 800f5a8:	b140      	cbz	r0, 800f5bc <__sfmoreglue+0x28>
 800f5aa:	2100      	movs	r1, #0
 800f5ac:	e9c0 1600 	strd	r1, r6, [r0]
 800f5b0:	300c      	adds	r0, #12
 800f5b2:	60a0      	str	r0, [r4, #8]
 800f5b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f5b8:	f7ff fd1c 	bl	800eff4 <memset>
 800f5bc:	4620      	mov	r0, r4
 800f5be:	bd70      	pop	{r4, r5, r6, pc}

0800f5c0 <__sfp_lock_acquire>:
 800f5c0:	4801      	ldr	r0, [pc, #4]	; (800f5c8 <__sfp_lock_acquire+0x8>)
 800f5c2:	f000 b8b3 	b.w	800f72c <__retarget_lock_acquire_recursive>
 800f5c6:	bf00      	nop
 800f5c8:	20009234 	.word	0x20009234

0800f5cc <__sfp_lock_release>:
 800f5cc:	4801      	ldr	r0, [pc, #4]	; (800f5d4 <__sfp_lock_release+0x8>)
 800f5ce:	f000 b8ae 	b.w	800f72e <__retarget_lock_release_recursive>
 800f5d2:	bf00      	nop
 800f5d4:	20009234 	.word	0x20009234

0800f5d8 <__sinit_lock_acquire>:
 800f5d8:	4801      	ldr	r0, [pc, #4]	; (800f5e0 <__sinit_lock_acquire+0x8>)
 800f5da:	f000 b8a7 	b.w	800f72c <__retarget_lock_acquire_recursive>
 800f5de:	bf00      	nop
 800f5e0:	2000922f 	.word	0x2000922f

0800f5e4 <__sinit_lock_release>:
 800f5e4:	4801      	ldr	r0, [pc, #4]	; (800f5ec <__sinit_lock_release+0x8>)
 800f5e6:	f000 b8a2 	b.w	800f72e <__retarget_lock_release_recursive>
 800f5ea:	bf00      	nop
 800f5ec:	2000922f 	.word	0x2000922f

0800f5f0 <__sinit>:
 800f5f0:	b510      	push	{r4, lr}
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	f7ff fff0 	bl	800f5d8 <__sinit_lock_acquire>
 800f5f8:	69a3      	ldr	r3, [r4, #24]
 800f5fa:	b11b      	cbz	r3, 800f604 <__sinit+0x14>
 800f5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f600:	f7ff bff0 	b.w	800f5e4 <__sinit_lock_release>
 800f604:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f608:	6523      	str	r3, [r4, #80]	; 0x50
 800f60a:	4b13      	ldr	r3, [pc, #76]	; (800f658 <__sinit+0x68>)
 800f60c:	4a13      	ldr	r2, [pc, #76]	; (800f65c <__sinit+0x6c>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	62a2      	str	r2, [r4, #40]	; 0x28
 800f612:	42a3      	cmp	r3, r4
 800f614:	bf04      	itt	eq
 800f616:	2301      	moveq	r3, #1
 800f618:	61a3      	streq	r3, [r4, #24]
 800f61a:	4620      	mov	r0, r4
 800f61c:	f000 f820 	bl	800f660 <__sfp>
 800f620:	6060      	str	r0, [r4, #4]
 800f622:	4620      	mov	r0, r4
 800f624:	f000 f81c 	bl	800f660 <__sfp>
 800f628:	60a0      	str	r0, [r4, #8]
 800f62a:	4620      	mov	r0, r4
 800f62c:	f000 f818 	bl	800f660 <__sfp>
 800f630:	2200      	movs	r2, #0
 800f632:	60e0      	str	r0, [r4, #12]
 800f634:	2104      	movs	r1, #4
 800f636:	6860      	ldr	r0, [r4, #4]
 800f638:	f7ff ff82 	bl	800f540 <std>
 800f63c:	68a0      	ldr	r0, [r4, #8]
 800f63e:	2201      	movs	r2, #1
 800f640:	2109      	movs	r1, #9
 800f642:	f7ff ff7d 	bl	800f540 <std>
 800f646:	68e0      	ldr	r0, [r4, #12]
 800f648:	2202      	movs	r2, #2
 800f64a:	2112      	movs	r1, #18
 800f64c:	f7ff ff78 	bl	800f540 <std>
 800f650:	2301      	movs	r3, #1
 800f652:	61a3      	str	r3, [r4, #24]
 800f654:	e7d2      	b.n	800f5fc <__sinit+0xc>
 800f656:	bf00      	nop
 800f658:	08010558 	.word	0x08010558
 800f65c:	0800f589 	.word	0x0800f589

0800f660 <__sfp>:
 800f660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f662:	4607      	mov	r7, r0
 800f664:	f7ff ffac 	bl	800f5c0 <__sfp_lock_acquire>
 800f668:	4b1e      	ldr	r3, [pc, #120]	; (800f6e4 <__sfp+0x84>)
 800f66a:	681e      	ldr	r6, [r3, #0]
 800f66c:	69b3      	ldr	r3, [r6, #24]
 800f66e:	b913      	cbnz	r3, 800f676 <__sfp+0x16>
 800f670:	4630      	mov	r0, r6
 800f672:	f7ff ffbd 	bl	800f5f0 <__sinit>
 800f676:	3648      	adds	r6, #72	; 0x48
 800f678:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f67c:	3b01      	subs	r3, #1
 800f67e:	d503      	bpl.n	800f688 <__sfp+0x28>
 800f680:	6833      	ldr	r3, [r6, #0]
 800f682:	b30b      	cbz	r3, 800f6c8 <__sfp+0x68>
 800f684:	6836      	ldr	r6, [r6, #0]
 800f686:	e7f7      	b.n	800f678 <__sfp+0x18>
 800f688:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f68c:	b9d5      	cbnz	r5, 800f6c4 <__sfp+0x64>
 800f68e:	4b16      	ldr	r3, [pc, #88]	; (800f6e8 <__sfp+0x88>)
 800f690:	60e3      	str	r3, [r4, #12]
 800f692:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f696:	6665      	str	r5, [r4, #100]	; 0x64
 800f698:	f000 f847 	bl	800f72a <__retarget_lock_init_recursive>
 800f69c:	f7ff ff96 	bl	800f5cc <__sfp_lock_release>
 800f6a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f6a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f6a8:	6025      	str	r5, [r4, #0]
 800f6aa:	61a5      	str	r5, [r4, #24]
 800f6ac:	2208      	movs	r2, #8
 800f6ae:	4629      	mov	r1, r5
 800f6b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f6b4:	f7ff fc9e 	bl	800eff4 <memset>
 800f6b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f6bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6c4:	3468      	adds	r4, #104	; 0x68
 800f6c6:	e7d9      	b.n	800f67c <__sfp+0x1c>
 800f6c8:	2104      	movs	r1, #4
 800f6ca:	4638      	mov	r0, r7
 800f6cc:	f7ff ff62 	bl	800f594 <__sfmoreglue>
 800f6d0:	4604      	mov	r4, r0
 800f6d2:	6030      	str	r0, [r6, #0]
 800f6d4:	2800      	cmp	r0, #0
 800f6d6:	d1d5      	bne.n	800f684 <__sfp+0x24>
 800f6d8:	f7ff ff78 	bl	800f5cc <__sfp_lock_release>
 800f6dc:	230c      	movs	r3, #12
 800f6de:	603b      	str	r3, [r7, #0]
 800f6e0:	e7ee      	b.n	800f6c0 <__sfp+0x60>
 800f6e2:	bf00      	nop
 800f6e4:	08010558 	.word	0x08010558
 800f6e8:	ffff0001 	.word	0xffff0001

0800f6ec <_fwalk_reent>:
 800f6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6f0:	4606      	mov	r6, r0
 800f6f2:	4688      	mov	r8, r1
 800f6f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f6f8:	2700      	movs	r7, #0
 800f6fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f6fe:	f1b9 0901 	subs.w	r9, r9, #1
 800f702:	d505      	bpl.n	800f710 <_fwalk_reent+0x24>
 800f704:	6824      	ldr	r4, [r4, #0]
 800f706:	2c00      	cmp	r4, #0
 800f708:	d1f7      	bne.n	800f6fa <_fwalk_reent+0xe>
 800f70a:	4638      	mov	r0, r7
 800f70c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f710:	89ab      	ldrh	r3, [r5, #12]
 800f712:	2b01      	cmp	r3, #1
 800f714:	d907      	bls.n	800f726 <_fwalk_reent+0x3a>
 800f716:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f71a:	3301      	adds	r3, #1
 800f71c:	d003      	beq.n	800f726 <_fwalk_reent+0x3a>
 800f71e:	4629      	mov	r1, r5
 800f720:	4630      	mov	r0, r6
 800f722:	47c0      	blx	r8
 800f724:	4307      	orrs	r7, r0
 800f726:	3568      	adds	r5, #104	; 0x68
 800f728:	e7e9      	b.n	800f6fe <_fwalk_reent+0x12>

0800f72a <__retarget_lock_init_recursive>:
 800f72a:	4770      	bx	lr

0800f72c <__retarget_lock_acquire_recursive>:
 800f72c:	4770      	bx	lr

0800f72e <__retarget_lock_release_recursive>:
 800f72e:	4770      	bx	lr

0800f730 <__swhatbuf_r>:
 800f730:	b570      	push	{r4, r5, r6, lr}
 800f732:	460e      	mov	r6, r1
 800f734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f738:	2900      	cmp	r1, #0
 800f73a:	b096      	sub	sp, #88	; 0x58
 800f73c:	4614      	mov	r4, r2
 800f73e:	461d      	mov	r5, r3
 800f740:	da07      	bge.n	800f752 <__swhatbuf_r+0x22>
 800f742:	2300      	movs	r3, #0
 800f744:	602b      	str	r3, [r5, #0]
 800f746:	89b3      	ldrh	r3, [r6, #12]
 800f748:	061a      	lsls	r2, r3, #24
 800f74a:	d410      	bmi.n	800f76e <__swhatbuf_r+0x3e>
 800f74c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f750:	e00e      	b.n	800f770 <__swhatbuf_r+0x40>
 800f752:	466a      	mov	r2, sp
 800f754:	f000 fc5e 	bl	8010014 <_fstat_r>
 800f758:	2800      	cmp	r0, #0
 800f75a:	dbf2      	blt.n	800f742 <__swhatbuf_r+0x12>
 800f75c:	9a01      	ldr	r2, [sp, #4]
 800f75e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f762:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f766:	425a      	negs	r2, r3
 800f768:	415a      	adcs	r2, r3
 800f76a:	602a      	str	r2, [r5, #0]
 800f76c:	e7ee      	b.n	800f74c <__swhatbuf_r+0x1c>
 800f76e:	2340      	movs	r3, #64	; 0x40
 800f770:	2000      	movs	r0, #0
 800f772:	6023      	str	r3, [r4, #0]
 800f774:	b016      	add	sp, #88	; 0x58
 800f776:	bd70      	pop	{r4, r5, r6, pc}

0800f778 <__smakebuf_r>:
 800f778:	898b      	ldrh	r3, [r1, #12]
 800f77a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f77c:	079d      	lsls	r5, r3, #30
 800f77e:	4606      	mov	r6, r0
 800f780:	460c      	mov	r4, r1
 800f782:	d507      	bpl.n	800f794 <__smakebuf_r+0x1c>
 800f784:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f788:	6023      	str	r3, [r4, #0]
 800f78a:	6123      	str	r3, [r4, #16]
 800f78c:	2301      	movs	r3, #1
 800f78e:	6163      	str	r3, [r4, #20]
 800f790:	b002      	add	sp, #8
 800f792:	bd70      	pop	{r4, r5, r6, pc}
 800f794:	ab01      	add	r3, sp, #4
 800f796:	466a      	mov	r2, sp
 800f798:	f7ff ffca 	bl	800f730 <__swhatbuf_r>
 800f79c:	9900      	ldr	r1, [sp, #0]
 800f79e:	4605      	mov	r5, r0
 800f7a0:	4630      	mov	r0, r6
 800f7a2:	f000 f879 	bl	800f898 <_malloc_r>
 800f7a6:	b948      	cbnz	r0, 800f7bc <__smakebuf_r+0x44>
 800f7a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7ac:	059a      	lsls	r2, r3, #22
 800f7ae:	d4ef      	bmi.n	800f790 <__smakebuf_r+0x18>
 800f7b0:	f023 0303 	bic.w	r3, r3, #3
 800f7b4:	f043 0302 	orr.w	r3, r3, #2
 800f7b8:	81a3      	strh	r3, [r4, #12]
 800f7ba:	e7e3      	b.n	800f784 <__smakebuf_r+0xc>
 800f7bc:	4b0d      	ldr	r3, [pc, #52]	; (800f7f4 <__smakebuf_r+0x7c>)
 800f7be:	62b3      	str	r3, [r6, #40]	; 0x28
 800f7c0:	89a3      	ldrh	r3, [r4, #12]
 800f7c2:	6020      	str	r0, [r4, #0]
 800f7c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7c8:	81a3      	strh	r3, [r4, #12]
 800f7ca:	9b00      	ldr	r3, [sp, #0]
 800f7cc:	6163      	str	r3, [r4, #20]
 800f7ce:	9b01      	ldr	r3, [sp, #4]
 800f7d0:	6120      	str	r0, [r4, #16]
 800f7d2:	b15b      	cbz	r3, 800f7ec <__smakebuf_r+0x74>
 800f7d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7d8:	4630      	mov	r0, r6
 800f7da:	f000 fc2d 	bl	8010038 <_isatty_r>
 800f7de:	b128      	cbz	r0, 800f7ec <__smakebuf_r+0x74>
 800f7e0:	89a3      	ldrh	r3, [r4, #12]
 800f7e2:	f023 0303 	bic.w	r3, r3, #3
 800f7e6:	f043 0301 	orr.w	r3, r3, #1
 800f7ea:	81a3      	strh	r3, [r4, #12]
 800f7ec:	89a0      	ldrh	r0, [r4, #12]
 800f7ee:	4305      	orrs	r5, r0
 800f7f0:	81a5      	strh	r5, [r4, #12]
 800f7f2:	e7cd      	b.n	800f790 <__smakebuf_r+0x18>
 800f7f4:	0800f589 	.word	0x0800f589

0800f7f8 <_free_r>:
 800f7f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f7fa:	2900      	cmp	r1, #0
 800f7fc:	d048      	beq.n	800f890 <_free_r+0x98>
 800f7fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f802:	9001      	str	r0, [sp, #4]
 800f804:	2b00      	cmp	r3, #0
 800f806:	f1a1 0404 	sub.w	r4, r1, #4
 800f80a:	bfb8      	it	lt
 800f80c:	18e4      	addlt	r4, r4, r3
 800f80e:	f000 fc35 	bl	801007c <__malloc_lock>
 800f812:	4a20      	ldr	r2, [pc, #128]	; (800f894 <_free_r+0x9c>)
 800f814:	9801      	ldr	r0, [sp, #4]
 800f816:	6813      	ldr	r3, [r2, #0]
 800f818:	4615      	mov	r5, r2
 800f81a:	b933      	cbnz	r3, 800f82a <_free_r+0x32>
 800f81c:	6063      	str	r3, [r4, #4]
 800f81e:	6014      	str	r4, [r2, #0]
 800f820:	b003      	add	sp, #12
 800f822:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f826:	f000 bc2f 	b.w	8010088 <__malloc_unlock>
 800f82a:	42a3      	cmp	r3, r4
 800f82c:	d90b      	bls.n	800f846 <_free_r+0x4e>
 800f82e:	6821      	ldr	r1, [r4, #0]
 800f830:	1862      	adds	r2, r4, r1
 800f832:	4293      	cmp	r3, r2
 800f834:	bf04      	itt	eq
 800f836:	681a      	ldreq	r2, [r3, #0]
 800f838:	685b      	ldreq	r3, [r3, #4]
 800f83a:	6063      	str	r3, [r4, #4]
 800f83c:	bf04      	itt	eq
 800f83e:	1852      	addeq	r2, r2, r1
 800f840:	6022      	streq	r2, [r4, #0]
 800f842:	602c      	str	r4, [r5, #0]
 800f844:	e7ec      	b.n	800f820 <_free_r+0x28>
 800f846:	461a      	mov	r2, r3
 800f848:	685b      	ldr	r3, [r3, #4]
 800f84a:	b10b      	cbz	r3, 800f850 <_free_r+0x58>
 800f84c:	42a3      	cmp	r3, r4
 800f84e:	d9fa      	bls.n	800f846 <_free_r+0x4e>
 800f850:	6811      	ldr	r1, [r2, #0]
 800f852:	1855      	adds	r5, r2, r1
 800f854:	42a5      	cmp	r5, r4
 800f856:	d10b      	bne.n	800f870 <_free_r+0x78>
 800f858:	6824      	ldr	r4, [r4, #0]
 800f85a:	4421      	add	r1, r4
 800f85c:	1854      	adds	r4, r2, r1
 800f85e:	42a3      	cmp	r3, r4
 800f860:	6011      	str	r1, [r2, #0]
 800f862:	d1dd      	bne.n	800f820 <_free_r+0x28>
 800f864:	681c      	ldr	r4, [r3, #0]
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	6053      	str	r3, [r2, #4]
 800f86a:	4421      	add	r1, r4
 800f86c:	6011      	str	r1, [r2, #0]
 800f86e:	e7d7      	b.n	800f820 <_free_r+0x28>
 800f870:	d902      	bls.n	800f878 <_free_r+0x80>
 800f872:	230c      	movs	r3, #12
 800f874:	6003      	str	r3, [r0, #0]
 800f876:	e7d3      	b.n	800f820 <_free_r+0x28>
 800f878:	6825      	ldr	r5, [r4, #0]
 800f87a:	1961      	adds	r1, r4, r5
 800f87c:	428b      	cmp	r3, r1
 800f87e:	bf04      	itt	eq
 800f880:	6819      	ldreq	r1, [r3, #0]
 800f882:	685b      	ldreq	r3, [r3, #4]
 800f884:	6063      	str	r3, [r4, #4]
 800f886:	bf04      	itt	eq
 800f888:	1949      	addeq	r1, r1, r5
 800f88a:	6021      	streq	r1, [r4, #0]
 800f88c:	6054      	str	r4, [r2, #4]
 800f88e:	e7c7      	b.n	800f820 <_free_r+0x28>
 800f890:	b003      	add	sp, #12
 800f892:	bd30      	pop	{r4, r5, pc}
 800f894:	200089ac 	.word	0x200089ac

0800f898 <_malloc_r>:
 800f898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f89a:	1ccd      	adds	r5, r1, #3
 800f89c:	f025 0503 	bic.w	r5, r5, #3
 800f8a0:	3508      	adds	r5, #8
 800f8a2:	2d0c      	cmp	r5, #12
 800f8a4:	bf38      	it	cc
 800f8a6:	250c      	movcc	r5, #12
 800f8a8:	2d00      	cmp	r5, #0
 800f8aa:	4606      	mov	r6, r0
 800f8ac:	db01      	blt.n	800f8b2 <_malloc_r+0x1a>
 800f8ae:	42a9      	cmp	r1, r5
 800f8b0:	d903      	bls.n	800f8ba <_malloc_r+0x22>
 800f8b2:	230c      	movs	r3, #12
 800f8b4:	6033      	str	r3, [r6, #0]
 800f8b6:	2000      	movs	r0, #0
 800f8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8ba:	f000 fbdf 	bl	801007c <__malloc_lock>
 800f8be:	4921      	ldr	r1, [pc, #132]	; (800f944 <_malloc_r+0xac>)
 800f8c0:	680a      	ldr	r2, [r1, #0]
 800f8c2:	4614      	mov	r4, r2
 800f8c4:	b99c      	cbnz	r4, 800f8ee <_malloc_r+0x56>
 800f8c6:	4f20      	ldr	r7, [pc, #128]	; (800f948 <_malloc_r+0xb0>)
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	b923      	cbnz	r3, 800f8d6 <_malloc_r+0x3e>
 800f8cc:	4621      	mov	r1, r4
 800f8ce:	4630      	mov	r0, r6
 800f8d0:	f000 fb2a 	bl	800ff28 <_sbrk_r>
 800f8d4:	6038      	str	r0, [r7, #0]
 800f8d6:	4629      	mov	r1, r5
 800f8d8:	4630      	mov	r0, r6
 800f8da:	f000 fb25 	bl	800ff28 <_sbrk_r>
 800f8de:	1c43      	adds	r3, r0, #1
 800f8e0:	d123      	bne.n	800f92a <_malloc_r+0x92>
 800f8e2:	230c      	movs	r3, #12
 800f8e4:	6033      	str	r3, [r6, #0]
 800f8e6:	4630      	mov	r0, r6
 800f8e8:	f000 fbce 	bl	8010088 <__malloc_unlock>
 800f8ec:	e7e3      	b.n	800f8b6 <_malloc_r+0x1e>
 800f8ee:	6823      	ldr	r3, [r4, #0]
 800f8f0:	1b5b      	subs	r3, r3, r5
 800f8f2:	d417      	bmi.n	800f924 <_malloc_r+0x8c>
 800f8f4:	2b0b      	cmp	r3, #11
 800f8f6:	d903      	bls.n	800f900 <_malloc_r+0x68>
 800f8f8:	6023      	str	r3, [r4, #0]
 800f8fa:	441c      	add	r4, r3
 800f8fc:	6025      	str	r5, [r4, #0]
 800f8fe:	e004      	b.n	800f90a <_malloc_r+0x72>
 800f900:	6863      	ldr	r3, [r4, #4]
 800f902:	42a2      	cmp	r2, r4
 800f904:	bf0c      	ite	eq
 800f906:	600b      	streq	r3, [r1, #0]
 800f908:	6053      	strne	r3, [r2, #4]
 800f90a:	4630      	mov	r0, r6
 800f90c:	f000 fbbc 	bl	8010088 <__malloc_unlock>
 800f910:	f104 000b 	add.w	r0, r4, #11
 800f914:	1d23      	adds	r3, r4, #4
 800f916:	f020 0007 	bic.w	r0, r0, #7
 800f91a:	1ac2      	subs	r2, r0, r3
 800f91c:	d0cc      	beq.n	800f8b8 <_malloc_r+0x20>
 800f91e:	1a1b      	subs	r3, r3, r0
 800f920:	50a3      	str	r3, [r4, r2]
 800f922:	e7c9      	b.n	800f8b8 <_malloc_r+0x20>
 800f924:	4622      	mov	r2, r4
 800f926:	6864      	ldr	r4, [r4, #4]
 800f928:	e7cc      	b.n	800f8c4 <_malloc_r+0x2c>
 800f92a:	1cc4      	adds	r4, r0, #3
 800f92c:	f024 0403 	bic.w	r4, r4, #3
 800f930:	42a0      	cmp	r0, r4
 800f932:	d0e3      	beq.n	800f8fc <_malloc_r+0x64>
 800f934:	1a21      	subs	r1, r4, r0
 800f936:	4630      	mov	r0, r6
 800f938:	f000 faf6 	bl	800ff28 <_sbrk_r>
 800f93c:	3001      	adds	r0, #1
 800f93e:	d1dd      	bne.n	800f8fc <_malloc_r+0x64>
 800f940:	e7cf      	b.n	800f8e2 <_malloc_r+0x4a>
 800f942:	bf00      	nop
 800f944:	200089ac 	.word	0x200089ac
 800f948:	200089b0 	.word	0x200089b0

0800f94c <__sfputc_r>:
 800f94c:	6893      	ldr	r3, [r2, #8]
 800f94e:	3b01      	subs	r3, #1
 800f950:	2b00      	cmp	r3, #0
 800f952:	b410      	push	{r4}
 800f954:	6093      	str	r3, [r2, #8]
 800f956:	da08      	bge.n	800f96a <__sfputc_r+0x1e>
 800f958:	6994      	ldr	r4, [r2, #24]
 800f95a:	42a3      	cmp	r3, r4
 800f95c:	db01      	blt.n	800f962 <__sfputc_r+0x16>
 800f95e:	290a      	cmp	r1, #10
 800f960:	d103      	bne.n	800f96a <__sfputc_r+0x1e>
 800f962:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f966:	f7ff bc69 	b.w	800f23c <__swbuf_r>
 800f96a:	6813      	ldr	r3, [r2, #0]
 800f96c:	1c58      	adds	r0, r3, #1
 800f96e:	6010      	str	r0, [r2, #0]
 800f970:	7019      	strb	r1, [r3, #0]
 800f972:	4608      	mov	r0, r1
 800f974:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f978:	4770      	bx	lr

0800f97a <__sfputs_r>:
 800f97a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f97c:	4606      	mov	r6, r0
 800f97e:	460f      	mov	r7, r1
 800f980:	4614      	mov	r4, r2
 800f982:	18d5      	adds	r5, r2, r3
 800f984:	42ac      	cmp	r4, r5
 800f986:	d101      	bne.n	800f98c <__sfputs_r+0x12>
 800f988:	2000      	movs	r0, #0
 800f98a:	e007      	b.n	800f99c <__sfputs_r+0x22>
 800f98c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f990:	463a      	mov	r2, r7
 800f992:	4630      	mov	r0, r6
 800f994:	f7ff ffda 	bl	800f94c <__sfputc_r>
 800f998:	1c43      	adds	r3, r0, #1
 800f99a:	d1f3      	bne.n	800f984 <__sfputs_r+0xa>
 800f99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f9a0 <_vfiprintf_r>:
 800f9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a4:	460d      	mov	r5, r1
 800f9a6:	b09d      	sub	sp, #116	; 0x74
 800f9a8:	4614      	mov	r4, r2
 800f9aa:	4698      	mov	r8, r3
 800f9ac:	4606      	mov	r6, r0
 800f9ae:	b118      	cbz	r0, 800f9b8 <_vfiprintf_r+0x18>
 800f9b0:	6983      	ldr	r3, [r0, #24]
 800f9b2:	b90b      	cbnz	r3, 800f9b8 <_vfiprintf_r+0x18>
 800f9b4:	f7ff fe1c 	bl	800f5f0 <__sinit>
 800f9b8:	4b89      	ldr	r3, [pc, #548]	; (800fbe0 <_vfiprintf_r+0x240>)
 800f9ba:	429d      	cmp	r5, r3
 800f9bc:	d11b      	bne.n	800f9f6 <_vfiprintf_r+0x56>
 800f9be:	6875      	ldr	r5, [r6, #4]
 800f9c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9c2:	07d9      	lsls	r1, r3, #31
 800f9c4:	d405      	bmi.n	800f9d2 <_vfiprintf_r+0x32>
 800f9c6:	89ab      	ldrh	r3, [r5, #12]
 800f9c8:	059a      	lsls	r2, r3, #22
 800f9ca:	d402      	bmi.n	800f9d2 <_vfiprintf_r+0x32>
 800f9cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9ce:	f7ff fead 	bl	800f72c <__retarget_lock_acquire_recursive>
 800f9d2:	89ab      	ldrh	r3, [r5, #12]
 800f9d4:	071b      	lsls	r3, r3, #28
 800f9d6:	d501      	bpl.n	800f9dc <_vfiprintf_r+0x3c>
 800f9d8:	692b      	ldr	r3, [r5, #16]
 800f9da:	b9eb      	cbnz	r3, 800fa18 <_vfiprintf_r+0x78>
 800f9dc:	4629      	mov	r1, r5
 800f9de:	4630      	mov	r0, r6
 800f9e0:	f7ff fc7e 	bl	800f2e0 <__swsetup_r>
 800f9e4:	b1c0      	cbz	r0, 800fa18 <_vfiprintf_r+0x78>
 800f9e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9e8:	07dc      	lsls	r4, r3, #31
 800f9ea:	d50e      	bpl.n	800fa0a <_vfiprintf_r+0x6a>
 800f9ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9f0:	b01d      	add	sp, #116	; 0x74
 800f9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9f6:	4b7b      	ldr	r3, [pc, #492]	; (800fbe4 <_vfiprintf_r+0x244>)
 800f9f8:	429d      	cmp	r5, r3
 800f9fa:	d101      	bne.n	800fa00 <_vfiprintf_r+0x60>
 800f9fc:	68b5      	ldr	r5, [r6, #8]
 800f9fe:	e7df      	b.n	800f9c0 <_vfiprintf_r+0x20>
 800fa00:	4b79      	ldr	r3, [pc, #484]	; (800fbe8 <_vfiprintf_r+0x248>)
 800fa02:	429d      	cmp	r5, r3
 800fa04:	bf08      	it	eq
 800fa06:	68f5      	ldreq	r5, [r6, #12]
 800fa08:	e7da      	b.n	800f9c0 <_vfiprintf_r+0x20>
 800fa0a:	89ab      	ldrh	r3, [r5, #12]
 800fa0c:	0598      	lsls	r0, r3, #22
 800fa0e:	d4ed      	bmi.n	800f9ec <_vfiprintf_r+0x4c>
 800fa10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa12:	f7ff fe8c 	bl	800f72e <__retarget_lock_release_recursive>
 800fa16:	e7e9      	b.n	800f9ec <_vfiprintf_r+0x4c>
 800fa18:	2300      	movs	r3, #0
 800fa1a:	9309      	str	r3, [sp, #36]	; 0x24
 800fa1c:	2320      	movs	r3, #32
 800fa1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa22:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa26:	2330      	movs	r3, #48	; 0x30
 800fa28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fbec <_vfiprintf_r+0x24c>
 800fa2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa30:	f04f 0901 	mov.w	r9, #1
 800fa34:	4623      	mov	r3, r4
 800fa36:	469a      	mov	sl, r3
 800fa38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa3c:	b10a      	cbz	r2, 800fa42 <_vfiprintf_r+0xa2>
 800fa3e:	2a25      	cmp	r2, #37	; 0x25
 800fa40:	d1f9      	bne.n	800fa36 <_vfiprintf_r+0x96>
 800fa42:	ebba 0b04 	subs.w	fp, sl, r4
 800fa46:	d00b      	beq.n	800fa60 <_vfiprintf_r+0xc0>
 800fa48:	465b      	mov	r3, fp
 800fa4a:	4622      	mov	r2, r4
 800fa4c:	4629      	mov	r1, r5
 800fa4e:	4630      	mov	r0, r6
 800fa50:	f7ff ff93 	bl	800f97a <__sfputs_r>
 800fa54:	3001      	adds	r0, #1
 800fa56:	f000 80aa 	beq.w	800fbae <_vfiprintf_r+0x20e>
 800fa5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa5c:	445a      	add	r2, fp
 800fa5e:	9209      	str	r2, [sp, #36]	; 0x24
 800fa60:	f89a 3000 	ldrb.w	r3, [sl]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	f000 80a2 	beq.w	800fbae <_vfiprintf_r+0x20e>
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa74:	f10a 0a01 	add.w	sl, sl, #1
 800fa78:	9304      	str	r3, [sp, #16]
 800fa7a:	9307      	str	r3, [sp, #28]
 800fa7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa80:	931a      	str	r3, [sp, #104]	; 0x68
 800fa82:	4654      	mov	r4, sl
 800fa84:	2205      	movs	r2, #5
 800fa86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa8a:	4858      	ldr	r0, [pc, #352]	; (800fbec <_vfiprintf_r+0x24c>)
 800fa8c:	f7f0 fba8 	bl	80001e0 <memchr>
 800fa90:	9a04      	ldr	r2, [sp, #16]
 800fa92:	b9d8      	cbnz	r0, 800facc <_vfiprintf_r+0x12c>
 800fa94:	06d1      	lsls	r1, r2, #27
 800fa96:	bf44      	itt	mi
 800fa98:	2320      	movmi	r3, #32
 800fa9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa9e:	0713      	lsls	r3, r2, #28
 800faa0:	bf44      	itt	mi
 800faa2:	232b      	movmi	r3, #43	; 0x2b
 800faa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800faa8:	f89a 3000 	ldrb.w	r3, [sl]
 800faac:	2b2a      	cmp	r3, #42	; 0x2a
 800faae:	d015      	beq.n	800fadc <_vfiprintf_r+0x13c>
 800fab0:	9a07      	ldr	r2, [sp, #28]
 800fab2:	4654      	mov	r4, sl
 800fab4:	2000      	movs	r0, #0
 800fab6:	f04f 0c0a 	mov.w	ip, #10
 800faba:	4621      	mov	r1, r4
 800fabc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fac0:	3b30      	subs	r3, #48	; 0x30
 800fac2:	2b09      	cmp	r3, #9
 800fac4:	d94e      	bls.n	800fb64 <_vfiprintf_r+0x1c4>
 800fac6:	b1b0      	cbz	r0, 800faf6 <_vfiprintf_r+0x156>
 800fac8:	9207      	str	r2, [sp, #28]
 800faca:	e014      	b.n	800faf6 <_vfiprintf_r+0x156>
 800facc:	eba0 0308 	sub.w	r3, r0, r8
 800fad0:	fa09 f303 	lsl.w	r3, r9, r3
 800fad4:	4313      	orrs	r3, r2
 800fad6:	9304      	str	r3, [sp, #16]
 800fad8:	46a2      	mov	sl, r4
 800fada:	e7d2      	b.n	800fa82 <_vfiprintf_r+0xe2>
 800fadc:	9b03      	ldr	r3, [sp, #12]
 800fade:	1d19      	adds	r1, r3, #4
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	9103      	str	r1, [sp, #12]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	bfbb      	ittet	lt
 800fae8:	425b      	neglt	r3, r3
 800faea:	f042 0202 	orrlt.w	r2, r2, #2
 800faee:	9307      	strge	r3, [sp, #28]
 800faf0:	9307      	strlt	r3, [sp, #28]
 800faf2:	bfb8      	it	lt
 800faf4:	9204      	strlt	r2, [sp, #16]
 800faf6:	7823      	ldrb	r3, [r4, #0]
 800faf8:	2b2e      	cmp	r3, #46	; 0x2e
 800fafa:	d10c      	bne.n	800fb16 <_vfiprintf_r+0x176>
 800fafc:	7863      	ldrb	r3, [r4, #1]
 800fafe:	2b2a      	cmp	r3, #42	; 0x2a
 800fb00:	d135      	bne.n	800fb6e <_vfiprintf_r+0x1ce>
 800fb02:	9b03      	ldr	r3, [sp, #12]
 800fb04:	1d1a      	adds	r2, r3, #4
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	9203      	str	r2, [sp, #12]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	bfb8      	it	lt
 800fb0e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fb12:	3402      	adds	r4, #2
 800fb14:	9305      	str	r3, [sp, #20]
 800fb16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fbfc <_vfiprintf_r+0x25c>
 800fb1a:	7821      	ldrb	r1, [r4, #0]
 800fb1c:	2203      	movs	r2, #3
 800fb1e:	4650      	mov	r0, sl
 800fb20:	f7f0 fb5e 	bl	80001e0 <memchr>
 800fb24:	b140      	cbz	r0, 800fb38 <_vfiprintf_r+0x198>
 800fb26:	2340      	movs	r3, #64	; 0x40
 800fb28:	eba0 000a 	sub.w	r0, r0, sl
 800fb2c:	fa03 f000 	lsl.w	r0, r3, r0
 800fb30:	9b04      	ldr	r3, [sp, #16]
 800fb32:	4303      	orrs	r3, r0
 800fb34:	3401      	adds	r4, #1
 800fb36:	9304      	str	r3, [sp, #16]
 800fb38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb3c:	482c      	ldr	r0, [pc, #176]	; (800fbf0 <_vfiprintf_r+0x250>)
 800fb3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb42:	2206      	movs	r2, #6
 800fb44:	f7f0 fb4c 	bl	80001e0 <memchr>
 800fb48:	2800      	cmp	r0, #0
 800fb4a:	d03f      	beq.n	800fbcc <_vfiprintf_r+0x22c>
 800fb4c:	4b29      	ldr	r3, [pc, #164]	; (800fbf4 <_vfiprintf_r+0x254>)
 800fb4e:	bb1b      	cbnz	r3, 800fb98 <_vfiprintf_r+0x1f8>
 800fb50:	9b03      	ldr	r3, [sp, #12]
 800fb52:	3307      	adds	r3, #7
 800fb54:	f023 0307 	bic.w	r3, r3, #7
 800fb58:	3308      	adds	r3, #8
 800fb5a:	9303      	str	r3, [sp, #12]
 800fb5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb5e:	443b      	add	r3, r7
 800fb60:	9309      	str	r3, [sp, #36]	; 0x24
 800fb62:	e767      	b.n	800fa34 <_vfiprintf_r+0x94>
 800fb64:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb68:	460c      	mov	r4, r1
 800fb6a:	2001      	movs	r0, #1
 800fb6c:	e7a5      	b.n	800faba <_vfiprintf_r+0x11a>
 800fb6e:	2300      	movs	r3, #0
 800fb70:	3401      	adds	r4, #1
 800fb72:	9305      	str	r3, [sp, #20]
 800fb74:	4619      	mov	r1, r3
 800fb76:	f04f 0c0a 	mov.w	ip, #10
 800fb7a:	4620      	mov	r0, r4
 800fb7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb80:	3a30      	subs	r2, #48	; 0x30
 800fb82:	2a09      	cmp	r2, #9
 800fb84:	d903      	bls.n	800fb8e <_vfiprintf_r+0x1ee>
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d0c5      	beq.n	800fb16 <_vfiprintf_r+0x176>
 800fb8a:	9105      	str	r1, [sp, #20]
 800fb8c:	e7c3      	b.n	800fb16 <_vfiprintf_r+0x176>
 800fb8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb92:	4604      	mov	r4, r0
 800fb94:	2301      	movs	r3, #1
 800fb96:	e7f0      	b.n	800fb7a <_vfiprintf_r+0x1da>
 800fb98:	ab03      	add	r3, sp, #12
 800fb9a:	9300      	str	r3, [sp, #0]
 800fb9c:	462a      	mov	r2, r5
 800fb9e:	4b16      	ldr	r3, [pc, #88]	; (800fbf8 <_vfiprintf_r+0x258>)
 800fba0:	a904      	add	r1, sp, #16
 800fba2:	4630      	mov	r0, r6
 800fba4:	f3af 8000 	nop.w
 800fba8:	4607      	mov	r7, r0
 800fbaa:	1c78      	adds	r0, r7, #1
 800fbac:	d1d6      	bne.n	800fb5c <_vfiprintf_r+0x1bc>
 800fbae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbb0:	07d9      	lsls	r1, r3, #31
 800fbb2:	d405      	bmi.n	800fbc0 <_vfiprintf_r+0x220>
 800fbb4:	89ab      	ldrh	r3, [r5, #12]
 800fbb6:	059a      	lsls	r2, r3, #22
 800fbb8:	d402      	bmi.n	800fbc0 <_vfiprintf_r+0x220>
 800fbba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbbc:	f7ff fdb7 	bl	800f72e <__retarget_lock_release_recursive>
 800fbc0:	89ab      	ldrh	r3, [r5, #12]
 800fbc2:	065b      	lsls	r3, r3, #25
 800fbc4:	f53f af12 	bmi.w	800f9ec <_vfiprintf_r+0x4c>
 800fbc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fbca:	e711      	b.n	800f9f0 <_vfiprintf_r+0x50>
 800fbcc:	ab03      	add	r3, sp, #12
 800fbce:	9300      	str	r3, [sp, #0]
 800fbd0:	462a      	mov	r2, r5
 800fbd2:	4b09      	ldr	r3, [pc, #36]	; (800fbf8 <_vfiprintf_r+0x258>)
 800fbd4:	a904      	add	r1, sp, #16
 800fbd6:	4630      	mov	r0, r6
 800fbd8:	f000 f880 	bl	800fcdc <_printf_i>
 800fbdc:	e7e4      	b.n	800fba8 <_vfiprintf_r+0x208>
 800fbde:	bf00      	nop
 800fbe0:	08010680 	.word	0x08010680
 800fbe4:	080106a0 	.word	0x080106a0
 800fbe8:	08010660 	.word	0x08010660
 800fbec:	080106c0 	.word	0x080106c0
 800fbf0:	080106ca 	.word	0x080106ca
 800fbf4:	00000000 	.word	0x00000000
 800fbf8:	0800f97b 	.word	0x0800f97b
 800fbfc:	080106c6 	.word	0x080106c6

0800fc00 <_printf_common>:
 800fc00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc04:	4616      	mov	r6, r2
 800fc06:	4699      	mov	r9, r3
 800fc08:	688a      	ldr	r2, [r1, #8]
 800fc0a:	690b      	ldr	r3, [r1, #16]
 800fc0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc10:	4293      	cmp	r3, r2
 800fc12:	bfb8      	it	lt
 800fc14:	4613      	movlt	r3, r2
 800fc16:	6033      	str	r3, [r6, #0]
 800fc18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fc1c:	4607      	mov	r7, r0
 800fc1e:	460c      	mov	r4, r1
 800fc20:	b10a      	cbz	r2, 800fc26 <_printf_common+0x26>
 800fc22:	3301      	adds	r3, #1
 800fc24:	6033      	str	r3, [r6, #0]
 800fc26:	6823      	ldr	r3, [r4, #0]
 800fc28:	0699      	lsls	r1, r3, #26
 800fc2a:	bf42      	ittt	mi
 800fc2c:	6833      	ldrmi	r3, [r6, #0]
 800fc2e:	3302      	addmi	r3, #2
 800fc30:	6033      	strmi	r3, [r6, #0]
 800fc32:	6825      	ldr	r5, [r4, #0]
 800fc34:	f015 0506 	ands.w	r5, r5, #6
 800fc38:	d106      	bne.n	800fc48 <_printf_common+0x48>
 800fc3a:	f104 0a19 	add.w	sl, r4, #25
 800fc3e:	68e3      	ldr	r3, [r4, #12]
 800fc40:	6832      	ldr	r2, [r6, #0]
 800fc42:	1a9b      	subs	r3, r3, r2
 800fc44:	42ab      	cmp	r3, r5
 800fc46:	dc26      	bgt.n	800fc96 <_printf_common+0x96>
 800fc48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fc4c:	1e13      	subs	r3, r2, #0
 800fc4e:	6822      	ldr	r2, [r4, #0]
 800fc50:	bf18      	it	ne
 800fc52:	2301      	movne	r3, #1
 800fc54:	0692      	lsls	r2, r2, #26
 800fc56:	d42b      	bmi.n	800fcb0 <_printf_common+0xb0>
 800fc58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fc5c:	4649      	mov	r1, r9
 800fc5e:	4638      	mov	r0, r7
 800fc60:	47c0      	blx	r8
 800fc62:	3001      	adds	r0, #1
 800fc64:	d01e      	beq.n	800fca4 <_printf_common+0xa4>
 800fc66:	6823      	ldr	r3, [r4, #0]
 800fc68:	68e5      	ldr	r5, [r4, #12]
 800fc6a:	6832      	ldr	r2, [r6, #0]
 800fc6c:	f003 0306 	and.w	r3, r3, #6
 800fc70:	2b04      	cmp	r3, #4
 800fc72:	bf08      	it	eq
 800fc74:	1aad      	subeq	r5, r5, r2
 800fc76:	68a3      	ldr	r3, [r4, #8]
 800fc78:	6922      	ldr	r2, [r4, #16]
 800fc7a:	bf0c      	ite	eq
 800fc7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc80:	2500      	movne	r5, #0
 800fc82:	4293      	cmp	r3, r2
 800fc84:	bfc4      	itt	gt
 800fc86:	1a9b      	subgt	r3, r3, r2
 800fc88:	18ed      	addgt	r5, r5, r3
 800fc8a:	2600      	movs	r6, #0
 800fc8c:	341a      	adds	r4, #26
 800fc8e:	42b5      	cmp	r5, r6
 800fc90:	d11a      	bne.n	800fcc8 <_printf_common+0xc8>
 800fc92:	2000      	movs	r0, #0
 800fc94:	e008      	b.n	800fca8 <_printf_common+0xa8>
 800fc96:	2301      	movs	r3, #1
 800fc98:	4652      	mov	r2, sl
 800fc9a:	4649      	mov	r1, r9
 800fc9c:	4638      	mov	r0, r7
 800fc9e:	47c0      	blx	r8
 800fca0:	3001      	adds	r0, #1
 800fca2:	d103      	bne.n	800fcac <_printf_common+0xac>
 800fca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcac:	3501      	adds	r5, #1
 800fcae:	e7c6      	b.n	800fc3e <_printf_common+0x3e>
 800fcb0:	18e1      	adds	r1, r4, r3
 800fcb2:	1c5a      	adds	r2, r3, #1
 800fcb4:	2030      	movs	r0, #48	; 0x30
 800fcb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fcba:	4422      	add	r2, r4
 800fcbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fcc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fcc4:	3302      	adds	r3, #2
 800fcc6:	e7c7      	b.n	800fc58 <_printf_common+0x58>
 800fcc8:	2301      	movs	r3, #1
 800fcca:	4622      	mov	r2, r4
 800fccc:	4649      	mov	r1, r9
 800fcce:	4638      	mov	r0, r7
 800fcd0:	47c0      	blx	r8
 800fcd2:	3001      	adds	r0, #1
 800fcd4:	d0e6      	beq.n	800fca4 <_printf_common+0xa4>
 800fcd6:	3601      	adds	r6, #1
 800fcd8:	e7d9      	b.n	800fc8e <_printf_common+0x8e>
	...

0800fcdc <_printf_i>:
 800fcdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fce0:	460c      	mov	r4, r1
 800fce2:	4691      	mov	r9, r2
 800fce4:	7e27      	ldrb	r7, [r4, #24]
 800fce6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fce8:	2f78      	cmp	r7, #120	; 0x78
 800fcea:	4680      	mov	r8, r0
 800fcec:	469a      	mov	sl, r3
 800fcee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fcf2:	d807      	bhi.n	800fd04 <_printf_i+0x28>
 800fcf4:	2f62      	cmp	r7, #98	; 0x62
 800fcf6:	d80a      	bhi.n	800fd0e <_printf_i+0x32>
 800fcf8:	2f00      	cmp	r7, #0
 800fcfa:	f000 80d8 	beq.w	800feae <_printf_i+0x1d2>
 800fcfe:	2f58      	cmp	r7, #88	; 0x58
 800fd00:	f000 80a3 	beq.w	800fe4a <_printf_i+0x16e>
 800fd04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fd08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fd0c:	e03a      	b.n	800fd84 <_printf_i+0xa8>
 800fd0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fd12:	2b15      	cmp	r3, #21
 800fd14:	d8f6      	bhi.n	800fd04 <_printf_i+0x28>
 800fd16:	a001      	add	r0, pc, #4	; (adr r0, 800fd1c <_printf_i+0x40>)
 800fd18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fd1c:	0800fd75 	.word	0x0800fd75
 800fd20:	0800fd89 	.word	0x0800fd89
 800fd24:	0800fd05 	.word	0x0800fd05
 800fd28:	0800fd05 	.word	0x0800fd05
 800fd2c:	0800fd05 	.word	0x0800fd05
 800fd30:	0800fd05 	.word	0x0800fd05
 800fd34:	0800fd89 	.word	0x0800fd89
 800fd38:	0800fd05 	.word	0x0800fd05
 800fd3c:	0800fd05 	.word	0x0800fd05
 800fd40:	0800fd05 	.word	0x0800fd05
 800fd44:	0800fd05 	.word	0x0800fd05
 800fd48:	0800fe95 	.word	0x0800fe95
 800fd4c:	0800fdb9 	.word	0x0800fdb9
 800fd50:	0800fe77 	.word	0x0800fe77
 800fd54:	0800fd05 	.word	0x0800fd05
 800fd58:	0800fd05 	.word	0x0800fd05
 800fd5c:	0800feb7 	.word	0x0800feb7
 800fd60:	0800fd05 	.word	0x0800fd05
 800fd64:	0800fdb9 	.word	0x0800fdb9
 800fd68:	0800fd05 	.word	0x0800fd05
 800fd6c:	0800fd05 	.word	0x0800fd05
 800fd70:	0800fe7f 	.word	0x0800fe7f
 800fd74:	680b      	ldr	r3, [r1, #0]
 800fd76:	1d1a      	adds	r2, r3, #4
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	600a      	str	r2, [r1, #0]
 800fd7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fd80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fd84:	2301      	movs	r3, #1
 800fd86:	e0a3      	b.n	800fed0 <_printf_i+0x1f4>
 800fd88:	6825      	ldr	r5, [r4, #0]
 800fd8a:	6808      	ldr	r0, [r1, #0]
 800fd8c:	062e      	lsls	r6, r5, #24
 800fd8e:	f100 0304 	add.w	r3, r0, #4
 800fd92:	d50a      	bpl.n	800fdaa <_printf_i+0xce>
 800fd94:	6805      	ldr	r5, [r0, #0]
 800fd96:	600b      	str	r3, [r1, #0]
 800fd98:	2d00      	cmp	r5, #0
 800fd9a:	da03      	bge.n	800fda4 <_printf_i+0xc8>
 800fd9c:	232d      	movs	r3, #45	; 0x2d
 800fd9e:	426d      	negs	r5, r5
 800fda0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fda4:	485e      	ldr	r0, [pc, #376]	; (800ff20 <_printf_i+0x244>)
 800fda6:	230a      	movs	r3, #10
 800fda8:	e019      	b.n	800fdde <_printf_i+0x102>
 800fdaa:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fdae:	6805      	ldr	r5, [r0, #0]
 800fdb0:	600b      	str	r3, [r1, #0]
 800fdb2:	bf18      	it	ne
 800fdb4:	b22d      	sxthne	r5, r5
 800fdb6:	e7ef      	b.n	800fd98 <_printf_i+0xbc>
 800fdb8:	680b      	ldr	r3, [r1, #0]
 800fdba:	6825      	ldr	r5, [r4, #0]
 800fdbc:	1d18      	adds	r0, r3, #4
 800fdbe:	6008      	str	r0, [r1, #0]
 800fdc0:	0628      	lsls	r0, r5, #24
 800fdc2:	d501      	bpl.n	800fdc8 <_printf_i+0xec>
 800fdc4:	681d      	ldr	r5, [r3, #0]
 800fdc6:	e002      	b.n	800fdce <_printf_i+0xf2>
 800fdc8:	0669      	lsls	r1, r5, #25
 800fdca:	d5fb      	bpl.n	800fdc4 <_printf_i+0xe8>
 800fdcc:	881d      	ldrh	r5, [r3, #0]
 800fdce:	4854      	ldr	r0, [pc, #336]	; (800ff20 <_printf_i+0x244>)
 800fdd0:	2f6f      	cmp	r7, #111	; 0x6f
 800fdd2:	bf0c      	ite	eq
 800fdd4:	2308      	moveq	r3, #8
 800fdd6:	230a      	movne	r3, #10
 800fdd8:	2100      	movs	r1, #0
 800fdda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fdde:	6866      	ldr	r6, [r4, #4]
 800fde0:	60a6      	str	r6, [r4, #8]
 800fde2:	2e00      	cmp	r6, #0
 800fde4:	bfa2      	ittt	ge
 800fde6:	6821      	ldrge	r1, [r4, #0]
 800fde8:	f021 0104 	bicge.w	r1, r1, #4
 800fdec:	6021      	strge	r1, [r4, #0]
 800fdee:	b90d      	cbnz	r5, 800fdf4 <_printf_i+0x118>
 800fdf0:	2e00      	cmp	r6, #0
 800fdf2:	d04d      	beq.n	800fe90 <_printf_i+0x1b4>
 800fdf4:	4616      	mov	r6, r2
 800fdf6:	fbb5 f1f3 	udiv	r1, r5, r3
 800fdfa:	fb03 5711 	mls	r7, r3, r1, r5
 800fdfe:	5dc7      	ldrb	r7, [r0, r7]
 800fe00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fe04:	462f      	mov	r7, r5
 800fe06:	42bb      	cmp	r3, r7
 800fe08:	460d      	mov	r5, r1
 800fe0a:	d9f4      	bls.n	800fdf6 <_printf_i+0x11a>
 800fe0c:	2b08      	cmp	r3, #8
 800fe0e:	d10b      	bne.n	800fe28 <_printf_i+0x14c>
 800fe10:	6823      	ldr	r3, [r4, #0]
 800fe12:	07df      	lsls	r7, r3, #31
 800fe14:	d508      	bpl.n	800fe28 <_printf_i+0x14c>
 800fe16:	6923      	ldr	r3, [r4, #16]
 800fe18:	6861      	ldr	r1, [r4, #4]
 800fe1a:	4299      	cmp	r1, r3
 800fe1c:	bfde      	ittt	le
 800fe1e:	2330      	movle	r3, #48	; 0x30
 800fe20:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fe24:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800fe28:	1b92      	subs	r2, r2, r6
 800fe2a:	6122      	str	r2, [r4, #16]
 800fe2c:	f8cd a000 	str.w	sl, [sp]
 800fe30:	464b      	mov	r3, r9
 800fe32:	aa03      	add	r2, sp, #12
 800fe34:	4621      	mov	r1, r4
 800fe36:	4640      	mov	r0, r8
 800fe38:	f7ff fee2 	bl	800fc00 <_printf_common>
 800fe3c:	3001      	adds	r0, #1
 800fe3e:	d14c      	bne.n	800feda <_printf_i+0x1fe>
 800fe40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe44:	b004      	add	sp, #16
 800fe46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe4a:	4835      	ldr	r0, [pc, #212]	; (800ff20 <_printf_i+0x244>)
 800fe4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fe50:	6823      	ldr	r3, [r4, #0]
 800fe52:	680e      	ldr	r6, [r1, #0]
 800fe54:	061f      	lsls	r7, r3, #24
 800fe56:	f856 5b04 	ldr.w	r5, [r6], #4
 800fe5a:	600e      	str	r6, [r1, #0]
 800fe5c:	d514      	bpl.n	800fe88 <_printf_i+0x1ac>
 800fe5e:	07d9      	lsls	r1, r3, #31
 800fe60:	bf44      	itt	mi
 800fe62:	f043 0320 	orrmi.w	r3, r3, #32
 800fe66:	6023      	strmi	r3, [r4, #0]
 800fe68:	b91d      	cbnz	r5, 800fe72 <_printf_i+0x196>
 800fe6a:	6823      	ldr	r3, [r4, #0]
 800fe6c:	f023 0320 	bic.w	r3, r3, #32
 800fe70:	6023      	str	r3, [r4, #0]
 800fe72:	2310      	movs	r3, #16
 800fe74:	e7b0      	b.n	800fdd8 <_printf_i+0xfc>
 800fe76:	6823      	ldr	r3, [r4, #0]
 800fe78:	f043 0320 	orr.w	r3, r3, #32
 800fe7c:	6023      	str	r3, [r4, #0]
 800fe7e:	2378      	movs	r3, #120	; 0x78
 800fe80:	4828      	ldr	r0, [pc, #160]	; (800ff24 <_printf_i+0x248>)
 800fe82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fe86:	e7e3      	b.n	800fe50 <_printf_i+0x174>
 800fe88:	065e      	lsls	r6, r3, #25
 800fe8a:	bf48      	it	mi
 800fe8c:	b2ad      	uxthmi	r5, r5
 800fe8e:	e7e6      	b.n	800fe5e <_printf_i+0x182>
 800fe90:	4616      	mov	r6, r2
 800fe92:	e7bb      	b.n	800fe0c <_printf_i+0x130>
 800fe94:	680b      	ldr	r3, [r1, #0]
 800fe96:	6826      	ldr	r6, [r4, #0]
 800fe98:	6960      	ldr	r0, [r4, #20]
 800fe9a:	1d1d      	adds	r5, r3, #4
 800fe9c:	600d      	str	r5, [r1, #0]
 800fe9e:	0635      	lsls	r5, r6, #24
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	d501      	bpl.n	800fea8 <_printf_i+0x1cc>
 800fea4:	6018      	str	r0, [r3, #0]
 800fea6:	e002      	b.n	800feae <_printf_i+0x1d2>
 800fea8:	0671      	lsls	r1, r6, #25
 800feaa:	d5fb      	bpl.n	800fea4 <_printf_i+0x1c8>
 800feac:	8018      	strh	r0, [r3, #0]
 800feae:	2300      	movs	r3, #0
 800feb0:	6123      	str	r3, [r4, #16]
 800feb2:	4616      	mov	r6, r2
 800feb4:	e7ba      	b.n	800fe2c <_printf_i+0x150>
 800feb6:	680b      	ldr	r3, [r1, #0]
 800feb8:	1d1a      	adds	r2, r3, #4
 800feba:	600a      	str	r2, [r1, #0]
 800febc:	681e      	ldr	r6, [r3, #0]
 800febe:	6862      	ldr	r2, [r4, #4]
 800fec0:	2100      	movs	r1, #0
 800fec2:	4630      	mov	r0, r6
 800fec4:	f7f0 f98c 	bl	80001e0 <memchr>
 800fec8:	b108      	cbz	r0, 800fece <_printf_i+0x1f2>
 800feca:	1b80      	subs	r0, r0, r6
 800fecc:	6060      	str	r0, [r4, #4]
 800fece:	6863      	ldr	r3, [r4, #4]
 800fed0:	6123      	str	r3, [r4, #16]
 800fed2:	2300      	movs	r3, #0
 800fed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fed8:	e7a8      	b.n	800fe2c <_printf_i+0x150>
 800feda:	6923      	ldr	r3, [r4, #16]
 800fedc:	4632      	mov	r2, r6
 800fede:	4649      	mov	r1, r9
 800fee0:	4640      	mov	r0, r8
 800fee2:	47d0      	blx	sl
 800fee4:	3001      	adds	r0, #1
 800fee6:	d0ab      	beq.n	800fe40 <_printf_i+0x164>
 800fee8:	6823      	ldr	r3, [r4, #0]
 800feea:	079b      	lsls	r3, r3, #30
 800feec:	d413      	bmi.n	800ff16 <_printf_i+0x23a>
 800feee:	68e0      	ldr	r0, [r4, #12]
 800fef0:	9b03      	ldr	r3, [sp, #12]
 800fef2:	4298      	cmp	r0, r3
 800fef4:	bfb8      	it	lt
 800fef6:	4618      	movlt	r0, r3
 800fef8:	e7a4      	b.n	800fe44 <_printf_i+0x168>
 800fefa:	2301      	movs	r3, #1
 800fefc:	4632      	mov	r2, r6
 800fefe:	4649      	mov	r1, r9
 800ff00:	4640      	mov	r0, r8
 800ff02:	47d0      	blx	sl
 800ff04:	3001      	adds	r0, #1
 800ff06:	d09b      	beq.n	800fe40 <_printf_i+0x164>
 800ff08:	3501      	adds	r5, #1
 800ff0a:	68e3      	ldr	r3, [r4, #12]
 800ff0c:	9903      	ldr	r1, [sp, #12]
 800ff0e:	1a5b      	subs	r3, r3, r1
 800ff10:	42ab      	cmp	r3, r5
 800ff12:	dcf2      	bgt.n	800fefa <_printf_i+0x21e>
 800ff14:	e7eb      	b.n	800feee <_printf_i+0x212>
 800ff16:	2500      	movs	r5, #0
 800ff18:	f104 0619 	add.w	r6, r4, #25
 800ff1c:	e7f5      	b.n	800ff0a <_printf_i+0x22e>
 800ff1e:	bf00      	nop
 800ff20:	080106d1 	.word	0x080106d1
 800ff24:	080106e2 	.word	0x080106e2

0800ff28 <_sbrk_r>:
 800ff28:	b538      	push	{r3, r4, r5, lr}
 800ff2a:	4d06      	ldr	r5, [pc, #24]	; (800ff44 <_sbrk_r+0x1c>)
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	4604      	mov	r4, r0
 800ff30:	4608      	mov	r0, r1
 800ff32:	602b      	str	r3, [r5, #0]
 800ff34:	f7f3 ffea 	bl	8003f0c <_sbrk>
 800ff38:	1c43      	adds	r3, r0, #1
 800ff3a:	d102      	bne.n	800ff42 <_sbrk_r+0x1a>
 800ff3c:	682b      	ldr	r3, [r5, #0]
 800ff3e:	b103      	cbz	r3, 800ff42 <_sbrk_r+0x1a>
 800ff40:	6023      	str	r3, [r4, #0]
 800ff42:	bd38      	pop	{r3, r4, r5, pc}
 800ff44:	20009238 	.word	0x20009238

0800ff48 <__sread>:
 800ff48:	b510      	push	{r4, lr}
 800ff4a:	460c      	mov	r4, r1
 800ff4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff50:	f000 f8a0 	bl	8010094 <_read_r>
 800ff54:	2800      	cmp	r0, #0
 800ff56:	bfab      	itete	ge
 800ff58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ff5a:	89a3      	ldrhlt	r3, [r4, #12]
 800ff5c:	181b      	addge	r3, r3, r0
 800ff5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ff62:	bfac      	ite	ge
 800ff64:	6563      	strge	r3, [r4, #84]	; 0x54
 800ff66:	81a3      	strhlt	r3, [r4, #12]
 800ff68:	bd10      	pop	{r4, pc}

0800ff6a <__swrite>:
 800ff6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff6e:	461f      	mov	r7, r3
 800ff70:	898b      	ldrh	r3, [r1, #12]
 800ff72:	05db      	lsls	r3, r3, #23
 800ff74:	4605      	mov	r5, r0
 800ff76:	460c      	mov	r4, r1
 800ff78:	4616      	mov	r6, r2
 800ff7a:	d505      	bpl.n	800ff88 <__swrite+0x1e>
 800ff7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff80:	2302      	movs	r3, #2
 800ff82:	2200      	movs	r2, #0
 800ff84:	f000 f868 	bl	8010058 <_lseek_r>
 800ff88:	89a3      	ldrh	r3, [r4, #12]
 800ff8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ff92:	81a3      	strh	r3, [r4, #12]
 800ff94:	4632      	mov	r2, r6
 800ff96:	463b      	mov	r3, r7
 800ff98:	4628      	mov	r0, r5
 800ff9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff9e:	f000 b817 	b.w	800ffd0 <_write_r>

0800ffa2 <__sseek>:
 800ffa2:	b510      	push	{r4, lr}
 800ffa4:	460c      	mov	r4, r1
 800ffa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffaa:	f000 f855 	bl	8010058 <_lseek_r>
 800ffae:	1c43      	adds	r3, r0, #1
 800ffb0:	89a3      	ldrh	r3, [r4, #12]
 800ffb2:	bf15      	itete	ne
 800ffb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ffb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ffba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ffbe:	81a3      	strheq	r3, [r4, #12]
 800ffc0:	bf18      	it	ne
 800ffc2:	81a3      	strhne	r3, [r4, #12]
 800ffc4:	bd10      	pop	{r4, pc}

0800ffc6 <__sclose>:
 800ffc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffca:	f000 b813 	b.w	800fff4 <_close_r>
	...

0800ffd0 <_write_r>:
 800ffd0:	b538      	push	{r3, r4, r5, lr}
 800ffd2:	4d07      	ldr	r5, [pc, #28]	; (800fff0 <_write_r+0x20>)
 800ffd4:	4604      	mov	r4, r0
 800ffd6:	4608      	mov	r0, r1
 800ffd8:	4611      	mov	r1, r2
 800ffda:	2200      	movs	r2, #0
 800ffdc:	602a      	str	r2, [r5, #0]
 800ffde:	461a      	mov	r2, r3
 800ffe0:	f7f3 fbec 	bl	80037bc <_write>
 800ffe4:	1c43      	adds	r3, r0, #1
 800ffe6:	d102      	bne.n	800ffee <_write_r+0x1e>
 800ffe8:	682b      	ldr	r3, [r5, #0]
 800ffea:	b103      	cbz	r3, 800ffee <_write_r+0x1e>
 800ffec:	6023      	str	r3, [r4, #0]
 800ffee:	bd38      	pop	{r3, r4, r5, pc}
 800fff0:	20009238 	.word	0x20009238

0800fff4 <_close_r>:
 800fff4:	b538      	push	{r3, r4, r5, lr}
 800fff6:	4d06      	ldr	r5, [pc, #24]	; (8010010 <_close_r+0x1c>)
 800fff8:	2300      	movs	r3, #0
 800fffa:	4604      	mov	r4, r0
 800fffc:	4608      	mov	r0, r1
 800fffe:	602b      	str	r3, [r5, #0]
 8010000:	f7f3 ff4f 	bl	8003ea2 <_close>
 8010004:	1c43      	adds	r3, r0, #1
 8010006:	d102      	bne.n	801000e <_close_r+0x1a>
 8010008:	682b      	ldr	r3, [r5, #0]
 801000a:	b103      	cbz	r3, 801000e <_close_r+0x1a>
 801000c:	6023      	str	r3, [r4, #0]
 801000e:	bd38      	pop	{r3, r4, r5, pc}
 8010010:	20009238 	.word	0x20009238

08010014 <_fstat_r>:
 8010014:	b538      	push	{r3, r4, r5, lr}
 8010016:	4d07      	ldr	r5, [pc, #28]	; (8010034 <_fstat_r+0x20>)
 8010018:	2300      	movs	r3, #0
 801001a:	4604      	mov	r4, r0
 801001c:	4608      	mov	r0, r1
 801001e:	4611      	mov	r1, r2
 8010020:	602b      	str	r3, [r5, #0]
 8010022:	f7f3 ff4a 	bl	8003eba <_fstat>
 8010026:	1c43      	adds	r3, r0, #1
 8010028:	d102      	bne.n	8010030 <_fstat_r+0x1c>
 801002a:	682b      	ldr	r3, [r5, #0]
 801002c:	b103      	cbz	r3, 8010030 <_fstat_r+0x1c>
 801002e:	6023      	str	r3, [r4, #0]
 8010030:	bd38      	pop	{r3, r4, r5, pc}
 8010032:	bf00      	nop
 8010034:	20009238 	.word	0x20009238

08010038 <_isatty_r>:
 8010038:	b538      	push	{r3, r4, r5, lr}
 801003a:	4d06      	ldr	r5, [pc, #24]	; (8010054 <_isatty_r+0x1c>)
 801003c:	2300      	movs	r3, #0
 801003e:	4604      	mov	r4, r0
 8010040:	4608      	mov	r0, r1
 8010042:	602b      	str	r3, [r5, #0]
 8010044:	f7f3 ff49 	bl	8003eda <_isatty>
 8010048:	1c43      	adds	r3, r0, #1
 801004a:	d102      	bne.n	8010052 <_isatty_r+0x1a>
 801004c:	682b      	ldr	r3, [r5, #0]
 801004e:	b103      	cbz	r3, 8010052 <_isatty_r+0x1a>
 8010050:	6023      	str	r3, [r4, #0]
 8010052:	bd38      	pop	{r3, r4, r5, pc}
 8010054:	20009238 	.word	0x20009238

08010058 <_lseek_r>:
 8010058:	b538      	push	{r3, r4, r5, lr}
 801005a:	4d07      	ldr	r5, [pc, #28]	; (8010078 <_lseek_r+0x20>)
 801005c:	4604      	mov	r4, r0
 801005e:	4608      	mov	r0, r1
 8010060:	4611      	mov	r1, r2
 8010062:	2200      	movs	r2, #0
 8010064:	602a      	str	r2, [r5, #0]
 8010066:	461a      	mov	r2, r3
 8010068:	f7f3 ff42 	bl	8003ef0 <_lseek>
 801006c:	1c43      	adds	r3, r0, #1
 801006e:	d102      	bne.n	8010076 <_lseek_r+0x1e>
 8010070:	682b      	ldr	r3, [r5, #0]
 8010072:	b103      	cbz	r3, 8010076 <_lseek_r+0x1e>
 8010074:	6023      	str	r3, [r4, #0]
 8010076:	bd38      	pop	{r3, r4, r5, pc}
 8010078:	20009238 	.word	0x20009238

0801007c <__malloc_lock>:
 801007c:	4801      	ldr	r0, [pc, #4]	; (8010084 <__malloc_lock+0x8>)
 801007e:	f7ff bb55 	b.w	800f72c <__retarget_lock_acquire_recursive>
 8010082:	bf00      	nop
 8010084:	20009230 	.word	0x20009230

08010088 <__malloc_unlock>:
 8010088:	4801      	ldr	r0, [pc, #4]	; (8010090 <__malloc_unlock+0x8>)
 801008a:	f7ff bb50 	b.w	800f72e <__retarget_lock_release_recursive>
 801008e:	bf00      	nop
 8010090:	20009230 	.word	0x20009230

08010094 <_read_r>:
 8010094:	b538      	push	{r3, r4, r5, lr}
 8010096:	4d07      	ldr	r5, [pc, #28]	; (80100b4 <_read_r+0x20>)
 8010098:	4604      	mov	r4, r0
 801009a:	4608      	mov	r0, r1
 801009c:	4611      	mov	r1, r2
 801009e:	2200      	movs	r2, #0
 80100a0:	602a      	str	r2, [r5, #0]
 80100a2:	461a      	mov	r2, r3
 80100a4:	f7f3 fee0 	bl	8003e68 <_read>
 80100a8:	1c43      	adds	r3, r0, #1
 80100aa:	d102      	bne.n	80100b2 <_read_r+0x1e>
 80100ac:	682b      	ldr	r3, [r5, #0]
 80100ae:	b103      	cbz	r3, 80100b2 <_read_r+0x1e>
 80100b0:	6023      	str	r3, [r4, #0]
 80100b2:	bd38      	pop	{r3, r4, r5, pc}
 80100b4:	20009238 	.word	0x20009238

080100b8 <sqrt>:
 80100b8:	b538      	push	{r3, r4, r5, lr}
 80100ba:	ed2d 8b02 	vpush	{d8}
 80100be:	ec55 4b10 	vmov	r4, r5, d0
 80100c2:	f000 f82d 	bl	8010120 <__ieee754_sqrt>
 80100c6:	4b15      	ldr	r3, [pc, #84]	; (801011c <sqrt+0x64>)
 80100c8:	eeb0 8a40 	vmov.f32	s16, s0
 80100cc:	eef0 8a60 	vmov.f32	s17, s1
 80100d0:	f993 3000 	ldrsb.w	r3, [r3]
 80100d4:	3301      	adds	r3, #1
 80100d6:	d019      	beq.n	801010c <sqrt+0x54>
 80100d8:	4622      	mov	r2, r4
 80100da:	462b      	mov	r3, r5
 80100dc:	4620      	mov	r0, r4
 80100de:	4629      	mov	r1, r5
 80100e0:	f7f0 fd24 	bl	8000b2c <__aeabi_dcmpun>
 80100e4:	b990      	cbnz	r0, 801010c <sqrt+0x54>
 80100e6:	2200      	movs	r2, #0
 80100e8:	2300      	movs	r3, #0
 80100ea:	4620      	mov	r0, r4
 80100ec:	4629      	mov	r1, r5
 80100ee:	f7f0 fcf5 	bl	8000adc <__aeabi_dcmplt>
 80100f2:	b158      	cbz	r0, 801010c <sqrt+0x54>
 80100f4:	f7fe ff46 	bl	800ef84 <__errno>
 80100f8:	2321      	movs	r3, #33	; 0x21
 80100fa:	6003      	str	r3, [r0, #0]
 80100fc:	2200      	movs	r2, #0
 80100fe:	2300      	movs	r3, #0
 8010100:	4610      	mov	r0, r2
 8010102:	4619      	mov	r1, r3
 8010104:	f7f0 fba2 	bl	800084c <__aeabi_ddiv>
 8010108:	ec41 0b18 	vmov	d8, r0, r1
 801010c:	eeb0 0a48 	vmov.f32	s0, s16
 8010110:	eef0 0a68 	vmov.f32	s1, s17
 8010114:	ecbd 8b02 	vpop	{d8}
 8010118:	bd38      	pop	{r3, r4, r5, pc}
 801011a:	bf00      	nop
 801011c:	2000007c 	.word	0x2000007c

08010120 <__ieee754_sqrt>:
 8010120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010124:	ec55 4b10 	vmov	r4, r5, d0
 8010128:	4e56      	ldr	r6, [pc, #344]	; (8010284 <__ieee754_sqrt+0x164>)
 801012a:	43ae      	bics	r6, r5
 801012c:	ee10 0a10 	vmov	r0, s0
 8010130:	ee10 3a10 	vmov	r3, s0
 8010134:	4629      	mov	r1, r5
 8010136:	462a      	mov	r2, r5
 8010138:	d110      	bne.n	801015c <__ieee754_sqrt+0x3c>
 801013a:	ee10 2a10 	vmov	r2, s0
 801013e:	462b      	mov	r3, r5
 8010140:	f7f0 fa5a 	bl	80005f8 <__aeabi_dmul>
 8010144:	4602      	mov	r2, r0
 8010146:	460b      	mov	r3, r1
 8010148:	4620      	mov	r0, r4
 801014a:	4629      	mov	r1, r5
 801014c:	f7f0 f89e 	bl	800028c <__adddf3>
 8010150:	4604      	mov	r4, r0
 8010152:	460d      	mov	r5, r1
 8010154:	ec45 4b10 	vmov	d0, r4, r5
 8010158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801015c:	2d00      	cmp	r5, #0
 801015e:	dc10      	bgt.n	8010182 <__ieee754_sqrt+0x62>
 8010160:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010164:	4330      	orrs	r0, r6
 8010166:	d0f5      	beq.n	8010154 <__ieee754_sqrt+0x34>
 8010168:	b15d      	cbz	r5, 8010182 <__ieee754_sqrt+0x62>
 801016a:	ee10 2a10 	vmov	r2, s0
 801016e:	462b      	mov	r3, r5
 8010170:	ee10 0a10 	vmov	r0, s0
 8010174:	f7f0 f888 	bl	8000288 <__aeabi_dsub>
 8010178:	4602      	mov	r2, r0
 801017a:	460b      	mov	r3, r1
 801017c:	f7f0 fb66 	bl	800084c <__aeabi_ddiv>
 8010180:	e7e6      	b.n	8010150 <__ieee754_sqrt+0x30>
 8010182:	1509      	asrs	r1, r1, #20
 8010184:	d076      	beq.n	8010274 <__ieee754_sqrt+0x154>
 8010186:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801018a:	07ce      	lsls	r6, r1, #31
 801018c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8010190:	bf5e      	ittt	pl
 8010192:	0fda      	lsrpl	r2, r3, #31
 8010194:	005b      	lslpl	r3, r3, #1
 8010196:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801019a:	0fda      	lsrs	r2, r3, #31
 801019c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80101a0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80101a4:	2000      	movs	r0, #0
 80101a6:	106d      	asrs	r5, r5, #1
 80101a8:	005b      	lsls	r3, r3, #1
 80101aa:	f04f 0e16 	mov.w	lr, #22
 80101ae:	4684      	mov	ip, r0
 80101b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80101b4:	eb0c 0401 	add.w	r4, ip, r1
 80101b8:	4294      	cmp	r4, r2
 80101ba:	bfde      	ittt	le
 80101bc:	1b12      	suble	r2, r2, r4
 80101be:	eb04 0c01 	addle.w	ip, r4, r1
 80101c2:	1840      	addle	r0, r0, r1
 80101c4:	0052      	lsls	r2, r2, #1
 80101c6:	f1be 0e01 	subs.w	lr, lr, #1
 80101ca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80101ce:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80101d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80101d6:	d1ed      	bne.n	80101b4 <__ieee754_sqrt+0x94>
 80101d8:	4671      	mov	r1, lr
 80101da:	2720      	movs	r7, #32
 80101dc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80101e0:	4562      	cmp	r2, ip
 80101e2:	eb04 060e 	add.w	r6, r4, lr
 80101e6:	dc02      	bgt.n	80101ee <__ieee754_sqrt+0xce>
 80101e8:	d113      	bne.n	8010212 <__ieee754_sqrt+0xf2>
 80101ea:	429e      	cmp	r6, r3
 80101ec:	d811      	bhi.n	8010212 <__ieee754_sqrt+0xf2>
 80101ee:	2e00      	cmp	r6, #0
 80101f0:	eb06 0e04 	add.w	lr, r6, r4
 80101f4:	da43      	bge.n	801027e <__ieee754_sqrt+0x15e>
 80101f6:	f1be 0f00 	cmp.w	lr, #0
 80101fa:	db40      	blt.n	801027e <__ieee754_sqrt+0x15e>
 80101fc:	f10c 0801 	add.w	r8, ip, #1
 8010200:	eba2 020c 	sub.w	r2, r2, ip
 8010204:	429e      	cmp	r6, r3
 8010206:	bf88      	it	hi
 8010208:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801020c:	1b9b      	subs	r3, r3, r6
 801020e:	4421      	add	r1, r4
 8010210:	46c4      	mov	ip, r8
 8010212:	0052      	lsls	r2, r2, #1
 8010214:	3f01      	subs	r7, #1
 8010216:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801021a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801021e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010222:	d1dd      	bne.n	80101e0 <__ieee754_sqrt+0xc0>
 8010224:	4313      	orrs	r3, r2
 8010226:	d006      	beq.n	8010236 <__ieee754_sqrt+0x116>
 8010228:	1c4c      	adds	r4, r1, #1
 801022a:	bf13      	iteet	ne
 801022c:	3101      	addne	r1, #1
 801022e:	3001      	addeq	r0, #1
 8010230:	4639      	moveq	r1, r7
 8010232:	f021 0101 	bicne.w	r1, r1, #1
 8010236:	1043      	asrs	r3, r0, #1
 8010238:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801023c:	0849      	lsrs	r1, r1, #1
 801023e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010242:	07c2      	lsls	r2, r0, #31
 8010244:	bf48      	it	mi
 8010246:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801024a:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801024e:	460c      	mov	r4, r1
 8010250:	463d      	mov	r5, r7
 8010252:	e77f      	b.n	8010154 <__ieee754_sqrt+0x34>
 8010254:	0ada      	lsrs	r2, r3, #11
 8010256:	3815      	subs	r0, #21
 8010258:	055b      	lsls	r3, r3, #21
 801025a:	2a00      	cmp	r2, #0
 801025c:	d0fa      	beq.n	8010254 <__ieee754_sqrt+0x134>
 801025e:	02d7      	lsls	r7, r2, #11
 8010260:	d50a      	bpl.n	8010278 <__ieee754_sqrt+0x158>
 8010262:	f1c1 0420 	rsb	r4, r1, #32
 8010266:	fa23 f404 	lsr.w	r4, r3, r4
 801026a:	1e4d      	subs	r5, r1, #1
 801026c:	408b      	lsls	r3, r1
 801026e:	4322      	orrs	r2, r4
 8010270:	1b41      	subs	r1, r0, r5
 8010272:	e788      	b.n	8010186 <__ieee754_sqrt+0x66>
 8010274:	4608      	mov	r0, r1
 8010276:	e7f0      	b.n	801025a <__ieee754_sqrt+0x13a>
 8010278:	0052      	lsls	r2, r2, #1
 801027a:	3101      	adds	r1, #1
 801027c:	e7ef      	b.n	801025e <__ieee754_sqrt+0x13e>
 801027e:	46e0      	mov	r8, ip
 8010280:	e7be      	b.n	8010200 <__ieee754_sqrt+0xe0>
 8010282:	bf00      	nop
 8010284:	7ff00000 	.word	0x7ff00000

08010288 <_init>:
 8010288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801028a:	bf00      	nop
 801028c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801028e:	bc08      	pop	{r3}
 8010290:	469e      	mov	lr, r3
 8010292:	4770      	bx	lr

08010294 <_fini>:
 8010294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010296:	bf00      	nop
 8010298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801029a:	bc08      	pop	{r3}
 801029c:	469e      	mov	lr, r3
 801029e:	4770      	bx	lr
