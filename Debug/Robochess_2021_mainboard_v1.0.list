
Robochess_2021_mainboard_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a40  08013cd8  08013cd8  00023cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014718  08014718  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08014718  08014718  00024718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014720  08014720  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014720  08014720  00024720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014724  08014724  00024724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08014728  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b494  200001f0  08014918  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b684  08014918  0003b684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029371  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000581d  00000000  00000000  00059591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  0005edb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ad8  00000000  00000000  00060aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d6f7  00000000  00000000  00062580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023b10  00000000  00000000  0007fc77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8fd6  00000000  00000000  000a3787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c75d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b54  00000000  00000000  0014c7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013cbc 	.word	0x08013cbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08013cbc 	.word	0x08013cbc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <HAL_I2C_ErrorCallback>:
uint16_t data_AS5600_M1,data_AS5600_M2;

bool FLAG_AS5600_M1 = HAL_OK, FLAG_AS5600_M2 = HAL_OK;

// Handler I2C Error
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==AS5600_1_I2C){
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <HAL_I2C_ErrorCallback+0x34>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d102      	bne.n	8000f68 <HAL_I2C_ErrorCallback+0x18>
       FLAG_AS5600_M1 = HAL_ERROR;
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_I2C_ErrorCallback+0x38>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
	}
	if(hi2c->Instance==AS5600_2_I2C){
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_I2C_ErrorCallback+0x3c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d102      	bne.n	8000f78 <HAL_I2C_ErrorCallback+0x28>
		FLAG_AS5600_M2 = HAL_ERROR;
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <HAL_I2C_ErrorCallback+0x40>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
	}
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	40005400 	.word	0x40005400
 8000f88:	2000020c 	.word	0x2000020c
 8000f8c:	40005c00 	.word	0x40005c00
 8000f90:	2000020d 	.word	0x2000020d

08000f94 <AS5600_M1_getPOS>:

void AS5600_M1_getPOS(){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1,0x36<<1,_RAWANGLEAddressLSB,1,(uint8_t*)&data_AS5600_M1,2);
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <AS5600_M1_getPOS+0x20>)
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	220d      	movs	r2, #13
 8000fa6:	216c      	movs	r1, #108	; 0x6c
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <AS5600_M1_getPOS+0x24>)
 8000faa:	f005 fde9 	bl	8006b80 <HAL_I2C_Mem_Read_DMA>
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000af36 	.word	0x2000af36
 8000fb8:	2000b17c 	.word	0x2000b17c

08000fbc <AS5600_M2_getPOS>:
void AS5600_M2_getPOS(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c3,0x36<<1,_RAWANGLEAddressLSB,1,(uint8_t *)&data_AS5600_M2,2);
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <AS5600_M2_getPOS+0x20>)
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	220d      	movs	r2, #13
 8000fce:	216c      	movs	r1, #108	; 0x6c
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <AS5600_M2_getPOS+0x24>)
 8000fd2:	f005 fdd5 	bl	8006b80 <HAL_I2C_Mem_Read_DMA>
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	2000af34 	.word	0x2000af34
 8000fe0:	2000b0c8 	.word	0x2000b0c8

08000fe4 <AS5600_Start_Update>:
		case 55: return 2;  //phat hien nam cham binh thuong
		case 23: return 3; //phat hien nam cham yeu
	}
	return data_status[0];
}
void AS5600_Start_Update(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	TIM_AS5600->ARR = 1000;         //for frequency = 100hz
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <AS5600_Start_Update+0x18>)
 8000fea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&TIM_AS5600_UPDATE);
 8000ff0:	4803      	ldr	r0, [pc, #12]	; (8001000 <AS5600_Start_Update+0x1c>)
 8000ff2:	f008 feb3 	bl	8009d5c <HAL_TIM_Base_Start_IT>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40014400 	.word	0x40014400
 8001000:	2000b494 	.word	0x2000b494

08001004 <AS5600_Start_Update_Low>:
void AS5600_Start_Update_Low(){
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	TIM_AS5600->ARR = 1000;         //for frequency = 100hz
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <AS5600_Start_Update_Low+0x18>)
 800100a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40014400 	.word	0x40014400

08001020 <AS5600_Start_Update_High>:
void AS5600_Start_Update_High(){
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	TIM_AS5600->ARR = 800;          //for frequency = 8khz
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <AS5600_Start_Update_High+0x18>)
 8001026:	f44f 7248 	mov.w	r2, #800	; 0x320
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40014400 	.word	0x40014400

0800103c <AccelStepper_init>:

#include "AccelStepper.h"
#include "config.h"

void AccelStepper_init(struct AccelStepperData * AccelMotor,TIM_HandleTypeDef htim,uint16_t startPosition, uint32_t maxSpeed,uint32_t maxAccel){
 800103c:	b084      	sub	sp, #16
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	f107 0014 	add.w	r0, r7, #20
 800104a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  //khoi tao thu vien
	AccelMotor->_currentPos = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	631a      	str	r2, [r3, #48]	; 0x30
	AccelMotor->_targetPos = 0;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
	AccelMotor->_speed = 0.0f;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
	AccelMotor->_maxSpeed = 1.0f;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001068:	609a      	str	r2, [r3, #8]
	AccelMotor->_acceleration = 0.0f;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
	AccelMotor->_sqrt_twoa = 1.0f;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001078:	611a      	str	r2, [r3, #16]
	AccelMotor->_stepInterval = 0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]
	AccelMotor->_lastStepTime = 0;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
	AccelMotor->_n = 0;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	61da      	str	r2, [r3, #28]
	AccelMotor->_c0 = 0.0f;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
	AccelMotor->_cn = 0.0f;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
	AccelMotor->_cmin = 1.0f;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
	AccelMotor->_direction = DIRECTION_CCW;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	setMaxSpeed(AccelMotor,maxSpeed);  
 80010ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f83e 	bl	800113c <setMaxSpeed>
	setAcceleration(AccelMotor,maxAccel);
 80010c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f882 	bl	80011d8 <setAcceleration>
	AccelMotor->_currentPos = startPosition;  //setup vi tri ban dau
 80010d4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	631a      	str	r2, [r3, #48]	; 0x30
	AccelMotor->_targetPos=AccelMotor->_currentPos;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	601a      	str	r2, [r3, #0]
	computeNewSpeed(AccelMotor);  //tinh toan buoc dau tien
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f8eb 	bl	80012c0 <computeNewSpeed>
	run(AccelMotor);          
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f9e2 	bl	80014b4 <run>
  if(AccelMotor->usingTimChanelN==ON) 	
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d108      	bne.n	800110c <AccelStepper_init+0xd0>
		HAL_TIMEx_PWMN_Start_IT(&htim,AccelMotor->TIM_CHANEL); 
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f009 fe0f 	bl	800ad28 <HAL_TIMEx_PWMN_Start_IT>
 800110a:	e007      	b.n	800111c <AccelStepper_init+0xe0>
	else
	HAL_TIM_PWM_Start_IT(&htim,AccelMotor->TIM_CHANEL);  //khoi dong TIMER tao xung STEP
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f008 ff8c 	bl	800a034 <HAL_TIM_PWM_Start_IT>
	HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_SET);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001126:	2201      	movs	r2, #1
 8001128:	4619      	mov	r1, r3
 800112a:	f005 fbb1 	bl	8006890 <HAL_GPIO_WritePin>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001138:	b004      	add	sp, #16
 800113a:	4770      	bx	lr

0800113c <setMaxSpeed>:

void setMaxSpeed(struct AccelStepperData * AccelMotor,float speed)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	ed87 0a00 	vstr	s0, [r7]
    if (speed < 0.0f)
 8001148:	edd7 7a00 	vldr	s15, [r7]
 800114c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001154:	d505      	bpl.n	8001162 <setMaxSpeed+0x26>
       speed = -speed;
 8001156:	edd7 7a00 	vldr	s15, [r7]
 800115a:	eef1 7a67 	vneg.f32	s15, s15
 800115e:	edc7 7a00 	vstr	s15, [r7]
    if (AccelMotor->_maxSpeed != speed)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	edd3 7a02 	vldr	s15, [r3, #8]
 8001168:	ed97 7a00 	vldr	s14, [r7]
 800116c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001174:	d027      	beq.n	80011c6 <setMaxSpeed+0x8a>
    {
	AccelMotor->_maxSpeed = speed;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	609a      	str	r2, [r3, #8]
	AccelMotor->_cmin = 1000000.0f / speed;
 800117c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80011d0 <setMaxSpeed+0x94>
 8001180:	ed97 7a00 	vldr	s14, [r7]
 8001184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	// Recompute _n from current speed and adjust speed if accelerating or cruising
	if (AccelMotor->_n > 0)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	2b00      	cmp	r3, #0
 8001194:	dd17      	ble.n	80011c6 <setMaxSpeed+0x8a>
	{
	    AccelMotor->_n = (long)((AccelMotor->_speed * AccelMotor->_speed) / (2.0f * AccelMotor->_acceleration)); // Equation 16
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	ed93 7a01 	vldr	s14, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	edd3 7a01 	vldr	s15, [r3, #4]
 80011a2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80011ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 2a90 	vmov	r2, s15
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	61da      	str	r2, [r3, #28]
	    computeNewSpeed(AccelMotor);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f87d 	bl	80012c0 <computeNewSpeed>
	}
    }
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	49742400 	.word	0x49742400
 80011d4:	00000000 	.word	0x00000000

080011d8 <setAcceleration>:
void setAcceleration(struct AccelStepperData * AccelMotor,float acceleration)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	ed87 0a00 	vstr	s0, [r7]
    if (acceleration == 0.0f)
 80011e4:	edd7 7a00 	vldr	s15, [r7]
 80011e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	d058      	beq.n	80012a4 <setAcceleration+0xcc>
	return;
    if (acceleration < 0.0f)
 80011f2:	edd7 7a00 	vldr	s15, [r7]
 80011f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	d505      	bpl.n	800120c <setAcceleration+0x34>
      acceleration = -acceleration;
 8001200:	edd7 7a00 	vldr	s15, [r7]
 8001204:	eef1 7a67 	vneg.f32	s15, s15
 8001208:	edc7 7a00 	vstr	s15, [r7]
    if (AccelMotor->_acceleration != acceleration)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001212:	ed97 7a00 	vldr	s14, [r7]
 8001216:	eeb4 7a67 	vcmp.f32	s14, s15
 800121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121e:	d042      	beq.n	80012a6 <setAcceleration+0xce>
    {
	// Recompute _n per Equation 17
	AccelMotor->_n = AccelMotor->_n * (AccelMotor->_acceleration / acceleration);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	ed93 6a03 	vldr	s12, [r3, #12]
 8001232:	edd7 6a00 	vldr	s13, [r7]
 8001236:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800123a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001242:	ee17 2a90 	vmov	r2, s15
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	61da      	str	r2, [r3, #28]
	// New c0 per Equation 7, with correction per Equation 15
	AccelMotor->_c0 = 0.676f * sqrt(2.0f / acceleration) * 1000000.0f; // Equation 15
 800124a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800124e:	edd7 7a00 	vldr	s15, [r7]
 8001252:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001256:	ee16 0a90 	vmov	r0, s13
 800125a:	f7ff f97d 	bl	8000558 <__aeabi_f2d>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	ec43 2b10 	vmov	d0, r2, r3
 8001266:	f011 f9fd 	bl	8012664 <sqrt>
 800126a:	ec51 0b10 	vmov	r0, r1, d0
 800126e:	a310      	add	r3, pc, #64	; (adr r3, 80012b0 <setAcceleration+0xd8>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff f9c8 	bl	8000608 <__aeabi_dmul>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	a30d      	add	r3, pc, #52	; (adr r3, 80012b8 <setAcceleration+0xe0>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7ff f9bf 	bl	8000608 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fc91 	bl	8000bb8 <__aeabi_d2f>
 8001296:	4602      	mov	r2, r0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	621a      	str	r2, [r3, #32]
	AccelMotor->_acceleration = acceleration;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	e000      	b.n	80012a6 <setAcceleration+0xce>
	return;
 80012a4:	bf00      	nop
	//computeNewSpeed(AccelMotor);
    }
}
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	f3af 8000 	nop.w
 80012b0:	c0000000 	.word	0xc0000000
 80012b4:	3fe5a1ca 	.word	0x3fe5a1ca
 80012b8:	00000000 	.word	0x00000000
 80012bc:	412e8480 	.word	0x412e8480

080012c0 <computeNewSpeed>:

void computeNewSpeed(struct AccelStepperData * AccelMotor)  //tinh toan 1 toc do moi
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  long distanceTo = distanceToGo(AccelMotor); // +ve is clockwise from curent location - duong neu cung chieu kim dong ho tu vi tri hien tai
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 f8e3 	bl	8001494 <distanceToGo>
 80012ce:	60f8      	str	r0, [r7, #12]

  long stepsToStop = (long)((AccelMotor->_speed * AccelMotor->_speed) / (2.0f * AccelMotor->_acceleration)); // Equation 16 - phuong trinh 16 theo giai thuat By David Austin
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80012dc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80012e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f2:	ee17 3a90 	vmov	r3, s15
 80012f6:	60bb      	str	r3, [r7, #8]

  if (distanceTo == 0 && stepsToStop <= 1){
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10d      	bne.n	800131a <computeNewSpeed+0x5a>
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	2b01      	cmp	r3, #1
 8001302:	dc0a      	bgt.n	800131a <computeNewSpeed+0x5a>
	// We are at the target and its time to stop -  da den vi tri muc tieu va bay gio dung lai
	  AccelMotor->_stepInterval = 0;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
	  AccelMotor->_speed = 0.0f;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
	  AccelMotor->_n = 0;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	61da      	str	r2, [r3, #28]
	  return;
 8001318:	e0b7      	b.n	800148a <computeNewSpeed+0x1ca>
  }

  if (distanceTo > 0){
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	dd24      	ble.n	800136a <computeNewSpeed+0xaa>
	  // We are anticlockwise from the target  -  chung ta dang o vi tri nguoc chieu kim dong ho 
	  // Need to go clockwise from here, maybe decelerate now  -  can quay theo chieu kim dong ho, co th giam toc ngay
	  if (AccelMotor->_n > 0){
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	2b00      	cmp	r3, #0
 8001326:	dd0d      	ble.n	8001344 <computeNewSpeed+0x84>
	    // Currently accelerating, need to decel now? Or maybe going the wrong way?
			// hien tai dang tang toc,can giam toc bay ngay? hoac co the di sai huong
	    if ((stepsToStop >= distanceTo) || AccelMotor->_direction == DIRECTION_CCW)
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	429a      	cmp	r2, r3
 800132e:	da04      	bge.n	800133a <computeNewSpeed+0x7a>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001336:	2b00      	cmp	r3, #0
 8001338:	d140      	bne.n	80013bc <computeNewSpeed+0xfc>
		     AccelMotor->_n = -stepsToStop; // Start deceleration - bat dau giam toc
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	425a      	negs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	61da      	str	r2, [r3, #28]
 8001342:	e03b      	b.n	80013bc <computeNewSpeed+0xfc>
	  }
	  else if (AccelMotor->_n < 0){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	2b00      	cmp	r3, #0
 800134a:	da37      	bge.n	80013bc <computeNewSpeed+0xfc>
	    // Currently decelerating, need to accel again? - hien tai dang giam toc ,can tang toc lai
	    if ((stepsToStop < distanceTo) && AccelMotor->_direction == DIRECTION_CW)
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	429a      	cmp	r2, r3
 8001352:	da33      	bge.n	80013bc <computeNewSpeed+0xfc>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800135a:	2b01      	cmp	r3, #1
 800135c:	d12e      	bne.n	80013bc <computeNewSpeed+0xfc>
		     AccelMotor->_n = -AccelMotor->_n; // Start accceleration  //bat dau tang toc
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	425a      	negs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	61da      	str	r2, [r3, #28]
 8001368:	e028      	b.n	80013bc <computeNewSpeed+0xfc>
	  }
  }
  else if (distanceTo < 0){
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	da25      	bge.n	80013bc <computeNewSpeed+0xfc>
	// We are clockwise from the target - chung ta dang o vi tri cung chieu kim dong ho
	// Need to go anticlockwise from here, maybe decelerate - can quay theo chieu nguoc lai ,co the giam toc
	   if (AccelMotor->_n > 0){
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	2b00      	cmp	r3, #0
 8001376:	dd0e      	ble.n	8001396 <computeNewSpeed+0xd6>
	      // Currently accelerating, need to decel now? Or maybe going the wrong way?
			  // hien dang tang toc,can giam toc ngay? hoac dang di sai huong?
	      if ((stepsToStop >= -distanceTo) || AccelMotor->_direction == DIRECTION_CW)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	425b      	negs	r3, r3
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	429a      	cmp	r2, r3
 8001380:	da04      	bge.n	800138c <computeNewSpeed+0xcc>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001388:	2b01      	cmp	r3, #1
 800138a:	d117      	bne.n	80013bc <computeNewSpeed+0xfc>
		        AccelMotor->_n = -stepsToStop; // Start deceleration - bat dau giam toc
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	425a      	negs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	61da      	str	r2, [r3, #28]
 8001394:	e012      	b.n	80013bc <computeNewSpeed+0xfc>
	   }
	   else if (AccelMotor->_n < 0){
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	2b00      	cmp	r3, #0
 800139c:	da0e      	bge.n	80013bc <computeNewSpeed+0xfc>
	       // Currently decelerating, need to accel again?
			   // hien dang giam toc, can tang toc lai?
	       if ((stepsToStop < -distanceTo) && AccelMotor->_direction == DIRECTION_CCW)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	425b      	negs	r3, r3
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	da09      	bge.n	80013bc <computeNewSpeed+0xfc>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d104      	bne.n	80013bc <computeNewSpeed+0xfc>
		        AccelMotor->_n = -AccelMotor->_n; // Start accceleration  //bat dau tang toc
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	425a      	negs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	61da      	str	r2, [r3, #28]
	   }
  }
    // Need to accelerate or decelerate - can tang toc hoac giam toc
  if (AccelMotor->_n == 0){
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10e      	bne.n	80013e2 <computeNewSpeed+0x122>
	   // First step from stopped  -  buoc dau tien tu vi tri stop
	   AccelMotor->_cn = AccelMotor->_c0;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1a      	ldr	r2, [r3, #32]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24
	   AccelMotor->_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bfcc      	ite	gt
 80013d2:	2301      	movgt	r3, #1
 80013d4:	2300      	movle	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80013e0:	e02e      	b.n	8001440 <computeNewSpeed+0x180>
  }
	else{
	   // Subsequent step. Works for accel (n is +_ve) and decel (n is -ve).
		 //buoc tiep theo. hoat dong cho tang toc (n la duong) va giam toc (n la am)
	   AccelMotor->_cn = AccelMotor->_cn - ((2.0f * AccelMotor->_cn) / ((4.0f * AccelMotor->_n) + 1)); // Equation 13 - phuong trinh 13 
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80013ee:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013fe:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001402:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800140a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800140e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	   AccelMotor->_cn = max(AccelMotor->_cn, AccelMotor->_cmin);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001428:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800142c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001430:	dd02      	ble.n	8001438 <computeNewSpeed+0x178>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	e001      	b.n	800143c <computeNewSpeed+0x17c>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6253      	str	r3, [r2, #36]	; 0x24
  }
  AccelMotor->_n++;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	61da      	str	r2, [r3, #28]
  AccelMotor->_stepInterval = AccelMotor->_cn;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001454:	ee17 2a90 	vmov	r2, s15
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	615a      	str	r2, [r3, #20]
  AccelMotor->_speed = 1000000.0f / AccelMotor->_cn;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001462:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001490 <computeNewSpeed+0x1d0>
 8001466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	edc3 7a01 	vstr	s15, [r3, #4]
  if (AccelMotor->_direction == DIRECTION_CCW) AccelMotor->_speed = -AccelMotor->_speed;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001476:	2b00      	cmp	r3, #0
 8001478:	d107      	bne.n	800148a <computeNewSpeed+0x1ca>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001480:	eef1 7a67 	vneg.f32	s15, s15
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	49742400 	.word	0x49742400

08001494 <distanceToGo>:

long distanceToGo(struct AccelStepperData * AccelMotor)  //tra lai khoang cach giua vi tri muc tieu va hien tai
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
    return AccelMotor->_targetPos - AccelMotor->_currentPos;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	1ad3      	subs	r3, r2, r3
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <run>:

void run(struct AccelStepperData * AccelMotor)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	if(AccelMotor->isStop){
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d037      	beq.n	8001536 <run+0x82>
		switch(AccelMotor->TIM_CHANEL){
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	2b0c      	cmp	r3, #12
 80014cc:	f200 80cd 	bhi.w	800166a <run+0x1b6>
 80014d0:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <run+0x24>)
 80014d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d6:	bf00      	nop
 80014d8:	0800150d 	.word	0x0800150d
 80014dc:	0800166b 	.word	0x0800166b
 80014e0:	0800166b 	.word	0x0800166b
 80014e4:	0800166b 	.word	0x0800166b
 80014e8:	08001517 	.word	0x08001517
 80014ec:	0800166b 	.word	0x0800166b
 80014f0:	0800166b 	.word	0x0800166b
 80014f4:	0800166b 	.word	0x0800166b
 80014f8:	08001521 	.word	0x08001521
 80014fc:	0800166b 	.word	0x0800166b
 8001500:	0800166b 	.word	0x0800166b
 8001504:	0800166b 	.word	0x0800166b
 8001508:	0800152b 	.word	0x0800152b
			case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001510:	2200      	movs	r2, #0
 8001512:	635a      	str	r2, [r3, #52]	; 0x34
 8001514:	e00e      	b.n	8001534 <run+0x80>
			case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151a:	2200      	movs	r2, #0
 800151c:	639a      	str	r2, [r3, #56]	; 0x38
 800151e:	e009      	b.n	8001534 <run+0x80>
			case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001524:	2200      	movs	r2, #0
 8001526:	63da      	str	r2, [r3, #60]	; 0x3c
 8001528:	e004      	b.n	8001534 <run+0x80>
			case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152e:	2200      	movs	r2, #0
 8001530:	641a      	str	r2, [r3, #64]	; 0x40
 8001532:	bf00      	nop
		}
		return;
 8001534:	e099      	b.n	800166a <run+0x1b6>
	}
  if(runSpeed(AccelMotor)){
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f89c 	bl	8001674 <runSpeed>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d043      	beq.n	80015ca <run+0x116>
	computeNewSpeed(AccelMotor);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff febc 	bl	80012c0 <computeNewSpeed>
	if(AccelMotor->_stepInterval==0){
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d135      	bne.n	80015bc <run+0x108>
			switch(AccelMotor->TIM_CHANEL){
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001554:	2b0c      	cmp	r3, #12
 8001556:	f200 8089 	bhi.w	800166c <run+0x1b8>
 800155a:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <run+0xac>)
 800155c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001560:	08001595 	.word	0x08001595
 8001564:	0800166d 	.word	0x0800166d
 8001568:	0800166d 	.word	0x0800166d
 800156c:	0800166d 	.word	0x0800166d
 8001570:	0800159f 	.word	0x0800159f
 8001574:	0800166d 	.word	0x0800166d
 8001578:	0800166d 	.word	0x0800166d
 800157c:	0800166d 	.word	0x0800166d
 8001580:	080015a9 	.word	0x080015a9
 8001584:	0800166d 	.word	0x0800166d
 8001588:	0800166d 	.word	0x0800166d
 800158c:	0800166d 	.word	0x0800166d
 8001590:	080015b3 	.word	0x080015b3
				case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001598:	2200      	movs	r2, #0
 800159a:	635a      	str	r2, [r3, #52]	; 0x34
 800159c:	e066      	b.n	800166c <run+0x1b8>
				case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a2:	2200      	movs	r2, #0
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38
 80015a6:	e061      	b.n	800166c <run+0x1b8>
				case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ac:	2200      	movs	r2, #0
 80015ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80015b0:	e05c      	b.n	800166c <run+0x1b8>
				case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b6:	2200      	movs	r2, #0
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40
 80015ba:	e057      	b.n	800166c <run+0x1b8>
			}
//			AccelMotor->sumComplete++;
		}
  	else{		
	    AccelMotor->USER_TIMER->ARR=(uint16_t)AccelMotor->_stepInterval;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80015c8:	e050      	b.n	800166c <run+0x1b8>
//		if((distanceToGo(AccelMotor)>3) || (distanceToGo(AccelMotor)>-3)) AccelMotor->sumComplete =0;
		}
	}
	else if((distanceToGo(AccelMotor)>0) || (distanceToGo(AccelMotor)<0)){
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff62 	bl	8001494 <distanceToGo>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	dc05      	bgt.n	80015e2 <run+0x12e>
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ff5c 	bl	8001494 <distanceToGo>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	da44      	bge.n	800166c <run+0x1b8>
		computeNewSpeed(AccelMotor);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fe6c 	bl	80012c0 <computeNewSpeed>
		if(AccelMotor->_stepInterval==0){
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d135      	bne.n	800165c <run+0x1a8>
				switch(AccelMotor->TIM_CHANEL){
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f4:	2b0c      	cmp	r3, #12
 80015f6:	d839      	bhi.n	800166c <run+0x1b8>
 80015f8:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <run+0x14c>)
 80015fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fe:	bf00      	nop
 8001600:	08001635 	.word	0x08001635
 8001604:	0800166d 	.word	0x0800166d
 8001608:	0800166d 	.word	0x0800166d
 800160c:	0800166d 	.word	0x0800166d
 8001610:	0800163f 	.word	0x0800163f
 8001614:	0800166d 	.word	0x0800166d
 8001618:	0800166d 	.word	0x0800166d
 800161c:	0800166d 	.word	0x0800166d
 8001620:	08001649 	.word	0x08001649
 8001624:	0800166d 	.word	0x0800166d
 8001628:	0800166d 	.word	0x0800166d
 800162c:	0800166d 	.word	0x0800166d
 8001630:	08001653 	.word	0x08001653
				case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001638:	2200      	movs	r2, #0
 800163a:	635a      	str	r2, [r3, #52]	; 0x34
 800163c:	e016      	b.n	800166c <run+0x1b8>
				case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001642:	2200      	movs	r2, #0
 8001644:	639a      	str	r2, [r3, #56]	; 0x38
 8001646:	e011      	b.n	800166c <run+0x1b8>
				case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164c:	2200      	movs	r2, #0
 800164e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001650:	e00c      	b.n	800166c <run+0x1b8>
				case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001656:	2200      	movs	r2, #0
 8001658:	641a      	str	r2, [r3, #64]	; 0x40
 800165a:	e007      	b.n	800166c <run+0x1b8>
			}
//				AccelMotor->sumComplete++;
		}
	  else{
	      AccelMotor->USER_TIMER->ARR=(uint16_t)AccelMotor->_stepInterval;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	b29a      	uxth	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
 8001668:	e000      	b.n	800166c <run+0x1b8>
		return;
 800166a:	bf00      	nop
//			  if((distanceToGo(AccelMotor)>3) || (distanceToGo(AccelMotor)>-3)) AccelMotor->sumComplete =0;
		}
	}
//	if(AccelMotor->sumComplete>50) AccelMotor->isComplete=true;
}
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop

08001674 <runSpeed>:

char runSpeed(struct AccelStepperData * AccelMotor)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
    // Dont do anything unless we actually have a step interval
	  // khong lam gi neu nhu gia tri _stepInterval = 0
  if (!AccelMotor->_stepInterval){
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d137      	bne.n	80016f4 <runSpeed+0x80>
		switch(AccelMotor->TIM_CHANEL){
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001688:	2b0c      	cmp	r3, #12
 800168a:	d831      	bhi.n	80016f0 <runSpeed+0x7c>
 800168c:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <runSpeed+0x20>)
 800168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001692:	bf00      	nop
 8001694:	080016c9 	.word	0x080016c9
 8001698:	080016f1 	.word	0x080016f1
 800169c:	080016f1 	.word	0x080016f1
 80016a0:	080016f1 	.word	0x080016f1
 80016a4:	080016d3 	.word	0x080016d3
 80016a8:	080016f1 	.word	0x080016f1
 80016ac:	080016f1 	.word	0x080016f1
 80016b0:	080016f1 	.word	0x080016f1
 80016b4:	080016dd 	.word	0x080016dd
 80016b8:	080016f1 	.word	0x080016f1
 80016bc:	080016f1 	.word	0x080016f1
 80016c0:	080016f1 	.word	0x080016f1
 80016c4:	080016e7 	.word	0x080016e7
			case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=0; break;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016cc:	2200      	movs	r2, #0
 80016ce:	635a      	str	r2, [r3, #52]	; 0x34
 80016d0:	e00e      	b.n	80016f0 <runSpeed+0x7c>
			case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=0; break;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d6:	2200      	movs	r2, #0
 80016d8:	639a      	str	r2, [r3, #56]	; 0x38
 80016da:	e009      	b.n	80016f0 <runSpeed+0x7c>
			case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=0; break;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e0:	2200      	movs	r2, #0
 80016e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80016e4:	e004      	b.n	80016f0 <runSpeed+0x7c>
			case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=0; break;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ea:	2200      	movs	r2, #0
 80016ec:	641a      	str	r2, [r3, #64]	; 0x40
 80016ee:	bf00      	nop
		}
//		AccelMotor->isComplete = 1;
		return 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e013      	b.n	800171c <runSpeed+0xa8>
	}
	
	if (AccelMotor->_direction == DIRECTION_CW){ // Clockwise    
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d105      	bne.n	800170a <runSpeed+0x96>
	    AccelMotor->_currentPos += 1;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
 8001708:	e004      	b.n	8001714 <runSpeed+0xa0>
	  }
	else{
	    // Anticlockwise
	    AccelMotor->_currentPos -= 1;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	1e5a      	subs	r2, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	631a      	str	r2, [r3, #48]	; 0x30
	  }
	step(AccelMotor);  //tao 1 step pulse
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f805 	bl	8001724 <step>

	return 1;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <step>:

void step(struct AccelStepperData * AccelMotor)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	if(AccelMotor->_direction) 
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001732:	2b00      	cmp	r3, #0
 8001734:	d009      	beq.n	800174a <step+0x26>
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Dir,AccelMotor->GPIO_PIN_Dir,GPIO_PIN_RESET); 
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001740:	2200      	movs	r2, #0
 8001742:	4619      	mov	r1, r3
 8001744:	f005 f8a4 	bl	8006890 <HAL_GPIO_WritePin>
 8001748:	e008      	b.n	800175c <step+0x38>
	else 
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Dir,AccelMotor->GPIO_PIN_Dir,GPIO_PIN_SET);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001754:	2201      	movs	r2, #1
 8001756:	4619      	mov	r1, r3
 8001758:	f005 f89a 	bl	8006890 <HAL_GPIO_WritePin>
	if(AccelMotor->enable==1){
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001762:	2b01      	cmp	r3, #1
 8001764:	d108      	bne.n	8001778 <step+0x54>
			HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_SET);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001770:	2201      	movs	r2, #1
 8001772:	4619      	mov	r1, r3
 8001774:	f005 f88c 	bl	8006890 <HAL_GPIO_WritePin>
	}
	switch(AccelMotor->TIM_CHANEL){
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177c:	2b0c      	cmp	r3, #12
 800177e:	d831      	bhi.n	80017e4 <step+0xc0>
 8001780:	a201      	add	r2, pc, #4	; (adr r2, 8001788 <step+0x64>)
 8001782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001786:	bf00      	nop
 8001788:	080017bd 	.word	0x080017bd
 800178c:	080017e5 	.word	0x080017e5
 8001790:	080017e5 	.word	0x080017e5
 8001794:	080017e5 	.word	0x080017e5
 8001798:	080017c7 	.word	0x080017c7
 800179c:	080017e5 	.word	0x080017e5
 80017a0:	080017e5 	.word	0x080017e5
 80017a4:	080017e5 	.word	0x080017e5
 80017a8:	080017d1 	.word	0x080017d1
 80017ac:	080017e5 	.word	0x080017e5
 80017b0:	080017e5 	.word	0x080017e5
 80017b4:	080017e5 	.word	0x080017e5
 80017b8:	080017db 	.word	0x080017db
			case TIM_CHANNEL_1: AccelMotor->USER_TIMER->CCR1=2; break;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c0:	2202      	movs	r2, #2
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34
 80017c4:	e00e      	b.n	80017e4 <step+0xc0>
			case TIM_CHANNEL_2: AccelMotor->USER_TIMER->CCR2=2; break;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ca:	2202      	movs	r2, #2
 80017cc:	639a      	str	r2, [r3, #56]	; 0x38
 80017ce:	e009      	b.n	80017e4 <step+0xc0>
			case TIM_CHANNEL_3: AccelMotor->USER_TIMER->CCR3=2; break;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d4:	2202      	movs	r2, #2
 80017d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80017d8:	e004      	b.n	80017e4 <step+0xc0>
			case TIM_CHANNEL_4: AccelMotor->USER_TIMER->CCR4=2; break;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017de:	2202      	movs	r2, #2
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
 80017e2:	bf00      	nop
		}
//	AccelMotor->isComplete = 0;
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <isRunning>:

char isRunning(struct AccelStepperData * AccelMotor)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
    return !(AccelMotor->_speed == 0.0f && AccelMotor->_targetPos == AccelMotor->_currentPos);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80017fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	d105      	bne.n	8001810 <isRunning+0x24>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <isRunning+0x28>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <isRunning+0x2a>
 8001814:	2300      	movs	r3, #0
 8001816:	b2db      	uxtb	r3, r3
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <moveTo>:
void setCurentPos(struct AccelStepperData * AccelMotor,long position){
 AccelMotor->_currentPos=position;
}

void moveTo(struct AccelStepperData * AccelMotor,long absoluted)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
	AccelMotor->isStop = false;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	if(AccelMotor->_targetPos != absoluted){
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d005      	beq.n	800184c <moveTo+0x28>
	   AccelMotor->_targetPos = absoluted;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	601a      	str	r2, [r3, #0]
	   computeNewSpeed(AccelMotor);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fd3a 	bl	80012c0 <computeNewSpeed>
//		AccelMotor->USER_TIMER->CNT=0;
  }
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <enableStepper>:
	AccelMotor->_stepInterval = fabs(1000000.0f / speed);
	AccelMotor->_direction = (speed > 0.0f) ? DIRECTION_CW : DIRECTION_CCW;
    }
    AccelMotor->_speed = speed;
}
void enableStepper(struct AccelStepperData * AccelMotor,enum boolean onOff){
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	70fb      	strb	r3, [r7, #3]
	if(onOff==OFF) 
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <enableStepper+0x26>
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_SET);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001870:	2201      	movs	r2, #1
 8001872:	4619      	mov	r1, r3
 8001874:	f005 f80c 	bl	8006890 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_RESET);
}
 8001878:	e008      	b.n	800188c <enableStepper+0x38>
		HAL_GPIO_WritePin(AccelMotor->GPIO_PORT_Enable,AccelMotor->GPIO_PIN_Enable,GPIO_PIN_RESET);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001884:	2200      	movs	r2, #0
 8001886:	4619      	mov	r1, r3
 8001888:	f005 f802 	bl	8006890 <HAL_GPIO_WritePin>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800189a:	463b      	mov	r3, r7
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018a8:	4a22      	ldr	r2, [pc, #136]	; (8001934 <MX_ADC1_Init+0xa0>)
 80018aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80018ac:	4b20      	ldr	r3, [pc, #128]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018c2:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018d8:	4a17      	ldr	r2, [pc, #92]	; (8001938 <MX_ADC1_Init+0xa4>)
 80018da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018f6:	480e      	ldr	r0, [pc, #56]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018f8:	f003 f9d8 	bl	8004cac <HAL_ADC_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001902:	f002 fa91 	bl	8003e28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001906:	2304      	movs	r3, #4
 8001908:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800190a:	2301      	movs	r3, #1
 800190c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800190e:	2307      	movs	r3, #7
 8001910:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001912:	463b      	mov	r3, r7
 8001914:	4619      	mov	r1, r3
 8001916:	4806      	ldr	r0, [pc, #24]	; (8001930 <MX_ADC1_Init+0x9c>)
 8001918:	f003 fc20 	bl	800515c <HAL_ADC_ConfigChannel>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001922:	f002 fa81 	bl	8003e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2000af38 	.word	0x2000af38
 8001934:	40012000 	.word	0x40012000
 8001938:	0f000001 	.word	0x0f000001

0800193c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a32      	ldr	r2, [pc, #200]	; (8001a24 <HAL_ADC_MspInit+0xe8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d15e      	bne.n	8001a1c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <HAL_ADC_MspInit+0xec>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a30      	ldr	r2, [pc, #192]	; (8001a28 <HAL_ADC_MspInit+0xec>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <HAL_ADC_MspInit+0xec>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <HAL_ADC_MspInit+0xec>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a29      	ldr	r2, [pc, #164]	; (8001a28 <HAL_ADC_MspInit+0xec>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <HAL_ADC_MspInit+0xec>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_VOLT_SENSOR_Pin;
 8001996:	2310      	movs	r3, #16
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800199a:	2303      	movs	r3, #3
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VOLT_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	4820      	ldr	r0, [pc, #128]	; (8001a2c <HAL_ADC_MspInit+0xf0>)
 80019aa:	f004 fdd5 	bl	8006558 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019b0:	4a20      	ldr	r2, [pc, #128]	; (8001a34 <HAL_ADC_MspInit+0xf8>)
 80019b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019f0:	480f      	ldr	r0, [pc, #60]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 80019f2:	f003 febd 	bl	8005770 <HAL_DMA_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80019fc:	f002 fa14 	bl	8003e28 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 8001a04:	639a      	str	r2, [r3, #56]	; 0x38
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <HAL_ADC_MspInit+0xf4>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	210f      	movs	r1, #15
 8001a10:	2012      	movs	r0, #18
 8001a12:	f003 fe83 	bl	800571c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a16:	2012      	movs	r0, #18
 8001a18:	f003 fe9c 	bl	8005754 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3728      	adds	r7, #40	; 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40012000 	.word	0x40012000
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	2000af80 	.word	0x2000af80
 8001a34:	40026410 	.word	0x40026410

08001a38 <HAL_ADC_ConvCpltCallback>:

uint32_t battery_sum;								// Variable for Calculator Battery
uint16_t battery,battery_tik;						// Variable Battery: ex. battery=1623 => 16.23v

/* Ham Callback khi chuyen doi ADC hoan tat */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	battery_sum += ADC1->DR;						// tinh gia tri ADC trung binh trong 65000 lan lay mau , de dat duoc ket qua chinh xac
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <HAL_ADC_ConvCpltCallback+0x70>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <HAL_ADC_ConvCpltCallback+0x70>)
 8001a4c:	6013      	str	r3, [r2, #0]
	battery_tik ++;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <HAL_ADC_ConvCpltCallback+0x74>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	3301      	adds	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_ADC_ConvCpltCallback+0x74>)
 8001a58:	801a      	strh	r2, [r3, #0]
	if(battery_tik==65000){
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_ADC_ConvCpltCallback+0x74>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d117      	bne.n	8001a96 <HAL_ADC_ConvCpltCallback+0x5e>
		battery = ((battery_sum/battery_tik)*510)/100;  	//  Ratio ADC = 16,3/1,04 => Vbattery = Val_ADC*(3,3/1024)*(16,3/1,04) with ADC is 10bit
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <HAL_ADC_ConvCpltCallback+0x70>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a10      	ldr	r2, [pc, #64]	; (8001aac <HAL_ADC_ConvCpltCallback+0x74>)
 8001a6c:	8812      	ldrh	r2, [r2, #0]
 8001a6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a72:	4613      	mov	r3, r2
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	1a9b      	subs	r3, r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_ADC_ConvCpltCallback+0x78>)
 8001a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001a88:	801a      	strh	r2, [r3, #0]
		battery_sum =0;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_ADC_ConvCpltCallback+0x70>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
		battery_tik=0;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_ADC_ConvCpltCallback+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	801a      	strh	r2, [r3, #0]
	}
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40012000 	.word	0x40012000
 8001aa8:	2000afe0 	.word	0x2000afe0
 8001aac:	2000afe6 	.word	0x2000afe6
 8001ab0:	51eb851f 	.word	0x51eb851f
 8001ab4:	2000afe4 	.word	0x2000afe4

08001ab8 <batteryVoltInit>:

void batteryVoltInit()
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);						// Start ADC to get Battery Votl
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <batteryVoltInit+0x10>)
 8001abe:	f003 f939 	bl	8004d34 <HAL_ADC_Start_IT>
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	2000af38 	.word	0x2000af38

08001acc <batteryGet>:
uint16_t batteryGet()
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	return battery;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <batteryGet+0x14>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	2000afe4 	.word	0x2000afe4

08001ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <MX_DMA_Init+0xb8>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a2a      	ldr	r2, [pc, #168]	; (8001b9c <MX_DMA_Init+0xb8>)
 8001af4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <MX_DMA_Init+0xb8>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <MX_DMA_Init+0xb8>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a23      	ldr	r2, [pc, #140]	; (8001b9c <MX_DMA_Init+0xb8>)
 8001b10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <MX_DMA_Init+0xb8>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2105      	movs	r1, #5
 8001b26:	200b      	movs	r0, #11
 8001b28:	f003 fdf8 	bl	800571c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b2c:	200b      	movs	r0, #11
 8001b2e:	f003 fe11 	bl	8005754 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2105      	movs	r1, #5
 8001b36:	200c      	movs	r0, #12
 8001b38:	f003 fdf0 	bl	800571c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b3c:	200c      	movs	r0, #12
 8001b3e:	f003 fe09 	bl	8005754 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2105      	movs	r1, #5
 8001b46:	200d      	movs	r0, #13
 8001b48:	f003 fde8 	bl	800571c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b4c:	200d      	movs	r0, #13
 8001b4e:	f003 fe01 	bl	8005754 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2105      	movs	r1, #5
 8001b56:	2010      	movs	r0, #16
 8001b58:	f003 fde0 	bl	800571c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b5c:	2010      	movs	r0, #16
 8001b5e:	f003 fdf9 	bl	8005754 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2105      	movs	r1, #5
 8001b66:	202f      	movs	r0, #47	; 0x2f
 8001b68:	f003 fdd8 	bl	800571c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001b6c:	202f      	movs	r0, #47	; 0x2f
 8001b6e:	f003 fdf1 	bl	8005754 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2105      	movs	r1, #5
 8001b76:	2038      	movs	r0, #56	; 0x38
 8001b78:	f003 fdd0 	bl	800571c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b7c:	2038      	movs	r0, #56	; 0x38
 8001b7e:	f003 fde9 	bl	8005754 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2105      	movs	r1, #5
 8001b86:	203a      	movs	r0, #58	; 0x3a
 8001b88:	f003 fdc8 	bl	800571c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b8c:	203a      	movs	r0, #58	; 0x3a
 8001b8e:	f003 fde1 	bl	8005754 <HAL_NVIC_EnableIRQ>

}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001ba6:	2306      	movs	r3, #6
 8001ba8:	847b      	strh	r3, [r7, #34]	; 0x22
 8001baa:	2306      	movs	r3, #6
 8001bac:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	83fb      	strh	r3, [r7, #30]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8001bba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bbe:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001bc4:	4ba1      	ldr	r3, [pc, #644]	; (8001e4c <EE_Init+0x2ac>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001bca:	4ba1      	ldr	r3, [pc, #644]	; (8001e50 <EE_Init+0x2b0>)
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8001be0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001be2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00b      	beq.n	8001c02 <EE_Init+0x62>
 8001bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bee:	f280 8196 	bge.w	8001f1e <EE_Init+0x37e>
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 80f8 	beq.w	8001de8 <EE_Init+0x248>
 8001bf8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d050      	beq.n	8001ca2 <EE_Init+0x102>
 8001c00:	e18d      	b.n	8001f1e <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8001c02:	8c3b      	ldrh	r3, [r7, #32]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d116      	bne.n	8001c36 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001c08:	4890      	ldr	r0, [pc, #576]	; (8001e4c <EE_Init+0x2ac>)
 8001c0a:	f000 f9a9 	bl	8001f60 <EE_VerifyPageFullyErased>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f040 818e 	bne.w	8001f32 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001c16:	f107 0214 	add.w	r2, r7, #20
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f004 fb78 	bl	8006314 <HAL_FLASHEx_Erase>
 8001c24:	4603      	mov	r3, r0
 8001c26:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001c28:	7efb      	ldrb	r3, [r7, #27]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8181 	beq.w	8001f32 <EE_Init+0x392>
          {
            return FlashStatus;
 8001c30:	7efb      	ldrb	r3, [r7, #27]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	e185      	b.n	8001f42 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8001c36:	8c3b      	ldrh	r3, [r7, #32]
 8001c38:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d125      	bne.n	8001c8c <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001c40:	4882      	ldr	r0, [pc, #520]	; (8001e4c <EE_Init+0x2ac>)
 8001c42:	f000 f98d 	bl	8001f60 <EE_VerifyPageFullyErased>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10e      	bne.n	8001c6a <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001c4c:	f107 0214 	add.w	r2, r7, #20
 8001c50:	463b      	mov	r3, r7
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f004 fb5d 	bl	8006314 <HAL_FLASHEx_Erase>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001c5e:	7efb      	ldrb	r3, [r7, #27]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <EE_Init+0xca>
          {
            return FlashStatus;
 8001c64:	7efb      	ldrb	r3, [r7, #27]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	e16b      	b.n	8001f42 <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	4977      	ldr	r1, [pc, #476]	; (8001e50 <EE_Init+0x2b0>)
 8001c74:	2001      	movs	r0, #1
 8001c76:	f004 f997 	bl	8005fa8 <HAL_FLASH_Program>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001c7e:	7efb      	ldrb	r3, [r7, #27]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 8156 	beq.w	8001f32 <EE_Init+0x392>
        {
          return FlashStatus;
 8001c86:	7efb      	ldrb	r3, [r7, #27]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	e15a      	b.n	8001f42 <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001c8c:	f000 f9fa 	bl	8002084 <EE_Format>
 8001c90:	4603      	mov	r3, r0
 8001c92:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001c94:	7efb      	ldrb	r3, [r7, #27]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 814b 	beq.w	8001f32 <EE_Init+0x392>
        {
          return FlashStatus;
 8001c9c:	7efb      	ldrb	r3, [r7, #27]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	e14f      	b.n	8001f42 <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001ca2:	8c3b      	ldrh	r3, [r7, #32]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d163      	bne.n	8001d70 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001cac:	e030      	b.n	8001d10 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001cae:	4b69      	ldr	r3, [pc, #420]	; (8001e54 <EE_Init+0x2b4>)
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cb6:	4968      	ldr	r1, [pc, #416]	; (8001e58 <EE_Init+0x2b8>)
 8001cb8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d101      	bne.n	8001cc4 <EE_Init+0x124>
          {
            x = VarIdx;
 8001cc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cc2:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8001cc4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001cc6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d01d      	beq.n	8001d0a <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001cce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cd0:	4a61      	ldr	r2, [pc, #388]	; (8001e58 <EE_Init+0x2b8>)
 8001cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cd6:	4961      	ldr	r1, [pc, #388]	; (8001e5c <EE_Init+0x2bc>)
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 f967 	bl	8001fac <EE_ReadVariable>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001ce2:	8bbb      	ldrh	r3, [r7, #28]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d010      	beq.n	8001d0a <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001ce8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cea:	4a5b      	ldr	r2, [pc, #364]	; (8001e58 <EE_Init+0x2b8>)
 8001cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cf0:	4a5a      	ldr	r2, [pc, #360]	; (8001e5c <EE_Init+0x2bc>)
 8001cf2:	8812      	ldrh	r2, [r2, #0]
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fa5c 	bl	80021b4 <EE_VerifyPageFullWriteVariable>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001d00:	8bfb      	ldrh	r3, [r7, #30]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <EE_Init+0x16a>
              {
                return EepromStatus;
 8001d06:	8bfb      	ldrh	r3, [r7, #30]
 8001d08:	e11b      	b.n	8001f42 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001d10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d9cb      	bls.n	8001cae <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	494b      	ldr	r1, [pc, #300]	; (8001e4c <EE_Init+0x2ac>)
 8001d20:	2001      	movs	r0, #1
 8001d22:	f004 f941 	bl	8005fa8 <HAL_FLASH_Program>
 8001d26:	4603      	mov	r3, r0
 8001d28:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001d2a:	7efb      	ldrb	r3, [r7, #27]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <EE_Init+0x196>
        {
          return FlashStatus;
 8001d30:	7efb      	ldrb	r3, [r7, #27]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	e105      	b.n	8001f42 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001d36:	2303      	movs	r3, #3
 8001d38:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001d42:	4843      	ldr	r0, [pc, #268]	; (8001e50 <EE_Init+0x2b0>)
 8001d44:	f000 f90c 	bl	8001f60 <EE_VerifyPageFullyErased>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 80f3 	bne.w	8001f36 <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001d50:	f107 0214 	add.w	r2, r7, #20
 8001d54:	463b      	mov	r3, r7
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f004 fadb 	bl	8006314 <HAL_FLASHEx_Erase>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001d62:	7efb      	ldrb	r3, [r7, #27]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80e6 	beq.w	8001f36 <EE_Init+0x396>
          {
            return FlashStatus;
 8001d6a:	7efb      	ldrb	r3, [r7, #27]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	e0e8      	b.n	8001f42 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8001d70:	8c3b      	ldrh	r3, [r7, #32]
 8001d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d12b      	bne.n	8001dd2 <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001d82:	2302      	movs	r3, #2
 8001d84:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001d86:	4832      	ldr	r0, [pc, #200]	; (8001e50 <EE_Init+0x2b0>)
 8001d88:	f000 f8ea 	bl	8001f60 <EE_VerifyPageFullyErased>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10e      	bne.n	8001db0 <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001d92:	f107 0214 	add.w	r2, r7, #20
 8001d96:	463b      	mov	r3, r7
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 faba 	bl	8006314 <HAL_FLASHEx_Erase>
 8001da0:	4603      	mov	r3, r0
 8001da2:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001da4:	7efb      	ldrb	r3, [r7, #27]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <EE_Init+0x210>
          {
            return FlashStatus;
 8001daa:	7efb      	ldrb	r3, [r7, #27]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	e0c8      	b.n	8001f42 <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	4924      	ldr	r1, [pc, #144]	; (8001e4c <EE_Init+0x2ac>)
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f004 f8f4 	bl	8005fa8 <HAL_FLASH_Program>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001dc4:	7efb      	ldrb	r3, [r7, #27]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80b5 	beq.w	8001f36 <EE_Init+0x396>
        {
          return FlashStatus;
 8001dcc:	7efb      	ldrb	r3, [r7, #27]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	e0b7      	b.n	8001f42 <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001dd2:	f000 f957 	bl	8002084 <EE_Format>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001dda:	7efb      	ldrb	r3, [r7, #27]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80aa 	beq.w	8001f36 <EE_Init+0x396>
        {
          return FlashStatus;
 8001de2:	7efb      	ldrb	r3, [r7, #27]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	e0ac      	b.n	8001f42 <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8001de8:	8c3b      	ldrh	r3, [r7, #32]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10a      	bne.n	8001e04 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001dee:	f000 f949 	bl	8002084 <EE_Format>
 8001df2:	4603      	mov	r3, r0
 8001df4:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001df6:	7efb      	ldrb	r3, [r7, #27]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 809e 	beq.w	8001f3a <EE_Init+0x39a>
        {
          return FlashStatus;
 8001dfe:	7efb      	ldrb	r3, [r7, #27]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	e09e      	b.n	8001f42 <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8001e04:	8c3b      	ldrh	r3, [r7, #32]
 8001e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d11b      	bne.n	8001e46 <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001e12:	2301      	movs	r3, #1
 8001e14:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001e16:	2302      	movs	r3, #2
 8001e18:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <EE_Init+0x2b0>)
 8001e1c:	f000 f8a0 	bl	8001f60 <EE_VerifyPageFullyErased>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 8089 	bne.w	8001f3a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e28:	f107 0214 	add.w	r2, r7, #20
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f004 fa6f 	bl	8006314 <HAL_FLASHEx_Erase>
 8001e36:	4603      	mov	r3, r0
 8001e38:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001e3a:	7efb      	ldrb	r3, [r7, #27]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d07c      	beq.n	8001f3a <EE_Init+0x39a>
          {
            return FlashStatus;
 8001e40:	7efb      	ldrb	r3, [r7, #27]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	e07d      	b.n	8001f42 <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001e4a:	e03a      	b.n	8001ec2 <EE_Init+0x322>
 8001e4c:	08030000 	.word	0x08030000
 8001e50:	08034000 	.word	0x08034000
 8001e54:	08030006 	.word	0x08030006
 8001e58:	20000004 	.word	0x20000004
 8001e5c:	2000020e 	.word	0x2000020e
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001e60:	4b3a      	ldr	r3, [pc, #232]	; (8001f4c <EE_Init+0x3ac>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e68:	4939      	ldr	r1, [pc, #228]	; (8001f50 <EE_Init+0x3b0>)
 8001e6a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d101      	bne.n	8001e76 <EE_Init+0x2d6>
          {
            x = VarIdx;
 8001e72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e74:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8001e76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001e78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d01d      	beq.n	8001ebc <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001e80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e82:	4a33      	ldr	r2, [pc, #204]	; (8001f50 <EE_Init+0x3b0>)
 8001e84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e88:	4932      	ldr	r1, [pc, #200]	; (8001f54 <EE_Init+0x3b4>)
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f88e 	bl	8001fac <EE_ReadVariable>
 8001e90:	4603      	mov	r3, r0
 8001e92:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001e94:	8bbb      	ldrh	r3, [r7, #28]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d010      	beq.n	8001ebc <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001e9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e9c:	4a2c      	ldr	r2, [pc, #176]	; (8001f50 <EE_Init+0x3b0>)
 8001e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ea2:	4a2c      	ldr	r2, [pc, #176]	; (8001f54 <EE_Init+0x3b4>)
 8001ea4:	8812      	ldrh	r2, [r2, #0]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 f983 	bl	80021b4 <EE_VerifyPageFullWriteVariable>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001eb2:	8bfb      	ldrh	r3, [r7, #30]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <EE_Init+0x31c>
              {
                return EepromStatus;
 8001eb8:	8bfb      	ldrh	r3, [r7, #30]
 8001eba:	e042      	b.n	8001f42 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001ebc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001ec2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d9cb      	bls.n	8001e60 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	4921      	ldr	r1, [pc, #132]	; (8001f58 <EE_Init+0x3b8>)
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f004 f868 	bl	8005fa8 <HAL_FLASH_Program>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001edc:	7efb      	ldrb	r3, [r7, #27]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <EE_Init+0x348>
        {
          return FlashStatus;
 8001ee2:	7efb      	ldrb	r3, [r7, #27]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	e02c      	b.n	8001f42 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001ef4:	4819      	ldr	r0, [pc, #100]	; (8001f5c <EE_Init+0x3bc>)
 8001ef6:	f000 f833 	bl	8001f60 <EE_VerifyPageFullyErased>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d11c      	bne.n	8001f3a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001f00:	f107 0214 	add.w	r2, r7, #20
 8001f04:	463b      	mov	r3, r7
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f004 fa03 	bl	8006314 <HAL_FLASHEx_Erase>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001f12:	7efb      	ldrb	r3, [r7, #27]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d010      	beq.n	8001f3a <EE_Init+0x39a>
          {
            return FlashStatus;
 8001f18:	7efb      	ldrb	r3, [r7, #27]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	e011      	b.n	8001f42 <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001f1e:	f000 f8b1 	bl	8002084 <EE_Format>
 8001f22:	4603      	mov	r3, r0
 8001f24:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001f26:	7efb      	ldrb	r3, [r7, #27]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <EE_Init+0x39e>
      {
        return FlashStatus;
 8001f2c:	7efb      	ldrb	r3, [r7, #27]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	e007      	b.n	8001f42 <EE_Init+0x3a2>
      break;
 8001f32:	bf00      	nop
 8001f34:	e004      	b.n	8001f40 <EE_Init+0x3a0>
      break;
 8001f36:	bf00      	nop
 8001f38:	e002      	b.n	8001f40 <EE_Init+0x3a0>
      break;
 8001f3a:	bf00      	nop
 8001f3c:	e000      	b.n	8001f40 <EE_Init+0x3a0>
      }
      break;
 8001f3e:	bf00      	nop
  }

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3728      	adds	r7, #40	; 0x28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	08034006 	.word	0x08034006
 8001f50:	20000004 	.word	0x20000004
 8001f54:	2000020e 	.word	0x2000020e
 8001f58:	08034000 	.word	0x08034000
 8001f5c:	08030000 	.word	0x08030000

08001f60 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8001f6c:	f245 5355 	movw	r3, #21845	; 0x5555
 8001f70:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8001f72:	e00d      	b.n	8001f90 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8001f7a:	897b      	ldrh	r3, [r7, #10]
 8001f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d002      	beq.n	8001f8a <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]

      break;
 8001f88:	e006      	b.n	8001f98 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <EE_VerifyPageFullyErased+0x48>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d3ed      	bcc.n	8001f74 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	b29b      	uxth	r3, r3
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	08034000 	.word	0x08034000

08001fac <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001fbc:	f245 5355 	movw	r3, #21845	; 0x5555
 8001fc0:	81bb      	strh	r3, [r7, #12]
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <EE_ReadVariable+0x8c>)
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <EE_ReadVariable+0x8c>)
 8001fcc:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f000 f8aa 	bl	8002128 <EE_FindValidPage>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001fd8:	89fb      	ldrh	r3, [r7, #14]
 8001fda:	2bab      	cmp	r3, #171	; 0xab
 8001fdc:	d101      	bne.n	8001fe2 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8001fde:	23ab      	movs	r3, #171	; 0xab
 8001fe0:	e025      	b.n	800202e <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001fe2:	89fb      	ldrh	r3, [r7, #14]
 8001fe4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001fe8:	330c      	adds	r3, #12
 8001fea:	039b      	lsls	r3, r3, #14
 8001fec:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001fee:	89fb      	ldrh	r3, [r7, #14]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	039a      	lsls	r2, r3, #14
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <EE_ReadVariable+0x90>)
 8001ff6:	4413      	add	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8001ffa:	e012      	b.n	8002022 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8002002:	89ba      	ldrh	r2, [r7, #12]
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	429a      	cmp	r2, r3
 8002008:	d108      	bne.n	800201c <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	3b02      	subs	r3, #2
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	b29a      	uxth	r2, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	82fb      	strh	r3, [r7, #22]

      break;
 800201a:	e007      	b.n	800202c <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	3b04      	subs	r3, #4
 8002020:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3302      	adds	r3, #2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	429a      	cmp	r2, r3
 800202a:	d8e7      	bhi.n	8001ffc <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 800202c:	8afb      	ldrh	r3, [r7, #22]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	08030000 	.word	0x08030000
 800203c:	0802fffe 	.word	0x0802fffe

08002040 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	460a      	mov	r2, r1
 800204a:	80fb      	strh	r3, [r7, #6]
 800204c:	4613      	mov	r3, r2
 800204e:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8002054:	88ba      	ldrh	r2, [r7, #4]
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f8aa 	bl	80021b4 <EE_VerifyPageFullWriteVariable>
 8002060:	4603      	mov	r3, r0
 8002062:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8002064:	89fb      	ldrh	r3, [r7, #14]
 8002066:	2b80      	cmp	r3, #128	; 0x80
 8002068:	d107      	bne.n	800207a <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 800206a:	88ba      	ldrh	r2, [r7, #4]
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f000 f8f9 	bl	8002268 <EE_PageTransfer>
 8002076:	4603      	mov	r3, r0
 8002078:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 800207a:	89fb      	ldrh	r3, [r7, #14]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8002096:	2302      	movs	r3, #2
 8002098:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 800209a:	2301      	movs	r3, #1
 800209c:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800209e:	2302      	movs	r3, #2
 80020a0:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80020a2:	481f      	ldr	r0, [pc, #124]	; (8002120 <EE_Format+0x9c>)
 80020a4:	f7ff ff5c 	bl	8001f60 <EE_VerifyPageFullyErased>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10d      	bne.n	80020ca <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 80020ae:	f107 0218 	add.w	r2, r7, #24
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 f92c 	bl	8006314 <HAL_FLASHEx_Erase>
 80020bc:	4603      	mov	r3, r0
 80020be:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80020c0:	7ffb      	ldrb	r3, [r7, #31]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <EE_Format+0x46>
    {
      return FlashStatus;
 80020c6:	7ffb      	ldrb	r3, [r7, #31]
 80020c8:	e025      	b.n	8002116 <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	4913      	ldr	r1, [pc, #76]	; (8002120 <EE_Format+0x9c>)
 80020d4:	2001      	movs	r0, #1
 80020d6:	f003 ff67 	bl	8005fa8 <HAL_FLASH_Program>
 80020da:	4603      	mov	r3, r0
 80020dc:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80020de:	7ffb      	ldrb	r3, [r7, #31]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <EE_Format+0x64>
  {
    return FlashStatus;
 80020e4:	7ffb      	ldrb	r3, [r7, #31]
 80020e6:	e016      	b.n	8002116 <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 80020e8:	2303      	movs	r3, #3
 80020ea:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80020ec:	480d      	ldr	r0, [pc, #52]	; (8002124 <EE_Format+0xa0>)
 80020ee:	f7ff ff37 	bl	8001f60 <EE_VerifyPageFullyErased>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10d      	bne.n	8002114 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 80020f8:	f107 0218 	add.w	r2, r7, #24
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f004 f907 	bl	8006314 <HAL_FLASHEx_Erase>
 8002106:	4603      	mov	r3, r0
 8002108:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 800210a:	7ffb      	ldrb	r3, [r7, #31]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <EE_Format+0x90>
    {
      return FlashStatus;
 8002110:	7ffb      	ldrb	r3, [r7, #31]
 8002112:	e000      	b.n	8002116 <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3720      	adds	r7, #32
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	08030000 	.word	0x08030000
 8002124:	08034000 	.word	0x08034000

08002128 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8002132:	2306      	movs	r3, #6
 8002134:	81fb      	strh	r3, [r7, #14]
 8002136:	2306      	movs	r3, #6
 8002138:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800213a:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <EE_FindValidPage+0x84>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <EE_FindValidPage+0x88>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01b      	beq.n	8002184 <EE_FindValidPage+0x5c>
 800214c:	2b01      	cmp	r3, #1
 800214e:	d125      	bne.n	800219c <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8002150:	89bb      	ldrh	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d108      	bne.n	8002168 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8002156:	89fb      	ldrh	r3, [r7, #14]
 8002158:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800215c:	4293      	cmp	r3, r2
 800215e:	d101      	bne.n	8002164 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8002160:	2300      	movs	r3, #0
 8002162:	e01c      	b.n	800219e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8002164:	2301      	movs	r3, #1
 8002166:	e01a      	b.n	800219e <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8002168:	89fb      	ldrh	r3, [r7, #14]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d108      	bne.n	8002180 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800216e:	89bb      	ldrh	r3, [r7, #12]
 8002170:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002174:	4293      	cmp	r3, r2
 8002176:	d101      	bne.n	800217c <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8002178:	2301      	movs	r3, #1
 800217a:	e010      	b.n	800219e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 800217c:	2300      	movs	r3, #0
 800217e:	e00e      	b.n	800219e <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8002180:	23ab      	movs	r3, #171	; 0xab
 8002182:	e00c      	b.n	800219e <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8002184:	89fb      	ldrh	r3, [r7, #14]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800218a:	2300      	movs	r3, #0
 800218c:	e007      	b.n	800219e <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800218e:	89bb      	ldrh	r3, [r7, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8002194:	2301      	movs	r3, #1
 8002196:	e002      	b.n	800219e <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8002198:	23ab      	movs	r3, #171	; 0xab
 800219a:	e000      	b.n	800219e <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 800219c:	2300      	movs	r3, #0
  }
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	08030000 	.word	0x08030000
 80021b0:	08034000 	.word	0x08034000

080021b4 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	460a      	mov	r2, r1
 80021be:	80fb      	strh	r3, [r7, #6]
 80021c0:	4613      	mov	r3, r2
 80021c2:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 80021cc:	4b23      	ldr	r3, [pc, #140]	; (800225c <EE_VerifyPageFullWriteVariable+0xa8>)
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	4b23      	ldr	r3, [pc, #140]	; (8002260 <EE_VerifyPageFullWriteVariable+0xac>)
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7ff ffa7 	bl	8002128 <EE_FindValidPage>
 80021da:	4603      	mov	r3, r0
 80021dc:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80021de:	8a3b      	ldrh	r3, [r7, #16]
 80021e0:	2bab      	cmp	r3, #171	; 0xab
 80021e2:	d101      	bne.n	80021e8 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 80021e4:	23ab      	movs	r3, #171	; 0xab
 80021e6:	e035      	b.n	8002254 <EE_VerifyPageFullWriteVariable+0xa0>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80021e8:	8a3b      	ldrh	r3, [r7, #16]
 80021ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80021ee:	330c      	adds	r3, #12
 80021f0:	039b      	lsls	r3, r3, #14
 80021f2:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 80021f4:	8a3b      	ldrh	r3, [r7, #16]
 80021f6:	3301      	adds	r3, #1
 80021f8:	039a      	lsls	r2, r3, #14
 80021fa:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <EE_VerifyPageFullWriteVariable+0xb0>)
 80021fc:	4413      	add	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8002200:	e023      	b.n	800224a <EE_VerifyPageFullWriteVariable+0x96>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800220a:	d11b      	bne.n	8002244 <EE_VerifyPageFullWriteVariable+0x90>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 800220c:	88ba      	ldrh	r2, [r7, #4]
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	6979      	ldr	r1, [r7, #20]
 8002214:	2001      	movs	r0, #1
 8002216:	f003 fec7 	bl	8005fa8 <HAL_FLASH_Program>
 800221a:	4603      	mov	r3, r0
 800221c:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <EE_VerifyPageFullWriteVariable+0x76>
      {
        return FlashStatus;
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	b29b      	uxth	r3, r3
 8002228:	e014      	b.n	8002254 <EE_VerifyPageFullWriteVariable+0xa0>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	1c99      	adds	r1, r3, #2
 800222e:	88fa      	ldrh	r2, [r7, #6]
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	2001      	movs	r0, #1
 8002236:	f003 feb7 	bl	8005fa8 <HAL_FLASH_Program>
 800223a:	4603      	mov	r3, r0
 800223c:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 800223e:	7cfb      	ldrb	r3, [r7, #19]
 8002240:	b29b      	uxth	r3, r3
 8002242:	e007      	b.n	8002254 <EE_VerifyPageFullWriteVariable+0xa0>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	3304      	adds	r3, #4
 8002248:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	429a      	cmp	r2, r3
 8002250:	d3d7      	bcc.n	8002202 <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8002252:	2380      	movs	r3, #128	; 0x80
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	08030000 	.word	0x08030000
 8002260:	08034000 	.word	0x08034000
 8002264:	0802ffff 	.word	0x0802ffff

08002268 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	; 0x30
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	460a      	mov	r2, r1
 8002272:	80fb      	strh	r3, [r7, #6]
 8002274:	4613      	mov	r3, r2
 8002276:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 800227e:	4b54      	ldr	r3, [pc, #336]	; (80023d0 <EE_PageTransfer+0x168>)
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 8002282:	2300      	movs	r3, #0
 8002284:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	84bb      	strh	r3, [r7, #36]	; 0x24
 800228a:	2300      	movs	r3, #0
 800228c:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	847b      	strh	r3, [r7, #34]	; 0x22
 8002292:	2300      	movs	r3, #0
 8002294:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800229a:	2000      	movs	r0, #0
 800229c:	f7ff ff44 	bl	8002128 <EE_FindValidPage>
 80022a0:	4603      	mov	r3, r0
 80022a2:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 80022a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d104      	bne.n	80022b4 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 80022aa:	4b49      	ldr	r3, [pc, #292]	; (80023d0 <EE_PageTransfer+0x168>)
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 80022ae:	2303      	movs	r3, #3
 80022b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80022b2:	e009      	b.n	80022c8 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 80022b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d104      	bne.n	80022c4 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 80022ba:	4b46      	ldr	r3, [pc, #280]	; (80023d4 <EE_PageTransfer+0x16c>)
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 80022be:	2302      	movs	r3, #2
 80022c0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80022c2:	e001      	b.n	80022c8 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80022c4:	23ab      	movs	r3, #171	; 0xab
 80022c6:	e07e      	b.n	80023c6 <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 80022c8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022d2:	2001      	movs	r0, #1
 80022d4:	f003 fe68 	bl	8005fa8 <HAL_FLASH_Program>
 80022d8:	4603      	mov	r3, r0
 80022da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80022de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 80022e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	e06b      	b.n	80023c6 <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80022ee:	88ba      	ldrh	r2, [r7, #4]
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff5d 	bl	80021b4 <EE_VerifyPageFullWriteVariable>
 80022fa:	4603      	mov	r3, r0
 80022fc:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 80022fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8002304:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002306:	e05e      	b.n	80023c6 <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002308:	2300      	movs	r3, #0
 800230a:	853b      	strh	r3, [r7, #40]	; 0x28
 800230c:	e027      	b.n	800235e <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800230e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002310:	4a31      	ldr	r2, [pc, #196]	; (80023d8 <EE_PageTransfer+0x170>)
 8002312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002316:	88fa      	ldrh	r2, [r7, #6]
 8002318:	429a      	cmp	r2, r3
 800231a:	d01d      	beq.n	8002358 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800231c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800231e:	4a2e      	ldr	r2, [pc, #184]	; (80023d8 <EE_PageTransfer+0x170>)
 8002320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002324:	492d      	ldr	r1, [pc, #180]	; (80023dc <EE_PageTransfer+0x174>)
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fe40 	bl	8001fac <EE_ReadVariable>
 800232c:	4603      	mov	r3, r0
 800232e:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8002330:	8c3b      	ldrh	r3, [r7, #32]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d010      	beq.n	8002358 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8002336:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002338:	4a27      	ldr	r2, [pc, #156]	; (80023d8 <EE_PageTransfer+0x170>)
 800233a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800233e:	4a27      	ldr	r2, [pc, #156]	; (80023dc <EE_PageTransfer+0x174>)
 8002340:	8812      	ldrh	r2, [r2, #0]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff35 	bl	80021b4 <EE_VerifyPageFullWriteVariable>
 800234a:	4603      	mov	r3, r0
 800234c:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 800234e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8002354:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002356:	e036      	b.n	80023c6 <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800235a:	3301      	adds	r3, #1
 800235c:	853b      	strh	r3, [r7, #40]	; 0x28
 800235e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002360:	2b02      	cmp	r3, #2
 8002362:	d9d4      	bls.n	800230e <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8002368:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800236a:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 800236c:	2301      	movs	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002370:	2302      	movs	r3, #2
 8002372:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8002374:	f107 021c 	add.w	r2, r7, #28
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f003 ffc8 	bl	8006314 <HAL_FLASHEx_Erase>
 8002384:	4603      	mov	r3, r0
 8002386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800238a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8002392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002396:	b29b      	uxth	r3, r3
 8002398:	e015      	b.n	80023c6 <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023a4:	2001      	movs	r0, #1
 80023a6:	f003 fdff 	bl	8005fa8 <HAL_FLASH_Program>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80023b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 80023b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023bc:	b29b      	uxth	r3, r3
 80023be:	e002      	b.n	80023c6 <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 80023c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023c4:	b29b      	uxth	r3, r3
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3730      	adds	r7, #48	; 0x30
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	08030000 	.word	0x08030000
 80023d4:	08034000 	.word	0x08034000
 80023d8:	20000004 	.word	0x20000004
 80023dc:	2000020e 	.word	0x2000020e

080023e0 <HAL_TIM_PWM_PulseFinishedCallback>:
/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

// for Motor J1 J2
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)								// Stepper J1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a40      	ldr	r2, [pc, #256]	; (80024f0 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d138      	bne.n	8002464 <HAL_TIM_PWM_PulseFinishedCallback+0x84>
	{
		if(user_calibase==false) motor_j1_data._currentPos = data_AS5600_M1;			// Set Current Position
 80023f2:	4b40      	ldr	r3, [pc, #256]	; (80024f4 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	f083 0301 	eor.w	r3, r3, #1
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d004      	beq.n	800240a <HAL_TIM_PWM_PulseFinishedCallback+0x2a>
 8002400:	4b3d      	ldr	r3, [pc, #244]	; (80024f8 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
		osSemaphoreRelease(binarySem_motorJ1Handle);		// Release Semaphore for Calculator Stepper (run)
 800240a:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f00a f8ac 	bl	800c56c <osSemaphoreRelease>
		if(user_calibase) return;
 8002414:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d162      	bne.n	80024e2 <HAL_TIM_PWM_PulseFinishedCallback+0x102>
		accel_j1_tik++;
 800241c:	4b39      	ldr	r3, [pc, #228]	; (8002504 <HAL_TIM_PWM_PulseFinishedCallback+0x124>)
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	4b37      	ldr	r3, [pc, #220]	; (8002504 <HAL_TIM_PWM_PulseFinishedCallback+0x124>)
 8002426:	801a      	strh	r2, [r3, #0]
		if(accel_j1_tik==1000)								// Changer Accel
 8002428:	4b36      	ldr	r3, [pc, #216]	; (8002504 <HAL_TIM_PWM_PulseFinishedCallback+0x124>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002430:	d118      	bne.n	8002464 <HAL_TIM_PWM_PulseFinishedCallback+0x84>
		{
			accel_j1_tik=0;
 8002432:	4b34      	ldr	r3, [pc, #208]	; (8002504 <HAL_TIM_PWM_PulseFinishedCallback+0x124>)
 8002434:	2200      	movs	r2, #0
 8002436:	801a      	strh	r2, [r3, #0]
			long distance = distanceToGo(&motor_j1_data);
 8002438:	4830      	ldr	r0, [pc, #192]	; (80024fc <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 800243a:	f7ff f82b 	bl	8001494 <distanceToGo>
 800243e:	60f8      	str	r0, [r7, #12]
			if(labs(distance) < 100){
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002446:	db08      	blt.n	800245a <HAL_TIM_PWM_PulseFinishedCallback+0x7a>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b63      	cmp	r3, #99	; 0x63
 800244c:	dc05      	bgt.n	800245a <HAL_TIM_PWM_PulseFinishedCallback+0x7a>
				setAcceleration(&motor_j1_data, j1_ACCEL_MIN);
 800244e:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8002508 <HAL_TIM_PWM_PulseFinishedCallback+0x128>
 8002452:	482a      	ldr	r0, [pc, #168]	; (80024fc <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8002454:	f7fe fec0 	bl	80011d8 <setAcceleration>
 8002458:	e004      	b.n	8002464 <HAL_TIM_PWM_PulseFinishedCallback+0x84>
			}else{
				setAcceleration(&motor_j1_data, J1_ACCEL_MAX);
 800245a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800250c <HAL_TIM_PWM_PulseFinishedCallback+0x12c>
 800245e:	4827      	ldr	r0, [pc, #156]	; (80024fc <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8002460:	f7fe feba 	bl	80011d8 <setAcceleration>
			}
		}
	}
	if(htim->Instance==TIM2)								// Stepper J2
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246c:	d13c      	bne.n	80024e8 <HAL_TIM_PWM_PulseFinishedCallback+0x108>
		{
			if(user_calibase == false) motor_j2_data._currentPos = data_AS5600_M2;		// Set Current Position
 800246e:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	f083 0301 	eor.w	r3, r3, #1
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <HAL_TIM_PWM_PulseFinishedCallback+0xa6>
 800247c:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4b24      	ldr	r3, [pc, #144]	; (8002514 <HAL_TIM_PWM_PulseFinishedCallback+0x134>)
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
			osSemaphoreRelease(binarySem_motorJ2Handle);	// Release Semaphore for Calculator Stepper (run)
 8002486:	4b24      	ldr	r3, [pc, #144]	; (8002518 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f00a f86e 	bl	800c56c <osSemaphoreRelease>
			if(user_calibase) return;
 8002490:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d126      	bne.n	80024e6 <HAL_TIM_PWM_PulseFinishedCallback+0x106>
			accel_j2_tik++;
 8002498:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_TIM_PWM_PulseFinishedCallback+0x13c>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	3301      	adds	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	4b1e      	ldr	r3, [pc, #120]	; (800251c <HAL_TIM_PWM_PulseFinishedCallback+0x13c>)
 80024a2:	801a      	strh	r2, [r3, #0]
			if(accel_j2_tik==500)
 80024a4:	4b1d      	ldr	r3, [pc, #116]	; (800251c <HAL_TIM_PWM_PulseFinishedCallback+0x13c>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024ac:	d11c      	bne.n	80024e8 <HAL_TIM_PWM_PulseFinishedCallback+0x108>
			{
				accel_j2_tik=0;
 80024ae:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_TIM_PWM_PulseFinishedCallback+0x13c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	801a      	strh	r2, [r3, #0]
				long distance = distanceToGo(&motor_j2_data);
 80024b4:	4817      	ldr	r0, [pc, #92]	; (8002514 <HAL_TIM_PWM_PulseFinishedCallback+0x134>)
 80024b6:	f7fe ffed 	bl	8001494 <distanceToGo>
 80024ba:	60b8      	str	r0, [r7, #8]
				if(labs(distance) < 100){
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80024c2:	db08      	blt.n	80024d6 <HAL_TIM_PWM_PulseFinishedCallback+0xf6>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b63      	cmp	r3, #99	; 0x63
 80024c8:	dc05      	bgt.n	80024d6 <HAL_TIM_PWM_PulseFinishedCallback+0xf6>
					setAcceleration(&motor_j2_data, J2_ACCEL_MIN);
 80024ca:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002508 <HAL_TIM_PWM_PulseFinishedCallback+0x128>
 80024ce:	4811      	ldr	r0, [pc, #68]	; (8002514 <HAL_TIM_PWM_PulseFinishedCallback+0x134>)
 80024d0:	f7fe fe82 	bl	80011d8 <setAcceleration>
 80024d4:	e008      	b.n	80024e8 <HAL_TIM_PWM_PulseFinishedCallback+0x108>
				}else{
					setAcceleration(&motor_j2_data, J2_ACCEL_MAX);
 80024d6:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002520 <HAL_TIM_PWM_PulseFinishedCallback+0x140>
 80024da:	480e      	ldr	r0, [pc, #56]	; (8002514 <HAL_TIM_PWM_PulseFinishedCallback+0x134>)
 80024dc:	f7fe fe7c 	bl	80011d8 <setAcceleration>
 80024e0:	e002      	b.n	80024e8 <HAL_TIM_PWM_PulseFinishedCallback+0x108>
		if(user_calibase) return;
 80024e2:	bf00      	nop
 80024e4:	e000      	b.n	80024e8 <HAL_TIM_PWM_PulseFinishedCallback+0x108>
			if(user_calibase) return;
 80024e6:	bf00      	nop
				}
			}
		}
}
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40000400 	.word	0x40000400
 80024f4:	20000211 	.word	0x20000211
 80024f8:	2000af36 	.word	0x2000af36
 80024fc:	2000b064 	.word	0x2000b064
 8002500:	2000aff8 	.word	0x2000aff8
 8002504:	20000214 	.word	0x20000214
 8002508:	47c35000 	.word	0x47c35000
 800250c:	48f42400 	.word	0x48f42400
 8002510:	2000af34 	.word	0x2000af34
 8002514:	2000b004 	.word	0x2000b004
 8002518:	2000b060 	.word	0x2000b060
 800251c:	20000216 	.word	0x20000216
 8002520:	48c35000 	.word	0x48c35000

08002524 <HAL_I2C_AddrCallback>:

// I2C-Interface
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
 8002530:	4613      	mov	r3, r2
 8002532:	803b      	strh	r3, [r7, #0]
	if(hi2c->Instance==I2C2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a0c      	ldr	r2, [pc, #48]	; (800256c <HAL_I2C_AddrCallback+0x48>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d112      	bne.n	8002564 <HAL_I2C_AddrCallback+0x40>
	{
		if(TransferDirection == I2C_DIRECTION_TRANSMIT)
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d106      	bne.n	8002552 <HAL_I2C_AddrCallback+0x2e>
		{
			HAL_I2C_Slave_Seq_Receive_DMA(&hi2c2,data_rev_master,4,I2C_FIRST_AND_LAST_FRAME);
 8002544:	2308      	movs	r3, #8
 8002546:	2204      	movs	r2, #4
 8002548:	4909      	ldr	r1, [pc, #36]	; (8002570 <HAL_I2C_AddrCallback+0x4c>)
 800254a:	480a      	ldr	r0, [pc, #40]	; (8002574 <HAL_I2C_AddrCallback+0x50>)
 800254c:	f004 fde6 	bl	800711c <HAL_I2C_Slave_Seq_Receive_DMA>
		}else if(TransferDirection == I2C_DIRECTION_RECEIVE)
		{
			HAL_I2C_Slave_Seq_Transmit_DMA(&hi2c2, data_trans_master, 7, I2C_LAST_FRAME);
		}
	}
}
 8002550:	e008      	b.n	8002564 <HAL_I2C_AddrCallback+0x40>
		}else if(TransferDirection == I2C_DIRECTION_RECEIVE)
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_I2C_AddrCallback+0x40>
			HAL_I2C_Slave_Seq_Transmit_DMA(&hi2c2, data_trans_master, 7, I2C_LAST_FRAME);
 8002558:	2320      	movs	r3, #32
 800255a:	2207      	movs	r2, #7
 800255c:	4906      	ldr	r1, [pc, #24]	; (8002578 <HAL_I2C_AddrCallback+0x54>)
 800255e:	4805      	ldr	r0, [pc, #20]	; (8002574 <HAL_I2C_AddrCallback+0x50>)
 8002560:	f004 fca2 	bl	8006ea8 <HAL_I2C_Slave_Seq_Transmit_DMA>
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40005800 	.word	0x40005800
 8002570:	2000aff0 	.word	0x2000aff0
 8002574:	2000b1d0 	.word	0x2000b1d0
 8002578:	2000b058 	.word	0x2000b058

0800257c <HAL_I2C_ListenCpltCallback>:
// 	I2C2 for interface
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(&hi2c2);
 8002584:	4803      	ldr	r0, [pc, #12]	; (8002594 <HAL_I2C_ListenCpltCallback+0x18>)
 8002586:	f004 ff03 	bl	8007390 <HAL_I2C_EnableListen_IT>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	2000b1d0 	.word	0x2000b1d0

08002598 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==I2C2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a05      	ldr	r2, [pc, #20]	; (80025bc <HAL_I2C_SlaveRxCpltCallback+0x24>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d104      	bne.n	80025b4 <HAL_I2C_SlaveRxCpltCallback+0x1c>
	{
		osSemaphoreRelease(binarySem_masterCmdHandle);// sau khi nhan duoc lenh tu master
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f009 ffdc 	bl	800c56c <osSemaphoreRelease>
	}
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40005800 	.word	0x40005800
 80025c0:	2000b0bc 	.word	0x2000b0bc

080025c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80025d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	4a06      	ldr	r2, [pc, #24]	; (80025f4 <vApplicationGetIdleTaskMemory+0x30>)
 80025da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2280      	movs	r2, #128	; 0x80
 80025e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	2000021c 	.word	0x2000021c
 80025f4:	20000270 	.word	0x20000270

080025f8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4a07      	ldr	r2, [pc, #28]	; (8002624 <vApplicationGetTimerTaskMemory+0x2c>)
 8002608:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	4a06      	ldr	r2, [pc, #24]	; (8002628 <vApplicationGetTimerTaskMemory+0x30>)
 800260e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002616:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	20000470 	.word	0x20000470
 8002628:	200004c4 	.word	0x200004c4

0800262c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800262c:	b5b0      	push	{r4, r5, r7, lr}
 800262e:	b0a2      	sub	sp, #136	; 0x88
 8002630:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySem_motorJ1 */
  osSemaphoreDef(binarySem_motorJ1);
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  binarySem_motorJ1Handle = osSemaphoreCreate(osSemaphore(binarySem_motorJ1), 1);
 800263e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002642:	2101      	movs	r1, #1
 8002644:	4618      	mov	r0, r3
 8002646:	f009 ff10 	bl	800c46a <osSemaphoreCreate>
 800264a:	4603      	mov	r3, r0
 800264c:	4a34      	ldr	r2, [pc, #208]	; (8002720 <MX_FREERTOS_Init+0xf4>)
 800264e:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySem_motorJ2 */
  osSemaphoreDef(binarySem_motorJ2);
 8002650:	2300      	movs	r3, #0
 8002652:	67bb      	str	r3, [r7, #120]	; 0x78
 8002654:	2300      	movs	r3, #0
 8002656:	67fb      	str	r3, [r7, #124]	; 0x7c
  binarySem_motorJ2Handle = osSemaphoreCreate(osSemaphore(binarySem_motorJ2), 1);
 8002658:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800265c:	2101      	movs	r1, #1
 800265e:	4618      	mov	r0, r3
 8002660:	f009 ff03 	bl	800c46a <osSemaphoreCreate>
 8002664:	4603      	mov	r3, r0
 8002666:	4a2f      	ldr	r2, [pc, #188]	; (8002724 <MX_FREERTOS_Init+0xf8>)
 8002668:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySem_masterCmd */
  osSemaphoreDef(binarySem_masterCmd);
 800266a:	2300      	movs	r3, #0
 800266c:	673b      	str	r3, [r7, #112]	; 0x70
 800266e:	2300      	movs	r3, #0
 8002670:	677b      	str	r3, [r7, #116]	; 0x74
  binarySem_masterCmdHandle = osSemaphoreCreate(osSemaphore(binarySem_masterCmd), 1);
 8002672:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002676:	2101      	movs	r1, #1
 8002678:	4618      	mov	r0, r3
 800267a:	f009 fef6 	bl	800c46a <osSemaphoreCreate>
 800267e:	4603      	mov	r3, r0
 8002680:	4a29      	ldr	r2, [pc, #164]	; (8002728 <MX_FREERTOS_Init+0xfc>)
 8002682:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 4096);
 8002684:	4b29      	ldr	r3, [pc, #164]	; (800272c <MX_FREERTOS_Init+0x100>)
 8002686:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800268a:	461d      	mov	r5, r3
 800268c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800268e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002698:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f009 fe83 	bl	800c3aa <osThreadCreate>
 80026a4:	4603      	mov	r3, r0
 80026a6:	4a22      	ldr	r2, [pc, #136]	; (8002730 <MX_FREERTOS_Init+0x104>)
 80026a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorJ1Task */
  osThreadDef(motorJ1Task, StartTaskMotorJ1, osPriorityHigh, 0, 2048);
 80026aa:	4b22      	ldr	r3, [pc, #136]	; (8002734 <MX_FREERTOS_Init+0x108>)
 80026ac:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80026b0:	461d      	mov	r5, r3
 80026b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorJ1TaskHandle = osThreadCreate(osThread(motorJ1Task), NULL);
 80026be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f009 fe70 	bl	800c3aa <osThreadCreate>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4a1a      	ldr	r2, [pc, #104]	; (8002738 <MX_FREERTOS_Init+0x10c>)
 80026ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorJ2Task */
  osThreadDef(motorJ2Task, StartTaskMotorJ2, osPriorityHigh, 0, 2048);
 80026d0:	4b1a      	ldr	r3, [pc, #104]	; (800273c <MX_FREERTOS_Init+0x110>)
 80026d2:	f107 041c 	add.w	r4, r7, #28
 80026d6:	461d      	mov	r5, r3
 80026d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorJ2TaskHandle = osThreadCreate(osThread(motorJ2Task), NULL);
 80026e4:	f107 031c 	add.w	r3, r7, #28
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f009 fe5d 	bl	800c3aa <osThreadCreate>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4a13      	ldr	r2, [pc, #76]	; (8002740 <MX_FREERTOS_Init+0x114>)
 80026f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of moveTask */
  osThreadDef(moveTask, StartTaskMove, osPriorityRealtime, 0, 1024);
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <MX_FREERTOS_Init+0x118>)
 80026f8:	463c      	mov	r4, r7
 80026fa:	461d      	mov	r5, r3
 80026fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002700:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002704:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  moveTaskHandle = osThreadCreate(osThread(moveTask), NULL);
 8002708:	463b      	mov	r3, r7
 800270a:	2100      	movs	r1, #0
 800270c:	4618      	mov	r0, r3
 800270e:	f009 fe4c 	bl	800c3aa <osThreadCreate>
 8002712:	4603      	mov	r3, r0
 8002714:	4a0c      	ldr	r2, [pc, #48]	; (8002748 <MX_FREERTOS_Init+0x11c>)
 8002716:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002718:	bf00      	nop
 800271a:	3788      	adds	r7, #136	; 0x88
 800271c:	46bd      	mov	sp, r7
 800271e:	bdb0      	pop	{r4, r5, r7, pc}
 8002720:	2000aff8 	.word	0x2000aff8
 8002724:	2000b060 	.word	0x2000b060
 8002728:	2000b0bc 	.word	0x2000b0bc
 800272c:	08013d08 	.word	0x08013d08
 8002730:	2000afec 	.word	0x2000afec
 8002734:	08013d24 	.word	0x08013d24
 8002738:	2000afe8 	.word	0x2000afe8
 800273c:	08013d40 	.word	0x08013d40
 8002740:	2000b0c4 	.word	0x2000b0c4
 8002744:	08013d5c 	.word	0x08013d5c
 8002748:	2000aff4 	.word	0x2000aff4

0800274c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void const * argument)
{
 800274c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002750:	b0a6      	sub	sp, #152	; 0x98
 8002752:	af04      	add	r7, sp, #16
 8002754:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
#ifdef MDEBUG
	printf("Robochess 2021\r\n");
 8002756:	48af      	ldr	r0, [pc, #700]	; (8002a14 <StartDefaultTask+0x2c8>)
 8002758:	f00d fc0c 	bl	800ff74 <puts>
#endif
	HAL_I2C_EnableListen_IT(&hi2c2);	// I2C2 for interface
 800275c:	48ae      	ldr	r0, [pc, #696]	; (8002a18 <StartDefaultTask+0x2cc>)
 800275e:	f004 fe17 	bl	8007390 <HAL_I2C_EnableListen_IT>
	AS5600_Start_Update();				// Start Tim10 & get data of AS5600
 8002762:	f7fe fc3f 	bl	8000fe4 <AS5600_Start_Update>
	batteryVoltInit();
 8002766:	f7ff f9a7 	bl	8001ab8 <batteryVoltInit>
	pickAndDropInit();
 800276a:	f001 fb63 	bl	8003e34 <pickAndDropInit>
  /* Infinite loop */
  for(;;)
  {
	  updateInfo();
 800276e:	f000 fcc1 	bl	80030f4 <updateInfo>

#ifdef MDEBUG
	  if(uart2_onData){
 8002772:	4baa      	ldr	r3, [pc, #680]	; (8002a1c <StartDefaultTask+0x2d0>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 8292 	beq.w	8002ca0 <StartDefaultTask+0x554>
		  uart2_onData=false; //realease
 800277c:	4ba7      	ldr	r3, [pc, #668]	; (8002a1c <StartDefaultTask+0x2d0>)
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
		  printf("Rev %dBYTE: %s\r\n",uart2_data_length,uart2_main_buf);
 8002782:	4ba7      	ldr	r3, [pc, #668]	; (8002a20 <StartDefaultTask+0x2d4>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	4aa7      	ldr	r2, [pc, #668]	; (8002a24 <StartDefaultTask+0x2d8>)
 8002788:	4619      	mov	r1, r3
 800278a:	48a7      	ldr	r0, [pc, #668]	; (8002a28 <StartDefaultTask+0x2dc>)
 800278c:	f00d fb6c 	bl	800fe68 <iprintf>
		  // Gripper
		  if(uart2_main_buf[0]==CMD_GRIPPER){
 8002790:	4ba4      	ldr	r3, [pc, #656]	; (8002a24 <StartDefaultTask+0x2d8>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b47      	cmp	r3, #71	; 0x47
 8002796:	d120      	bne.n	80027da <StartDefaultTask+0x8e>
			  char sval[1];
			  sval[0]=uart2_main_buf[1];
 8002798:	4ba2      	ldr	r3, [pc, #648]	; (8002a24 <StartDefaultTask+0x2d8>)
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			  int val=atoi(sval);
 80027a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027a4:	4618      	mov	r0, r3
 80027a6:	f00c feb1 	bl	800f50c <atoi>
 80027aa:	64b8      	str	r0, [r7, #72]	; 0x48
			  if(val==0){
 80027ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d107      	bne.n	80027c2 <StartDefaultTask+0x76>
				  SERVO_DROP;
 80027b2:	4b9e      	ldr	r3, [pc, #632]	; (8002a2c <StartDefaultTask+0x2e0>)
 80027b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027b8:	63da      	str	r2, [r3, #60]	; 0x3c
				  printf("Gripper open\r\n");
 80027ba:	489d      	ldr	r0, [pc, #628]	; (8002a30 <StartDefaultTask+0x2e4>)
 80027bc:	f00d fbda 	bl	800ff74 <puts>
 80027c0:	e269      	b.n	8002c96 <StartDefaultTask+0x54a>
			  }else if(val==1){
 80027c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	f040 8266 	bne.w	8002c96 <StartDefaultTask+0x54a>
				  SERVO_PICKUP;
 80027ca:	4b98      	ldr	r3, [pc, #608]	; (8002a2c <StartDefaultTask+0x2e0>)
 80027cc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80027d0:	63da      	str	r2, [r3, #60]	; 0x3c
				  printf("Gripper close\r\n");
 80027d2:	4898      	ldr	r0, [pc, #608]	; (8002a34 <StartDefaultTask+0x2e8>)
 80027d4:	f00d fbce 	bl	800ff74 <puts>
 80027d8:	e25d      	b.n	8002c96 <StartDefaultTask+0x54a>
			  }
		// Info
		  }else if(uart2_main_buf[0]==CMD_INFO){
 80027da:	4b92      	ldr	r3, [pc, #584]	; (8002a24 <StartDefaultTask+0x2d8>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b49      	cmp	r3, #73	; 0x49
 80027e0:	d12b      	bne.n	800283a <StartDefaultTask+0xee>
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 80027e2:	4b95      	ldr	r3, [pc, #596]	; (8002a38 <StartDefaultTask+0x2ec>)
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	461d      	mov	r5, r3
 80027e8:	4b94      	ldr	r3, [pc, #592]	; (8002a3c <StartDefaultTask+0x2f0>)
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	461e      	mov	r6, r3
		 			  data_AS5600_M1,data_AS5600_M2,HAL_SENSOR_UP_GET,HAL_SENSOR_DOWN_GET,
 80027ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027f2:	4893      	ldr	r0, [pc, #588]	; (8002a40 <StartDefaultTask+0x2f4>)
 80027f4:	f004 f834 	bl	8006860 <HAL_GPIO_ReadPin>
 80027f8:	4603      	mov	r3, r0
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 80027fa:	4698      	mov	r8, r3
		 			  data_AS5600_M1,data_AS5600_M2,HAL_SENSOR_UP_GET,HAL_SENSOR_DOWN_GET,
 80027fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002800:	488f      	ldr	r0, [pc, #572]	; (8002a40 <StartDefaultTask+0x2f4>)
 8002802:	f004 f82d 	bl	8006860 <HAL_GPIO_ReadPin>
 8002806:	4603      	mov	r3, r0
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 8002808:	461c      	mov	r4, r3
					  batteryGet(),data_trans_master[6]);
 800280a:	f7ff f95f 	bl	8001acc <batteryGet>
 800280e:	4603      	mov	r3, r0
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 8002810:	461a      	mov	r2, r3
					  batteryGet(),data_trans_master[6]);
 8002812:	4b8c      	ldr	r3, [pc, #560]	; (8002a44 <StartDefaultTask+0x2f8>)
 8002814:	799b      	ldrb	r3, [r3, #6]
		 	  printf("AS5600_J1:%d_J2:%d Hal_Up:%d_Down:%d Bat:%2d Status:%d\r\n",
 8002816:	9302      	str	r3, [sp, #8]
 8002818:	9201      	str	r2, [sp, #4]
 800281a:	9400      	str	r4, [sp, #0]
 800281c:	4643      	mov	r3, r8
 800281e:	4632      	mov	r2, r6
 8002820:	4629      	mov	r1, r5
 8002822:	4889      	ldr	r0, [pc, #548]	; (8002a48 <StartDefaultTask+0x2fc>)
 8002824:	f00d fb20 	bl	800fe68 <iprintf>
		 	 	enableStepper(&motor_j1_data, OFF);
 8002828:	2100      	movs	r1, #0
 800282a:	4888      	ldr	r0, [pc, #544]	; (8002a4c <StartDefaultTask+0x300>)
 800282c:	f7ff f812 	bl	8001854 <enableStepper>
		 	 	enableStepper(&motor_j2_data, OFF);
 8002830:	2100      	movs	r1, #0
 8002832:	4887      	ldr	r0, [pc, #540]	; (8002a50 <StartDefaultTask+0x304>)
 8002834:	f7ff f80e 	bl	8001854 <enableStepper>
 8002838:	e22d      	b.n	8002c96 <StartDefaultTask+0x54a>
		// PICK
		  }else if(uart2_main_buf[0]==CMD_PICK){
 800283a:	4b7a      	ldr	r3, [pc, #488]	; (8002a24 <StartDefaultTask+0x2d8>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b70      	cmp	r3, #112	; 0x70
 8002840:	d11c      	bne.n	800287c <StartDefaultTask+0x130>
			  char sval[1];
			  sval[0]=uart2_main_buf[1];
 8002842:	4b78      	ldr	r3, [pc, #480]	; (8002a24 <StartDefaultTask+0x2d8>)
 8002844:	785b      	ldrb	r3, [r3, #1]
 8002846:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			  int val=atoi(sval);
 800284a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800284e:	4618      	mov	r0, r3
 8002850:	f00c fe5c 	bl	800f50c <atoi>
 8002854:	64f8      	str	r0, [r7, #76]	; 0x4c
			  if(val==0){
 8002856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <StartDefaultTask+0x11c>
				  printf("J3 MOVE UP\r\n");
 800285c:	487d      	ldr	r0, [pc, #500]	; (8002a54 <StartDefaultTask+0x308>)
 800285e:	f00d fb89 	bl	800ff74 <puts>
				  j3MoveUp();
 8002862:	f001 fb29 	bl	8003eb8 <j3MoveUp>
 8002866:	e216      	b.n	8002c96 <StartDefaultTask+0x54a>
			  }else if(val==1){
 8002868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286a:	2b01      	cmp	r3, #1
 800286c:	f040 8213 	bne.w	8002c96 <StartDefaultTask+0x54a>
				  printf("J3 MOVE DOWN\r\n");
 8002870:	4879      	ldr	r0, [pc, #484]	; (8002a58 <StartDefaultTask+0x30c>)
 8002872:	f00d fb7f 	bl	800ff74 <puts>
				  j3MoveDown();
 8002876:	f001 fb45 	bl	8003f04 <j3MoveDown>
 800287a:	e20c      	b.n	8002c96 <StartDefaultTask+0x54a>
			  }
		// PICK PIECE
		  }else if(uart2_main_buf[0]==CMD_PICKPIECE){
 800287c:	4b69      	ldr	r3, [pc, #420]	; (8002a24 <StartDefaultTask+0x2d8>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b50      	cmp	r3, #80	; 0x50
 8002882:	d11c      	bne.n	80028be <StartDefaultTask+0x172>
			  char sval[1];
			  sval[0]=uart2_main_buf[1];
 8002884:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <StartDefaultTask+0x2d8>)
 8002886:	785b      	ldrb	r3, [r3, #1]
 8002888:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			  int val=atoi(sval);
 800288c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002890:	4618      	mov	r0, r3
 8002892:	f00c fe3b 	bl	800f50c <atoi>
 8002896:	6538      	str	r0, [r7, #80]	; 0x50
			  if(val==0){
 8002898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800289a:	2b00      	cmp	r3, #0
 800289c:	d105      	bne.n	80028aa <StartDefaultTask+0x15e>
				  printf("DROP PIECE\r\n");
 800289e:	486f      	ldr	r0, [pc, #444]	; (8002a5c <StartDefaultTask+0x310>)
 80028a0:	f00d fb68 	bl	800ff74 <puts>
				  dropPiece();
 80028a4:	f001 fb6c 	bl	8003f80 <dropPiece>
 80028a8:	e1f5      	b.n	8002c96 <StartDefaultTask+0x54a>
			  }else if(val==1){
 80028aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	f040 81f2 	bne.w	8002c96 <StartDefaultTask+0x54a>
				  printf("PICKUP PIECE\r\n");
 80028b2:	486b      	ldr	r0, [pc, #428]	; (8002a60 <StartDefaultTask+0x314>)
 80028b4:	f00d fb5e 	bl	800ff74 <puts>
				  pickupPiece();
 80028b8:	f001 fb4a 	bl	8003f50 <pickupPiece>
 80028bc:	e1eb      	b.n	8002c96 <StartDefaultTask+0x54a>
			  }
		// MOVE
		  }else if(uart2_main_buf[0]==CMD_MOVE){
 80028be:	4b59      	ldr	r3, [pc, #356]	; (8002a24 <StartDefaultTask+0x2d8>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b6d      	cmp	r3, #109	; 0x6d
 80028c4:	d12f      	bne.n	8002926 <StartDefaultTask+0x1da>
			  char sval[2];
			  if(uart2_data_length>2){
 80028c6:	4b56      	ldr	r3, [pc, #344]	; (8002a20 <StartDefaultTask+0x2d4>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d908      	bls.n	80028e0 <StartDefaultTask+0x194>
				  sval[0]=uart2_main_buf[1];
 80028ce:	4b55      	ldr	r3, [pc, #340]	; (8002a24 <StartDefaultTask+0x2d8>)
 80028d0:	785b      	ldrb	r3, [r3, #1]
 80028d2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				  sval[1]=uart2_main_buf[2];
 80028d6:	4b53      	ldr	r3, [pc, #332]	; (8002a24 <StartDefaultTask+0x2d8>)
 80028d8:	789b      	ldrb	r3, [r3, #2]
 80028da:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80028de:	e006      	b.n	80028ee <StartDefaultTask+0x1a2>
			  }else{
				  sval[0]='0';
 80028e0:	2330      	movs	r3, #48	; 0x30
 80028e2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				  sval[1]=uart2_main_buf[1];
 80028e6:	4b4f      	ldr	r3, [pc, #316]	; (8002a24 <StartDefaultTask+0x2d8>)
 80028e8:	785b      	ldrb	r3, [r3, #1]
 80028ea:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			  }
			  int val=atoi(sval);
 80028ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028f2:	4618      	mov	r0, r3
 80028f4:	f00c fe0a 	bl	800f50c <atoi>
 80028f8:	6578      	str	r0, [r7, #84]	; 0x54
			  if(val>=0 && val<80){
 80028fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0d      	blt.n	800291c <StartDefaultTask+0x1d0>
 8002900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002902:	2b4f      	cmp	r3, #79	; 0x4f
 8002904:	dc0a      	bgt.n	800291c <StartDefaultTask+0x1d0>
				  printf("MOVE TO SQUARE:%d\r\n",val);
 8002906:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002908:	4856      	ldr	r0, [pc, #344]	; (8002a64 <StartDefaultTask+0x318>)
 800290a:	f00d faad 	bl	800fe68 <iprintf>
				  moveToSquare(val, false);
 800290e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fad1 	bl	8002ebc <moveToSquare>
 800291a:	e1bc      	b.n	8002c96 <StartDefaultTask+0x54a>
			  }else{
				  printf("ERROR! Cannot move to square %d\r\n",val);
 800291c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800291e:	4852      	ldr	r0, [pc, #328]	; (8002a68 <StartDefaultTask+0x31c>)
 8002920:	f00d faa2 	bl	800fe68 <iprintf>
 8002924:	e1b7      	b.n	8002c96 <StartDefaultTask+0x54a>
			  }
		// MOVE PIECE
		  }else if(uart2_main_buf[0]==CMD_MOVEPIECE){
 8002926:	4b3f      	ldr	r3, [pc, #252]	; (8002a24 <StartDefaultTask+0x2d8>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b4d      	cmp	r3, #77	; 0x4d
 800292c:	d145      	bne.n	80029ba <StartDefaultTask+0x26e>
			  char sFrom[2],sTo[2],sOption[1];
			  sFrom[0]=uart2_main_buf[1];
 800292e:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <StartDefaultTask+0x2d8>)
 8002930:	785b      	ldrb	r3, [r3, #1]
 8002932:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			  sFrom[1]=uart2_main_buf[2];
 8002936:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <StartDefaultTask+0x2d8>)
 8002938:	789b      	ldrb	r3, [r3, #2]
 800293a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			  sTo[0]=uart2_main_buf[3];
 800293e:	4b39      	ldr	r3, [pc, #228]	; (8002a24 <StartDefaultTask+0x2d8>)
 8002940:	78db      	ldrb	r3, [r3, #3]
 8002942:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			  sTo[1]=uart2_main_buf[4];
 8002946:	4b37      	ldr	r3, [pc, #220]	; (8002a24 <StartDefaultTask+0x2d8>)
 8002948:	791b      	ldrb	r3, [r3, #4]
 800294a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			  sOption[0]=uart2_main_buf[5];
 800294e:	4b35      	ldr	r3, [pc, #212]	; (8002a24 <StartDefaultTask+0x2d8>)
 8002950:	795b      	ldrb	r3, [r3, #5]
 8002952:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			  int _from=atoi(sFrom);
 8002956:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800295a:	4618      	mov	r0, r3
 800295c:	f00c fdd6 	bl	800f50c <atoi>
 8002960:	6638      	str	r0, [r7, #96]	; 0x60
			  int _to =atoi(sTo);
 8002962:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002966:	4618      	mov	r0, r3
 8002968:	f00c fdd0 	bl	800f50c <atoi>
 800296c:	65f8      	str	r0, [r7, #92]	; 0x5c
			  int _option =atoi(sOption);
 800296e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002972:	4618      	mov	r0, r3
 8002974:	f00c fdca 	bl	800f50c <atoi>
 8002978:	65b8      	str	r0, [r7, #88]	; 0x58
			  if((_from>=0 && _from<80) && (_to>=0 && _to<80)){
 800297a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800297c:	2b00      	cmp	r3, #0
 800297e:	db18      	blt.n	80029b2 <StartDefaultTask+0x266>
 8002980:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002982:	2b4f      	cmp	r3, #79	; 0x4f
 8002984:	dc15      	bgt.n	80029b2 <StartDefaultTask+0x266>
 8002986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002988:	2b00      	cmp	r3, #0
 800298a:	db12      	blt.n	80029b2 <StartDefaultTask+0x266>
 800298c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800298e:	2b4f      	cmp	r3, #79	; 0x4f
 8002990:	dc0f      	bgt.n	80029b2 <StartDefaultTask+0x266>
				  printf("MOVEPIECE %d->%d Option:%d\r\n",_from,_to,_option);
 8002992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002994:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002996:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002998:	4834      	ldr	r0, [pc, #208]	; (8002a6c <StartDefaultTask+0x320>)
 800299a:	f00d fa65 	bl	800fe68 <iprintf>
				  movePiece(_from, _to, _option);
 800299e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80029a4:	b2d1      	uxtb	r1, r2
 80029a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fb1a 	bl	8002fe4 <movePiece>
 80029b0:	e171      	b.n	8002c96 <StartDefaultTask+0x54a>
			  }else{
				  printf("ERROR! Out Range of square\r\n");
 80029b2:	482f      	ldr	r0, [pc, #188]	; (8002a70 <StartDefaultTask+0x324>)
 80029b4:	f00d fade 	bl	800ff74 <puts>
 80029b8:	e16d      	b.n	8002c96 <StartDefaultTask+0x54a>
			  }
		  }else if(uart2_main_buf[0]==CMD_MOVEHOME){
 80029ba:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <StartDefaultTask+0x2d8>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b48      	cmp	r3, #72	; 0x48
 80029c0:	d105      	bne.n	80029ce <StartDefaultTask+0x282>
			  printf("MOVE HOME\r\n");
 80029c2:	482c      	ldr	r0, [pc, #176]	; (8002a74 <StartDefaultTask+0x328>)
 80029c4:	f00d fad6 	bl	800ff74 <puts>
			  moveToHome();
 80029c8:	f000 faf0 	bl	8002fac <moveToHome>
 80029cc:	e163      	b.n	8002c96 <StartDefaultTask+0x54a>
		  }else if(uart2_main_buf[0]==CMD_MOVETEST){
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <StartDefaultTask+0x2d8>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b41      	cmp	r3, #65	; 0x41
 80029d4:	f040 8095 	bne.w	8002b02 <StartDefaultTask+0x3b6>
			  user_calibase = true;
 80029d8:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <StartDefaultTask+0x32c>)
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
			  if(runfirts==false){
 80029de:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <StartDefaultTask+0x330>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	f083 0301 	eor.w	r3, r3, #1
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <StartDefaultTask+0x2b2>
				  runfirts = true;
 80029ec:	4b23      	ldr	r3, [pc, #140]	; (8002a7c <StartDefaultTask+0x330>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	701a      	strb	r2, [r3, #0]
				  motor_j1_data._currentPos =0;
 80029f2:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <StartDefaultTask+0x300>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	631a      	str	r2, [r3, #48]	; 0x30
				  motor_j1_data._targetPos =0;
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <StartDefaultTask+0x300>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
			  }

			  printf("MOVE:AS5600:%d\r\n",data_AS5600_M1);
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <StartDefaultTask+0x2ec>)
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	4619      	mov	r1, r3
 8002a04:	481e      	ldr	r0, [pc, #120]	; (8002a80 <StartDefaultTask+0x334>)
 8002a06:	f00d fa2f 	bl	800fe68 <iprintf>
			  char sposJ1[4];
			  for(int i=0;i<4;i++){
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a10:	e049      	b.n	8002aa6 <StartDefaultTask+0x35a>
 8002a12:	bf00      	nop
 8002a14:	08013d78 	.word	0x08013d78
 8002a18:	2000b1d0 	.word	0x2000b1d0
 8002a1c:	200008c4 	.word	0x200008c4
 8002a20:	2000b3b0 	.word	0x2000b3b0
 8002a24:	2000b3a4 	.word	0x2000b3a4
 8002a28:	08013d88 	.word	0x08013d88
 8002a2c:	40000800 	.word	0x40000800
 8002a30:	08013d9c 	.word	0x08013d9c
 8002a34:	08013dac 	.word	0x08013dac
 8002a38:	2000af36 	.word	0x2000af36
 8002a3c:	2000af34 	.word	0x2000af34
 8002a40:	40020800 	.word	0x40020800
 8002a44:	2000b058 	.word	0x2000b058
 8002a48:	08013dbc 	.word	0x08013dbc
 8002a4c:	2000b064 	.word	0x2000b064
 8002a50:	2000b004 	.word	0x2000b004
 8002a54:	08013df8 	.word	0x08013df8
 8002a58:	08013e04 	.word	0x08013e04
 8002a5c:	08013e14 	.word	0x08013e14
 8002a60:	08013e20 	.word	0x08013e20
 8002a64:	08013e30 	.word	0x08013e30
 8002a68:	08013e44 	.word	0x08013e44
 8002a6c:	08013e68 	.word	0x08013e68
 8002a70:	08013e88 	.word	0x08013e88
 8002a74:	08013ea4 	.word	0x08013ea4
 8002a78:	20000211 	.word	0x20000211
 8002a7c:	20000212 	.word	0x20000212
 8002a80:	08013eb0 	.word	0x08013eb0
				  sposJ1[i] = uart2_main_buf[i+1];
 8002a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a88:	3301      	adds	r3, #1
 8002a8a:	4a87      	ldr	r2, [pc, #540]	; (8002ca8 <StartDefaultTask+0x55c>)
 8002a8c:	5cd1      	ldrb	r1, [r2, r3]
 8002a8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a96:	4413      	add	r3, r2
 8002a98:	460a      	mov	r2, r1
 8002a9a:	701a      	strb	r2, [r3, #0]
			  for(int i=0;i<4;i++){
 8002a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002aa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	ddea      	ble.n	8002a84 <StartDefaultTask+0x338>
			  }
			  int posJ1 = atoi(sposJ1);
 8002aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f00c fd2a 	bl	800f50c <atoi>
 8002ab8:	6678      	str	r0, [r7, #100]	; 0x64
			  enableStepper(&motor_j1_data, ON);
 8002aba:	2101      	movs	r1, #1
 8002abc:	487b      	ldr	r0, [pc, #492]	; (8002cac <StartDefaultTask+0x560>)
 8002abe:	f7fe fec9 	bl	8001854 <enableStepper>
			  moveTo(&motor_j1_data,posJ1);
 8002ac2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002ac4:	4879      	ldr	r0, [pc, #484]	; (8002cac <StartDefaultTask+0x560>)
 8002ac6:	f7fe fead 	bl	8001824 <moveTo>
			  run(&motor_j1_data);
 8002aca:	4878      	ldr	r0, [pc, #480]	; (8002cac <StartDefaultTask+0x560>)
 8002acc:	f7fe fcf2 	bl	80014b4 <run>
				while( isRunning(&motor_j1_data)){	// Waiting for move finish
 8002ad0:	e002      	b.n	8002ad8 <StartDefaultTask+0x38c>
					osDelay(10);
 8002ad2:	200a      	movs	r0, #10
 8002ad4:	f009 fcb5 	bl	800c442 <osDelay>
				while( isRunning(&motor_j1_data)){	// Waiting for move finish
 8002ad8:	4874      	ldr	r0, [pc, #464]	; (8002cac <StartDefaultTask+0x560>)
 8002ada:	f7fe fe87 	bl	80017ec <isRunning>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f6      	bne.n	8002ad2 <StartDefaultTask+0x386>
				}
				osDelay(300);
 8002ae4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ae8:	f009 fcab 	bl	800c442 <osDelay>
				printf("Finish:AS5600:%d\r\n",data_AS5600_M1);
 8002aec:	4b70      	ldr	r3, [pc, #448]	; (8002cb0 <StartDefaultTask+0x564>)
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	4619      	mov	r1, r3
 8002af2:	4870      	ldr	r0, [pc, #448]	; (8002cb4 <StartDefaultTask+0x568>)
 8002af4:	f00d f9b8 	bl	800fe68 <iprintf>
				motor_j1_data.isStop = true;
 8002af8:	4b6c      	ldr	r3, [pc, #432]	; (8002cac <StartDefaultTask+0x560>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8002b00:	e0c9      	b.n	8002c96 <StartDefaultTask+0x54a>
//				enableStepper(&motor_j1_data, OFF);
		  }else if(uart2_main_buf[0]==CMD_MOVETESTJ2){
 8002b02:	4b69      	ldr	r3, [pc, #420]	; (8002ca8 <StartDefaultTask+0x55c>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b42      	cmp	r3, #66	; 0x42
 8002b08:	d14c      	bne.n	8002ba4 <StartDefaultTask+0x458>
			  enableStepper(&motor_j1_data, ON);
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	4867      	ldr	r0, [pc, #412]	; (8002cac <StartDefaultTask+0x560>)
 8002b0e:	f7fe fea1 	bl	8001854 <enableStepper>
			  printf("MOVE:AS56002:%d\r\n",data_AS5600_M2);
 8002b12:	4b69      	ldr	r3, [pc, #420]	; (8002cb8 <StartDefaultTask+0x56c>)
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	4619      	mov	r1, r3
 8002b18:	4868      	ldr	r0, [pc, #416]	; (8002cbc <StartDefaultTask+0x570>)
 8002b1a:	f00d f9a5 	bl	800fe68 <iprintf>
			  char sposJ2[4];
			  for(int i=0;i<4;i++){
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b24:	e010      	b.n	8002b48 <StartDefaultTask+0x3fc>
				  sposJ2[i] = uart2_main_buf[i+1];
 8002b26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	4a5e      	ldr	r2, [pc, #376]	; (8002ca8 <StartDefaultTask+0x55c>)
 8002b2e:	5cd1      	ldrb	r1, [r2, r3]
 8002b30:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002b34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b38:	4413      	add	r3, r2
 8002b3a:	460a      	mov	r2, r1
 8002b3c:	701a      	strb	r2, [r3, #0]
			  for(int i=0;i<4;i++){
 8002b3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b42:	3301      	adds	r3, #1
 8002b44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	ddea      	ble.n	8002b26 <StartDefaultTask+0x3da>
			  }
			  int posJ2 = atoi(sposJ2);
 8002b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b54:	4618      	mov	r0, r3
 8002b56:	f00c fcd9 	bl	800f50c <atoi>
 8002b5a:	66b8      	str	r0, [r7, #104]	; 0x68
			  enableStepper(&motor_j2_data, ON);
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	4858      	ldr	r0, [pc, #352]	; (8002cc0 <StartDefaultTask+0x574>)
 8002b60:	f7fe fe78 	bl	8001854 <enableStepper>
			  moveTo(&motor_j2_data,posJ2);
 8002b64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b66:	4856      	ldr	r0, [pc, #344]	; (8002cc0 <StartDefaultTask+0x574>)
 8002b68:	f7fe fe5c 	bl	8001824 <moveTo>
			  run(&motor_j2_data);
 8002b6c:	4854      	ldr	r0, [pc, #336]	; (8002cc0 <StartDefaultTask+0x574>)
 8002b6e:	f7fe fca1 	bl	80014b4 <run>
				while( isRunning(&motor_j2_data)){	// Waiting for move finish
 8002b72:	e002      	b.n	8002b7a <StartDefaultTask+0x42e>
					osDelay(10);
 8002b74:	200a      	movs	r0, #10
 8002b76:	f009 fc64 	bl	800c442 <osDelay>
				while( isRunning(&motor_j2_data)){	// Waiting for move finish
 8002b7a:	4851      	ldr	r0, [pc, #324]	; (8002cc0 <StartDefaultTask+0x574>)
 8002b7c:	f7fe fe36 	bl	80017ec <isRunning>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f6      	bne.n	8002b74 <StartDefaultTask+0x428>
				}
				osDelay(300);
 8002b86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002b8a:	f009 fc5a 	bl	800c442 <osDelay>
				printf("Finish:AS56002:%d\r\n",data_AS5600_M2);
 8002b8e:	4b4a      	ldr	r3, [pc, #296]	; (8002cb8 <StartDefaultTask+0x56c>)
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	4619      	mov	r1, r3
 8002b94:	484b      	ldr	r0, [pc, #300]	; (8002cc4 <StartDefaultTask+0x578>)
 8002b96:	f00d f967 	bl	800fe68 <iprintf>
				motor_j2_data.isStop = true;
 8002b9a:	4b49      	ldr	r3, [pc, #292]	; (8002cc0 <StartDefaultTask+0x574>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8002ba2:	e078      	b.n	8002c96 <StartDefaultTask+0x54a>
//				enableStepper(&motor_j2_data, OFF);
		  }else if(uart2_main_buf[0]==CMD_KINETIC){
 8002ba4:	4b40      	ldr	r3, [pc, #256]	; (8002ca8 <StartDefaultTask+0x55c>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b4b      	cmp	r3, #75	; 0x4b
 8002baa:	d139      	bne.n	8002c20 <StartDefaultTask+0x4d4>
			  int dx,dy;
			  char sdx[5],sdy[5];
			  for(int i=0;i<4;i++){
 8002bac:	2300      	movs	r3, #0
 8002bae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bb0:	e016      	b.n	8002be0 <StartDefaultTask+0x494>
				  sdx[i]=uart2_main_buf[i+1];
 8002bb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	4a3c      	ldr	r2, [pc, #240]	; (8002ca8 <StartDefaultTask+0x55c>)
 8002bb8:	5cd1      	ldrb	r1, [r2, r3]
 8002bba:	f107 021c 	add.w	r2, r7, #28
 8002bbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bc0:	4413      	add	r3, r2
 8002bc2:	460a      	mov	r2, r1
 8002bc4:	701a      	strb	r2, [r3, #0]
				  sdy[i] = uart2_main_buf[i+6];
 8002bc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bc8:	3306      	adds	r3, #6
 8002bca:	4a37      	ldr	r2, [pc, #220]	; (8002ca8 <StartDefaultTask+0x55c>)
 8002bcc:	5cd1      	ldrb	r1, [r2, r3]
 8002bce:	f107 0214 	add.w	r2, r7, #20
 8002bd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bd4:	4413      	add	r3, r2
 8002bd6:	460a      	mov	r2, r1
 8002bd8:	701a      	strb	r2, [r3, #0]
			  for(int i=0;i<4;i++){
 8002bda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bdc:	3301      	adds	r3, #1
 8002bde:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002be0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	dde5      	ble.n	8002bb2 <StartDefaultTask+0x466>
			  }
			  dx = atoi(sdx);
 8002be6:	f107 031c 	add.w	r3, r7, #28
 8002bea:	4618      	mov	r0, r3
 8002bec:	f00c fc8e 	bl	800f50c <atoi>
 8002bf0:	6738      	str	r0, [r7, #112]	; 0x70
			  dy = atoi(sdy);
 8002bf2:	f107 0314 	add.w	r3, r7, #20
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f00c fc88 	bl	800f50c <atoi>
 8002bfc:	66f8      	str	r0, [r7, #108]	; 0x6c
			  inverseKinematics(dx, dy);
 8002bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0a:	ee07 3a10 	vmov	s14, r3
 8002c0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002c12:	eef0 0a47 	vmov.f32	s1, s14
 8002c16:	eeb0 0a67 	vmov.f32	s0, s15
 8002c1a:	f000 fae9 	bl	80031f0 <inverseKinematics>
 8002c1e:	e03a      	b.n	8002c96 <StartDefaultTask+0x54a>
		  }else if(uart2_main_buf[0]=='f'){
 8002c20:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <StartDefaultTask+0x55c>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b66      	cmp	r3, #102	; 0x66
 8002c26:	d124      	bne.n	8002c72 <StartDefaultTask+0x526>
//			  calibase();
			  char dat[5];
			 			  for(int i=0;i<4;i++){
 8002c28:	2300      	movs	r3, #0
 8002c2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c2c:	e00c      	b.n	8002c48 <StartDefaultTask+0x4fc>
			 			  		dat[i] = uart2_main_buf[i+1];
 8002c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c30:	3301      	adds	r3, #1
 8002c32:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <StartDefaultTask+0x55c>)
 8002c34:	5cd1      	ldrb	r1, [r2, r3]
 8002c36:	f107 020c 	add.w	r2, r7, #12
 8002c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c3c:	4413      	add	r3, r2
 8002c3e:	460a      	mov	r2, r1
 8002c40:	701a      	strb	r2, [r3, #0]
			 			  for(int i=0;i<4;i++){
 8002c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c44:	3301      	adds	r3, #1
 8002c46:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	ddef      	ble.n	8002c2e <StartDefaultTask+0x4e2>
			 			  }
			 int mdat = atoi(dat);
 8002c4e:	f107 030c 	add.w	r3, r7, #12
 8002c52:	4618      	mov	r0, r3
 8002c54:	f00c fc5a 	bl	800f50c <atoi>
 8002c58:	6778      	str	r0, [r7, #116]	; 0x74
			  EE_WriteVariable(0x1111, mdat);
 8002c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f241 1011 	movw	r0, #4369	; 0x1111
 8002c64:	f7ff f9ec 	bl	8002040 <EE_WriteVariable>
			  printf("EE write:%d\r\n",mdat);
 8002c68:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002c6a:	4817      	ldr	r0, [pc, #92]	; (8002cc8 <StartDefaultTask+0x57c>)
 8002c6c:	f00d f8fc 	bl	800fe68 <iprintf>
 8002c70:	e011      	b.n	8002c96 <StartDefaultTask+0x54a>
		  }else if(uart2_main_buf[0]=='F'){
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <StartDefaultTask+0x55c>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b46      	cmp	r3, #70	; 0x46
 8002c78:	d10d      	bne.n	8002c96 <StartDefaultTask+0x54a>
			  uint16_t dat=0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	817b      	strh	r3, [r7, #10]
			  EE_ReadVariable(0x1111, &dat);
 8002c7e:	f107 030a 	add.w	r3, r7, #10
 8002c82:	4619      	mov	r1, r3
 8002c84:	f241 1011 	movw	r0, #4369	; 0x1111
 8002c88:	f7ff f990 	bl	8001fac <EE_ReadVariable>
			  printf("EE read:%d\r\n",dat);
 8002c8c:	897b      	ldrh	r3, [r7, #10]
 8002c8e:	4619      	mov	r1, r3
 8002c90:	480e      	ldr	r0, [pc, #56]	; (8002ccc <StartDefaultTask+0x580>)
 8002c92:	f00d f8e9 	bl	800fe68 <iprintf>
			{
				square_getpos++;
				printf("Square:%d\r\n",square_getpos);
			}
#endif
		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002c96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c9a:	480d      	ldr	r0, [pc, #52]	; (8002cd0 <StartDefaultTask+0x584>)
 8002c9c:	f003 fe11 	bl	80068c2 <HAL_GPIO_TogglePin>
	  }
#endif
	 	  osDelay(100);
 8002ca0:	2064      	movs	r0, #100	; 0x64
 8002ca2:	f009 fbce 	bl	800c442 <osDelay>
	  updateInfo();
 8002ca6:	e562      	b.n	800276e <StartDefaultTask+0x22>
 8002ca8:	2000b3a4 	.word	0x2000b3a4
 8002cac:	2000b064 	.word	0x2000b064
 8002cb0:	2000af36 	.word	0x2000af36
 8002cb4:	08013ec4 	.word	0x08013ec4
 8002cb8:	2000af34 	.word	0x2000af34
 8002cbc:	08013ed8 	.word	0x08013ed8
 8002cc0:	2000b004 	.word	0x2000b004
 8002cc4:	08013eec 	.word	0x08013eec
 8002cc8:	08013f00 	.word	0x08013f00
 8002ccc:	08013f10 	.word	0x08013f10
 8002cd0:	40020000 	.word	0x40020000

08002cd4 <StartTaskMotorJ1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMotorJ1 */
__weak void StartTaskMotorJ1(void const * argument)
{
 8002cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd6:	b095      	sub	sp, #84	; 0x54
 8002cd8:	af12      	add	r7, sp, #72	; 0x48
 8002cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMotorJ1 */
	printf("Robochess 2021 -taskJ1\r\n");
 8002cdc:	4822      	ldr	r0, [pc, #136]	; (8002d68 <StartTaskMotorJ1+0x94>)
 8002cde:	f00d f949 	bl	800ff74 <puts>
		osDelay(2000);						// Wait for finish Init
 8002ce2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ce6:	f009 fbac 	bl	800c442 <osDelay>
		motor_j1_data.GPIO_PIN_Dir		= J1_DIR_Pin;
 8002cea:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <StartTaskMotorJ1+0x98>)
 8002cec:	2202      	movs	r2, #2
 8002cee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		motor_j1_data.GPIO_PORT_Dir		= J1_DIR_GPIO_Port;
 8002cf2:	4b1e      	ldr	r3, [pc, #120]	; (8002d6c <StartTaskMotorJ1+0x98>)
 8002cf4:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <StartTaskMotorJ1+0x9c>)
 8002cf6:	63da      	str	r2, [r3, #60]	; 0x3c
		motor_j1_data.GPIO_PORT_Enable	= J1_EN_GPIO_Port;
 8002cf8:	4b1c      	ldr	r3, [pc, #112]	; (8002d6c <StartTaskMotorJ1+0x98>)
 8002cfa:	4a1d      	ldr	r2, [pc, #116]	; (8002d70 <StartTaskMotorJ1+0x9c>)
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
		motor_j1_data.GPIO_PIN_Enable	= J1_EN_Pin;
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <StartTaskMotorJ1+0x98>)
 8002d00:	2204      	movs	r2, #4
 8002d02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		motor_j1_data.USER_TIMER		= TIM3;
 8002d06:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <StartTaskMotorJ1+0x98>)
 8002d08:	4a1a      	ldr	r2, [pc, #104]	; (8002d74 <StartTaskMotorJ1+0xa0>)
 8002d0a:	649a      	str	r2, [r3, #72]	; 0x48
		motor_j1_data.TIM_CHANEL		= TIM_CHANNEL_3;
 8002d0c:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <StartTaskMotorJ1+0x98>)
 8002d0e:	2208      	movs	r2, #8
 8002d10:	64da      	str	r2, [r3, #76]	; 0x4c
		motor_j1_data.isStop			= false;
 8002d12:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <StartTaskMotorJ1+0x98>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		AccelStepper_init(&motor_j1_data, htim3, data_AS5600_M1, J1_SPEED, J1_ACCEL_MAX);
 8002d1a:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <StartTaskMotorJ1+0xa4>)
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	4e17      	ldr	r6, [pc, #92]	; (8002d7c <StartTaskMotorJ1+0xa8>)
 8002d20:	4a17      	ldr	r2, [pc, #92]	; (8002d80 <StartTaskMotorJ1+0xac>)
 8002d22:	9211      	str	r2, [sp, #68]	; 0x44
 8002d24:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d28:	9210      	str	r2, [sp, #64]	; 0x40
 8002d2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8002d2c:	466d      	mov	r5, sp
 8002d2e:	f106 040c 	add.w	r4, r6, #12
 8002d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002d42:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002d46:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002d4a:	4808      	ldr	r0, [pc, #32]	; (8002d6c <StartTaskMotorJ1+0x98>)
 8002d4c:	f7fe f976 	bl	800103c <AccelStepper_init>
	}
#endif
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(binarySem_motorJ1Handle, osWaitForever);
 8002d50:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <StartTaskMotorJ1+0xb0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f009 fbb9 	bl	800c4d0 <osSemaphoreWait>
	  	  run(&motor_j1_data);
 8002d5e:	4803      	ldr	r0, [pc, #12]	; (8002d6c <StartTaskMotorJ1+0x98>)
 8002d60:	f7fe fba8 	bl	80014b4 <run>
	  osSemaphoreWait(binarySem_motorJ1Handle, osWaitForever);
 8002d64:	e7f4      	b.n	8002d50 <StartTaskMotorJ1+0x7c>
 8002d66:	bf00      	nop
 8002d68:	08013f20 	.word	0x08013f20
 8002d6c:	2000b064 	.word	0x2000b064
 8002d70:	40020400 	.word	0x40020400
 8002d74:	40000400 	.word	0x40000400
 8002d78:	2000af36 	.word	0x2000af36
 8002d7c:	2000b4dc 	.word	0x2000b4dc
 8002d80:	0007a120 	.word	0x0007a120
 8002d84:	2000aff8 	.word	0x2000aff8

08002d88 <StartTaskMotorJ2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMotorJ2 */
__weak void StartTaskMotorJ2(void const * argument)
{
 8002d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d8a:	b095      	sub	sp, #84	; 0x54
 8002d8c:	af12      	add	r7, sp, #72	; 0x48
 8002d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMotorJ2 */

		osDelay(2000);						// Wait for finish Init
 8002d90:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d94:	f009 fb55 	bl	800c442 <osDelay>
		motor_j2_data.GPIO_PIN_Dir		= J2_DIR_Pin;
 8002d98:	4b1f      	ldr	r3, [pc, #124]	; (8002e18 <StartTaskMotorJ2+0x90>)
 8002d9a:	2240      	movs	r2, #64	; 0x40
 8002d9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		motor_j2_data.GPIO_PORT_Dir		= J2_DIR_GPIO_Port;
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <StartTaskMotorJ2+0x90>)
 8002da2:	4a1e      	ldr	r2, [pc, #120]	; (8002e1c <StartTaskMotorJ2+0x94>)
 8002da4:	63da      	str	r2, [r3, #60]	; 0x3c
		motor_j2_data.GPIO_PORT_Enable	= J2_EN_GPIO_Port;
 8002da6:	4b1c      	ldr	r3, [pc, #112]	; (8002e18 <StartTaskMotorJ2+0x90>)
 8002da8:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <StartTaskMotorJ2+0x94>)
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
		motor_j2_data.GPIO_PIN_Enable	= J2_EN_Pin;
 8002dac:	4b1a      	ldr	r3, [pc, #104]	; (8002e18 <StartTaskMotorJ2+0x90>)
 8002dae:	2280      	movs	r2, #128	; 0x80
 8002db0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		motor_j2_data.USER_TIMER		= TIM2;
 8002db4:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <StartTaskMotorJ2+0x90>)
 8002db6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dba:	649a      	str	r2, [r3, #72]	; 0x48
		motor_j2_data.TIM_CHANEL		= TIM_CHANNEL_1;
 8002dbc:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <StartTaskMotorJ2+0x90>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	64da      	str	r2, [r3, #76]	; 0x4c
		motor_j2_data.isStop			= false;
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <StartTaskMotorJ2+0x90>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		AccelStepper_init(&motor_j2_data, htim2, data_AS5600_M2, J2_SPEED, J2_ACCEL_MAX);
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <StartTaskMotorJ2+0x98>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	4e15      	ldr	r6, [pc, #84]	; (8002e24 <StartTaskMotorJ2+0x9c>)
 8002dd0:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <StartTaskMotorJ2+0xa0>)
 8002dd2:	9211      	str	r2, [sp, #68]	; 0x44
 8002dd4:	f242 7210 	movw	r2, #10000	; 0x2710
 8002dd8:	9210      	str	r2, [sp, #64]	; 0x40
 8002dda:	930f      	str	r3, [sp, #60]	; 0x3c
 8002ddc:	466d      	mov	r5, sp
 8002dde:	f106 040c 	add.w	r4, r6, #12
 8002de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002df2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002df6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002dfa:	4807      	ldr	r0, [pc, #28]	; (8002e18 <StartTaskMotorJ2+0x90>)
 8002dfc:	f7fe f91e 	bl	800103c <AccelStepper_init>
	}
#endif
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(binarySem_motorJ2Handle, osWaitForever);
 8002e00:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <StartTaskMotorJ2+0xa4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f009 fb61 	bl	800c4d0 <osSemaphoreWait>
	  run(&motor_j2_data);
 8002e0e:	4802      	ldr	r0, [pc, #8]	; (8002e18 <StartTaskMotorJ2+0x90>)
 8002e10:	f7fe fb50 	bl	80014b4 <run>
	  osSemaphoreWait(binarySem_motorJ2Handle, osWaitForever);
 8002e14:	e7f4      	b.n	8002e00 <StartTaskMotorJ2+0x78>
 8002e16:	bf00      	nop
 8002e18:	2000b004 	.word	0x2000b004
 8002e1c:	40020000 	.word	0x40020000
 8002e20:	2000af34 	.word	0x2000af34
 8002e24:	2000b524 	.word	0x2000b524
 8002e28:	00061a80 	.word	0x00061a80
 8002e2c:	2000b060 	.word	0x2000b060

08002e30 <StartTaskMove>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMove */
__weak void StartTaskMove(void const * argument)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMove */
	osDelay(2500);
 8002e38:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002e3c:	f009 fb01 	bl	800c442 <osDelay>
  /* Infinite loop */
	for (;;) {
		osSemaphoreWait(binarySem_masterCmdHandle, osWaitForever);
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <StartTaskMove+0x78>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f009 fb41 	bl	800c4d0 <osSemaphoreWait>
		moveIsFinish = false;
 8002e4e:	4b17      	ldr	r3, [pc, #92]	; (8002eac <StartTaskMove+0x7c>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
		if (data_rev_master[0] == CMD_I2C_MOVE_PIECE) {
 8002e54:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <StartTaskMove+0x80>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d114      	bne.n	8002e86 <StartTaskMove+0x56>
#ifdef MDEBUG
			printf("I2C-MOVE-%d->%d OP:%d\r\n",data_rev_master[1],data_rev_master[2],data_rev_master[3]);
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <StartTaskMove+0x80>)
 8002e5e:	785b      	ldrb	r3, [r3, #1]
 8002e60:	4619      	mov	r1, r3
 8002e62:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <StartTaskMove+0x80>)
 8002e64:	789b      	ldrb	r3, [r3, #2]
 8002e66:	461a      	mov	r2, r3
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <StartTaskMove+0x80>)
 8002e6a:	78db      	ldrb	r3, [r3, #3]
 8002e6c:	4811      	ldr	r0, [pc, #68]	; (8002eb4 <StartTaskMove+0x84>)
 8002e6e:	f00c fffb 	bl	800fe68 <iprintf>
#endif
			movePiece(data_rev_master[1], data_rev_master[2],data_rev_master[3]);
 8002e72:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <StartTaskMove+0x80>)
 8002e74:	785b      	ldrb	r3, [r3, #1]
 8002e76:	4a0e      	ldr	r2, [pc, #56]	; (8002eb0 <StartTaskMove+0x80>)
 8002e78:	7891      	ldrb	r1, [r2, #2]
 8002e7a:	4a0d      	ldr	r2, [pc, #52]	; (8002eb0 <StartTaskMove+0x80>)
 8002e7c:	78d2      	ldrb	r2, [r2, #3]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f8b0 	bl	8002fe4 <movePiece>
 8002e84:	e00b      	b.n	8002e9e <StartTaskMove+0x6e>
		} else if (data_rev_master[0] == CMD_I2C_MOVE_HOME) {
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <StartTaskMove+0x80>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d107      	bne.n	8002e9e <StartTaskMove+0x6e>
#ifdef MDEBUG
			printf("I2C-MOVEHOME\r\n");
 8002e8e:	480a      	ldr	r0, [pc, #40]	; (8002eb8 <StartTaskMove+0x88>)
 8002e90:	f00d f870 	bl	800ff74 <puts>
#endif
			moveToHome();
 8002e94:	f000 f88a 	bl	8002fac <moveToHome>
			moveIsFinish = true;
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <StartTaskMove+0x7c>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
		}
		osDelay(10);
 8002e9e:	200a      	movs	r0, #10
 8002ea0:	f009 facf 	bl	800c442 <osDelay>
		osSemaphoreWait(binarySem_masterCmdHandle, osWaitForever);
 8002ea4:	e7cc      	b.n	8002e40 <StartTaskMove+0x10>
 8002ea6:	bf00      	nop
 8002ea8:	2000b0bc 	.word	0x2000b0bc
 8002eac:	20000218 	.word	0x20000218
 8002eb0:	2000aff0 	.word	0x2000aff0
 8002eb4:	08013f38 	.word	0x08013f38
 8002eb8:	08013f50 	.word	0x08013f50

08002ebc <moveToSquare>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void moveToSquare(uint8_t point,bool continues)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	460a      	mov	r2, r1
 8002ec6:	71fb      	strb	r3, [r7, #7]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	71bb      	strb	r3, [r7, #6]
	AS5600_Start_Update_High();
 8002ecc:	f7fe f8a8 	bl	8001020 <AS5600_Start_Update_High>
	enableStepper(&motor_j1_data, ON);
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	4833      	ldr	r0, [pc, #204]	; (8002fa0 <moveToSquare+0xe4>)
 8002ed4:	f7fe fcbe 	bl	8001854 <enableStepper>
	enableStepper(&motor_j2_data, ON);
 8002ed8:	2101      	movs	r1, #1
 8002eda:	4832      	ldr	r0, [pc, #200]	; (8002fa4 <moveToSquare+0xe8>)
 8002edc:	f7fe fcba 	bl	8001854 <enableStepper>
	moveTo(&motor_j1_data,square[point].j1);
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	4a31      	ldr	r2, [pc, #196]	; (8002fa8 <moveToSquare+0xec>)
 8002ee4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	482d      	ldr	r0, [pc, #180]	; (8002fa0 <moveToSquare+0xe4>)
 8002eec:	f7fe fc9a 	bl	8001824 <moveTo>
	run(&motor_j1_data);
 8002ef0:	482b      	ldr	r0, [pc, #172]	; (8002fa0 <moveToSquare+0xe4>)
 8002ef2:	f7fe fadf 	bl	80014b4 <run>
	moveTo(&motor_j2_data,square[point].j2);
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <moveToSquare+0xec>)
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	885b      	ldrh	r3, [r3, #2]
 8002f00:	4619      	mov	r1, r3
 8002f02:	4828      	ldr	r0, [pc, #160]	; (8002fa4 <moveToSquare+0xe8>)
 8002f04:	f7fe fc8e 	bl	8001824 <moveTo>
	run(&motor_j2_data);
 8002f08:	4826      	ldr	r0, [pc, #152]	; (8002fa4 <moveToSquare+0xe8>)
 8002f0a:	f7fe fad3 	bl	80014b4 <run>
	uint16_t check_time_out=0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	81fb      	strh	r3, [r7, #14]
	while( isRunning(&motor_j1_data) || isRunning(&motor_j2_data) ){	// Waiting for move finish
 8002f12:	e01a      	b.n	8002f4a <moveToSquare+0x8e>
		if( labs(distanceToGo(&motor_j1_data)) < 2  &&  labs(distanceToGo(&motor_j2_data)) < 2 ){		// neu dung sai la nho thi thoat trong khoang 500ms
 8002f14:	4822      	ldr	r0, [pc, #136]	; (8002fa0 <moveToSquare+0xe4>)
 8002f16:	f7fe fabd 	bl	8001494 <distanceToGo>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bfb8      	it	lt
 8002f20:	425b      	neglt	r3, r3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	dc0e      	bgt.n	8002f44 <moveToSquare+0x88>
 8002f26:	481f      	ldr	r0, [pc, #124]	; (8002fa4 <moveToSquare+0xe8>)
 8002f28:	f7fe fab4 	bl	8001494 <distanceToGo>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	bfb8      	it	lt
 8002f32:	425b      	neglt	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	dc05      	bgt.n	8002f44 <moveToSquare+0x88>
			check_time_out++;
 8002f38:	89fb      	ldrh	r3, [r7, #14]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	81fb      	strh	r3, [r7, #14]
			if(check_time_out > 100) break;
 8002f3e:	89fb      	ldrh	r3, [r7, #14]
 8002f40:	2b64      	cmp	r3, #100	; 0x64
 8002f42:	d80f      	bhi.n	8002f64 <moveToSquare+0xa8>
		}
		osDelay(10);
 8002f44:	200a      	movs	r0, #10
 8002f46:	f009 fa7c 	bl	800c442 <osDelay>
	while( isRunning(&motor_j1_data) || isRunning(&motor_j2_data) ){	// Waiting for move finish
 8002f4a:	4815      	ldr	r0, [pc, #84]	; (8002fa0 <moveToSquare+0xe4>)
 8002f4c:	f7fe fc4e 	bl	80017ec <isRunning>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1de      	bne.n	8002f14 <moveToSquare+0x58>
 8002f56:	4813      	ldr	r0, [pc, #76]	; (8002fa4 <moveToSquare+0xe8>)
 8002f58:	f7fe fc48 	bl	80017ec <isRunning>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1d8      	bne.n	8002f14 <moveToSquare+0x58>
 8002f62:	e000      	b.n	8002f66 <moveToSquare+0xaa>
			if(check_time_out > 100) break;
 8002f64:	bf00      	nop
	}
	motor_j1_data.isStop = true;
 8002f66:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <moveToSquare+0xe4>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	motor_j2_data.isStop = true;
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <moveToSquare+0xe8>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	if(continues==false)
 8002f76:	79bb      	ldrb	r3, [r7, #6]
 8002f78:	f083 0301 	eor.w	r3, r3, #1
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d009      	beq.n	8002f96 <moveToSquare+0xda>
	{
		enableStepper(&motor_j1_data, OFF);
 8002f82:	2100      	movs	r1, #0
 8002f84:	4806      	ldr	r0, [pc, #24]	; (8002fa0 <moveToSquare+0xe4>)
 8002f86:	f7fe fc65 	bl	8001854 <enableStepper>
		enableStepper(&motor_j2_data, OFF);
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4805      	ldr	r0, [pc, #20]	; (8002fa4 <moveToSquare+0xe8>)
 8002f8e:	f7fe fc61 	bl	8001854 <enableStepper>
		AS5600_Start_Update_Low();
 8002f92:	f7fe f837 	bl	8001004 <AS5600_Start_Update_Low>
	}
}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	2000b064 	.word	0x2000b064
 8002fa4:	2000b004 	.word	0x2000b004
 8002fa8:	08013fb8 	.word	0x08013fb8

08002fac <moveToHome>:

void moveToHome()
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
	moveToSquare(79, false);
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	204f      	movs	r0, #79	; 0x4f
 8002fb4:	f7ff ff82 	bl	8002ebc <moveToSquare>
}
 8002fb8:	bf00      	nop
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <moveToKill>:
void moveToKill()
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
	moveToSquare(square_kill_number + 64, true);
 8002fc0:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <moveToKill+0x24>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	3340      	adds	r3, #64	; 0x40
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2101      	movs	r1, #1
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff ff76 	bl	8002ebc <moveToSquare>
	square_kill_number++;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <moveToKill+0x24>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	4b01      	ldr	r3, [pc, #4]	; (8002fe0 <moveToKill+0x24>)
 8002fda:	701a      	strb	r2, [r3, #0]
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000210 	.word	0x20000210

08002fe4 <movePiece>:
void movePiece(uint8_t qFrom,uint8_t qTo,uint8_t option)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	71bb      	strb	r3, [r7, #6]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	717b      	strb	r3, [r7, #5]
	if(option == CMD_I2C_MOVE_KILL)										// Neu la nuoc di an quan thi gap piece ra khoi ban co
 8002ff6:	797b      	ldrb	r3, [r7, #5]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d10b      	bne.n	8003014 <movePiece+0x30>
	{
		moveToSquare(qTo, true);		// move to piece kill
 8002ffc:	79bb      	ldrb	r3, [r7, #6]
 8002ffe:	2101      	movs	r1, #1
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ff5b 	bl	8002ebc <moveToSquare>
		pickupPiece();					// pickup
 8003006:	f000 ffa3 	bl	8003f50 <pickupPiece>
		moveToKill();		// move to square die
 800300a:	f7ff ffd7 	bl	8002fbc <moveToKill>
		dropPiece();					// drop
 800300e:	f000 ffb7 	bl	8003f80 <dropPiece>
 8003012:	e05c      	b.n	80030ce <movePiece+0xea>
	}else if(option == CMD_I2C_MOVE_CASLLING_KING)
 8003014:	797b      	ldrb	r3, [r7, #5]
 8003016:	2b04      	cmp	r3, #4
 8003018:	d11a      	bne.n	8003050 <movePiece+0x6c>
	{
		moveToSquare(4, true);
 800301a:	2101      	movs	r1, #1
 800301c:	2004      	movs	r0, #4
 800301e:	f7ff ff4d 	bl	8002ebc <moveToSquare>
		pickupPiece();
 8003022:	f000 ff95 	bl	8003f50 <pickupPiece>
		moveToSquare(6, true);
 8003026:	2101      	movs	r1, #1
 8003028:	2006      	movs	r0, #6
 800302a:	f7ff ff47 	bl	8002ebc <moveToSquare>
		dropPiece();
 800302e:	f000 ffa7 	bl	8003f80 <dropPiece>
		moveToSquare(7, true);
 8003032:	2101      	movs	r1, #1
 8003034:	2007      	movs	r0, #7
 8003036:	f7ff ff41 	bl	8002ebc <moveToSquare>
		pickupPiece();
 800303a:	f000 ff89 	bl	8003f50 <pickupPiece>
		moveToSquare(5, true);
 800303e:	2101      	movs	r1, #1
 8003040:	2005      	movs	r0, #5
 8003042:	f7ff ff3b 	bl	8002ebc <moveToSquare>
		dropPiece();
 8003046:	f000 ff9b 	bl	8003f80 <dropPiece>
		moveToHome();
 800304a:	f7ff ffaf 	bl	8002fac <moveToHome>
		return;
 800304e:	e04e      	b.n	80030ee <movePiece+0x10a>
	}else if(option == CMD_I2C_MOVE_CASLLINGG_QUEEN)
 8003050:	797b      	ldrb	r3, [r7, #5]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d11a      	bne.n	800308c <movePiece+0xa8>
	{
		moveToSquare(4, true);
 8003056:	2101      	movs	r1, #1
 8003058:	2004      	movs	r0, #4
 800305a:	f7ff ff2f 	bl	8002ebc <moveToSquare>
		pickupPiece();
 800305e:	f000 ff77 	bl	8003f50 <pickupPiece>
		moveToSquare(2, true);
 8003062:	2101      	movs	r1, #1
 8003064:	2002      	movs	r0, #2
 8003066:	f7ff ff29 	bl	8002ebc <moveToSquare>
		dropPiece();
 800306a:	f000 ff89 	bl	8003f80 <dropPiece>
		moveToSquare(0, true);
 800306e:	2101      	movs	r1, #1
 8003070:	2000      	movs	r0, #0
 8003072:	f7ff ff23 	bl	8002ebc <moveToSquare>
		pickupPiece();
 8003076:	f000 ff6b 	bl	8003f50 <pickupPiece>
		moveToSquare(3, true);
 800307a:	2101      	movs	r1, #1
 800307c:	2003      	movs	r0, #3
 800307e:	f7ff ff1d 	bl	8002ebc <moveToSquare>
		dropPiece();
 8003082:	f000 ff7d 	bl	8003f80 <dropPiece>
		moveToHome();
 8003086:	f7ff ff91 	bl	8002fac <moveToHome>
		return;
 800308a:	e030      	b.n	80030ee <movePiece+0x10a>
	}else if(option == CMD_I2C_MOVE_PASSANT){
 800308c:	797b      	ldrb	r3, [r7, #5]
 800308e:	2b05      	cmp	r3, #5
 8003090:	d11d      	bne.n	80030ce <movePiece+0xea>
		moveToSquare(qTo-8, true);
 8003092:	79bb      	ldrb	r3, [r7, #6]
 8003094:	3b08      	subs	r3, #8
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2101      	movs	r1, #1
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ff0e 	bl	8002ebc <moveToSquare>
		pickupPiece();
 80030a0:	f000 ff56 	bl	8003f50 <pickupPiece>
		moveToKill();
 80030a4:	f7ff ff8a 	bl	8002fbc <moveToKill>
		dropPiece();
 80030a8:	f000 ff6a 	bl	8003f80 <dropPiece>
		moveToSquare(qFrom, true);
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	2101      	movs	r1, #1
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff03 	bl	8002ebc <moveToSquare>
		pickupPiece();
 80030b6:	f000 ff4b 	bl	8003f50 <pickupPiece>
		moveToSquare(qTo, true);
 80030ba:	79bb      	ldrb	r3, [r7, #6]
 80030bc:	2101      	movs	r1, #1
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fefc 	bl	8002ebc <moveToSquare>
		dropPiece();
 80030c4:	f000 ff5c 	bl	8003f80 <dropPiece>
		moveToHome();
 80030c8:	f7ff ff70 	bl	8002fac <moveToHome>
		return;
 80030cc:	e00f      	b.n	80030ee <movePiece+0x10a>
	}
	moveToSquare(qFrom, true);
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	2101      	movs	r1, #1
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fef2 	bl	8002ebc <moveToSquare>
	pickupPiece();
 80030d8:	f000 ff3a 	bl	8003f50 <pickupPiece>
	moveToSquare(qTo, true);
 80030dc:	79bb      	ldrb	r3, [r7, #6]
 80030de:	2101      	movs	r1, #1
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff feeb 	bl	8002ebc <moveToSquare>
	dropPiece();
 80030e6:	f000 ff4b 	bl	8003f80 <dropPiece>
	moveToHome();
 80030ea:	f7ff ff5f 	bl	8002fac <moveToHome>
}
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <updateInfo>:

void updateInfo(){
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
	  int bat_volt	= batteryGet();
 80030fa:	f7fe fce7 	bl	8001acc <batteryGet>
 80030fe:	4603      	mov	r3, r0
 8003100:	603b      	str	r3, [r7, #0]
	  uint8_t status=0;
 8003102:	2300      	movs	r3, #0
 8003104:	71fb      	strb	r3, [r7, #7]
	  data_trans_master[0] = (uint8_t)(data_AS5600_M1 & 0xFF);
 8003106:	4b34      	ldr	r3, [pc, #208]	; (80031d8 <updateInfo+0xe4>)
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	b2da      	uxtb	r2, r3
 800310c:	4b33      	ldr	r3, [pc, #204]	; (80031dc <updateInfo+0xe8>)
 800310e:	701a      	strb	r2, [r3, #0]
	  data_trans_master[1] = (uint8_t)((data_AS5600_M1>>8) & 0xFF);
 8003110:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <updateInfo+0xe4>)
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	0a1b      	lsrs	r3, r3, #8
 8003116:	b29b      	uxth	r3, r3
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4b30      	ldr	r3, [pc, #192]	; (80031dc <updateInfo+0xe8>)
 800311c:	705a      	strb	r2, [r3, #1]
	  data_trans_master[2] = (uint8_t)(data_AS5600_M2 & 0xFF);
 800311e:	4b30      	ldr	r3, [pc, #192]	; (80031e0 <updateInfo+0xec>)
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	b2da      	uxtb	r2, r3
 8003124:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <updateInfo+0xe8>)
 8003126:	709a      	strb	r2, [r3, #2]
	  data_trans_master[3] = (uint8_t)((data_AS5600_M2>>8) & 0xFF);
 8003128:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <updateInfo+0xec>)
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	0a1b      	lsrs	r3, r3, #8
 800312e:	b29b      	uxth	r3, r3
 8003130:	b2da      	uxtb	r2, r3
 8003132:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <updateInfo+0xe8>)
 8003134:	70da      	strb	r2, [r3, #3]
	  data_trans_master[4] = (uint8_t)(bat_volt & 0xFF);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	b2da      	uxtb	r2, r3
 800313a:	4b28      	ldr	r3, [pc, #160]	; (80031dc <updateInfo+0xe8>)
 800313c:	711a      	strb	r2, [r3, #4]
	  data_trans_master[5] = (uint8_t)((bat_volt>>8) & 0xFF);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	121b      	asrs	r3, r3, #8
 8003142:	b2da      	uxtb	r2, r3
 8003144:	4b25      	ldr	r3, [pc, #148]	; (80031dc <updateInfo+0xe8>)
 8003146:	715a      	strb	r2, [r3, #5]
	  if(HAL_SENSOR_UP_GET) status|=(1<<0); else status &=~(1<<0);																// Hal_sensor_up
 8003148:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800314c:	4825      	ldr	r0, [pc, #148]	; (80031e4 <updateInfo+0xf0>)
 800314e:	f003 fb87 	bl	8006860 <HAL_GPIO_ReadPin>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d004      	beq.n	8003162 <updateInfo+0x6e>
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	71fb      	strb	r3, [r7, #7]
 8003160:	e003      	b.n	800316a <updateInfo+0x76>
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	71fb      	strb	r3, [r7, #7]
	  if(HAL_SENSOR_DOWN_GET) status |= (1<<1); else status &=~(1<<1);															// Hal_sensor_down
 800316a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800316e:	481d      	ldr	r0, [pc, #116]	; (80031e4 <updateInfo+0xf0>)
 8003170:	f003 fb76 	bl	8006860 <HAL_GPIO_ReadPin>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d004      	beq.n	8003184 <updateInfo+0x90>
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	71fb      	strb	r3, [r7, #7]
 8003182:	e003      	b.n	800318c <updateInfo+0x98>
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	f023 0302 	bic.w	r3, r3, #2
 800318a:	71fb      	strb	r3, [r7, #7]
	  if(HAL_GPIO_ReadPin(BATTERY_CHANGER_GPIO_Port, BATTERY_CHANGER_Pin)==GPIO_PIN_RESET) status |=(1<<2); else status &=~(1<<2);  	// Battery Chnager
 800318c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003190:	4815      	ldr	r0, [pc, #84]	; (80031e8 <updateInfo+0xf4>)
 8003192:	f003 fb65 	bl	8006860 <HAL_GPIO_ReadPin>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d104      	bne.n	80031a6 <updateInfo+0xb2>
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	f043 0304 	orr.w	r3, r3, #4
 80031a2:	71fb      	strb	r3, [r7, #7]
 80031a4:	e003      	b.n	80031ae <updateInfo+0xba>
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	f023 0304 	bic.w	r3, r3, #4
 80031ac:	71fb      	strb	r3, [r7, #7]
	  if(moveIsFinish == true) status |=(1<<3); else status &=~(1<<3);
 80031ae:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <updateInfo+0xf8>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d004      	beq.n	80031c0 <updateInfo+0xcc>
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	f043 0308 	orr.w	r3, r3, #8
 80031bc:	71fb      	strb	r3, [r7, #7]
 80031be:	e003      	b.n	80031c8 <updateInfo+0xd4>
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	f023 0308 	bic.w	r3, r3, #8
 80031c6:	71fb      	strb	r3, [r7, #7]
	  data_trans_master[6] = status;
 80031c8:	4a04      	ldr	r2, [pc, #16]	; (80031dc <updateInfo+0xe8>)
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	7193      	strb	r3, [r2, #6]
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	2000af36 	.word	0x2000af36
 80031dc:	2000b058 	.word	0x2000b058
 80031e0:	2000af34 	.word	0x2000af34
 80031e4:	40020800 	.word	0x40020800
 80031e8:	40020400 	.word	0x40020400
 80031ec:	20000218 	.word	0x20000218

080031f0 <inverseKinematics>:
// INVERSE KINEMATICS
void inverseKinematics(float x, float y) {
 80031f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f4:	ed2d 8b02 	vpush	{d8}
 80031f8:	b086      	sub	sp, #24
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	ed87 0a01 	vstr	s0, [r7, #4]
 8003200:	edc7 0a00 	vstr	s1, [r7]
	  printf("x:%f  ",x);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7fd f9a7 	bl	8000558 <__aeabi_f2d>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	48cc      	ldr	r0, [pc, #816]	; (8003540 <inverseKinematics+0x350>)
 8003210:	f00c fe2a 	bl	800fe68 <iprintf>
	  printf("y:%f\r\n",y);
 8003214:	6838      	ldr	r0, [r7, #0]
 8003216:	f7fd f99f 	bl	8000558 <__aeabi_f2d>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	48c9      	ldr	r0, [pc, #804]	; (8003544 <inverseKinematics+0x354>)
 8003220:	f00c fe22 	bl	800fe68 <iprintf>
  theta2 = acos((sq(x) + sq(y) - sq(L1) - sq(L2)) / (2 * L1 * L2));
 8003224:	edd7 7a01 	vldr	s15, [r7, #4]
 8003228:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800322c:	edd7 7a00 	vldr	s15, [r7]
 8003230:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003238:	eddf 6ac3 	vldr	s13, [pc, #780]	; 8003548 <inverseKinematics+0x358>
 800323c:	eddf 7ac2 	vldr	s15, [pc, #776]	; 8003548 <inverseKinematics+0x358>
 8003240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003244:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003248:	eddf 6ac0 	vldr	s13, [pc, #768]	; 800354c <inverseKinematics+0x35c>
 800324c:	eddf 7abf 	vldr	s15, [pc, #764]	; 800354c <inverseKinematics+0x35c>
 8003250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003254:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003258:	eddf 7abb 	vldr	s15, [pc, #748]	; 8003548 <inverseKinematics+0x358>
 800325c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003260:	eddf 6aba 	vldr	s13, [pc, #744]	; 800354c <inverseKinematics+0x35c>
 8003264:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003268:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800326c:	ee16 0a90 	vmov	r0, s13
 8003270:	f7fd f972 	bl	8000558 <__aeabi_f2d>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	ec43 2b10 	vmov	d0, r2, r3
 800327c:	f00f f9b8 	bl	80125f0 <acos>
 8003280:	ec53 2b10 	vmov	r2, r3, d0
 8003284:	4610      	mov	r0, r2
 8003286:	4619      	mov	r1, r3
 8003288:	f7fd fc96 	bl	8000bb8 <__aeabi_d2f>
 800328c:	4603      	mov	r3, r0
 800328e:	4ab0      	ldr	r2, [pc, #704]	; (8003550 <inverseKinematics+0x360>)
 8003290:	6013      	str	r3, [r2, #0]
 if (x < 0 && y < 0) {
 8003292:	edd7 7a01 	vldr	s15, [r7, #4]
 8003296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800329a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329e:	d50e      	bpl.n	80032be <inverseKinematics+0xce>
 80032a0:	edd7 7a00 	vldr	s15, [r7]
 80032a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ac:	d507      	bpl.n	80032be <inverseKinematics+0xce>
    theta2 = (-1) * theta2;
 80032ae:	4ba8      	ldr	r3, [pc, #672]	; (8003550 <inverseKinematics+0x360>)
 80032b0:	edd3 7a00 	vldr	s15, [r3]
 80032b4:	eef1 7a67 	vneg.f32	s15, s15
 80032b8:	4ba5      	ldr	r3, [pc, #660]	; (8003550 <inverseKinematics+0x360>)
 80032ba:	edc3 7a00 	vstr	s15, [r3]
 }

  theta1 = atan(y/x) + atan((L2 * sin(theta2)) / (L1 + L2 * cos(theta2)));
 80032be:	ed97 7a00 	vldr	s14, [r7]
 80032c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80032c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032ca:	ee16 0a90 	vmov	r0, s13
 80032ce:	f7fd f943 	bl	8000558 <__aeabi_f2d>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	ec43 2b10 	vmov	d0, r2, r3
 80032da:	f00e ff39 	bl	8012150 <atan>
 80032de:	eeb0 8a40 	vmov.f32	s16, s0
 80032e2:	eef0 8a60 	vmov.f32	s17, s1
 80032e6:	4b9b      	ldr	r3, [pc, #620]	; (8003554 <inverseKinematics+0x364>)
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd f935 	bl	8000558 <__aeabi_f2d>
 80032ee:	4604      	mov	r4, r0
 80032f0:	460d      	mov	r5, r1
 80032f2:	4b97      	ldr	r3, [pc, #604]	; (8003550 <inverseKinematics+0x360>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fd f92e 	bl	8000558 <__aeabi_f2d>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	ec43 2b10 	vmov	d0, r2, r3
 8003304:	f00f f920 	bl	8012548 <sin>
 8003308:	ec53 2b10 	vmov	r2, r3, d0
 800330c:	4620      	mov	r0, r4
 800330e:	4629      	mov	r1, r5
 8003310:	f7fd f97a 	bl	8000608 <__aeabi_dmul>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4692      	mov	sl, r2
 800331a:	469b      	mov	fp, r3
 800331c:	4b8e      	ldr	r3, [pc, #568]	; (8003558 <inverseKinematics+0x368>)
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd f91a 	bl	8000558 <__aeabi_f2d>
 8003324:	4604      	mov	r4, r0
 8003326:	460d      	mov	r5, r1
 8003328:	4b8a      	ldr	r3, [pc, #552]	; (8003554 <inverseKinematics+0x364>)
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd f914 	bl	8000558 <__aeabi_f2d>
 8003330:	4680      	mov	r8, r0
 8003332:	4689      	mov	r9, r1
 8003334:	4b86      	ldr	r3, [pc, #536]	; (8003550 <inverseKinematics+0x360>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f90d 	bl	8000558 <__aeabi_f2d>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	ec43 2b10 	vmov	d0, r2, r3
 8003346:	f00f f8a3 	bl	8012490 <cos>
 800334a:	ec53 2b10 	vmov	r2, r3, d0
 800334e:	4640      	mov	r0, r8
 8003350:	4649      	mov	r1, r9
 8003352:	f7fd f959 	bl	8000608 <__aeabi_dmul>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4620      	mov	r0, r4
 800335c:	4629      	mov	r1, r5
 800335e:	f7fc ff9d 	bl	800029c <__adddf3>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4650      	mov	r0, sl
 8003368:	4659      	mov	r1, fp
 800336a:	f7fd fa77 	bl	800085c <__aeabi_ddiv>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	ec43 2b17 	vmov	d7, r2, r3
 8003376:	eeb0 0a47 	vmov.f32	s0, s14
 800337a:	eef0 0a67 	vmov.f32	s1, s15
 800337e:	f00e fee7 	bl	8012150 <atan>
 8003382:	ec53 2b10 	vmov	r2, r3, d0
 8003386:	ec51 0b18 	vmov	r0, r1, d8
 800338a:	f7fc ff87 	bl	800029c <__adddf3>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	f7fd fc0f 	bl	8000bb8 <__aeabi_d2f>
 800339a:	4603      	mov	r3, r0
 800339c:	4a6f      	ldr	r2, [pc, #444]	; (800355c <inverseKinematics+0x36c>)
 800339e:	6013      	str	r3, [r2, #0]

  theta2 = theta2 * 180 / PI;
 80033a0:	4b6b      	ldr	r3, [pc, #428]	; (8003550 <inverseKinematics+0x360>)
 80033a2:	edd3 7a00 	vldr	s15, [r3]
 80033a6:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003548 <inverseKinematics+0x358>
 80033aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033ae:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8003560 <inverseKinematics+0x370>
 80033b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033b6:	4b66      	ldr	r3, [pc, #408]	; (8003550 <inverseKinematics+0x360>)
 80033b8:	edc3 7a00 	vstr	s15, [r3]
  theta1 = theta1 * 180 / PI;
 80033bc:	4b67      	ldr	r3, [pc, #412]	; (800355c <inverseKinematics+0x36c>)
 80033be:	edd3 7a00 	vldr	s15, [r3]
 80033c2:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003548 <inverseKinematics+0x358>
 80033c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033ca:	eddf 6a65 	vldr	s13, [pc, #404]	; 8003560 <inverseKinematics+0x370>
 80033ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033d2:	4b62      	ldr	r3, [pc, #392]	; (800355c <inverseKinematics+0x36c>)
 80033d4:	edc3 7a00 	vstr	s15, [r3]
  if(theta1<0) theta1 =180 - (-1)*theta1;
 80033d8:	4b60      	ldr	r3, [pc, #384]	; (800355c <inverseKinematics+0x36c>)
 80033da:	edd3 7a00 	vldr	s15, [r3]
 80033de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e6:	d509      	bpl.n	80033fc <inverseKinematics+0x20c>
 80033e8:	4b5c      	ldr	r3, [pc, #368]	; (800355c <inverseKinematics+0x36c>)
 80033ea:	edd3 7a00 	vldr	s15, [r3]
 80033ee:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8003548 <inverseKinematics+0x358>
 80033f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033f6:	4b59      	ldr	r3, [pc, #356]	; (800355c <inverseKinematics+0x36c>)
 80033f8:	edc3 7a00 	vstr	s15, [r3]

//  printf("theta1:%f\r\n",theta1);
//  printf("theta2:%f\r\n",theta2);

  theta1 = 90 - theta1;
 80033fc:	4b57      	ldr	r3, [pc, #348]	; (800355c <inverseKinematics+0x36c>)
 80033fe:	edd3 7a00 	vldr	s15, [r3]
 8003402:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003564 <inverseKinematics+0x374>
 8003406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800340a:	4b54      	ldr	r3, [pc, #336]	; (800355c <inverseKinematics+0x36c>)
 800340c:	edc3 7a00 	vstr	s15, [r3]
  theta2 = 180 - theta2;
 8003410:	4b4f      	ldr	r3, [pc, #316]	; (8003550 <inverseKinematics+0x360>)
 8003412:	edd3 7a00 	vldr	s15, [r3]
 8003416:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003548 <inverseKinematics+0x358>
 800341a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800341e:	4b4c      	ldr	r3, [pc, #304]	; (8003550 <inverseKinematics+0x360>)
 8003420:	edc3 7a00 	vstr	s15, [r3]
//  printf("Q1:%f\r\n",theta1);
//  printf("Q2:%f\r\n",theta2);
  long int pul1,pul2;
  pul1 = J1ORIGIN + theta1*11.377;
 8003424:	4b50      	ldr	r3, [pc, #320]	; (8003568 <inverseKinematics+0x378>)
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7fd f883 	bl	8000534 <__aeabi_i2d>
 800342e:	4604      	mov	r4, r0
 8003430:	460d      	mov	r5, r1
 8003432:	4b4a      	ldr	r3, [pc, #296]	; (800355c <inverseKinematics+0x36c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd f88e 	bl	8000558 <__aeabi_f2d>
 800343c:	a33e      	add	r3, pc, #248	; (adr r3, 8003538 <inverseKinematics+0x348>)
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	f7fd f8e1 	bl	8000608 <__aeabi_dmul>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4620      	mov	r0, r4
 800344c:	4629      	mov	r1, r5
 800344e:	f7fc ff25 	bl	800029c <__adddf3>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	f7fd fb85 	bl	8000b68 <__aeabi_d2iz>
 800345e:	4603      	mov	r3, r0
 8003460:	613b      	str	r3, [r7, #16]
  pul2 = J2ORIGIN	-theta2*11.377;
 8003462:	4b42      	ldr	r3, [pc, #264]	; (800356c <inverseKinematics+0x37c>)
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd f864 	bl	8000534 <__aeabi_i2d>
 800346c:	4604      	mov	r4, r0
 800346e:	460d      	mov	r5, r1
 8003470:	4b37      	ldr	r3, [pc, #220]	; (8003550 <inverseKinematics+0x360>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd f86f 	bl	8000558 <__aeabi_f2d>
 800347a:	a32f      	add	r3, pc, #188	; (adr r3, 8003538 <inverseKinematics+0x348>)
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f7fd f8c2 	bl	8000608 <__aeabi_dmul>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4620      	mov	r0, r4
 800348a:	4629      	mov	r1, r5
 800348c:	f7fc ff04 	bl	8000298 <__aeabi_dsub>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4610      	mov	r0, r2
 8003496:	4619      	mov	r1, r3
 8003498:	f7fd fb66 	bl	8000b68 <__aeabi_d2iz>
 800349c:	4603      	mov	r3, r0
 800349e:	60fb      	str	r3, [r7, #12]
//  pul1 = round(pul1);
//  pul2 = round(pul2);
  printf("P1:%ld\r\n",pul1);
 80034a0:	6939      	ldr	r1, [r7, #16]
 80034a2:	4833      	ldr	r0, [pc, #204]	; (8003570 <inverseKinematics+0x380>)
 80034a4:	f00c fce0 	bl	800fe68 <iprintf>
  printf("P2:%ld\r\n",pul2);
 80034a8:	68f9      	ldr	r1, [r7, #12]
 80034aa:	4832      	ldr	r0, [pc, #200]	; (8003574 <inverseKinematics+0x384>)
 80034ac:	f00c fcdc 	bl	800fe68 <iprintf>

	AS5600_Start_Update_High();
 80034b0:	f7fd fdb6 	bl	8001020 <AS5600_Start_Update_High>
	enableStepper(&motor_j1_data, ON);
 80034b4:	2101      	movs	r1, #1
 80034b6:	4830      	ldr	r0, [pc, #192]	; (8003578 <inverseKinematics+0x388>)
 80034b8:	f7fe f9cc 	bl	8001854 <enableStepper>
	enableStepper(&motor_j2_data, ON);
 80034bc:	2101      	movs	r1, #1
 80034be:	482f      	ldr	r0, [pc, #188]	; (800357c <inverseKinematics+0x38c>)
 80034c0:	f7fe f9c8 	bl	8001854 <enableStepper>
	moveTo(&motor_j1_data,pul1);
 80034c4:	6939      	ldr	r1, [r7, #16]
 80034c6:	482c      	ldr	r0, [pc, #176]	; (8003578 <inverseKinematics+0x388>)
 80034c8:	f7fe f9ac 	bl	8001824 <moveTo>
	run(&motor_j1_data);
 80034cc:	482a      	ldr	r0, [pc, #168]	; (8003578 <inverseKinematics+0x388>)
 80034ce:	f7fd fff1 	bl	80014b4 <run>
	moveTo(&motor_j2_data,pul2);
 80034d2:	68f9      	ldr	r1, [r7, #12]
 80034d4:	4829      	ldr	r0, [pc, #164]	; (800357c <inverseKinematics+0x38c>)
 80034d6:	f7fe f9a5 	bl	8001824 <moveTo>
	run(&motor_j2_data);
 80034da:	4828      	ldr	r0, [pc, #160]	; (800357c <inverseKinematics+0x38c>)
 80034dc:	f7fd ffea 	bl	80014b4 <run>
	uint16_t check_time_out=0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	82fb      	strh	r3, [r7, #22]
	while( isRunning(&motor_j1_data) || isRunning(&motor_j2_data) ){	// Waiting for move finish
 80034e4:	e01a      	b.n	800351c <inverseKinematics+0x32c>
		if( labs(distanceToGo(&motor_j1_data)) < 2  &&  labs(distanceToGo(&motor_j2_data)) < 2 ){		// neu dung sai la nho thi thoat trong khoang 500ms
 80034e6:	4824      	ldr	r0, [pc, #144]	; (8003578 <inverseKinematics+0x388>)
 80034e8:	f7fd ffd4 	bl	8001494 <distanceToGo>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bfb8      	it	lt
 80034f2:	425b      	neglt	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	dc0e      	bgt.n	8003516 <inverseKinematics+0x326>
 80034f8:	4820      	ldr	r0, [pc, #128]	; (800357c <inverseKinematics+0x38c>)
 80034fa:	f7fd ffcb 	bl	8001494 <distanceToGo>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	bfb8      	it	lt
 8003504:	425b      	neglt	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	dc05      	bgt.n	8003516 <inverseKinematics+0x326>
			check_time_out++;
 800350a:	8afb      	ldrh	r3, [r7, #22]
 800350c:	3301      	adds	r3, #1
 800350e:	82fb      	strh	r3, [r7, #22]
			if(check_time_out > 100) break;
 8003510:	8afb      	ldrh	r3, [r7, #22]
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d834      	bhi.n	8003580 <inverseKinematics+0x390>
		}
		osDelay(10);
 8003516:	200a      	movs	r0, #10
 8003518:	f008 ff93 	bl	800c442 <osDelay>
	while( isRunning(&motor_j1_data) || isRunning(&motor_j2_data) ){	// Waiting for move finish
 800351c:	4816      	ldr	r0, [pc, #88]	; (8003578 <inverseKinematics+0x388>)
 800351e:	f7fe f965 	bl	80017ec <isRunning>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1de      	bne.n	80034e6 <inverseKinematics+0x2f6>
 8003528:	4814      	ldr	r0, [pc, #80]	; (800357c <inverseKinematics+0x38c>)
 800352a:	f7fe f95f 	bl	80017ec <isRunning>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1d8      	bne.n	80034e6 <inverseKinematics+0x2f6>
 8003534:	e025      	b.n	8003582 <inverseKinematics+0x392>
 8003536:	bf00      	nop
 8003538:	24dd2f1b 	.word	0x24dd2f1b
 800353c:	4026c106 	.word	0x4026c106
 8003540:	08013f60 	.word	0x08013f60
 8003544:	08013f68 	.word	0x08013f68
 8003548:	43340000 	.word	0x43340000
 800354c:	439d0000 	.word	0x439d0000
 8003550:	2000b000 	.word	0x2000b000
 8003554:	439d0000 	.word	0x439d0000
 8003558:	43340000 	.word	0x43340000
 800355c:	2000b0b8 	.word	0x2000b0b8
 8003560:	40490fd0 	.word	0x40490fd0
 8003564:	42b40000 	.word	0x42b40000
 8003568:	20000000 	.word	0x20000000
 800356c:	20000002 	.word	0x20000002
 8003570:	08013f70 	.word	0x08013f70
 8003574:	08013f7c 	.word	0x08013f7c
 8003578:	2000b064 	.word	0x2000b064
 800357c:	2000b004 	.word	0x2000b004
			if(check_time_out > 100) break;
 8003580:	bf00      	nop
	}
	motor_j1_data.isStop = true;
 8003582:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <inverseKinematics+0x3c4>)
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	motor_j2_data.isStop = true;
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <inverseKinematics+0x3c8>)
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	enableStepper(&motor_j1_data, OFF);
 8003592:	2100      	movs	r1, #0
 8003594:	4807      	ldr	r0, [pc, #28]	; (80035b4 <inverseKinematics+0x3c4>)
 8003596:	f7fe f95d 	bl	8001854 <enableStepper>
	enableStepper(&motor_j2_data, OFF);
 800359a:	2100      	movs	r1, #0
 800359c:	4806      	ldr	r0, [pc, #24]	; (80035b8 <inverseKinematics+0x3c8>)
 800359e:	f7fe f959 	bl	8001854 <enableStepper>
	AS5600_Start_Update_Low();
 80035a2:	f7fd fd2f 	bl	8001004 <AS5600_Start_Update_Low>
}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	ecbd 8b02 	vpop	{d8}
 80035b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035b4:	2000b064 	.word	0x2000b064
 80035b8:	2000b004 	.word	0x2000b004

080035bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	; 0x28
 80035c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c2:	f107 0314 	add.w	r3, r7, #20
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	605a      	str	r2, [r3, #4]
 80035cc:	609a      	str	r2, [r3, #8]
 80035ce:	60da      	str	r2, [r3, #12]
 80035d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	4b45      	ldr	r3, [pc, #276]	; (80036ec <MX_GPIO_Init+0x130>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	4a44      	ldr	r2, [pc, #272]	; (80036ec <MX_GPIO_Init+0x130>)
 80035dc:	f043 0304 	orr.w	r3, r3, #4
 80035e0:	6313      	str	r3, [r2, #48]	; 0x30
 80035e2:	4b42      	ldr	r3, [pc, #264]	; (80036ec <MX_GPIO_Init+0x130>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	4b3e      	ldr	r3, [pc, #248]	; (80036ec <MX_GPIO_Init+0x130>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	4a3d      	ldr	r2, [pc, #244]	; (80036ec <MX_GPIO_Init+0x130>)
 80035f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035fc:	6313      	str	r3, [r2, #48]	; 0x30
 80035fe:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <MX_GPIO_Init+0x130>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	4b37      	ldr	r3, [pc, #220]	; (80036ec <MX_GPIO_Init+0x130>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	4a36      	ldr	r2, [pc, #216]	; (80036ec <MX_GPIO_Init+0x130>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	6313      	str	r3, [r2, #48]	; 0x30
 800361a:	4b34      	ldr	r3, [pc, #208]	; (80036ec <MX_GPIO_Init+0x130>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	4b30      	ldr	r3, [pc, #192]	; (80036ec <MX_GPIO_Init+0x130>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	4a2f      	ldr	r2, [pc, #188]	; (80036ec <MX_GPIO_Init+0x130>)
 8003630:	f043 0302 	orr.w	r3, r3, #2
 8003634:	6313      	str	r3, [r2, #48]	; 0x30
 8003636:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <MX_GPIO_Init+0x130>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	607b      	str	r3, [r7, #4]
 8003640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, J3_A_Pin|J3_B_Pin|J2_DIR_Pin|J2_EN_Pin
 8003642:	2200      	movs	r2, #0
 8003644:	f248 01c3 	movw	r1, #32963	; 0x80c3
 8003648:	4829      	ldr	r0, [pc, #164]	; (80036f0 <MX_GPIO_Init+0x134>)
 800364a:	f003 f921 	bl	8006890 <HAL_GPIO_WritePin>
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, J1_DIR_Pin|J1_EN_Pin|OUT_GND_Pin, GPIO_PIN_RESET);
 800364e:	2200      	movs	r2, #0
 8003650:	f248 0106 	movw	r1, #32774	; 0x8006
 8003654:	4827      	ldr	r0, [pc, #156]	; (80036f4 <MX_GPIO_Init+0x138>)
 8003656:	f003 f91b 	bl	8006890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 800365a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800365e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003660:	2300      	movs	r3, #0
 8003662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003664:	2301      	movs	r3, #1
 8003666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8003668:	f107 0314 	add.w	r3, r7, #20
 800366c:	4619      	mov	r1, r3
 800366e:	4822      	ldr	r0, [pc, #136]	; (80036f8 <MX_GPIO_Init+0x13c>)
 8003670:	f002 ff72 	bl	8006558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = HAL_SENSOR_B_Pin|HAL_SENSOR_A_Pin;
 8003674:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800367a:	2300      	movs	r3, #0
 800367c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003682:	f107 0314 	add.w	r3, r7, #20
 8003686:	4619      	mov	r1, r3
 8003688:	481b      	ldr	r0, [pc, #108]	; (80036f8 <MX_GPIO_Init+0x13c>)
 800368a:	f002 ff65 	bl	8006558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = J3_A_Pin|J3_B_Pin|J2_DIR_Pin|J2_EN_Pin
 800368e:	f248 03c3 	movw	r3, #32963	; 0x80c3
 8003692:	617b      	str	r3, [r7, #20]
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003694:	2301      	movs	r3, #1
 8003696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003698:	2300      	movs	r3, #0
 800369a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369c:	2300      	movs	r3, #0
 800369e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a0:	f107 0314 	add.w	r3, r7, #20
 80036a4:	4619      	mov	r1, r3
 80036a6:	4812      	ldr	r0, [pc, #72]	; (80036f0 <MX_GPIO_Init+0x134>)
 80036a8:	f002 ff56 	bl	8006558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = J1_DIR_Pin|J1_EN_Pin|OUT_GND_Pin;
 80036ac:	f248 0306 	movw	r3, #32774	; 0x8006
 80036b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036b2:	2301      	movs	r3, #1
 80036b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ba:	2300      	movs	r3, #0
 80036bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036be:	f107 0314 	add.w	r3, r7, #20
 80036c2:	4619      	mov	r1, r3
 80036c4:	480b      	ldr	r0, [pc, #44]	; (80036f4 <MX_GPIO_Init+0x138>)
 80036c6:	f002 ff47 	bl	8006558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BTN2_Pin|BATTERY_CHANGER_Pin;
 80036ca:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80036ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036d4:	2301      	movs	r3, #1
 80036d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	4619      	mov	r1, r3
 80036de:	4805      	ldr	r0, [pc, #20]	; (80036f4 <MX_GPIO_Init+0x138>)
 80036e0:	f002 ff3a 	bl	8006558 <HAL_GPIO_Init>

}
 80036e4:	bf00      	nop
 80036e6:	3728      	adds	r7, #40	; 0x28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40020000 	.word	0x40020000
 80036f4:	40020400 	.word	0x40020400
 80036f8:	40020800 	.word	0x40020800

080036fc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_tx;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <MX_I2C1_Init+0x50>)
 8003702:	4a13      	ldr	r2, [pc, #76]	; (8003750 <MX_I2C1_Init+0x54>)
 8003704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003706:	4b11      	ldr	r3, [pc, #68]	; (800374c <MX_I2C1_Init+0x50>)
 8003708:	4a12      	ldr	r2, [pc, #72]	; (8003754 <MX_I2C1_Init+0x58>)
 800370a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <MX_I2C1_Init+0x50>)
 800370e:	2200      	movs	r2, #0
 8003710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003712:	4b0e      	ldr	r3, [pc, #56]	; (800374c <MX_I2C1_Init+0x50>)
 8003714:	2200      	movs	r2, #0
 8003716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003718:	4b0c      	ldr	r3, [pc, #48]	; (800374c <MX_I2C1_Init+0x50>)
 800371a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800371e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <MX_I2C1_Init+0x50>)
 8003722:	2200      	movs	r2, #0
 8003724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <MX_I2C1_Init+0x50>)
 8003728:	2200      	movs	r2, #0
 800372a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800372c:	4b07      	ldr	r3, [pc, #28]	; (800374c <MX_I2C1_Init+0x50>)
 800372e:	2200      	movs	r2, #0
 8003730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003732:	4b06      	ldr	r3, [pc, #24]	; (800374c <MX_I2C1_Init+0x50>)
 8003734:	2200      	movs	r2, #0
 8003736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003738:	4804      	ldr	r0, [pc, #16]	; (800374c <MX_I2C1_Init+0x50>)
 800373a:	f003 f8dd 	bl	80068f8 <HAL_I2C_Init>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003744:	f000 fb70 	bl	8003e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003748:	bf00      	nop
 800374a:	bd80      	pop	{r7, pc}
 800374c:	2000b17c 	.word	0x2000b17c
 8003750:	40005400 	.word	0x40005400
 8003754:	000186a0 	.word	0x000186a0

08003758 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <MX_I2C2_Init+0x50>)
 800375e:	4a13      	ldr	r2, [pc, #76]	; (80037ac <MX_I2C2_Init+0x54>)
 8003760:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003762:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <MX_I2C2_Init+0x50>)
 8003764:	4a12      	ldr	r2, [pc, #72]	; (80037b0 <MX_I2C2_Init+0x58>)
 8003766:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <MX_I2C2_Init+0x50>)
 800376a:	2200      	movs	r2, #0
 800376c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 32;
 800376e:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <MX_I2C2_Init+0x50>)
 8003770:	2220      	movs	r2, #32
 8003772:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <MX_I2C2_Init+0x50>)
 8003776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800377a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <MX_I2C2_Init+0x50>)
 800377e:	2200      	movs	r2, #0
 8003780:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003782:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <MX_I2C2_Init+0x50>)
 8003784:	2200      	movs	r2, #0
 8003786:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003788:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <MX_I2C2_Init+0x50>)
 800378a:	2200      	movs	r2, #0
 800378c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <MX_I2C2_Init+0x50>)
 8003790:	2200      	movs	r2, #0
 8003792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003794:	4804      	ldr	r0, [pc, #16]	; (80037a8 <MX_I2C2_Init+0x50>)
 8003796:	f003 f8af 	bl	80068f8 <HAL_I2C_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80037a0:	f000 fb42 	bl	8003e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80037a4:	bf00      	nop
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	2000b1d0 	.word	0x2000b1d0
 80037ac:	40005800 	.word	0x40005800
 80037b0:	00061a80 	.word	0x00061a80

080037b4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80037b8:	4b12      	ldr	r3, [pc, #72]	; (8003804 <MX_I2C3_Init+0x50>)
 80037ba:	4a13      	ldr	r2, [pc, #76]	; (8003808 <MX_I2C3_Init+0x54>)
 80037bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80037be:	4b11      	ldr	r3, [pc, #68]	; (8003804 <MX_I2C3_Init+0x50>)
 80037c0:	4a12      	ldr	r2, [pc, #72]	; (800380c <MX_I2C3_Init+0x58>)
 80037c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037c4:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <MX_I2C3_Init+0x50>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80037ca:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <MX_I2C3_Init+0x50>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <MX_I2C3_Init+0x50>)
 80037d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037d6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037d8:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <MX_I2C3_Init+0x50>)
 80037da:	2200      	movs	r2, #0
 80037dc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80037de:	4b09      	ldr	r3, [pc, #36]	; (8003804 <MX_I2C3_Init+0x50>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037e4:	4b07      	ldr	r3, [pc, #28]	; (8003804 <MX_I2C3_Init+0x50>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <MX_I2C3_Init+0x50>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80037f0:	4804      	ldr	r0, [pc, #16]	; (8003804 <MX_I2C3_Init+0x50>)
 80037f2:	f003 f881 	bl	80068f8 <HAL_I2C_Init>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80037fc:	f000 fb14 	bl	8003e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003800:	bf00      	nop
 8003802:	bd80      	pop	{r7, pc}
 8003804:	2000b0c8 	.word	0x2000b0c8
 8003808:	40005c00 	.word	0x40005c00
 800380c:	000186a0 	.word	0x000186a0

08003810 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08e      	sub	sp, #56	; 0x38
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a90      	ldr	r2, [pc, #576]	; (8003a70 <HAL_I2C_MspInit+0x260>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d16b      	bne.n	800390a <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	623b      	str	r3, [r7, #32]
 8003836:	4b8f      	ldr	r3, [pc, #572]	; (8003a74 <HAL_I2C_MspInit+0x264>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	4a8e      	ldr	r2, [pc, #568]	; (8003a74 <HAL_I2C_MspInit+0x264>)
 800383c:	f043 0302 	orr.w	r3, r3, #2
 8003840:	6313      	str	r3, [r2, #48]	; 0x30
 8003842:	4b8c      	ldr	r3, [pc, #560]	; (8003a74 <HAL_I2C_MspInit+0x264>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	623b      	str	r3, [r7, #32]
 800384c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AS5600_1_SCL_Pin|AS5600_1_SDA_Pin;
 800384e:	23c0      	movs	r3, #192	; 0xc0
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003852:	2312      	movs	r3, #18
 8003854:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003856:	2301      	movs	r3, #1
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800385a:	2303      	movs	r3, #3
 800385c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800385e:	2304      	movs	r3, #4
 8003860:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003866:	4619      	mov	r1, r3
 8003868:	4883      	ldr	r0, [pc, #524]	; (8003a78 <HAL_I2C_MspInit+0x268>)
 800386a:	f002 fe75 	bl	8006558 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	4b80      	ldr	r3, [pc, #512]	; (8003a74 <HAL_I2C_MspInit+0x264>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	4a7f      	ldr	r2, [pc, #508]	; (8003a74 <HAL_I2C_MspInit+0x264>)
 8003878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800387c:	6413      	str	r3, [r2, #64]	; 0x40
 800387e:	4b7d      	ldr	r3, [pc, #500]	; (8003a74 <HAL_I2C_MspInit+0x264>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003886:	61fb      	str	r3, [r7, #28]
 8003888:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800388a:	4b7c      	ldr	r3, [pc, #496]	; (8003a7c <HAL_I2C_MspInit+0x26c>)
 800388c:	4a7c      	ldr	r2, [pc, #496]	; (8003a80 <HAL_I2C_MspInit+0x270>)
 800388e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003890:	4b7a      	ldr	r3, [pc, #488]	; (8003a7c <HAL_I2C_MspInit+0x26c>)
 8003892:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003896:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003898:	4b78      	ldr	r3, [pc, #480]	; (8003a7c <HAL_I2C_MspInit+0x26c>)
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800389e:	4b77      	ldr	r3, [pc, #476]	; (8003a7c <HAL_I2C_MspInit+0x26c>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038a4:	4b75      	ldr	r3, [pc, #468]	; (8003a7c <HAL_I2C_MspInit+0x26c>)
 80038a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038aa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038ac:	4b73      	ldr	r3, [pc, #460]	; (8003a7c <HAL_I2C_MspInit+0x26c>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038b2:	4b72      	ldr	r3, [pc, #456]	; (8003a7c <HAL_I2C_MspInit+0x26c>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80038b8:	4b70      	ldr	r3, [pc, #448]	; (8003a7c <HAL_I2C_MspInit+0x26c>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80038be:	4b6f      	ldr	r3, [pc, #444]	; (8003a7c <HAL_I2C_MspInit+0x26c>)
 80038c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038c4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038c6:	4b6d      	ldr	r3, [pc, #436]	; (8003a7c <HAL_I2C_MspInit+0x26c>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80038cc:	486b      	ldr	r0, [pc, #428]	; (8003a7c <HAL_I2C_MspInit+0x26c>)
 80038ce:	f001 ff4f 	bl	8005770 <HAL_DMA_Init>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80038d8:	f000 faa6 	bl	8003e28 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a67      	ldr	r2, [pc, #412]	; (8003a7c <HAL_I2C_MspInit+0x26c>)
 80038e0:	639a      	str	r2, [r3, #56]	; 0x38
 80038e2:	4a66      	ldr	r2, [pc, #408]	; (8003a7c <HAL_I2C_MspInit+0x26c>)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80038e8:	2200      	movs	r2, #0
 80038ea:	2105      	movs	r1, #5
 80038ec:	201f      	movs	r0, #31
 80038ee:	f001 ff15 	bl	800571c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80038f2:	201f      	movs	r0, #31
 80038f4:	f001 ff2e 	bl	8005754 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 15, 0);
 80038f8:	2200      	movs	r2, #0
 80038fa:	210f      	movs	r1, #15
 80038fc:	2020      	movs	r0, #32
 80038fe:	f001 ff0d 	bl	800571c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003902:	2020      	movs	r0, #32
 8003904:	f001 ff26 	bl	8005754 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003908:	e156      	b.n	8003bb8 <HAL_I2C_MspInit+0x3a8>
  else if(i2cHandle->Instance==I2C2)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a5d      	ldr	r2, [pc, #372]	; (8003a84 <HAL_I2C_MspInit+0x274>)
 8003910:	4293      	cmp	r3, r2
 8003912:	f040 80c1 	bne.w	8003a98 <HAL_I2C_MspInit+0x288>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	4b56      	ldr	r3, [pc, #344]	; (8003a74 <HAL_I2C_MspInit+0x264>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	4a55      	ldr	r2, [pc, #340]	; (8003a74 <HAL_I2C_MspInit+0x264>)
 8003920:	f043 0302 	orr.w	r3, r3, #2
 8003924:	6313      	str	r3, [r2, #48]	; 0x30
 8003926:	4b53      	ldr	r3, [pc, #332]	; (8003a74 <HAL_I2C_MspInit+0x264>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	61bb      	str	r3, [r7, #24]
 8003930:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003938:	2312      	movs	r3, #18
 800393a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800393c:	2301      	movs	r3, #1
 800393e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003940:	2303      	movs	r3, #3
 8003942:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003944:	2304      	movs	r3, #4
 8003946:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800394c:	4619      	mov	r1, r3
 800394e:	484a      	ldr	r0, [pc, #296]	; (8003a78 <HAL_I2C_MspInit+0x268>)
 8003950:	f002 fe02 	bl	8006558 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003954:	2308      	movs	r3, #8
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003958:	2312      	movs	r3, #18
 800395a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800395c:	2301      	movs	r3, #1
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003960:	2303      	movs	r3, #3
 8003962:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003964:	2309      	movs	r3, #9
 8003966:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800396c:	4619      	mov	r1, r3
 800396e:	4842      	ldr	r0, [pc, #264]	; (8003a78 <HAL_I2C_MspInit+0x268>)
 8003970:	f002 fdf2 	bl	8006558 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	4b3e      	ldr	r3, [pc, #248]	; (8003a74 <HAL_I2C_MspInit+0x264>)
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	4a3d      	ldr	r2, [pc, #244]	; (8003a74 <HAL_I2C_MspInit+0x264>)
 800397e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003982:	6413      	str	r3, [r2, #64]	; 0x40
 8003984:	4b3b      	ldr	r3, [pc, #236]	; (8003a74 <HAL_I2C_MspInit+0x264>)
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	697b      	ldr	r3, [r7, #20]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8003990:	4b3d      	ldr	r3, [pc, #244]	; (8003a88 <HAL_I2C_MspInit+0x278>)
 8003992:	4a3e      	ldr	r2, [pc, #248]	; (8003a8c <HAL_I2C_MspInit+0x27c>)
 8003994:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8003996:	4b3c      	ldr	r3, [pc, #240]	; (8003a88 <HAL_I2C_MspInit+0x278>)
 8003998:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800399c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800399e:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <HAL_I2C_MspInit+0x278>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039a4:	4b38      	ldr	r3, [pc, #224]	; (8003a88 <HAL_I2C_MspInit+0x278>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039aa:	4b37      	ldr	r3, [pc, #220]	; (8003a88 <HAL_I2C_MspInit+0x278>)
 80039ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039b0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039b2:	4b35      	ldr	r3, [pc, #212]	; (8003a88 <HAL_I2C_MspInit+0x278>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039b8:	4b33      	ldr	r3, [pc, #204]	; (8003a88 <HAL_I2C_MspInit+0x278>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80039be:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <HAL_I2C_MspInit+0x278>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80039c4:	4b30      	ldr	r3, [pc, #192]	; (8003a88 <HAL_I2C_MspInit+0x278>)
 80039c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80039ca:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039cc:	4b2e      	ldr	r3, [pc, #184]	; (8003a88 <HAL_I2C_MspInit+0x278>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80039d2:	482d      	ldr	r0, [pc, #180]	; (8003a88 <HAL_I2C_MspInit+0x278>)
 80039d4:	f001 fecc 	bl	8005770 <HAL_DMA_Init>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 80039de:	f000 fa23 	bl	8003e28 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a28      	ldr	r2, [pc, #160]	; (8003a88 <HAL_I2C_MspInit+0x278>)
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38
 80039e8:	4a27      	ldr	r2, [pc, #156]	; (8003a88 <HAL_I2C_MspInit+0x278>)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80039ee:	4b28      	ldr	r3, [pc, #160]	; (8003a90 <HAL_I2C_MspInit+0x280>)
 80039f0:	4a28      	ldr	r2, [pc, #160]	; (8003a94 <HAL_I2C_MspInit+0x284>)
 80039f2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80039f4:	4b26      	ldr	r3, [pc, #152]	; (8003a90 <HAL_I2C_MspInit+0x280>)
 80039f6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80039fa:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039fc:	4b24      	ldr	r3, [pc, #144]	; (8003a90 <HAL_I2C_MspInit+0x280>)
 80039fe:	2240      	movs	r2, #64	; 0x40
 8003a00:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a02:	4b23      	ldr	r3, [pc, #140]	; (8003a90 <HAL_I2C_MspInit+0x280>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a08:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <HAL_I2C_MspInit+0x280>)
 8003a0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a0e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a10:	4b1f      	ldr	r3, [pc, #124]	; (8003a90 <HAL_I2C_MspInit+0x280>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a16:	4b1e      	ldr	r3, [pc, #120]	; (8003a90 <HAL_I2C_MspInit+0x280>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8003a1c:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <HAL_I2C_MspInit+0x280>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003a22:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <HAL_I2C_MspInit+0x280>)
 8003a24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003a28:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a2a:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_I2C_MspInit+0x280>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8003a30:	4817      	ldr	r0, [pc, #92]	; (8003a90 <HAL_I2C_MspInit+0x280>)
 8003a32:	f001 fe9d 	bl	8005770 <HAL_DMA_Init>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_I2C_MspInit+0x230>
      Error_Handler();
 8003a3c:	f000 f9f4 	bl	8003e28 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a13      	ldr	r2, [pc, #76]	; (8003a90 <HAL_I2C_MspInit+0x280>)
 8003a44:	635a      	str	r2, [r3, #52]	; 0x34
 8003a46:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <HAL_I2C_MspInit+0x280>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2105      	movs	r1, #5
 8003a50:	2021      	movs	r0, #33	; 0x21
 8003a52:	f001 fe63 	bl	800571c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003a56:	2021      	movs	r0, #33	; 0x21
 8003a58:	f001 fe7c 	bl	8005754 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 15, 0);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	210f      	movs	r1, #15
 8003a60:	2022      	movs	r0, #34	; 0x22
 8003a62:	f001 fe5b 	bl	800571c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003a66:	2022      	movs	r0, #34	; 0x22
 8003a68:	f001 fe74 	bl	8005754 <HAL_NVIC_EnableIRQ>
}
 8003a6c:	e0a4      	b.n	8003bb8 <HAL_I2C_MspInit+0x3a8>
 8003a6e:	bf00      	nop
 8003a70:	40005400 	.word	0x40005400
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40020400 	.word	0x40020400
 8003a7c:	2000b2e4 	.word	0x2000b2e4
 8003a80:	40026010 	.word	0x40026010
 8003a84:	40005800 	.word	0x40005800
 8003a88:	2000b224 	.word	0x2000b224
 8003a8c:	40026040 	.word	0x40026040
 8003a90:	2000b284 	.word	0x2000b284
 8003a94:	400260b8 	.word	0x400260b8
  else if(i2cHandle->Instance==I2C3)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a48      	ldr	r2, [pc, #288]	; (8003bc0 <HAL_I2C_MspInit+0x3b0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	f040 808a 	bne.w	8003bb8 <HAL_I2C_MspInit+0x3a8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <HAL_I2C_MspInit+0x3b4>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	4a45      	ldr	r2, [pc, #276]	; (8003bc4 <HAL_I2C_MspInit+0x3b4>)
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab4:	4b43      	ldr	r3, [pc, #268]	; (8003bc4 <HAL_I2C_MspInit+0x3b4>)
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	4b3f      	ldr	r3, [pc, #252]	; (8003bc4 <HAL_I2C_MspInit+0x3b4>)
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	4a3e      	ldr	r2, [pc, #248]	; (8003bc4 <HAL_I2C_MspInit+0x3b4>)
 8003aca:	f043 0302 	orr.w	r3, r3, #2
 8003ace:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad0:	4b3c      	ldr	r3, [pc, #240]	; (8003bc4 <HAL_I2C_MspInit+0x3b4>)
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AS5600_2_SCL_Pin;
 8003adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ae2:	2312      	movs	r3, #18
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aea:	2303      	movs	r3, #3
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003aee:	2304      	movs	r3, #4
 8003af0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AS5600_2_SCL_GPIO_Port, &GPIO_InitStruct);
 8003af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af6:	4619      	mov	r1, r3
 8003af8:	4833      	ldr	r0, [pc, #204]	; (8003bc8 <HAL_I2C_MspInit+0x3b8>)
 8003afa:	f002 fd2d 	bl	8006558 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AS5600_2_SDA_Pin;
 8003afe:	2310      	movs	r3, #16
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b02:	2312      	movs	r3, #18
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b06:	2301      	movs	r3, #1
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8003b0e:	2309      	movs	r3, #9
 8003b10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AS5600_2_SDA_GPIO_Port, &GPIO_InitStruct);
 8003b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b16:	4619      	mov	r1, r3
 8003b18:	482c      	ldr	r0, [pc, #176]	; (8003bcc <HAL_I2C_MspInit+0x3bc>)
 8003b1a:	f002 fd1d 	bl	8006558 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	4b28      	ldr	r3, [pc, #160]	; (8003bc4 <HAL_I2C_MspInit+0x3b4>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	4a27      	ldr	r2, [pc, #156]	; (8003bc4 <HAL_I2C_MspInit+0x3b4>)
 8003b28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2e:	4b25      	ldr	r3, [pc, #148]	; (8003bc4 <HAL_I2C_MspInit+0x3b4>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 8003b3a:	4b25      	ldr	r3, [pc, #148]	; (8003bd0 <HAL_I2C_MspInit+0x3c0>)
 8003b3c:	4a25      	ldr	r2, [pc, #148]	; (8003bd4 <HAL_I2C_MspInit+0x3c4>)
 8003b3e:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 8003b40:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <HAL_I2C_MspInit+0x3c0>)
 8003b42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b46:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b48:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <HAL_I2C_MspInit+0x3c0>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <HAL_I2C_MspInit+0x3c0>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b54:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <HAL_I2C_MspInit+0x3c0>)
 8003b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b5a:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b5c:	4b1c      	ldr	r3, [pc, #112]	; (8003bd0 <HAL_I2C_MspInit+0x3c0>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b62:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_I2C_MspInit+0x3c0>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8003b68:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <HAL_I2C_MspInit+0x3c0>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003b6e:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <HAL_I2C_MspInit+0x3c0>)
 8003b70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b74:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b76:	4b16      	ldr	r3, [pc, #88]	; (8003bd0 <HAL_I2C_MspInit+0x3c0>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8003b7c:	4814      	ldr	r0, [pc, #80]	; (8003bd0 <HAL_I2C_MspInit+0x3c0>)
 8003b7e:	f001 fdf7 	bl	8005770 <HAL_DMA_Init>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_I2C_MspInit+0x37c>
      Error_Handler();
 8003b88:	f000 f94e 	bl	8003e28 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a10      	ldr	r2, [pc, #64]	; (8003bd0 <HAL_I2C_MspInit+0x3c0>)
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38
 8003b92:	4a0f      	ldr	r2, [pc, #60]	; (8003bd0 <HAL_I2C_MspInit+0x3c0>)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2105      	movs	r1, #5
 8003b9c:	2048      	movs	r0, #72	; 0x48
 8003b9e:	f001 fdbd 	bl	800571c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003ba2:	2048      	movs	r0, #72	; 0x48
 8003ba4:	f001 fdd6 	bl	8005754 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 15, 0);
 8003ba8:	2200      	movs	r2, #0
 8003baa:	210f      	movs	r1, #15
 8003bac:	2049      	movs	r0, #73	; 0x49
 8003bae:	f001 fdb5 	bl	800571c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003bb2:	2049      	movs	r0, #73	; 0x49
 8003bb4:	f001 fdce 	bl	8005754 <HAL_NVIC_EnableIRQ>
}
 8003bb8:	bf00      	nop
 8003bba:	3738      	adds	r7, #56	; 0x38
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40005c00 	.word	0x40005c00
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40020000 	.word	0x40020000
 8003bcc:	40020400 	.word	0x40020400
 8003bd0:	2000b11c 	.word	0x2000b11c
 8003bd4:	40026028 	.word	0x40026028

08003bd8 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 1000);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	4804      	ldr	r0, [pc, #16]	; (8003c00 <_write+0x28>)
 8003bf0:	f007 fa72 	bl	800b0d8 <HAL_UART_Transmit>
  return len;
 8003bf4:	687b      	ldr	r3, [r7, #4]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	2000b3c0 	.word	0x2000b3c0

08003c04 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART2){
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a0d      	ldr	r2, [pc, #52]	; (8003c4c <HAL_UARTEx_RxEventCallback+0x48>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d113      	bne.n	8003c42 <HAL_UARTEx_RxEventCallback+0x3e>
		memcpy(uart2_main_buf,uart2_rx_buf,UART2_BUFFER_LENGTH);
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <HAL_UARTEx_RxEventCallback+0x4c>)
 8003c1c:	4a0d      	ldr	r2, [pc, #52]	; (8003c54 <HAL_UARTEx_RxEventCallback+0x50>)
 8003c1e:	6810      	ldr	r0, [r2, #0]
 8003c20:	6851      	ldr	r1, [r2, #4]
 8003c22:	6018      	str	r0, [r3, #0]
 8003c24:	6059      	str	r1, [r3, #4]
 8003c26:	8912      	ldrh	r2, [r2, #8]
 8003c28:	811a      	strh	r2, [r3, #8]
		uart2_onData=true;
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_UARTEx_RxEventCallback+0x54>)
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	701a      	strb	r2, [r3, #0]
		uart2_data_length=Size;
 8003c30:	887b      	ldrh	r3, [r7, #2]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <HAL_UARTEx_RxEventCallback+0x58>)
 8003c36:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart2_rx_buf, UART2_BUFFER_LENGTH);
 8003c38:	220a      	movs	r2, #10
 8003c3a:	4906      	ldr	r1, [pc, #24]	; (8003c54 <HAL_UARTEx_RxEventCallback+0x50>)
 8003c3c:	4808      	ldr	r0, [pc, #32]	; (8003c60 <HAL_UARTEx_RxEventCallback+0x5c>)
 8003c3e:	f007 fadd 	bl	800b1fc <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40004400 	.word	0x40004400
 8003c50:	2000b3a4 	.word	0x2000b3a4
 8003c54:	2000b3b4 	.word	0x2000b3b4
 8003c58:	200008c4 	.word	0x200008c4
 8003c5c:	2000b3b0 	.word	0x2000b3b0
 8003c60:	2000b3c0 	.word	0x2000b3c0

08003c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c68:	f000 ffba 	bl	8004be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c6c:	f000 f844 	bl	8003cf8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_FLASH_Unlock();
 8003c70:	f002 f9ee 	bl	8006050 <HAL_FLASH_Unlock>
  if( EE_Init() != EE_OK)
 8003c74:	f7fd ff94 	bl	8001ba0 <EE_Init>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <main+0x1e>
  {
    Error_Handler();
 8003c7e:	f000 f8d3 	bl	8003e28 <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c82:	f7ff fc9b 	bl	80035bc <MX_GPIO_Init>
  MX_DMA_Init();
 8003c86:	f7fd ff2d 	bl	8001ae4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003c8a:	f000 fe39 	bl	8004900 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8003c8e:	f7fd fe01 	bl	8001894 <MX_ADC1_Init>
  MX_TIM2_Init();
 8003c92:	f000 fba5 	bl	80043e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003c96:	f000 fc19 	bl	80044cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8003c9a:	f000 fc8d 	bl	80045b8 <MX_TIM4_Init>
  MX_TIM10_Init();
 8003c9e:	f000 fd0d 	bl	80046bc <MX_TIM10_Init>
  MX_I2C1_Init();
 8003ca2:	f7ff fd2b 	bl	80036fc <MX_I2C1_Init>
  MX_I2C2_Init();
 8003ca6:	f7ff fd57 	bl	8003758 <MX_I2C2_Init>
  MX_I2C3_Init();
 8003caa:	f7ff fd83 	bl	80037b4 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8003cae:	f000 fe51 	bl	8004954 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */




  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart2_rx_buf, UART2_BUFFER_LENGTH);
 8003cb2:	220a      	movs	r2, #10
 8003cb4:	490c      	ldr	r1, [pc, #48]	; (8003ce8 <main+0x84>)
 8003cb6:	480d      	ldr	r0, [pc, #52]	; (8003cec <main+0x88>)
 8003cb8:	f007 faa0 	bl	800b1fc <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <main+0x8c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <main+0x8c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0208 	bic.w	r2, r2, #8
 8003cca:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003ccc:	f7fe fcae 	bl	800262c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003cd0:	f008 fb64 	bl	800c39c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003cd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cd8:	4806      	ldr	r0, [pc, #24]	; (8003cf4 <main+0x90>)
 8003cda:	f002 fdf2 	bl	80068c2 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003cde:	2064      	movs	r0, #100	; 0x64
 8003ce0:	f000 ffc0 	bl	8004c64 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003ce4:	e7f6      	b.n	8003cd4 <main+0x70>
 8003ce6:	bf00      	nop
 8003ce8:	2000b3b4 	.word	0x2000b3b4
 8003cec:	2000b3c0 	.word	0x2000b3c0
 8003cf0:	2000b344 	.word	0x2000b344
 8003cf4:	40020000 	.word	0x40020000

08003cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b094      	sub	sp, #80	; 0x50
 8003cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cfe:	f107 0320 	add.w	r3, r7, #32
 8003d02:	2230      	movs	r2, #48	; 0x30
 8003d04:	2100      	movs	r1, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f00b fc3c 	bl	800f584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d0c:	f107 030c 	add.w	r3, r7, #12
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	609a      	str	r2, [r3, #8]
 8003d18:	60da      	str	r2, [r3, #12]
 8003d1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <SystemClock_Config+0xcc>)
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	4a27      	ldr	r2, [pc, #156]	; (8003dc4 <SystemClock_Config+0xcc>)
 8003d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d2c:	4b25      	ldr	r3, [pc, #148]	; (8003dc4 <SystemClock_Config+0xcc>)
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	607b      	str	r3, [r7, #4]
 8003d3c:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <SystemClock_Config+0xd0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d44:	4a20      	ldr	r2, [pc, #128]	; (8003dc8 <SystemClock_Config+0xd0>)
 8003d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	4b1e      	ldr	r3, [pc, #120]	; (8003dc8 <SystemClock_Config+0xd0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d54:	607b      	str	r3, [r7, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d62:	2302      	movs	r3, #2
 8003d64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 24;
 8003d6c:	2318      	movs	r3, #24
 8003d6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003d70:	23a8      	movs	r3, #168	; 0xa8
 8003d72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d74:	2302      	movs	r3, #2
 8003d76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003d78:	2304      	movs	r3, #4
 8003d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d7c:	f107 0320 	add.w	r3, r7, #32
 8003d80:	4618      	mov	r0, r3
 8003d82:	f005 fb21 	bl	80093c8 <HAL_RCC_OscConfig>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003d8c:	f000 f84c 	bl	8003e28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d90:	230f      	movs	r3, #15
 8003d92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d94:	2302      	movs	r3, #2
 8003d96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003da0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003da6:	f107 030c 	add.w	r3, r7, #12
 8003daa:	2102      	movs	r1, #2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f005 fd83 	bl	80098b8 <HAL_RCC_ClockConfig>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003db8:	f000 f836 	bl	8003e28 <Error_Handler>
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	3750      	adds	r7, #80	; 0x50
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40007000 	.word	0x40007000

08003dcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a0f      	ldr	r2, [pc, #60]	; (8003e18 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003dde:	f000 ff21 	bl	8004c24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM10){ // UPDATE AS5600
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a0d      	ldr	r2, [pc, #52]	; (8003e1c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d111      	bne.n	8003e10 <HAL_TIM_PeriodElapsedCallback+0x44>
           if(FLAG_AS5600_M1==HAL_OK){
 8003dec:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	f083 0301 	eor.w	r3, r3, #1
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_TIM_PeriodElapsedCallback+0x32>
          	 AS5600_M1_getPOS();
 8003dfa:	f7fd f8cb 	bl	8000f94 <AS5600_M1_getPOS>
           }
           if(FLAG_AS5600_M2 == HAL_OK){
 8003dfe:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	f083 0301 	eor.w	r3, r3, #1
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_TIM_PeriodElapsedCallback+0x44>
          	 AS5600_M2_getPOS();
 8003e0c:	f7fd f8d6 	bl	8000fbc <AS5600_M2_getPOS>
           }
    }
  /* USER CODE END Callback 1 */
}
 8003e10:	bf00      	nop
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40014800 	.word	0x40014800
 8003e1c:	40014400 	.word	0x40014400
 8003e20:	2000020c 	.word	0x2000020c
 8003e24:	2000020d 	.word	0x2000020d

08003e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e2c:	b672      	cpsid	i
}
 8003e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e30:	e7fe      	b.n	8003e30 <Error_Handler+0x8>
	...

08003e34 <pickAndDropInit>:
extern TIM_HandleTypeDef htim4;	// For Servo
extern TIM_HandleTypeDef htim5;	// For Motor_J3


void pickAndDropInit()
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);	// Start PWM for Servo
 8003e38:	2108      	movs	r1, #8
 8003e3a:	4809      	ldr	r0, [pc, #36]	; (8003e60 <pickAndDropInit+0x2c>)
 8003e3c:	f006 f84a 	bl	8009ed4 <HAL_TIM_PWM_Start>
	osDelay(100);
 8003e40:	2064      	movs	r0, #100	; 0x64
 8003e42:	f008 fafe 	bl	800c442 <osDelay>
	SERVO_DROP;
 8003e46:	4b07      	ldr	r3, [pc, #28]	; (8003e64 <pickAndDropInit+0x30>)
 8003e48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e4c:	63da      	str	r2, [r3, #60]	; 0x3c
	j3Stop();
 8003e4e:	f000 f827 	bl	8003ea0 <j3Stop>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);	// Start PWM for Servo_J3
 8003e52:	210c      	movs	r1, #12
 8003e54:	4802      	ldr	r0, [pc, #8]	; (8003e60 <pickAndDropInit+0x2c>)
 8003e56:	f006 f83d 	bl	8009ed4 <HAL_TIM_PWM_Start>
}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	2000b44c 	.word	0x2000b44c
 8003e64:	40000800 	.word	0x40000800

08003e68 <j3Up>:
/* Control Motor J3 (0 < speed <= 1000) */
void j3Up()
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(J3_A_GPIO_Port, J3_A_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(J3_B_GPIO_Port, J3_B_Pin, GPIO_PIN_RESET);
	TIM4->CCR4=2000;
 8003e6c:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <j3Up+0x18>)
 8003e6e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40000800 	.word	0x40000800

08003e84 <j3Down>:
void j3Down(){
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(J3_A_GPIO_Port, J3_A_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(J3_B_GPIO_Port, J3_B_Pin, GPIO_PIN_SET);
	TIM4->CCR4=1580;
 8003e88:	4b04      	ldr	r3, [pc, #16]	; (8003e9c <j3Down+0x18>)
 8003e8a:	f240 622c 	movw	r2, #1580	; 0x62c
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40000800 	.word	0x40000800

08003ea0 <j3Stop>:
void j3Stop()
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(J3_A_GPIO_Port, J3_A_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(J3_B_GPIO_Port, J3_B_Pin, GPIO_PIN_RESET);
	TIM4->CCR4=0;
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <j3Stop+0x14>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003eaa:	bf00      	nop
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	40000800 	.word	0x40000800

08003eb8 <j3MoveUp>:
void j3MoveUp()
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
	uint16_t left = 1000; 	// thoi gian dichuyen laf 1000ms
 8003ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ec2:	80fb      	strh	r3, [r7, #6]
	j3Up();							// Move Up
 8003ec4:	f7ff ffd0 	bl	8003e68 <j3Up>
	while(HAL_SENSOR_UP_GET==1 && left>0){
 8003ec8:	e005      	b.n	8003ed6 <j3MoveUp+0x1e>
		osDelay(1);		// Wait for finish
 8003eca:	2001      	movs	r0, #1
 8003ecc:	f008 fab9 	bl	800c442 <osDelay>
		left--;
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	80fb      	strh	r3, [r7, #6]
	while(HAL_SENSOR_UP_GET==1 && left>0){
 8003ed6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003eda:	4809      	ldr	r0, [pc, #36]	; (8003f00 <j3MoveUp+0x48>)
 8003edc:	f002 fcc0 	bl	8006860 <HAL_GPIO_ReadPin>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d102      	bne.n	8003eec <j3MoveUp+0x34>
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1ee      	bne.n	8003eca <j3MoveUp+0x12>
	}
	j3Stop();									// Stop
 8003eec:	f7ff ffd8 	bl	8003ea0 <j3Stop>
	osDelay(300);
 8003ef0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003ef4:	f008 faa5 	bl	800c442 <osDelay>
}
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40020800 	.word	0x40020800

08003f04 <j3MoveDown>:
void j3MoveDown()
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
	uint16_t lefttim = 1000; 	// thoi gian dichuyen laf 1000ms
 8003f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f0e:	80fb      	strh	r3, [r7, #6]
	j3Down();							// Move Down
 8003f10:	f7ff ffb8 	bl	8003e84 <j3Down>
	while(HAL_SENSOR_DOWN_GET==1 && lefttim>0){
 8003f14:	e005      	b.n	8003f22 <j3MoveDown+0x1e>
		osDelay(1);		// Wait for finish
 8003f16:	2001      	movs	r0, #1
 8003f18:	f008 fa93 	bl	800c442 <osDelay>
		lefttim--;
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	80fb      	strh	r3, [r7, #6]
	while(HAL_SENSOR_DOWN_GET==1 && lefttim>0){
 8003f22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f26:	4809      	ldr	r0, [pc, #36]	; (8003f4c <j3MoveDown+0x48>)
 8003f28:	f002 fc9a 	bl	8006860 <HAL_GPIO_ReadPin>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d102      	bne.n	8003f38 <j3MoveDown+0x34>
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1ee      	bne.n	8003f16 <j3MoveDown+0x12>
	}
	j3Stop();									// Stop
 8003f38:	f7ff ffb2 	bl	8003ea0 <j3Stop>
	osDelay(300);
 8003f3c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003f40:	f008 fa7f 	bl	800c442 <osDelay>
}
 8003f44:	bf00      	nop
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40020800 	.word	0x40020800

08003f50 <pickupPiece>:
void pickupPiece()
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
	SERVO_DROP;
 8003f54:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <pickupPiece+0x2c>)
 8003f56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f5a:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(200);
 8003f5c:	20c8      	movs	r0, #200	; 0xc8
 8003f5e:	f008 fa70 	bl	800c442 <osDelay>
	j3MoveDown();
 8003f62:	f7ff ffcf 	bl	8003f04 <j3MoveDown>
	SERVO_PICKUP;
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <pickupPiece+0x2c>)
 8003f68:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003f6c:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(200);
 8003f6e:	20c8      	movs	r0, #200	; 0xc8
 8003f70:	f008 fa67 	bl	800c442 <osDelay>
	j3MoveUp();
 8003f74:	f7ff ffa0 	bl	8003eb8 <j3MoveUp>
}
 8003f78:	bf00      	nop
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40000800 	.word	0x40000800

08003f80 <dropPiece>:
void dropPiece()
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
	j3MoveDown();
 8003f84:	f7ff ffbe 	bl	8003f04 <j3MoveDown>
	SERVO_DROP;
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <dropPiece+0x20>)
 8003f8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f8e:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(200);
 8003f90:	20c8      	movs	r0, #200	; 0xc8
 8003f92:	f008 fa56 	bl	800c442 <osDelay>
	j3MoveUp();
 8003f96:	f7ff ff8f 	bl	8003eb8 <j3MoveUp>
}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40000800 	.word	0x40000800

08003fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	607b      	str	r3, [r7, #4]
 8003fae:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <HAL_MspInit+0x54>)
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	4a11      	ldr	r2, [pc, #68]	; (8003ff8 <HAL_MspInit+0x54>)
 8003fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fba:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <HAL_MspInit+0x54>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc2:	607b      	str	r3, [r7, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_MspInit+0x54>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <HAL_MspInit+0x54>)
 8003fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd6:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <HAL_MspInit+0x54>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	210f      	movs	r1, #15
 8003fe6:	f06f 0001 	mvn.w	r0, #1
 8003fea:	f001 fb97 	bl	800571c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40023800 	.word	0x40023800

08003ffc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08c      	sub	sp, #48	; 0x30
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 800400c:	2200      	movs	r2, #0
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	201a      	movs	r0, #26
 8004012:	f001 fb83 	bl	800571c <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004016:	201a      	movs	r0, #26
 8004018:	f001 fb9c 	bl	8005754 <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 800401c:	2300      	movs	r3, #0
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	4b1e      	ldr	r3, [pc, #120]	; (800409c <HAL_InitTick+0xa0>)
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	4a1d      	ldr	r2, [pc, #116]	; (800409c <HAL_InitTick+0xa0>)
 8004026:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800402a:	6453      	str	r3, [r2, #68]	; 0x44
 800402c:	4b1b      	ldr	r3, [pc, #108]	; (800409c <HAL_InitTick+0xa0>)
 800402e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004038:	f107 0210 	add.w	r2, r7, #16
 800403c:	f107 0314 	add.w	r3, r7, #20
 8004040:	4611      	mov	r1, r2
 8004042:	4618      	mov	r0, r3
 8004044:	f005 fe08 	bl	8009c58 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004048:	f005 fdf2 	bl	8009c30 <HAL_RCC_GetPCLK2Freq>
 800404c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004050:	4a13      	ldr	r2, [pc, #76]	; (80040a0 <HAL_InitTick+0xa4>)
 8004052:	fba2 2303 	umull	r2, r3, r2, r3
 8004056:	0c9b      	lsrs	r3, r3, #18
 8004058:	3b01      	subs	r3, #1
 800405a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <HAL_InitTick+0xa8>)
 800405e:	4a12      	ldr	r2, [pc, #72]	; (80040a8 <HAL_InitTick+0xac>)
 8004060:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <HAL_InitTick+0xa8>)
 8004064:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004068:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800406a:	4a0e      	ldr	r2, [pc, #56]	; (80040a4 <HAL_InitTick+0xa8>)
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8004070:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <HAL_InitTick+0xa8>)
 8004072:	2200      	movs	r2, #0
 8004074:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_InitTick+0xa8>)
 8004078:	2200      	movs	r2, #0
 800407a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 800407c:	4809      	ldr	r0, [pc, #36]	; (80040a4 <HAL_InitTick+0xa8>)
 800407e:	f005 fe1d 	bl	8009cbc <HAL_TIM_Base_Init>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d104      	bne.n	8004092 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8004088:	4806      	ldr	r0, [pc, #24]	; (80040a4 <HAL_InitTick+0xa8>)
 800408a:	f005 fe67 	bl	8009d5c <HAL_TIM_Base_Start_IT>
 800408e:	4603      	mov	r3, r0
 8004090:	e000      	b.n	8004094 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
}
 8004094:	4618      	mov	r0, r3
 8004096:	3730      	adds	r7, #48	; 0x30
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40023800 	.word	0x40023800
 80040a0:	431bde83 	.word	0x431bde83
 80040a4:	2000b404 	.word	0x2000b404
 80040a8:	40014800 	.word	0x40014800

080040ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040b0:	e7fe      	b.n	80040b0 <NMI_Handler+0x4>

080040b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040b2:	b480      	push	{r7}
 80040b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040b6:	e7fe      	b.n	80040b6 <HardFault_Handler+0x4>

080040b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040bc:	e7fe      	b.n	80040bc <MemManage_Handler+0x4>

080040be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040be:	b480      	push	{r7}
 80040c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040c2:	e7fe      	b.n	80040c2 <BusFault_Handler+0x4>

080040c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040c8:	e7fe      	b.n	80040c8 <UsageFault_Handler+0x4>

080040ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040ca:	b480      	push	{r7}
 80040cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040ce:	bf00      	nop
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80040dc:	4802      	ldr	r0, [pc, #8]	; (80040e8 <DMA1_Stream0_IRQHandler+0x10>)
 80040de:	f001 fcdf 	bl	8005aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	2000b2e4 	.word	0x2000b2e4

080040ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 80040f0:	4802      	ldr	r0, [pc, #8]	; (80040fc <DMA1_Stream1_IRQHandler+0x10>)
 80040f2:	f001 fcd5 	bl	8005aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80040f6:	bf00      	nop
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	2000b11c 	.word	0x2000b11c

08004100 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8004104:	4802      	ldr	r0, [pc, #8]	; (8004110 <DMA1_Stream2_IRQHandler+0x10>)
 8004106:	f001 fccb 	bl	8005aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800410a:	bf00      	nop
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	2000b224 	.word	0x2000b224

08004114 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004118:	4802      	ldr	r0, [pc, #8]	; (8004124 <DMA1_Stream5_IRQHandler+0x10>)
 800411a:	f001 fcc1 	bl	8005aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800411e:	bf00      	nop
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	2000b344 	.word	0x2000b344

08004128 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800412c:	4802      	ldr	r0, [pc, #8]	; (8004138 <ADC_IRQHandler+0x10>)
 800412e:	f000 febf 	bl	8004eb0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004132:	bf00      	nop
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	2000af38 	.word	0x2000af38

0800413c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004140:	4802      	ldr	r0, [pc, #8]	; (800414c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004142:	f006 f875 	bl	800a230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004146:	bf00      	nop
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	2000b494 	.word	0x2000b494

08004150 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004154:	4802      	ldr	r0, [pc, #8]	; (8004160 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004156:	f006 f86b 	bl	800a230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800415a:	bf00      	nop
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	2000b404 	.word	0x2000b404

08004164 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004168:	4802      	ldr	r0, [pc, #8]	; (8004174 <TIM2_IRQHandler+0x10>)
 800416a:	f006 f861 	bl	800a230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800416e:	bf00      	nop
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	2000b524 	.word	0x2000b524

08004178 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800417c:	4802      	ldr	r0, [pc, #8]	; (8004188 <TIM3_IRQHandler+0x10>)
 800417e:	f006 f857 	bl	800a230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	2000b4dc 	.word	0x2000b4dc

0800418c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004190:	4802      	ldr	r0, [pc, #8]	; (800419c <I2C1_EV_IRQHandler+0x10>)
 8004192:	f003 f933 	bl	80073fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004196:	bf00      	nop
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	2000b17c 	.word	0x2000b17c

080041a0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80041a4:	4802      	ldr	r0, [pc, #8]	; (80041b0 <I2C1_ER_IRQHandler+0x10>)
 80041a6:	f003 fa9a 	bl	80076de <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80041aa:	bf00      	nop
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	2000b17c 	.word	0x2000b17c

080041b4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80041b8:	4802      	ldr	r0, [pc, #8]	; (80041c4 <I2C2_EV_IRQHandler+0x10>)
 80041ba:	f003 f91f 	bl	80073fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80041be:	bf00      	nop
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	2000b1d0 	.word	0x2000b1d0

080041c8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80041cc:	4802      	ldr	r0, [pc, #8]	; (80041d8 <I2C2_ER_IRQHandler+0x10>)
 80041ce:	f003 fa86 	bl	80076de <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	2000b1d0 	.word	0x2000b1d0

080041dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041e0:	4802      	ldr	r0, [pc, #8]	; (80041ec <USART1_IRQHandler+0x10>)
 80041e2:	f007 f871 	bl	800b2c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	2000b5cc 	.word	0x2000b5cc

080041f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041f4:	4802      	ldr	r0, [pc, #8]	; (8004200 <USART2_IRQHandler+0x10>)
 80041f6:	f007 f867 	bl	800b2c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041fa:	bf00      	nop
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	2000b3c0 	.word	0x2000b3c0

08004204 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8004208:	4802      	ldr	r0, [pc, #8]	; (8004214 <DMA1_Stream7_IRQHandler+0x10>)
 800420a:	f001 fc49 	bl	8005aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	2000b284 	.word	0x2000b284

08004218 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800421c:	4802      	ldr	r0, [pc, #8]	; (8004228 <DMA2_Stream0_IRQHandler+0x10>)
 800421e:	f001 fc3f 	bl	8005aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004222:	bf00      	nop
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	2000af80 	.word	0x2000af80

0800422c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004230:	4802      	ldr	r0, [pc, #8]	; (800423c <DMA2_Stream2_IRQHandler+0x10>)
 8004232:	f001 fc35 	bl	8005aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004236:	bf00      	nop
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	2000b56c 	.word	0x2000b56c

08004240 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8004244:	4802      	ldr	r0, [pc, #8]	; (8004250 <I2C3_EV_IRQHandler+0x10>)
 8004246:	f003 f8d9 	bl	80073fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	2000b0c8 	.word	0x2000b0c8

08004254 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8004258:	4802      	ldr	r0, [pc, #8]	; (8004264 <I2C3_ER_IRQHandler+0x10>)
 800425a:	f003 fa40 	bl	80076de <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	2000b0c8 	.word	0x2000b0c8

08004268 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
	return 1;
 800426c:	2301      	movs	r3, #1
}
 800426e:	4618      	mov	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <_kill>:

int _kill(int pid, int sig)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004282:	f00b f947 	bl	800f514 <__errno>
 8004286:	4603      	mov	r3, r0
 8004288:	2216      	movs	r2, #22
 800428a:	601a      	str	r2, [r3, #0]
	return -1;
 800428c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004290:	4618      	mov	r0, r3
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <_exit>:

void _exit (int status)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80042a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff ffe7 	bl	8004278 <_kill>
	while (1) {}		/* Make sure we hang here */
 80042aa:	e7fe      	b.n	80042aa <_exit+0x12>

080042ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	e00a      	b.n	80042d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80042be:	f3af 8000 	nop.w
 80042c2:	4601      	mov	r1, r0
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	60ba      	str	r2, [r7, #8]
 80042ca:	b2ca      	uxtb	r2, r1
 80042cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	3301      	adds	r3, #1
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	429a      	cmp	r2, r3
 80042da:	dbf0      	blt.n	80042be <_read+0x12>
	}

return len;
 80042dc:	687b      	ldr	r3, [r7, #4]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
	return -1;
 80042ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800430e:	605a      	str	r2, [r3, #4]
	return 0;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <_isatty>:

int _isatty(int file)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
	return 1;
 8004326:	2301      	movs	r3, #1
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
	return 0;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
	...

08004350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004358:	4a14      	ldr	r2, [pc, #80]	; (80043ac <_sbrk+0x5c>)
 800435a:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <_sbrk+0x60>)
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004364:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <_sbrk+0x64>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800436c:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <_sbrk+0x64>)
 800436e:	4a12      	ldr	r2, [pc, #72]	; (80043b8 <_sbrk+0x68>)
 8004370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004372:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <_sbrk+0x64>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4413      	add	r3, r2
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	429a      	cmp	r2, r3
 800437e:	d207      	bcs.n	8004390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004380:	f00b f8c8 	bl	800f514 <__errno>
 8004384:	4603      	mov	r3, r0
 8004386:	220c      	movs	r2, #12
 8004388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800438a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800438e:	e009      	b.n	80043a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004390:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <_sbrk+0x64>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <_sbrk+0x64>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4413      	add	r3, r2
 800439e:	4a05      	ldr	r2, [pc, #20]	; (80043b4 <_sbrk+0x64>)
 80043a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043a2:	68fb      	ldr	r3, [r7, #12]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20010000 	.word	0x20010000
 80043b0:	00000400 	.word	0x00000400
 80043b4:	200008c8 	.word	0x200008c8
 80043b8:	2000b688 	.word	0x2000b688

080043bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043c0:	4b06      	ldr	r3, [pc, #24]	; (80043dc <SystemInit+0x20>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c6:	4a05      	ldr	r2, [pc, #20]	; (80043dc <SystemInit+0x20>)
 80043c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043d0:	bf00      	nop
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	e000ed00 	.word	0xe000ed00

080043e0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08e      	sub	sp, #56	; 0x38
 80043e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	605a      	str	r2, [r3, #4]
 80043f0:	609a      	str	r2, [r3, #8]
 80043f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043f4:	f107 0320 	add.w	r3, r7, #32
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	609a      	str	r2, [r3, #8]
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	611a      	str	r2, [r3, #16]
 800440c:	615a      	str	r2, [r3, #20]
 800440e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004410:	4b2d      	ldr	r3, [pc, #180]	; (80044c8 <MX_TIM2_Init+0xe8>)
 8004412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004416:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8004418:	4b2b      	ldr	r3, [pc, #172]	; (80044c8 <MX_TIM2_Init+0xe8>)
 800441a:	2253      	movs	r2, #83	; 0x53
 800441c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800441e:	4b2a      	ldr	r3, [pc, #168]	; (80044c8 <MX_TIM2_Init+0xe8>)
 8004420:	2200      	movs	r2, #0
 8004422:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8004424:	4b28      	ldr	r3, [pc, #160]	; (80044c8 <MX_TIM2_Init+0xe8>)
 8004426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800442a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800442c:	4b26      	ldr	r3, [pc, #152]	; (80044c8 <MX_TIM2_Init+0xe8>)
 800442e:	2200      	movs	r2, #0
 8004430:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004432:	4b25      	ldr	r3, [pc, #148]	; (80044c8 <MX_TIM2_Init+0xe8>)
 8004434:	2280      	movs	r2, #128	; 0x80
 8004436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004438:	4823      	ldr	r0, [pc, #140]	; (80044c8 <MX_TIM2_Init+0xe8>)
 800443a:	f005 fc3f 	bl	8009cbc <HAL_TIM_Base_Init>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004444:	f7ff fcf0 	bl	8003e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800444e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004452:	4619      	mov	r1, r3
 8004454:	481c      	ldr	r0, [pc, #112]	; (80044c8 <MX_TIM2_Init+0xe8>)
 8004456:	f006 f8b5 	bl	800a5c4 <HAL_TIM_ConfigClockSource>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004460:	f7ff fce2 	bl	8003e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004464:	4818      	ldr	r0, [pc, #96]	; (80044c8 <MX_TIM2_Init+0xe8>)
 8004466:	f005 fcdb 	bl	8009e20 <HAL_TIM_PWM_Init>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004470:	f7ff fcda 	bl	8003e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004474:	2300      	movs	r3, #0
 8004476:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004478:	2300      	movs	r3, #0
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800447c:	f107 0320 	add.w	r3, r7, #32
 8004480:	4619      	mov	r1, r3
 8004482:	4811      	ldr	r0, [pc, #68]	; (80044c8 <MX_TIM2_Init+0xe8>)
 8004484:	f006 fd34 	bl	800aef0 <HAL_TIMEx_MasterConfigSynchronization>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800448e:	f7ff fccb 	bl	8003e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004492:	2360      	movs	r3, #96	; 0x60
 8004494:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 8004496:	2302      	movs	r3, #2
 8004498:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044a2:	1d3b      	adds	r3, r7, #4
 80044a4:	2200      	movs	r2, #0
 80044a6:	4619      	mov	r1, r3
 80044a8:	4807      	ldr	r0, [pc, #28]	; (80044c8 <MX_TIM2_Init+0xe8>)
 80044aa:	f005 ffc9 	bl	800a440 <HAL_TIM_PWM_ConfigChannel>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80044b4:	f7ff fcb8 	bl	8003e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80044b8:	4803      	ldr	r0, [pc, #12]	; (80044c8 <MX_TIM2_Init+0xe8>)
 80044ba:	f000 f99b 	bl	80047f4 <HAL_TIM_MspPostInit>

}
 80044be:	bf00      	nop
 80044c0:	3738      	adds	r7, #56	; 0x38
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	2000b524 	.word	0x2000b524

080044cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08e      	sub	sp, #56	; 0x38
 80044d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	605a      	str	r2, [r3, #4]
 80044dc:	609a      	str	r2, [r3, #8]
 80044de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044e0:	f107 0320 	add.w	r3, r7, #32
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044ea:	1d3b      	adds	r3, r7, #4
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	605a      	str	r2, [r3, #4]
 80044f2:	609a      	str	r2, [r3, #8]
 80044f4:	60da      	str	r2, [r3, #12]
 80044f6:	611a      	str	r2, [r3, #16]
 80044f8:	615a      	str	r2, [r3, #20]
 80044fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80044fc:	4b2c      	ldr	r3, [pc, #176]	; (80045b0 <MX_TIM3_Init+0xe4>)
 80044fe:	4a2d      	ldr	r2, [pc, #180]	; (80045b4 <MX_TIM3_Init+0xe8>)
 8004500:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8004502:	4b2b      	ldr	r3, [pc, #172]	; (80045b0 <MX_TIM3_Init+0xe4>)
 8004504:	2253      	movs	r2, #83	; 0x53
 8004506:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004508:	4b29      	ldr	r3, [pc, #164]	; (80045b0 <MX_TIM3_Init+0xe4>)
 800450a:	2200      	movs	r2, #0
 800450c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800450e:	4b28      	ldr	r3, [pc, #160]	; (80045b0 <MX_TIM3_Init+0xe4>)
 8004510:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004514:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004516:	4b26      	ldr	r3, [pc, #152]	; (80045b0 <MX_TIM3_Init+0xe4>)
 8004518:	2200      	movs	r2, #0
 800451a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800451c:	4b24      	ldr	r3, [pc, #144]	; (80045b0 <MX_TIM3_Init+0xe4>)
 800451e:	2280      	movs	r2, #128	; 0x80
 8004520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004522:	4823      	ldr	r0, [pc, #140]	; (80045b0 <MX_TIM3_Init+0xe4>)
 8004524:	f005 fbca 	bl	8009cbc <HAL_TIM_Base_Init>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800452e:	f7ff fc7b 	bl	8003e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004536:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004538:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800453c:	4619      	mov	r1, r3
 800453e:	481c      	ldr	r0, [pc, #112]	; (80045b0 <MX_TIM3_Init+0xe4>)
 8004540:	f006 f840 	bl	800a5c4 <HAL_TIM_ConfigClockSource>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800454a:	f7ff fc6d 	bl	8003e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800454e:	4818      	ldr	r0, [pc, #96]	; (80045b0 <MX_TIM3_Init+0xe4>)
 8004550:	f005 fc66 	bl	8009e20 <HAL_TIM_PWM_Init>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800455a:	f7ff fc65 	bl	8003e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800455e:	2300      	movs	r3, #0
 8004560:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004562:	2300      	movs	r3, #0
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004566:	f107 0320 	add.w	r3, r7, #32
 800456a:	4619      	mov	r1, r3
 800456c:	4810      	ldr	r0, [pc, #64]	; (80045b0 <MX_TIM3_Init+0xe4>)
 800456e:	f006 fcbf 	bl	800aef0 <HAL_TIMEx_MasterConfigSynchronization>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004578:	f7ff fc56 	bl	8003e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800457c:	2360      	movs	r3, #96	; 0x60
 800457e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 8004580:	2302      	movs	r3, #2
 8004582:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800458c:	1d3b      	adds	r3, r7, #4
 800458e:	2208      	movs	r2, #8
 8004590:	4619      	mov	r1, r3
 8004592:	4807      	ldr	r0, [pc, #28]	; (80045b0 <MX_TIM3_Init+0xe4>)
 8004594:	f005 ff54 	bl	800a440 <HAL_TIM_PWM_ConfigChannel>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800459e:	f7ff fc43 	bl	8003e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80045a2:	4803      	ldr	r0, [pc, #12]	; (80045b0 <MX_TIM3_Init+0xe4>)
 80045a4:	f000 f926 	bl	80047f4 <HAL_TIM_MspPostInit>

}
 80045a8:	bf00      	nop
 80045aa:	3738      	adds	r7, #56	; 0x38
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	2000b4dc 	.word	0x2000b4dc
 80045b4:	40000400 	.word	0x40000400

080045b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08e      	sub	sp, #56	; 0x38
 80045bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	605a      	str	r2, [r3, #4]
 80045c8:	609a      	str	r2, [r3, #8]
 80045ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045cc:	f107 0320 	add.w	r3, r7, #32
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045d6:	1d3b      	adds	r3, r7, #4
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	605a      	str	r2, [r3, #4]
 80045de:	609a      	str	r2, [r3, #8]
 80045e0:	60da      	str	r2, [r3, #12]
 80045e2:	611a      	str	r2, [r3, #16]
 80045e4:	615a      	str	r2, [r3, #20]
 80045e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80045e8:	4b32      	ldr	r3, [pc, #200]	; (80046b4 <MX_TIM4_Init+0xfc>)
 80045ea:	4a33      	ldr	r2, [pc, #204]	; (80046b8 <MX_TIM4_Init+0x100>)
 80045ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80045ee:	4b31      	ldr	r3, [pc, #196]	; (80046b4 <MX_TIM4_Init+0xfc>)
 80045f0:	2253      	movs	r2, #83	; 0x53
 80045f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045f4:	4b2f      	ldr	r3, [pc, #188]	; (80046b4 <MX_TIM4_Init+0xfc>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 80045fa:	4b2e      	ldr	r3, [pc, #184]	; (80046b4 <MX_TIM4_Init+0xfc>)
 80045fc:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004600:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004602:	4b2c      	ldr	r3, [pc, #176]	; (80046b4 <MX_TIM4_Init+0xfc>)
 8004604:	2200      	movs	r2, #0
 8004606:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004608:	4b2a      	ldr	r3, [pc, #168]	; (80046b4 <MX_TIM4_Init+0xfc>)
 800460a:	2200      	movs	r2, #0
 800460c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800460e:	4829      	ldr	r0, [pc, #164]	; (80046b4 <MX_TIM4_Init+0xfc>)
 8004610:	f005 fb54 	bl	8009cbc <HAL_TIM_Base_Init>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800461a:	f7ff fc05 	bl	8003e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800461e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004622:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004624:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004628:	4619      	mov	r1, r3
 800462a:	4822      	ldr	r0, [pc, #136]	; (80046b4 <MX_TIM4_Init+0xfc>)
 800462c:	f005 ffca 	bl	800a5c4 <HAL_TIM_ConfigClockSource>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8004636:	f7ff fbf7 	bl	8003e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800463a:	481e      	ldr	r0, [pc, #120]	; (80046b4 <MX_TIM4_Init+0xfc>)
 800463c:	f005 fbf0 	bl	8009e20 <HAL_TIM_PWM_Init>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8004646:	f7ff fbef 	bl	8003e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800464a:	2300      	movs	r3, #0
 800464c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800464e:	2300      	movs	r3, #0
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004652:	f107 0320 	add.w	r3, r7, #32
 8004656:	4619      	mov	r1, r3
 8004658:	4816      	ldr	r0, [pc, #88]	; (80046b4 <MX_TIM4_Init+0xfc>)
 800465a:	f006 fc49 	bl	800aef0 <HAL_TIMEx_MasterConfigSynchronization>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8004664:	f7ff fbe0 	bl	8003e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004668:	2360      	movs	r3, #96	; 0x60
 800466a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800466c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004670:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800467a:	1d3b      	adds	r3, r7, #4
 800467c:	2208      	movs	r2, #8
 800467e:	4619      	mov	r1, r3
 8004680:	480c      	ldr	r0, [pc, #48]	; (80046b4 <MX_TIM4_Init+0xfc>)
 8004682:	f005 fedd 	bl	800a440 <HAL_TIM_PWM_ConfigChannel>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800468c:	f7ff fbcc 	bl	8003e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004690:	1d3b      	adds	r3, r7, #4
 8004692:	220c      	movs	r2, #12
 8004694:	4619      	mov	r1, r3
 8004696:	4807      	ldr	r0, [pc, #28]	; (80046b4 <MX_TIM4_Init+0xfc>)
 8004698:	f005 fed2 	bl	800a440 <HAL_TIM_PWM_ConfigChannel>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80046a2:	f7ff fbc1 	bl	8003e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80046a6:	4803      	ldr	r0, [pc, #12]	; (80046b4 <MX_TIM4_Init+0xfc>)
 80046a8:	f000 f8a4 	bl	80047f4 <HAL_TIM_MspPostInit>

}
 80046ac:	bf00      	nop
 80046ae:	3738      	adds	r7, #56	; 0x38
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	2000b44c 	.word	0x2000b44c
 80046b8:	40000800 	.word	0x40000800

080046bc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80046c0:	4b0e      	ldr	r3, [pc, #56]	; (80046fc <MX_TIM10_Init+0x40>)
 80046c2:	4a0f      	ldr	r2, [pc, #60]	; (8004700 <MX_TIM10_Init+0x44>)
 80046c4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 80046c6:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <MX_TIM10_Init+0x40>)
 80046c8:	2253      	movs	r2, #83	; 0x53
 80046ca:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <MX_TIM10_Init+0x40>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 80046d2:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <MX_TIM10_Init+0x40>)
 80046d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046d8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046da:	4b08      	ldr	r3, [pc, #32]	; (80046fc <MX_TIM10_Init+0x40>)
 80046dc:	2200      	movs	r2, #0
 80046de:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <MX_TIM10_Init+0x40>)
 80046e2:	2280      	movs	r2, #128	; 0x80
 80046e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80046e6:	4805      	ldr	r0, [pc, #20]	; (80046fc <MX_TIM10_Init+0x40>)
 80046e8:	f005 fae8 	bl	8009cbc <HAL_TIM_Base_Init>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80046f2:	f7ff fb99 	bl	8003e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80046f6:	bf00      	nop
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	2000b494 	.word	0x2000b494
 8004700:	40014400 	.word	0x40014400

08004704 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004714:	d116      	bne.n	8004744 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	4b32      	ldr	r3, [pc, #200]	; (80047e4 <HAL_TIM_Base_MspInit+0xe0>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	4a31      	ldr	r2, [pc, #196]	; (80047e4 <HAL_TIM_Base_MspInit+0xe0>)
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	6413      	str	r3, [r2, #64]	; 0x40
 8004726:	4b2f      	ldr	r3, [pc, #188]	; (80047e4 <HAL_TIM_Base_MspInit+0xe0>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004732:	2200      	movs	r2, #0
 8004734:	2105      	movs	r1, #5
 8004736:	201c      	movs	r0, #28
 8004738:	f000 fff0 	bl	800571c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800473c:	201c      	movs	r0, #28
 800473e:	f001 f809 	bl	8005754 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8004742:	e04a      	b.n	80047da <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a27      	ldr	r2, [pc, #156]	; (80047e8 <HAL_TIM_Base_MspInit+0xe4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d116      	bne.n	800477c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800474e:	2300      	movs	r3, #0
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	4b24      	ldr	r3, [pc, #144]	; (80047e4 <HAL_TIM_Base_MspInit+0xe0>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	4a23      	ldr	r2, [pc, #140]	; (80047e4 <HAL_TIM_Base_MspInit+0xe0>)
 8004758:	f043 0302 	orr.w	r3, r3, #2
 800475c:	6413      	str	r3, [r2, #64]	; 0x40
 800475e:	4b21      	ldr	r3, [pc, #132]	; (80047e4 <HAL_TIM_Base_MspInit+0xe0>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800476a:	2200      	movs	r2, #0
 800476c:	2105      	movs	r1, #5
 800476e:	201d      	movs	r0, #29
 8004770:	f000 ffd4 	bl	800571c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004774:	201d      	movs	r0, #29
 8004776:	f000 ffed 	bl	8005754 <HAL_NVIC_EnableIRQ>
}
 800477a:	e02e      	b.n	80047da <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1a      	ldr	r2, [pc, #104]	; (80047ec <HAL_TIM_Base_MspInit+0xe8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d10e      	bne.n	80047a4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	4b16      	ldr	r3, [pc, #88]	; (80047e4 <HAL_TIM_Base_MspInit+0xe0>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <HAL_TIM_Base_MspInit+0xe0>)
 8004790:	f043 0304 	orr.w	r3, r3, #4
 8004794:	6413      	str	r3, [r2, #64]	; 0x40
 8004796:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <HAL_TIM_Base_MspInit+0xe0>)
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
}
 80047a2:	e01a      	b.n	80047da <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM10)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a11      	ldr	r2, [pc, #68]	; (80047f0 <HAL_TIM_Base_MspInit+0xec>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d115      	bne.n	80047da <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80047ae:	2300      	movs	r3, #0
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <HAL_TIM_Base_MspInit+0xe0>)
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	4a0b      	ldr	r2, [pc, #44]	; (80047e4 <HAL_TIM_Base_MspInit+0xe0>)
 80047b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047bc:	6453      	str	r3, [r2, #68]	; 0x44
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <HAL_TIM_Base_MspInit+0xe0>)
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	60bb      	str	r3, [r7, #8]
 80047c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80047ca:	2200      	movs	r2, #0
 80047cc:	2105      	movs	r1, #5
 80047ce:	2019      	movs	r0, #25
 80047d0:	f000 ffa4 	bl	800571c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80047d4:	2019      	movs	r0, #25
 80047d6:	f000 ffbd 	bl	8005754 <HAL_NVIC_EnableIRQ>
}
 80047da:	bf00      	nop
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40023800 	.word	0x40023800
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40000800 	.word	0x40000800
 80047f0:	40014400 	.word	0x40014400

080047f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08a      	sub	sp, #40	; 0x28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047fc:	f107 0314 	add.w	r3, r7, #20
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	605a      	str	r2, [r3, #4]
 8004806:	609a      	str	r2, [r3, #8]
 8004808:	60da      	str	r2, [r3, #12]
 800480a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004814:	d11e      	bne.n	8004854 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	4b34      	ldr	r3, [pc, #208]	; (80048ec <HAL_TIM_MspPostInit+0xf8>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	4a33      	ldr	r2, [pc, #204]	; (80048ec <HAL_TIM_MspPostInit+0xf8>)
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	6313      	str	r3, [r2, #48]	; 0x30
 8004826:	4b31      	ldr	r3, [pc, #196]	; (80048ec <HAL_TIM_MspPostInit+0xf8>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = J2_STEP_TIM2_CH1_Pin;
 8004832:	2320      	movs	r3, #32
 8004834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004836:	2302      	movs	r3, #2
 8004838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483e:	2300      	movs	r3, #0
 8004840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004842:	2301      	movs	r3, #1
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(J2_STEP_TIM2_CH1_GPIO_Port, &GPIO_InitStruct);
 8004846:	f107 0314 	add.w	r3, r7, #20
 800484a:	4619      	mov	r1, r3
 800484c:	4828      	ldr	r0, [pc, #160]	; (80048f0 <HAL_TIM_MspPostInit+0xfc>)
 800484e:	f001 fe83 	bl	8006558 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004852:	e047      	b.n	80048e4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a26      	ldr	r2, [pc, #152]	; (80048f4 <HAL_TIM_MspPostInit+0x100>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d11e      	bne.n	800489c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	4b22      	ldr	r3, [pc, #136]	; (80048ec <HAL_TIM_MspPostInit+0xf8>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	4a21      	ldr	r2, [pc, #132]	; (80048ec <HAL_TIM_MspPostInit+0xf8>)
 8004868:	f043 0302 	orr.w	r3, r3, #2
 800486c:	6313      	str	r3, [r2, #48]	; 0x30
 800486e:	4b1f      	ldr	r3, [pc, #124]	; (80048ec <HAL_TIM_MspPostInit+0xf8>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = J1_STEP_TIM3_CH3_Pin;
 800487a:	2301      	movs	r3, #1
 800487c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487e:	2302      	movs	r3, #2
 8004880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004882:	2300      	movs	r3, #0
 8004884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004886:	2300      	movs	r3, #0
 8004888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800488a:	2302      	movs	r3, #2
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(J1_STEP_TIM3_CH3_GPIO_Port, &GPIO_InitStruct);
 800488e:	f107 0314 	add.w	r3, r7, #20
 8004892:	4619      	mov	r1, r3
 8004894:	4818      	ldr	r0, [pc, #96]	; (80048f8 <HAL_TIM_MspPostInit+0x104>)
 8004896:	f001 fe5f 	bl	8006558 <HAL_GPIO_Init>
}
 800489a:	e023      	b.n	80048e4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a16      	ldr	r2, [pc, #88]	; (80048fc <HAL_TIM_MspPostInit+0x108>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d11e      	bne.n	80048e4 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	60bb      	str	r3, [r7, #8]
 80048aa:	4b10      	ldr	r3, [pc, #64]	; (80048ec <HAL_TIM_MspPostInit+0xf8>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	4a0f      	ldr	r2, [pc, #60]	; (80048ec <HAL_TIM_MspPostInit+0xf8>)
 80048b0:	f043 0302 	orr.w	r3, r3, #2
 80048b4:	6313      	str	r3, [r2, #48]	; 0x30
 80048b6:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <HAL_TIM_MspPostInit+0xf8>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO1_TIM4_CH3_Pin|SERVO_J3_TIM4_CH4_Pin;
 80048c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c8:	2302      	movs	r3, #2
 80048ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d0:	2300      	movs	r3, #0
 80048d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80048d4:	2302      	movs	r3, #2
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048d8:	f107 0314 	add.w	r3, r7, #20
 80048dc:	4619      	mov	r1, r3
 80048de:	4806      	ldr	r0, [pc, #24]	; (80048f8 <HAL_TIM_MspPostInit+0x104>)
 80048e0:	f001 fe3a 	bl	8006558 <HAL_GPIO_Init>
}
 80048e4:	bf00      	nop
 80048e6:	3728      	adds	r7, #40	; 0x28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40023800 	.word	0x40023800
 80048f0:	40020000 	.word	0x40020000
 80048f4:	40000400 	.word	0x40000400
 80048f8:	40020400 	.word	0x40020400
 80048fc:	40000800 	.word	0x40000800

08004900 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004904:	4b11      	ldr	r3, [pc, #68]	; (800494c <MX_USART1_UART_Init+0x4c>)
 8004906:	4a12      	ldr	r2, [pc, #72]	; (8004950 <MX_USART1_UART_Init+0x50>)
 8004908:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800490a:	4b10      	ldr	r3, [pc, #64]	; (800494c <MX_USART1_UART_Init+0x4c>)
 800490c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004910:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004912:	4b0e      	ldr	r3, [pc, #56]	; (800494c <MX_USART1_UART_Init+0x4c>)
 8004914:	2200      	movs	r2, #0
 8004916:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004918:	4b0c      	ldr	r3, [pc, #48]	; (800494c <MX_USART1_UART_Init+0x4c>)
 800491a:	2200      	movs	r2, #0
 800491c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800491e:	4b0b      	ldr	r3, [pc, #44]	; (800494c <MX_USART1_UART_Init+0x4c>)
 8004920:	2200      	movs	r2, #0
 8004922:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004924:	4b09      	ldr	r3, [pc, #36]	; (800494c <MX_USART1_UART_Init+0x4c>)
 8004926:	220c      	movs	r2, #12
 8004928:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800492a:	4b08      	ldr	r3, [pc, #32]	; (800494c <MX_USART1_UART_Init+0x4c>)
 800492c:	2200      	movs	r2, #0
 800492e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004930:	4b06      	ldr	r3, [pc, #24]	; (800494c <MX_USART1_UART_Init+0x4c>)
 8004932:	2200      	movs	r2, #0
 8004934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004936:	4805      	ldr	r0, [pc, #20]	; (800494c <MX_USART1_UART_Init+0x4c>)
 8004938:	f006 fb81 	bl	800b03e <HAL_UART_Init>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004942:	f7ff fa71 	bl	8003e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004946:	bf00      	nop
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	2000b5cc 	.word	0x2000b5cc
 8004950:	40011000 	.word	0x40011000

08004954 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004958:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <MX_USART2_UART_Init+0x4c>)
 800495a:	4a12      	ldr	r2, [pc, #72]	; (80049a4 <MX_USART2_UART_Init+0x50>)
 800495c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800495e:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <MX_USART2_UART_Init+0x4c>)
 8004960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004966:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <MX_USART2_UART_Init+0x4c>)
 8004968:	2200      	movs	r2, #0
 800496a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <MX_USART2_UART_Init+0x4c>)
 800496e:	2200      	movs	r2, #0
 8004970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004972:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <MX_USART2_UART_Init+0x4c>)
 8004974:	2200      	movs	r2, #0
 8004976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004978:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <MX_USART2_UART_Init+0x4c>)
 800497a:	220c      	movs	r2, #12
 800497c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800497e:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <MX_USART2_UART_Init+0x4c>)
 8004980:	2200      	movs	r2, #0
 8004982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <MX_USART2_UART_Init+0x4c>)
 8004986:	2200      	movs	r2, #0
 8004988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800498a:	4805      	ldr	r0, [pc, #20]	; (80049a0 <MX_USART2_UART_Init+0x4c>)
 800498c:	f006 fb57 	bl	800b03e <HAL_UART_Init>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004996:	f7ff fa47 	bl	8003e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800499a:	bf00      	nop
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	2000b3c0 	.word	0x2000b3c0
 80049a4:	40004400 	.word	0x40004400

080049a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08c      	sub	sp, #48	; 0x30
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b0:	f107 031c 	add.w	r3, r7, #28
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	605a      	str	r2, [r3, #4]
 80049ba:	609a      	str	r2, [r3, #8]
 80049bc:	60da      	str	r2, [r3, #12]
 80049be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a69      	ldr	r2, [pc, #420]	; (8004b6c <HAL_UART_MspInit+0x1c4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d164      	bne.n	8004a94 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80049ca:	2300      	movs	r3, #0
 80049cc:	61bb      	str	r3, [r7, #24]
 80049ce:	4b68      	ldr	r3, [pc, #416]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	4a67      	ldr	r2, [pc, #412]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 80049d4:	f043 0310 	orr.w	r3, r3, #16
 80049d8:	6453      	str	r3, [r2, #68]	; 0x44
 80049da:	4b65      	ldr	r3, [pc, #404]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	f003 0310 	and.w	r3, r3, #16
 80049e2:	61bb      	str	r3, [r7, #24]
 80049e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	4b61      	ldr	r3, [pc, #388]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	4a60      	ldr	r2, [pc, #384]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	6313      	str	r3, [r2, #48]	; 0x30
 80049f6:	4b5e      	ldr	r3, [pc, #376]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a08:	2302      	movs	r3, #2
 8004a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a10:	2303      	movs	r3, #3
 8004a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a14:	2307      	movs	r3, #7
 8004a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a18:	f107 031c 	add.w	r3, r7, #28
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4855      	ldr	r0, [pc, #340]	; (8004b74 <HAL_UART_MspInit+0x1cc>)
 8004a20:	f001 fd9a 	bl	8006558 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004a24:	4b54      	ldr	r3, [pc, #336]	; (8004b78 <HAL_UART_MspInit+0x1d0>)
 8004a26:	4a55      	ldr	r2, [pc, #340]	; (8004b7c <HAL_UART_MspInit+0x1d4>)
 8004a28:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004a2a:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <HAL_UART_MspInit+0x1d0>)
 8004a2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a30:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a32:	4b51      	ldr	r3, [pc, #324]	; (8004b78 <HAL_UART_MspInit+0x1d0>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a38:	4b4f      	ldr	r3, [pc, #316]	; (8004b78 <HAL_UART_MspInit+0x1d0>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a3e:	4b4e      	ldr	r3, [pc, #312]	; (8004b78 <HAL_UART_MspInit+0x1d0>)
 8004a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a44:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a46:	4b4c      	ldr	r3, [pc, #304]	; (8004b78 <HAL_UART_MspInit+0x1d0>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a4c:	4b4a      	ldr	r3, [pc, #296]	; (8004b78 <HAL_UART_MspInit+0x1d0>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004a52:	4b49      	ldr	r3, [pc, #292]	; (8004b78 <HAL_UART_MspInit+0x1d0>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004a58:	4b47      	ldr	r3, [pc, #284]	; (8004b78 <HAL_UART_MspInit+0x1d0>)
 8004a5a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004a5e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a60:	4b45      	ldr	r3, [pc, #276]	; (8004b78 <HAL_UART_MspInit+0x1d0>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004a66:	4844      	ldr	r0, [pc, #272]	; (8004b78 <HAL_UART_MspInit+0x1d0>)
 8004a68:	f000 fe82 	bl	8005770 <HAL_DMA_Init>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004a72:	f7ff f9d9 	bl	8003e28 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a3f      	ldr	r2, [pc, #252]	; (8004b78 <HAL_UART_MspInit+0x1d0>)
 8004a7a:	639a      	str	r2, [r3, #56]	; 0x38
 8004a7c:	4a3e      	ldr	r2, [pc, #248]	; (8004b78 <HAL_UART_MspInit+0x1d0>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004a82:	2200      	movs	r2, #0
 8004a84:	2105      	movs	r1, #5
 8004a86:	2025      	movs	r0, #37	; 0x25
 8004a88:	f000 fe48 	bl	800571c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a8c:	2025      	movs	r0, #37	; 0x25
 8004a8e:	f000 fe61 	bl	8005754 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004a92:	e067      	b.n	8004b64 <HAL_UART_MspInit+0x1bc>
  else if(uartHandle->Instance==USART2)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a39      	ldr	r2, [pc, #228]	; (8004b80 <HAL_UART_MspInit+0x1d8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d162      	bne.n	8004b64 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	4b33      	ldr	r3, [pc, #204]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	4a32      	ldr	r2, [pc, #200]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aac:	6413      	str	r3, [r2, #64]	; 0x40
 8004aae:	4b30      	ldr	r3, [pc, #192]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	4b2c      	ldr	r3, [pc, #176]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	4a2b      	ldr	r2, [pc, #172]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aca:	4b29      	ldr	r3, [pc, #164]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004ad6:	230c      	movs	r3, #12
 8004ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ada:	2302      	movs	r3, #2
 8004adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ae6:	2307      	movs	r3, #7
 8004ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aea:	f107 031c 	add.w	r3, r7, #28
 8004aee:	4619      	mov	r1, r3
 8004af0:	4820      	ldr	r0, [pc, #128]	; (8004b74 <HAL_UART_MspInit+0x1cc>)
 8004af2:	f001 fd31 	bl	8006558 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004af6:	4b23      	ldr	r3, [pc, #140]	; (8004b84 <HAL_UART_MspInit+0x1dc>)
 8004af8:	4a23      	ldr	r2, [pc, #140]	; (8004b88 <HAL_UART_MspInit+0x1e0>)
 8004afa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004afc:	4b21      	ldr	r3, [pc, #132]	; (8004b84 <HAL_UART_MspInit+0x1dc>)
 8004afe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b02:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b04:	4b1f      	ldr	r3, [pc, #124]	; (8004b84 <HAL_UART_MspInit+0x1dc>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b0a:	4b1e      	ldr	r3, [pc, #120]	; (8004b84 <HAL_UART_MspInit+0x1dc>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b10:	4b1c      	ldr	r3, [pc, #112]	; (8004b84 <HAL_UART_MspInit+0x1dc>)
 8004b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b16:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b18:	4b1a      	ldr	r3, [pc, #104]	; (8004b84 <HAL_UART_MspInit+0x1dc>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b1e:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <HAL_UART_MspInit+0x1dc>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004b24:	4b17      	ldr	r3, [pc, #92]	; (8004b84 <HAL_UART_MspInit+0x1dc>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004b2a:	4b16      	ldr	r3, [pc, #88]	; (8004b84 <HAL_UART_MspInit+0x1dc>)
 8004b2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b30:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b32:	4b14      	ldr	r3, [pc, #80]	; (8004b84 <HAL_UART_MspInit+0x1dc>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004b38:	4812      	ldr	r0, [pc, #72]	; (8004b84 <HAL_UART_MspInit+0x1dc>)
 8004b3a:	f000 fe19 	bl	8005770 <HAL_DMA_Init>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8004b44:	f7ff f970 	bl	8003e28 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a0e      	ldr	r2, [pc, #56]	; (8004b84 <HAL_UART_MspInit+0x1dc>)
 8004b4c:	639a      	str	r2, [r3, #56]	; 0x38
 8004b4e:	4a0d      	ldr	r2, [pc, #52]	; (8004b84 <HAL_UART_MspInit+0x1dc>)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004b54:	2200      	movs	r2, #0
 8004b56:	2105      	movs	r1, #5
 8004b58:	2026      	movs	r0, #38	; 0x26
 8004b5a:	f000 fddf 	bl	800571c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b5e:	2026      	movs	r0, #38	; 0x26
 8004b60:	f000 fdf8 	bl	8005754 <HAL_NVIC_EnableIRQ>
}
 8004b64:	bf00      	nop
 8004b66:	3730      	adds	r7, #48	; 0x30
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	40023800 	.word	0x40023800
 8004b74:	40020000 	.word	0x40020000
 8004b78:	2000b56c 	.word	0x2000b56c
 8004b7c:	40026440 	.word	0x40026440
 8004b80:	40004400 	.word	0x40004400
 8004b84:	2000b344 	.word	0x2000b344
 8004b88:	40026088 	.word	0x40026088

08004b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b90:	480d      	ldr	r0, [pc, #52]	; (8004bc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004b92:	490e      	ldr	r1, [pc, #56]	; (8004bcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004b94:	4a0e      	ldr	r2, [pc, #56]	; (8004bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b98:	e002      	b.n	8004ba0 <LoopCopyDataInit>

08004b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b9e:	3304      	adds	r3, #4

08004ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ba4:	d3f9      	bcc.n	8004b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ba6:	4a0b      	ldr	r2, [pc, #44]	; (8004bd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ba8:	4c0b      	ldr	r4, [pc, #44]	; (8004bd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bac:	e001      	b.n	8004bb2 <LoopFillZerobss>

08004bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bb0:	3204      	adds	r2, #4

08004bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bb4:	d3fb      	bcc.n	8004bae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004bb6:	f7ff fc01 	bl	80043bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bba:	f00a fcb1 	bl	800f520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bbe:	f7ff f851 	bl	8003c64 <main>
  bx  lr    
 8004bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004bc4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bcc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004bd0:	08014728 	.word	0x08014728
  ldr r2, =_sbss
 8004bd4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004bd8:	2000b684 	.word	0x2000b684

08004bdc <DMA1_Stream3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004bdc:	e7fe      	b.n	8004bdc <DMA1_Stream3_IRQHandler>
	...

08004be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004be4:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <HAL_Init+0x40>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a0d      	ldr	r2, [pc, #52]	; (8004c20 <HAL_Init+0x40>)
 8004bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <HAL_Init+0x40>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a0a      	ldr	r2, [pc, #40]	; (8004c20 <HAL_Init+0x40>)
 8004bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bfc:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <HAL_Init+0x40>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a07      	ldr	r2, [pc, #28]	; (8004c20 <HAL_Init+0x40>)
 8004c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c08:	2003      	movs	r0, #3
 8004c0a:	f000 fd7c 	bl	8005706 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c0e:	2000      	movs	r0, #0
 8004c10:	f7ff f9f4 	bl	8003ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c14:	f7ff f9c6 	bl	8003fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40023c00 	.word	0x40023c00

08004c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <HAL_IncTick+0x20>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <HAL_IncTick+0x24>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4413      	add	r3, r2
 8004c34:	4a04      	ldr	r2, [pc, #16]	; (8004c48 <HAL_IncTick+0x24>)
 8004c36:	6013      	str	r3, [r2, #0]
}
 8004c38:	bf00      	nop
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	20000014 	.word	0x20000014
 8004c48:	2000b610 	.word	0x2000b610

08004c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8004c50:	4b03      	ldr	r3, [pc, #12]	; (8004c60 <HAL_GetTick+0x14>)
 8004c52:	681b      	ldr	r3, [r3, #0]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	2000b610 	.word	0x2000b610

08004c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c6c:	f7ff ffee 	bl	8004c4c <HAL_GetTick>
 8004c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c7c:	d005      	beq.n	8004c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <HAL_Delay+0x44>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c8a:	bf00      	nop
 8004c8c:	f7ff ffde 	bl	8004c4c <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d8f7      	bhi.n	8004c8c <HAL_Delay+0x28>
  {
  }
}
 8004c9c:	bf00      	nop
 8004c9e:	bf00      	nop
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000014 	.word	0x20000014

08004cac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e033      	b.n	8004d2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fc fe36 	bl	800193c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d118      	bne.n	8004d1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004cf2:	f023 0302 	bic.w	r3, r3, #2
 8004cf6:	f043 0202 	orr.w	r2, r3, #2
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fb4e 	bl	80053a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f023 0303 	bic.w	r3, r3, #3
 8004d12:	f043 0201 	orr.w	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	641a      	str	r2, [r3, #64]	; 0x40
 8004d1a:	e001      	b.n	8004d20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d101      	bne.n	8004d4e <HAL_ADC_Start_IT+0x1a>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e0a1      	b.n	8004e92 <HAL_ADC_Start_IT+0x15e>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d018      	beq.n	8004d96 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d74:	4b4a      	ldr	r3, [pc, #296]	; (8004ea0 <HAL_ADC_Start_IT+0x16c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a4a      	ldr	r2, [pc, #296]	; (8004ea4 <HAL_ADC_Start_IT+0x170>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	0c9a      	lsrs	r2, r3, #18
 8004d80:	4613      	mov	r3, r2
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	4413      	add	r3, r2
 8004d86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004d88:	e002      	b.n	8004d90 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f9      	bne.n	8004d8a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d169      	bne.n	8004e78 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004dac:	f023 0301 	bic.w	r3, r3, #1
 8004db0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d007      	beq.n	8004dd6 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004dce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de2:	d106      	bne.n	8004df2 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de8:	f023 0206 	bic.w	r2, r3, #6
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	645a      	str	r2, [r3, #68]	; 0x44
 8004df0:	e002      	b.n	8004df8 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e00:	4b29      	ldr	r3, [pc, #164]	; (8004ea8 <HAL_ADC_Start_IT+0x174>)
 8004e02:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004e0c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6812      	ldr	r2, [r2, #0]
 8004e18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e1c:	f043 0320 	orr.w	r3, r3, #32
 8004e20:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 031f 	and.w	r3, r3, #31
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10f      	bne.n	8004e4e <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d129      	bne.n	8004e90 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e4a:	609a      	str	r2, [r3, #8]
 8004e4c:	e020      	b.n	8004e90 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a16      	ldr	r2, [pc, #88]	; (8004eac <HAL_ADC_Start_IT+0x178>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d11b      	bne.n	8004e90 <HAL_ADC_Start_IT+0x15c>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d114      	bne.n	8004e90 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e74:	609a      	str	r2, [r3, #8]
 8004e76:	e00b      	b.n	8004e90 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	f043 0210 	orr.w	r2, r3, #16
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e88:	f043 0201 	orr.w	r2, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	2000000c 	.word	0x2000000c
 8004ea4:	431bde83 	.word	0x431bde83
 8004ea8:	40012300 	.word	0x40012300
 8004eac:	40012000 	.word	0x40012000

08004eb0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	bf0c      	ite	eq
 8004ece:	2301      	moveq	r3, #1
 8004ed0:	2300      	movne	r3, #0
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	bf0c      	ite	eq
 8004ee4:	2301      	moveq	r3, #1
 8004ee6:	2300      	movne	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d049      	beq.n	8004f86 <HAL_ADC_IRQHandler+0xd6>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d046      	beq.n	8004f86 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d105      	bne.n	8004f10 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d12b      	bne.n	8004f76 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d127      	bne.n	8004f76 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d006      	beq.n	8004f42 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d119      	bne.n	8004f76 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0220 	bic.w	r2, r2, #32
 8004f50:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d105      	bne.n	8004f76 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f043 0201 	orr.w	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fc fd5e 	bl	8001a38 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0212 	mvn.w	r2, #18
 8004f84:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	bf0c      	ite	eq
 8004f94:	2301      	moveq	r3, #1
 8004f96:	2300      	movne	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa6:	2b80      	cmp	r3, #128	; 0x80
 8004fa8:	bf0c      	ite	eq
 8004faa:	2301      	moveq	r3, #1
 8004fac:	2300      	movne	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d057      	beq.n	8005068 <HAL_ADC_IRQHandler+0x1b8>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d054      	beq.n	8005068 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d105      	bne.n	8004fd6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d139      	bne.n	8005058 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d006      	beq.n	8005000 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d12b      	bne.n	8005058 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800500a:	2b00      	cmp	r3, #0
 800500c:	d124      	bne.n	8005058 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005018:	2b00      	cmp	r3, #0
 800501a:	d11d      	bne.n	8005058 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005020:	2b00      	cmp	r3, #0
 8005022:	d119      	bne.n	8005058 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005032:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d105      	bne.n	8005058 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	f043 0201 	orr.w	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fa9d 	bl	8005598 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f06f 020c 	mvn.w	r2, #12
 8005066:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b01      	cmp	r3, #1
 8005074:	bf0c      	ite	eq
 8005076:	2301      	moveq	r3, #1
 8005078:	2300      	movne	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	bf0c      	ite	eq
 800508c:	2301      	moveq	r3, #1
 800508e:	2300      	movne	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d017      	beq.n	80050ca <HAL_ADC_IRQHandler+0x21a>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d014      	beq.n	80050ca <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d10d      	bne.n	80050ca <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f839 	bl	8005132 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0201 	mvn.w	r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b20      	cmp	r3, #32
 80050d6:	bf0c      	ite	eq
 80050d8:	2301      	moveq	r3, #1
 80050da:	2300      	movne	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050ee:	bf0c      	ite	eq
 80050f0:	2301      	moveq	r3, #1
 80050f2:	2300      	movne	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d015      	beq.n	800512a <HAL_ADC_IRQHandler+0x27a>
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d012      	beq.n	800512a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005108:	f043 0202 	orr.w	r2, r3, #2
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0220 	mvn.w	r2, #32
 8005118:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f813 	bl	8005146 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0220 	mvn.w	r2, #32
 8005128:	601a      	str	r2, [r3, #0]
  }
}
 800512a:	bf00      	nop
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x1c>
 8005174:	2302      	movs	r3, #2
 8005176:	e105      	b.n	8005384 <HAL_ADC_ConfigChannel+0x228>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b09      	cmp	r3, #9
 8005186:	d925      	bls.n	80051d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68d9      	ldr	r1, [r3, #12]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	b29b      	uxth	r3, r3
 8005194:	461a      	mov	r2, r3
 8005196:	4613      	mov	r3, r2
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	4413      	add	r3, r2
 800519c:	3b1e      	subs	r3, #30
 800519e:	2207      	movs	r2, #7
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	43da      	mvns	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	400a      	ands	r2, r1
 80051ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68d9      	ldr	r1, [r3, #12]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	4618      	mov	r0, r3
 80051c0:	4603      	mov	r3, r0
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	4403      	add	r3, r0
 80051c6:	3b1e      	subs	r3, #30
 80051c8:	409a      	lsls	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	60da      	str	r2, [r3, #12]
 80051d2:	e022      	b.n	800521a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6919      	ldr	r1, [r3, #16]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	2207      	movs	r2, #7
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	43da      	mvns	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	400a      	ands	r2, r1
 80051f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6919      	ldr	r1, [r3, #16]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	4618      	mov	r0, r3
 800520a:	4603      	mov	r3, r0
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	4403      	add	r3, r0
 8005210:	409a      	lsls	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b06      	cmp	r3, #6
 8005220:	d824      	bhi.n	800526c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	3b05      	subs	r3, #5
 8005234:	221f      	movs	r2, #31
 8005236:	fa02 f303 	lsl.w	r3, r2, r3
 800523a:	43da      	mvns	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	400a      	ands	r2, r1
 8005242:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	4618      	mov	r0, r3
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	3b05      	subs	r3, #5
 800525e:	fa00 f203 	lsl.w	r2, r0, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	635a      	str	r2, [r3, #52]	; 0x34
 800526a:	e04c      	b.n	8005306 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b0c      	cmp	r3, #12
 8005272:	d824      	bhi.n	80052be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	3b23      	subs	r3, #35	; 0x23
 8005286:	221f      	movs	r2, #31
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	43da      	mvns	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	400a      	ands	r2, r1
 8005294:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	4618      	mov	r0, r3
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	3b23      	subs	r3, #35	; 0x23
 80052b0:	fa00 f203 	lsl.w	r2, r0, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30
 80052bc:	e023      	b.n	8005306 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	3b41      	subs	r3, #65	; 0x41
 80052d0:	221f      	movs	r2, #31
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	43da      	mvns	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	400a      	ands	r2, r1
 80052de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	4618      	mov	r0, r3
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	3b41      	subs	r3, #65	; 0x41
 80052fa:	fa00 f203 	lsl.w	r2, r0, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005306:	4b22      	ldr	r3, [pc, #136]	; (8005390 <HAL_ADC_ConfigChannel+0x234>)
 8005308:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a21      	ldr	r2, [pc, #132]	; (8005394 <HAL_ADC_ConfigChannel+0x238>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d109      	bne.n	8005328 <HAL_ADC_ConfigChannel+0x1cc>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b12      	cmp	r3, #18
 800531a:	d105      	bne.n	8005328 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a19      	ldr	r2, [pc, #100]	; (8005394 <HAL_ADC_ConfigChannel+0x238>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d123      	bne.n	800537a <HAL_ADC_ConfigChannel+0x21e>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b10      	cmp	r3, #16
 8005338:	d003      	beq.n	8005342 <HAL_ADC_ConfigChannel+0x1e6>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b11      	cmp	r3, #17
 8005340:	d11b      	bne.n	800537a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b10      	cmp	r3, #16
 8005354:	d111      	bne.n	800537a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005356:	4b10      	ldr	r3, [pc, #64]	; (8005398 <HAL_ADC_ConfigChannel+0x23c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a10      	ldr	r2, [pc, #64]	; (800539c <HAL_ADC_ConfigChannel+0x240>)
 800535c:	fba2 2303 	umull	r2, r3, r2, r3
 8005360:	0c9a      	lsrs	r2, r3, #18
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800536c:	e002      	b.n	8005374 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	3b01      	subs	r3, #1
 8005372:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f9      	bne.n	800536e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	40012300 	.word	0x40012300
 8005394:	40012000 	.word	0x40012000
 8005398:	2000000c 	.word	0x2000000c
 800539c:	431bde83 	.word	0x431bde83

080053a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053a8:	4b79      	ldr	r3, [pc, #484]	; (8005590 <ADC_Init+0x1f0>)
 80053aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	431a      	orrs	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6859      	ldr	r1, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	021a      	lsls	r2, r3, #8
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80053f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6859      	ldr	r1, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800541a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6899      	ldr	r1, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	4a58      	ldr	r2, [pc, #352]	; (8005594 <ADC_Init+0x1f4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d022      	beq.n	800547e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005446:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6899      	ldr	r1, [r3, #8]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005468:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6899      	ldr	r1, [r3, #8]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	e00f      	b.n	800549e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800548c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800549c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0202 	bic.w	r2, r2, #2
 80054ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6899      	ldr	r1, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	7e1b      	ldrb	r3, [r3, #24]
 80054b8:	005a      	lsls	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01b      	beq.n	8005504 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80054ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6859      	ldr	r1, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	3b01      	subs	r3, #1
 80054f8:	035a      	lsls	r2, r3, #13
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
 8005502:	e007      	b.n	8005514 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005512:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005522:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	3b01      	subs	r3, #1
 8005530:	051a      	lsls	r2, r3, #20
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005548:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6899      	ldr	r1, [r3, #8]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005556:	025a      	lsls	r2, r3, #9
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800556e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6899      	ldr	r1, [r3, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	029a      	lsls	r2, r3, #10
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	609a      	str	r2, [r3, #8]
}
 8005584:	bf00      	nop
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	40012300 	.word	0x40012300
 8005594:	0f000001 	.word	0x0f000001

08005598 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055bc:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <__NVIC_SetPriorityGrouping+0x44>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055c8:	4013      	ands	r3, r2
 80055ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055de:	4a04      	ldr	r2, [pc, #16]	; (80055f0 <__NVIC_SetPriorityGrouping+0x44>)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	60d3      	str	r3, [r2, #12]
}
 80055e4:	bf00      	nop
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	e000ed00 	.word	0xe000ed00

080055f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055f8:	4b04      	ldr	r3, [pc, #16]	; (800560c <__NVIC_GetPriorityGrouping+0x18>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	0a1b      	lsrs	r3, r3, #8
 80055fe:	f003 0307 	and.w	r3, r3, #7
}
 8005602:	4618      	mov	r0, r3
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	e000ed00 	.word	0xe000ed00

08005610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800561a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561e:	2b00      	cmp	r3, #0
 8005620:	db0b      	blt.n	800563a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005622:	79fb      	ldrb	r3, [r7, #7]
 8005624:	f003 021f 	and.w	r2, r3, #31
 8005628:	4907      	ldr	r1, [pc, #28]	; (8005648 <__NVIC_EnableIRQ+0x38>)
 800562a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562e:	095b      	lsrs	r3, r3, #5
 8005630:	2001      	movs	r0, #1
 8005632:	fa00 f202 	lsl.w	r2, r0, r2
 8005636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	e000e100 	.word	0xe000e100

0800564c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	6039      	str	r1, [r7, #0]
 8005656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565c:	2b00      	cmp	r3, #0
 800565e:	db0a      	blt.n	8005676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	b2da      	uxtb	r2, r3
 8005664:	490c      	ldr	r1, [pc, #48]	; (8005698 <__NVIC_SetPriority+0x4c>)
 8005666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800566a:	0112      	lsls	r2, r2, #4
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	440b      	add	r3, r1
 8005670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005674:	e00a      	b.n	800568c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	b2da      	uxtb	r2, r3
 800567a:	4908      	ldr	r1, [pc, #32]	; (800569c <__NVIC_SetPriority+0x50>)
 800567c:	79fb      	ldrb	r3, [r7, #7]
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	3b04      	subs	r3, #4
 8005684:	0112      	lsls	r2, r2, #4
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	440b      	add	r3, r1
 800568a:	761a      	strb	r2, [r3, #24]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	e000e100 	.word	0xe000e100
 800569c:	e000ed00 	.word	0xe000ed00

080056a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b089      	sub	sp, #36	; 0x24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f1c3 0307 	rsb	r3, r3, #7
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	bf28      	it	cs
 80056be:	2304      	movcs	r3, #4
 80056c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	3304      	adds	r3, #4
 80056c6:	2b06      	cmp	r3, #6
 80056c8:	d902      	bls.n	80056d0 <NVIC_EncodePriority+0x30>
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	3b03      	subs	r3, #3
 80056ce:	e000      	b.n	80056d2 <NVIC_EncodePriority+0x32>
 80056d0:	2300      	movs	r3, #0
 80056d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	43da      	mvns	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	401a      	ands	r2, r3
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	fa01 f303 	lsl.w	r3, r1, r3
 80056f2:	43d9      	mvns	r1, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056f8:	4313      	orrs	r3, r2
         );
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3724      	adds	r7, #36	; 0x24
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7ff ff4c 	bl	80055ac <__NVIC_SetPriorityGrouping>
}
 8005714:	bf00      	nop
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800572e:	f7ff ff61 	bl	80055f4 <__NVIC_GetPriorityGrouping>
 8005732:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	6978      	ldr	r0, [r7, #20]
 800573a:	f7ff ffb1 	bl	80056a0 <NVIC_EncodePriority>
 800573e:	4602      	mov	r2, r0
 8005740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005744:	4611      	mov	r1, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff ff80 	bl	800564c <__NVIC_SetPriority>
}
 800574c:	bf00      	nop
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800575e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff ff54 	bl	8005610 <__NVIC_EnableIRQ>
}
 8005768:	bf00      	nop
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800577c:	f7ff fa66 	bl	8004c4c <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e099      	b.n	80058c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0201 	bic.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057ac:	e00f      	b.n	80057ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057ae:	f7ff fa4d 	bl	8004c4c <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b05      	cmp	r3, #5
 80057ba:	d908      	bls.n	80057ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2203      	movs	r2, #3
 80057c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e078      	b.n	80058c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e8      	bne.n	80057ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	4b38      	ldr	r3, [pc, #224]	; (80058c8 <HAL_DMA_Init+0x158>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005806:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005812:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	2b04      	cmp	r3, #4
 8005826:	d107      	bne.n	8005838 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	4313      	orrs	r3, r2
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f023 0307 	bic.w	r3, r3, #7
 800584e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	2b04      	cmp	r3, #4
 8005860:	d117      	bne.n	8005892 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00e      	beq.n	8005892 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fb1b 	bl	8005eb0 <DMA_CheckFifoParam>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d008      	beq.n	8005892 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2240      	movs	r2, #64	; 0x40
 8005884:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800588e:	2301      	movs	r3, #1
 8005890:	e016      	b.n	80058c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fad2 	bl	8005e44 <DMA_CalcBaseAndBitshift>
 80058a0:	4603      	mov	r3, r0
 80058a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a8:	223f      	movs	r2, #63	; 0x3f
 80058aa:	409a      	lsls	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	f010803f 	.word	0xf010803f

080058cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
 80058d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d101      	bne.n	80058f2 <HAL_DMA_Start_IT+0x26>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e040      	b.n	8005974 <HAL_DMA_Start_IT+0xa8>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b01      	cmp	r3, #1
 8005904:	d12f      	bne.n	8005966 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2202      	movs	r2, #2
 800590a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 fa64 	bl	8005de8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005924:	223f      	movs	r2, #63	; 0x3f
 8005926:	409a      	lsls	r2, r3
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0216 	orr.w	r2, r2, #22
 800593a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d007      	beq.n	8005954 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0208 	orr.w	r2, r2, #8
 8005952:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0201 	orr.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	e005      	b.n	8005972 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800596e:	2302      	movs	r3, #2
 8005970:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005972:	7dfb      	ldrb	r3, [r7, #23]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005988:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800598a:	f7ff f95f 	bl	8004c4c <HAL_GetTick>
 800598e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d008      	beq.n	80059ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2280      	movs	r2, #128	; 0x80
 80059a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e052      	b.n	8005a54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0216 	bic.w	r2, r2, #22
 80059bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695a      	ldr	r2, [r3, #20]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d103      	bne.n	80059de <HAL_DMA_Abort+0x62>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d007      	beq.n	80059ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0208 	bic.w	r2, r2, #8
 80059ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0201 	bic.w	r2, r2, #1
 80059fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059fe:	e013      	b.n	8005a28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a00:	f7ff f924 	bl	8004c4c <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b05      	cmp	r3, #5
 8005a0c:	d90c      	bls.n	8005a28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2220      	movs	r2, #32
 8005a12:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2203      	movs	r2, #3
 8005a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e015      	b.n	8005a54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e4      	bne.n	8005a00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3a:	223f      	movs	r2, #63	; 0x3f
 8005a3c:	409a      	lsls	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d004      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2280      	movs	r2, #128	; 0x80
 8005a74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e00c      	b.n	8005a94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2205      	movs	r2, #5
 8005a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0201 	bic.w	r2, r2, #1
 8005a90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005aac:	4b92      	ldr	r3, [pc, #584]	; (8005cf8 <HAL_DMA_IRQHandler+0x258>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a92      	ldr	r2, [pc, #584]	; (8005cfc <HAL_DMA_IRQHandler+0x25c>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	0a9b      	lsrs	r3, r3, #10
 8005ab8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005abe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aca:	2208      	movs	r2, #8
 8005acc:	409a      	lsls	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d01a      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d013      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0204 	bic.w	r2, r2, #4
 8005af2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af8:	2208      	movs	r2, #8
 8005afa:	409a      	lsls	r2, r3
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b04:	f043 0201 	orr.w	r2, r3, #1
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b10:	2201      	movs	r2, #1
 8005b12:	409a      	lsls	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4013      	ands	r3, r2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d012      	beq.n	8005b42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00b      	beq.n	8005b42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2e:	2201      	movs	r2, #1
 8005b30:	409a      	lsls	r2, r3
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3a:	f043 0202 	orr.w	r2, r3, #2
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b46:	2204      	movs	r2, #4
 8005b48:	409a      	lsls	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d012      	beq.n	8005b78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b64:	2204      	movs	r2, #4
 8005b66:	409a      	lsls	r2, r3
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b70:	f043 0204 	orr.w	r2, r3, #4
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b7c:	2210      	movs	r2, #16
 8005b7e:	409a      	lsls	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4013      	ands	r3, r2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d043      	beq.n	8005c10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0308 	and.w	r3, r3, #8
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d03c      	beq.n	8005c10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9a:	2210      	movs	r2, #16
 8005b9c:	409a      	lsls	r2, r3
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d018      	beq.n	8005be2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d108      	bne.n	8005bd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d024      	beq.n	8005c10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	4798      	blx	r3
 8005bce:	e01f      	b.n	8005c10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01b      	beq.n	8005c10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	4798      	blx	r3
 8005be0:	e016      	b.n	8005c10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d107      	bne.n	8005c00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0208 	bic.w	r2, r2, #8
 8005bfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c14:	2220      	movs	r2, #32
 8005c16:	409a      	lsls	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 808e 	beq.w	8005d3e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 8086 	beq.w	8005d3e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c36:	2220      	movs	r2, #32
 8005c38:	409a      	lsls	r2, r3
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b05      	cmp	r3, #5
 8005c48:	d136      	bne.n	8005cb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0216 	bic.w	r2, r2, #22
 8005c58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695a      	ldr	r2, [r3, #20]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <HAL_DMA_IRQHandler+0x1da>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d007      	beq.n	8005c8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0208 	bic.w	r2, r2, #8
 8005c88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c8e:	223f      	movs	r2, #63	; 0x3f
 8005c90:	409a      	lsls	r2, r3
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d07d      	beq.n	8005daa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
        }
        return;
 8005cb6:	e078      	b.n	8005daa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d01c      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d108      	bne.n	8005ce6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d030      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	4798      	blx	r3
 8005ce4:	e02b      	b.n	8005d3e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d027      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	4798      	blx	r3
 8005cf6:	e022      	b.n	8005d3e <HAL_DMA_IRQHandler+0x29e>
 8005cf8:	2000000c 	.word	0x2000000c
 8005cfc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10f      	bne.n	8005d2e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0210 	bic.w	r2, r2, #16
 8005d1c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d032      	beq.n	8005dac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d022      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2205      	movs	r2, #5
 8005d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0201 	bic.w	r2, r2, #1
 8005d68:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	60bb      	str	r3, [r7, #8]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d307      	bcc.n	8005d86 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1f2      	bne.n	8005d6a <HAL_DMA_IRQHandler+0x2ca>
 8005d84:	e000      	b.n	8005d88 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005d86:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d005      	beq.n	8005dac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	4798      	blx	r3
 8005da8:	e000      	b.n	8005dac <HAL_DMA_IRQHandler+0x30c>
        return;
 8005daa:	bf00      	nop
    }
  }
}
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop

08005db4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dc2:	b2db      	uxtb	r3, r3
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2b40      	cmp	r3, #64	; 0x40
 8005e14:	d108      	bne.n	8005e28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e26:	e007      	b.n	8005e38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	60da      	str	r2, [r3, #12]
}
 8005e38:	bf00      	nop
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	3b10      	subs	r3, #16
 8005e54:	4a14      	ldr	r2, [pc, #80]	; (8005ea8 <DMA_CalcBaseAndBitshift+0x64>)
 8005e56:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5a:	091b      	lsrs	r3, r3, #4
 8005e5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e5e:	4a13      	ldr	r2, [pc, #76]	; (8005eac <DMA_CalcBaseAndBitshift+0x68>)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d909      	bls.n	8005e86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	1d1a      	adds	r2, r3, #4
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	659a      	str	r2, [r3, #88]	; 0x58
 8005e84:	e007      	b.n	8005e96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e8e:	f023 0303 	bic.w	r3, r3, #3
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	aaaaaaab 	.word	0xaaaaaaab
 8005eac:	08014110 	.word	0x08014110

08005eb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d11f      	bne.n	8005f0a <DMA_CheckFifoParam+0x5a>
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d856      	bhi.n	8005f7e <DMA_CheckFifoParam+0xce>
 8005ed0:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <DMA_CheckFifoParam+0x28>)
 8005ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed6:	bf00      	nop
 8005ed8:	08005ee9 	.word	0x08005ee9
 8005edc:	08005efb 	.word	0x08005efb
 8005ee0:	08005ee9 	.word	0x08005ee9
 8005ee4:	08005f7f 	.word	0x08005f7f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d046      	beq.n	8005f82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ef8:	e043      	b.n	8005f82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f02:	d140      	bne.n	8005f86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f08:	e03d      	b.n	8005f86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f12:	d121      	bne.n	8005f58 <DMA_CheckFifoParam+0xa8>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d837      	bhi.n	8005f8a <DMA_CheckFifoParam+0xda>
 8005f1a:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <DMA_CheckFifoParam+0x70>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f31 	.word	0x08005f31
 8005f24:	08005f37 	.word	0x08005f37
 8005f28:	08005f31 	.word	0x08005f31
 8005f2c:	08005f49 	.word	0x08005f49
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	73fb      	strb	r3, [r7, #15]
      break;
 8005f34:	e030      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d025      	beq.n	8005f8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f46:	e022      	b.n	8005f8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f50:	d11f      	bne.n	8005f92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005f56:	e01c      	b.n	8005f92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d903      	bls.n	8005f66 <DMA_CheckFifoParam+0xb6>
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d003      	beq.n	8005f6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005f64:	e018      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	73fb      	strb	r3, [r7, #15]
      break;
 8005f6a:	e015      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00e      	beq.n	8005f96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f7c:	e00b      	b.n	8005f96 <DMA_CheckFifoParam+0xe6>
      break;
 8005f7e:	bf00      	nop
 8005f80:	e00a      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
      break;
 8005f82:	bf00      	nop
 8005f84:	e008      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
      break;
 8005f86:	bf00      	nop
 8005f88:	e006      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
      break;
 8005f8a:	bf00      	nop
 8005f8c:	e004      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
      break;
 8005f8e:	bf00      	nop
 8005f90:	e002      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
      break;   
 8005f92:	bf00      	nop
 8005f94:	e000      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
      break;
 8005f96:	bf00      	nop
    }
  } 
  
  return status; 
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop

08005fa8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005fba:	4b23      	ldr	r3, [pc, #140]	; (8006048 <HAL_FLASH_Program+0xa0>)
 8005fbc:	7e1b      	ldrb	r3, [r3, #24]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_FLASH_Program+0x1e>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e03b      	b.n	800603e <HAL_FLASH_Program+0x96>
 8005fc6:	4b20      	ldr	r3, [pc, #128]	; (8006048 <HAL_FLASH_Program+0xa0>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005fcc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005fd0:	f000 f860 	bl	8006094 <FLASH_WaitForLastOperation>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005fd8:	7dfb      	ldrb	r3, [r7, #23]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d12b      	bne.n	8006036 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d105      	bne.n	8005ff0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005fe4:	783b      	ldrb	r3, [r7, #0]
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	68b8      	ldr	r0, [r7, #8]
 8005fea:	f000 f90b 	bl	8006204 <FLASH_Program_Byte>
 8005fee:	e016      	b.n	800601e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d105      	bne.n	8006002 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005ff6:	883b      	ldrh	r3, [r7, #0]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	68b8      	ldr	r0, [r7, #8]
 8005ffc:	f000 f8de 	bl	80061bc <FLASH_Program_HalfWord>
 8006000:	e00d      	b.n	800601e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d105      	bne.n	8006014 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	4619      	mov	r1, r3
 800600c:	68b8      	ldr	r0, [r7, #8]
 800600e:	f000 f8b3 	bl	8006178 <FLASH_Program_Word>
 8006012:	e004      	b.n	800601e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006018:	68b8      	ldr	r0, [r7, #8]
 800601a:	f000 f87b 	bl	8006114 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800601e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006022:	f000 f837 	bl	8006094 <FLASH_WaitForLastOperation>
 8006026:	4603      	mov	r3, r0
 8006028:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800602a:	4b08      	ldr	r3, [pc, #32]	; (800604c <HAL_FLASH_Program+0xa4>)
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	4a07      	ldr	r2, [pc, #28]	; (800604c <HAL_FLASH_Program+0xa4>)
 8006030:	f023 0301 	bic.w	r3, r3, #1
 8006034:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006036:	4b04      	ldr	r3, [pc, #16]	; (8006048 <HAL_FLASH_Program+0xa0>)
 8006038:	2200      	movs	r2, #0
 800603a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800603c:	7dfb      	ldrb	r3, [r7, #23]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	2000b614 	.word	0x2000b614
 800604c:	40023c00 	.word	0x40023c00

08006050 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800605a:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <HAL_FLASH_Unlock+0x38>)
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	da0b      	bge.n	800607a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <HAL_FLASH_Unlock+0x38>)
 8006064:	4a09      	ldr	r2, [pc, #36]	; (800608c <HAL_FLASH_Unlock+0x3c>)
 8006066:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006068:	4b07      	ldr	r3, [pc, #28]	; (8006088 <HAL_FLASH_Unlock+0x38>)
 800606a:	4a09      	ldr	r2, [pc, #36]	; (8006090 <HAL_FLASH_Unlock+0x40>)
 800606c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800606e:	4b06      	ldr	r3, [pc, #24]	; (8006088 <HAL_FLASH_Unlock+0x38>)
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	da01      	bge.n	800607a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800607a:	79fb      	ldrb	r3, [r7, #7]
}
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	40023c00 	.word	0x40023c00
 800608c:	45670123 	.word	0x45670123
 8006090:	cdef89ab 	.word	0xcdef89ab

08006094 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80060a0:	4b1a      	ldr	r3, [pc, #104]	; (800610c <FLASH_WaitForLastOperation+0x78>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80060a6:	f7fe fdd1 	bl	8004c4c <HAL_GetTick>
 80060aa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80060ac:	e010      	b.n	80060d0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060b4:	d00c      	beq.n	80060d0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d007      	beq.n	80060cc <FLASH_WaitForLastOperation+0x38>
 80060bc:	f7fe fdc6 	bl	8004c4c <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d201      	bcs.n	80060d0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e019      	b.n	8006104 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80060d0:	4b0f      	ldr	r3, [pc, #60]	; (8006110 <FLASH_WaitForLastOperation+0x7c>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e8      	bne.n	80060ae <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80060dc:	4b0c      	ldr	r3, [pc, #48]	; (8006110 <FLASH_WaitForLastOperation+0x7c>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80060e8:	4b09      	ldr	r3, [pc, #36]	; (8006110 <FLASH_WaitForLastOperation+0x7c>)
 80060ea:	2201      	movs	r2, #1
 80060ec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80060ee:	4b08      	ldr	r3, [pc, #32]	; (8006110 <FLASH_WaitForLastOperation+0x7c>)
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80060fa:	f000 f8a5 	bl	8006248 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006102:	2300      	movs	r3, #0
  
}  
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	2000b614 	.word	0x2000b614
 8006110:	40023c00 	.word	0x40023c00

08006114 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006120:	4b14      	ldr	r3, [pc, #80]	; (8006174 <FLASH_Program_DoubleWord+0x60>)
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	4a13      	ldr	r2, [pc, #76]	; (8006174 <FLASH_Program_DoubleWord+0x60>)
 8006126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800612a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800612c:	4b11      	ldr	r3, [pc, #68]	; (8006174 <FLASH_Program_DoubleWord+0x60>)
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	4a10      	ldr	r2, [pc, #64]	; (8006174 <FLASH_Program_DoubleWord+0x60>)
 8006132:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006136:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006138:	4b0e      	ldr	r3, [pc, #56]	; (8006174 <FLASH_Program_DoubleWord+0x60>)
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	4a0d      	ldr	r2, [pc, #52]	; (8006174 <FLASH_Program_DoubleWord+0x60>)
 800613e:	f043 0301 	orr.w	r3, r3, #1
 8006142:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800614a:	f3bf 8f6f 	isb	sy
}
 800614e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006150:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	000a      	movs	r2, r1
 800615e:	2300      	movs	r3, #0
 8006160:	68f9      	ldr	r1, [r7, #12]
 8006162:	3104      	adds	r1, #4
 8006164:	4613      	mov	r3, r2
 8006166:	600b      	str	r3, [r1, #0]
}
 8006168:	bf00      	nop
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	40023c00 	.word	0x40023c00

08006178 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006182:	4b0d      	ldr	r3, [pc, #52]	; (80061b8 <FLASH_Program_Word+0x40>)
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	4a0c      	ldr	r2, [pc, #48]	; (80061b8 <FLASH_Program_Word+0x40>)
 8006188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800618e:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <FLASH_Program_Word+0x40>)
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	4a09      	ldr	r2, [pc, #36]	; (80061b8 <FLASH_Program_Word+0x40>)
 8006194:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006198:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800619a:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <FLASH_Program_Word+0x40>)
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	4a06      	ldr	r2, [pc, #24]	; (80061b8 <FLASH_Program_Word+0x40>)
 80061a0:	f043 0301 	orr.w	r3, r3, #1
 80061a4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	601a      	str	r2, [r3, #0]
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	40023c00 	.word	0x40023c00

080061bc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061c8:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <FLASH_Program_HalfWord+0x44>)
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	4a0c      	ldr	r2, [pc, #48]	; (8006200 <FLASH_Program_HalfWord+0x44>)
 80061ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80061d4:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <FLASH_Program_HalfWord+0x44>)
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	4a09      	ldr	r2, [pc, #36]	; (8006200 <FLASH_Program_HalfWord+0x44>)
 80061da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80061e0:	4b07      	ldr	r3, [pc, #28]	; (8006200 <FLASH_Program_HalfWord+0x44>)
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	4a06      	ldr	r2, [pc, #24]	; (8006200 <FLASH_Program_HalfWord+0x44>)
 80061e6:	f043 0301 	orr.w	r3, r3, #1
 80061ea:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	887a      	ldrh	r2, [r7, #2]
 80061f0:	801a      	strh	r2, [r3, #0]
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40023c00 	.word	0x40023c00

08006204 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006210:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <FLASH_Program_Byte+0x40>)
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	4a0b      	ldr	r2, [pc, #44]	; (8006244 <FLASH_Program_Byte+0x40>)
 8006216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800621a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800621c:	4b09      	ldr	r3, [pc, #36]	; (8006244 <FLASH_Program_Byte+0x40>)
 800621e:	4a09      	ldr	r2, [pc, #36]	; (8006244 <FLASH_Program_Byte+0x40>)
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006224:	4b07      	ldr	r3, [pc, #28]	; (8006244 <FLASH_Program_Byte+0x40>)
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	4a06      	ldr	r2, [pc, #24]	; (8006244 <FLASH_Program_Byte+0x40>)
 800622a:	f043 0301 	orr.w	r3, r3, #1
 800622e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	78fa      	ldrb	r2, [r7, #3]
 8006234:	701a      	strb	r2, [r3, #0]
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40023c00 	.word	0x40023c00

08006248 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800624c:	4b2f      	ldr	r3, [pc, #188]	; (800630c <FLASH_SetErrorCode+0xc4>)
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b00      	cmp	r3, #0
 8006256:	d008      	beq.n	800626a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006258:	4b2d      	ldr	r3, [pc, #180]	; (8006310 <FLASH_SetErrorCode+0xc8>)
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	f043 0310 	orr.w	r3, r3, #16
 8006260:	4a2b      	ldr	r2, [pc, #172]	; (8006310 <FLASH_SetErrorCode+0xc8>)
 8006262:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006264:	4b29      	ldr	r3, [pc, #164]	; (800630c <FLASH_SetErrorCode+0xc4>)
 8006266:	2210      	movs	r2, #16
 8006268:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800626a:	4b28      	ldr	r3, [pc, #160]	; (800630c <FLASH_SetErrorCode+0xc4>)
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	d008      	beq.n	8006288 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006276:	4b26      	ldr	r3, [pc, #152]	; (8006310 <FLASH_SetErrorCode+0xc8>)
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	f043 0308 	orr.w	r3, r3, #8
 800627e:	4a24      	ldr	r2, [pc, #144]	; (8006310 <FLASH_SetErrorCode+0xc8>)
 8006280:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006282:	4b22      	ldr	r3, [pc, #136]	; (800630c <FLASH_SetErrorCode+0xc4>)
 8006284:	2220      	movs	r2, #32
 8006286:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006288:	4b20      	ldr	r3, [pc, #128]	; (800630c <FLASH_SetErrorCode+0xc4>)
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d008      	beq.n	80062a6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006294:	4b1e      	ldr	r3, [pc, #120]	; (8006310 <FLASH_SetErrorCode+0xc8>)
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	f043 0304 	orr.w	r3, r3, #4
 800629c:	4a1c      	ldr	r2, [pc, #112]	; (8006310 <FLASH_SetErrorCode+0xc8>)
 800629e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80062a0:	4b1a      	ldr	r3, [pc, #104]	; (800630c <FLASH_SetErrorCode+0xc4>)
 80062a2:	2240      	movs	r2, #64	; 0x40
 80062a4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80062a6:	4b19      	ldr	r3, [pc, #100]	; (800630c <FLASH_SetErrorCode+0xc4>)
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d008      	beq.n	80062c4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80062b2:	4b17      	ldr	r3, [pc, #92]	; (8006310 <FLASH_SetErrorCode+0xc8>)
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	f043 0302 	orr.w	r3, r3, #2
 80062ba:	4a15      	ldr	r2, [pc, #84]	; (8006310 <FLASH_SetErrorCode+0xc8>)
 80062bc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80062be:	4b13      	ldr	r3, [pc, #76]	; (800630c <FLASH_SetErrorCode+0xc4>)
 80062c0:	2280      	movs	r2, #128	; 0x80
 80062c2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80062c4:	4b11      	ldr	r3, [pc, #68]	; (800630c <FLASH_SetErrorCode+0xc4>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d009      	beq.n	80062e4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80062d0:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <FLASH_SetErrorCode+0xc8>)
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	f043 0301 	orr.w	r3, r3, #1
 80062d8:	4a0d      	ldr	r2, [pc, #52]	; (8006310 <FLASH_SetErrorCode+0xc8>)
 80062da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80062dc:	4b0b      	ldr	r3, [pc, #44]	; (800630c <FLASH_SetErrorCode+0xc4>)
 80062de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062e2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80062e4:	4b09      	ldr	r3, [pc, #36]	; (800630c <FLASH_SetErrorCode+0xc4>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d008      	beq.n	8006302 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80062f0:	4b07      	ldr	r3, [pc, #28]	; (8006310 <FLASH_SetErrorCode+0xc8>)
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	f043 0320 	orr.w	r3, r3, #32
 80062f8:	4a05      	ldr	r2, [pc, #20]	; (8006310 <FLASH_SetErrorCode+0xc8>)
 80062fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80062fc:	4b03      	ldr	r3, [pc, #12]	; (800630c <FLASH_SetErrorCode+0xc4>)
 80062fe:	2202      	movs	r2, #2
 8006300:	60da      	str	r2, [r3, #12]
  }
}
 8006302:	bf00      	nop
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	40023c00 	.word	0x40023c00
 8006310:	2000b614 	.word	0x2000b614

08006314 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006326:	4b31      	ldr	r3, [pc, #196]	; (80063ec <HAL_FLASHEx_Erase+0xd8>)
 8006328:	7e1b      	ldrb	r3, [r3, #24]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d101      	bne.n	8006332 <HAL_FLASHEx_Erase+0x1e>
 800632e:	2302      	movs	r3, #2
 8006330:	e058      	b.n	80063e4 <HAL_FLASHEx_Erase+0xd0>
 8006332:	4b2e      	ldr	r3, [pc, #184]	; (80063ec <HAL_FLASHEx_Erase+0xd8>)
 8006334:	2201      	movs	r2, #1
 8006336:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006338:	f24c 3050 	movw	r0, #50000	; 0xc350
 800633c:	f7ff feaa 	bl	8006094 <FLASH_WaitForLastOperation>
 8006340:	4603      	mov	r3, r0
 8006342:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006344:	7bfb      	ldrb	r3, [r7, #15]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d148      	bne.n	80063dc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006350:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d115      	bne.n	8006386 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	b2da      	uxtb	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	4619      	mov	r1, r3
 8006366:	4610      	mov	r0, r2
 8006368:	f000 f844 	bl	80063f4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800636c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006370:	f7ff fe90 	bl	8006094 <FLASH_WaitForLastOperation>
 8006374:	4603      	mov	r3, r0
 8006376:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006378:	4b1d      	ldr	r3, [pc, #116]	; (80063f0 <HAL_FLASHEx_Erase+0xdc>)
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	4a1c      	ldr	r2, [pc, #112]	; (80063f0 <HAL_FLASHEx_Erase+0xdc>)
 800637e:	f023 0304 	bic.w	r3, r3, #4
 8006382:	6113      	str	r3, [r2, #16]
 8006384:	e028      	b.n	80063d8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	60bb      	str	r3, [r7, #8]
 800638c:	e01c      	b.n	80063c8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	4619      	mov	r1, r3
 8006396:	68b8      	ldr	r0, [r7, #8]
 8006398:	f000 f850 	bl	800643c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800639c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063a0:	f7ff fe78 	bl	8006094 <FLASH_WaitForLastOperation>
 80063a4:	4603      	mov	r3, r0
 80063a6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80063a8:	4b11      	ldr	r3, [pc, #68]	; (80063f0 <HAL_FLASHEx_Erase+0xdc>)
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	4a10      	ldr	r2, [pc, #64]	; (80063f0 <HAL_FLASHEx_Erase+0xdc>)
 80063ae:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80063b2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	601a      	str	r2, [r3, #0]
          break;
 80063c0:	e00a      	b.n	80063d8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	3301      	adds	r3, #1
 80063c6:	60bb      	str	r3, [r7, #8]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	4413      	add	r3, r2
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d3da      	bcc.n	800638e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80063d8:	f000 f878 	bl	80064cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80063dc:	4b03      	ldr	r3, [pc, #12]	; (80063ec <HAL_FLASHEx_Erase+0xd8>)
 80063de:	2200      	movs	r2, #0
 80063e0:	761a      	strb	r2, [r3, #24]

  return status;
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	2000b614 	.word	0x2000b614
 80063f0:	40023c00 	.word	0x40023c00

080063f4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	4603      	mov	r3, r0
 80063fc:	6039      	str	r1, [r7, #0]
 80063fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006400:	4b0d      	ldr	r3, [pc, #52]	; (8006438 <FLASH_MassErase+0x44>)
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	4a0c      	ldr	r2, [pc, #48]	; (8006438 <FLASH_MassErase+0x44>)
 8006406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800640a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <FLASH_MassErase+0x44>)
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	4a09      	ldr	r2, [pc, #36]	; (8006438 <FLASH_MassErase+0x44>)
 8006412:	f043 0304 	orr.w	r3, r3, #4
 8006416:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8006418:	4b07      	ldr	r3, [pc, #28]	; (8006438 <FLASH_MassErase+0x44>)
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	021b      	lsls	r3, r3, #8
 8006420:	4313      	orrs	r3, r2
 8006422:	4a05      	ldr	r2, [pc, #20]	; (8006438 <FLASH_MassErase+0x44>)
 8006424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006428:	6113      	str	r3, [r2, #16]
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40023c00 	.word	0x40023c00

0800643c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d102      	bne.n	8006458 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	e010      	b.n	800647a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d103      	bne.n	8006466 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800645e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	e009      	b.n	800647a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006466:	78fb      	ldrb	r3, [r7, #3]
 8006468:	2b02      	cmp	r3, #2
 800646a:	d103      	bne.n	8006474 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800646c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	e002      	b.n	800647a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006474:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006478:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800647a:	4b13      	ldr	r3, [pc, #76]	; (80064c8 <FLASH_Erase_Sector+0x8c>)
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	4a12      	ldr	r2, [pc, #72]	; (80064c8 <FLASH_Erase_Sector+0x8c>)
 8006480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006484:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006486:	4b10      	ldr	r3, [pc, #64]	; (80064c8 <FLASH_Erase_Sector+0x8c>)
 8006488:	691a      	ldr	r2, [r3, #16]
 800648a:	490f      	ldr	r1, [pc, #60]	; (80064c8 <FLASH_Erase_Sector+0x8c>)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006492:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <FLASH_Erase_Sector+0x8c>)
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	4a0c      	ldr	r2, [pc, #48]	; (80064c8 <FLASH_Erase_Sector+0x8c>)
 8006498:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800649c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800649e:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <FLASH_Erase_Sector+0x8c>)
 80064a0:	691a      	ldr	r2, [r3, #16]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	4313      	orrs	r3, r2
 80064a8:	4a07      	ldr	r2, [pc, #28]	; (80064c8 <FLASH_Erase_Sector+0x8c>)
 80064aa:	f043 0302 	orr.w	r3, r3, #2
 80064ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80064b0:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <FLASH_Erase_Sector+0x8c>)
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	4a04      	ldr	r2, [pc, #16]	; (80064c8 <FLASH_Erase_Sector+0x8c>)
 80064b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ba:	6113      	str	r3, [r2, #16]
}
 80064bc:	bf00      	nop
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	40023c00 	.word	0x40023c00

080064cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80064d0:	4b20      	ldr	r3, [pc, #128]	; (8006554 <FLASH_FlushCaches+0x88>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d017      	beq.n	800650c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80064dc:	4b1d      	ldr	r3, [pc, #116]	; (8006554 <FLASH_FlushCaches+0x88>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1c      	ldr	r2, [pc, #112]	; (8006554 <FLASH_FlushCaches+0x88>)
 80064e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064e6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80064e8:	4b1a      	ldr	r3, [pc, #104]	; (8006554 <FLASH_FlushCaches+0x88>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a19      	ldr	r2, [pc, #100]	; (8006554 <FLASH_FlushCaches+0x88>)
 80064ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	4b17      	ldr	r3, [pc, #92]	; (8006554 <FLASH_FlushCaches+0x88>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a16      	ldr	r2, [pc, #88]	; (8006554 <FLASH_FlushCaches+0x88>)
 80064fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064fe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006500:	4b14      	ldr	r3, [pc, #80]	; (8006554 <FLASH_FlushCaches+0x88>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a13      	ldr	r2, [pc, #76]	; (8006554 <FLASH_FlushCaches+0x88>)
 8006506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800650a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800650c:	4b11      	ldr	r3, [pc, #68]	; (8006554 <FLASH_FlushCaches+0x88>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006514:	2b00      	cmp	r3, #0
 8006516:	d017      	beq.n	8006548 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006518:	4b0e      	ldr	r3, [pc, #56]	; (8006554 <FLASH_FlushCaches+0x88>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a0d      	ldr	r2, [pc, #52]	; (8006554 <FLASH_FlushCaches+0x88>)
 800651e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006522:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006524:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <FLASH_FlushCaches+0x88>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a0a      	ldr	r2, [pc, #40]	; (8006554 <FLASH_FlushCaches+0x88>)
 800652a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	4b08      	ldr	r3, [pc, #32]	; (8006554 <FLASH_FlushCaches+0x88>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a07      	ldr	r2, [pc, #28]	; (8006554 <FLASH_FlushCaches+0x88>)
 8006536:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800653a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800653c:	4b05      	ldr	r3, [pc, #20]	; (8006554 <FLASH_FlushCaches+0x88>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a04      	ldr	r2, [pc, #16]	; (8006554 <FLASH_FlushCaches+0x88>)
 8006542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006546:	6013      	str	r3, [r2, #0]
  }
}
 8006548:	bf00      	nop
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40023c00 	.word	0x40023c00

08006558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006558:	b480      	push	{r7}
 800655a:	b089      	sub	sp, #36	; 0x24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006566:	2300      	movs	r3, #0
 8006568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800656a:	2300      	movs	r3, #0
 800656c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800656e:	2300      	movs	r3, #0
 8006570:	61fb      	str	r3, [r7, #28]
 8006572:	e159      	b.n	8006828 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006574:	2201      	movs	r2, #1
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	fa02 f303 	lsl.w	r3, r2, r3
 800657c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	4013      	ands	r3, r2
 8006586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	429a      	cmp	r2, r3
 800658e:	f040 8148 	bne.w	8006822 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	2b01      	cmp	r3, #1
 800659c:	d005      	beq.n	80065aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d130      	bne.n	800660c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	2203      	movs	r2, #3
 80065b6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ba:	43db      	mvns	r3, r3
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	4013      	ands	r3, r2
 80065c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065e0:	2201      	movs	r2, #1
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	fa02 f303 	lsl.w	r3, r2, r3
 80065e8:	43db      	mvns	r3, r3
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	4013      	ands	r3, r2
 80065ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	091b      	lsrs	r3, r3, #4
 80065f6:	f003 0201 	and.w	r2, r3, #1
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	4313      	orrs	r3, r2
 8006604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f003 0303 	and.w	r3, r3, #3
 8006614:	2b03      	cmp	r3, #3
 8006616:	d017      	beq.n	8006648 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	2203      	movs	r2, #3
 8006624:	fa02 f303 	lsl.w	r3, r2, r3
 8006628:	43db      	mvns	r3, r3
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	4013      	ands	r3, r2
 800662e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	4313      	orrs	r3, r2
 8006640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f003 0303 	and.w	r3, r3, #3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d123      	bne.n	800669c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	08da      	lsrs	r2, r3, #3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3208      	adds	r2, #8
 800665c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	220f      	movs	r2, #15
 800666c:	fa02 f303 	lsl.w	r3, r2, r3
 8006670:	43db      	mvns	r3, r3
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	4013      	ands	r3, r2
 8006676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	691a      	ldr	r2, [r3, #16]
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	4313      	orrs	r3, r2
 800668c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	08da      	lsrs	r2, r3, #3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3208      	adds	r2, #8
 8006696:	69b9      	ldr	r1, [r7, #24]
 8006698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	2203      	movs	r2, #3
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	43db      	mvns	r3, r3
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	4013      	ands	r3, r2
 80066b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f003 0203 	and.w	r2, r3, #3
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	fa02 f303 	lsl.w	r3, r2, r3
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 80a2 	beq.w	8006822 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	4b57      	ldr	r3, [pc, #348]	; (8006840 <HAL_GPIO_Init+0x2e8>)
 80066e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e6:	4a56      	ldr	r2, [pc, #344]	; (8006840 <HAL_GPIO_Init+0x2e8>)
 80066e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066ec:	6453      	str	r3, [r2, #68]	; 0x44
 80066ee:	4b54      	ldr	r3, [pc, #336]	; (8006840 <HAL_GPIO_Init+0x2e8>)
 80066f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066fa:	4a52      	ldr	r2, [pc, #328]	; (8006844 <HAL_GPIO_Init+0x2ec>)
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	089b      	lsrs	r3, r3, #2
 8006700:	3302      	adds	r3, #2
 8006702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	f003 0303 	and.w	r3, r3, #3
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	220f      	movs	r2, #15
 8006712:	fa02 f303 	lsl.w	r3, r2, r3
 8006716:	43db      	mvns	r3, r3
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	4013      	ands	r3, r2
 800671c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a49      	ldr	r2, [pc, #292]	; (8006848 <HAL_GPIO_Init+0x2f0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d019      	beq.n	800675a <HAL_GPIO_Init+0x202>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a48      	ldr	r2, [pc, #288]	; (800684c <HAL_GPIO_Init+0x2f4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d013      	beq.n	8006756 <HAL_GPIO_Init+0x1fe>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a47      	ldr	r2, [pc, #284]	; (8006850 <HAL_GPIO_Init+0x2f8>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00d      	beq.n	8006752 <HAL_GPIO_Init+0x1fa>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a46      	ldr	r2, [pc, #280]	; (8006854 <HAL_GPIO_Init+0x2fc>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d007      	beq.n	800674e <HAL_GPIO_Init+0x1f6>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a45      	ldr	r2, [pc, #276]	; (8006858 <HAL_GPIO_Init+0x300>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d101      	bne.n	800674a <HAL_GPIO_Init+0x1f2>
 8006746:	2304      	movs	r3, #4
 8006748:	e008      	b.n	800675c <HAL_GPIO_Init+0x204>
 800674a:	2307      	movs	r3, #7
 800674c:	e006      	b.n	800675c <HAL_GPIO_Init+0x204>
 800674e:	2303      	movs	r3, #3
 8006750:	e004      	b.n	800675c <HAL_GPIO_Init+0x204>
 8006752:	2302      	movs	r3, #2
 8006754:	e002      	b.n	800675c <HAL_GPIO_Init+0x204>
 8006756:	2301      	movs	r3, #1
 8006758:	e000      	b.n	800675c <HAL_GPIO_Init+0x204>
 800675a:	2300      	movs	r3, #0
 800675c:	69fa      	ldr	r2, [r7, #28]
 800675e:	f002 0203 	and.w	r2, r2, #3
 8006762:	0092      	lsls	r2, r2, #2
 8006764:	4093      	lsls	r3, r2
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	4313      	orrs	r3, r2
 800676a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800676c:	4935      	ldr	r1, [pc, #212]	; (8006844 <HAL_GPIO_Init+0x2ec>)
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	089b      	lsrs	r3, r3, #2
 8006772:	3302      	adds	r3, #2
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800677a:	4b38      	ldr	r3, [pc, #224]	; (800685c <HAL_GPIO_Init+0x304>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	43db      	mvns	r3, r3
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	4013      	ands	r3, r2
 8006788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	4313      	orrs	r3, r2
 800679c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800679e:	4a2f      	ldr	r2, [pc, #188]	; (800685c <HAL_GPIO_Init+0x304>)
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80067a4:	4b2d      	ldr	r3, [pc, #180]	; (800685c <HAL_GPIO_Init+0x304>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	43db      	mvns	r3, r3
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	4013      	ands	r3, r2
 80067b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80067c8:	4a24      	ldr	r2, [pc, #144]	; (800685c <HAL_GPIO_Init+0x304>)
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067ce:	4b23      	ldr	r3, [pc, #140]	; (800685c <HAL_GPIO_Init+0x304>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	43db      	mvns	r3, r3
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	4013      	ands	r3, r2
 80067dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80067f2:	4a1a      	ldr	r2, [pc, #104]	; (800685c <HAL_GPIO_Init+0x304>)
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80067f8:	4b18      	ldr	r3, [pc, #96]	; (800685c <HAL_GPIO_Init+0x304>)
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	43db      	mvns	r3, r3
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	4013      	ands	r3, r2
 8006806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d003      	beq.n	800681c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800681c:	4a0f      	ldr	r2, [pc, #60]	; (800685c <HAL_GPIO_Init+0x304>)
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	3301      	adds	r3, #1
 8006826:	61fb      	str	r3, [r7, #28]
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	2b0f      	cmp	r3, #15
 800682c:	f67f aea2 	bls.w	8006574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	3724      	adds	r7, #36	; 0x24
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	40023800 	.word	0x40023800
 8006844:	40013800 	.word	0x40013800
 8006848:	40020000 	.word	0x40020000
 800684c:	40020400 	.word	0x40020400
 8006850:	40020800 	.word	0x40020800
 8006854:	40020c00 	.word	0x40020c00
 8006858:	40021000 	.word	0x40021000
 800685c:	40013c00 	.word	0x40013c00

08006860 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	460b      	mov	r3, r1
 800686a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	887b      	ldrh	r3, [r7, #2]
 8006872:	4013      	ands	r3, r2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006878:	2301      	movs	r3, #1
 800687a:	73fb      	strb	r3, [r7, #15]
 800687c:	e001      	b.n	8006882 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800687e:	2300      	movs	r3, #0
 8006880:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006882:	7bfb      	ldrb	r3, [r7, #15]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	807b      	strh	r3, [r7, #2]
 800689c:	4613      	mov	r3, r2
 800689e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068a0:	787b      	ldrb	r3, [r7, #1]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80068a6:	887a      	ldrh	r2, [r7, #2]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80068ac:	e003      	b.n	80068b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80068ae:	887b      	ldrh	r3, [r7, #2]
 80068b0:	041a      	lsls	r2, r3, #16
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	619a      	str	r2, [r3, #24]
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b085      	sub	sp, #20
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	460b      	mov	r3, r1
 80068cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80068d4:	887a      	ldrh	r2, [r7, #2]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	4013      	ands	r3, r2
 80068da:	041a      	lsls	r2, r3, #16
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	43d9      	mvns	r1, r3
 80068e0:	887b      	ldrh	r3, [r7, #2]
 80068e2:	400b      	ands	r3, r1
 80068e4:	431a      	orrs	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	619a      	str	r2, [r3, #24]
}
 80068ea:	bf00      	nop
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
	...

080068f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e12b      	b.n	8006b62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d106      	bne.n	8006924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7fc ff76 	bl	8003810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2224      	movs	r2, #36	; 0x24
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 0201 	bic.w	r2, r2, #1
 800693a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800694a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800695a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800695c:	f003 f954 	bl	8009c08 <HAL_RCC_GetPCLK1Freq>
 8006960:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	4a81      	ldr	r2, [pc, #516]	; (8006b6c <HAL_I2C_Init+0x274>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d807      	bhi.n	800697c <HAL_I2C_Init+0x84>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4a80      	ldr	r2, [pc, #512]	; (8006b70 <HAL_I2C_Init+0x278>)
 8006970:	4293      	cmp	r3, r2
 8006972:	bf94      	ite	ls
 8006974:	2301      	movls	r3, #1
 8006976:	2300      	movhi	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	e006      	b.n	800698a <HAL_I2C_Init+0x92>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4a7d      	ldr	r2, [pc, #500]	; (8006b74 <HAL_I2C_Init+0x27c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	bf94      	ite	ls
 8006984:	2301      	movls	r3, #1
 8006986:	2300      	movhi	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e0e7      	b.n	8006b62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4a78      	ldr	r2, [pc, #480]	; (8006b78 <HAL_I2C_Init+0x280>)
 8006996:	fba2 2303 	umull	r2, r3, r2, r3
 800699a:	0c9b      	lsrs	r3, r3, #18
 800699c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	4a6a      	ldr	r2, [pc, #424]	; (8006b6c <HAL_I2C_Init+0x274>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d802      	bhi.n	80069cc <HAL_I2C_Init+0xd4>
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	3301      	adds	r3, #1
 80069ca:	e009      	b.n	80069e0 <HAL_I2C_Init+0xe8>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80069d2:	fb02 f303 	mul.w	r3, r2, r3
 80069d6:	4a69      	ldr	r2, [pc, #420]	; (8006b7c <HAL_I2C_Init+0x284>)
 80069d8:	fba2 2303 	umull	r2, r3, r2, r3
 80069dc:	099b      	lsrs	r3, r3, #6
 80069de:	3301      	adds	r3, #1
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6812      	ldr	r2, [r2, #0]
 80069e4:	430b      	orrs	r3, r1
 80069e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80069f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	495c      	ldr	r1, [pc, #368]	; (8006b6c <HAL_I2C_Init+0x274>)
 80069fc:	428b      	cmp	r3, r1
 80069fe:	d819      	bhi.n	8006a34 <HAL_I2C_Init+0x13c>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	1e59      	subs	r1, r3, #1
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a0e:	1c59      	adds	r1, r3, #1
 8006a10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a14:	400b      	ands	r3, r1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <HAL_I2C_Init+0x138>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	1e59      	subs	r1, r3, #1
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a28:	3301      	adds	r3, #1
 8006a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a2e:	e051      	b.n	8006ad4 <HAL_I2C_Init+0x1dc>
 8006a30:	2304      	movs	r3, #4
 8006a32:	e04f      	b.n	8006ad4 <HAL_I2C_Init+0x1dc>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d111      	bne.n	8006a60 <HAL_I2C_Init+0x168>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	1e58      	subs	r0, r3, #1
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6859      	ldr	r1, [r3, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	440b      	add	r3, r1
 8006a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a4e:	3301      	adds	r3, #1
 8006a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	bf0c      	ite	eq
 8006a58:	2301      	moveq	r3, #1
 8006a5a:	2300      	movne	r3, #0
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	e012      	b.n	8006a86 <HAL_I2C_Init+0x18e>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	1e58      	subs	r0, r3, #1
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6859      	ldr	r1, [r3, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	440b      	add	r3, r1
 8006a6e:	0099      	lsls	r1, r3, #2
 8006a70:	440b      	add	r3, r1
 8006a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a76:	3301      	adds	r3, #1
 8006a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	bf0c      	ite	eq
 8006a80:	2301      	moveq	r3, #1
 8006a82:	2300      	movne	r3, #0
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <HAL_I2C_Init+0x196>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e022      	b.n	8006ad4 <HAL_I2C_Init+0x1dc>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10e      	bne.n	8006ab4 <HAL_I2C_Init+0x1bc>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	1e58      	subs	r0, r3, #1
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6859      	ldr	r1, [r3, #4]
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	440b      	add	r3, r1
 8006aa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab2:	e00f      	b.n	8006ad4 <HAL_I2C_Init+0x1dc>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	1e58      	subs	r0, r3, #1
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6859      	ldr	r1, [r3, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	440b      	add	r3, r1
 8006ac2:	0099      	lsls	r1, r3, #2
 8006ac4:	440b      	add	r3, r1
 8006ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006aca:	3301      	adds	r3, #1
 8006acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ad0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	6809      	ldr	r1, [r1, #0]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	69da      	ldr	r2, [r3, #28]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	431a      	orrs	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006b02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	6911      	ldr	r1, [r2, #16]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	68d2      	ldr	r2, [r2, #12]
 8006b0e:	4311      	orrs	r1, r2
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	430b      	orrs	r3, r1
 8006b16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	695a      	ldr	r2, [r3, #20]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f042 0201 	orr.w	r2, r2, #1
 8006b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	000186a0 	.word	0x000186a0
 8006b70:	001e847f 	.word	0x001e847f
 8006b74:	003d08ff 	.word	0x003d08ff
 8006b78:	431bde83 	.word	0x431bde83
 8006b7c:	10624dd3 	.word	0x10624dd3

08006b80 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08c      	sub	sp, #48	; 0x30
 8006b84:	af02      	add	r7, sp, #8
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	4608      	mov	r0, r1
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	4603      	mov	r3, r0
 8006b90:	817b      	strh	r3, [r7, #10]
 8006b92:	460b      	mov	r3, r1
 8006b94:	813b      	strh	r3, [r7, #8]
 8006b96:	4613      	mov	r3, r2
 8006b98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b9a:	f7fe f857 	bl	8004c4c <HAL_GetTick>
 8006b9e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b20      	cmp	r3, #32
 8006bae:	f040 8176 	bne.w	8006e9e <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006bb2:	4b95      	ldr	r3, [pc, #596]	; (8006e08 <HAL_I2C_Mem_Read_DMA+0x288>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	08db      	lsrs	r3, r3, #3
 8006bb8:	4a94      	ldr	r2, [pc, #592]	; (8006e0c <HAL_I2C_Mem_Read_DMA+0x28c>)
 8006bba:	fba2 2303 	umull	r2, r3, r2, r3
 8006bbe:	0a1a      	lsrs	r2, r3, #8
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	009a      	lsls	r2, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d116      	bne.n	8006c06 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2220      	movs	r2, #32
 8006be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	f043 0220 	orr.w	r2, r3, #32
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e14c      	b.n	8006ea0 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d0db      	beq.n	8006bcc <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d101      	bne.n	8006c22 <HAL_I2C_Mem_Read_DMA+0xa2>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e13e      	b.n	8006ea0 <HAL_I2C_Mem_Read_DMA+0x320>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d007      	beq.n	8006c48 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f042 0201 	orr.w	r2, r2, #1
 8006c46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2222      	movs	r2, #34	; 0x22
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2240      	movs	r2, #64	; 0x40
 8006c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006c78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4a62      	ldr	r2, [pc, #392]	; (8006e10 <HAL_I2C_Mem_Read_DMA+0x290>)
 8006c88:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006c8a:	897a      	ldrh	r2, [r7, #10]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8006c90:	893a      	ldrh	r2, [r7, #8]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006c96:	88fa      	ldrh	r2, [r7, #6]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 80cc 	beq.w	8006e44 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d02d      	beq.n	8006d10 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb8:	4a56      	ldr	r2, [pc, #344]	; (8006e14 <HAL_I2C_Mem_Read_DMA+0x294>)
 8006cba:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	4a55      	ldr	r2, [pc, #340]	; (8006e18 <HAL_I2C_Mem_Read_DMA+0x298>)
 8006cc2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	2200      	movs	r2, #0
 8006cca:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	2200      	movs	r2, #0
 8006cda:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3310      	adds	r3, #16
 8006cee:	4619      	mov	r1, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfa:	f7fe fde7 	bl	80058cc <HAL_DMA_Start_IT>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006d04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f040 8087 	bne.w	8006e1c <HAL_I2C_Mem_Read_DMA+0x29c>
 8006d0e:	e013      	b.n	8006d38 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e0b3      	b.n	8006ea0 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006d38:	88f8      	ldrh	r0, [r7, #6]
 8006d3a:	893a      	ldrh	r2, [r7, #8]
 8006d3c:	8979      	ldrh	r1, [r7, #10]
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	9301      	str	r3, [sp, #4]
 8006d42:	2323      	movs	r3, #35	; 0x23
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	4603      	mov	r3, r0
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f001 ff07 	bl	8008b5c <I2C_RequestMemoryRead>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d023      	beq.n	8006d9c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fe fe7f 	bl	8005a5c <HAL_DMA_Abort_IT>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d68:	2200      	movs	r2, #0
 8006d6a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d7a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0201 	bic.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e081      	b.n	8006ea0 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d108      	bne.n	8006db6 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	e007      	b.n	8006dc6 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006dc4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61bb      	str	r3, [r7, #24]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006df2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e02:	605a      	str	r2, [r3, #4]
 8006e04:	e049      	b.n	8006e9a <HAL_I2C_Mem_Read_DMA+0x31a>
 8006e06:	bf00      	nop
 8006e08:	2000000c 	.word	0x2000000c
 8006e0c:	14f8b589 	.word	0x14f8b589
 8006e10:	ffff0000 	.word	0xffff0000
 8006e14:	08008d2d 	.word	0x08008d2d
 8006e18:	08008ed7 	.word	0x08008ed7
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e30:	f043 0210 	orr.w	r2, r3, #16
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e02d      	b.n	8006ea0 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006e44:	88f8      	ldrh	r0, [r7, #6]
 8006e46:	893a      	ldrh	r2, [r7, #8]
 8006e48:	8979      	ldrh	r1, [r7, #10]
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	9301      	str	r3, [sp, #4]
 8006e4e:	2323      	movs	r3, #35	; 0x23
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	4603      	mov	r3, r0
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f001 fe81 	bl	8008b5c <I2C_RequestMemoryRead>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e01d      	b.n	8006ea0 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e64:	2300      	movs	r3, #0
 8006e66:	617b      	str	r3, [r7, #20]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	617b      	str	r3, [r7, #20]
 8006e78:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e88:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e000      	b.n	8006ea0 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8006e9e:	2302      	movs	r3, #2
  }
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3728      	adds	r7, #40	; 0x28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ec4:	2b28      	cmp	r3, #40	; 0x28
 8006ec6:	f040 811e 	bne.w	8007106 <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 8006ed0:	88fb      	ldrh	r3, [r7, #6]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e116      	b.n	8007108 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d101      	bne.n	8006ee8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e10f      	b.n	8007108 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006efe:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b2a      	cmp	r3, #42	; 0x2a
 8006f0a:	d127      	bne.n	8006f5c <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f1a:	d14c      	bne.n	8006fb6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d048      	beq.n	8006fb6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f32:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f38:	4a75      	ldr	r2, [pc, #468]	; (8007110 <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
 8006f3a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe fd8b 	bl	8005a5c <HAL_DMA_Abort_IT>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d034      	beq.n	8006fb6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f56:	4610      	mov	r0, r2
 8006f58:	4798      	blx	r3
 8006f5a:	e02c      	b.n	8006fb6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b29      	cmp	r3, #41	; 0x29
 8006f66:	d126      	bne.n	8006fb6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f76:	d11e      	bne.n	8006fb6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f86:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d012      	beq.n	8006fb6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f94:	4a5e      	ldr	r2, [pc, #376]	; (8007110 <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
 8006f96:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe fd5d 	bl	8005a5c <HAL_DMA_Abort_IT>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d006      	beq.n	8006fb6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d007      	beq.n	8006fd4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f042 0201 	orr.w	r2, r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fe2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2229      	movs	r2, #41	; 0x29
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	88fa      	ldrh	r2, [r7, #6]
 8007004:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800700a:	b29a      	uxth	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701a:	2b00      	cmp	r3, #0
 800701c:	d022      	beq.n	8007064 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007022:	4a3c      	ldr	r2, [pc, #240]	; (8007114 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26c>)
 8007024:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702a:	4a3b      	ldr	r2, [pc, #236]	; (8007118 <HAL_I2C_Slave_Seq_Transmit_DMA+0x270>)
 800702c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007032:	2200      	movs	r2, #0
 8007034:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800703a:	2200      	movs	r2, #0
 800703c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	4619      	mov	r1, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3310      	adds	r3, #16
 800704e:	461a      	mov	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007054:	f7fe fc3a 	bl	80058cc <HAL_DMA_Start_IT>
 8007058:	4603      	mov	r3, r0
 800705a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800705c:	7dfb      	ldrb	r3, [r7, #23]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d13d      	bne.n	80070de <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 8007062:	e013      	b.n	800708c <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2228      	movs	r2, #40	; 0x28
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007078:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e03d      	b.n	8007108 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800709a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800709c:	2300      	movs	r3, #0
 800709e:	613b      	str	r3, [r7, #16]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	613b      	str	r3, [r7, #16]
 80070b0:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80070c8:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070d8:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	e014      	b.n	8007108 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	f043 0210 	orr.w	r2, r3, #16
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e000      	b.n	8007108 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 8007106:	2302      	movs	r3, #2
  }
}
 8007108:	4618      	mov	r0, r3
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	08008f51 	.word	0x08008f51
 8007114:	08008d2d 	.word	0x08008d2d
 8007118:	08008ed7 	.word	0x08008ed7

0800711c <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	4613      	mov	r3, r2
 800712a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007132:	b2db      	uxtb	r3, r3
 8007134:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007138:	2b28      	cmp	r3, #40	; 0x28
 800713a:	f040 811e 	bne.w	800737a <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 8007144:	88fb      	ldrh	r3, [r7, #6]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e116      	b.n	800737c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007154:	2b01      	cmp	r3, #1
 8007156:	d101      	bne.n	800715c <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 8007158:	2302      	movs	r3, #2
 800715a:	e10f      	b.n	800737c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007172:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b2a      	cmp	r3, #42	; 0x2a
 800717e:	d127      	bne.n	80071d0 <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800718a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800718e:	d14c      	bne.n	800722a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	2b00      	cmp	r3, #0
 8007196:	d048      	beq.n	800722a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071a6:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	4a75      	ldr	r2, [pc, #468]	; (8007384 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 80071ae:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fe fc51 	bl	8005a5c <HAL_DMA_Abort_IT>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d034      	beq.n	800722a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071ca:	4610      	mov	r0, r2
 80071cc:	4798      	blx	r3
 80071ce:	e02c      	b.n	800722a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b29      	cmp	r3, #41	; 0x29
 80071da:	d126      	bne.n	800722a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ea:	d11e      	bne.n	800722a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071fa:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007200:	2b00      	cmp	r3, #0
 8007202:	d012      	beq.n	800722a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007208:	4a5e      	ldr	r2, [pc, #376]	; (8007384 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 800720a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007210:	4618      	mov	r0, r3
 8007212:	f7fe fc23 	bl	8005a5c <HAL_DMA_Abort_IT>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d006      	beq.n	800722a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007226:	4610      	mov	r0, r2
 8007228:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b01      	cmp	r3, #1
 8007236:	d007      	beq.n	8007248 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0201 	orr.w	r2, r2, #1
 8007246:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007256:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	222a      	movs	r2, #42	; 0x2a
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2220      	movs	r2, #32
 8007264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	88fa      	ldrh	r2, [r7, #6]
 8007278:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727e:	b29a      	uxth	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	2b00      	cmp	r3, #0
 8007290:	d022      	beq.n	80072d8 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007296:	4a3c      	ldr	r2, [pc, #240]	; (8007388 <HAL_I2C_Slave_Seq_Receive_DMA+0x26c>)
 8007298:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	4a3b      	ldr	r2, [pc, #236]	; (800738c <HAL_I2C_Slave_Seq_Receive_DMA+0x270>)
 80072a0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	2200      	movs	r2, #0
 80072a8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ae:	2200      	movs	r2, #0
 80072b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3310      	adds	r3, #16
 80072bc:	4619      	mov	r1, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c2:	461a      	mov	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c8:	f7fe fb00 	bl	80058cc <HAL_DMA_Start_IT>
 80072cc:	4603      	mov	r3, r0
 80072ce:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80072d0:	7dfb      	ldrb	r3, [r7, #23]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d13d      	bne.n	8007352 <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 80072d6:	e013      	b.n	8007300 <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2228      	movs	r2, #40	; 0x28
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e03d      	b.n	800737c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800730e:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007310:	2300      	movs	r3, #0
 8007312:	613b      	str	r3, [r7, #16]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	613b      	str	r3, [r7, #16]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800733c:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800734c:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	e014      	b.n	800737c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2220      	movs	r2, #32
 8007356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007366:	f043 0210 	orr.w	r2, r3, #16
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e000      	b.n	800737c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800737a:	2302      	movs	r3, #2
  }
}
 800737c:	4618      	mov	r0, r3
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	08008f51 	.word	0x08008f51
 8007388:	08008d2d 	.word	0x08008d2d
 800738c:	08008ed7 	.word	0x08008ed7

08007390 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b20      	cmp	r3, #32
 80073a2:	d124      	bne.n	80073ee <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2228      	movs	r2, #40	; 0x28
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d007      	beq.n	80073ca <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f042 0201 	orr.w	r2, r2, #1
 80073c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073d8:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80073e8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	e000      	b.n	80073f0 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80073ee:	2302      	movs	r3, #2
  }
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b088      	sub	sp, #32
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007414:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800741c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007424:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	2b10      	cmp	r3, #16
 800742a:	d003      	beq.n	8007434 <HAL_I2C_EV_IRQHandler+0x38>
 800742c:	7bfb      	ldrb	r3, [r7, #15]
 800742e:	2b40      	cmp	r3, #64	; 0x40
 8007430:	f040 80c1 	bne.w	80075b6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10d      	bne.n	800746a <HAL_I2C_EV_IRQHandler+0x6e>
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007454:	d003      	beq.n	800745e <HAL_I2C_EV_IRQHandler+0x62>
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800745c:	d101      	bne.n	8007462 <HAL_I2C_EV_IRQHandler+0x66>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <HAL_I2C_EV_IRQHandler+0x68>
 8007462:	2300      	movs	r3, #0
 8007464:	2b01      	cmp	r3, #1
 8007466:	f000 8132 	beq.w	80076ce <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00c      	beq.n	800748e <HAL_I2C_EV_IRQHandler+0x92>
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	0a5b      	lsrs	r3, r3, #9
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	2b00      	cmp	r3, #0
 800747e:	d006      	beq.n	800748e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f001 ff86 	bl	8009392 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fd4d 	bl	8007f26 <I2C_Master_SB>
 800748c:	e092      	b.n	80075b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	08db      	lsrs	r3, r3, #3
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d009      	beq.n	80074ae <HAL_I2C_EV_IRQHandler+0xb2>
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	0a5b      	lsrs	r3, r3, #9
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fdc3 	bl	8008032 <I2C_Master_ADD10>
 80074ac:	e082      	b.n	80075b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	085b      	lsrs	r3, r3, #1
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d009      	beq.n	80074ce <HAL_I2C_EV_IRQHandler+0xd2>
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	0a5b      	lsrs	r3, r3, #9
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fddd 	bl	8008086 <I2C_Master_ADDR>
 80074cc:	e072      	b.n	80075b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	089b      	lsrs	r3, r3, #2
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d03b      	beq.n	8007552 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074e8:	f000 80f3 	beq.w	80076d2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	09db      	lsrs	r3, r3, #7
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00f      	beq.n	8007518 <HAL_I2C_EV_IRQHandler+0x11c>
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	0a9b      	lsrs	r3, r3, #10
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b00      	cmp	r3, #0
 8007502:	d009      	beq.n	8007518 <HAL_I2C_EV_IRQHandler+0x11c>
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	089b      	lsrs	r3, r3, #2
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	d103      	bne.n	8007518 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f9c7 	bl	80078a4 <I2C_MasterTransmit_TXE>
 8007516:	e04d      	b.n	80075b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	089b      	lsrs	r3, r3, #2
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 80d6 	beq.w	80076d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	0a5b      	lsrs	r3, r3, #9
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 80cf 	beq.w	80076d2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007534:	7bbb      	ldrb	r3, [r7, #14]
 8007536:	2b21      	cmp	r3, #33	; 0x21
 8007538:	d103      	bne.n	8007542 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fa4e 	bl	80079dc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007540:	e0c7      	b.n	80076d2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	2b40      	cmp	r3, #64	; 0x40
 8007546:	f040 80c4 	bne.w	80076d2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fabc 	bl	8007ac8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007550:	e0bf      	b.n	80076d2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800755c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007560:	f000 80b7 	beq.w	80076d2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	099b      	lsrs	r3, r3, #6
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00f      	beq.n	8007590 <HAL_I2C_EV_IRQHandler+0x194>
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	0a9b      	lsrs	r3, r3, #10
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	d009      	beq.n	8007590 <HAL_I2C_EV_IRQHandler+0x194>
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	089b      	lsrs	r3, r3, #2
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	d103      	bne.n	8007590 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fb31 	bl	8007bf0 <I2C_MasterReceive_RXNE>
 800758e:	e011      	b.n	80075b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	089b      	lsrs	r3, r3, #2
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 809a 	beq.w	80076d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	0a5b      	lsrs	r3, r3, #9
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 8093 	beq.w	80076d2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fbd0 	bl	8007d52 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80075b2:	e08e      	b.n	80076d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80075b4:	e08d      	b.n	80076d2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d004      	beq.n	80075c8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	61fb      	str	r3, [r7, #28]
 80075c6:	e007      	b.n	80075d8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	085b      	lsrs	r3, r3, #1
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d012      	beq.n	800760a <HAL_I2C_EV_IRQHandler+0x20e>
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	0a5b      	lsrs	r3, r3, #9
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00c      	beq.n	800760a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007600:	69b9      	ldr	r1, [r7, #24]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 ff8e 	bl	8008524 <I2C_Slave_ADDR>
 8007608:	e066      	b.n	80076d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	091b      	lsrs	r3, r3, #4
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d009      	beq.n	800762a <HAL_I2C_EV_IRQHandler+0x22e>
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	0a5b      	lsrs	r3, r3, #9
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 ffc8 	bl	80085b8 <I2C_Slave_STOPF>
 8007628:	e056      	b.n	80076d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800762a:	7bbb      	ldrb	r3, [r7, #14]
 800762c:	2b21      	cmp	r3, #33	; 0x21
 800762e:	d002      	beq.n	8007636 <HAL_I2C_EV_IRQHandler+0x23a>
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	2b29      	cmp	r3, #41	; 0x29
 8007634:	d125      	bne.n	8007682 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	09db      	lsrs	r3, r3, #7
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00f      	beq.n	8007662 <HAL_I2C_EV_IRQHandler+0x266>
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	0a9b      	lsrs	r3, r3, #10
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <HAL_I2C_EV_IRQHandler+0x266>
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	089b      	lsrs	r3, r3, #2
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d103      	bne.n	8007662 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fea4 	bl	80083a8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007660:	e039      	b.n	80076d6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	089b      	lsrs	r3, r3, #2
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d033      	beq.n	80076d6 <HAL_I2C_EV_IRQHandler+0x2da>
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	0a5b      	lsrs	r3, r3, #9
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d02d      	beq.n	80076d6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fed1 	bl	8008422 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007680:	e029      	b.n	80076d6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	099b      	lsrs	r3, r3, #6
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00f      	beq.n	80076ae <HAL_I2C_EV_IRQHandler+0x2b2>
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	0a9b      	lsrs	r3, r3, #10
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d009      	beq.n	80076ae <HAL_I2C_EV_IRQHandler+0x2b2>
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	089b      	lsrs	r3, r3, #2
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d103      	bne.n	80076ae <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fedc 	bl	8008464 <I2C_SlaveReceive_RXNE>
 80076ac:	e014      	b.n	80076d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	089b      	lsrs	r3, r3, #2
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00e      	beq.n	80076d8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	0a5b      	lsrs	r3, r3, #9
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d008      	beq.n	80076d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 ff0a 	bl	80084e0 <I2C_SlaveReceive_BTF>
 80076cc:	e004      	b.n	80076d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80076ce:	bf00      	nop
 80076d0:	e002      	b.n	80076d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076d2:	bf00      	nop
 80076d4:	e000      	b.n	80076d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80076d6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80076d8:	3720      	adds	r7, #32
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b08a      	sub	sp, #40	; 0x28
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80076f6:	2300      	movs	r3, #0
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007700:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	0a1b      	lsrs	r3, r3, #8
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00e      	beq.n	800772c <HAL_I2C_ER_IRQHandler+0x4e>
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	0a1b      	lsrs	r3, r3, #8
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d008      	beq.n	800772c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	f043 0301 	orr.w	r3, r3, #1
 8007720:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800772a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	0a5b      	lsrs	r3, r3, #9
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00e      	beq.n	8007756 <HAL_I2C_ER_IRQHandler+0x78>
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	0a1b      	lsrs	r3, r3, #8
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b00      	cmp	r3, #0
 8007742:	d008      	beq.n	8007756 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	f043 0302 	orr.w	r3, r3, #2
 800774a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007754:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	0a9b      	lsrs	r3, r3, #10
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d03f      	beq.n	80077e2 <HAL_I2C_ER_IRQHandler+0x104>
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	0a1b      	lsrs	r3, r3, #8
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	2b00      	cmp	r3, #0
 800776c:	d039      	beq.n	80077e2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800776e:	7efb      	ldrb	r3, [r7, #27]
 8007770:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007776:	b29b      	uxth	r3, r3
 8007778:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007780:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007786:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007788:	7ebb      	ldrb	r3, [r7, #26]
 800778a:	2b20      	cmp	r3, #32
 800778c:	d112      	bne.n	80077b4 <HAL_I2C_ER_IRQHandler+0xd6>
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10f      	bne.n	80077b4 <HAL_I2C_ER_IRQHandler+0xd6>
 8007794:	7cfb      	ldrb	r3, [r7, #19]
 8007796:	2b21      	cmp	r3, #33	; 0x21
 8007798:	d008      	beq.n	80077ac <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800779a:	7cfb      	ldrb	r3, [r7, #19]
 800779c:	2b29      	cmp	r3, #41	; 0x29
 800779e:	d005      	beq.n	80077ac <HAL_I2C_ER_IRQHandler+0xce>
 80077a0:	7cfb      	ldrb	r3, [r7, #19]
 80077a2:	2b28      	cmp	r3, #40	; 0x28
 80077a4:	d106      	bne.n	80077b4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2b21      	cmp	r3, #33	; 0x21
 80077aa:	d103      	bne.n	80077b4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f001 f833 	bl	8008818 <I2C_Slave_AF>
 80077b2:	e016      	b.n	80077e2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80077bc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	f043 0304 	orr.w	r3, r3, #4
 80077c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80077c6:	7efb      	ldrb	r3, [r7, #27]
 80077c8:	2b10      	cmp	r3, #16
 80077ca:	d002      	beq.n	80077d2 <HAL_I2C_ER_IRQHandler+0xf4>
 80077cc:	7efb      	ldrb	r3, [r7, #27]
 80077ce:	2b40      	cmp	r3, #64	; 0x40
 80077d0:	d107      	bne.n	80077e2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077e0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	0adb      	lsrs	r3, r3, #11
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00e      	beq.n	800780c <HAL_I2C_ER_IRQHandler+0x12e>
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	0a1b      	lsrs	r3, r3, #8
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d008      	beq.n	800780c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	f043 0308 	orr.w	r3, r3, #8
 8007800:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800780a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	2b00      	cmp	r3, #0
 8007810:	d008      	beq.n	8007824 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	431a      	orrs	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 f86a 	bl	80088f8 <I2C_ITError>
  }
}
 8007824:	bf00      	nop
 8007826:	3728      	adds	r7, #40	; 0x28
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d150      	bne.n	800796c <I2C_MasterTransmit_TXE+0xc8>
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	2b21      	cmp	r3, #33	; 0x21
 80078ce:	d14d      	bne.n	800796c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b08      	cmp	r3, #8
 80078d4:	d01d      	beq.n	8007912 <I2C_MasterTransmit_TXE+0x6e>
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2b20      	cmp	r3, #32
 80078da:	d01a      	beq.n	8007912 <I2C_MasterTransmit_TXE+0x6e>
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078e2:	d016      	beq.n	8007912 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078f2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2211      	movs	r2, #17
 80078f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2220      	movs	r2, #32
 8007906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff ff8e 	bl	800782c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007910:	e060      	b.n	80079d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007920:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007930:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2220      	movs	r2, #32
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b40      	cmp	r3, #64	; 0x40
 800794a:	d107      	bne.n	800795c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff ff87 	bl	8007868 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800795a:	e03b      	b.n	80079d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7ff ff61 	bl	800782c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800796a:	e033      	b.n	80079d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	2b21      	cmp	r3, #33	; 0x21
 8007970:	d005      	beq.n	800797e <I2C_MasterTransmit_TXE+0xda>
 8007972:	7bbb      	ldrb	r3, [r7, #14]
 8007974:	2b40      	cmp	r3, #64	; 0x40
 8007976:	d12d      	bne.n	80079d4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	2b22      	cmp	r3, #34	; 0x22
 800797c:	d12a      	bne.n	80079d4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007982:	b29b      	uxth	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	d108      	bne.n	800799a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007996:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007998:	e01c      	b.n	80079d4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b40      	cmp	r3, #64	; 0x40
 80079a4:	d103      	bne.n	80079ae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f88e 	bl	8007ac8 <I2C_MemoryTransmit_TXE_BTF>
}
 80079ac:	e012      	b.n	80079d4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	781a      	ldrb	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	3b01      	subs	r3, #1
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80079d2:	e7ff      	b.n	80079d4 <I2C_MasterTransmit_TXE+0x130>
 80079d4:	bf00      	nop
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b21      	cmp	r3, #33	; 0x21
 80079f4:	d164      	bne.n	8007ac0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d012      	beq.n	8007a26 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a04:	781a      	ldrb	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007a24:	e04c      	b.n	8007ac0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d01d      	beq.n	8007a68 <I2C_MasterTransmit_BTF+0x8c>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b20      	cmp	r3, #32
 8007a30:	d01a      	beq.n	8007a68 <I2C_MasterTransmit_BTF+0x8c>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a38:	d016      	beq.n	8007a68 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a48:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2211      	movs	r2, #17
 8007a4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff fee3 	bl	800782c <HAL_I2C_MasterTxCpltCallback>
}
 8007a66:	e02b      	b.n	8007ac0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a76:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a86:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b40      	cmp	r3, #64	; 0x40
 8007aa0:	d107      	bne.n	8007ab2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7ff fedc 	bl	8007868 <HAL_I2C_MemTxCpltCallback>
}
 8007ab0:	e006      	b.n	8007ac0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7ff feb6 	bl	800782c <HAL_I2C_MasterTxCpltCallback>
}
 8007ac0:	bf00      	nop
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ad6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d11d      	bne.n	8007b1c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d10b      	bne.n	8007b00 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af8:	1c9a      	adds	r2, r3, #2
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007afe:	e073      	b.n	8007be8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	121b      	asrs	r3, r3, #8
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007b1a:	e065      	b.n	8007be8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d10b      	bne.n	8007b3c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b34:	1c5a      	adds	r2, r3, #1
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007b3a:	e055      	b.n	8007be8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d151      	bne.n	8007be8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	2b22      	cmp	r3, #34	; 0x22
 8007b48:	d10d      	bne.n	8007b66 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b58:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5e:	1c5a      	adds	r2, r3, #1
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007b64:	e040      	b.n	8007be8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d015      	beq.n	8007b9c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	2b21      	cmp	r3, #33	; 0x21
 8007b74:	d112      	bne.n	8007b9c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	781a      	ldrb	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	1c5a      	adds	r2, r3, #1
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	3b01      	subs	r3, #1
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007b9a:	e025      	b.n	8007be8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d120      	bne.n	8007be8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	2b21      	cmp	r3, #33	; 0x21
 8007baa:	d11d      	bne.n	8007be8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f7ff fe40 	bl	8007868 <HAL_I2C_MemTxCpltCallback>
}
 8007be8:	bf00      	nop
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b22      	cmp	r3, #34	; 0x22
 8007c02:	f040 80a2 	bne.w	8007d4a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d921      	bls.n	8007c58 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	691a      	ldr	r2, [r3, #16]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1e:	b2d2      	uxtb	r2, r2
 8007c20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	3b01      	subs	r3, #1
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	f040 8082 	bne.w	8007d4a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c54:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8007c56:	e078      	b.n	8007d4a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d074      	beq.n	8007d4a <I2C_MasterReceive_RXNE+0x15a>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d002      	beq.n	8007c6c <I2C_MasterReceive_RXNE+0x7c>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d16e      	bne.n	8007d4a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 fb2f 	bl	80092d0 <I2C_WaitOnSTOPRequestThroughIT>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d142      	bne.n	8007cfe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c86:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c96:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	691a      	ldr	r2, [r3, #16]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca2:	b2d2      	uxtb	r2, r2
 8007ca4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b40      	cmp	r3, #64	; 0x40
 8007cd0:	d10a      	bne.n	8007ce8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7ff fdcb 	bl	800787c <HAL_I2C_MemRxCpltCallback>
}
 8007ce6:	e030      	b.n	8007d4a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2212      	movs	r2, #18
 8007cf4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7ff fda2 	bl	8007840 <HAL_I2C_MasterRxCpltCallback>
}
 8007cfc:	e025      	b.n	8007d4a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d0c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	691a      	ldr	r2, [r3, #16]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	b2d2      	uxtb	r2, r2
 8007d1a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	1c5a      	adds	r2, r3, #1
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7f9 f903 	bl	8000f50 <HAL_I2C_ErrorCallback>
}
 8007d4a:	bf00      	nop
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	d11b      	bne.n	8007da2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d78:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d84:	b2d2      	uxtb	r2, r2
 8007d86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007da0:	e0bd      	b.n	8007f1e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d129      	bne.n	8007e00 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dba:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b04      	cmp	r3, #4
 8007dc0:	d00a      	beq.n	8007dd8 <I2C_MasterReceive_BTF+0x86>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d007      	beq.n	8007dd8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dd6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	691a      	ldr	r2, [r3, #16]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	b2d2      	uxtb	r2, r2
 8007de4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	3b01      	subs	r3, #1
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007dfe:	e08e      	b.n	8007f1e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d176      	bne.n	8007ef8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d002      	beq.n	8007e16 <I2C_MasterReceive_BTF+0xc4>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b10      	cmp	r3, #16
 8007e14:	d108      	bne.n	8007e28 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	e019      	b.n	8007e5c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d002      	beq.n	8007e34 <I2C_MasterReceive_BTF+0xe2>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d108      	bne.n	8007e46 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	e00a      	b.n	8007e5c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d007      	beq.n	8007e5c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e5a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	b2d2      	uxtb	r2, r2
 8007e68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	691a      	ldr	r2, [r3, #16]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	b2d2      	uxtb	r2, r2
 8007e8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e94:	1c5a      	adds	r2, r3, #1
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007eb6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	2b40      	cmp	r3, #64	; 0x40
 8007eca:	d10a      	bne.n	8007ee2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7ff fcce 	bl	800787c <HAL_I2C_MemRxCpltCallback>
}
 8007ee0:	e01d      	b.n	8007f1e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2212      	movs	r2, #18
 8007eee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff fca5 	bl	8007840 <HAL_I2C_MasterRxCpltCallback>
}
 8007ef6:	e012      	b.n	8007f1e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	691a      	ldr	r2, [r3, #16]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f02:	b2d2      	uxtb	r2, r2
 8007f04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007f1e:	bf00      	nop
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b40      	cmp	r3, #64	; 0x40
 8007f38:	d117      	bne.n	8007f6a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d109      	bne.n	8007f56 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f52:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007f54:	e067      	b.n	8008026 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	f043 0301 	orr.w	r3, r3, #1
 8007f60:	b2da      	uxtb	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	611a      	str	r2, [r3, #16]
}
 8007f68:	e05d      	b.n	8008026 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f72:	d133      	bne.n	8007fdc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b21      	cmp	r3, #33	; 0x21
 8007f7e:	d109      	bne.n	8007f94 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	461a      	mov	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f90:	611a      	str	r2, [r3, #16]
 8007f92:	e008      	b.n	8007fa6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	f043 0301 	orr.w	r3, r3, #1
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d004      	beq.n	8007fb8 <I2C_Master_SB+0x92>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d108      	bne.n	8007fca <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d032      	beq.n	8008026 <I2C_Master_SB+0x100>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d02d      	beq.n	8008026 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fd8:	605a      	str	r2, [r3, #4]
}
 8007fda:	e024      	b.n	8008026 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10e      	bne.n	8008002 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	11db      	asrs	r3, r3, #7
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	f003 0306 	and.w	r3, r3, #6
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f063 030f 	orn	r3, r3, #15
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	611a      	str	r2, [r3, #16]
}
 8008000:	e011      	b.n	8008026 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008006:	2b01      	cmp	r3, #1
 8008008:	d10d      	bne.n	8008026 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800800e:	b29b      	uxth	r3, r3
 8008010:	11db      	asrs	r3, r3, #7
 8008012:	b2db      	uxtb	r3, r3
 8008014:	f003 0306 	and.w	r3, r3, #6
 8008018:	b2db      	uxtb	r3, r3
 800801a:	f063 030e 	orn	r3, r3, #14
 800801e:	b2da      	uxtb	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	611a      	str	r2, [r3, #16]
}
 8008026:	bf00      	nop
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803e:	b2da      	uxtb	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800804a:	2b00      	cmp	r3, #0
 800804c:	d004      	beq.n	8008058 <I2C_Master_ADD10+0x26>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008054:	2b00      	cmp	r3, #0
 8008056:	d108      	bne.n	800806a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00c      	beq.n	800807a <I2C_Master_ADD10+0x48>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008066:	2b00      	cmp	r3, #0
 8008068:	d007      	beq.n	800807a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008078:	605a      	str	r2, [r3, #4]
  }
}
 800807a:	bf00      	nop
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008086:	b480      	push	{r7}
 8008088:	b091      	sub	sp, #68	; 0x44
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008094:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b22      	cmp	r3, #34	; 0x22
 80080ae:	f040 8169 	bne.w	8008384 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10f      	bne.n	80080da <I2C_Master_ADDR+0x54>
 80080ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80080be:	2b40      	cmp	r3, #64	; 0x40
 80080c0:	d10b      	bne.n	80080da <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080c2:	2300      	movs	r3, #0
 80080c4:	633b      	str	r3, [r7, #48]	; 0x30
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	633b      	str	r3, [r7, #48]	; 0x30
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	633b      	str	r3, [r7, #48]	; 0x30
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	e160      	b.n	800839c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d11d      	bne.n	800811e <I2C_Master_ADDR+0x98>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80080ea:	d118      	bne.n	800811e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080ec:	2300      	movs	r3, #0
 80080ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008100:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008110:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	651a      	str	r2, [r3, #80]	; 0x50
 800811c:	e13e      	b.n	800839c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008122:	b29b      	uxth	r3, r3
 8008124:	2b00      	cmp	r3, #0
 8008126:	d113      	bne.n	8008150 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008128:	2300      	movs	r3, #0
 800812a:	62bb      	str	r3, [r7, #40]	; 0x28
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	62bb      	str	r3, [r7, #40]	; 0x28
 800813c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	e115      	b.n	800837c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008154:	b29b      	uxth	r3, r3
 8008156:	2b01      	cmp	r3, #1
 8008158:	f040 808a 	bne.w	8008270 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008162:	d137      	bne.n	80081d4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008172:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800817e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008182:	d113      	bne.n	80081ac <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008192:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008194:	2300      	movs	r3, #0
 8008196:	627b      	str	r3, [r7, #36]	; 0x24
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	627b      	str	r3, [r7, #36]	; 0x24
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	627b      	str	r3, [r7, #36]	; 0x24
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	e0e7      	b.n	800837c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081ac:	2300      	movs	r3, #0
 80081ae:	623b      	str	r3, [r7, #32]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	623b      	str	r3, [r7, #32]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	623b      	str	r3, [r7, #32]
 80081c0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	e0d3      	b.n	800837c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80081d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d6:	2b08      	cmp	r3, #8
 80081d8:	d02e      	beq.n	8008238 <I2C_Master_ADDR+0x1b2>
 80081da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081dc:	2b20      	cmp	r3, #32
 80081de:	d02b      	beq.n	8008238 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80081e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e2:	2b12      	cmp	r3, #18
 80081e4:	d102      	bne.n	80081ec <I2C_Master_ADDR+0x166>
 80081e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d125      	bne.n	8008238 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80081ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	d00e      	beq.n	8008210 <I2C_Master_ADDR+0x18a>
 80081f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d00b      	beq.n	8008210 <I2C_Master_ADDR+0x18a>
 80081f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fa:	2b10      	cmp	r3, #16
 80081fc:	d008      	beq.n	8008210 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	e007      	b.n	8008220 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800821e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008220:	2300      	movs	r3, #0
 8008222:	61fb      	str	r3, [r7, #28]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	61fb      	str	r3, [r7, #28]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	61fb      	str	r3, [r7, #28]
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	e0a1      	b.n	800837c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008246:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008248:	2300      	movs	r3, #0
 800824a:	61bb      	str	r3, [r7, #24]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	61bb      	str	r3, [r7, #24]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	61bb      	str	r3, [r7, #24]
 800825c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	e085      	b.n	800837c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008274:	b29b      	uxth	r3, r3
 8008276:	2b02      	cmp	r3, #2
 8008278:	d14d      	bne.n	8008316 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800827a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827c:	2b04      	cmp	r3, #4
 800827e:	d016      	beq.n	80082ae <I2C_Master_ADDR+0x228>
 8008280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008282:	2b02      	cmp	r3, #2
 8008284:	d013      	beq.n	80082ae <I2C_Master_ADDR+0x228>
 8008286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008288:	2b10      	cmp	r3, #16
 800828a:	d010      	beq.n	80082ae <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800829a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	e007      	b.n	80082be <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80082bc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082cc:	d117      	bne.n	80082fe <I2C_Master_ADDR+0x278>
 80082ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082d4:	d00b      	beq.n	80082ee <I2C_Master_ADDR+0x268>
 80082d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d008      	beq.n	80082ee <I2C_Master_ADDR+0x268>
 80082dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082de:	2b08      	cmp	r3, #8
 80082e0:	d005      	beq.n	80082ee <I2C_Master_ADDR+0x268>
 80082e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e4:	2b10      	cmp	r3, #16
 80082e6:	d002      	beq.n	80082ee <I2C_Master_ADDR+0x268>
 80082e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ea:	2b20      	cmp	r3, #32
 80082ec:	d107      	bne.n	80082fe <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80082fc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082fe:	2300      	movs	r3, #0
 8008300:	617b      	str	r3, [r7, #20]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	617b      	str	r3, [r7, #20]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	617b      	str	r3, [r7, #20]
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	e032      	b.n	800837c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008324:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008334:	d117      	bne.n	8008366 <I2C_Master_ADDR+0x2e0>
 8008336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008338:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800833c:	d00b      	beq.n	8008356 <I2C_Master_ADDR+0x2d0>
 800833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008340:	2b01      	cmp	r3, #1
 8008342:	d008      	beq.n	8008356 <I2C_Master_ADDR+0x2d0>
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	2b08      	cmp	r3, #8
 8008348:	d005      	beq.n	8008356 <I2C_Master_ADDR+0x2d0>
 800834a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834c:	2b10      	cmp	r3, #16
 800834e:	d002      	beq.n	8008356 <I2C_Master_ADDR+0x2d0>
 8008350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008352:	2b20      	cmp	r3, #32
 8008354:	d107      	bne.n	8008366 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008364:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008366:	2300      	movs	r3, #0
 8008368:	613b      	str	r3, [r7, #16]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	613b      	str	r3, [r7, #16]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	613b      	str	r3, [r7, #16]
 800837a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008382:	e00b      	b.n	800839c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008384:	2300      	movs	r3, #0
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	60fb      	str	r3, [r7, #12]
 8008398:	68fb      	ldr	r3, [r7, #12]
}
 800839a:	e7ff      	b.n	800839c <I2C_Master_ADDR+0x316>
 800839c:	bf00      	nop
 800839e:	3744      	adds	r7, #68	; 0x44
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083bc:	b29b      	uxth	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d02b      	beq.n	800841a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	781a      	ldrb	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083dc:	b29b      	uxth	r3, r3
 80083de:	3b01      	subs	r3, #1
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d114      	bne.n	800841a <I2C_SlaveTransmit_TXE+0x72>
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	2b29      	cmp	r3, #41	; 0x29
 80083f4:	d111      	bne.n	800841a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008404:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2221      	movs	r2, #33	; 0x21
 800840a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2228      	movs	r2, #40	; 0x28
 8008410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7ff fa1d 	bl	8007854 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800841a:	bf00      	nop
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800842e:	b29b      	uxth	r3, r3
 8008430:	2b00      	cmp	r3, #0
 8008432:	d011      	beq.n	8008458 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	781a      	ldrb	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008444:	1c5a      	adds	r2, r3, #1
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800844e:	b29b      	uxth	r3, r3
 8008450:	3b01      	subs	r3, #1
 8008452:	b29a      	uxth	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008472:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008478:	b29b      	uxth	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d02c      	beq.n	80084d8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691a      	ldr	r2, [r3, #16]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008488:	b2d2      	uxtb	r2, r2
 800848a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800849a:	b29b      	uxth	r3, r3
 800849c:	3b01      	subs	r3, #1
 800849e:	b29a      	uxth	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d114      	bne.n	80084d8 <I2C_SlaveReceive_RXNE+0x74>
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
 80084b0:	2b2a      	cmp	r3, #42	; 0x2a
 80084b2:	d111      	bne.n	80084d8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685a      	ldr	r2, [r3, #4]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084c2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2222      	movs	r2, #34	; 0x22
 80084c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2228      	movs	r2, #40	; 0x28
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7fa f860 	bl	8002598 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80084d8:	bf00      	nop
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d012      	beq.n	8008518 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	691a      	ldr	r2, [r3, #16]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fc:	b2d2      	uxtb	r2, r2
 80084fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	1c5a      	adds	r2, r3, #1
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800850e:	b29b      	uxth	r3, r3
 8008510:	3b01      	subs	r3, #1
 8008512:	b29a      	uxth	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800852e:	2300      	movs	r3, #0
 8008530:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008538:	b2db      	uxtb	r3, r3
 800853a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800853e:	2b28      	cmp	r3, #40	; 0x28
 8008540:	d127      	bne.n	8008592 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008550:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	089b      	lsrs	r3, r3, #2
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800855e:	2301      	movs	r3, #1
 8008560:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	09db      	lsrs	r3, r3, #7
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	d103      	bne.n	8008576 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	81bb      	strh	r3, [r7, #12]
 8008574:	e002      	b.n	800857c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008584:	89ba      	ldrh	r2, [r7, #12]
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	4619      	mov	r1, r3
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7f9 ffca 	bl	8002524 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008590:	e00e      	b.n	80085b0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008592:	2300      	movs	r3, #0
 8008594:	60bb      	str	r3, [r7, #8]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	60bb      	str	r3, [r7, #8]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	60bb      	str	r3, [r7, #8]
 80085a6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80085b0:	bf00      	nop
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085c6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685a      	ldr	r2, [r3, #4]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80085d6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80085d8:	2300      	movs	r3, #0
 80085da:	60bb      	str	r3, [r7, #8]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	60bb      	str	r3, [r7, #8]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f042 0201 	orr.w	r2, r2, #1
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008604:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008614:	d172      	bne.n	80086fc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008616:	7bfb      	ldrb	r3, [r7, #15]
 8008618:	2b22      	cmp	r3, #34	; 0x22
 800861a:	d002      	beq.n	8008622 <I2C_Slave_STOPF+0x6a>
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	2b2a      	cmp	r3, #42	; 0x2a
 8008620:	d135      	bne.n	800868e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	b29a      	uxth	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008634:	b29b      	uxth	r3, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	d005      	beq.n	8008646 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	f043 0204 	orr.w	r2, r3, #4
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008654:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865a:	4618      	mov	r0, r3
 800865c:	f7fd fbaa 	bl	8005db4 <HAL_DMA_GetState>
 8008660:	4603      	mov	r3, r0
 8008662:	2b01      	cmp	r3, #1
 8008664:	d049      	beq.n	80086fa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866a:	4a69      	ldr	r2, [pc, #420]	; (8008810 <I2C_Slave_STOPF+0x258>)
 800866c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008672:	4618      	mov	r0, r3
 8008674:	f7fd f9f2 	bl	8005a5c <HAL_DMA_Abort_IT>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d03d      	beq.n	80086fa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008688:	4610      	mov	r0, r2
 800868a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800868c:	e035      	b.n	80086fa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	b29a      	uxth	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d005      	beq.n	80086b2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086aa:	f043 0204 	orr.w	r2, r3, #4
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	685a      	ldr	r2, [r3, #4]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fd fb74 	bl	8005db4 <HAL_DMA_GetState>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d014      	beq.n	80086fc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d6:	4a4e      	ldr	r2, [pc, #312]	; (8008810 <I2C_Slave_STOPF+0x258>)
 80086d8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fd f9bc 	bl	8005a5c <HAL_DMA_Abort_IT>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d008      	beq.n	80086fc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80086f4:	4610      	mov	r0, r2
 80086f6:	4798      	blx	r3
 80086f8:	e000      	b.n	80086fc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086fa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008700:	b29b      	uxth	r3, r3
 8008702:	2b00      	cmp	r3, #0
 8008704:	d03e      	beq.n	8008784 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	f003 0304 	and.w	r3, r3, #4
 8008710:	2b04      	cmp	r3, #4
 8008712:	d112      	bne.n	800873a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	691a      	ldr	r2, [r3, #16]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871e:	b2d2      	uxtb	r2, r2
 8008720:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	1c5a      	adds	r2, r3, #1
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008730:	b29b      	uxth	r3, r3
 8008732:	3b01      	subs	r3, #1
 8008734:	b29a      	uxth	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008744:	2b40      	cmp	r3, #64	; 0x40
 8008746:	d112      	bne.n	800876e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	691a      	ldr	r2, [r3, #16]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875a:	1c5a      	adds	r2, r3, #1
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008764:	b29b      	uxth	r3, r3
 8008766:	3b01      	subs	r3, #1
 8008768:	b29a      	uxth	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008772:	b29b      	uxth	r3, r3
 8008774:	2b00      	cmp	r3, #0
 8008776:	d005      	beq.n	8008784 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877c:	f043 0204 	orr.w	r2, r3, #4
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f8b3 	bl	80088f8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008792:	e039      	b.n	8008808 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	2b2a      	cmp	r3, #42	; 0x2a
 8008798:	d109      	bne.n	80087ae <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2228      	movs	r2, #40	; 0x28
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7f9 fef5 	bl	8002598 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b28      	cmp	r3, #40	; 0x28
 80087b8:	d111      	bne.n	80087de <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a15      	ldr	r2, [pc, #84]	; (8008814 <I2C_Slave_STOPF+0x25c>)
 80087be:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2220      	movs	r2, #32
 80087ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7f9 fed0 	bl	800257c <HAL_I2C_ListenCpltCallback>
}
 80087dc:	e014      	b.n	8008808 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e2:	2b22      	cmp	r3, #34	; 0x22
 80087e4:	d002      	beq.n	80087ec <I2C_Slave_STOPF+0x234>
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	2b22      	cmp	r3, #34	; 0x22
 80087ea:	d10d      	bne.n	8008808 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2220      	movs	r2, #32
 80087f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7f9 fec8 	bl	8002598 <HAL_I2C_SlaveRxCpltCallback>
}
 8008808:	bf00      	nop
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	08008f51 	.word	0x08008f51
 8008814:	ffff0000 	.word	0xffff0000

08008818 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008826:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	2b08      	cmp	r3, #8
 8008832:	d002      	beq.n	800883a <I2C_Slave_AF+0x22>
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2b20      	cmp	r3, #32
 8008838:	d129      	bne.n	800888e <I2C_Slave_AF+0x76>
 800883a:	7bfb      	ldrb	r3, [r7, #15]
 800883c:	2b28      	cmp	r3, #40	; 0x28
 800883e:	d126      	bne.n	800888e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a2c      	ldr	r2, [pc, #176]	; (80088f4 <I2C_Slave_AF+0xdc>)
 8008844:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008854:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800885e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800886e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2220      	movs	r2, #32
 800887a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7f9 fe78 	bl	800257c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800888c:	e02e      	b.n	80088ec <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	2b21      	cmp	r3, #33	; 0x21
 8008892:	d126      	bne.n	80088e2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a17      	ldr	r2, [pc, #92]	; (80088f4 <I2C_Slave_AF+0xdc>)
 8008898:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2221      	movs	r2, #33	; 0x21
 800889e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2220      	movs	r2, #32
 80088a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80088be:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088c8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088d8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7fe ffba 	bl	8007854 <HAL_I2C_SlaveTxCpltCallback>
}
 80088e0:	e004      	b.n	80088ec <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088ea:	615a      	str	r2, [r3, #20]
}
 80088ec:	bf00      	nop
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	ffff0000 	.word	0xffff0000

080088f8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008906:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800890e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	2b10      	cmp	r3, #16
 8008914:	d002      	beq.n	800891c <I2C_ITError+0x24>
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	2b40      	cmp	r3, #64	; 0x40
 800891a:	d10a      	bne.n	8008932 <I2C_ITError+0x3a>
 800891c:	7bfb      	ldrb	r3, [r7, #15]
 800891e:	2b22      	cmp	r3, #34	; 0x22
 8008920:	d107      	bne.n	8008932 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008930:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008932:	7bfb      	ldrb	r3, [r7, #15]
 8008934:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008938:	2b28      	cmp	r3, #40	; 0x28
 800893a:	d107      	bne.n	800894c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2228      	movs	r2, #40	; 0x28
 8008946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800894a:	e015      	b.n	8008978 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800895a:	d00a      	beq.n	8008972 <I2C_ITError+0x7a>
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	2b60      	cmp	r3, #96	; 0x60
 8008960:	d007      	beq.n	8008972 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2220      	movs	r2, #32
 8008966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008986:	d162      	bne.n	8008a4e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008996:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d020      	beq.n	80089e8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089aa:	4a6a      	ldr	r2, [pc, #424]	; (8008b54 <I2C_ITError+0x25c>)
 80089ac:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fd f852 	bl	8005a5c <HAL_DMA_Abort_IT>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f000 8089 	beq.w	8008ad2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 0201 	bic.w	r2, r2, #1
 80089ce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2220      	movs	r2, #32
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80089e2:	4610      	mov	r0, r2
 80089e4:	4798      	blx	r3
 80089e6:	e074      	b.n	8008ad2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ec:	4a59      	ldr	r2, [pc, #356]	; (8008b54 <I2C_ITError+0x25c>)
 80089ee:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fd f831 	bl	8005a5c <HAL_DMA_Abort_IT>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d068      	beq.n	8008ad2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0a:	2b40      	cmp	r3, #64	; 0x40
 8008a0c:	d10b      	bne.n	8008a26 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	691a      	ldr	r2, [r3, #16]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a18:	b2d2      	uxtb	r2, r2
 8008a1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	1c5a      	adds	r2, r3, #1
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f022 0201 	bic.w	r2, r2, #1
 8008a34:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2220      	movs	r2, #32
 8008a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008a48:	4610      	mov	r0, r2
 8008a4a:	4798      	blx	r3
 8008a4c:	e041      	b.n	8008ad2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b60      	cmp	r3, #96	; 0x60
 8008a58:	d125      	bne.n	8008aa6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2220      	movs	r2, #32
 8008a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a72:	2b40      	cmp	r3, #64	; 0x40
 8008a74:	d10b      	bne.n	8008a8e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	691a      	ldr	r2, [r3, #16]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a80:	b2d2      	uxtb	r2, r2
 8008a82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	1c5a      	adds	r2, r3, #1
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f022 0201 	bic.w	r2, r2, #1
 8008a9c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7fe fef6 	bl	8007890 <HAL_I2C_AbortCpltCallback>
 8008aa4:	e015      	b.n	8008ad2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab0:	2b40      	cmp	r3, #64	; 0x40
 8008ab2:	d10b      	bne.n	8008acc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	691a      	ldr	r2, [r3, #16]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abe:	b2d2      	uxtb	r2, r2
 8008ac0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7f8 fa3f 	bl	8000f50 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10e      	bne.n	8008b00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d109      	bne.n	8008b00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d104      	bne.n	8008b00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d007      	beq.n	8008b10 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008b0e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b16:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1c:	f003 0304 	and.w	r3, r3, #4
 8008b20:	2b04      	cmp	r3, #4
 8008b22:	d113      	bne.n	8008b4c <I2C_ITError+0x254>
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
 8008b26:	2b28      	cmp	r3, #40	; 0x28
 8008b28:	d110      	bne.n	8008b4c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a0a      	ldr	r2, [pc, #40]	; (8008b58 <I2C_ITError+0x260>)
 8008b2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7f9 fd18 	bl	800257c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008b4c:	bf00      	nop
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	08008f51 	.word	0x08008f51
 8008b58:	ffff0000 	.word	0xffff0000

08008b5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b088      	sub	sp, #32
 8008b60:	af02      	add	r7, sp, #8
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	4608      	mov	r0, r1
 8008b66:	4611      	mov	r1, r2
 8008b68:	461a      	mov	r2, r3
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	817b      	strh	r3, [r7, #10]
 8008b6e:	460b      	mov	r3, r1
 8008b70:	813b      	strh	r3, [r7, #8]
 8008b72:	4613      	mov	r3, r2
 8008b74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	9300      	str	r3, [sp, #0]
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f000 fa7c 	bl	80090a0 <I2C_WaitOnFlagUntilTimeout>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00d      	beq.n	8008bca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bbc:	d103      	bne.n	8008bc6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e0aa      	b.n	8008d20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008bca:	897b      	ldrh	r3, [r7, #10]
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	461a      	mov	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008bd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	6a3a      	ldr	r2, [r7, #32]
 8008bde:	4952      	ldr	r1, [pc, #328]	; (8008d28 <I2C_RequestMemoryRead+0x1cc>)
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 fab4 	bl	800914e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e097      	b.n	8008d20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	617b      	str	r3, [r7, #20]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	617b      	str	r3, [r7, #20]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	617b      	str	r3, [r7, #20]
 8008c04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c08:	6a39      	ldr	r1, [r7, #32]
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 fb1e 	bl	800924c <I2C_WaitOnTXEFlagUntilTimeout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00d      	beq.n	8008c32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1a:	2b04      	cmp	r3, #4
 8008c1c:	d107      	bne.n	8008c2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e076      	b.n	8008d20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c32:	88fb      	ldrh	r3, [r7, #6]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d105      	bne.n	8008c44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c38:	893b      	ldrh	r3, [r7, #8]
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	611a      	str	r2, [r3, #16]
 8008c42:	e021      	b.n	8008c88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008c44:	893b      	ldrh	r3, [r7, #8]
 8008c46:	0a1b      	lsrs	r3, r3, #8
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c54:	6a39      	ldr	r1, [r7, #32]
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 faf8 	bl	800924c <I2C_WaitOnTXEFlagUntilTimeout>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00d      	beq.n	8008c7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d107      	bne.n	8008c7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e050      	b.n	8008d20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c7e:	893b      	ldrh	r3, [r7, #8]
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c8a:	6a39      	ldr	r1, [r7, #32]
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f000 fadd 	bl	800924c <I2C_WaitOnTXEFlagUntilTimeout>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00d      	beq.n	8008cb4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9c:	2b04      	cmp	r3, #4
 8008c9e:	d107      	bne.n	8008cb0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e035      	b.n	8008d20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cc2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f000 f9e5 	bl	80090a0 <I2C_WaitOnFlagUntilTimeout>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00d      	beq.n	8008cf8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cea:	d103      	bne.n	8008cf4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	e013      	b.n	8008d20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008cf8:	897b      	ldrh	r3, [r7, #10]
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	f043 0301 	orr.w	r3, r3, #1
 8008d00:	b2da      	uxtb	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0a:	6a3a      	ldr	r2, [r7, #32]
 8008d0c:	4906      	ldr	r1, [pc, #24]	; (8008d28 <I2C_RequestMemoryRead+0x1cc>)
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 fa1d 	bl	800914e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e000      	b.n	8008d20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3718      	adds	r7, #24
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	00010002 	.word	0x00010002

08008d2c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d38:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d40:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d48:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008d5e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d003      	beq.n	8008d70 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d003      	beq.n	8008d80 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8008d80:	7cfb      	ldrb	r3, [r7, #19]
 8008d82:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008d86:	2b21      	cmp	r3, #33	; 0x21
 8008d88:	d007      	beq.n	8008d9a <I2C_DMAXferCplt+0x6e>
 8008d8a:	7cfb      	ldrb	r3, [r7, #19]
 8008d8c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8008d90:	2b22      	cmp	r3, #34	; 0x22
 8008d92:	d131      	bne.n	8008df8 <I2C_DMAXferCplt+0xcc>
 8008d94:	7cbb      	ldrb	r3, [r7, #18]
 8008d96:	2b20      	cmp	r3, #32
 8008d98:	d12e      	bne.n	8008df8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008da8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2200      	movs	r2, #0
 8008dae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008db0:	7cfb      	ldrb	r3, [r7, #19]
 8008db2:	2b29      	cmp	r3, #41	; 0x29
 8008db4:	d10a      	bne.n	8008dcc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2221      	movs	r2, #33	; 0x21
 8008dba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	2228      	movs	r2, #40	; 0x28
 8008dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008dc4:	6978      	ldr	r0, [r7, #20]
 8008dc6:	f7fe fd45 	bl	8007854 <HAL_I2C_SlaveTxCpltCallback>
 8008dca:	e00c      	b.n	8008de6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008dcc:	7cfb      	ldrb	r3, [r7, #19]
 8008dce:	2b2a      	cmp	r3, #42	; 0x2a
 8008dd0:	d109      	bne.n	8008de6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	2222      	movs	r2, #34	; 0x22
 8008dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	2228      	movs	r2, #40	; 0x28
 8008ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008de0:	6978      	ldr	r0, [r7, #20]
 8008de2:	f7f9 fbd9 	bl	8002598 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008df4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008df6:	e06a      	b.n	8008ece <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d064      	beq.n	8008ece <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d107      	bne.n	8008e1e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e1c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008e2c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e34:	d009      	beq.n	8008e4a <I2C_DMAXferCplt+0x11e>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2b08      	cmp	r3, #8
 8008e3a:	d006      	beq.n	8008e4a <I2C_DMAXferCplt+0x11e>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008e42:	d002      	beq.n	8008e4a <I2C_DMAXferCplt+0x11e>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2b20      	cmp	r3, #32
 8008e48:	d107      	bne.n	8008e5a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e58:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	685a      	ldr	r2, [r3, #4]
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e68:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e78:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d003      	beq.n	8008e90 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8008e88:	6978      	ldr	r0, [r7, #20]
 8008e8a:	f7f8 f861 	bl	8000f50 <HAL_I2C_ErrorCallback>
}
 8008e8e:	e01e      	b.n	8008ece <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	2220      	movs	r2, #32
 8008e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b40      	cmp	r3, #64	; 0x40
 8008ea2:	d10a      	bne.n	8008eba <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8008eb2:	6978      	ldr	r0, [r7, #20]
 8008eb4:	f7fe fce2 	bl	800787c <HAL_I2C_MemRxCpltCallback>
}
 8008eb8:	e009      	b.n	8008ece <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	2212      	movs	r2, #18
 8008ec6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8008ec8:	6978      	ldr	r0, [r7, #20]
 8008eca:	f7fe fcb9 	bl	8007840 <HAL_I2C_MasterRxCpltCallback>
}
 8008ece:	bf00      	nop
 8008ed0:	3718      	adds	r7, #24
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b084      	sub	sp, #16
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d003      	beq.n	8008ef4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f00:	2200      	movs	r2, #0
 8008f02:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7fc ff63 	bl	8005dd0 <HAL_DMA_GetError>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d01b      	beq.n	8008f48 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f1e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2220      	movs	r2, #32
 8008f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3a:	f043 0210 	orr.w	r2, r3, #16
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f7f8 f804 	bl	8000f50 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008f48:	bf00      	nop
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f60:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f68:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008f6a:	4b4b      	ldr	r3, [pc, #300]	; (8009098 <I2C_DMAAbort+0x148>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	08db      	lsrs	r3, r3, #3
 8008f70:	4a4a      	ldr	r2, [pc, #296]	; (800909c <I2C_DMAAbort+0x14c>)
 8008f72:	fba2 2303 	umull	r2, r3, r2, r3
 8008f76:	0a1a      	lsrs	r2, r3, #8
 8008f78:	4613      	mov	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4413      	add	r3, r2
 8008f7e:	00da      	lsls	r2, r3, #3
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d106      	bne.n	8008f98 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	f043 0220 	orr.w	r2, r3, #32
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008f96:	e00a      	b.n	8008fae <I2C_DMAAbort+0x5e>
    }
    count--;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fac:	d0ea      	beq.n	8008f84 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d003      	beq.n	8008fbe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fba:	2200      	movs	r2, #0
 8008fbc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fca:	2200      	movs	r2, #0
 8008fcc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fdc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d003      	beq.n	8008ff4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d003      	beq.n	8009004 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009000:	2200      	movs	r2, #0
 8009002:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f022 0201 	bic.w	r2, r2, #1
 8009012:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800901a:	b2db      	uxtb	r3, r3
 800901c:	2b60      	cmp	r3, #96	; 0x60
 800901e:	d10e      	bne.n	800903e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2220      	movs	r2, #32
 8009024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	2200      	movs	r2, #0
 8009034:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009036:	6978      	ldr	r0, [r7, #20]
 8009038:	f7fe fc2a 	bl	8007890 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800903c:	e027      	b.n	800908e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800903e:	7cfb      	ldrb	r3, [r7, #19]
 8009040:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009044:	2b28      	cmp	r3, #40	; 0x28
 8009046:	d117      	bne.n	8009078 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f042 0201 	orr.w	r2, r2, #1
 8009056:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009066:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	2200      	movs	r2, #0
 800906c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2228      	movs	r2, #40	; 0x28
 8009072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009076:	e007      	b.n	8009088 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2220      	movs	r2, #32
 800907c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009088:	6978      	ldr	r0, [r7, #20]
 800908a:	f7f7 ff61 	bl	8000f50 <HAL_I2C_ErrorCallback>
}
 800908e:	bf00      	nop
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	2000000c 	.word	0x2000000c
 800909c:	14f8b589 	.word	0x14f8b589

080090a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	603b      	str	r3, [r7, #0]
 80090ac:	4613      	mov	r3, r2
 80090ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090b0:	e025      	b.n	80090fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090b8:	d021      	beq.n	80090fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090ba:	f7fb fdc7 	bl	8004c4c <HAL_GetTick>
 80090be:	4602      	mov	r2, r0
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d302      	bcc.n	80090d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d116      	bne.n	80090fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2220      	movs	r2, #32
 80090da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ea:	f043 0220 	orr.w	r2, r3, #32
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e023      	b.n	8009146 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	0c1b      	lsrs	r3, r3, #16
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b01      	cmp	r3, #1
 8009106:	d10d      	bne.n	8009124 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	43da      	mvns	r2, r3
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	4013      	ands	r3, r2
 8009114:	b29b      	uxth	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	bf0c      	ite	eq
 800911a:	2301      	moveq	r3, #1
 800911c:	2300      	movne	r3, #0
 800911e:	b2db      	uxtb	r3, r3
 8009120:	461a      	mov	r2, r3
 8009122:	e00c      	b.n	800913e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	43da      	mvns	r2, r3
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	4013      	ands	r3, r2
 8009130:	b29b      	uxth	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	bf0c      	ite	eq
 8009136:	2301      	moveq	r3, #1
 8009138:	2300      	movne	r3, #0
 800913a:	b2db      	uxtb	r3, r3
 800913c:	461a      	mov	r2, r3
 800913e:	79fb      	ldrb	r3, [r7, #7]
 8009140:	429a      	cmp	r2, r3
 8009142:	d0b6      	beq.n	80090b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b084      	sub	sp, #16
 8009152:	af00      	add	r7, sp, #0
 8009154:	60f8      	str	r0, [r7, #12]
 8009156:	60b9      	str	r1, [r7, #8]
 8009158:	607a      	str	r2, [r7, #4]
 800915a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800915c:	e051      	b.n	8009202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	695b      	ldr	r3, [r3, #20]
 8009164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800916c:	d123      	bne.n	80091b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800917c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009186:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2220      	movs	r2, #32
 8009192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a2:	f043 0204 	orr.w	r2, r3, #4
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e046      	b.n	8009244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091bc:	d021      	beq.n	8009202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091be:	f7fb fd45 	bl	8004c4c <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d302      	bcc.n	80091d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d116      	bne.n	8009202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2220      	movs	r2, #32
 80091de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ee:	f043 0220 	orr.w	r2, r3, #32
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e020      	b.n	8009244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	0c1b      	lsrs	r3, r3, #16
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b01      	cmp	r3, #1
 800920a:	d10c      	bne.n	8009226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	43da      	mvns	r2, r3
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	4013      	ands	r3, r2
 8009218:	b29b      	uxth	r3, r3
 800921a:	2b00      	cmp	r3, #0
 800921c:	bf14      	ite	ne
 800921e:	2301      	movne	r3, #1
 8009220:	2300      	moveq	r3, #0
 8009222:	b2db      	uxtb	r3, r3
 8009224:	e00b      	b.n	800923e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	43da      	mvns	r2, r3
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	4013      	ands	r3, r2
 8009232:	b29b      	uxth	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	bf14      	ite	ne
 8009238:	2301      	movne	r3, #1
 800923a:	2300      	moveq	r3, #0
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	d18d      	bne.n	800915e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009258:	e02d      	b.n	80092b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 f86a 	bl	8009334 <I2C_IsAcknowledgeFailed>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e02d      	b.n	80092c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009270:	d021      	beq.n	80092b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009272:	f7fb fceb 	bl	8004c4c <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	429a      	cmp	r2, r3
 8009280:	d302      	bcc.n	8009288 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d116      	bne.n	80092b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2220      	movs	r2, #32
 8009292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a2:	f043 0220 	orr.w	r2, r3, #32
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e007      	b.n	80092c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092c0:	2b80      	cmp	r3, #128	; 0x80
 80092c2:	d1ca      	bne.n	800925a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
	...

080092d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092d8:	2300      	movs	r3, #0
 80092da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80092dc:	4b13      	ldr	r3, [pc, #76]	; (800932c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	08db      	lsrs	r3, r3, #3
 80092e2:	4a13      	ldr	r2, [pc, #76]	; (8009330 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80092e4:	fba2 2303 	umull	r2, r3, r2, r3
 80092e8:	0a1a      	lsrs	r2, r3, #8
 80092ea:	4613      	mov	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4413      	add	r3, r2
 80092f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3b01      	subs	r3, #1
 80092f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d107      	bne.n	800930e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009302:	f043 0220 	orr.w	r2, r3, #32
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e008      	b.n	8009320 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800931c:	d0e9      	beq.n	80092f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	2000000c 	.word	0x2000000c
 8009330:	14f8b589 	.word	0x14f8b589

08009334 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	695b      	ldr	r3, [r3, #20]
 8009342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800934a:	d11b      	bne.n	8009384 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009354:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2220      	movs	r2, #32
 8009360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009370:	f043 0204 	orr.w	r2, r3, #4
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e000      	b.n	8009386 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009392:	b480      	push	{r7}
 8009394:	b083      	sub	sp, #12
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80093a2:	d103      	bne.n	80093ac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80093aa:	e007      	b.n	80093bc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80093b4:	d102      	bne.n	80093bc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2208      	movs	r2, #8
 80093ba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e264      	b.n	80098a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d075      	beq.n	80094d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80093e6:	4ba3      	ldr	r3, [pc, #652]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f003 030c 	and.w	r3, r3, #12
 80093ee:	2b04      	cmp	r3, #4
 80093f0:	d00c      	beq.n	800940c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80093f2:	4ba0      	ldr	r3, [pc, #640]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80093fa:	2b08      	cmp	r3, #8
 80093fc:	d112      	bne.n	8009424 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80093fe:	4b9d      	ldr	r3, [pc, #628]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800940a:	d10b      	bne.n	8009424 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800940c:	4b99      	ldr	r3, [pc, #612]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d05b      	beq.n	80094d0 <HAL_RCC_OscConfig+0x108>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d157      	bne.n	80094d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	e23f      	b.n	80098a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800942c:	d106      	bne.n	800943c <HAL_RCC_OscConfig+0x74>
 800942e:	4b91      	ldr	r3, [pc, #580]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a90      	ldr	r2, [pc, #576]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 8009434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009438:	6013      	str	r3, [r2, #0]
 800943a:	e01d      	b.n	8009478 <HAL_RCC_OscConfig+0xb0>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009444:	d10c      	bne.n	8009460 <HAL_RCC_OscConfig+0x98>
 8009446:	4b8b      	ldr	r3, [pc, #556]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a8a      	ldr	r2, [pc, #552]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 800944c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009450:	6013      	str	r3, [r2, #0]
 8009452:	4b88      	ldr	r3, [pc, #544]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a87      	ldr	r2, [pc, #540]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 8009458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800945c:	6013      	str	r3, [r2, #0]
 800945e:	e00b      	b.n	8009478 <HAL_RCC_OscConfig+0xb0>
 8009460:	4b84      	ldr	r3, [pc, #528]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a83      	ldr	r2, [pc, #524]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 8009466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	4b81      	ldr	r3, [pc, #516]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a80      	ldr	r2, [pc, #512]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 8009472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d013      	beq.n	80094a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009480:	f7fb fbe4 	bl	8004c4c <HAL_GetTick>
 8009484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009486:	e008      	b.n	800949a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009488:	f7fb fbe0 	bl	8004c4c <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	2b64      	cmp	r3, #100	; 0x64
 8009494:	d901      	bls.n	800949a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009496:	2303      	movs	r3, #3
 8009498:	e204      	b.n	80098a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800949a:	4b76      	ldr	r3, [pc, #472]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0f0      	beq.n	8009488 <HAL_RCC_OscConfig+0xc0>
 80094a6:	e014      	b.n	80094d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094a8:	f7fb fbd0 	bl	8004c4c <HAL_GetTick>
 80094ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094ae:	e008      	b.n	80094c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094b0:	f7fb fbcc 	bl	8004c4c <HAL_GetTick>
 80094b4:	4602      	mov	r2, r0
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	2b64      	cmp	r3, #100	; 0x64
 80094bc:	d901      	bls.n	80094c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80094be:	2303      	movs	r3, #3
 80094c0:	e1f0      	b.n	80098a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094c2:	4b6c      	ldr	r3, [pc, #432]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1f0      	bne.n	80094b0 <HAL_RCC_OscConfig+0xe8>
 80094ce:	e000      	b.n	80094d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 0302 	and.w	r3, r3, #2
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d063      	beq.n	80095a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80094de:	4b65      	ldr	r3, [pc, #404]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f003 030c 	and.w	r3, r3, #12
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00b      	beq.n	8009502 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80094ea:	4b62      	ldr	r3, [pc, #392]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80094f2:	2b08      	cmp	r3, #8
 80094f4:	d11c      	bne.n	8009530 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80094f6:	4b5f      	ldr	r3, [pc, #380]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d116      	bne.n	8009530 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009502:	4b5c      	ldr	r3, [pc, #368]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 0302 	and.w	r3, r3, #2
 800950a:	2b00      	cmp	r3, #0
 800950c:	d005      	beq.n	800951a <HAL_RCC_OscConfig+0x152>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d001      	beq.n	800951a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e1c4      	b.n	80098a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800951a:	4b56      	ldr	r3, [pc, #344]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	00db      	lsls	r3, r3, #3
 8009528:	4952      	ldr	r1, [pc, #328]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 800952a:	4313      	orrs	r3, r2
 800952c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800952e:	e03a      	b.n	80095a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d020      	beq.n	800957a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009538:	4b4f      	ldr	r3, [pc, #316]	; (8009678 <HAL_RCC_OscConfig+0x2b0>)
 800953a:	2201      	movs	r2, #1
 800953c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800953e:	f7fb fb85 	bl	8004c4c <HAL_GetTick>
 8009542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009544:	e008      	b.n	8009558 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009546:	f7fb fb81 	bl	8004c4c <HAL_GetTick>
 800954a:	4602      	mov	r2, r0
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	2b02      	cmp	r3, #2
 8009552:	d901      	bls.n	8009558 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009554:	2303      	movs	r3, #3
 8009556:	e1a5      	b.n	80098a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009558:	4b46      	ldr	r3, [pc, #280]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 0302 	and.w	r3, r3, #2
 8009560:	2b00      	cmp	r3, #0
 8009562:	d0f0      	beq.n	8009546 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009564:	4b43      	ldr	r3, [pc, #268]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	00db      	lsls	r3, r3, #3
 8009572:	4940      	ldr	r1, [pc, #256]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 8009574:	4313      	orrs	r3, r2
 8009576:	600b      	str	r3, [r1, #0]
 8009578:	e015      	b.n	80095a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800957a:	4b3f      	ldr	r3, [pc, #252]	; (8009678 <HAL_RCC_OscConfig+0x2b0>)
 800957c:	2200      	movs	r2, #0
 800957e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009580:	f7fb fb64 	bl	8004c4c <HAL_GetTick>
 8009584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009586:	e008      	b.n	800959a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009588:	f7fb fb60 	bl	8004c4c <HAL_GetTick>
 800958c:	4602      	mov	r2, r0
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	2b02      	cmp	r3, #2
 8009594:	d901      	bls.n	800959a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009596:	2303      	movs	r3, #3
 8009598:	e184      	b.n	80098a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800959a:	4b36      	ldr	r3, [pc, #216]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0302 	and.w	r3, r3, #2
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1f0      	bne.n	8009588 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0308 	and.w	r3, r3, #8
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d030      	beq.n	8009614 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d016      	beq.n	80095e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80095ba:	4b30      	ldr	r3, [pc, #192]	; (800967c <HAL_RCC_OscConfig+0x2b4>)
 80095bc:	2201      	movs	r2, #1
 80095be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095c0:	f7fb fb44 	bl	8004c4c <HAL_GetTick>
 80095c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095c6:	e008      	b.n	80095da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095c8:	f7fb fb40 	bl	8004c4c <HAL_GetTick>
 80095cc:	4602      	mov	r2, r0
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d901      	bls.n	80095da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e164      	b.n	80098a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095da:	4b26      	ldr	r3, [pc, #152]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 80095dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095de:	f003 0302 	and.w	r3, r3, #2
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d0f0      	beq.n	80095c8 <HAL_RCC_OscConfig+0x200>
 80095e6:	e015      	b.n	8009614 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095e8:	4b24      	ldr	r3, [pc, #144]	; (800967c <HAL_RCC_OscConfig+0x2b4>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095ee:	f7fb fb2d 	bl	8004c4c <HAL_GetTick>
 80095f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095f4:	e008      	b.n	8009608 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095f6:	f7fb fb29 	bl	8004c4c <HAL_GetTick>
 80095fa:	4602      	mov	r2, r0
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	2b02      	cmp	r3, #2
 8009602:	d901      	bls.n	8009608 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009604:	2303      	movs	r3, #3
 8009606:	e14d      	b.n	80098a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009608:	4b1a      	ldr	r3, [pc, #104]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 800960a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800960c:	f003 0302 	and.w	r3, r3, #2
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1f0      	bne.n	80095f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0304 	and.w	r3, r3, #4
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 80a0 	beq.w	8009762 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009622:	2300      	movs	r3, #0
 8009624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009626:	4b13      	ldr	r3, [pc, #76]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 8009628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800962e:	2b00      	cmp	r3, #0
 8009630:	d10f      	bne.n	8009652 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009632:	2300      	movs	r3, #0
 8009634:	60bb      	str	r3, [r7, #8]
 8009636:	4b0f      	ldr	r3, [pc, #60]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 8009638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963a:	4a0e      	ldr	r2, [pc, #56]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 800963c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009640:	6413      	str	r3, [r2, #64]	; 0x40
 8009642:	4b0c      	ldr	r3, [pc, #48]	; (8009674 <HAL_RCC_OscConfig+0x2ac>)
 8009644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800964a:	60bb      	str	r3, [r7, #8]
 800964c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800964e:	2301      	movs	r3, #1
 8009650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009652:	4b0b      	ldr	r3, [pc, #44]	; (8009680 <HAL_RCC_OscConfig+0x2b8>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800965a:	2b00      	cmp	r3, #0
 800965c:	d121      	bne.n	80096a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800965e:	4b08      	ldr	r3, [pc, #32]	; (8009680 <HAL_RCC_OscConfig+0x2b8>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a07      	ldr	r2, [pc, #28]	; (8009680 <HAL_RCC_OscConfig+0x2b8>)
 8009664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800966a:	f7fb faef 	bl	8004c4c <HAL_GetTick>
 800966e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009670:	e011      	b.n	8009696 <HAL_RCC_OscConfig+0x2ce>
 8009672:	bf00      	nop
 8009674:	40023800 	.word	0x40023800
 8009678:	42470000 	.word	0x42470000
 800967c:	42470e80 	.word	0x42470e80
 8009680:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009684:	f7fb fae2 	bl	8004c4c <HAL_GetTick>
 8009688:	4602      	mov	r2, r0
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	2b02      	cmp	r3, #2
 8009690:	d901      	bls.n	8009696 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	e106      	b.n	80098a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009696:	4b85      	ldr	r3, [pc, #532]	; (80098ac <HAL_RCC_OscConfig+0x4e4>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d0f0      	beq.n	8009684 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d106      	bne.n	80096b8 <HAL_RCC_OscConfig+0x2f0>
 80096aa:	4b81      	ldr	r3, [pc, #516]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 80096ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ae:	4a80      	ldr	r2, [pc, #512]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 80096b0:	f043 0301 	orr.w	r3, r3, #1
 80096b4:	6713      	str	r3, [r2, #112]	; 0x70
 80096b6:	e01c      	b.n	80096f2 <HAL_RCC_OscConfig+0x32a>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	2b05      	cmp	r3, #5
 80096be:	d10c      	bne.n	80096da <HAL_RCC_OscConfig+0x312>
 80096c0:	4b7b      	ldr	r3, [pc, #492]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 80096c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c4:	4a7a      	ldr	r2, [pc, #488]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 80096c6:	f043 0304 	orr.w	r3, r3, #4
 80096ca:	6713      	str	r3, [r2, #112]	; 0x70
 80096cc:	4b78      	ldr	r3, [pc, #480]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 80096ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d0:	4a77      	ldr	r2, [pc, #476]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 80096d2:	f043 0301 	orr.w	r3, r3, #1
 80096d6:	6713      	str	r3, [r2, #112]	; 0x70
 80096d8:	e00b      	b.n	80096f2 <HAL_RCC_OscConfig+0x32a>
 80096da:	4b75      	ldr	r3, [pc, #468]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 80096dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096de:	4a74      	ldr	r2, [pc, #464]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 80096e0:	f023 0301 	bic.w	r3, r3, #1
 80096e4:	6713      	str	r3, [r2, #112]	; 0x70
 80096e6:	4b72      	ldr	r3, [pc, #456]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 80096e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ea:	4a71      	ldr	r2, [pc, #452]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 80096ec:	f023 0304 	bic.w	r3, r3, #4
 80096f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d015      	beq.n	8009726 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096fa:	f7fb faa7 	bl	8004c4c <HAL_GetTick>
 80096fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009700:	e00a      	b.n	8009718 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009702:	f7fb faa3 	bl	8004c4c <HAL_GetTick>
 8009706:	4602      	mov	r2, r0
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009710:	4293      	cmp	r3, r2
 8009712:	d901      	bls.n	8009718 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009714:	2303      	movs	r3, #3
 8009716:	e0c5      	b.n	80098a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009718:	4b65      	ldr	r3, [pc, #404]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 800971a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971c:	f003 0302 	and.w	r3, r3, #2
 8009720:	2b00      	cmp	r3, #0
 8009722:	d0ee      	beq.n	8009702 <HAL_RCC_OscConfig+0x33a>
 8009724:	e014      	b.n	8009750 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009726:	f7fb fa91 	bl	8004c4c <HAL_GetTick>
 800972a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800972c:	e00a      	b.n	8009744 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800972e:	f7fb fa8d 	bl	8004c4c <HAL_GetTick>
 8009732:	4602      	mov	r2, r0
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	f241 3288 	movw	r2, #5000	; 0x1388
 800973c:	4293      	cmp	r3, r2
 800973e:	d901      	bls.n	8009744 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	e0af      	b.n	80098a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009744:	4b5a      	ldr	r3, [pc, #360]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 8009746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009748:	f003 0302 	and.w	r3, r3, #2
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1ee      	bne.n	800972e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009750:	7dfb      	ldrb	r3, [r7, #23]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d105      	bne.n	8009762 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009756:	4b56      	ldr	r3, [pc, #344]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 8009758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975a:	4a55      	ldr	r2, [pc, #340]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 800975c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009760:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	2b00      	cmp	r3, #0
 8009768:	f000 809b 	beq.w	80098a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800976c:	4b50      	ldr	r3, [pc, #320]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f003 030c 	and.w	r3, r3, #12
 8009774:	2b08      	cmp	r3, #8
 8009776:	d05c      	beq.n	8009832 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	2b02      	cmp	r3, #2
 800977e:	d141      	bne.n	8009804 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009780:	4b4c      	ldr	r3, [pc, #304]	; (80098b4 <HAL_RCC_OscConfig+0x4ec>)
 8009782:	2200      	movs	r2, #0
 8009784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009786:	f7fb fa61 	bl	8004c4c <HAL_GetTick>
 800978a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800978c:	e008      	b.n	80097a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800978e:	f7fb fa5d 	bl	8004c4c <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	2b02      	cmp	r3, #2
 800979a:	d901      	bls.n	80097a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800979c:	2303      	movs	r3, #3
 800979e:	e081      	b.n	80098a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097a0:	4b43      	ldr	r3, [pc, #268]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1f0      	bne.n	800978e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	69da      	ldr	r2, [r3, #28]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	431a      	orrs	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ba:	019b      	lsls	r3, r3, #6
 80097bc:	431a      	orrs	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c2:	085b      	lsrs	r3, r3, #1
 80097c4:	3b01      	subs	r3, #1
 80097c6:	041b      	lsls	r3, r3, #16
 80097c8:	431a      	orrs	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ce:	061b      	lsls	r3, r3, #24
 80097d0:	4937      	ldr	r1, [pc, #220]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 80097d2:	4313      	orrs	r3, r2
 80097d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80097d6:	4b37      	ldr	r3, [pc, #220]	; (80098b4 <HAL_RCC_OscConfig+0x4ec>)
 80097d8:	2201      	movs	r2, #1
 80097da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097dc:	f7fb fa36 	bl	8004c4c <HAL_GetTick>
 80097e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097e2:	e008      	b.n	80097f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097e4:	f7fb fa32 	bl	8004c4c <HAL_GetTick>
 80097e8:	4602      	mov	r2, r0
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d901      	bls.n	80097f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80097f2:	2303      	movs	r3, #3
 80097f4:	e056      	b.n	80098a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097f6:	4b2e      	ldr	r3, [pc, #184]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d0f0      	beq.n	80097e4 <HAL_RCC_OscConfig+0x41c>
 8009802:	e04e      	b.n	80098a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009804:	4b2b      	ldr	r3, [pc, #172]	; (80098b4 <HAL_RCC_OscConfig+0x4ec>)
 8009806:	2200      	movs	r2, #0
 8009808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800980a:	f7fb fa1f 	bl	8004c4c <HAL_GetTick>
 800980e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009810:	e008      	b.n	8009824 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009812:	f7fb fa1b 	bl	8004c4c <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	2b02      	cmp	r3, #2
 800981e:	d901      	bls.n	8009824 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e03f      	b.n	80098a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009824:	4b22      	ldr	r3, [pc, #136]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1f0      	bne.n	8009812 <HAL_RCC_OscConfig+0x44a>
 8009830:	e037      	b.n	80098a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	699b      	ldr	r3, [r3, #24]
 8009836:	2b01      	cmp	r3, #1
 8009838:	d101      	bne.n	800983e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e032      	b.n	80098a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800983e:	4b1c      	ldr	r3, [pc, #112]	; (80098b0 <HAL_RCC_OscConfig+0x4e8>)
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	2b01      	cmp	r3, #1
 800984a:	d028      	beq.n	800989e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009856:	429a      	cmp	r2, r3
 8009858:	d121      	bne.n	800989e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009864:	429a      	cmp	r2, r3
 8009866:	d11a      	bne.n	800989e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800986e:	4013      	ands	r3, r2
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009874:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009876:	4293      	cmp	r3, r2
 8009878:	d111      	bne.n	800989e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009884:	085b      	lsrs	r3, r3, #1
 8009886:	3b01      	subs	r3, #1
 8009888:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800988a:	429a      	cmp	r2, r3
 800988c:	d107      	bne.n	800989e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009898:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800989a:	429a      	cmp	r2, r3
 800989c:	d001      	beq.n	80098a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e000      	b.n	80098a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3718      	adds	r7, #24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	40007000 	.word	0x40007000
 80098b0:	40023800 	.word	0x40023800
 80098b4:	42470060 	.word	0x42470060

080098b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d101      	bne.n	80098cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e0cc      	b.n	8009a66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80098cc:	4b68      	ldr	r3, [pc, #416]	; (8009a70 <HAL_RCC_ClockConfig+0x1b8>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 0307 	and.w	r3, r3, #7
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d90c      	bls.n	80098f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098da:	4b65      	ldr	r3, [pc, #404]	; (8009a70 <HAL_RCC_ClockConfig+0x1b8>)
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	b2d2      	uxtb	r2, r2
 80098e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80098e2:	4b63      	ldr	r3, [pc, #396]	; (8009a70 <HAL_RCC_ClockConfig+0x1b8>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 0307 	and.w	r3, r3, #7
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d001      	beq.n	80098f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e0b8      	b.n	8009a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 0302 	and.w	r3, r3, #2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d020      	beq.n	8009942 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 0304 	and.w	r3, r3, #4
 8009908:	2b00      	cmp	r3, #0
 800990a:	d005      	beq.n	8009918 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800990c:	4b59      	ldr	r3, [pc, #356]	; (8009a74 <HAL_RCC_ClockConfig+0x1bc>)
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	4a58      	ldr	r2, [pc, #352]	; (8009a74 <HAL_RCC_ClockConfig+0x1bc>)
 8009912:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009916:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0308 	and.w	r3, r3, #8
 8009920:	2b00      	cmp	r3, #0
 8009922:	d005      	beq.n	8009930 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009924:	4b53      	ldr	r3, [pc, #332]	; (8009a74 <HAL_RCC_ClockConfig+0x1bc>)
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	4a52      	ldr	r2, [pc, #328]	; (8009a74 <HAL_RCC_ClockConfig+0x1bc>)
 800992a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800992e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009930:	4b50      	ldr	r3, [pc, #320]	; (8009a74 <HAL_RCC_ClockConfig+0x1bc>)
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	494d      	ldr	r1, [pc, #308]	; (8009a74 <HAL_RCC_ClockConfig+0x1bc>)
 800993e:	4313      	orrs	r3, r2
 8009940:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 0301 	and.w	r3, r3, #1
 800994a:	2b00      	cmp	r3, #0
 800994c:	d044      	beq.n	80099d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d107      	bne.n	8009966 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009956:	4b47      	ldr	r3, [pc, #284]	; (8009a74 <HAL_RCC_ClockConfig+0x1bc>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800995e:	2b00      	cmp	r3, #0
 8009960:	d119      	bne.n	8009996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e07f      	b.n	8009a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	2b02      	cmp	r3, #2
 800996c:	d003      	beq.n	8009976 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009972:	2b03      	cmp	r3, #3
 8009974:	d107      	bne.n	8009986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009976:	4b3f      	ldr	r3, [pc, #252]	; (8009a74 <HAL_RCC_ClockConfig+0x1bc>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800997e:	2b00      	cmp	r3, #0
 8009980:	d109      	bne.n	8009996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e06f      	b.n	8009a66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009986:	4b3b      	ldr	r3, [pc, #236]	; (8009a74 <HAL_RCC_ClockConfig+0x1bc>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0302 	and.w	r3, r3, #2
 800998e:	2b00      	cmp	r3, #0
 8009990:	d101      	bne.n	8009996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	e067      	b.n	8009a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009996:	4b37      	ldr	r3, [pc, #220]	; (8009a74 <HAL_RCC_ClockConfig+0x1bc>)
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	f023 0203 	bic.w	r2, r3, #3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	4934      	ldr	r1, [pc, #208]	; (8009a74 <HAL_RCC_ClockConfig+0x1bc>)
 80099a4:	4313      	orrs	r3, r2
 80099a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80099a8:	f7fb f950 	bl	8004c4c <HAL_GetTick>
 80099ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099ae:	e00a      	b.n	80099c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099b0:	f7fb f94c 	bl	8004c4c <HAL_GetTick>
 80099b4:	4602      	mov	r2, r0
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80099be:	4293      	cmp	r3, r2
 80099c0:	d901      	bls.n	80099c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e04f      	b.n	8009a66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099c6:	4b2b      	ldr	r3, [pc, #172]	; (8009a74 <HAL_RCC_ClockConfig+0x1bc>)
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	f003 020c 	and.w	r2, r3, #12
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d1eb      	bne.n	80099b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80099d8:	4b25      	ldr	r3, [pc, #148]	; (8009a70 <HAL_RCC_ClockConfig+0x1b8>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0307 	and.w	r3, r3, #7
 80099e0:	683a      	ldr	r2, [r7, #0]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d20c      	bcs.n	8009a00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099e6:	4b22      	ldr	r3, [pc, #136]	; (8009a70 <HAL_RCC_ClockConfig+0x1b8>)
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	b2d2      	uxtb	r2, r2
 80099ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099ee:	4b20      	ldr	r3, [pc, #128]	; (8009a70 <HAL_RCC_ClockConfig+0x1b8>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f003 0307 	and.w	r3, r3, #7
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d001      	beq.n	8009a00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e032      	b.n	8009a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d008      	beq.n	8009a1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a0c:	4b19      	ldr	r3, [pc, #100]	; (8009a74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	4916      	ldr	r1, [pc, #88]	; (8009a74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 0308 	and.w	r3, r3, #8
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d009      	beq.n	8009a3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009a2a:	4b12      	ldr	r3, [pc, #72]	; (8009a74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	00db      	lsls	r3, r3, #3
 8009a38:	490e      	ldr	r1, [pc, #56]	; (8009a74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009a3e:	f000 f821 	bl	8009a84 <HAL_RCC_GetSysClockFreq>
 8009a42:	4602      	mov	r2, r0
 8009a44:	4b0b      	ldr	r3, [pc, #44]	; (8009a74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	091b      	lsrs	r3, r3, #4
 8009a4a:	f003 030f 	and.w	r3, r3, #15
 8009a4e:	490a      	ldr	r1, [pc, #40]	; (8009a78 <HAL_RCC_ClockConfig+0x1c0>)
 8009a50:	5ccb      	ldrb	r3, [r1, r3]
 8009a52:	fa22 f303 	lsr.w	r3, r2, r3
 8009a56:	4a09      	ldr	r2, [pc, #36]	; (8009a7c <HAL_RCC_ClockConfig+0x1c4>)
 8009a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009a5a:	4b09      	ldr	r3, [pc, #36]	; (8009a80 <HAL_RCC_ClockConfig+0x1c8>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7fa facc 	bl	8003ffc <HAL_InitTick>

  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	40023c00 	.word	0x40023c00
 8009a74:	40023800 	.word	0x40023800
 8009a78:	080140f8 	.word	0x080140f8
 8009a7c:	2000000c 	.word	0x2000000c
 8009a80:	20000010 	.word	0x20000010

08009a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a84:	b5b0      	push	{r4, r5, r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	6079      	str	r1, [r7, #4]
 8009a8e:	2100      	movs	r1, #0
 8009a90:	60f9      	str	r1, [r7, #12]
 8009a92:	2100      	movs	r1, #0
 8009a94:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009a96:	2100      	movs	r1, #0
 8009a98:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a9a:	4952      	ldr	r1, [pc, #328]	; (8009be4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009a9c:	6889      	ldr	r1, [r1, #8]
 8009a9e:	f001 010c 	and.w	r1, r1, #12
 8009aa2:	2908      	cmp	r1, #8
 8009aa4:	d00d      	beq.n	8009ac2 <HAL_RCC_GetSysClockFreq+0x3e>
 8009aa6:	2908      	cmp	r1, #8
 8009aa8:	f200 8094 	bhi.w	8009bd4 <HAL_RCC_GetSysClockFreq+0x150>
 8009aac:	2900      	cmp	r1, #0
 8009aae:	d002      	beq.n	8009ab6 <HAL_RCC_GetSysClockFreq+0x32>
 8009ab0:	2904      	cmp	r1, #4
 8009ab2:	d003      	beq.n	8009abc <HAL_RCC_GetSysClockFreq+0x38>
 8009ab4:	e08e      	b.n	8009bd4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009ab6:	4b4c      	ldr	r3, [pc, #304]	; (8009be8 <HAL_RCC_GetSysClockFreq+0x164>)
 8009ab8:	60bb      	str	r3, [r7, #8]
       break;
 8009aba:	e08e      	b.n	8009bda <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009abc:	4b4b      	ldr	r3, [pc, #300]	; (8009bec <HAL_RCC_GetSysClockFreq+0x168>)
 8009abe:	60bb      	str	r3, [r7, #8]
      break;
 8009ac0:	e08b      	b.n	8009bda <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ac2:	4948      	ldr	r1, [pc, #288]	; (8009be4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009ac4:	6849      	ldr	r1, [r1, #4]
 8009ac6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009aca:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009acc:	4945      	ldr	r1, [pc, #276]	; (8009be4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009ace:	6849      	ldr	r1, [r1, #4]
 8009ad0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009ad4:	2900      	cmp	r1, #0
 8009ad6:	d024      	beq.n	8009b22 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ad8:	4942      	ldr	r1, [pc, #264]	; (8009be4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009ada:	6849      	ldr	r1, [r1, #4]
 8009adc:	0989      	lsrs	r1, r1, #6
 8009ade:	4608      	mov	r0, r1
 8009ae0:	f04f 0100 	mov.w	r1, #0
 8009ae4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009ae8:	f04f 0500 	mov.w	r5, #0
 8009aec:	ea00 0204 	and.w	r2, r0, r4
 8009af0:	ea01 0305 	and.w	r3, r1, r5
 8009af4:	493d      	ldr	r1, [pc, #244]	; (8009bec <HAL_RCC_GetSysClockFreq+0x168>)
 8009af6:	fb01 f003 	mul.w	r0, r1, r3
 8009afa:	2100      	movs	r1, #0
 8009afc:	fb01 f102 	mul.w	r1, r1, r2
 8009b00:	1844      	adds	r4, r0, r1
 8009b02:	493a      	ldr	r1, [pc, #232]	; (8009bec <HAL_RCC_GetSysClockFreq+0x168>)
 8009b04:	fba2 0101 	umull	r0, r1, r2, r1
 8009b08:	1863      	adds	r3, r4, r1
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	f04f 0300 	mov.w	r3, #0
 8009b14:	f7f7 f8a0 	bl	8000c58 <__aeabi_uldivmod>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	60fb      	str	r3, [r7, #12]
 8009b20:	e04a      	b.n	8009bb8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b22:	4b30      	ldr	r3, [pc, #192]	; (8009be4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	099b      	lsrs	r3, r3, #6
 8009b28:	461a      	mov	r2, r3
 8009b2a:	f04f 0300 	mov.w	r3, #0
 8009b2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009b32:	f04f 0100 	mov.w	r1, #0
 8009b36:	ea02 0400 	and.w	r4, r2, r0
 8009b3a:	ea03 0501 	and.w	r5, r3, r1
 8009b3e:	4620      	mov	r0, r4
 8009b40:	4629      	mov	r1, r5
 8009b42:	f04f 0200 	mov.w	r2, #0
 8009b46:	f04f 0300 	mov.w	r3, #0
 8009b4a:	014b      	lsls	r3, r1, #5
 8009b4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009b50:	0142      	lsls	r2, r0, #5
 8009b52:	4610      	mov	r0, r2
 8009b54:	4619      	mov	r1, r3
 8009b56:	1b00      	subs	r0, r0, r4
 8009b58:	eb61 0105 	sbc.w	r1, r1, r5
 8009b5c:	f04f 0200 	mov.w	r2, #0
 8009b60:	f04f 0300 	mov.w	r3, #0
 8009b64:	018b      	lsls	r3, r1, #6
 8009b66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009b6a:	0182      	lsls	r2, r0, #6
 8009b6c:	1a12      	subs	r2, r2, r0
 8009b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8009b72:	f04f 0000 	mov.w	r0, #0
 8009b76:	f04f 0100 	mov.w	r1, #0
 8009b7a:	00d9      	lsls	r1, r3, #3
 8009b7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009b80:	00d0      	lsls	r0, r2, #3
 8009b82:	4602      	mov	r2, r0
 8009b84:	460b      	mov	r3, r1
 8009b86:	1912      	adds	r2, r2, r4
 8009b88:	eb45 0303 	adc.w	r3, r5, r3
 8009b8c:	f04f 0000 	mov.w	r0, #0
 8009b90:	f04f 0100 	mov.w	r1, #0
 8009b94:	0299      	lsls	r1, r3, #10
 8009b96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009b9a:	0290      	lsls	r0, r2, #10
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	f04f 0300 	mov.w	r3, #0
 8009bac:	f7f7 f854 	bl	8000c58 <__aeabi_uldivmod>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009bb8:	4b0a      	ldr	r3, [pc, #40]	; (8009be4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	0c1b      	lsrs	r3, r3, #16
 8009bbe:	f003 0303 	and.w	r3, r3, #3
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	005b      	lsls	r3, r3, #1
 8009bc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bd0:	60bb      	str	r3, [r7, #8]
      break;
 8009bd2:	e002      	b.n	8009bda <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009bd4:	4b04      	ldr	r3, [pc, #16]	; (8009be8 <HAL_RCC_GetSysClockFreq+0x164>)
 8009bd6:	60bb      	str	r3, [r7, #8]
      break;
 8009bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009bda:	68bb      	ldr	r3, [r7, #8]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bdb0      	pop	{r4, r5, r7, pc}
 8009be4:	40023800 	.word	0x40023800
 8009be8:	00f42400 	.word	0x00f42400
 8009bec:	016e3600 	.word	0x016e3600

08009bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009bf4:	4b03      	ldr	r3, [pc, #12]	; (8009c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	2000000c 	.word	0x2000000c

08009c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009c0c:	f7ff fff0 	bl	8009bf0 <HAL_RCC_GetHCLKFreq>
 8009c10:	4602      	mov	r2, r0
 8009c12:	4b05      	ldr	r3, [pc, #20]	; (8009c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	0a9b      	lsrs	r3, r3, #10
 8009c18:	f003 0307 	and.w	r3, r3, #7
 8009c1c:	4903      	ldr	r1, [pc, #12]	; (8009c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c1e:	5ccb      	ldrb	r3, [r1, r3]
 8009c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	40023800 	.word	0x40023800
 8009c2c:	08014108 	.word	0x08014108

08009c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009c34:	f7ff ffdc 	bl	8009bf0 <HAL_RCC_GetHCLKFreq>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	4b05      	ldr	r3, [pc, #20]	; (8009c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	0b5b      	lsrs	r3, r3, #13
 8009c40:	f003 0307 	and.w	r3, r3, #7
 8009c44:	4903      	ldr	r1, [pc, #12]	; (8009c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c46:	5ccb      	ldrb	r3, [r1, r3]
 8009c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	40023800 	.word	0x40023800
 8009c54:	08014108 	.word	0x08014108

08009c58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	220f      	movs	r2, #15
 8009c66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009c68:	4b12      	ldr	r3, [pc, #72]	; (8009cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f003 0203 	and.w	r2, r3, #3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009c74:	4b0f      	ldr	r3, [pc, #60]	; (8009cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009c80:	4b0c      	ldr	r3, [pc, #48]	; (8009cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009c8c:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	08db      	lsrs	r3, r3, #3
 8009c92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009c9a:	4b07      	ldr	r3, [pc, #28]	; (8009cb8 <HAL_RCC_GetClockConfig+0x60>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f003 0207 	and.w	r2, r3, #7
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	601a      	str	r2, [r3, #0]
}
 8009ca6:	bf00      	nop
 8009ca8:	370c      	adds	r7, #12
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	40023800 	.word	0x40023800
 8009cb8:	40023c00 	.word	0x40023c00

08009cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d101      	bne.n	8009cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e041      	b.n	8009d52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d106      	bne.n	8009ce8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f7fa fd0e 	bl	8004704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2202      	movs	r2, #2
 8009cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	3304      	adds	r3, #4
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	f000 fd48 	bl	800a790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
	...

08009d5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d001      	beq.n	8009d74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e044      	b.n	8009dfe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2202      	movs	r2, #2
 8009d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68da      	ldr	r2, [r3, #12]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f042 0201 	orr.w	r2, r2, #1
 8009d8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a1e      	ldr	r2, [pc, #120]	; (8009e0c <HAL_TIM_Base_Start_IT+0xb0>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d018      	beq.n	8009dc8 <HAL_TIM_Base_Start_IT+0x6c>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d9e:	d013      	beq.n	8009dc8 <HAL_TIM_Base_Start_IT+0x6c>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a1a      	ldr	r2, [pc, #104]	; (8009e10 <HAL_TIM_Base_Start_IT+0xb4>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d00e      	beq.n	8009dc8 <HAL_TIM_Base_Start_IT+0x6c>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a19      	ldr	r2, [pc, #100]	; (8009e14 <HAL_TIM_Base_Start_IT+0xb8>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d009      	beq.n	8009dc8 <HAL_TIM_Base_Start_IT+0x6c>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a17      	ldr	r2, [pc, #92]	; (8009e18 <HAL_TIM_Base_Start_IT+0xbc>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d004      	beq.n	8009dc8 <HAL_TIM_Base_Start_IT+0x6c>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a16      	ldr	r2, [pc, #88]	; (8009e1c <HAL_TIM_Base_Start_IT+0xc0>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d111      	bne.n	8009dec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	f003 0307 	and.w	r3, r3, #7
 8009dd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2b06      	cmp	r3, #6
 8009dd8:	d010      	beq.n	8009dfc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f042 0201 	orr.w	r2, r2, #1
 8009de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dea:	e007      	b.n	8009dfc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f042 0201 	orr.w	r2, r2, #1
 8009dfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3714      	adds	r7, #20
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	40010000 	.word	0x40010000
 8009e10:	40000400 	.word	0x40000400
 8009e14:	40000800 	.word	0x40000800
 8009e18:	40000c00 	.word	0x40000c00
 8009e1c:	40014000 	.word	0x40014000

08009e20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e041      	b.n	8009eb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d106      	bne.n	8009e4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f839 	bl	8009ebe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2202      	movs	r2, #2
 8009e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4610      	mov	r0, r2
 8009e60:	f000 fc96 	bl	800a790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b083      	sub	sp, #12
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009ec6:	bf00      	nop
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
	...

08009ed4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d109      	bne.n	8009ef8 <HAL_TIM_PWM_Start+0x24>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	bf14      	ite	ne
 8009ef0:	2301      	movne	r3, #1
 8009ef2:	2300      	moveq	r3, #0
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	e022      	b.n	8009f3e <HAL_TIM_PWM_Start+0x6a>
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	d109      	bne.n	8009f12 <HAL_TIM_PWM_Start+0x3e>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	bf14      	ite	ne
 8009f0a:	2301      	movne	r3, #1
 8009f0c:	2300      	moveq	r3, #0
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	e015      	b.n	8009f3e <HAL_TIM_PWM_Start+0x6a>
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b08      	cmp	r3, #8
 8009f16:	d109      	bne.n	8009f2c <HAL_TIM_PWM_Start+0x58>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	bf14      	ite	ne
 8009f24:	2301      	movne	r3, #1
 8009f26:	2300      	moveq	r3, #0
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	e008      	b.n	8009f3e <HAL_TIM_PWM_Start+0x6a>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	bf14      	ite	ne
 8009f38:	2301      	movne	r3, #1
 8009f3a:	2300      	moveq	r3, #0
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d001      	beq.n	8009f46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e068      	b.n	800a018 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d104      	bne.n	8009f56 <HAL_TIM_PWM_Start+0x82>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2202      	movs	r2, #2
 8009f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f54:	e013      	b.n	8009f7e <HAL_TIM_PWM_Start+0xaa>
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2b04      	cmp	r3, #4
 8009f5a:	d104      	bne.n	8009f66 <HAL_TIM_PWM_Start+0x92>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2202      	movs	r2, #2
 8009f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f64:	e00b      	b.n	8009f7e <HAL_TIM_PWM_Start+0xaa>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	2b08      	cmp	r3, #8
 8009f6a:	d104      	bne.n	8009f76 <HAL_TIM_PWM_Start+0xa2>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2202      	movs	r2, #2
 8009f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f74:	e003      	b.n	8009f7e <HAL_TIM_PWM_Start+0xaa>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2202      	movs	r2, #2
 8009f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2201      	movs	r2, #1
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f000 fea8 	bl	800acdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a23      	ldr	r2, [pc, #140]	; (800a020 <HAL_TIM_PWM_Start+0x14c>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d107      	bne.n	8009fa6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009fa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a1d      	ldr	r2, [pc, #116]	; (800a020 <HAL_TIM_PWM_Start+0x14c>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d018      	beq.n	8009fe2 <HAL_TIM_PWM_Start+0x10e>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fb8:	d013      	beq.n	8009fe2 <HAL_TIM_PWM_Start+0x10e>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a19      	ldr	r2, [pc, #100]	; (800a024 <HAL_TIM_PWM_Start+0x150>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d00e      	beq.n	8009fe2 <HAL_TIM_PWM_Start+0x10e>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a17      	ldr	r2, [pc, #92]	; (800a028 <HAL_TIM_PWM_Start+0x154>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d009      	beq.n	8009fe2 <HAL_TIM_PWM_Start+0x10e>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a16      	ldr	r2, [pc, #88]	; (800a02c <HAL_TIM_PWM_Start+0x158>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d004      	beq.n	8009fe2 <HAL_TIM_PWM_Start+0x10e>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a14      	ldr	r2, [pc, #80]	; (800a030 <HAL_TIM_PWM_Start+0x15c>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d111      	bne.n	800a006 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	f003 0307 	and.w	r3, r3, #7
 8009fec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2b06      	cmp	r3, #6
 8009ff2:	d010      	beq.n	800a016 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f042 0201 	orr.w	r2, r2, #1
 800a002:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a004:	e007      	b.n	800a016 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f042 0201 	orr.w	r2, r2, #1
 800a014:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	40010000 	.word	0x40010000
 800a024:	40000400 	.word	0x40000400
 800a028:	40000800 	.word	0x40000800
 800a02c:	40000c00 	.word	0x40000c00
 800a030:	40014000 	.word	0x40014000

0800a034 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d109      	bne.n	800a05c <HAL_TIM_PWM_Start_IT+0x28>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	2b01      	cmp	r3, #1
 800a052:	bf14      	ite	ne
 800a054:	2301      	movne	r3, #1
 800a056:	2300      	moveq	r3, #0
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	e022      	b.n	800a0a2 <HAL_TIM_PWM_Start_IT+0x6e>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	2b04      	cmp	r3, #4
 800a060:	d109      	bne.n	800a076 <HAL_TIM_PWM_Start_IT+0x42>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	bf14      	ite	ne
 800a06e:	2301      	movne	r3, #1
 800a070:	2300      	moveq	r3, #0
 800a072:	b2db      	uxtb	r3, r3
 800a074:	e015      	b.n	800a0a2 <HAL_TIM_PWM_Start_IT+0x6e>
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b08      	cmp	r3, #8
 800a07a:	d109      	bne.n	800a090 <HAL_TIM_PWM_Start_IT+0x5c>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b01      	cmp	r3, #1
 800a086:	bf14      	ite	ne
 800a088:	2301      	movne	r3, #1
 800a08a:	2300      	moveq	r3, #0
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	e008      	b.n	800a0a2 <HAL_TIM_PWM_Start_IT+0x6e>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2b01      	cmp	r3, #1
 800a09a:	bf14      	ite	ne
 800a09c:	2301      	movne	r3, #1
 800a09e:	2300      	moveq	r3, #0
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d001      	beq.n	800a0aa <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e0b3      	b.n	800a212 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d104      	bne.n	800a0ba <HAL_TIM_PWM_Start_IT+0x86>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2202      	movs	r2, #2
 800a0b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0b8:	e013      	b.n	800a0e2 <HAL_TIM_PWM_Start_IT+0xae>
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2b04      	cmp	r3, #4
 800a0be:	d104      	bne.n	800a0ca <HAL_TIM_PWM_Start_IT+0x96>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0c8:	e00b      	b.n	800a0e2 <HAL_TIM_PWM_Start_IT+0xae>
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	2b08      	cmp	r3, #8
 800a0ce:	d104      	bne.n	800a0da <HAL_TIM_PWM_Start_IT+0xa6>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0d8:	e003      	b.n	800a0e2 <HAL_TIM_PWM_Start_IT+0xae>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2202      	movs	r2, #2
 800a0de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	2b0c      	cmp	r3, #12
 800a0e6:	d841      	bhi.n	800a16c <HAL_TIM_PWM_Start_IT+0x138>
 800a0e8:	a201      	add	r2, pc, #4	; (adr r2, 800a0f0 <HAL_TIM_PWM_Start_IT+0xbc>)
 800a0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ee:	bf00      	nop
 800a0f0:	0800a125 	.word	0x0800a125
 800a0f4:	0800a16d 	.word	0x0800a16d
 800a0f8:	0800a16d 	.word	0x0800a16d
 800a0fc:	0800a16d 	.word	0x0800a16d
 800a100:	0800a137 	.word	0x0800a137
 800a104:	0800a16d 	.word	0x0800a16d
 800a108:	0800a16d 	.word	0x0800a16d
 800a10c:	0800a16d 	.word	0x0800a16d
 800a110:	0800a149 	.word	0x0800a149
 800a114:	0800a16d 	.word	0x0800a16d
 800a118:	0800a16d 	.word	0x0800a16d
 800a11c:	0800a16d 	.word	0x0800a16d
 800a120:	0800a15b 	.word	0x0800a15b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68da      	ldr	r2, [r3, #12]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f042 0202 	orr.w	r2, r2, #2
 800a132:	60da      	str	r2, [r3, #12]
      break;
 800a134:	e01d      	b.n	800a172 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68da      	ldr	r2, [r3, #12]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f042 0204 	orr.w	r2, r2, #4
 800a144:	60da      	str	r2, [r3, #12]
      break;
 800a146:	e014      	b.n	800a172 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68da      	ldr	r2, [r3, #12]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f042 0208 	orr.w	r2, r2, #8
 800a156:	60da      	str	r2, [r3, #12]
      break;
 800a158:	e00b      	b.n	800a172 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	68da      	ldr	r2, [r3, #12]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f042 0210 	orr.w	r2, r2, #16
 800a168:	60da      	str	r2, [r3, #12]
      break;
 800a16a:	e002      	b.n	800a172 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800a16c:	2301      	movs	r3, #1
 800a16e:	73fb      	strb	r3, [r7, #15]
      break;
 800a170:	bf00      	nop
  }

  if (status == HAL_OK)
 800a172:	7bfb      	ldrb	r3, [r7, #15]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d14b      	bne.n	800a210 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2201      	movs	r2, #1
 800a17e:	6839      	ldr	r1, [r7, #0]
 800a180:	4618      	mov	r0, r3
 800a182:	f000 fdab 	bl	800acdc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a24      	ldr	r2, [pc, #144]	; (800a21c <HAL_TIM_PWM_Start_IT+0x1e8>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d107      	bne.n	800a1a0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a19e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a1d      	ldr	r2, [pc, #116]	; (800a21c <HAL_TIM_PWM_Start_IT+0x1e8>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d018      	beq.n	800a1dc <HAL_TIM_PWM_Start_IT+0x1a8>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1b2:	d013      	beq.n	800a1dc <HAL_TIM_PWM_Start_IT+0x1a8>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a19      	ldr	r2, [pc, #100]	; (800a220 <HAL_TIM_PWM_Start_IT+0x1ec>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d00e      	beq.n	800a1dc <HAL_TIM_PWM_Start_IT+0x1a8>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a18      	ldr	r2, [pc, #96]	; (800a224 <HAL_TIM_PWM_Start_IT+0x1f0>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d009      	beq.n	800a1dc <HAL_TIM_PWM_Start_IT+0x1a8>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a16      	ldr	r2, [pc, #88]	; (800a228 <HAL_TIM_PWM_Start_IT+0x1f4>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d004      	beq.n	800a1dc <HAL_TIM_PWM_Start_IT+0x1a8>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a15      	ldr	r2, [pc, #84]	; (800a22c <HAL_TIM_PWM_Start_IT+0x1f8>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d111      	bne.n	800a200 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	f003 0307 	and.w	r3, r3, #7
 800a1e6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	2b06      	cmp	r3, #6
 800a1ec:	d010      	beq.n	800a210 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f042 0201 	orr.w	r2, r2, #1
 800a1fc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1fe:	e007      	b.n	800a210 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f042 0201 	orr.w	r2, r2, #1
 800a20e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800a210:	7bfb      	ldrb	r3, [r7, #15]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	40010000 	.word	0x40010000
 800a220:	40000400 	.word	0x40000400
 800a224:	40000800 	.word	0x40000800
 800a228:	40000c00 	.word	0x40000c00
 800a22c:	40014000 	.word	0x40014000

0800a230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	f003 0302 	and.w	r3, r3, #2
 800a242:	2b02      	cmp	r3, #2
 800a244:	d122      	bne.n	800a28c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	f003 0302 	and.w	r3, r3, #2
 800a250:	2b02      	cmp	r3, #2
 800a252:	d11b      	bne.n	800a28c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f06f 0202 	mvn.w	r2, #2
 800a25c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	f003 0303 	and.w	r3, r3, #3
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d003      	beq.n	800a27a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fa77 	bl	800a766 <HAL_TIM_IC_CaptureCallback>
 800a278:	e005      	b.n	800a286 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 fa69 	bl	800a752 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f7f8 f8ad 	bl	80023e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	f003 0304 	and.w	r3, r3, #4
 800a296:	2b04      	cmp	r3, #4
 800a298:	d122      	bne.n	800a2e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	f003 0304 	and.w	r3, r3, #4
 800a2a4:	2b04      	cmp	r3, #4
 800a2a6:	d11b      	bne.n	800a2e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f06f 0204 	mvn.w	r2, #4
 800a2b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2202      	movs	r2, #2
 800a2b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	699b      	ldr	r3, [r3, #24]
 800a2be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d003      	beq.n	800a2ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fa4d 	bl	800a766 <HAL_TIM_IC_CaptureCallback>
 800a2cc:	e005      	b.n	800a2da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fa3f 	bl	800a752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f7f8 f883 	bl	80023e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	f003 0308 	and.w	r3, r3, #8
 800a2ea:	2b08      	cmp	r3, #8
 800a2ec:	d122      	bne.n	800a334 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	f003 0308 	and.w	r3, r3, #8
 800a2f8:	2b08      	cmp	r3, #8
 800a2fa:	d11b      	bne.n	800a334 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f06f 0208 	mvn.w	r2, #8
 800a304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2204      	movs	r2, #4
 800a30a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	f003 0303 	and.w	r3, r3, #3
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fa23 	bl	800a766 <HAL_TIM_IC_CaptureCallback>
 800a320:	e005      	b.n	800a32e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fa15 	bl	800a752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f7f8 f859 	bl	80023e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	f003 0310 	and.w	r3, r3, #16
 800a33e:	2b10      	cmp	r3, #16
 800a340:	d122      	bne.n	800a388 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	f003 0310 	and.w	r3, r3, #16
 800a34c:	2b10      	cmp	r3, #16
 800a34e:	d11b      	bne.n	800a388 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f06f 0210 	mvn.w	r2, #16
 800a358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2208      	movs	r2, #8
 800a35e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	69db      	ldr	r3, [r3, #28]
 800a366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d003      	beq.n	800a376 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f9f9 	bl	800a766 <HAL_TIM_IC_CaptureCallback>
 800a374:	e005      	b.n	800a382 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f9eb 	bl	800a752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7f8 f82f 	bl	80023e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	f003 0301 	and.w	r3, r3, #1
 800a392:	2b01      	cmp	r3, #1
 800a394:	d10e      	bne.n	800a3b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	f003 0301 	and.w	r3, r3, #1
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d107      	bne.n	800a3b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f06f 0201 	mvn.w	r2, #1
 800a3ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7f9 fd0c 	bl	8003dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3be:	2b80      	cmp	r3, #128	; 0x80
 800a3c0:	d10e      	bne.n	800a3e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3cc:	2b80      	cmp	r3, #128	; 0x80
 800a3ce:	d107      	bne.n	800a3e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a3d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fe00 	bl	800afe0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	691b      	ldr	r3, [r3, #16]
 800a3e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ea:	2b40      	cmp	r3, #64	; 0x40
 800a3ec:	d10e      	bne.n	800a40c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f8:	2b40      	cmp	r3, #64	; 0x40
 800a3fa:	d107      	bne.n	800a40c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f9b7 	bl	800a77a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	f003 0320 	and.w	r3, r3, #32
 800a416:	2b20      	cmp	r3, #32
 800a418:	d10e      	bne.n	800a438 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	f003 0320 	and.w	r3, r3, #32
 800a424:	2b20      	cmp	r3, #32
 800a426:	d107      	bne.n	800a438 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f06f 0220 	mvn.w	r2, #32
 800a430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 fdca 	bl	800afcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a438:	bf00      	nop
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a456:	2b01      	cmp	r3, #1
 800a458:	d101      	bne.n	800a45e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a45a:	2302      	movs	r3, #2
 800a45c:	e0ae      	b.n	800a5bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2b0c      	cmp	r3, #12
 800a46a:	f200 809f 	bhi.w	800a5ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a46e:	a201      	add	r2, pc, #4	; (adr r2, 800a474 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a474:	0800a4a9 	.word	0x0800a4a9
 800a478:	0800a5ad 	.word	0x0800a5ad
 800a47c:	0800a5ad 	.word	0x0800a5ad
 800a480:	0800a5ad 	.word	0x0800a5ad
 800a484:	0800a4e9 	.word	0x0800a4e9
 800a488:	0800a5ad 	.word	0x0800a5ad
 800a48c:	0800a5ad 	.word	0x0800a5ad
 800a490:	0800a5ad 	.word	0x0800a5ad
 800a494:	0800a52b 	.word	0x0800a52b
 800a498:	0800a5ad 	.word	0x0800a5ad
 800a49c:	0800a5ad 	.word	0x0800a5ad
 800a4a0:	0800a5ad 	.word	0x0800a5ad
 800a4a4:	0800a56b 	.word	0x0800a56b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68b9      	ldr	r1, [r7, #8]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f000 f9ee 	bl	800a890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	699a      	ldr	r2, [r3, #24]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f042 0208 	orr.w	r2, r2, #8
 800a4c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	699a      	ldr	r2, [r3, #24]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f022 0204 	bic.w	r2, r2, #4
 800a4d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6999      	ldr	r1, [r3, #24]
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	691a      	ldr	r2, [r3, #16]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	619a      	str	r2, [r3, #24]
      break;
 800a4e6:	e064      	b.n	800a5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68b9      	ldr	r1, [r7, #8]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 fa34 	bl	800a95c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	699a      	ldr	r2, [r3, #24]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	699a      	ldr	r2, [r3, #24]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6999      	ldr	r1, [r3, #24]
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	021a      	lsls	r2, r3, #8
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	430a      	orrs	r2, r1
 800a526:	619a      	str	r2, [r3, #24]
      break;
 800a528:	e043      	b.n	800a5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68b9      	ldr	r1, [r7, #8]
 800a530:	4618      	mov	r0, r3
 800a532:	f000 fa7f 	bl	800aa34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	69da      	ldr	r2, [r3, #28]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f042 0208 	orr.w	r2, r2, #8
 800a544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	69da      	ldr	r2, [r3, #28]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f022 0204 	bic.w	r2, r2, #4
 800a554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	69d9      	ldr	r1, [r3, #28]
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	691a      	ldr	r2, [r3, #16]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	430a      	orrs	r2, r1
 800a566:	61da      	str	r2, [r3, #28]
      break;
 800a568:	e023      	b.n	800a5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68b9      	ldr	r1, [r7, #8]
 800a570:	4618      	mov	r0, r3
 800a572:	f000 fac9 	bl	800ab08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	69da      	ldr	r2, [r3, #28]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	69da      	ldr	r2, [r3, #28]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	69d9      	ldr	r1, [r3, #28]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	021a      	lsls	r2, r3, #8
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	61da      	str	r2, [r3, #28]
      break;
 800a5aa:	e002      	b.n	800a5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a5b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d101      	bne.n	800a5e0 <HAL_TIM_ConfigClockSource+0x1c>
 800a5dc:	2302      	movs	r3, #2
 800a5de:	e0b4      	b.n	800a74a <HAL_TIM_ConfigClockSource+0x186>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a606:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a618:	d03e      	beq.n	800a698 <HAL_TIM_ConfigClockSource+0xd4>
 800a61a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a61e:	f200 8087 	bhi.w	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a626:	f000 8086 	beq.w	800a736 <HAL_TIM_ConfigClockSource+0x172>
 800a62a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a62e:	d87f      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a630:	2b70      	cmp	r3, #112	; 0x70
 800a632:	d01a      	beq.n	800a66a <HAL_TIM_ConfigClockSource+0xa6>
 800a634:	2b70      	cmp	r3, #112	; 0x70
 800a636:	d87b      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a638:	2b60      	cmp	r3, #96	; 0x60
 800a63a:	d050      	beq.n	800a6de <HAL_TIM_ConfigClockSource+0x11a>
 800a63c:	2b60      	cmp	r3, #96	; 0x60
 800a63e:	d877      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a640:	2b50      	cmp	r3, #80	; 0x50
 800a642:	d03c      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0xfa>
 800a644:	2b50      	cmp	r3, #80	; 0x50
 800a646:	d873      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a648:	2b40      	cmp	r3, #64	; 0x40
 800a64a:	d058      	beq.n	800a6fe <HAL_TIM_ConfigClockSource+0x13a>
 800a64c:	2b40      	cmp	r3, #64	; 0x40
 800a64e:	d86f      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a650:	2b30      	cmp	r3, #48	; 0x30
 800a652:	d064      	beq.n	800a71e <HAL_TIM_ConfigClockSource+0x15a>
 800a654:	2b30      	cmp	r3, #48	; 0x30
 800a656:	d86b      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a658:	2b20      	cmp	r3, #32
 800a65a:	d060      	beq.n	800a71e <HAL_TIM_ConfigClockSource+0x15a>
 800a65c:	2b20      	cmp	r3, #32
 800a65e:	d867      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a660:	2b00      	cmp	r3, #0
 800a662:	d05c      	beq.n	800a71e <HAL_TIM_ConfigClockSource+0x15a>
 800a664:	2b10      	cmp	r3, #16
 800a666:	d05a      	beq.n	800a71e <HAL_TIM_ConfigClockSource+0x15a>
 800a668:	e062      	b.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6818      	ldr	r0, [r3, #0]
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	6899      	ldr	r1, [r3, #8]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	f000 fb0f 	bl	800ac9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a68c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	609a      	str	r2, [r3, #8]
      break;
 800a696:	e04f      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6818      	ldr	r0, [r3, #0]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	6899      	ldr	r1, [r3, #8]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f000 faf8 	bl	800ac9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	689a      	ldr	r2, [r3, #8]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6ba:	609a      	str	r2, [r3, #8]
      break;
 800a6bc:	e03c      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6818      	ldr	r0, [r3, #0]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	6859      	ldr	r1, [r3, #4]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f000 fa6c 	bl	800aba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2150      	movs	r1, #80	; 0x50
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 fac5 	bl	800ac66 <TIM_ITRx_SetConfig>
      break;
 800a6dc:	e02c      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6818      	ldr	r0, [r3, #0]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	6859      	ldr	r1, [r3, #4]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	f000 fa8b 	bl	800ac06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2160      	movs	r1, #96	; 0x60
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 fab5 	bl	800ac66 <TIM_ITRx_SetConfig>
      break;
 800a6fc:	e01c      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6818      	ldr	r0, [r3, #0]
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	6859      	ldr	r1, [r3, #4]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	461a      	mov	r2, r3
 800a70c:	f000 fa4c 	bl	800aba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2140      	movs	r1, #64	; 0x40
 800a716:	4618      	mov	r0, r3
 800a718:	f000 faa5 	bl	800ac66 <TIM_ITRx_SetConfig>
      break;
 800a71c:	e00c      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4619      	mov	r1, r3
 800a728:	4610      	mov	r0, r2
 800a72a:	f000 fa9c 	bl	800ac66 <TIM_ITRx_SetConfig>
      break;
 800a72e:	e003      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	73fb      	strb	r3, [r7, #15]
      break;
 800a734:	e000      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a736:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a748:	7bfb      	ldrb	r3, [r7, #15]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a752:	b480      	push	{r7}
 800a754:	b083      	sub	sp, #12
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a75a:	bf00      	nop
 800a75c:	370c      	adds	r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a766:	b480      	push	{r7}
 800a768:	b083      	sub	sp, #12
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a76e:	bf00      	nop
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a77a:	b480      	push	{r7}
 800a77c:	b083      	sub	sp, #12
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a782:	bf00      	nop
 800a784:	370c      	adds	r7, #12
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
	...

0800a790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a34      	ldr	r2, [pc, #208]	; (800a874 <TIM_Base_SetConfig+0xe4>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d00f      	beq.n	800a7c8 <TIM_Base_SetConfig+0x38>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ae:	d00b      	beq.n	800a7c8 <TIM_Base_SetConfig+0x38>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a31      	ldr	r2, [pc, #196]	; (800a878 <TIM_Base_SetConfig+0xe8>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d007      	beq.n	800a7c8 <TIM_Base_SetConfig+0x38>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a30      	ldr	r2, [pc, #192]	; (800a87c <TIM_Base_SetConfig+0xec>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d003      	beq.n	800a7c8 <TIM_Base_SetConfig+0x38>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a2f      	ldr	r2, [pc, #188]	; (800a880 <TIM_Base_SetConfig+0xf0>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d108      	bne.n	800a7da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a25      	ldr	r2, [pc, #148]	; (800a874 <TIM_Base_SetConfig+0xe4>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d01b      	beq.n	800a81a <TIM_Base_SetConfig+0x8a>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7e8:	d017      	beq.n	800a81a <TIM_Base_SetConfig+0x8a>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a22      	ldr	r2, [pc, #136]	; (800a878 <TIM_Base_SetConfig+0xe8>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d013      	beq.n	800a81a <TIM_Base_SetConfig+0x8a>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a21      	ldr	r2, [pc, #132]	; (800a87c <TIM_Base_SetConfig+0xec>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d00f      	beq.n	800a81a <TIM_Base_SetConfig+0x8a>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a20      	ldr	r2, [pc, #128]	; (800a880 <TIM_Base_SetConfig+0xf0>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d00b      	beq.n	800a81a <TIM_Base_SetConfig+0x8a>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a1f      	ldr	r2, [pc, #124]	; (800a884 <TIM_Base_SetConfig+0xf4>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d007      	beq.n	800a81a <TIM_Base_SetConfig+0x8a>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a1e      	ldr	r2, [pc, #120]	; (800a888 <TIM_Base_SetConfig+0xf8>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d003      	beq.n	800a81a <TIM_Base_SetConfig+0x8a>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a1d      	ldr	r2, [pc, #116]	; (800a88c <TIM_Base_SetConfig+0xfc>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d108      	bne.n	800a82c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	68fa      	ldr	r2, [r7, #12]
 800a828:	4313      	orrs	r3, r2
 800a82a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	4313      	orrs	r3, r2
 800a838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	689a      	ldr	r2, [r3, #8]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a08      	ldr	r2, [pc, #32]	; (800a874 <TIM_Base_SetConfig+0xe4>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d103      	bne.n	800a860 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	691a      	ldr	r2, [r3, #16]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	615a      	str	r2, [r3, #20]
}
 800a866:	bf00      	nop
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	40010000 	.word	0x40010000
 800a878:	40000400 	.word	0x40000400
 800a87c:	40000800 	.word	0x40000800
 800a880:	40000c00 	.word	0x40000c00
 800a884:	40014000 	.word	0x40014000
 800a888:	40014400 	.word	0x40014400
 800a88c:	40014800 	.word	0x40014800

0800a890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a890:	b480      	push	{r7}
 800a892:	b087      	sub	sp, #28
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	f023 0201 	bic.w	r2, r3, #1
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a1b      	ldr	r3, [r3, #32]
 800a8aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	699b      	ldr	r3, [r3, #24]
 800a8b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f023 0303 	bic.w	r3, r3, #3
 800a8c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	f023 0302 	bic.w	r3, r3, #2
 800a8d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a1c      	ldr	r2, [pc, #112]	; (800a958 <TIM_OC1_SetConfig+0xc8>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d10c      	bne.n	800a906 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	f023 0308 	bic.w	r3, r3, #8
 800a8f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	697a      	ldr	r2, [r7, #20]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f023 0304 	bic.w	r3, r3, #4
 800a904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a13      	ldr	r2, [pc, #76]	; (800a958 <TIM_OC1_SetConfig+0xc8>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d111      	bne.n	800a932 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a91c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	695b      	ldr	r3, [r3, #20]
 800a922:	693a      	ldr	r2, [r7, #16]
 800a924:	4313      	orrs	r3, r2
 800a926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	693a      	ldr	r2, [r7, #16]
 800a92e:	4313      	orrs	r3, r2
 800a930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	685a      	ldr	r2, [r3, #4]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	697a      	ldr	r2, [r7, #20]
 800a94a:	621a      	str	r2, [r3, #32]
}
 800a94c:	bf00      	nop
 800a94e:	371c      	adds	r7, #28
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr
 800a958:	40010000 	.word	0x40010000

0800a95c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b087      	sub	sp, #28
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a1b      	ldr	r3, [r3, #32]
 800a96a:	f023 0210 	bic.w	r2, r3, #16
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a1b      	ldr	r3, [r3, #32]
 800a976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a98a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	021b      	lsls	r3, r3, #8
 800a99a:	68fa      	ldr	r2, [r7, #12]
 800a99c:	4313      	orrs	r3, r2
 800a99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	f023 0320 	bic.w	r3, r3, #32
 800a9a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	011b      	lsls	r3, r3, #4
 800a9ae:	697a      	ldr	r2, [r7, #20]
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a1e      	ldr	r2, [pc, #120]	; (800aa30 <TIM_OC2_SetConfig+0xd4>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d10d      	bne.n	800a9d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	011b      	lsls	r3, r3, #4
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4a15      	ldr	r2, [pc, #84]	; (800aa30 <TIM_OC2_SetConfig+0xd4>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d113      	bne.n	800aa08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	695b      	ldr	r3, [r3, #20]
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	693a      	ldr	r2, [r7, #16]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	685a      	ldr	r2, [r3, #4]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	621a      	str	r2, [r3, #32]
}
 800aa22:	bf00      	nop
 800aa24:	371c      	adds	r7, #28
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	40010000 	.word	0x40010000

0800aa34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b087      	sub	sp, #28
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	69db      	ldr	r3, [r3, #28]
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f023 0303 	bic.w	r3, r3, #3
 800aa6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	021b      	lsls	r3, r3, #8
 800aa84:	697a      	ldr	r2, [r7, #20]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a1d      	ldr	r2, [pc, #116]	; (800ab04 <TIM_OC3_SetConfig+0xd0>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d10d      	bne.n	800aaae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	021b      	lsls	r3, r3, #8
 800aaa0:	697a      	ldr	r2, [r7, #20]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aaac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a14      	ldr	r2, [pc, #80]	; (800ab04 <TIM_OC3_SetConfig+0xd0>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d113      	bne.n	800aade <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aabc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	011b      	lsls	r3, r3, #4
 800aacc:	693a      	ldr	r2, [r7, #16]
 800aace:	4313      	orrs	r3, r2
 800aad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	699b      	ldr	r3, [r3, #24]
 800aad6:	011b      	lsls	r3, r3, #4
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	4313      	orrs	r3, r2
 800aadc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	685a      	ldr	r2, [r3, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	621a      	str	r2, [r3, #32]
}
 800aaf8:	bf00      	nop
 800aafa:	371c      	adds	r7, #28
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	40010000 	.word	0x40010000

0800ab08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	69db      	ldr	r3, [r3, #28]
 800ab2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	021b      	lsls	r3, r3, #8
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	031b      	lsls	r3, r3, #12
 800ab5a:	693a      	ldr	r2, [r7, #16]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a10      	ldr	r2, [pc, #64]	; (800aba4 <TIM_OC4_SetConfig+0x9c>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d109      	bne.n	800ab7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	695b      	ldr	r3, [r3, #20]
 800ab74:	019b      	lsls	r3, r3, #6
 800ab76:	697a      	ldr	r2, [r7, #20]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	693a      	ldr	r2, [r7, #16]
 800ab94:	621a      	str	r2, [r3, #32]
}
 800ab96:	bf00      	nop
 800ab98:	371c      	adds	r7, #28
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	40010000 	.word	0x40010000

0800aba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b087      	sub	sp, #28
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6a1b      	ldr	r3, [r3, #32]
 800abb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6a1b      	ldr	r3, [r3, #32]
 800abbe:	f023 0201 	bic.w	r2, r3, #1
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	699b      	ldr	r3, [r3, #24]
 800abca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	011b      	lsls	r3, r3, #4
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	4313      	orrs	r3, r2
 800abdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f023 030a 	bic.w	r3, r3, #10
 800abe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	4313      	orrs	r3, r2
 800abec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	621a      	str	r2, [r3, #32]
}
 800abfa:	bf00      	nop
 800abfc:	371c      	adds	r7, #28
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac06:	b480      	push	{r7}
 800ac08:	b087      	sub	sp, #28
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	60f8      	str	r0, [r7, #12]
 800ac0e:	60b9      	str	r1, [r7, #8]
 800ac10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	f023 0210 	bic.w	r2, r3, #16
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	699b      	ldr	r3, [r3, #24]
 800ac22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	031b      	lsls	r3, r3, #12
 800ac36:	697a      	ldr	r2, [r7, #20]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	011b      	lsls	r3, r3, #4
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	693a      	ldr	r2, [r7, #16]
 800ac58:	621a      	str	r2, [r3, #32]
}
 800ac5a:	bf00      	nop
 800ac5c:	371c      	adds	r7, #28
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac66:	b480      	push	{r7}
 800ac68:	b085      	sub	sp, #20
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	f043 0307 	orr.w	r3, r3, #7
 800ac88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	609a      	str	r2, [r3, #8]
}
 800ac90:	bf00      	nop
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b087      	sub	sp, #28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	021a      	lsls	r2, r3, #8
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	431a      	orrs	r2, r3
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	697a      	ldr	r2, [r7, #20]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	697a      	ldr	r2, [r7, #20]
 800acce:	609a      	str	r2, [r3, #8]
}
 800acd0:	bf00      	nop
 800acd2:	371c      	adds	r7, #28
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800acdc:	b480      	push	{r7}
 800acde:	b087      	sub	sp, #28
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	f003 031f 	and.w	r3, r3, #31
 800acee:	2201      	movs	r2, #1
 800acf0:	fa02 f303 	lsl.w	r3, r2, r3
 800acf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6a1a      	ldr	r2, [r3, #32]
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	43db      	mvns	r3, r3
 800acfe:	401a      	ands	r2, r3
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6a1a      	ldr	r2, [r3, #32]
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	f003 031f 	and.w	r3, r3, #31
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	fa01 f303 	lsl.w	r3, r1, r3
 800ad14:	431a      	orrs	r2, r3
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	621a      	str	r2, [r3, #32]
}
 800ad1a:	bf00      	nop
 800ad1c:	371c      	adds	r7, #28
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
	...

0800ad28 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad32:	2300      	movs	r3, #0
 800ad34:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d109      	bne.n	800ad50 <HAL_TIMEx_PWMN_Start_IT+0x28>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	bf14      	ite	ne
 800ad48:	2301      	movne	r3, #1
 800ad4a:	2300      	moveq	r3, #0
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	e022      	b.n	800ad96 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	2b04      	cmp	r3, #4
 800ad54:	d109      	bne.n	800ad6a <HAL_TIMEx_PWMN_Start_IT+0x42>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	bf14      	ite	ne
 800ad62:	2301      	movne	r3, #1
 800ad64:	2300      	moveq	r3, #0
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	e015      	b.n	800ad96 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	2b08      	cmp	r3, #8
 800ad6e:	d109      	bne.n	800ad84 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	bf14      	ite	ne
 800ad7c:	2301      	movne	r3, #1
 800ad7e:	2300      	moveq	r3, #0
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	e008      	b.n	800ad96 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	bf14      	ite	ne
 800ad90:	2301      	movne	r3, #1
 800ad92:	2300      	moveq	r3, #0
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d001      	beq.n	800ad9e <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e099      	b.n	800aed2 <HAL_TIMEx_PWMN_Start_IT+0x1aa>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d104      	bne.n	800adae <HAL_TIMEx_PWMN_Start_IT+0x86>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2202      	movs	r2, #2
 800ada8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800adac:	e013      	b.n	800add6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	2b04      	cmp	r3, #4
 800adb2:	d104      	bne.n	800adbe <HAL_TIMEx_PWMN_Start_IT+0x96>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2202      	movs	r2, #2
 800adb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800adbc:	e00b      	b.n	800add6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2b08      	cmp	r3, #8
 800adc2:	d104      	bne.n	800adce <HAL_TIMEx_PWMN_Start_IT+0xa6>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2202      	movs	r2, #2
 800adc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adcc:	e003      	b.n	800add6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2202      	movs	r2, #2
 800add2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	2b08      	cmp	r3, #8
 800adda:	d01b      	beq.n	800ae14 <HAL_TIMEx_PWMN_Start_IT+0xec>
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	2b08      	cmp	r3, #8
 800ade0:	d821      	bhi.n	800ae26 <HAL_TIMEx_PWMN_Start_IT+0xfe>
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d003      	beq.n	800adf0 <HAL_TIMEx_PWMN_Start_IT+0xc8>
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	2b04      	cmp	r3, #4
 800adec:	d009      	beq.n	800ae02 <HAL_TIMEx_PWMN_Start_IT+0xda>
 800adee:	e01a      	b.n	800ae26 <HAL_TIMEx_PWMN_Start_IT+0xfe>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	68da      	ldr	r2, [r3, #12]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f042 0202 	orr.w	r2, r2, #2
 800adfe:	60da      	str	r2, [r3, #12]
      break;
 800ae00:	e014      	b.n	800ae2c <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68da      	ldr	r2, [r3, #12]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f042 0204 	orr.w	r2, r2, #4
 800ae10:	60da      	str	r2, [r3, #12]
      break;
 800ae12:	e00b      	b.n	800ae2c <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68da      	ldr	r2, [r3, #12]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f042 0208 	orr.w	r2, r2, #8
 800ae22:	60da      	str	r2, [r3, #12]
      break;
 800ae24:	e002      	b.n	800ae2c <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    default:
      status = HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	73fb      	strb	r3, [r7, #15]
      break;
 800ae2a:	bf00      	nop
  }

  if (status == HAL_OK)
 800ae2c:	7bfb      	ldrb	r3, [r7, #15]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d14e      	bne.n	800aed0 <HAL_TIMEx_PWMN_Start_IT+0x1a8>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	68da      	ldr	r2, [r3, #12]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ae40:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2204      	movs	r2, #4
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f000 f8d2 	bl	800aff4 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a1d      	ldr	r2, [pc, #116]	; (800aedc <HAL_TIMEx_PWMN_Start_IT+0x1b4>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d018      	beq.n	800ae9c <HAL_TIMEx_PWMN_Start_IT+0x174>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae72:	d013      	beq.n	800ae9c <HAL_TIMEx_PWMN_Start_IT+0x174>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a19      	ldr	r2, [pc, #100]	; (800aee0 <HAL_TIMEx_PWMN_Start_IT+0x1b8>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d00e      	beq.n	800ae9c <HAL_TIMEx_PWMN_Start_IT+0x174>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a18      	ldr	r2, [pc, #96]	; (800aee4 <HAL_TIMEx_PWMN_Start_IT+0x1bc>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d009      	beq.n	800ae9c <HAL_TIMEx_PWMN_Start_IT+0x174>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a16      	ldr	r2, [pc, #88]	; (800aee8 <HAL_TIMEx_PWMN_Start_IT+0x1c0>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d004      	beq.n	800ae9c <HAL_TIMEx_PWMN_Start_IT+0x174>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a15      	ldr	r2, [pc, #84]	; (800aeec <HAL_TIMEx_PWMN_Start_IT+0x1c4>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d111      	bne.n	800aec0 <HAL_TIMEx_PWMN_Start_IT+0x198>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	f003 0307 	and.w	r3, r3, #7
 800aea6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	2b06      	cmp	r3, #6
 800aeac:	d010      	beq.n	800aed0 <HAL_TIMEx_PWMN_Start_IT+0x1a8>
      {
        __HAL_TIM_ENABLE(htim);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f042 0201 	orr.w	r2, r2, #1
 800aebc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aebe:	e007      	b.n	800aed0 <HAL_TIMEx_PWMN_Start_IT+0x1a8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f042 0201 	orr.w	r2, r2, #1
 800aece:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800aed0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	40010000 	.word	0x40010000
 800aee0:	40000400 	.word	0x40000400
 800aee4:	40000800 	.word	0x40000800
 800aee8:	40000c00 	.word	0x40000c00
 800aeec:	40014000 	.word	0x40014000

0800aef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af00:	2b01      	cmp	r3, #1
 800af02:	d101      	bne.n	800af08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af04:	2302      	movs	r3, #2
 800af06:	e050      	b.n	800afaa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2202      	movs	r2, #2
 800af14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	4313      	orrs	r3, r2
 800af38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a1c      	ldr	r2, [pc, #112]	; (800afb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d018      	beq.n	800af7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af54:	d013      	beq.n	800af7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a18      	ldr	r2, [pc, #96]	; (800afbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d00e      	beq.n	800af7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a16      	ldr	r2, [pc, #88]	; (800afc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d009      	beq.n	800af7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a15      	ldr	r2, [pc, #84]	; (800afc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d004      	beq.n	800af7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a13      	ldr	r2, [pc, #76]	; (800afc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d10c      	bne.n	800af98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	68ba      	ldr	r2, [r7, #8]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3714      	adds	r7, #20
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	40010000 	.word	0x40010000
 800afbc:	40000400 	.word	0x40000400
 800afc0:	40000800 	.word	0x40000800
 800afc4:	40000c00 	.word	0x40000c00
 800afc8:	40014000 	.word	0x40014000

0800afcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800afd4:	bf00      	nop
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afe8:	bf00      	nop
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b087      	sub	sp, #28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	f003 031f 	and.w	r3, r3, #31
 800b006:	2204      	movs	r2, #4
 800b008:	fa02 f303 	lsl.w	r3, r2, r3
 800b00c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6a1a      	ldr	r2, [r3, #32]
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	43db      	mvns	r3, r3
 800b016:	401a      	ands	r2, r3
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6a1a      	ldr	r2, [r3, #32]
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	f003 031f 	and.w	r3, r3, #31
 800b026:	6879      	ldr	r1, [r7, #4]
 800b028:	fa01 f303 	lsl.w	r3, r1, r3
 800b02c:	431a      	orrs	r2, r3
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	621a      	str	r2, [r3, #32]
}
 800b032:	bf00      	nop
 800b034:	371c      	adds	r7, #28
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr

0800b03e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b082      	sub	sp, #8
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d101      	bne.n	800b050 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	e03f      	b.n	800b0d0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b056:	b2db      	uxtb	r3, r3
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d106      	bne.n	800b06a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f7f9 fc9f 	bl	80049a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2224      	movs	r2, #36	; 0x24
 800b06e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68da      	ldr	r2, [r3, #12]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b080:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 ff98 	bl	800bfb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	691a      	ldr	r2, [r3, #16]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b096:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	695a      	ldr	r2, [r3, #20]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b0a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	68da      	ldr	r2, [r3, #12]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b0b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2220      	movs	r2, #32
 800b0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2220      	movs	r2, #32
 800b0ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b08a      	sub	sp, #40	; 0x28
 800b0dc:	af02      	add	r7, sp, #8
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	603b      	str	r3, [r7, #0]
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	2b20      	cmp	r3, #32
 800b0f6:	d17c      	bne.n	800b1f2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d002      	beq.n	800b104 <HAL_UART_Transmit+0x2c>
 800b0fe:	88fb      	ldrh	r3, [r7, #6]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d101      	bne.n	800b108 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	e075      	b.n	800b1f4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d101      	bne.n	800b116 <HAL_UART_Transmit+0x3e>
 800b112:	2302      	movs	r3, #2
 800b114:	e06e      	b.n	800b1f4 <HAL_UART_Transmit+0x11c>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2200      	movs	r2, #0
 800b122:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2221      	movs	r2, #33	; 0x21
 800b128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b12c:	f7f9 fd8e 	bl	8004c4c <HAL_GetTick>
 800b130:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	88fa      	ldrh	r2, [r7, #6]
 800b136:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	88fa      	ldrh	r2, [r7, #6]
 800b13c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b146:	d108      	bne.n	800b15a <HAL_UART_Transmit+0x82>
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d104      	bne.n	800b15a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b150:	2300      	movs	r3, #0
 800b152:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	61bb      	str	r3, [r7, #24]
 800b158:	e003      	b.n	800b162 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b15e:	2300      	movs	r3, #0
 800b160:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2200      	movs	r2, #0
 800b166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b16a:	e02a      	b.n	800b1c2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	2200      	movs	r2, #0
 800b174:	2180      	movs	r1, #128	; 0x80
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f000 fc54 	bl	800ba24 <UART_WaitOnFlagUntilTimeout>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d001      	beq.n	800b186 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b182:	2303      	movs	r3, #3
 800b184:	e036      	b.n	800b1f4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d10b      	bne.n	800b1a4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b18c:	69bb      	ldr	r3, [r7, #24]
 800b18e:	881b      	ldrh	r3, [r3, #0]
 800b190:	461a      	mov	r2, r3
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b19a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	3302      	adds	r3, #2
 800b1a0:	61bb      	str	r3, [r7, #24]
 800b1a2:	e007      	b.n	800b1b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	781a      	ldrb	r2, [r3, #0]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1cf      	bne.n	800b16c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	2140      	movs	r1, #64	; 0x40
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f000 fc24 	bl	800ba24 <UART_WaitOnFlagUntilTimeout>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d001      	beq.n	800b1e6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	e006      	b.n	800b1f4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2220      	movs	r2, #32
 800b1ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	e000      	b.n	800b1f4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b1f2:	2302      	movs	r3, #2
  }
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3720      	adds	r7, #32
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b08c      	sub	sp, #48	; 0x30
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	4613      	mov	r3, r2
 800b208:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b210:	b2db      	uxtb	r3, r3
 800b212:	2b20      	cmp	r3, #32
 800b214:	d152      	bne.n	800b2bc <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d002      	beq.n	800b222 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800b21c:	88fb      	ldrh	r3, [r7, #6]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d101      	bne.n	800b226 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800b222:	2301      	movs	r3, #1
 800b224:	e04b      	b.n	800b2be <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d101      	bne.n	800b234 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800b230:	2302      	movs	r3, #2
 800b232:	e044      	b.n	800b2be <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2201      	movs	r2, #1
 800b238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2201      	movs	r2, #1
 800b240:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b242:	88fb      	ldrh	r3, [r7, #6]
 800b244:	461a      	mov	r2, r3
 800b246:	68b9      	ldr	r1, [r7, #8]
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f000 fc59 	bl	800bb00 <UART_Start_Receive_DMA>
 800b24e:	4603      	mov	r3, r0
 800b250:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d12c      	bne.n	800b2b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b260:	2b01      	cmp	r3, #1
 800b262:	d125      	bne.n	800b2b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b264:	2300      	movs	r3, #0
 800b266:	613b      	str	r3, [r7, #16]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	613b      	str	r3, [r7, #16]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	613b      	str	r3, [r7, #16]
 800b278:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	330c      	adds	r3, #12
 800b280:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	e853 3f00 	ldrex	r3, [r3]
 800b288:	617b      	str	r3, [r7, #20]
   return(result);
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	f043 0310 	orr.w	r3, r3, #16
 800b290:	62bb      	str	r3, [r7, #40]	; 0x28
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	330c      	adds	r3, #12
 800b298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b29a:	627a      	str	r2, [r7, #36]	; 0x24
 800b29c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b29e:	6a39      	ldr	r1, [r7, #32]
 800b2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2a2:	e841 2300 	strex	r3, r2, [r1]
 800b2a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1e5      	bne.n	800b27a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800b2ae:	e002      	b.n	800b2b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800b2b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2ba:	e000      	b.n	800b2be <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800b2bc:	2302      	movs	r3, #2
  }
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3730      	adds	r7, #48	; 0x30
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
	...

0800b2c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b0ba      	sub	sp, #232	; 0xe8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	695b      	ldr	r3, [r3, #20]
 800b2ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b2fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2fe:	f003 030f 	and.w	r3, r3, #15
 800b302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10f      	bne.n	800b32e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b30e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b312:	f003 0320 	and.w	r3, r3, #32
 800b316:	2b00      	cmp	r3, #0
 800b318:	d009      	beq.n	800b32e <HAL_UART_IRQHandler+0x66>
 800b31a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b31e:	f003 0320 	and.w	r3, r3, #32
 800b322:	2b00      	cmp	r3, #0
 800b324:	d003      	beq.n	800b32e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 fd8b 	bl	800be42 <UART_Receive_IT>
      return;
 800b32c:	e256      	b.n	800b7dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b32e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b332:	2b00      	cmp	r3, #0
 800b334:	f000 80de 	beq.w	800b4f4 <HAL_UART_IRQHandler+0x22c>
 800b338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b33c:	f003 0301 	and.w	r3, r3, #1
 800b340:	2b00      	cmp	r3, #0
 800b342:	d106      	bne.n	800b352 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b348:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f000 80d1 	beq.w	800b4f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b356:	f003 0301 	and.w	r3, r3, #1
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00b      	beq.n	800b376 <HAL_UART_IRQHandler+0xae>
 800b35e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b366:	2b00      	cmp	r3, #0
 800b368:	d005      	beq.n	800b376 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36e:	f043 0201 	orr.w	r2, r3, #1
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b37a:	f003 0304 	and.w	r3, r3, #4
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00b      	beq.n	800b39a <HAL_UART_IRQHandler+0xd2>
 800b382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b386:	f003 0301 	and.w	r3, r3, #1
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d005      	beq.n	800b39a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b392:	f043 0202 	orr.w	r2, r3, #2
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b39a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b39e:	f003 0302 	and.w	r3, r3, #2
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00b      	beq.n	800b3be <HAL_UART_IRQHandler+0xf6>
 800b3a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3aa:	f003 0301 	and.w	r3, r3, #1
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d005      	beq.n	800b3be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b6:	f043 0204 	orr.w	r2, r3, #4
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b3be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3c2:	f003 0308 	and.w	r3, r3, #8
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d011      	beq.n	800b3ee <HAL_UART_IRQHandler+0x126>
 800b3ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3ce:	f003 0320 	and.w	r3, r3, #32
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d105      	bne.n	800b3e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b3d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3da:	f003 0301 	and.w	r3, r3, #1
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d005      	beq.n	800b3ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e6:	f043 0208 	orr.w	r2, r3, #8
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	f000 81ed 	beq.w	800b7d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b3f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3fc:	f003 0320 	and.w	r3, r3, #32
 800b400:	2b00      	cmp	r3, #0
 800b402:	d008      	beq.n	800b416 <HAL_UART_IRQHandler+0x14e>
 800b404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b408:	f003 0320 	and.w	r3, r3, #32
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d002      	beq.n	800b416 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fd16 	bl	800be42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	695b      	ldr	r3, [r3, #20]
 800b41c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b420:	2b40      	cmp	r3, #64	; 0x40
 800b422:	bf0c      	ite	eq
 800b424:	2301      	moveq	r3, #1
 800b426:	2300      	movne	r3, #0
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b432:	f003 0308 	and.w	r3, r3, #8
 800b436:	2b00      	cmp	r3, #0
 800b438:	d103      	bne.n	800b442 <HAL_UART_IRQHandler+0x17a>
 800b43a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d04f      	beq.n	800b4e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 fc1e 	bl	800bc84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	695b      	ldr	r3, [r3, #20]
 800b44e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b452:	2b40      	cmp	r3, #64	; 0x40
 800b454:	d141      	bne.n	800b4da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	3314      	adds	r3, #20
 800b45c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b460:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b464:	e853 3f00 	ldrex	r3, [r3]
 800b468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b46c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	3314      	adds	r3, #20
 800b47e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b482:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b486:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b48e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b492:	e841 2300 	strex	r3, r2, [r1]
 800b496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b49a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1d9      	bne.n	800b456 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d013      	beq.n	800b4d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ae:	4a7d      	ldr	r2, [pc, #500]	; (800b6a4 <HAL_UART_IRQHandler+0x3dc>)
 800b4b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fa fad0 	bl	8005a5c <HAL_DMA_Abort_IT>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d016      	beq.n	800b4f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4d0:	e00e      	b.n	800b4f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 f9a4 	bl	800b820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4d8:	e00a      	b.n	800b4f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f9a0 	bl	800b820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4e0:	e006      	b.n	800b4f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 f99c 	bl	800b820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b4ee:	e170      	b.n	800b7d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4f0:	bf00      	nop
    return;
 800b4f2:	e16e      	b.n	800b7d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	f040 814a 	bne.w	800b792 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b4fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b502:	f003 0310 	and.w	r3, r3, #16
 800b506:	2b00      	cmp	r3, #0
 800b508:	f000 8143 	beq.w	800b792 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b50c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b510:	f003 0310 	and.w	r3, r3, #16
 800b514:	2b00      	cmp	r3, #0
 800b516:	f000 813c 	beq.w	800b792 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b51a:	2300      	movs	r3, #0
 800b51c:	60bb      	str	r3, [r7, #8]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	60bb      	str	r3, [r7, #8]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	60bb      	str	r3, [r7, #8]
 800b52e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	695b      	ldr	r3, [r3, #20]
 800b536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b53a:	2b40      	cmp	r3, #64	; 0x40
 800b53c:	f040 80b4 	bne.w	800b6a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b54c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b550:	2b00      	cmp	r3, #0
 800b552:	f000 8140 	beq.w	800b7d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b55a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b55e:	429a      	cmp	r2, r3
 800b560:	f080 8139 	bcs.w	800b7d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b56a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b570:	69db      	ldr	r3, [r3, #28]
 800b572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b576:	f000 8088 	beq.w	800b68a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	330c      	adds	r3, #12
 800b580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b584:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b588:	e853 3f00 	ldrex	r3, [r3]
 800b58c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b590:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b598:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	330c      	adds	r3, #12
 800b5a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b5a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b5aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b5b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b5b6:	e841 2300 	strex	r3, r2, [r1]
 800b5ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b5be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1d9      	bne.n	800b57a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	3314      	adds	r3, #20
 800b5cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5d0:	e853 3f00 	ldrex	r3, [r3]
 800b5d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b5d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b5d8:	f023 0301 	bic.w	r3, r3, #1
 800b5dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	3314      	adds	r3, #20
 800b5e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b5ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b5ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b5f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b5f6:	e841 2300 	strex	r3, r2, [r1]
 800b5fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b5fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1e1      	bne.n	800b5c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	3314      	adds	r3, #20
 800b608:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b60c:	e853 3f00 	ldrex	r3, [r3]
 800b610:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b618:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	3314      	adds	r3, #20
 800b622:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b626:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b628:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b62c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b62e:	e841 2300 	strex	r3, r2, [r1]
 800b632:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1e3      	bne.n	800b602 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2220      	movs	r2, #32
 800b63e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	330c      	adds	r3, #12
 800b64e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b652:	e853 3f00 	ldrex	r3, [r3]
 800b656:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b65a:	f023 0310 	bic.w	r3, r3, #16
 800b65e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	330c      	adds	r3, #12
 800b668:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b66c:	65ba      	str	r2, [r7, #88]	; 0x58
 800b66e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b670:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b672:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b674:	e841 2300 	strex	r3, r2, [r1]
 800b678:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b67a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1e3      	bne.n	800b648 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b684:	4618      	mov	r0, r3
 800b686:	f7fa f979 	bl	800597c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b692:	b29b      	uxth	r3, r3
 800b694:	1ad3      	subs	r3, r2, r3
 800b696:	b29b      	uxth	r3, r3
 800b698:	4619      	mov	r1, r3
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f7f8 fab2 	bl	8003c04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b6a0:	e099      	b.n	800b7d6 <HAL_UART_IRQHandler+0x50e>
 800b6a2:	bf00      	nop
 800b6a4:	0800bd4b 	.word	0x0800bd4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	1ad3      	subs	r3, r2, r3
 800b6b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f000 808b 	beq.w	800b7da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b6c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f000 8086 	beq.w	800b7da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	330c      	adds	r3, #12
 800b6d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d8:	e853 3f00 	ldrex	r3, [r3]
 800b6dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b6e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	330c      	adds	r3, #12
 800b6ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b6f2:	647a      	str	r2, [r7, #68]	; 0x44
 800b6f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b6f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6fa:	e841 2300 	strex	r3, r2, [r1]
 800b6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1e3      	bne.n	800b6ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	3314      	adds	r3, #20
 800b70c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b710:	e853 3f00 	ldrex	r3, [r3]
 800b714:	623b      	str	r3, [r7, #32]
   return(result);
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	f023 0301 	bic.w	r3, r3, #1
 800b71c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	3314      	adds	r3, #20
 800b726:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b72a:	633a      	str	r2, [r7, #48]	; 0x30
 800b72c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b732:	e841 2300 	strex	r3, r2, [r1]
 800b736:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1e3      	bne.n	800b706 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2220      	movs	r2, #32
 800b742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	330c      	adds	r3, #12
 800b752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	e853 3f00 	ldrex	r3, [r3]
 800b75a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f023 0310 	bic.w	r3, r3, #16
 800b762:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	330c      	adds	r3, #12
 800b76c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b770:	61fa      	str	r2, [r7, #28]
 800b772:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b774:	69b9      	ldr	r1, [r7, #24]
 800b776:	69fa      	ldr	r2, [r7, #28]
 800b778:	e841 2300 	strex	r3, r2, [r1]
 800b77c:	617b      	str	r3, [r7, #20]
   return(result);
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1e3      	bne.n	800b74c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b784:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b788:	4619      	mov	r1, r3
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f7f8 fa3a 	bl	8003c04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b790:	e023      	b.n	800b7da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d009      	beq.n	800b7b2 <HAL_UART_IRQHandler+0x4ea>
 800b79e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d003      	beq.n	800b7b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 fae1 	bl	800bd72 <UART_Transmit_IT>
    return;
 800b7b0:	e014      	b.n	800b7dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b7b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00e      	beq.n	800b7dc <HAL_UART_IRQHandler+0x514>
 800b7be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d008      	beq.n	800b7dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fb21 	bl	800be12 <UART_EndTransmit_IT>
    return;
 800b7d0:	e004      	b.n	800b7dc <HAL_UART_IRQHandler+0x514>
    return;
 800b7d2:	bf00      	nop
 800b7d4:	e002      	b.n	800b7dc <HAL_UART_IRQHandler+0x514>
      return;
 800b7d6:	bf00      	nop
 800b7d8:	e000      	b.n	800b7dc <HAL_UART_IRQHandler+0x514>
      return;
 800b7da:	bf00      	nop
  }
}
 800b7dc:	37e8      	adds	r7, #232	; 0xe8
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop

0800b7e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b7ec:	bf00      	nop
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b800:	bf00      	nop
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b814:	bf00      	nop
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b09c      	sub	sp, #112	; 0x70
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b840:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d172      	bne.n	800b936 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b852:	2200      	movs	r2, #0
 800b854:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	330c      	adds	r3, #12
 800b85c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b860:	e853 3f00 	ldrex	r3, [r3]
 800b864:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b86c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b86e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	330c      	adds	r3, #12
 800b874:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b876:	65ba      	str	r2, [r7, #88]	; 0x58
 800b878:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b87c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b87e:	e841 2300 	strex	r3, r2, [r1]
 800b882:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1e5      	bne.n	800b856 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b88a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	3314      	adds	r3, #20
 800b890:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b894:	e853 3f00 	ldrex	r3, [r3]
 800b898:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b89c:	f023 0301 	bic.w	r3, r3, #1
 800b8a0:	667b      	str	r3, [r7, #100]	; 0x64
 800b8a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	3314      	adds	r3, #20
 800b8a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b8aa:	647a      	str	r2, [r7, #68]	; 0x44
 800b8ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b8b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8b2:	e841 2300 	strex	r3, r2, [r1]
 800b8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d1e5      	bne.n	800b88a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	3314      	adds	r3, #20
 800b8c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c8:	e853 3f00 	ldrex	r3, [r3]
 800b8cc:	623b      	str	r3, [r7, #32]
   return(result);
 800b8ce:	6a3b      	ldr	r3, [r7, #32]
 800b8d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8d4:	663b      	str	r3, [r7, #96]	; 0x60
 800b8d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	3314      	adds	r3, #20
 800b8dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b8de:	633a      	str	r2, [r7, #48]	; 0x30
 800b8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8e6:	e841 2300 	strex	r3, r2, [r1]
 800b8ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1e5      	bne.n	800b8be <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b8f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8f4:	2220      	movs	r2, #32
 800b8f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d119      	bne.n	800b936 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	330c      	adds	r3, #12
 800b908:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	e853 3f00 	ldrex	r3, [r3]
 800b910:	60fb      	str	r3, [r7, #12]
   return(result);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f023 0310 	bic.w	r3, r3, #16
 800b918:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b91a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	330c      	adds	r3, #12
 800b920:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b922:	61fa      	str	r2, [r7, #28]
 800b924:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b926:	69b9      	ldr	r1, [r7, #24]
 800b928:	69fa      	ldr	r2, [r7, #28]
 800b92a:	e841 2300 	strex	r3, r2, [r1]
 800b92e:	617b      	str	r3, [r7, #20]
   return(result);
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d1e5      	bne.n	800b902 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d106      	bne.n	800b94c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b93e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b940:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b942:	4619      	mov	r1, r3
 800b944:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b946:	f7f8 f95d 	bl	8003c04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b94a:	e002      	b.n	800b952 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b94c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b94e:	f7ff ff53 	bl	800b7f8 <HAL_UART_RxCpltCallback>
}
 800b952:	bf00      	nop
 800b954:	3770      	adds	r7, #112	; 0x70
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b084      	sub	sp, #16
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b966:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d108      	bne.n	800b982 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b974:	085b      	lsrs	r3, r3, #1
 800b976:	b29b      	uxth	r3, r3
 800b978:	4619      	mov	r1, r3
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f7f8 f942 	bl	8003c04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b980:	e002      	b.n	800b988 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f7ff ff42 	bl	800b80c <HAL_UART_RxHalfCpltCallback>
}
 800b988:	bf00      	nop
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b998:	2300      	movs	r3, #0
 800b99a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	695b      	ldr	r3, [r3, #20]
 800b9a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9ac:	2b80      	cmp	r3, #128	; 0x80
 800b9ae:	bf0c      	ite	eq
 800b9b0:	2301      	moveq	r3, #1
 800b9b2:	2300      	movne	r3, #0
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	2b21      	cmp	r3, #33	; 0x21
 800b9c2:	d108      	bne.n	800b9d6 <UART_DMAError+0x46>
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d005      	beq.n	800b9d6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b9d0:	68b8      	ldr	r0, [r7, #8]
 800b9d2:	f000 f92f 	bl	800bc34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	695b      	ldr	r3, [r3, #20]
 800b9dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9e0:	2b40      	cmp	r3, #64	; 0x40
 800b9e2:	bf0c      	ite	eq
 800b9e4:	2301      	moveq	r3, #1
 800b9e6:	2300      	movne	r3, #0
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	2b22      	cmp	r3, #34	; 0x22
 800b9f6:	d108      	bne.n	800ba0a <UART_DMAError+0x7a>
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d005      	beq.n	800ba0a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	2200      	movs	r2, #0
 800ba02:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ba04:	68b8      	ldr	r0, [r7, #8]
 800ba06:	f000 f93d 	bl	800bc84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba0e:	f043 0210 	orr.w	r2, r3, #16
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba16:	68b8      	ldr	r0, [r7, #8]
 800ba18:	f7ff ff02 	bl	800b820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba1c:	bf00      	nop
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b090      	sub	sp, #64	; 0x40
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	603b      	str	r3, [r7, #0]
 800ba30:	4613      	mov	r3, r2
 800ba32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba34:	e050      	b.n	800bad8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba3c:	d04c      	beq.n	800bad8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ba3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d007      	beq.n	800ba54 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba44:	f7f9 f902 	bl	8004c4c <HAL_GetTick>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d241      	bcs.n	800bad8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	330c      	adds	r3, #12
 800ba5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5e:	e853 3f00 	ldrex	r3, [r3]
 800ba62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ba6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	330c      	adds	r3, #12
 800ba72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba74:	637a      	str	r2, [r7, #52]	; 0x34
 800ba76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba7c:	e841 2300 	strex	r3, r2, [r1]
 800ba80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ba82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1e5      	bne.n	800ba54 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	3314      	adds	r3, #20
 800ba8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	e853 3f00 	ldrex	r3, [r3]
 800ba96:	613b      	str	r3, [r7, #16]
   return(result);
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	f023 0301 	bic.w	r3, r3, #1
 800ba9e:	63bb      	str	r3, [r7, #56]	; 0x38
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	3314      	adds	r3, #20
 800baa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baa8:	623a      	str	r2, [r7, #32]
 800baaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baac:	69f9      	ldr	r1, [r7, #28]
 800baae:	6a3a      	ldr	r2, [r7, #32]
 800bab0:	e841 2300 	strex	r3, r2, [r1]
 800bab4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bab6:	69bb      	ldr	r3, [r7, #24]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d1e5      	bne.n	800ba88 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2220      	movs	r2, #32
 800bac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2220      	movs	r2, #32
 800bac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bad4:	2303      	movs	r3, #3
 800bad6:	e00f      	b.n	800baf8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	4013      	ands	r3, r2
 800bae2:	68ba      	ldr	r2, [r7, #8]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	bf0c      	ite	eq
 800bae8:	2301      	moveq	r3, #1
 800baea:	2300      	movne	r3, #0
 800baec:	b2db      	uxtb	r3, r3
 800baee:	461a      	mov	r2, r3
 800baf0:	79fb      	ldrb	r3, [r7, #7]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d09f      	beq.n	800ba36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3740      	adds	r7, #64	; 0x40
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b098      	sub	sp, #96	; 0x60
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800bb0e:	68ba      	ldr	r2, [r7, #8]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	88fa      	ldrh	r2, [r7, #6]
 800bb18:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2222      	movs	r2, #34	; 0x22
 800bb24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb2c:	4a3e      	ldr	r2, [pc, #248]	; (800bc28 <UART_Start_Receive_DMA+0x128>)
 800bb2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb34:	4a3d      	ldr	r2, [pc, #244]	; (800bc2c <UART_Start_Receive_DMA+0x12c>)
 800bb36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3c:	4a3c      	ldr	r2, [pc, #240]	; (800bc30 <UART_Start_Receive_DMA+0x130>)
 800bb3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb44:	2200      	movs	r2, #0
 800bb46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bb48:	f107 0308 	add.w	r3, r7, #8
 800bb4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	3304      	adds	r3, #4
 800bb58:	4619      	mov	r1, r3
 800bb5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	88fb      	ldrh	r3, [r7, #6]
 800bb60:	f7f9 feb4 	bl	80058cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800bb64:	2300      	movs	r3, #0
 800bb66:	613b      	str	r3, [r7, #16]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	613b      	str	r3, [r7, #16]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	613b      	str	r3, [r7, #16]
 800bb78:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	330c      	adds	r3, #12
 800bb88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb8c:	e853 3f00 	ldrex	r3, [r3]
 800bb90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb98:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	330c      	adds	r3, #12
 800bba0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bba2:	64fa      	str	r2, [r7, #76]	; 0x4c
 800bba4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bba8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bbaa:	e841 2300 	strex	r3, r2, [r1]
 800bbae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bbb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1e5      	bne.n	800bb82 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3314      	adds	r3, #20
 800bbbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc0:	e853 3f00 	ldrex	r3, [r3]
 800bbc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc8:	f043 0301 	orr.w	r3, r3, #1
 800bbcc:	657b      	str	r3, [r7, #84]	; 0x54
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	3314      	adds	r3, #20
 800bbd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bbd6:	63ba      	str	r2, [r7, #56]	; 0x38
 800bbd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bbdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbde:	e841 2300 	strex	r3, r2, [r1]
 800bbe2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1e5      	bne.n	800bbb6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	3314      	adds	r3, #20
 800bbf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	e853 3f00 	ldrex	r3, [r3]
 800bbf8:	617b      	str	r3, [r7, #20]
   return(result);
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc00:	653b      	str	r3, [r7, #80]	; 0x50
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	3314      	adds	r3, #20
 800bc08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc0a:	627a      	str	r2, [r7, #36]	; 0x24
 800bc0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc0e:	6a39      	ldr	r1, [r7, #32]
 800bc10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc12:	e841 2300 	strex	r3, r2, [r1]
 800bc16:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d1e5      	bne.n	800bbea <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3760      	adds	r7, #96	; 0x60
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	0800b835 	.word	0x0800b835
 800bc2c:	0800b95b 	.word	0x0800b95b
 800bc30:	0800b991 	.word	0x0800b991

0800bc34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b089      	sub	sp, #36	; 0x24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	330c      	adds	r3, #12
 800bc42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	e853 3f00 	ldrex	r3, [r3]
 800bc4a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bc52:	61fb      	str	r3, [r7, #28]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	330c      	adds	r3, #12
 800bc5a:	69fa      	ldr	r2, [r7, #28]
 800bc5c:	61ba      	str	r2, [r7, #24]
 800bc5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc60:	6979      	ldr	r1, [r7, #20]
 800bc62:	69ba      	ldr	r2, [r7, #24]
 800bc64:	e841 2300 	strex	r3, r2, [r1]
 800bc68:	613b      	str	r3, [r7, #16]
   return(result);
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d1e5      	bne.n	800bc3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2220      	movs	r2, #32
 800bc74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800bc78:	bf00      	nop
 800bc7a:	3724      	adds	r7, #36	; 0x24
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b095      	sub	sp, #84	; 0x54
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	330c      	adds	r3, #12
 800bc92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc96:	e853 3f00 	ldrex	r3, [r3]
 800bc9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	330c      	adds	r3, #12
 800bcaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bcac:	643a      	str	r2, [r7, #64]	; 0x40
 800bcae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bcb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bcb4:	e841 2300 	strex	r3, r2, [r1]
 800bcb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1e5      	bne.n	800bc8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3314      	adds	r3, #20
 800bcc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc8:	6a3b      	ldr	r3, [r7, #32]
 800bcca:	e853 3f00 	ldrex	r3, [r3]
 800bcce:	61fb      	str	r3, [r7, #28]
   return(result);
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	f023 0301 	bic.w	r3, r3, #1
 800bcd6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	3314      	adds	r3, #20
 800bcde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bce0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bce8:	e841 2300 	strex	r3, r2, [r1]
 800bcec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d1e5      	bne.n	800bcc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d119      	bne.n	800bd30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	330c      	adds	r3, #12
 800bd02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	e853 3f00 	ldrex	r3, [r3]
 800bd0a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	f023 0310 	bic.w	r3, r3, #16
 800bd12:	647b      	str	r3, [r7, #68]	; 0x44
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	330c      	adds	r3, #12
 800bd1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd1c:	61ba      	str	r2, [r7, #24]
 800bd1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd20:	6979      	ldr	r1, [r7, #20]
 800bd22:	69ba      	ldr	r2, [r7, #24]
 800bd24:	e841 2300 	strex	r3, r2, [r1]
 800bd28:	613b      	str	r3, [r7, #16]
   return(result);
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1e5      	bne.n	800bcfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2220      	movs	r2, #32
 800bd34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bd3e:	bf00      	nop
 800bd40:	3754      	adds	r7, #84	; 0x54
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr

0800bd4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b084      	sub	sp, #16
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f7ff fd5b 	bl	800b820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd6a:	bf00      	nop
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b085      	sub	sp, #20
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	2b21      	cmp	r3, #33	; 0x21
 800bd84:	d13e      	bne.n	800be04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd8e:	d114      	bne.n	800bdba <UART_Transmit_IT+0x48>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	691b      	ldr	r3, [r3, #16]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d110      	bne.n	800bdba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a1b      	ldr	r3, [r3, #32]
 800bd9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	881b      	ldrh	r3, [r3, #0]
 800bda2:	461a      	mov	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bdac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a1b      	ldr	r3, [r3, #32]
 800bdb2:	1c9a      	adds	r2, r3, #2
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	621a      	str	r2, [r3, #32]
 800bdb8:	e008      	b.n	800bdcc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6a1b      	ldr	r3, [r3, #32]
 800bdbe:	1c59      	adds	r1, r3, #1
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	6211      	str	r1, [r2, #32]
 800bdc4:	781a      	ldrb	r2, [r3, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	4619      	mov	r1, r3
 800bdda:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d10f      	bne.n	800be00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	68da      	ldr	r2, [r3, #12]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bdee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68da      	ldr	r2, [r3, #12]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdfe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800be00:	2300      	movs	r3, #0
 800be02:	e000      	b.n	800be06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800be04:	2302      	movs	r3, #2
  }
}
 800be06:	4618      	mov	r0, r3
 800be08:	3714      	adds	r7, #20
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr

0800be12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b082      	sub	sp, #8
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	68da      	ldr	r2, [r3, #12]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2220      	movs	r2, #32
 800be2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff fcd6 	bl	800b7e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800be42:	b580      	push	{r7, lr}
 800be44:	b08c      	sub	sp, #48	; 0x30
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be50:	b2db      	uxtb	r3, r3
 800be52:	2b22      	cmp	r3, #34	; 0x22
 800be54:	f040 80ab 	bne.w	800bfae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	689b      	ldr	r3, [r3, #8]
 800be5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be60:	d117      	bne.n	800be92 <UART_Receive_IT+0x50>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	691b      	ldr	r3, [r3, #16]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d113      	bne.n	800be92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800be6a:	2300      	movs	r3, #0
 800be6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be80:	b29a      	uxth	r2, r3
 800be82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be8a:	1c9a      	adds	r2, r3, #2
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	629a      	str	r2, [r3, #40]	; 0x28
 800be90:	e026      	b.n	800bee0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800be98:	2300      	movs	r3, #0
 800be9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bea4:	d007      	beq.n	800beb6 <UART_Receive_IT+0x74>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d10a      	bne.n	800bec4 <UART_Receive_IT+0x82>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	691b      	ldr	r3, [r3, #16]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d106      	bne.n	800bec4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	b2da      	uxtb	r2, r3
 800bebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec0:	701a      	strb	r2, [r3, #0]
 800bec2:	e008      	b.n	800bed6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	b2db      	uxtb	r3, r3
 800becc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bed0:	b2da      	uxtb	r2, r3
 800bed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beda:	1c5a      	adds	r2, r3, #1
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	3b01      	subs	r3, #1
 800bee8:	b29b      	uxth	r3, r3
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	4619      	mov	r1, r3
 800beee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d15a      	bne.n	800bfaa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	68da      	ldr	r2, [r3, #12]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f022 0220 	bic.w	r2, r2, #32
 800bf02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	68da      	ldr	r2, [r3, #12]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bf12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	695a      	ldr	r2, [r3, #20]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f022 0201 	bic.w	r2, r2, #1
 800bf22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2220      	movs	r2, #32
 800bf28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d135      	bne.n	800bfa0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	330c      	adds	r3, #12
 800bf40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	e853 3f00 	ldrex	r3, [r3]
 800bf48:	613b      	str	r3, [r7, #16]
   return(result);
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	f023 0310 	bic.w	r3, r3, #16
 800bf50:	627b      	str	r3, [r7, #36]	; 0x24
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	330c      	adds	r3, #12
 800bf58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf5a:	623a      	str	r2, [r7, #32]
 800bf5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf5e:	69f9      	ldr	r1, [r7, #28]
 800bf60:	6a3a      	ldr	r2, [r7, #32]
 800bf62:	e841 2300 	strex	r3, r2, [r1]
 800bf66:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1e5      	bne.n	800bf3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f003 0310 	and.w	r3, r3, #16
 800bf78:	2b10      	cmp	r3, #16
 800bf7a:	d10a      	bne.n	800bf92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	60fb      	str	r3, [r7, #12]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	60fb      	str	r3, [r7, #12]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	60fb      	str	r3, [r7, #12]
 800bf90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bf96:	4619      	mov	r1, r3
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7f7 fe33 	bl	8003c04 <HAL_UARTEx_RxEventCallback>
 800bf9e:	e002      	b.n	800bfa6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f7ff fc29 	bl	800b7f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	e002      	b.n	800bfb0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	e000      	b.n	800bfb0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bfae:	2302      	movs	r3, #2
  }
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3730      	adds	r7, #48	; 0x30
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfbc:	b09f      	sub	sp, #124	; 0x7c
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	691b      	ldr	r3, [r3, #16]
 800bfc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bfcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfce:	68d9      	ldr	r1, [r3, #12]
 800bfd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	ea40 0301 	orr.w	r3, r0, r1
 800bfd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bfda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfdc:	689a      	ldr	r2, [r3, #8]
 800bfde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfe0:	691b      	ldr	r3, [r3, #16]
 800bfe2:	431a      	orrs	r2, r3
 800bfe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfe6:	695b      	ldr	r3, [r3, #20]
 800bfe8:	431a      	orrs	r2, r3
 800bfea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfec:	69db      	ldr	r3, [r3, #28]
 800bfee:	4313      	orrs	r3, r2
 800bff0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800bff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bffc:	f021 010c 	bic.w	r1, r1, #12
 800c000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c006:	430b      	orrs	r3, r1
 800c008:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c00a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	695b      	ldr	r3, [r3, #20]
 800c010:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c016:	6999      	ldr	r1, [r3, #24]
 800c018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	ea40 0301 	orr.w	r3, r0, r1
 800c020:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	4bc5      	ldr	r3, [pc, #788]	; (800c33c <UART_SetConfig+0x384>)
 800c028:	429a      	cmp	r2, r3
 800c02a:	d004      	beq.n	800c036 <UART_SetConfig+0x7e>
 800c02c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c02e:	681a      	ldr	r2, [r3, #0]
 800c030:	4bc3      	ldr	r3, [pc, #780]	; (800c340 <UART_SetConfig+0x388>)
 800c032:	429a      	cmp	r2, r3
 800c034:	d103      	bne.n	800c03e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c036:	f7fd fdfb 	bl	8009c30 <HAL_RCC_GetPCLK2Freq>
 800c03a:	6778      	str	r0, [r7, #116]	; 0x74
 800c03c:	e002      	b.n	800c044 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c03e:	f7fd fde3 	bl	8009c08 <HAL_RCC_GetPCLK1Freq>
 800c042:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c046:	69db      	ldr	r3, [r3, #28]
 800c048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c04c:	f040 80b6 	bne.w	800c1bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c052:	461c      	mov	r4, r3
 800c054:	f04f 0500 	mov.w	r5, #0
 800c058:	4622      	mov	r2, r4
 800c05a:	462b      	mov	r3, r5
 800c05c:	1891      	adds	r1, r2, r2
 800c05e:	6439      	str	r1, [r7, #64]	; 0x40
 800c060:	415b      	adcs	r3, r3
 800c062:	647b      	str	r3, [r7, #68]	; 0x44
 800c064:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c068:	1912      	adds	r2, r2, r4
 800c06a:	eb45 0303 	adc.w	r3, r5, r3
 800c06e:	f04f 0000 	mov.w	r0, #0
 800c072:	f04f 0100 	mov.w	r1, #0
 800c076:	00d9      	lsls	r1, r3, #3
 800c078:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c07c:	00d0      	lsls	r0, r2, #3
 800c07e:	4602      	mov	r2, r0
 800c080:	460b      	mov	r3, r1
 800c082:	1911      	adds	r1, r2, r4
 800c084:	6639      	str	r1, [r7, #96]	; 0x60
 800c086:	416b      	adcs	r3, r5
 800c088:	667b      	str	r3, [r7, #100]	; 0x64
 800c08a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	461a      	mov	r2, r3
 800c090:	f04f 0300 	mov.w	r3, #0
 800c094:	1891      	adds	r1, r2, r2
 800c096:	63b9      	str	r1, [r7, #56]	; 0x38
 800c098:	415b      	adcs	r3, r3
 800c09a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c09c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c0a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c0a4:	f7f4 fdd8 	bl	8000c58 <__aeabi_uldivmod>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	4ba5      	ldr	r3, [pc, #660]	; (800c344 <UART_SetConfig+0x38c>)
 800c0ae:	fba3 2302 	umull	r2, r3, r3, r2
 800c0b2:	095b      	lsrs	r3, r3, #5
 800c0b4:	011e      	lsls	r6, r3, #4
 800c0b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0b8:	461c      	mov	r4, r3
 800c0ba:	f04f 0500 	mov.w	r5, #0
 800c0be:	4622      	mov	r2, r4
 800c0c0:	462b      	mov	r3, r5
 800c0c2:	1891      	adds	r1, r2, r2
 800c0c4:	6339      	str	r1, [r7, #48]	; 0x30
 800c0c6:	415b      	adcs	r3, r3
 800c0c8:	637b      	str	r3, [r7, #52]	; 0x34
 800c0ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c0ce:	1912      	adds	r2, r2, r4
 800c0d0:	eb45 0303 	adc.w	r3, r5, r3
 800c0d4:	f04f 0000 	mov.w	r0, #0
 800c0d8:	f04f 0100 	mov.w	r1, #0
 800c0dc:	00d9      	lsls	r1, r3, #3
 800c0de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c0e2:	00d0      	lsls	r0, r2, #3
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	1911      	adds	r1, r2, r4
 800c0ea:	65b9      	str	r1, [r7, #88]	; 0x58
 800c0ec:	416b      	adcs	r3, r5
 800c0ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c0f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	f04f 0300 	mov.w	r3, #0
 800c0fa:	1891      	adds	r1, r2, r2
 800c0fc:	62b9      	str	r1, [r7, #40]	; 0x28
 800c0fe:	415b      	adcs	r3, r3
 800c100:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c102:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c106:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c10a:	f7f4 fda5 	bl	8000c58 <__aeabi_uldivmod>
 800c10e:	4602      	mov	r2, r0
 800c110:	460b      	mov	r3, r1
 800c112:	4b8c      	ldr	r3, [pc, #560]	; (800c344 <UART_SetConfig+0x38c>)
 800c114:	fba3 1302 	umull	r1, r3, r3, r2
 800c118:	095b      	lsrs	r3, r3, #5
 800c11a:	2164      	movs	r1, #100	; 0x64
 800c11c:	fb01 f303 	mul.w	r3, r1, r3
 800c120:	1ad3      	subs	r3, r2, r3
 800c122:	00db      	lsls	r3, r3, #3
 800c124:	3332      	adds	r3, #50	; 0x32
 800c126:	4a87      	ldr	r2, [pc, #540]	; (800c344 <UART_SetConfig+0x38c>)
 800c128:	fba2 2303 	umull	r2, r3, r2, r3
 800c12c:	095b      	lsrs	r3, r3, #5
 800c12e:	005b      	lsls	r3, r3, #1
 800c130:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c134:	441e      	add	r6, r3
 800c136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c138:	4618      	mov	r0, r3
 800c13a:	f04f 0100 	mov.w	r1, #0
 800c13e:	4602      	mov	r2, r0
 800c140:	460b      	mov	r3, r1
 800c142:	1894      	adds	r4, r2, r2
 800c144:	623c      	str	r4, [r7, #32]
 800c146:	415b      	adcs	r3, r3
 800c148:	627b      	str	r3, [r7, #36]	; 0x24
 800c14a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c14e:	1812      	adds	r2, r2, r0
 800c150:	eb41 0303 	adc.w	r3, r1, r3
 800c154:	f04f 0400 	mov.w	r4, #0
 800c158:	f04f 0500 	mov.w	r5, #0
 800c15c:	00dd      	lsls	r5, r3, #3
 800c15e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c162:	00d4      	lsls	r4, r2, #3
 800c164:	4622      	mov	r2, r4
 800c166:	462b      	mov	r3, r5
 800c168:	1814      	adds	r4, r2, r0
 800c16a:	653c      	str	r4, [r7, #80]	; 0x50
 800c16c:	414b      	adcs	r3, r1
 800c16e:	657b      	str	r3, [r7, #84]	; 0x54
 800c170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	461a      	mov	r2, r3
 800c176:	f04f 0300 	mov.w	r3, #0
 800c17a:	1891      	adds	r1, r2, r2
 800c17c:	61b9      	str	r1, [r7, #24]
 800c17e:	415b      	adcs	r3, r3
 800c180:	61fb      	str	r3, [r7, #28]
 800c182:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c186:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c18a:	f7f4 fd65 	bl	8000c58 <__aeabi_uldivmod>
 800c18e:	4602      	mov	r2, r0
 800c190:	460b      	mov	r3, r1
 800c192:	4b6c      	ldr	r3, [pc, #432]	; (800c344 <UART_SetConfig+0x38c>)
 800c194:	fba3 1302 	umull	r1, r3, r3, r2
 800c198:	095b      	lsrs	r3, r3, #5
 800c19a:	2164      	movs	r1, #100	; 0x64
 800c19c:	fb01 f303 	mul.w	r3, r1, r3
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	00db      	lsls	r3, r3, #3
 800c1a4:	3332      	adds	r3, #50	; 0x32
 800c1a6:	4a67      	ldr	r2, [pc, #412]	; (800c344 <UART_SetConfig+0x38c>)
 800c1a8:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ac:	095b      	lsrs	r3, r3, #5
 800c1ae:	f003 0207 	and.w	r2, r3, #7
 800c1b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4432      	add	r2, r6
 800c1b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c1ba:	e0b9      	b.n	800c330 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c1bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1be:	461c      	mov	r4, r3
 800c1c0:	f04f 0500 	mov.w	r5, #0
 800c1c4:	4622      	mov	r2, r4
 800c1c6:	462b      	mov	r3, r5
 800c1c8:	1891      	adds	r1, r2, r2
 800c1ca:	6139      	str	r1, [r7, #16]
 800c1cc:	415b      	adcs	r3, r3
 800c1ce:	617b      	str	r3, [r7, #20]
 800c1d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c1d4:	1912      	adds	r2, r2, r4
 800c1d6:	eb45 0303 	adc.w	r3, r5, r3
 800c1da:	f04f 0000 	mov.w	r0, #0
 800c1de:	f04f 0100 	mov.w	r1, #0
 800c1e2:	00d9      	lsls	r1, r3, #3
 800c1e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c1e8:	00d0      	lsls	r0, r2, #3
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	eb12 0804 	adds.w	r8, r2, r4
 800c1f2:	eb43 0905 	adc.w	r9, r3, r5
 800c1f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f04f 0100 	mov.w	r1, #0
 800c200:	f04f 0200 	mov.w	r2, #0
 800c204:	f04f 0300 	mov.w	r3, #0
 800c208:	008b      	lsls	r3, r1, #2
 800c20a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c20e:	0082      	lsls	r2, r0, #2
 800c210:	4640      	mov	r0, r8
 800c212:	4649      	mov	r1, r9
 800c214:	f7f4 fd20 	bl	8000c58 <__aeabi_uldivmod>
 800c218:	4602      	mov	r2, r0
 800c21a:	460b      	mov	r3, r1
 800c21c:	4b49      	ldr	r3, [pc, #292]	; (800c344 <UART_SetConfig+0x38c>)
 800c21e:	fba3 2302 	umull	r2, r3, r3, r2
 800c222:	095b      	lsrs	r3, r3, #5
 800c224:	011e      	lsls	r6, r3, #4
 800c226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c228:	4618      	mov	r0, r3
 800c22a:	f04f 0100 	mov.w	r1, #0
 800c22e:	4602      	mov	r2, r0
 800c230:	460b      	mov	r3, r1
 800c232:	1894      	adds	r4, r2, r2
 800c234:	60bc      	str	r4, [r7, #8]
 800c236:	415b      	adcs	r3, r3
 800c238:	60fb      	str	r3, [r7, #12]
 800c23a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c23e:	1812      	adds	r2, r2, r0
 800c240:	eb41 0303 	adc.w	r3, r1, r3
 800c244:	f04f 0400 	mov.w	r4, #0
 800c248:	f04f 0500 	mov.w	r5, #0
 800c24c:	00dd      	lsls	r5, r3, #3
 800c24e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c252:	00d4      	lsls	r4, r2, #3
 800c254:	4622      	mov	r2, r4
 800c256:	462b      	mov	r3, r5
 800c258:	1814      	adds	r4, r2, r0
 800c25a:	64bc      	str	r4, [r7, #72]	; 0x48
 800c25c:	414b      	adcs	r3, r1
 800c25e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	4618      	mov	r0, r3
 800c266:	f04f 0100 	mov.w	r1, #0
 800c26a:	f04f 0200 	mov.w	r2, #0
 800c26e:	f04f 0300 	mov.w	r3, #0
 800c272:	008b      	lsls	r3, r1, #2
 800c274:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c278:	0082      	lsls	r2, r0, #2
 800c27a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c27e:	f7f4 fceb 	bl	8000c58 <__aeabi_uldivmod>
 800c282:	4602      	mov	r2, r0
 800c284:	460b      	mov	r3, r1
 800c286:	4b2f      	ldr	r3, [pc, #188]	; (800c344 <UART_SetConfig+0x38c>)
 800c288:	fba3 1302 	umull	r1, r3, r3, r2
 800c28c:	095b      	lsrs	r3, r3, #5
 800c28e:	2164      	movs	r1, #100	; 0x64
 800c290:	fb01 f303 	mul.w	r3, r1, r3
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	011b      	lsls	r3, r3, #4
 800c298:	3332      	adds	r3, #50	; 0x32
 800c29a:	4a2a      	ldr	r2, [pc, #168]	; (800c344 <UART_SetConfig+0x38c>)
 800c29c:	fba2 2303 	umull	r2, r3, r2, r3
 800c2a0:	095b      	lsrs	r3, r3, #5
 800c2a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2a6:	441e      	add	r6, r3
 800c2a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f04f 0100 	mov.w	r1, #0
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	1894      	adds	r4, r2, r2
 800c2b6:	603c      	str	r4, [r7, #0]
 800c2b8:	415b      	adcs	r3, r3
 800c2ba:	607b      	str	r3, [r7, #4]
 800c2bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2c0:	1812      	adds	r2, r2, r0
 800c2c2:	eb41 0303 	adc.w	r3, r1, r3
 800c2c6:	f04f 0400 	mov.w	r4, #0
 800c2ca:	f04f 0500 	mov.w	r5, #0
 800c2ce:	00dd      	lsls	r5, r3, #3
 800c2d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c2d4:	00d4      	lsls	r4, r2, #3
 800c2d6:	4622      	mov	r2, r4
 800c2d8:	462b      	mov	r3, r5
 800c2da:	eb12 0a00 	adds.w	sl, r2, r0
 800c2de:	eb43 0b01 	adc.w	fp, r3, r1
 800c2e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f04f 0100 	mov.w	r1, #0
 800c2ec:	f04f 0200 	mov.w	r2, #0
 800c2f0:	f04f 0300 	mov.w	r3, #0
 800c2f4:	008b      	lsls	r3, r1, #2
 800c2f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c2fa:	0082      	lsls	r2, r0, #2
 800c2fc:	4650      	mov	r0, sl
 800c2fe:	4659      	mov	r1, fp
 800c300:	f7f4 fcaa 	bl	8000c58 <__aeabi_uldivmod>
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	4b0e      	ldr	r3, [pc, #56]	; (800c344 <UART_SetConfig+0x38c>)
 800c30a:	fba3 1302 	umull	r1, r3, r3, r2
 800c30e:	095b      	lsrs	r3, r3, #5
 800c310:	2164      	movs	r1, #100	; 0x64
 800c312:	fb01 f303 	mul.w	r3, r1, r3
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	011b      	lsls	r3, r3, #4
 800c31a:	3332      	adds	r3, #50	; 0x32
 800c31c:	4a09      	ldr	r2, [pc, #36]	; (800c344 <UART_SetConfig+0x38c>)
 800c31e:	fba2 2303 	umull	r2, r3, r2, r3
 800c322:	095b      	lsrs	r3, r3, #5
 800c324:	f003 020f 	and.w	r2, r3, #15
 800c328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4432      	add	r2, r6
 800c32e:	609a      	str	r2, [r3, #8]
}
 800c330:	bf00      	nop
 800c332:	377c      	adds	r7, #124	; 0x7c
 800c334:	46bd      	mov	sp, r7
 800c336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33a:	bf00      	nop
 800c33c:	40011000 	.word	0x40011000
 800c340:	40011400 	.word	0x40011400
 800c344:	51eb851f 	.word	0x51eb851f

0800c348 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c352:	2300      	movs	r3, #0
 800c354:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c35a:	2b84      	cmp	r3, #132	; 0x84
 800c35c:	d005      	beq.n	800c36a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c35e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	4413      	add	r3, r2
 800c366:	3303      	adds	r3, #3
 800c368:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c36a:	68fb      	ldr	r3, [r7, #12]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3714      	adds	r7, #20
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c37e:	f3ef 8305 	mrs	r3, IPSR
 800c382:	607b      	str	r3, [r7, #4]
  return(result);
 800c384:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c386:	2b00      	cmp	r3, #0
 800c388:	bf14      	ite	ne
 800c38a:	2301      	movne	r3, #1
 800c38c:	2300      	moveq	r3, #0
 800c38e:	b2db      	uxtb	r3, r3
}
 800c390:	4618      	mov	r0, r3
 800c392:	370c      	adds	r7, #12
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c3a0:	f001 fae8 	bl	800d974 <vTaskStartScheduler>
  
  return osOK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c3aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3ac:	b089      	sub	sp, #36	; 0x24
 800c3ae:	af04      	add	r7, sp, #16
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	695b      	ldr	r3, [r3, #20]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d020      	beq.n	800c3fe <osThreadCreate+0x54>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	699b      	ldr	r3, [r3, #24]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d01c      	beq.n	800c3fe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	685c      	ldr	r4, [r3, #4]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681d      	ldr	r5, [r3, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	691e      	ldr	r6, [r3, #16]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7ff ffb6 	bl	800c348 <makeFreeRtosPriority>
 800c3dc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	695b      	ldr	r3, [r3, #20]
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c3e6:	9202      	str	r2, [sp, #8]
 800c3e8:	9301      	str	r3, [sp, #4]
 800c3ea:	9100      	str	r1, [sp, #0]
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	4632      	mov	r2, r6
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	f001 f8f6 	bl	800d5e4 <xTaskCreateStatic>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	60fb      	str	r3, [r7, #12]
 800c3fc:	e01c      	b.n	800c438 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	685c      	ldr	r4, [r3, #4]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c40a:	b29e      	uxth	r6, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c412:	4618      	mov	r0, r3
 800c414:	f7ff ff98 	bl	800c348 <makeFreeRtosPriority>
 800c418:	4602      	mov	r2, r0
 800c41a:	f107 030c 	add.w	r3, r7, #12
 800c41e:	9301      	str	r3, [sp, #4]
 800c420:	9200      	str	r2, [sp, #0]
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	4632      	mov	r2, r6
 800c426:	4629      	mov	r1, r5
 800c428:	4620      	mov	r0, r4
 800c42a:	f001 f938 	bl	800d69e <xTaskCreate>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b01      	cmp	r3, #1
 800c432:	d001      	beq.n	800c438 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c434:	2300      	movs	r3, #0
 800c436:	e000      	b.n	800c43a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c438:	68fb      	ldr	r3, [r7, #12]
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c442 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b084      	sub	sp, #16
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d001      	beq.n	800c458 <osDelay+0x16>
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	e000      	b.n	800c45a <osDelay+0x18>
 800c458:	2301      	movs	r3, #1
 800c45a:	4618      	mov	r0, r3
 800c45c:	f001 fa56 	bl	800d90c <vTaskDelay>
  
  return osOK;
 800c460:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c462:	4618      	mov	r0, r3
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}

0800c46a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b086      	sub	sp, #24
 800c46e:	af02      	add	r7, sp, #8
 800c470:	6078      	str	r0, [r7, #4]
 800c472:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d00f      	beq.n	800c49c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d10a      	bne.n	800c498 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	2203      	movs	r2, #3
 800c488:	9200      	str	r2, [sp, #0]
 800c48a:	2200      	movs	r2, #0
 800c48c:	2100      	movs	r1, #0
 800c48e:	2001      	movs	r0, #1
 800c490:	f000 f9be 	bl	800c810 <xQueueGenericCreateStatic>
 800c494:	4603      	mov	r3, r0
 800c496:	e016      	b.n	800c4c6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c498:	2300      	movs	r3, #0
 800c49a:	e014      	b.n	800c4c6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d110      	bne.n	800c4c4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c4a2:	2203      	movs	r2, #3
 800c4a4:	2100      	movs	r1, #0
 800c4a6:	2001      	movs	r0, #1
 800c4a8:	f000 fa2a 	bl	800c900 <xQueueGenericCreate>
 800c4ac:	60f8      	str	r0, [r7, #12]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d005      	beq.n	800c4c0 <osSemaphoreCreate+0x56>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f000 fa7a 	bl	800c9b4 <xQueueGenericSend>
      return sema;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	e000      	b.n	800c4c6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c4c4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
	...

0800c4d0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c4da:	2300      	movs	r3, #0
 800c4dc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d101      	bne.n	800c4e8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c4e4:	2380      	movs	r3, #128	; 0x80
 800c4e6:	e03a      	b.n	800c55e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4f2:	d103      	bne.n	800c4fc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c4f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4f8:	60fb      	str	r3, [r7, #12]
 800c4fa:	e009      	b.n	800c510 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d006      	beq.n	800c510 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d101      	bne.n	800c510 <osSemaphoreWait+0x40>
      ticks = 1;
 800c50c:	2301      	movs	r3, #1
 800c50e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c510:	f7ff ff32 	bl	800c378 <inHandlerMode>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d017      	beq.n	800c54a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c51a:	f107 0308 	add.w	r3, r7, #8
 800c51e:	461a      	mov	r2, r3
 800c520:	2100      	movs	r1, #0
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 fe58 	bl	800d1d8 <xQueueReceiveFromISR>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d001      	beq.n	800c532 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c52e:	23ff      	movs	r3, #255	; 0xff
 800c530:	e015      	b.n	800c55e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d011      	beq.n	800c55c <osSemaphoreWait+0x8c>
 800c538:	4b0b      	ldr	r3, [pc, #44]	; (800c568 <osSemaphoreWait+0x98>)
 800c53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c53e:	601a      	str	r2, [r3, #0]
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	f3bf 8f6f 	isb	sy
 800c548:	e008      	b.n	800c55c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c54a:	68f9      	ldr	r1, [r7, #12]
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 fd37 	bl	800cfc0 <xQueueSemaphoreTake>
 800c552:	4603      	mov	r3, r0
 800c554:	2b01      	cmp	r3, #1
 800c556:	d001      	beq.n	800c55c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c558:	23ff      	movs	r3, #255	; 0xff
 800c55a:	e000      	b.n	800c55e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	e000ed04 	.word	0xe000ed04

0800c56c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c574:	2300      	movs	r3, #0
 800c576:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c578:	2300      	movs	r3, #0
 800c57a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c57c:	f7ff fefc 	bl	800c378 <inHandlerMode>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d016      	beq.n	800c5b4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c586:	f107 0308 	add.w	r3, r7, #8
 800c58a:	4619      	mov	r1, r3
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 fbaa 	bl	800cce6 <xQueueGiveFromISR>
 800c592:	4603      	mov	r3, r0
 800c594:	2b01      	cmp	r3, #1
 800c596:	d001      	beq.n	800c59c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c598:	23ff      	movs	r3, #255	; 0xff
 800c59a:	e017      	b.n	800c5cc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d013      	beq.n	800c5ca <osSemaphoreRelease+0x5e>
 800c5a2:	4b0c      	ldr	r3, [pc, #48]	; (800c5d4 <osSemaphoreRelease+0x68>)
 800c5a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5a8:	601a      	str	r2, [r3, #0]
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	f3bf 8f6f 	isb	sy
 800c5b2:	e00a      	b.n	800c5ca <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	2100      	movs	r1, #0
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f9fa 	bl	800c9b4 <xQueueGenericSend>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d001      	beq.n	800c5ca <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c5c6:	23ff      	movs	r3, #255	; 0xff
 800c5c8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3710      	adds	r7, #16
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	e000ed04 	.word	0xe000ed04

0800c5d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f103 0208 	add.w	r2, r3, #8
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f103 0208 	add.w	r2, r3, #8
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f103 0208 	add.w	r2, r3, #8
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2200      	movs	r2, #0
 800c60a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c60c:	bf00      	nop
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2200      	movs	r2, #0
 800c624:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c626:	bf00      	nop
 800c628:	370c      	adds	r7, #12
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr

0800c632 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c632:	b480      	push	{r7}
 800c634:	b085      	sub	sp, #20
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
 800c63a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	68fa      	ldr	r2, [r7, #12]
 800c646:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	689a      	ldr	r2, [r3, #8]
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	683a      	ldr	r2, [r7, #0]
 800c656:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	683a      	ldr	r2, [r7, #0]
 800c65c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	1c5a      	adds	r2, r3, #1
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	601a      	str	r2, [r3, #0]
}
 800c66e:	bf00      	nop
 800c670:	3714      	adds	r7, #20
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr

0800c67a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c67a:	b480      	push	{r7}
 800c67c:	b085      	sub	sp, #20
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c690:	d103      	bne.n	800c69a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	691b      	ldr	r3, [r3, #16]
 800c696:	60fb      	str	r3, [r7, #12]
 800c698:	e00c      	b.n	800c6b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	3308      	adds	r3, #8
 800c69e:	60fb      	str	r3, [r7, #12]
 800c6a0:	e002      	b.n	800c6a8 <vListInsert+0x2e>
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	60fb      	str	r3, [r7, #12]
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	68ba      	ldr	r2, [r7, #8]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d2f6      	bcs.n	800c6a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	685a      	ldr	r2, [r3, #4]
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	683a      	ldr	r2, [r7, #0]
 800c6c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	68fa      	ldr	r2, [r7, #12]
 800c6c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	683a      	ldr	r2, [r7, #0]
 800c6ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	1c5a      	adds	r2, r3, #1
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	601a      	str	r2, [r3, #0]
}
 800c6e0:	bf00      	nop
 800c6e2:	3714      	adds	r7, #20
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b085      	sub	sp, #20
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	691b      	ldr	r3, [r3, #16]
 800c6f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	6892      	ldr	r2, [r2, #8]
 800c702:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	689b      	ldr	r3, [r3, #8]
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	6852      	ldr	r2, [r2, #4]
 800c70c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	429a      	cmp	r2, r3
 800c716:	d103      	bne.n	800c720 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	689a      	ldr	r2, [r3, #8]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	1e5a      	subs	r2, r3, #1
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
}
 800c734:	4618      	mov	r0, r3
 800c736:	3714      	adds	r7, #20
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d10a      	bne.n	800c76a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c758:	f383 8811 	msr	BASEPRI, r3
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f3bf 8f4f 	dsb	sy
 800c764:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c766:	bf00      	nop
 800c768:	e7fe      	b.n	800c768 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c76a:	f002 fbc3 	bl	800eef4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c776:	68f9      	ldr	r1, [r7, #12]
 800c778:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c77a:	fb01 f303 	mul.w	r3, r1, r3
 800c77e:	441a      	add	r2, r3
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2200      	movs	r2, #0
 800c788:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c79a:	3b01      	subs	r3, #1
 800c79c:	68f9      	ldr	r1, [r7, #12]
 800c79e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c7a0:	fb01 f303 	mul.w	r3, r1, r3
 800c7a4:	441a      	add	r2, r3
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	22ff      	movs	r2, #255	; 0xff
 800c7ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	22ff      	movs	r2, #255	; 0xff
 800c7b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d114      	bne.n	800c7ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	691b      	ldr	r3, [r3, #16]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d01a      	beq.n	800c7fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	3310      	adds	r3, #16
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f001 fb55 	bl	800de7c <xTaskRemoveFromEventList>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d012      	beq.n	800c7fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c7d8:	4b0c      	ldr	r3, [pc, #48]	; (800c80c <xQueueGenericReset+0xcc>)
 800c7da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7de:	601a      	str	r2, [r3, #0]
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	f3bf 8f6f 	isb	sy
 800c7e8:	e009      	b.n	800c7fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	3310      	adds	r3, #16
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7ff fef2 	bl	800c5d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	3324      	adds	r3, #36	; 0x24
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7ff feed 	bl	800c5d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c7fe:	f002 fba9 	bl	800ef54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c802:	2301      	movs	r3, #1
}
 800c804:	4618      	mov	r0, r3
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	e000ed04 	.word	0xe000ed04

0800c810 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c810:	b580      	push	{r7, lr}
 800c812:	b08e      	sub	sp, #56	; 0x38
 800c814:	af02      	add	r7, sp, #8
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	607a      	str	r2, [r7, #4]
 800c81c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10a      	bne.n	800c83a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c836:	bf00      	nop
 800c838:	e7fe      	b.n	800c838 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d10a      	bne.n	800c856 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c844:	f383 8811 	msr	BASEPRI, r3
 800c848:	f3bf 8f6f 	isb	sy
 800c84c:	f3bf 8f4f 	dsb	sy
 800c850:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c852:	bf00      	nop
 800c854:	e7fe      	b.n	800c854 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d002      	beq.n	800c862 <xQueueGenericCreateStatic+0x52>
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d001      	beq.n	800c866 <xQueueGenericCreateStatic+0x56>
 800c862:	2301      	movs	r3, #1
 800c864:	e000      	b.n	800c868 <xQueueGenericCreateStatic+0x58>
 800c866:	2300      	movs	r3, #0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d10a      	bne.n	800c882 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c870:	f383 8811 	msr	BASEPRI, r3
 800c874:	f3bf 8f6f 	isb	sy
 800c878:	f3bf 8f4f 	dsb	sy
 800c87c:	623b      	str	r3, [r7, #32]
}
 800c87e:	bf00      	nop
 800c880:	e7fe      	b.n	800c880 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d102      	bne.n	800c88e <xQueueGenericCreateStatic+0x7e>
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d101      	bne.n	800c892 <xQueueGenericCreateStatic+0x82>
 800c88e:	2301      	movs	r3, #1
 800c890:	e000      	b.n	800c894 <xQueueGenericCreateStatic+0x84>
 800c892:	2300      	movs	r3, #0
 800c894:	2b00      	cmp	r3, #0
 800c896:	d10a      	bne.n	800c8ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89c:	f383 8811 	msr	BASEPRI, r3
 800c8a0:	f3bf 8f6f 	isb	sy
 800c8a4:	f3bf 8f4f 	dsb	sy
 800c8a8:	61fb      	str	r3, [r7, #28]
}
 800c8aa:	bf00      	nop
 800c8ac:	e7fe      	b.n	800c8ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c8ae:	2348      	movs	r3, #72	; 0x48
 800c8b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	2b48      	cmp	r3, #72	; 0x48
 800c8b6:	d00a      	beq.n	800c8ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8bc:	f383 8811 	msr	BASEPRI, r3
 800c8c0:	f3bf 8f6f 	isb	sy
 800c8c4:	f3bf 8f4f 	dsb	sy
 800c8c8:	61bb      	str	r3, [r7, #24]
}
 800c8ca:	bf00      	nop
 800c8cc:	e7fe      	b.n	800c8cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c8ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00d      	beq.n	800c8f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8dc:	2201      	movs	r2, #1
 800c8de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c8e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e8:	9300      	str	r3, [sp, #0]
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	68b9      	ldr	r1, [r7, #8]
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f000 f83f 	bl	800c974 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3730      	adds	r7, #48	; 0x30
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c900:	b580      	push	{r7, lr}
 800c902:	b08a      	sub	sp, #40	; 0x28
 800c904:	af02      	add	r7, sp, #8
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	4613      	mov	r3, r2
 800c90c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d10a      	bne.n	800c92a <xQueueGenericCreate+0x2a>
	__asm volatile
 800c914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c918:	f383 8811 	msr	BASEPRI, r3
 800c91c:	f3bf 8f6f 	isb	sy
 800c920:	f3bf 8f4f 	dsb	sy
 800c924:	613b      	str	r3, [r7, #16]
}
 800c926:	bf00      	nop
 800c928:	e7fe      	b.n	800c928 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	68ba      	ldr	r2, [r7, #8]
 800c92e:	fb02 f303 	mul.w	r3, r2, r3
 800c932:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	3348      	adds	r3, #72	; 0x48
 800c938:	4618      	mov	r0, r3
 800c93a:	f002 fbfd 	bl	800f138 <pvPortMalloc>
 800c93e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c940:	69bb      	ldr	r3, [r7, #24]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d011      	beq.n	800c96a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	3348      	adds	r3, #72	; 0x48
 800c94e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c950:	69bb      	ldr	r3, [r7, #24]
 800c952:	2200      	movs	r2, #0
 800c954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c958:	79fa      	ldrb	r2, [r7, #7]
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	4613      	mov	r3, r2
 800c960:	697a      	ldr	r2, [r7, #20]
 800c962:	68b9      	ldr	r1, [r7, #8]
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f000 f805 	bl	800c974 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c96a:	69bb      	ldr	r3, [r7, #24]
	}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3720      	adds	r7, #32
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	607a      	str	r2, [r7, #4]
 800c980:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d103      	bne.n	800c990 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c988:	69bb      	ldr	r3, [r7, #24]
 800c98a:	69ba      	ldr	r2, [r7, #24]
 800c98c:	601a      	str	r2, [r3, #0]
 800c98e:	e002      	b.n	800c996 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	68fa      	ldr	r2, [r7, #12]
 800c99a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	68ba      	ldr	r2, [r7, #8]
 800c9a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c9a2:	2101      	movs	r1, #1
 800c9a4:	69b8      	ldr	r0, [r7, #24]
 800c9a6:	f7ff fecb 	bl	800c740 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c9aa:	bf00      	nop
 800c9ac:	3710      	adds	r7, #16
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
	...

0800c9b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b08e      	sub	sp, #56	; 0x38
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
 800c9c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d10a      	bne.n	800c9e6 <xQueueGenericSend+0x32>
	__asm volatile
 800c9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d4:	f383 8811 	msr	BASEPRI, r3
 800c9d8:	f3bf 8f6f 	isb	sy
 800c9dc:	f3bf 8f4f 	dsb	sy
 800c9e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c9e2:	bf00      	nop
 800c9e4:	e7fe      	b.n	800c9e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d103      	bne.n	800c9f4 <xQueueGenericSend+0x40>
 800c9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d101      	bne.n	800c9f8 <xQueueGenericSend+0x44>
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	e000      	b.n	800c9fa <xQueueGenericSend+0x46>
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10a      	bne.n	800ca14 <xQueueGenericSend+0x60>
	__asm volatile
 800c9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca02:	f383 8811 	msr	BASEPRI, r3
 800ca06:	f3bf 8f6f 	isb	sy
 800ca0a:	f3bf 8f4f 	dsb	sy
 800ca0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca10:	bf00      	nop
 800ca12:	e7fe      	b.n	800ca12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	2b02      	cmp	r3, #2
 800ca18:	d103      	bne.n	800ca22 <xQueueGenericSend+0x6e>
 800ca1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d101      	bne.n	800ca26 <xQueueGenericSend+0x72>
 800ca22:	2301      	movs	r3, #1
 800ca24:	e000      	b.n	800ca28 <xQueueGenericSend+0x74>
 800ca26:	2300      	movs	r3, #0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d10a      	bne.n	800ca42 <xQueueGenericSend+0x8e>
	__asm volatile
 800ca2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca30:	f383 8811 	msr	BASEPRI, r3
 800ca34:	f3bf 8f6f 	isb	sy
 800ca38:	f3bf 8f4f 	dsb	sy
 800ca3c:	623b      	str	r3, [r7, #32]
}
 800ca3e:	bf00      	nop
 800ca40:	e7fe      	b.n	800ca40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca42:	f001 fbd7 	bl	800e1f4 <xTaskGetSchedulerState>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d102      	bne.n	800ca52 <xQueueGenericSend+0x9e>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d101      	bne.n	800ca56 <xQueueGenericSend+0xa2>
 800ca52:	2301      	movs	r3, #1
 800ca54:	e000      	b.n	800ca58 <xQueueGenericSend+0xa4>
 800ca56:	2300      	movs	r3, #0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d10a      	bne.n	800ca72 <xQueueGenericSend+0xbe>
	__asm volatile
 800ca5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca60:	f383 8811 	msr	BASEPRI, r3
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	f3bf 8f4f 	dsb	sy
 800ca6c:	61fb      	str	r3, [r7, #28]
}
 800ca6e:	bf00      	nop
 800ca70:	e7fe      	b.n	800ca70 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca72:	f002 fa3f 	bl	800eef4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d302      	bcc.n	800ca88 <xQueueGenericSend+0xd4>
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	2b02      	cmp	r3, #2
 800ca86:	d129      	bne.n	800cadc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca88:	683a      	ldr	r2, [r7, #0]
 800ca8a:	68b9      	ldr	r1, [r7, #8]
 800ca8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca8e:	f000 fc3b 	bl	800d308 <prvCopyDataToQueue>
 800ca92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d010      	beq.n	800cabe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9e:	3324      	adds	r3, #36	; 0x24
 800caa0:	4618      	mov	r0, r3
 800caa2:	f001 f9eb 	bl	800de7c <xTaskRemoveFromEventList>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d013      	beq.n	800cad4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800caac:	4b3f      	ldr	r3, [pc, #252]	; (800cbac <xQueueGenericSend+0x1f8>)
 800caae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cab2:	601a      	str	r2, [r3, #0]
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	f3bf 8f6f 	isb	sy
 800cabc:	e00a      	b.n	800cad4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d007      	beq.n	800cad4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cac4:	4b39      	ldr	r3, [pc, #228]	; (800cbac <xQueueGenericSend+0x1f8>)
 800cac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caca:	601a      	str	r2, [r3, #0]
 800cacc:	f3bf 8f4f 	dsb	sy
 800cad0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cad4:	f002 fa3e 	bl	800ef54 <vPortExitCritical>
				return pdPASS;
 800cad8:	2301      	movs	r3, #1
 800cada:	e063      	b.n	800cba4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d103      	bne.n	800caea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cae2:	f002 fa37 	bl	800ef54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cae6:	2300      	movs	r3, #0
 800cae8:	e05c      	b.n	800cba4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800caea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caec:	2b00      	cmp	r3, #0
 800caee:	d106      	bne.n	800cafe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800caf0:	f107 0314 	add.w	r3, r7, #20
 800caf4:	4618      	mov	r0, r3
 800caf6:	f001 fa23 	bl	800df40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cafa:	2301      	movs	r3, #1
 800cafc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cafe:	f002 fa29 	bl	800ef54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb02:	f000 ff9d 	bl	800da40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb06:	f002 f9f5 	bl	800eef4 <vPortEnterCritical>
 800cb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb10:	b25b      	sxtb	r3, r3
 800cb12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb16:	d103      	bne.n	800cb20 <xQueueGenericSend+0x16c>
 800cb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb26:	b25b      	sxtb	r3, r3
 800cb28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb2c:	d103      	bne.n	800cb36 <xQueueGenericSend+0x182>
 800cb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb30:	2200      	movs	r2, #0
 800cb32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb36:	f002 fa0d 	bl	800ef54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb3a:	1d3a      	adds	r2, r7, #4
 800cb3c:	f107 0314 	add.w	r3, r7, #20
 800cb40:	4611      	mov	r1, r2
 800cb42:	4618      	mov	r0, r3
 800cb44:	f001 fa12 	bl	800df6c <xTaskCheckForTimeOut>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d124      	bne.n	800cb98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cb4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb50:	f000 fcd2 	bl	800d4f8 <prvIsQueueFull>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d018      	beq.n	800cb8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5c:	3310      	adds	r3, #16
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	4611      	mov	r1, r2
 800cb62:	4618      	mov	r0, r3
 800cb64:	f001 f93a 	bl	800dddc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cb68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb6a:	f000 fc5d 	bl	800d428 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cb6e:	f000 ff75 	bl	800da5c <xTaskResumeAll>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	f47f af7c 	bne.w	800ca72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cb7a:	4b0c      	ldr	r3, [pc, #48]	; (800cbac <xQueueGenericSend+0x1f8>)
 800cb7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb80:	601a      	str	r2, [r3, #0]
 800cb82:	f3bf 8f4f 	dsb	sy
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	e772      	b.n	800ca72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cb8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb8e:	f000 fc4b 	bl	800d428 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb92:	f000 ff63 	bl	800da5c <xTaskResumeAll>
 800cb96:	e76c      	b.n	800ca72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cb98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb9a:	f000 fc45 	bl	800d428 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb9e:	f000 ff5d 	bl	800da5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cba2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3738      	adds	r7, #56	; 0x38
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	e000ed04 	.word	0xe000ed04

0800cbb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b090      	sub	sp, #64	; 0x40
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	607a      	str	r2, [r7, #4]
 800cbbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d10a      	bne.n	800cbde <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbcc:	f383 8811 	msr	BASEPRI, r3
 800cbd0:	f3bf 8f6f 	isb	sy
 800cbd4:	f3bf 8f4f 	dsb	sy
 800cbd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbda:	bf00      	nop
 800cbdc:	e7fe      	b.n	800cbdc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d103      	bne.n	800cbec <xQueueGenericSendFromISR+0x3c>
 800cbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d101      	bne.n	800cbf0 <xQueueGenericSendFromISR+0x40>
 800cbec:	2301      	movs	r3, #1
 800cbee:	e000      	b.n	800cbf2 <xQueueGenericSendFromISR+0x42>
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d10a      	bne.n	800cc0c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfa:	f383 8811 	msr	BASEPRI, r3
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	f3bf 8f4f 	dsb	sy
 800cc06:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc08:	bf00      	nop
 800cc0a:	e7fe      	b.n	800cc0a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	2b02      	cmp	r3, #2
 800cc10:	d103      	bne.n	800cc1a <xQueueGenericSendFromISR+0x6a>
 800cc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d101      	bne.n	800cc1e <xQueueGenericSendFromISR+0x6e>
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e000      	b.n	800cc20 <xQueueGenericSendFromISR+0x70>
 800cc1e:	2300      	movs	r3, #0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10a      	bne.n	800cc3a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc28:	f383 8811 	msr	BASEPRI, r3
 800cc2c:	f3bf 8f6f 	isb	sy
 800cc30:	f3bf 8f4f 	dsb	sy
 800cc34:	623b      	str	r3, [r7, #32]
}
 800cc36:	bf00      	nop
 800cc38:	e7fe      	b.n	800cc38 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc3a:	f002 fa3d 	bl	800f0b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cc3e:	f3ef 8211 	mrs	r2, BASEPRI
 800cc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc46:	f383 8811 	msr	BASEPRI, r3
 800cc4a:	f3bf 8f6f 	isb	sy
 800cc4e:	f3bf 8f4f 	dsb	sy
 800cc52:	61fa      	str	r2, [r7, #28]
 800cc54:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cc56:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc58:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d302      	bcc.n	800cc6c <xQueueGenericSendFromISR+0xbc>
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	2b02      	cmp	r3, #2
 800cc6a:	d12f      	bne.n	800cccc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc7c:	683a      	ldr	r2, [r7, #0]
 800cc7e:	68b9      	ldr	r1, [r7, #8]
 800cc80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc82:	f000 fb41 	bl	800d308 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cc8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc8e:	d112      	bne.n	800ccb6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d016      	beq.n	800ccc6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9a:	3324      	adds	r3, #36	; 0x24
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f001 f8ed 	bl	800de7c <xTaskRemoveFromEventList>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d00e      	beq.n	800ccc6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d00b      	beq.n	800ccc6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	601a      	str	r2, [r3, #0]
 800ccb4:	e007      	b.n	800ccc6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ccb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ccba:	3301      	adds	r3, #1
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	b25a      	sxtb	r2, r3
 800ccc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ccca:	e001      	b.n	800ccd0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cccc:	2300      	movs	r3, #0
 800ccce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccd2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ccda:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ccdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3740      	adds	r7, #64	; 0x40
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b08e      	sub	sp, #56	; 0x38
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
 800ccee:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10a      	bne.n	800cd10 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ccfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfe:	f383 8811 	msr	BASEPRI, r3
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	623b      	str	r3, [r7, #32]
}
 800cd0c:	bf00      	nop
 800cd0e:	e7fe      	b.n	800cd0e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00a      	beq.n	800cd2e <xQueueGiveFromISR+0x48>
	__asm volatile
 800cd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1c:	f383 8811 	msr	BASEPRI, r3
 800cd20:	f3bf 8f6f 	isb	sy
 800cd24:	f3bf 8f4f 	dsb	sy
 800cd28:	61fb      	str	r3, [r7, #28]
}
 800cd2a:	bf00      	nop
 800cd2c:	e7fe      	b.n	800cd2c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d103      	bne.n	800cd3e <xQueueGiveFromISR+0x58>
 800cd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d101      	bne.n	800cd42 <xQueueGiveFromISR+0x5c>
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e000      	b.n	800cd44 <xQueueGiveFromISR+0x5e>
 800cd42:	2300      	movs	r3, #0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10a      	bne.n	800cd5e <xQueueGiveFromISR+0x78>
	__asm volatile
 800cd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4c:	f383 8811 	msr	BASEPRI, r3
 800cd50:	f3bf 8f6f 	isb	sy
 800cd54:	f3bf 8f4f 	dsb	sy
 800cd58:	61bb      	str	r3, [r7, #24]
}
 800cd5a:	bf00      	nop
 800cd5c:	e7fe      	b.n	800cd5c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd5e:	f002 f9ab 	bl	800f0b8 <vPortValidateInterruptPriority>
	__asm volatile
 800cd62:	f3ef 8211 	mrs	r2, BASEPRI
 800cd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	617a      	str	r2, [r7, #20]
 800cd78:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cd7a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d22b      	bcs.n	800cde6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9a:	1c5a      	adds	r2, r3, #1
 800cd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cda0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cda4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cda8:	d112      	bne.n	800cdd0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d016      	beq.n	800cde0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb4:	3324      	adds	r3, #36	; 0x24
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f001 f860 	bl	800de7c <xTaskRemoveFromEventList>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d00e      	beq.n	800cde0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00b      	beq.n	800cde0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	601a      	str	r2, [r3, #0]
 800cdce:	e007      	b.n	800cde0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cdd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	b25a      	sxtb	r2, r3
 800cdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cde0:	2301      	movs	r3, #1
 800cde2:	637b      	str	r3, [r7, #52]	; 0x34
 800cde4:	e001      	b.n	800cdea <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cde6:	2300      	movs	r3, #0
 800cde8:	637b      	str	r3, [r7, #52]	; 0x34
 800cdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	f383 8811 	msr	BASEPRI, r3
}
 800cdf4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cdf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3738      	adds	r7, #56	; 0x38
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b08c      	sub	sp, #48	; 0x30
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d10a      	bne.n	800ce30 <xQueueReceive+0x30>
	__asm volatile
 800ce1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce1e:	f383 8811 	msr	BASEPRI, r3
 800ce22:	f3bf 8f6f 	isb	sy
 800ce26:	f3bf 8f4f 	dsb	sy
 800ce2a:	623b      	str	r3, [r7, #32]
}
 800ce2c:	bf00      	nop
 800ce2e:	e7fe      	b.n	800ce2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d103      	bne.n	800ce3e <xQueueReceive+0x3e>
 800ce36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d101      	bne.n	800ce42 <xQueueReceive+0x42>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	e000      	b.n	800ce44 <xQueueReceive+0x44>
 800ce42:	2300      	movs	r3, #0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d10a      	bne.n	800ce5e <xQueueReceive+0x5e>
	__asm volatile
 800ce48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce4c:	f383 8811 	msr	BASEPRI, r3
 800ce50:	f3bf 8f6f 	isb	sy
 800ce54:	f3bf 8f4f 	dsb	sy
 800ce58:	61fb      	str	r3, [r7, #28]
}
 800ce5a:	bf00      	nop
 800ce5c:	e7fe      	b.n	800ce5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce5e:	f001 f9c9 	bl	800e1f4 <xTaskGetSchedulerState>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d102      	bne.n	800ce6e <xQueueReceive+0x6e>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d101      	bne.n	800ce72 <xQueueReceive+0x72>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e000      	b.n	800ce74 <xQueueReceive+0x74>
 800ce72:	2300      	movs	r3, #0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d10a      	bne.n	800ce8e <xQueueReceive+0x8e>
	__asm volatile
 800ce78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7c:	f383 8811 	msr	BASEPRI, r3
 800ce80:	f3bf 8f6f 	isb	sy
 800ce84:	f3bf 8f4f 	dsb	sy
 800ce88:	61bb      	str	r3, [r7, #24]
}
 800ce8a:	bf00      	nop
 800ce8c:	e7fe      	b.n	800ce8c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce8e:	f002 f831 	bl	800eef4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d01f      	beq.n	800cede <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ce9e:	68b9      	ldr	r1, [r7, #8]
 800cea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cea2:	f000 fa9b 	bl	800d3dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea8:	1e5a      	subs	r2, r3, #1
 800ceaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ceae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb0:	691b      	ldr	r3, [r3, #16]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00f      	beq.n	800ced6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb8:	3310      	adds	r3, #16
 800ceba:	4618      	mov	r0, r3
 800cebc:	f000 ffde 	bl	800de7c <xTaskRemoveFromEventList>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d007      	beq.n	800ced6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cec6:	4b3d      	ldr	r3, [pc, #244]	; (800cfbc <xQueueReceive+0x1bc>)
 800cec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cecc:	601a      	str	r2, [r3, #0]
 800cece:	f3bf 8f4f 	dsb	sy
 800ced2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ced6:	f002 f83d 	bl	800ef54 <vPortExitCritical>
				return pdPASS;
 800ceda:	2301      	movs	r3, #1
 800cedc:	e069      	b.n	800cfb2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d103      	bne.n	800ceec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cee4:	f002 f836 	bl	800ef54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cee8:	2300      	movs	r3, #0
 800ceea:	e062      	b.n	800cfb2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ceec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d106      	bne.n	800cf00 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cef2:	f107 0310 	add.w	r3, r7, #16
 800cef6:	4618      	mov	r0, r3
 800cef8:	f001 f822 	bl	800df40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cefc:	2301      	movs	r3, #1
 800cefe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf00:	f002 f828 	bl	800ef54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf04:	f000 fd9c 	bl	800da40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf08:	f001 fff4 	bl	800eef4 <vPortEnterCritical>
 800cf0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf12:	b25b      	sxtb	r3, r3
 800cf14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf18:	d103      	bne.n	800cf22 <xQueueReceive+0x122>
 800cf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf28:	b25b      	sxtb	r3, r3
 800cf2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf2e:	d103      	bne.n	800cf38 <xQueueReceive+0x138>
 800cf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf32:	2200      	movs	r2, #0
 800cf34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf38:	f002 f80c 	bl	800ef54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf3c:	1d3a      	adds	r2, r7, #4
 800cf3e:	f107 0310 	add.w	r3, r7, #16
 800cf42:	4611      	mov	r1, r2
 800cf44:	4618      	mov	r0, r3
 800cf46:	f001 f811 	bl	800df6c <xTaskCheckForTimeOut>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d123      	bne.n	800cf98 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf52:	f000 fabb 	bl	800d4cc <prvIsQueueEmpty>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d017      	beq.n	800cf8c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5e:	3324      	adds	r3, #36	; 0x24
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	4611      	mov	r1, r2
 800cf64:	4618      	mov	r0, r3
 800cf66:	f000 ff39 	bl	800dddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cf6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf6c:	f000 fa5c 	bl	800d428 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cf70:	f000 fd74 	bl	800da5c <xTaskResumeAll>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d189      	bne.n	800ce8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cf7a:	4b10      	ldr	r3, [pc, #64]	; (800cfbc <xQueueReceive+0x1bc>)
 800cf7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf80:	601a      	str	r2, [r3, #0]
 800cf82:	f3bf 8f4f 	dsb	sy
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	e780      	b.n	800ce8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cf8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf8e:	f000 fa4b 	bl	800d428 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf92:	f000 fd63 	bl	800da5c <xTaskResumeAll>
 800cf96:	e77a      	b.n	800ce8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cf98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf9a:	f000 fa45 	bl	800d428 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf9e:	f000 fd5d 	bl	800da5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfa4:	f000 fa92 	bl	800d4cc <prvIsQueueEmpty>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	f43f af6f 	beq.w	800ce8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cfb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3730      	adds	r7, #48	; 0x30
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	e000ed04 	.word	0xe000ed04

0800cfc0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b08e      	sub	sp, #56	; 0x38
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d10a      	bne.n	800cff2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800cfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe0:	f383 8811 	msr	BASEPRI, r3
 800cfe4:	f3bf 8f6f 	isb	sy
 800cfe8:	f3bf 8f4f 	dsb	sy
 800cfec:	623b      	str	r3, [r7, #32]
}
 800cfee:	bf00      	nop
 800cff0:	e7fe      	b.n	800cff0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00a      	beq.n	800d010 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800cffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffe:	f383 8811 	msr	BASEPRI, r3
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	f3bf 8f4f 	dsb	sy
 800d00a:	61fb      	str	r3, [r7, #28]
}
 800d00c:	bf00      	nop
 800d00e:	e7fe      	b.n	800d00e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d010:	f001 f8f0 	bl	800e1f4 <xTaskGetSchedulerState>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d102      	bne.n	800d020 <xQueueSemaphoreTake+0x60>
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d101      	bne.n	800d024 <xQueueSemaphoreTake+0x64>
 800d020:	2301      	movs	r3, #1
 800d022:	e000      	b.n	800d026 <xQueueSemaphoreTake+0x66>
 800d024:	2300      	movs	r3, #0
 800d026:	2b00      	cmp	r3, #0
 800d028:	d10a      	bne.n	800d040 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02e:	f383 8811 	msr	BASEPRI, r3
 800d032:	f3bf 8f6f 	isb	sy
 800d036:	f3bf 8f4f 	dsb	sy
 800d03a:	61bb      	str	r3, [r7, #24]
}
 800d03c:	bf00      	nop
 800d03e:	e7fe      	b.n	800d03e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d040:	f001 ff58 	bl	800eef4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d048:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d024      	beq.n	800d09a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d052:	1e5a      	subs	r2, r3, #1
 800d054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d056:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d104      	bne.n	800d06a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d060:	f001 fa70 	bl	800e544 <pvTaskIncrementMutexHeldCount>
 800d064:	4602      	mov	r2, r0
 800d066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d068:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06c:	691b      	ldr	r3, [r3, #16]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00f      	beq.n	800d092 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d074:	3310      	adds	r3, #16
 800d076:	4618      	mov	r0, r3
 800d078:	f000 ff00 	bl	800de7c <xTaskRemoveFromEventList>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d007      	beq.n	800d092 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d082:	4b54      	ldr	r3, [pc, #336]	; (800d1d4 <xQueueSemaphoreTake+0x214>)
 800d084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d088:	601a      	str	r2, [r3, #0]
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d092:	f001 ff5f 	bl	800ef54 <vPortExitCritical>
				return pdPASS;
 800d096:	2301      	movs	r3, #1
 800d098:	e097      	b.n	800d1ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d111      	bne.n	800d0c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d00a      	beq.n	800d0bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0aa:	f383 8811 	msr	BASEPRI, r3
 800d0ae:	f3bf 8f6f 	isb	sy
 800d0b2:	f3bf 8f4f 	dsb	sy
 800d0b6:	617b      	str	r3, [r7, #20]
}
 800d0b8:	bf00      	nop
 800d0ba:	e7fe      	b.n	800d0ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d0bc:	f001 ff4a 	bl	800ef54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	e082      	b.n	800d1ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d106      	bne.n	800d0d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d0ca:	f107 030c 	add.w	r3, r7, #12
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f000 ff36 	bl	800df40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d0d8:	f001 ff3c 	bl	800ef54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d0dc:	f000 fcb0 	bl	800da40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d0e0:	f001 ff08 	bl	800eef4 <vPortEnterCritical>
 800d0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0ea:	b25b      	sxtb	r3, r3
 800d0ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0f0:	d103      	bne.n	800d0fa <xQueueSemaphoreTake+0x13a>
 800d0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d100:	b25b      	sxtb	r3, r3
 800d102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d106:	d103      	bne.n	800d110 <xQueueSemaphoreTake+0x150>
 800d108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10a:	2200      	movs	r2, #0
 800d10c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d110:	f001 ff20 	bl	800ef54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d114:	463a      	mov	r2, r7
 800d116:	f107 030c 	add.w	r3, r7, #12
 800d11a:	4611      	mov	r1, r2
 800d11c:	4618      	mov	r0, r3
 800d11e:	f000 ff25 	bl	800df6c <xTaskCheckForTimeOut>
 800d122:	4603      	mov	r3, r0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d132      	bne.n	800d18e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d128:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d12a:	f000 f9cf 	bl	800d4cc <prvIsQueueEmpty>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d026      	beq.n	800d182 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d109      	bne.n	800d150 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d13c:	f001 feda 	bl	800eef4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	4618      	mov	r0, r3
 800d146:	f001 f873 	bl	800e230 <xTaskPriorityInherit>
 800d14a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d14c:	f001 ff02 	bl	800ef54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d152:	3324      	adds	r3, #36	; 0x24
 800d154:	683a      	ldr	r2, [r7, #0]
 800d156:	4611      	mov	r1, r2
 800d158:	4618      	mov	r0, r3
 800d15a:	f000 fe3f 	bl	800dddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d15e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d160:	f000 f962 	bl	800d428 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d164:	f000 fc7a 	bl	800da5c <xTaskResumeAll>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f47f af68 	bne.w	800d040 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d170:	4b18      	ldr	r3, [pc, #96]	; (800d1d4 <xQueueSemaphoreTake+0x214>)
 800d172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d176:	601a      	str	r2, [r3, #0]
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	f3bf 8f6f 	isb	sy
 800d180:	e75e      	b.n	800d040 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d182:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d184:	f000 f950 	bl	800d428 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d188:	f000 fc68 	bl	800da5c <xTaskResumeAll>
 800d18c:	e758      	b.n	800d040 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d18e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d190:	f000 f94a 	bl	800d428 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d194:	f000 fc62 	bl	800da5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d198:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d19a:	f000 f997 	bl	800d4cc <prvIsQueueEmpty>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f43f af4d 	beq.w	800d040 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00d      	beq.n	800d1c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d1ac:	f001 fea2 	bl	800eef4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d1b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1b2:	f000 f891 	bl	800d2d8 <prvGetDisinheritPriorityAfterTimeout>
 800d1b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ba:	689b      	ldr	r3, [r3, #8]
 800d1bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f001 f932 	bl	800e428 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d1c4:	f001 fec6 	bl	800ef54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d1c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3738      	adds	r7, #56	; 0x38
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	e000ed04 	.word	0xe000ed04

0800d1d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b08e      	sub	sp, #56	; 0x38
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d10a      	bne.n	800d204 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f2:	f383 8811 	msr	BASEPRI, r3
 800d1f6:	f3bf 8f6f 	isb	sy
 800d1fa:	f3bf 8f4f 	dsb	sy
 800d1fe:	623b      	str	r3, [r7, #32]
}
 800d200:	bf00      	nop
 800d202:	e7fe      	b.n	800d202 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d103      	bne.n	800d212 <xQueueReceiveFromISR+0x3a>
 800d20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d101      	bne.n	800d216 <xQueueReceiveFromISR+0x3e>
 800d212:	2301      	movs	r3, #1
 800d214:	e000      	b.n	800d218 <xQueueReceiveFromISR+0x40>
 800d216:	2300      	movs	r3, #0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d10a      	bne.n	800d232 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	61fb      	str	r3, [r7, #28]
}
 800d22e:	bf00      	nop
 800d230:	e7fe      	b.n	800d230 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d232:	f001 ff41 	bl	800f0b8 <vPortValidateInterruptPriority>
	__asm volatile
 800d236:	f3ef 8211 	mrs	r2, BASEPRI
 800d23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23e:	f383 8811 	msr	BASEPRI, r3
 800d242:	f3bf 8f6f 	isb	sy
 800d246:	f3bf 8f4f 	dsb	sy
 800d24a:	61ba      	str	r2, [r7, #24]
 800d24c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d24e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d250:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d256:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d02f      	beq.n	800d2be <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d268:	68b9      	ldr	r1, [r7, #8]
 800d26a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d26c:	f000 f8b6 	bl	800d3dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d272:	1e5a      	subs	r2, r3, #1
 800d274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d276:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d278:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d27c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d280:	d112      	bne.n	800d2a8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d284:	691b      	ldr	r3, [r3, #16]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d016      	beq.n	800d2b8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28c:	3310      	adds	r3, #16
 800d28e:	4618      	mov	r0, r3
 800d290:	f000 fdf4 	bl	800de7c <xTaskRemoveFromEventList>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	d00e      	beq.n	800d2b8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d00b      	beq.n	800d2b8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	601a      	str	r2, [r3, #0]
 800d2a6:	e007      	b.n	800d2b8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d2a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	b25a      	sxtb	r2, r3
 800d2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	637b      	str	r3, [r7, #52]	; 0x34
 800d2bc:	e001      	b.n	800d2c2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	637b      	str	r3, [r7, #52]	; 0x34
 800d2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	f383 8811 	msr	BASEPRI, r3
}
 800d2cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3738      	adds	r7, #56	; 0x38
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d2d8:	b480      	push	{r7}
 800d2da:	b085      	sub	sp, #20
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d006      	beq.n	800d2f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f1c3 0307 	rsb	r3, r3, #7
 800d2f2:	60fb      	str	r3, [r7, #12]
 800d2f4:	e001      	b.n	800d2fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
	}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3714      	adds	r7, #20
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr

0800d308 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b086      	sub	sp, #24
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d314:	2300      	movs	r3, #0
 800d316:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d31c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d322:	2b00      	cmp	r3, #0
 800d324:	d10d      	bne.n	800d342 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d14d      	bne.n	800d3ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	689b      	ldr	r3, [r3, #8]
 800d332:	4618      	mov	r0, r3
 800d334:	f000 fff2 	bl	800e31c <xTaskPriorityDisinherit>
 800d338:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2200      	movs	r2, #0
 800d33e:	609a      	str	r2, [r3, #8]
 800d340:	e043      	b.n	800d3ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d119      	bne.n	800d37c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	6858      	ldr	r0, [r3, #4]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d350:	461a      	mov	r2, r3
 800d352:	68b9      	ldr	r1, [r7, #8]
 800d354:	f002 f908 	bl	800f568 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	685a      	ldr	r2, [r3, #4]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d360:	441a      	add	r2, r3
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	685a      	ldr	r2, [r3, #4]
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	689b      	ldr	r3, [r3, #8]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d32b      	bcc.n	800d3ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	605a      	str	r2, [r3, #4]
 800d37a:	e026      	b.n	800d3ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	68d8      	ldr	r0, [r3, #12]
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d384:	461a      	mov	r2, r3
 800d386:	68b9      	ldr	r1, [r7, #8]
 800d388:	f002 f8ee 	bl	800f568 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	68da      	ldr	r2, [r3, #12]
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d394:	425b      	negs	r3, r3
 800d396:	441a      	add	r2, r3
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	68da      	ldr	r2, [r3, #12]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d207      	bcs.n	800d3b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	689a      	ldr	r2, [r3, #8]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3b0:	425b      	negs	r3, r3
 800d3b2:	441a      	add	r2, r3
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2b02      	cmp	r3, #2
 800d3bc:	d105      	bne.n	800d3ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d002      	beq.n	800d3ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	3b01      	subs	r3, #1
 800d3c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	1c5a      	adds	r2, r3, #1
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d3d2:	697b      	ldr	r3, [r7, #20]
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3718      	adds	r7, #24
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d018      	beq.n	800d420 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	68da      	ldr	r2, [r3, #12]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f6:	441a      	add	r2, r3
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	68da      	ldr	r2, [r3, #12]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	689b      	ldr	r3, [r3, #8]
 800d404:	429a      	cmp	r2, r3
 800d406:	d303      	bcc.n	800d410 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	68d9      	ldr	r1, [r3, #12]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d418:	461a      	mov	r2, r3
 800d41a:	6838      	ldr	r0, [r7, #0]
 800d41c:	f002 f8a4 	bl	800f568 <memcpy>
	}
}
 800d420:	bf00      	nop
 800d422:	3708      	adds	r7, #8
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d430:	f001 fd60 	bl	800eef4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d43a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d43c:	e011      	b.n	800d462 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d442:	2b00      	cmp	r3, #0
 800d444:	d012      	beq.n	800d46c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	3324      	adds	r3, #36	; 0x24
 800d44a:	4618      	mov	r0, r3
 800d44c:	f000 fd16 	bl	800de7c <xTaskRemoveFromEventList>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d001      	beq.n	800d45a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d456:	f000 fdeb 	bl	800e030 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d45a:	7bfb      	ldrb	r3, [r7, #15]
 800d45c:	3b01      	subs	r3, #1
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d466:	2b00      	cmp	r3, #0
 800d468:	dce9      	bgt.n	800d43e <prvUnlockQueue+0x16>
 800d46a:	e000      	b.n	800d46e <prvUnlockQueue+0x46>
					break;
 800d46c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	22ff      	movs	r2, #255	; 0xff
 800d472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d476:	f001 fd6d 	bl	800ef54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d47a:	f001 fd3b 	bl	800eef4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d484:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d486:	e011      	b.n	800d4ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	691b      	ldr	r3, [r3, #16]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d012      	beq.n	800d4b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	3310      	adds	r3, #16
 800d494:	4618      	mov	r0, r3
 800d496:	f000 fcf1 	bl	800de7c <xTaskRemoveFromEventList>
 800d49a:	4603      	mov	r3, r0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d001      	beq.n	800d4a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d4a0:	f000 fdc6 	bl	800e030 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d4a4:	7bbb      	ldrb	r3, [r7, #14]
 800d4a6:	3b01      	subs	r3, #1
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d4ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	dce9      	bgt.n	800d488 <prvUnlockQueue+0x60>
 800d4b4:	e000      	b.n	800d4b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d4b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	22ff      	movs	r2, #255	; 0xff
 800d4bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d4c0:	f001 fd48 	bl	800ef54 <vPortExitCritical>
}
 800d4c4:	bf00      	nop
 800d4c6:	3710      	adds	r7, #16
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d4d4:	f001 fd0e 	bl	800eef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d102      	bne.n	800d4e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	60fb      	str	r3, [r7, #12]
 800d4e4:	e001      	b.n	800d4ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d4ea:	f001 fd33 	bl	800ef54 <vPortExitCritical>

	return xReturn;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3710      	adds	r7, #16
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d500:	f001 fcf8 	bl	800eef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d102      	bne.n	800d516 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d510:	2301      	movs	r3, #1
 800d512:	60fb      	str	r3, [r7, #12]
 800d514:	e001      	b.n	800d51a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d516:	2300      	movs	r3, #0
 800d518:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d51a:	f001 fd1b 	bl	800ef54 <vPortExitCritical>

	return xReturn;
 800d51e:	68fb      	ldr	r3, [r7, #12]
}
 800d520:	4618      	mov	r0, r3
 800d522:	3710      	adds	r7, #16
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d532:	2300      	movs	r3, #0
 800d534:	60fb      	str	r3, [r7, #12]
 800d536:	e014      	b.n	800d562 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d538:	4a0f      	ldr	r2, [pc, #60]	; (800d578 <vQueueAddToRegistry+0x50>)
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d10b      	bne.n	800d55c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d544:	490c      	ldr	r1, [pc, #48]	; (800d578 <vQueueAddToRegistry+0x50>)
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	683a      	ldr	r2, [r7, #0]
 800d54a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d54e:	4a0a      	ldr	r2, [pc, #40]	; (800d578 <vQueueAddToRegistry+0x50>)
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	00db      	lsls	r3, r3, #3
 800d554:	4413      	add	r3, r2
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d55a:	e006      	b.n	800d56a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	3301      	adds	r3, #1
 800d560:	60fb      	str	r3, [r7, #12]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2b07      	cmp	r3, #7
 800d566:	d9e7      	bls.n	800d538 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d568:	bf00      	nop
 800d56a:	bf00      	nop
 800d56c:	3714      	adds	r7, #20
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	2000b634 	.word	0x2000b634

0800d57c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b086      	sub	sp, #24
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d58c:	f001 fcb2 	bl	800eef4 <vPortEnterCritical>
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d596:	b25b      	sxtb	r3, r3
 800d598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d59c:	d103      	bne.n	800d5a6 <vQueueWaitForMessageRestricted+0x2a>
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5ac:	b25b      	sxtb	r3, r3
 800d5ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d5b2:	d103      	bne.n	800d5bc <vQueueWaitForMessageRestricted+0x40>
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5bc:	f001 fcca 	bl	800ef54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d106      	bne.n	800d5d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	3324      	adds	r3, #36	; 0x24
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	68b9      	ldr	r1, [r7, #8]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f000 fc27 	bl	800de24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d5d6:	6978      	ldr	r0, [r7, #20]
 800d5d8:	f7ff ff26 	bl	800d428 <prvUnlockQueue>
	}
 800d5dc:	bf00      	nop
 800d5de:	3718      	adds	r7, #24
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b08e      	sub	sp, #56	; 0x38
 800d5e8:	af04      	add	r7, sp, #16
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	60b9      	str	r1, [r7, #8]
 800d5ee:	607a      	str	r2, [r7, #4]
 800d5f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d10a      	bne.n	800d60e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fc:	f383 8811 	msr	BASEPRI, r3
 800d600:	f3bf 8f6f 	isb	sy
 800d604:	f3bf 8f4f 	dsb	sy
 800d608:	623b      	str	r3, [r7, #32]
}
 800d60a:	bf00      	nop
 800d60c:	e7fe      	b.n	800d60c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d610:	2b00      	cmp	r3, #0
 800d612:	d10a      	bne.n	800d62a <xTaskCreateStatic+0x46>
	__asm volatile
 800d614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d618:	f383 8811 	msr	BASEPRI, r3
 800d61c:	f3bf 8f6f 	isb	sy
 800d620:	f3bf 8f4f 	dsb	sy
 800d624:	61fb      	str	r3, [r7, #28]
}
 800d626:	bf00      	nop
 800d628:	e7fe      	b.n	800d628 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d62a:	2354      	movs	r3, #84	; 0x54
 800d62c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	2b54      	cmp	r3, #84	; 0x54
 800d632:	d00a      	beq.n	800d64a <xTaskCreateStatic+0x66>
	__asm volatile
 800d634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d638:	f383 8811 	msr	BASEPRI, r3
 800d63c:	f3bf 8f6f 	isb	sy
 800d640:	f3bf 8f4f 	dsb	sy
 800d644:	61bb      	str	r3, [r7, #24]
}
 800d646:	bf00      	nop
 800d648:	e7fe      	b.n	800d648 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d64a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d01e      	beq.n	800d690 <xTaskCreateStatic+0xac>
 800d652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d654:	2b00      	cmp	r3, #0
 800d656:	d01b      	beq.n	800d690 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d660:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d664:	2202      	movs	r2, #2
 800d666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d66a:	2300      	movs	r3, #0
 800d66c:	9303      	str	r3, [sp, #12]
 800d66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d670:	9302      	str	r3, [sp, #8]
 800d672:	f107 0314 	add.w	r3, r7, #20
 800d676:	9301      	str	r3, [sp, #4]
 800d678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	68b9      	ldr	r1, [r7, #8]
 800d682:	68f8      	ldr	r0, [r7, #12]
 800d684:	f000 f850 	bl	800d728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d68a:	f000 f8d5 	bl	800d838 <prvAddNewTaskToReadyList>
 800d68e:	e001      	b.n	800d694 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d690:	2300      	movs	r3, #0
 800d692:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d694:	697b      	ldr	r3, [r7, #20]
	}
 800d696:	4618      	mov	r0, r3
 800d698:	3728      	adds	r7, #40	; 0x28
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b08c      	sub	sp, #48	; 0x30
 800d6a2:	af04      	add	r7, sp, #16
 800d6a4:	60f8      	str	r0, [r7, #12]
 800d6a6:	60b9      	str	r1, [r7, #8]
 800d6a8:	603b      	str	r3, [r7, #0]
 800d6aa:	4613      	mov	r3, r2
 800d6ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d6ae:	88fb      	ldrh	r3, [r7, #6]
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f001 fd40 	bl	800f138 <pvPortMalloc>
 800d6b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d00e      	beq.n	800d6de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d6c0:	2054      	movs	r0, #84	; 0x54
 800d6c2:	f001 fd39 	bl	800f138 <pvPortMalloc>
 800d6c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d003      	beq.n	800d6d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	697a      	ldr	r2, [r7, #20]
 800d6d2:	631a      	str	r2, [r3, #48]	; 0x30
 800d6d4:	e005      	b.n	800d6e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d6d6:	6978      	ldr	r0, [r7, #20]
 800d6d8:	f001 fdfa 	bl	800f2d0 <vPortFree>
 800d6dc:	e001      	b.n	800d6e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d017      	beq.n	800d718 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d6f0:	88fa      	ldrh	r2, [r7, #6]
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	9303      	str	r3, [sp, #12]
 800d6f6:	69fb      	ldr	r3, [r7, #28]
 800d6f8:	9302      	str	r3, [sp, #8]
 800d6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d700:	9300      	str	r3, [sp, #0]
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	68b9      	ldr	r1, [r7, #8]
 800d706:	68f8      	ldr	r0, [r7, #12]
 800d708:	f000 f80e 	bl	800d728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d70c:	69f8      	ldr	r0, [r7, #28]
 800d70e:	f000 f893 	bl	800d838 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d712:	2301      	movs	r3, #1
 800d714:	61bb      	str	r3, [r7, #24]
 800d716:	e002      	b.n	800d71e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d71c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d71e:	69bb      	ldr	r3, [r7, #24]
	}
 800d720:	4618      	mov	r0, r3
 800d722:	3720      	adds	r7, #32
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b088      	sub	sp, #32
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	60b9      	str	r1, [r7, #8]
 800d732:	607a      	str	r2, [r7, #4]
 800d734:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d740:	3b01      	subs	r3, #1
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	4413      	add	r3, r2
 800d746:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d748:	69bb      	ldr	r3, [r7, #24]
 800d74a:	f023 0307 	bic.w	r3, r3, #7
 800d74e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	f003 0307 	and.w	r3, r3, #7
 800d756:	2b00      	cmp	r3, #0
 800d758:	d00a      	beq.n	800d770 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d75e:	f383 8811 	msr	BASEPRI, r3
 800d762:	f3bf 8f6f 	isb	sy
 800d766:	f3bf 8f4f 	dsb	sy
 800d76a:	617b      	str	r3, [r7, #20]
}
 800d76c:	bf00      	nop
 800d76e:	e7fe      	b.n	800d76e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d01f      	beq.n	800d7b6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d776:	2300      	movs	r3, #0
 800d778:	61fb      	str	r3, [r7, #28]
 800d77a:	e012      	b.n	800d7a2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d77c:	68ba      	ldr	r2, [r7, #8]
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	4413      	add	r3, r2
 800d782:	7819      	ldrb	r1, [r3, #0]
 800d784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d786:	69fb      	ldr	r3, [r7, #28]
 800d788:	4413      	add	r3, r2
 800d78a:	3334      	adds	r3, #52	; 0x34
 800d78c:	460a      	mov	r2, r1
 800d78e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d790:	68ba      	ldr	r2, [r7, #8]
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	4413      	add	r3, r2
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d006      	beq.n	800d7aa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	61fb      	str	r3, [r7, #28]
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	2b0f      	cmp	r3, #15
 800d7a6:	d9e9      	bls.n	800d77c <prvInitialiseNewTask+0x54>
 800d7a8:	e000      	b.n	800d7ac <prvInitialiseNewTask+0x84>
			{
				break;
 800d7aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d7b4:	e003      	b.n	800d7be <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c0:	2b06      	cmp	r3, #6
 800d7c2:	d901      	bls.n	800d7c8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d7c4:	2306      	movs	r3, #6
 800d7c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7dc:	3304      	adds	r3, #4
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fe ff1a 	bl	800c618 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e6:	3318      	adds	r3, #24
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7fe ff15 	bl	800c618 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f6:	f1c3 0207 	rsb	r2, r3, #7
 800d7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d802:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d806:	2200      	movs	r2, #0
 800d808:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80c:	2200      	movs	r2, #0
 800d80e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d812:	683a      	ldr	r2, [r7, #0]
 800d814:	68f9      	ldr	r1, [r7, #12]
 800d816:	69b8      	ldr	r0, [r7, #24]
 800d818:	f001 fa40 	bl	800ec9c <pxPortInitialiseStack>
 800d81c:	4602      	mov	r2, r0
 800d81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d820:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d824:	2b00      	cmp	r3, #0
 800d826:	d002      	beq.n	800d82e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d82c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d82e:	bf00      	nop
 800d830:	3720      	adds	r7, #32
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
	...

0800d838 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d840:	f001 fb58 	bl	800eef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d844:	4b2a      	ldr	r3, [pc, #168]	; (800d8f0 <prvAddNewTaskToReadyList+0xb8>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	3301      	adds	r3, #1
 800d84a:	4a29      	ldr	r2, [pc, #164]	; (800d8f0 <prvAddNewTaskToReadyList+0xb8>)
 800d84c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d84e:	4b29      	ldr	r3, [pc, #164]	; (800d8f4 <prvAddNewTaskToReadyList+0xbc>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d109      	bne.n	800d86a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d856:	4a27      	ldr	r2, [pc, #156]	; (800d8f4 <prvAddNewTaskToReadyList+0xbc>)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d85c:	4b24      	ldr	r3, [pc, #144]	; (800d8f0 <prvAddNewTaskToReadyList+0xb8>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d110      	bne.n	800d886 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d864:	f000 fc08 	bl	800e078 <prvInitialiseTaskLists>
 800d868:	e00d      	b.n	800d886 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d86a:	4b23      	ldr	r3, [pc, #140]	; (800d8f8 <prvAddNewTaskToReadyList+0xc0>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d109      	bne.n	800d886 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d872:	4b20      	ldr	r3, [pc, #128]	; (800d8f4 <prvAddNewTaskToReadyList+0xbc>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d802      	bhi.n	800d886 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d880:	4a1c      	ldr	r2, [pc, #112]	; (800d8f4 <prvAddNewTaskToReadyList+0xbc>)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d886:	4b1d      	ldr	r3, [pc, #116]	; (800d8fc <prvAddNewTaskToReadyList+0xc4>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	3301      	adds	r3, #1
 800d88c:	4a1b      	ldr	r2, [pc, #108]	; (800d8fc <prvAddNewTaskToReadyList+0xc4>)
 800d88e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d894:	2201      	movs	r2, #1
 800d896:	409a      	lsls	r2, r3
 800d898:	4b19      	ldr	r3, [pc, #100]	; (800d900 <prvAddNewTaskToReadyList+0xc8>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4313      	orrs	r3, r2
 800d89e:	4a18      	ldr	r2, [pc, #96]	; (800d900 <prvAddNewTaskToReadyList+0xc8>)
 800d8a0:	6013      	str	r3, [r2, #0]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8a6:	4613      	mov	r3, r2
 800d8a8:	009b      	lsls	r3, r3, #2
 800d8aa:	4413      	add	r3, r2
 800d8ac:	009b      	lsls	r3, r3, #2
 800d8ae:	4a15      	ldr	r2, [pc, #84]	; (800d904 <prvAddNewTaskToReadyList+0xcc>)
 800d8b0:	441a      	add	r2, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	3304      	adds	r3, #4
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	4610      	mov	r0, r2
 800d8ba:	f7fe feba 	bl	800c632 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d8be:	f001 fb49 	bl	800ef54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d8c2:	4b0d      	ldr	r3, [pc, #52]	; (800d8f8 <prvAddNewTaskToReadyList+0xc0>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d00e      	beq.n	800d8e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d8ca:	4b0a      	ldr	r3, [pc, #40]	; (800d8f4 <prvAddNewTaskToReadyList+0xbc>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d207      	bcs.n	800d8e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d8d8:	4b0b      	ldr	r3, [pc, #44]	; (800d908 <prvAddNewTaskToReadyList+0xd0>)
 800d8da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8de:	601a      	str	r2, [r3, #0]
 800d8e0:	f3bf 8f4f 	dsb	sy
 800d8e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8e8:	bf00      	nop
 800d8ea:	3708      	adds	r7, #8
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}
 800d8f0:	200009cc 	.word	0x200009cc
 800d8f4:	200008cc 	.word	0x200008cc
 800d8f8:	200009d8 	.word	0x200009d8
 800d8fc:	200009e8 	.word	0x200009e8
 800d900:	200009d4 	.word	0x200009d4
 800d904:	200008d0 	.word	0x200008d0
 800d908:	e000ed04 	.word	0xe000ed04

0800d90c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d914:	2300      	movs	r3, #0
 800d916:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d017      	beq.n	800d94e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d91e:	4b13      	ldr	r3, [pc, #76]	; (800d96c <vTaskDelay+0x60>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d00a      	beq.n	800d93c <vTaskDelay+0x30>
	__asm volatile
 800d926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	60bb      	str	r3, [r7, #8]
}
 800d938:	bf00      	nop
 800d93a:	e7fe      	b.n	800d93a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d93c:	f000 f880 	bl	800da40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d940:	2100      	movs	r1, #0
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 fe12 	bl	800e56c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d948:	f000 f888 	bl	800da5c <xTaskResumeAll>
 800d94c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d107      	bne.n	800d964 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d954:	4b06      	ldr	r3, [pc, #24]	; (800d970 <vTaskDelay+0x64>)
 800d956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d95a:	601a      	str	r2, [r3, #0]
 800d95c:	f3bf 8f4f 	dsb	sy
 800d960:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d964:	bf00      	nop
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	200009f4 	.word	0x200009f4
 800d970:	e000ed04 	.word	0xe000ed04

0800d974 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b08a      	sub	sp, #40	; 0x28
 800d978:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d97a:	2300      	movs	r3, #0
 800d97c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d97e:	2300      	movs	r3, #0
 800d980:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d982:	463a      	mov	r2, r7
 800d984:	1d39      	adds	r1, r7, #4
 800d986:	f107 0308 	add.w	r3, r7, #8
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7f4 fe1a 	bl	80025c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d990:	6839      	ldr	r1, [r7, #0]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	9202      	str	r2, [sp, #8]
 800d998:	9301      	str	r3, [sp, #4]
 800d99a:	2300      	movs	r3, #0
 800d99c:	9300      	str	r3, [sp, #0]
 800d99e:	2300      	movs	r3, #0
 800d9a0:	460a      	mov	r2, r1
 800d9a2:	4921      	ldr	r1, [pc, #132]	; (800da28 <vTaskStartScheduler+0xb4>)
 800d9a4:	4821      	ldr	r0, [pc, #132]	; (800da2c <vTaskStartScheduler+0xb8>)
 800d9a6:	f7ff fe1d 	bl	800d5e4 <xTaskCreateStatic>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	4a20      	ldr	r2, [pc, #128]	; (800da30 <vTaskStartScheduler+0xbc>)
 800d9ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d9b0:	4b1f      	ldr	r3, [pc, #124]	; (800da30 <vTaskStartScheduler+0xbc>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d002      	beq.n	800d9be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	617b      	str	r3, [r7, #20]
 800d9bc:	e001      	b.n	800d9c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d102      	bne.n	800d9ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d9c8:	f000 fe36 	bl	800e638 <xTimerCreateTimerTask>
 800d9cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d116      	bne.n	800da02 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d8:	f383 8811 	msr	BASEPRI, r3
 800d9dc:	f3bf 8f6f 	isb	sy
 800d9e0:	f3bf 8f4f 	dsb	sy
 800d9e4:	613b      	str	r3, [r7, #16]
}
 800d9e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d9e8:	4b12      	ldr	r3, [pc, #72]	; (800da34 <vTaskStartScheduler+0xc0>)
 800d9ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d9f0:	4b11      	ldr	r3, [pc, #68]	; (800da38 <vTaskStartScheduler+0xc4>)
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d9f6:	4b11      	ldr	r3, [pc, #68]	; (800da3c <vTaskStartScheduler+0xc8>)
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d9fc:	f001 f9d8 	bl	800edb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800da00:	e00e      	b.n	800da20 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da08:	d10a      	bne.n	800da20 <vTaskStartScheduler+0xac>
	__asm volatile
 800da0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0e:	f383 8811 	msr	BASEPRI, r3
 800da12:	f3bf 8f6f 	isb	sy
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	60fb      	str	r3, [r7, #12]
}
 800da1c:	bf00      	nop
 800da1e:	e7fe      	b.n	800da1e <vTaskStartScheduler+0xaa>
}
 800da20:	bf00      	nop
 800da22:	3718      	adds	r7, #24
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}
 800da28:	08013fa0 	.word	0x08013fa0
 800da2c:	0800e049 	.word	0x0800e049
 800da30:	200009f0 	.word	0x200009f0
 800da34:	200009ec 	.word	0x200009ec
 800da38:	200009d8 	.word	0x200009d8
 800da3c:	200009d0 	.word	0x200009d0

0800da40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800da40:	b480      	push	{r7}
 800da42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800da44:	4b04      	ldr	r3, [pc, #16]	; (800da58 <vTaskSuspendAll+0x18>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	3301      	adds	r3, #1
 800da4a:	4a03      	ldr	r2, [pc, #12]	; (800da58 <vTaskSuspendAll+0x18>)
 800da4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800da4e:	bf00      	nop
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr
 800da58:	200009f4 	.word	0x200009f4

0800da5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800da62:	2300      	movs	r3, #0
 800da64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800da66:	2300      	movs	r3, #0
 800da68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800da6a:	4b41      	ldr	r3, [pc, #260]	; (800db70 <xTaskResumeAll+0x114>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d10a      	bne.n	800da88 <xTaskResumeAll+0x2c>
	__asm volatile
 800da72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da76:	f383 8811 	msr	BASEPRI, r3
 800da7a:	f3bf 8f6f 	isb	sy
 800da7e:	f3bf 8f4f 	dsb	sy
 800da82:	603b      	str	r3, [r7, #0]
}
 800da84:	bf00      	nop
 800da86:	e7fe      	b.n	800da86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800da88:	f001 fa34 	bl	800eef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800da8c:	4b38      	ldr	r3, [pc, #224]	; (800db70 <xTaskResumeAll+0x114>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	3b01      	subs	r3, #1
 800da92:	4a37      	ldr	r2, [pc, #220]	; (800db70 <xTaskResumeAll+0x114>)
 800da94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da96:	4b36      	ldr	r3, [pc, #216]	; (800db70 <xTaskResumeAll+0x114>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d161      	bne.n	800db62 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800da9e:	4b35      	ldr	r3, [pc, #212]	; (800db74 <xTaskResumeAll+0x118>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d05d      	beq.n	800db62 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800daa6:	e02e      	b.n	800db06 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daa8:	4b33      	ldr	r3, [pc, #204]	; (800db78 <xTaskResumeAll+0x11c>)
 800daaa:	68db      	ldr	r3, [r3, #12]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	3318      	adds	r3, #24
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7fe fe19 	bl	800c6ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	3304      	adds	r3, #4
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7fe fe14 	bl	800c6ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac8:	2201      	movs	r2, #1
 800daca:	409a      	lsls	r2, r3
 800dacc:	4b2b      	ldr	r3, [pc, #172]	; (800db7c <xTaskResumeAll+0x120>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4313      	orrs	r3, r2
 800dad2:	4a2a      	ldr	r2, [pc, #168]	; (800db7c <xTaskResumeAll+0x120>)
 800dad4:	6013      	str	r3, [r2, #0]
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dada:	4613      	mov	r3, r2
 800dadc:	009b      	lsls	r3, r3, #2
 800dade:	4413      	add	r3, r2
 800dae0:	009b      	lsls	r3, r3, #2
 800dae2:	4a27      	ldr	r2, [pc, #156]	; (800db80 <xTaskResumeAll+0x124>)
 800dae4:	441a      	add	r2, r3
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	3304      	adds	r3, #4
 800daea:	4619      	mov	r1, r3
 800daec:	4610      	mov	r0, r2
 800daee:	f7fe fda0 	bl	800c632 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daf6:	4b23      	ldr	r3, [pc, #140]	; (800db84 <xTaskResumeAll+0x128>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d302      	bcc.n	800db06 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800db00:	4b21      	ldr	r3, [pc, #132]	; (800db88 <xTaskResumeAll+0x12c>)
 800db02:	2201      	movs	r2, #1
 800db04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db06:	4b1c      	ldr	r3, [pc, #112]	; (800db78 <xTaskResumeAll+0x11c>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1cc      	bne.n	800daa8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d001      	beq.n	800db18 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800db14:	f000 fb4e 	bl	800e1b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800db18:	4b1c      	ldr	r3, [pc, #112]	; (800db8c <xTaskResumeAll+0x130>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d010      	beq.n	800db46 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800db24:	f000 f846 	bl	800dbb4 <xTaskIncrementTick>
 800db28:	4603      	mov	r3, r0
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d002      	beq.n	800db34 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800db2e:	4b16      	ldr	r3, [pc, #88]	; (800db88 <xTaskResumeAll+0x12c>)
 800db30:	2201      	movs	r2, #1
 800db32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	3b01      	subs	r3, #1
 800db38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d1f1      	bne.n	800db24 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800db40:	4b12      	ldr	r3, [pc, #72]	; (800db8c <xTaskResumeAll+0x130>)
 800db42:	2200      	movs	r2, #0
 800db44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800db46:	4b10      	ldr	r3, [pc, #64]	; (800db88 <xTaskResumeAll+0x12c>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d009      	beq.n	800db62 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800db4e:	2301      	movs	r3, #1
 800db50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800db52:	4b0f      	ldr	r3, [pc, #60]	; (800db90 <xTaskResumeAll+0x134>)
 800db54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db58:	601a      	str	r2, [r3, #0]
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db62:	f001 f9f7 	bl	800ef54 <vPortExitCritical>

	return xAlreadyYielded;
 800db66:	68bb      	ldr	r3, [r7, #8]
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3710      	adds	r7, #16
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	200009f4 	.word	0x200009f4
 800db74:	200009cc 	.word	0x200009cc
 800db78:	2000098c 	.word	0x2000098c
 800db7c:	200009d4 	.word	0x200009d4
 800db80:	200008d0 	.word	0x200008d0
 800db84:	200008cc 	.word	0x200008cc
 800db88:	200009e0 	.word	0x200009e0
 800db8c:	200009dc 	.word	0x200009dc
 800db90:	e000ed04 	.word	0xe000ed04

0800db94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800db9a:	4b05      	ldr	r3, [pc, #20]	; (800dbb0 <xTaskGetTickCount+0x1c>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dba0:	687b      	ldr	r3, [r7, #4]
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	370c      	adds	r7, #12
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr
 800dbae:	bf00      	nop
 800dbb0:	200009d0 	.word	0x200009d0

0800dbb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b086      	sub	sp, #24
 800dbb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbbe:	4b4e      	ldr	r3, [pc, #312]	; (800dcf8 <xTaskIncrementTick+0x144>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	f040 808e 	bne.w	800dce4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dbc8:	4b4c      	ldr	r3, [pc, #304]	; (800dcfc <xTaskIncrementTick+0x148>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dbd0:	4a4a      	ldr	r2, [pc, #296]	; (800dcfc <xTaskIncrementTick+0x148>)
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d120      	bne.n	800dc1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dbdc:	4b48      	ldr	r3, [pc, #288]	; (800dd00 <xTaskIncrementTick+0x14c>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d00a      	beq.n	800dbfc <xTaskIncrementTick+0x48>
	__asm volatile
 800dbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbea:	f383 8811 	msr	BASEPRI, r3
 800dbee:	f3bf 8f6f 	isb	sy
 800dbf2:	f3bf 8f4f 	dsb	sy
 800dbf6:	603b      	str	r3, [r7, #0]
}
 800dbf8:	bf00      	nop
 800dbfa:	e7fe      	b.n	800dbfa <xTaskIncrementTick+0x46>
 800dbfc:	4b40      	ldr	r3, [pc, #256]	; (800dd00 <xTaskIncrementTick+0x14c>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	60fb      	str	r3, [r7, #12]
 800dc02:	4b40      	ldr	r3, [pc, #256]	; (800dd04 <xTaskIncrementTick+0x150>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4a3e      	ldr	r2, [pc, #248]	; (800dd00 <xTaskIncrementTick+0x14c>)
 800dc08:	6013      	str	r3, [r2, #0]
 800dc0a:	4a3e      	ldr	r2, [pc, #248]	; (800dd04 <xTaskIncrementTick+0x150>)
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6013      	str	r3, [r2, #0]
 800dc10:	4b3d      	ldr	r3, [pc, #244]	; (800dd08 <xTaskIncrementTick+0x154>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	3301      	adds	r3, #1
 800dc16:	4a3c      	ldr	r2, [pc, #240]	; (800dd08 <xTaskIncrementTick+0x154>)
 800dc18:	6013      	str	r3, [r2, #0]
 800dc1a:	f000 facb 	bl	800e1b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dc1e:	4b3b      	ldr	r3, [pc, #236]	; (800dd0c <xTaskIncrementTick+0x158>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	693a      	ldr	r2, [r7, #16]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d348      	bcc.n	800dcba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc28:	4b35      	ldr	r3, [pc, #212]	; (800dd00 <xTaskIncrementTick+0x14c>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d104      	bne.n	800dc3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc32:	4b36      	ldr	r3, [pc, #216]	; (800dd0c <xTaskIncrementTick+0x158>)
 800dc34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc38:	601a      	str	r2, [r3, #0]
					break;
 800dc3a:	e03e      	b.n	800dcba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc3c:	4b30      	ldr	r3, [pc, #192]	; (800dd00 <xTaskIncrementTick+0x14c>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68db      	ldr	r3, [r3, #12]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dc4c:	693a      	ldr	r2, [r7, #16]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d203      	bcs.n	800dc5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dc54:	4a2d      	ldr	r2, [pc, #180]	; (800dd0c <xTaskIncrementTick+0x158>)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dc5a:	e02e      	b.n	800dcba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	3304      	adds	r3, #4
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7fe fd43 	bl	800c6ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d004      	beq.n	800dc78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	3318      	adds	r3, #24
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7fe fd3a 	bl	800c6ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	409a      	lsls	r2, r3
 800dc80:	4b23      	ldr	r3, [pc, #140]	; (800dd10 <xTaskIncrementTick+0x15c>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4313      	orrs	r3, r2
 800dc86:	4a22      	ldr	r2, [pc, #136]	; (800dd10 <xTaskIncrementTick+0x15c>)
 800dc88:	6013      	str	r3, [r2, #0]
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc8e:	4613      	mov	r3, r2
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	4413      	add	r3, r2
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	4a1f      	ldr	r2, [pc, #124]	; (800dd14 <xTaskIncrementTick+0x160>)
 800dc98:	441a      	add	r2, r3
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	3304      	adds	r3, #4
 800dc9e:	4619      	mov	r1, r3
 800dca0:	4610      	mov	r0, r2
 800dca2:	f7fe fcc6 	bl	800c632 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcaa:	4b1b      	ldr	r3, [pc, #108]	; (800dd18 <xTaskIncrementTick+0x164>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d3b9      	bcc.n	800dc28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dcb8:	e7b6      	b.n	800dc28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dcba:	4b17      	ldr	r3, [pc, #92]	; (800dd18 <xTaskIncrementTick+0x164>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcc0:	4914      	ldr	r1, [pc, #80]	; (800dd14 <xTaskIncrementTick+0x160>)
 800dcc2:	4613      	mov	r3, r2
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	4413      	add	r3, r2
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	440b      	add	r3, r1
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d901      	bls.n	800dcd6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dcd6:	4b11      	ldr	r3, [pc, #68]	; (800dd1c <xTaskIncrementTick+0x168>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d007      	beq.n	800dcee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800dcde:	2301      	movs	r3, #1
 800dce0:	617b      	str	r3, [r7, #20]
 800dce2:	e004      	b.n	800dcee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dce4:	4b0e      	ldr	r3, [pc, #56]	; (800dd20 <xTaskIncrementTick+0x16c>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	3301      	adds	r3, #1
 800dcea:	4a0d      	ldr	r2, [pc, #52]	; (800dd20 <xTaskIncrementTick+0x16c>)
 800dcec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dcee:	697b      	ldr	r3, [r7, #20]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3718      	adds	r7, #24
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	200009f4 	.word	0x200009f4
 800dcfc:	200009d0 	.word	0x200009d0
 800dd00:	20000984 	.word	0x20000984
 800dd04:	20000988 	.word	0x20000988
 800dd08:	200009e4 	.word	0x200009e4
 800dd0c:	200009ec 	.word	0x200009ec
 800dd10:	200009d4 	.word	0x200009d4
 800dd14:	200008d0 	.word	0x200008d0
 800dd18:	200008cc 	.word	0x200008cc
 800dd1c:	200009e0 	.word	0x200009e0
 800dd20:	200009dc 	.word	0x200009dc

0800dd24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dd24:	b480      	push	{r7}
 800dd26:	b087      	sub	sp, #28
 800dd28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dd2a:	4b27      	ldr	r3, [pc, #156]	; (800ddc8 <vTaskSwitchContext+0xa4>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d003      	beq.n	800dd3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dd32:	4b26      	ldr	r3, [pc, #152]	; (800ddcc <vTaskSwitchContext+0xa8>)
 800dd34:	2201      	movs	r2, #1
 800dd36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dd38:	e03f      	b.n	800ddba <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800dd3a:	4b24      	ldr	r3, [pc, #144]	; (800ddcc <vTaskSwitchContext+0xa8>)
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd40:	4b23      	ldr	r3, [pc, #140]	; (800ddd0 <vTaskSwitchContext+0xac>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	fab3 f383 	clz	r3, r3
 800dd4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dd4e:	7afb      	ldrb	r3, [r7, #11]
 800dd50:	f1c3 031f 	rsb	r3, r3, #31
 800dd54:	617b      	str	r3, [r7, #20]
 800dd56:	491f      	ldr	r1, [pc, #124]	; (800ddd4 <vTaskSwitchContext+0xb0>)
 800dd58:	697a      	ldr	r2, [r7, #20]
 800dd5a:	4613      	mov	r3, r2
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	4413      	add	r3, r2
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	440b      	add	r3, r1
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d10a      	bne.n	800dd80 <vTaskSwitchContext+0x5c>
	__asm volatile
 800dd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd6e:	f383 8811 	msr	BASEPRI, r3
 800dd72:	f3bf 8f6f 	isb	sy
 800dd76:	f3bf 8f4f 	dsb	sy
 800dd7a:	607b      	str	r3, [r7, #4]
}
 800dd7c:	bf00      	nop
 800dd7e:	e7fe      	b.n	800dd7e <vTaskSwitchContext+0x5a>
 800dd80:	697a      	ldr	r2, [r7, #20]
 800dd82:	4613      	mov	r3, r2
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	4413      	add	r3, r2
 800dd88:	009b      	lsls	r3, r3, #2
 800dd8a:	4a12      	ldr	r2, [pc, #72]	; (800ddd4 <vTaskSwitchContext+0xb0>)
 800dd8c:	4413      	add	r3, r2
 800dd8e:	613b      	str	r3, [r7, #16]
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	685a      	ldr	r2, [r3, #4]
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	605a      	str	r2, [r3, #4]
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	685a      	ldr	r2, [r3, #4]
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	3308      	adds	r3, #8
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d104      	bne.n	800ddb0 <vTaskSwitchContext+0x8c>
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	685a      	ldr	r2, [r3, #4]
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	605a      	str	r2, [r3, #4]
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	68db      	ldr	r3, [r3, #12]
 800ddb6:	4a08      	ldr	r2, [pc, #32]	; (800ddd8 <vTaskSwitchContext+0xb4>)
 800ddb8:	6013      	str	r3, [r2, #0]
}
 800ddba:	bf00      	nop
 800ddbc:	371c      	adds	r7, #28
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr
 800ddc6:	bf00      	nop
 800ddc8:	200009f4 	.word	0x200009f4
 800ddcc:	200009e0 	.word	0x200009e0
 800ddd0:	200009d4 	.word	0x200009d4
 800ddd4:	200008d0 	.word	0x200008d0
 800ddd8:	200008cc 	.word	0x200008cc

0800dddc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d10a      	bne.n	800de02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ddec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf0:	f383 8811 	msr	BASEPRI, r3
 800ddf4:	f3bf 8f6f 	isb	sy
 800ddf8:	f3bf 8f4f 	dsb	sy
 800ddfc:	60fb      	str	r3, [r7, #12]
}
 800ddfe:	bf00      	nop
 800de00:	e7fe      	b.n	800de00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de02:	4b07      	ldr	r3, [pc, #28]	; (800de20 <vTaskPlaceOnEventList+0x44>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	3318      	adds	r3, #24
 800de08:	4619      	mov	r1, r3
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7fe fc35 	bl	800c67a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800de10:	2101      	movs	r1, #1
 800de12:	6838      	ldr	r0, [r7, #0]
 800de14:	f000 fbaa 	bl	800e56c <prvAddCurrentTaskToDelayedList>
}
 800de18:	bf00      	nop
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	200008cc 	.word	0x200008cc

0800de24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10a      	bne.n	800de4c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800de36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3a:	f383 8811 	msr	BASEPRI, r3
 800de3e:	f3bf 8f6f 	isb	sy
 800de42:	f3bf 8f4f 	dsb	sy
 800de46:	617b      	str	r3, [r7, #20]
}
 800de48:	bf00      	nop
 800de4a:	e7fe      	b.n	800de4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de4c:	4b0a      	ldr	r3, [pc, #40]	; (800de78 <vTaskPlaceOnEventListRestricted+0x54>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	3318      	adds	r3, #24
 800de52:	4619      	mov	r1, r3
 800de54:	68f8      	ldr	r0, [r7, #12]
 800de56:	f7fe fbec 	bl	800c632 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d002      	beq.n	800de66 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800de60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800de66:	6879      	ldr	r1, [r7, #4]
 800de68:	68b8      	ldr	r0, [r7, #8]
 800de6a:	f000 fb7f 	bl	800e56c <prvAddCurrentTaskToDelayedList>
	}
 800de6e:	bf00      	nop
 800de70:	3718      	adds	r7, #24
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	200008cc 	.word	0x200008cc

0800de7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b086      	sub	sp, #24
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10a      	bne.n	800dea8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800de92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de96:	f383 8811 	msr	BASEPRI, r3
 800de9a:	f3bf 8f6f 	isb	sy
 800de9e:	f3bf 8f4f 	dsb	sy
 800dea2:	60fb      	str	r3, [r7, #12]
}
 800dea4:	bf00      	nop
 800dea6:	e7fe      	b.n	800dea6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	3318      	adds	r3, #24
 800deac:	4618      	mov	r0, r3
 800deae:	f7fe fc1d 	bl	800c6ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deb2:	4b1d      	ldr	r3, [pc, #116]	; (800df28 <xTaskRemoveFromEventList+0xac>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d11c      	bne.n	800def4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	3304      	adds	r3, #4
 800debe:	4618      	mov	r0, r3
 800dec0:	f7fe fc14 	bl	800c6ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec8:	2201      	movs	r2, #1
 800deca:	409a      	lsls	r2, r3
 800decc:	4b17      	ldr	r3, [pc, #92]	; (800df2c <xTaskRemoveFromEventList+0xb0>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4313      	orrs	r3, r2
 800ded2:	4a16      	ldr	r2, [pc, #88]	; (800df2c <xTaskRemoveFromEventList+0xb0>)
 800ded4:	6013      	str	r3, [r2, #0]
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deda:	4613      	mov	r3, r2
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	4413      	add	r3, r2
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	4a13      	ldr	r2, [pc, #76]	; (800df30 <xTaskRemoveFromEventList+0xb4>)
 800dee4:	441a      	add	r2, r3
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	3304      	adds	r3, #4
 800deea:	4619      	mov	r1, r3
 800deec:	4610      	mov	r0, r2
 800deee:	f7fe fba0 	bl	800c632 <vListInsertEnd>
 800def2:	e005      	b.n	800df00 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	3318      	adds	r3, #24
 800def8:	4619      	mov	r1, r3
 800defa:	480e      	ldr	r0, [pc, #56]	; (800df34 <xTaskRemoveFromEventList+0xb8>)
 800defc:	f7fe fb99 	bl	800c632 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df04:	4b0c      	ldr	r3, [pc, #48]	; (800df38 <xTaskRemoveFromEventList+0xbc>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d905      	bls.n	800df1a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800df0e:	2301      	movs	r3, #1
 800df10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800df12:	4b0a      	ldr	r3, [pc, #40]	; (800df3c <xTaskRemoveFromEventList+0xc0>)
 800df14:	2201      	movs	r2, #1
 800df16:	601a      	str	r2, [r3, #0]
 800df18:	e001      	b.n	800df1e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800df1a:	2300      	movs	r3, #0
 800df1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800df1e:	697b      	ldr	r3, [r7, #20]
}
 800df20:	4618      	mov	r0, r3
 800df22:	3718      	adds	r7, #24
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}
 800df28:	200009f4 	.word	0x200009f4
 800df2c:	200009d4 	.word	0x200009d4
 800df30:	200008d0 	.word	0x200008d0
 800df34:	2000098c 	.word	0x2000098c
 800df38:	200008cc 	.word	0x200008cc
 800df3c:	200009e0 	.word	0x200009e0

0800df40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800df40:	b480      	push	{r7}
 800df42:	b083      	sub	sp, #12
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df48:	4b06      	ldr	r3, [pc, #24]	; (800df64 <vTaskInternalSetTimeOutState+0x24>)
 800df4a:	681a      	ldr	r2, [r3, #0]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800df50:	4b05      	ldr	r3, [pc, #20]	; (800df68 <vTaskInternalSetTimeOutState+0x28>)
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	605a      	str	r2, [r3, #4]
}
 800df58:	bf00      	nop
 800df5a:	370c      	adds	r7, #12
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr
 800df64:	200009e4 	.word	0x200009e4
 800df68:	200009d0 	.word	0x200009d0

0800df6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b088      	sub	sp, #32
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d10a      	bne.n	800df92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800df7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df80:	f383 8811 	msr	BASEPRI, r3
 800df84:	f3bf 8f6f 	isb	sy
 800df88:	f3bf 8f4f 	dsb	sy
 800df8c:	613b      	str	r3, [r7, #16]
}
 800df8e:	bf00      	nop
 800df90:	e7fe      	b.n	800df90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d10a      	bne.n	800dfae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800df98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9c:	f383 8811 	msr	BASEPRI, r3
 800dfa0:	f3bf 8f6f 	isb	sy
 800dfa4:	f3bf 8f4f 	dsb	sy
 800dfa8:	60fb      	str	r3, [r7, #12]
}
 800dfaa:	bf00      	nop
 800dfac:	e7fe      	b.n	800dfac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dfae:	f000 ffa1 	bl	800eef4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dfb2:	4b1d      	ldr	r3, [pc, #116]	; (800e028 <xTaskCheckForTimeOut+0xbc>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	69ba      	ldr	r2, [r7, #24]
 800dfbe:	1ad3      	subs	r3, r2, r3
 800dfc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfca:	d102      	bne.n	800dfd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	61fb      	str	r3, [r7, #28]
 800dfd0:	e023      	b.n	800e01a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	4b15      	ldr	r3, [pc, #84]	; (800e02c <xTaskCheckForTimeOut+0xc0>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d007      	beq.n	800dfee <xTaskCheckForTimeOut+0x82>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	69ba      	ldr	r2, [r7, #24]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d302      	bcc.n	800dfee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	61fb      	str	r3, [r7, #28]
 800dfec:	e015      	b.n	800e01a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	697a      	ldr	r2, [r7, #20]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d20b      	bcs.n	800e010 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	1ad2      	subs	r2, r2, r3
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7ff ff9b 	bl	800df40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e00a:	2300      	movs	r3, #0
 800e00c:	61fb      	str	r3, [r7, #28]
 800e00e:	e004      	b.n	800e01a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	2200      	movs	r2, #0
 800e014:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e016:	2301      	movs	r3, #1
 800e018:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e01a:	f000 ff9b 	bl	800ef54 <vPortExitCritical>

	return xReturn;
 800e01e:	69fb      	ldr	r3, [r7, #28]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3720      	adds	r7, #32
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	200009d0 	.word	0x200009d0
 800e02c:	200009e4 	.word	0x200009e4

0800e030 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e030:	b480      	push	{r7}
 800e032:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e034:	4b03      	ldr	r3, [pc, #12]	; (800e044 <vTaskMissedYield+0x14>)
 800e036:	2201      	movs	r2, #1
 800e038:	601a      	str	r2, [r3, #0]
}
 800e03a:	bf00      	nop
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr
 800e044:	200009e0 	.word	0x200009e0

0800e048 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e050:	f000 f852 	bl	800e0f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e054:	4b06      	ldr	r3, [pc, #24]	; (800e070 <prvIdleTask+0x28>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d9f9      	bls.n	800e050 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e05c:	4b05      	ldr	r3, [pc, #20]	; (800e074 <prvIdleTask+0x2c>)
 800e05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e062:	601a      	str	r2, [r3, #0]
 800e064:	f3bf 8f4f 	dsb	sy
 800e068:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e06c:	e7f0      	b.n	800e050 <prvIdleTask+0x8>
 800e06e:	bf00      	nop
 800e070:	200008d0 	.word	0x200008d0
 800e074:	e000ed04 	.word	0xe000ed04

0800e078 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e07e:	2300      	movs	r3, #0
 800e080:	607b      	str	r3, [r7, #4]
 800e082:	e00c      	b.n	800e09e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	4613      	mov	r3, r2
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	4413      	add	r3, r2
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	4a12      	ldr	r2, [pc, #72]	; (800e0d8 <prvInitialiseTaskLists+0x60>)
 800e090:	4413      	add	r3, r2
 800e092:	4618      	mov	r0, r3
 800e094:	f7fe faa0 	bl	800c5d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	3301      	adds	r3, #1
 800e09c:	607b      	str	r3, [r7, #4]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2b06      	cmp	r3, #6
 800e0a2:	d9ef      	bls.n	800e084 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e0a4:	480d      	ldr	r0, [pc, #52]	; (800e0dc <prvInitialiseTaskLists+0x64>)
 800e0a6:	f7fe fa97 	bl	800c5d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e0aa:	480d      	ldr	r0, [pc, #52]	; (800e0e0 <prvInitialiseTaskLists+0x68>)
 800e0ac:	f7fe fa94 	bl	800c5d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e0b0:	480c      	ldr	r0, [pc, #48]	; (800e0e4 <prvInitialiseTaskLists+0x6c>)
 800e0b2:	f7fe fa91 	bl	800c5d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e0b6:	480c      	ldr	r0, [pc, #48]	; (800e0e8 <prvInitialiseTaskLists+0x70>)
 800e0b8:	f7fe fa8e 	bl	800c5d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e0bc:	480b      	ldr	r0, [pc, #44]	; (800e0ec <prvInitialiseTaskLists+0x74>)
 800e0be:	f7fe fa8b 	bl	800c5d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e0c2:	4b0b      	ldr	r3, [pc, #44]	; (800e0f0 <prvInitialiseTaskLists+0x78>)
 800e0c4:	4a05      	ldr	r2, [pc, #20]	; (800e0dc <prvInitialiseTaskLists+0x64>)
 800e0c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e0c8:	4b0a      	ldr	r3, [pc, #40]	; (800e0f4 <prvInitialiseTaskLists+0x7c>)
 800e0ca:	4a05      	ldr	r2, [pc, #20]	; (800e0e0 <prvInitialiseTaskLists+0x68>)
 800e0cc:	601a      	str	r2, [r3, #0]
}
 800e0ce:	bf00      	nop
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	200008d0 	.word	0x200008d0
 800e0dc:	2000095c 	.word	0x2000095c
 800e0e0:	20000970 	.word	0x20000970
 800e0e4:	2000098c 	.word	0x2000098c
 800e0e8:	200009a0 	.word	0x200009a0
 800e0ec:	200009b8 	.word	0x200009b8
 800e0f0:	20000984 	.word	0x20000984
 800e0f4:	20000988 	.word	0x20000988

0800e0f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0fe:	e019      	b.n	800e134 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e100:	f000 fef8 	bl	800eef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e104:	4b10      	ldr	r3, [pc, #64]	; (800e148 <prvCheckTasksWaitingTermination+0x50>)
 800e106:	68db      	ldr	r3, [r3, #12]
 800e108:	68db      	ldr	r3, [r3, #12]
 800e10a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	3304      	adds	r3, #4
 800e110:	4618      	mov	r0, r3
 800e112:	f7fe faeb 	bl	800c6ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e116:	4b0d      	ldr	r3, [pc, #52]	; (800e14c <prvCheckTasksWaitingTermination+0x54>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	3b01      	subs	r3, #1
 800e11c:	4a0b      	ldr	r2, [pc, #44]	; (800e14c <prvCheckTasksWaitingTermination+0x54>)
 800e11e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e120:	4b0b      	ldr	r3, [pc, #44]	; (800e150 <prvCheckTasksWaitingTermination+0x58>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	3b01      	subs	r3, #1
 800e126:	4a0a      	ldr	r2, [pc, #40]	; (800e150 <prvCheckTasksWaitingTermination+0x58>)
 800e128:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e12a:	f000 ff13 	bl	800ef54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 f810 	bl	800e154 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e134:	4b06      	ldr	r3, [pc, #24]	; (800e150 <prvCheckTasksWaitingTermination+0x58>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d1e1      	bne.n	800e100 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e13c:	bf00      	nop
 800e13e:	bf00      	nop
 800e140:	3708      	adds	r7, #8
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	200009a0 	.word	0x200009a0
 800e14c:	200009cc 	.word	0x200009cc
 800e150:	200009b4 	.word	0x200009b4

0800e154 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e162:	2b00      	cmp	r3, #0
 800e164:	d108      	bne.n	800e178 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e16a:	4618      	mov	r0, r3
 800e16c:	f001 f8b0 	bl	800f2d0 <vPortFree>
				vPortFree( pxTCB );
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f001 f8ad 	bl	800f2d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e176:	e018      	b.n	800e1aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d103      	bne.n	800e18a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f001 f8a4 	bl	800f2d0 <vPortFree>
	}
 800e188:	e00f      	b.n	800e1aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e190:	2b02      	cmp	r3, #2
 800e192:	d00a      	beq.n	800e1aa <prvDeleteTCB+0x56>
	__asm volatile
 800e194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e198:	f383 8811 	msr	BASEPRI, r3
 800e19c:	f3bf 8f6f 	isb	sy
 800e1a0:	f3bf 8f4f 	dsb	sy
 800e1a4:	60fb      	str	r3, [r7, #12]
}
 800e1a6:	bf00      	nop
 800e1a8:	e7fe      	b.n	800e1a8 <prvDeleteTCB+0x54>
	}
 800e1aa:	bf00      	nop
 800e1ac:	3710      	adds	r7, #16
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
	...

0800e1b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b083      	sub	sp, #12
 800e1b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1ba:	4b0c      	ldr	r3, [pc, #48]	; (800e1ec <prvResetNextTaskUnblockTime+0x38>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d104      	bne.n	800e1ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e1c4:	4b0a      	ldr	r3, [pc, #40]	; (800e1f0 <prvResetNextTaskUnblockTime+0x3c>)
 800e1c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e1cc:	e008      	b.n	800e1e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1ce:	4b07      	ldr	r3, [pc, #28]	; (800e1ec <prvResetNextTaskUnblockTime+0x38>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	4a04      	ldr	r2, [pc, #16]	; (800e1f0 <prvResetNextTaskUnblockTime+0x3c>)
 800e1de:	6013      	str	r3, [r2, #0]
}
 800e1e0:	bf00      	nop
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr
 800e1ec:	20000984 	.word	0x20000984
 800e1f0:	200009ec 	.word	0x200009ec

0800e1f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b083      	sub	sp, #12
 800e1f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e1fa:	4b0b      	ldr	r3, [pc, #44]	; (800e228 <xTaskGetSchedulerState+0x34>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d102      	bne.n	800e208 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e202:	2301      	movs	r3, #1
 800e204:	607b      	str	r3, [r7, #4]
 800e206:	e008      	b.n	800e21a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e208:	4b08      	ldr	r3, [pc, #32]	; (800e22c <xTaskGetSchedulerState+0x38>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d102      	bne.n	800e216 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e210:	2302      	movs	r3, #2
 800e212:	607b      	str	r3, [r7, #4]
 800e214:	e001      	b.n	800e21a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e216:	2300      	movs	r3, #0
 800e218:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e21a:	687b      	ldr	r3, [r7, #4]
	}
 800e21c:	4618      	mov	r0, r3
 800e21e:	370c      	adds	r7, #12
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr
 800e228:	200009d8 	.word	0x200009d8
 800e22c:	200009f4 	.word	0x200009f4

0800e230 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e23c:	2300      	movs	r3, #0
 800e23e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d05e      	beq.n	800e304 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e24a:	4b31      	ldr	r3, [pc, #196]	; (800e310 <xTaskPriorityInherit+0xe0>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e250:	429a      	cmp	r2, r3
 800e252:	d24e      	bcs.n	800e2f2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	699b      	ldr	r3, [r3, #24]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	db06      	blt.n	800e26a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e25c:	4b2c      	ldr	r3, [pc, #176]	; (800e310 <xTaskPriorityInherit+0xe0>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e262:	f1c3 0207 	rsb	r2, r3, #7
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	6959      	ldr	r1, [r3, #20]
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e272:	4613      	mov	r3, r2
 800e274:	009b      	lsls	r3, r3, #2
 800e276:	4413      	add	r3, r2
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	4a26      	ldr	r2, [pc, #152]	; (800e314 <xTaskPriorityInherit+0xe4>)
 800e27c:	4413      	add	r3, r2
 800e27e:	4299      	cmp	r1, r3
 800e280:	d12f      	bne.n	800e2e2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	3304      	adds	r3, #4
 800e286:	4618      	mov	r0, r3
 800e288:	f7fe fa30 	bl	800c6ec <uxListRemove>
 800e28c:	4603      	mov	r3, r0
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10a      	bne.n	800e2a8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e296:	2201      	movs	r2, #1
 800e298:	fa02 f303 	lsl.w	r3, r2, r3
 800e29c:	43da      	mvns	r2, r3
 800e29e:	4b1e      	ldr	r3, [pc, #120]	; (800e318 <xTaskPriorityInherit+0xe8>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	4013      	ands	r3, r2
 800e2a4:	4a1c      	ldr	r2, [pc, #112]	; (800e318 <xTaskPriorityInherit+0xe8>)
 800e2a6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e2a8:	4b19      	ldr	r3, [pc, #100]	; (800e310 <xTaskPriorityInherit+0xe0>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	409a      	lsls	r2, r3
 800e2ba:	4b17      	ldr	r3, [pc, #92]	; (800e318 <xTaskPriorityInherit+0xe8>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	4a15      	ldr	r2, [pc, #84]	; (800e318 <xTaskPriorityInherit+0xe8>)
 800e2c2:	6013      	str	r3, [r2, #0]
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	009b      	lsls	r3, r3, #2
 800e2cc:	4413      	add	r3, r2
 800e2ce:	009b      	lsls	r3, r3, #2
 800e2d0:	4a10      	ldr	r2, [pc, #64]	; (800e314 <xTaskPriorityInherit+0xe4>)
 800e2d2:	441a      	add	r2, r3
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	3304      	adds	r3, #4
 800e2d8:	4619      	mov	r1, r3
 800e2da:	4610      	mov	r0, r2
 800e2dc:	f7fe f9a9 	bl	800c632 <vListInsertEnd>
 800e2e0:	e004      	b.n	800e2ec <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e2e2:	4b0b      	ldr	r3, [pc, #44]	; (800e310 <xTaskPriorityInherit+0xe0>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	60fb      	str	r3, [r7, #12]
 800e2f0:	e008      	b.n	800e304 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2f6:	4b06      	ldr	r3, [pc, #24]	; (800e310 <xTaskPriorityInherit+0xe0>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d201      	bcs.n	800e304 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e300:	2301      	movs	r3, #1
 800e302:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e304:	68fb      	ldr	r3, [r7, #12]
	}
 800e306:	4618      	mov	r0, r3
 800e308:	3710      	adds	r7, #16
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	200008cc 	.word	0x200008cc
 800e314:	200008d0 	.word	0x200008d0
 800e318:	200009d4 	.word	0x200009d4

0800e31c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b086      	sub	sp, #24
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e328:	2300      	movs	r3, #0
 800e32a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d06e      	beq.n	800e410 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e332:	4b3a      	ldr	r3, [pc, #232]	; (800e41c <xTaskPriorityDisinherit+0x100>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	693a      	ldr	r2, [r7, #16]
 800e338:	429a      	cmp	r2, r3
 800e33a:	d00a      	beq.n	800e352 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e340:	f383 8811 	msr	BASEPRI, r3
 800e344:	f3bf 8f6f 	isb	sy
 800e348:	f3bf 8f4f 	dsb	sy
 800e34c:	60fb      	str	r3, [r7, #12]
}
 800e34e:	bf00      	nop
 800e350:	e7fe      	b.n	800e350 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e356:	2b00      	cmp	r3, #0
 800e358:	d10a      	bne.n	800e370 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35e:	f383 8811 	msr	BASEPRI, r3
 800e362:	f3bf 8f6f 	isb	sy
 800e366:	f3bf 8f4f 	dsb	sy
 800e36a:	60bb      	str	r3, [r7, #8]
}
 800e36c:	bf00      	nop
 800e36e:	e7fe      	b.n	800e36e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e374:	1e5a      	subs	r2, r3, #1
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e382:	429a      	cmp	r2, r3
 800e384:	d044      	beq.n	800e410 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d140      	bne.n	800e410 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	3304      	adds	r3, #4
 800e392:	4618      	mov	r0, r3
 800e394:	f7fe f9aa 	bl	800c6ec <uxListRemove>
 800e398:	4603      	mov	r3, r0
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d115      	bne.n	800e3ca <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3a2:	491f      	ldr	r1, [pc, #124]	; (800e420 <xTaskPriorityDisinherit+0x104>)
 800e3a4:	4613      	mov	r3, r2
 800e3a6:	009b      	lsls	r3, r3, #2
 800e3a8:	4413      	add	r3, r2
 800e3aa:	009b      	lsls	r3, r3, #2
 800e3ac:	440b      	add	r3, r1
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d10a      	bne.n	800e3ca <xTaskPriorityDisinherit+0xae>
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800e3be:	43da      	mvns	r2, r3
 800e3c0:	4b18      	ldr	r3, [pc, #96]	; (800e424 <xTaskPriorityDisinherit+0x108>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4013      	ands	r3, r2
 800e3c6:	4a17      	ldr	r2, [pc, #92]	; (800e424 <xTaskPriorityDisinherit+0x108>)
 800e3c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3d6:	f1c3 0207 	rsb	r2, r3, #7
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	409a      	lsls	r2, r3
 800e3e6:	4b0f      	ldr	r3, [pc, #60]	; (800e424 <xTaskPriorityDisinherit+0x108>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	4a0d      	ldr	r2, [pc, #52]	; (800e424 <xTaskPriorityDisinherit+0x108>)
 800e3ee:	6013      	str	r3, [r2, #0]
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	4413      	add	r3, r2
 800e3fa:	009b      	lsls	r3, r3, #2
 800e3fc:	4a08      	ldr	r2, [pc, #32]	; (800e420 <xTaskPriorityDisinherit+0x104>)
 800e3fe:	441a      	add	r2, r3
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	3304      	adds	r3, #4
 800e404:	4619      	mov	r1, r3
 800e406:	4610      	mov	r0, r2
 800e408:	f7fe f913 	bl	800c632 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e40c:	2301      	movs	r3, #1
 800e40e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e410:	697b      	ldr	r3, [r7, #20]
	}
 800e412:	4618      	mov	r0, r3
 800e414:	3718      	adds	r7, #24
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	200008cc 	.word	0x200008cc
 800e420:	200008d0 	.word	0x200008d0
 800e424:	200009d4 	.word	0x200009d4

0800e428 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b088      	sub	sp, #32
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e436:	2301      	movs	r3, #1
 800e438:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d077      	beq.n	800e530 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e440:	69bb      	ldr	r3, [r7, #24]
 800e442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e444:	2b00      	cmp	r3, #0
 800e446:	d10a      	bne.n	800e45e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44c:	f383 8811 	msr	BASEPRI, r3
 800e450:	f3bf 8f6f 	isb	sy
 800e454:	f3bf 8f4f 	dsb	sy
 800e458:	60fb      	str	r3, [r7, #12]
}
 800e45a:	bf00      	nop
 800e45c:	e7fe      	b.n	800e45c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e462:	683a      	ldr	r2, [r7, #0]
 800e464:	429a      	cmp	r2, r3
 800e466:	d902      	bls.n	800e46e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	61fb      	str	r3, [r7, #28]
 800e46c:	e002      	b.n	800e474 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e46e:	69bb      	ldr	r3, [r7, #24]
 800e470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e472:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e474:	69bb      	ldr	r3, [r7, #24]
 800e476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e478:	69fa      	ldr	r2, [r7, #28]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d058      	beq.n	800e530 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e47e:	69bb      	ldr	r3, [r7, #24]
 800e480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e482:	697a      	ldr	r2, [r7, #20]
 800e484:	429a      	cmp	r2, r3
 800e486:	d153      	bne.n	800e530 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e488:	4b2b      	ldr	r3, [pc, #172]	; (800e538 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	69ba      	ldr	r2, [r7, #24]
 800e48e:	429a      	cmp	r2, r3
 800e490:	d10a      	bne.n	800e4a8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e496:	f383 8811 	msr	BASEPRI, r3
 800e49a:	f3bf 8f6f 	isb	sy
 800e49e:	f3bf 8f4f 	dsb	sy
 800e4a2:	60bb      	str	r3, [r7, #8]
}
 800e4a4:	bf00      	nop
 800e4a6:	e7fe      	b.n	800e4a6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e4a8:	69bb      	ldr	r3, [r7, #24]
 800e4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e4ae:	69bb      	ldr	r3, [r7, #24]
 800e4b0:	69fa      	ldr	r2, [r7, #28]
 800e4b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e4b4:	69bb      	ldr	r3, [r7, #24]
 800e4b6:	699b      	ldr	r3, [r3, #24]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	db04      	blt.n	800e4c6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4bc:	69fb      	ldr	r3, [r7, #28]
 800e4be:	f1c3 0207 	rsb	r2, r3, #7
 800e4c2:	69bb      	ldr	r3, [r7, #24]
 800e4c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e4c6:	69bb      	ldr	r3, [r7, #24]
 800e4c8:	6959      	ldr	r1, [r3, #20]
 800e4ca:	693a      	ldr	r2, [r7, #16]
 800e4cc:	4613      	mov	r3, r2
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	4413      	add	r3, r2
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	4a19      	ldr	r2, [pc, #100]	; (800e53c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e4d6:	4413      	add	r3, r2
 800e4d8:	4299      	cmp	r1, r3
 800e4da:	d129      	bne.n	800e530 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4dc:	69bb      	ldr	r3, [r7, #24]
 800e4de:	3304      	adds	r3, #4
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fe f903 	bl	800c6ec <uxListRemove>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d10a      	bne.n	800e502 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e4f6:	43da      	mvns	r2, r3
 800e4f8:	4b11      	ldr	r3, [pc, #68]	; (800e540 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4013      	ands	r3, r2
 800e4fe:	4a10      	ldr	r2, [pc, #64]	; (800e540 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e500:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e502:	69bb      	ldr	r3, [r7, #24]
 800e504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e506:	2201      	movs	r2, #1
 800e508:	409a      	lsls	r2, r3
 800e50a:	4b0d      	ldr	r3, [pc, #52]	; (800e540 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	4313      	orrs	r3, r2
 800e510:	4a0b      	ldr	r2, [pc, #44]	; (800e540 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e512:	6013      	str	r3, [r2, #0]
 800e514:	69bb      	ldr	r3, [r7, #24]
 800e516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e518:	4613      	mov	r3, r2
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	4413      	add	r3, r2
 800e51e:	009b      	lsls	r3, r3, #2
 800e520:	4a06      	ldr	r2, [pc, #24]	; (800e53c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e522:	441a      	add	r2, r3
 800e524:	69bb      	ldr	r3, [r7, #24]
 800e526:	3304      	adds	r3, #4
 800e528:	4619      	mov	r1, r3
 800e52a:	4610      	mov	r0, r2
 800e52c:	f7fe f881 	bl	800c632 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e530:	bf00      	nop
 800e532:	3720      	adds	r7, #32
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}
 800e538:	200008cc 	.word	0x200008cc
 800e53c:	200008d0 	.word	0x200008d0
 800e540:	200009d4 	.word	0x200009d4

0800e544 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e544:	b480      	push	{r7}
 800e546:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e548:	4b07      	ldr	r3, [pc, #28]	; (800e568 <pvTaskIncrementMutexHeldCount+0x24>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d004      	beq.n	800e55a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e550:	4b05      	ldr	r3, [pc, #20]	; (800e568 <pvTaskIncrementMutexHeldCount+0x24>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e556:	3201      	adds	r2, #1
 800e558:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e55a:	4b03      	ldr	r3, [pc, #12]	; (800e568 <pvTaskIncrementMutexHeldCount+0x24>)
 800e55c:	681b      	ldr	r3, [r3, #0]
	}
 800e55e:	4618      	mov	r0, r3
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr
 800e568:	200008cc 	.word	0x200008cc

0800e56c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e576:	4b29      	ldr	r3, [pc, #164]	; (800e61c <prvAddCurrentTaskToDelayedList+0xb0>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e57c:	4b28      	ldr	r3, [pc, #160]	; (800e620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	3304      	adds	r3, #4
 800e582:	4618      	mov	r0, r3
 800e584:	f7fe f8b2 	bl	800c6ec <uxListRemove>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d10b      	bne.n	800e5a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e58e:	4b24      	ldr	r3, [pc, #144]	; (800e620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e594:	2201      	movs	r2, #1
 800e596:	fa02 f303 	lsl.w	r3, r2, r3
 800e59a:	43da      	mvns	r2, r3
 800e59c:	4b21      	ldr	r3, [pc, #132]	; (800e624 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4013      	ands	r3, r2
 800e5a2:	4a20      	ldr	r2, [pc, #128]	; (800e624 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e5a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5ac:	d10a      	bne.n	800e5c4 <prvAddCurrentTaskToDelayedList+0x58>
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d007      	beq.n	800e5c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5b4:	4b1a      	ldr	r3, [pc, #104]	; (800e620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	3304      	adds	r3, #4
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	481a      	ldr	r0, [pc, #104]	; (800e628 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e5be:	f7fe f838 	bl	800c632 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e5c2:	e026      	b.n	800e612 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e5cc:	4b14      	ldr	r3, [pc, #80]	; (800e620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	68ba      	ldr	r2, [r7, #8]
 800e5d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e5d4:	68ba      	ldr	r2, [r7, #8]
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d209      	bcs.n	800e5f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5dc:	4b13      	ldr	r3, [pc, #76]	; (800e62c <prvAddCurrentTaskToDelayedList+0xc0>)
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	4b0f      	ldr	r3, [pc, #60]	; (800e620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	3304      	adds	r3, #4
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	4610      	mov	r0, r2
 800e5ea:	f7fe f846 	bl	800c67a <vListInsert>
}
 800e5ee:	e010      	b.n	800e612 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5f0:	4b0f      	ldr	r3, [pc, #60]	; (800e630 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	4b0a      	ldr	r3, [pc, #40]	; (800e620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	3304      	adds	r3, #4
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	4610      	mov	r0, r2
 800e5fe:	f7fe f83c 	bl	800c67a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e602:	4b0c      	ldr	r3, [pc, #48]	; (800e634 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	68ba      	ldr	r2, [r7, #8]
 800e608:	429a      	cmp	r2, r3
 800e60a:	d202      	bcs.n	800e612 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e60c:	4a09      	ldr	r2, [pc, #36]	; (800e634 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	6013      	str	r3, [r2, #0]
}
 800e612:	bf00      	nop
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	200009d0 	.word	0x200009d0
 800e620:	200008cc 	.word	0x200008cc
 800e624:	200009d4 	.word	0x200009d4
 800e628:	200009b8 	.word	0x200009b8
 800e62c:	20000988 	.word	0x20000988
 800e630:	20000984 	.word	0x20000984
 800e634:	200009ec 	.word	0x200009ec

0800e638 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b08a      	sub	sp, #40	; 0x28
 800e63c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e63e:	2300      	movs	r3, #0
 800e640:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e642:	f000 faeb 	bl	800ec1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e646:	4b1c      	ldr	r3, [pc, #112]	; (800e6b8 <xTimerCreateTimerTask+0x80>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d021      	beq.n	800e692 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e64e:	2300      	movs	r3, #0
 800e650:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e652:	2300      	movs	r3, #0
 800e654:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e656:	1d3a      	adds	r2, r7, #4
 800e658:	f107 0108 	add.w	r1, r7, #8
 800e65c:	f107 030c 	add.w	r3, r7, #12
 800e660:	4618      	mov	r0, r3
 800e662:	f7f3 ffc9 	bl	80025f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e666:	6879      	ldr	r1, [r7, #4]
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	68fa      	ldr	r2, [r7, #12]
 800e66c:	9202      	str	r2, [sp, #8]
 800e66e:	9301      	str	r3, [sp, #4]
 800e670:	2302      	movs	r3, #2
 800e672:	9300      	str	r3, [sp, #0]
 800e674:	2300      	movs	r3, #0
 800e676:	460a      	mov	r2, r1
 800e678:	4910      	ldr	r1, [pc, #64]	; (800e6bc <xTimerCreateTimerTask+0x84>)
 800e67a:	4811      	ldr	r0, [pc, #68]	; (800e6c0 <xTimerCreateTimerTask+0x88>)
 800e67c:	f7fe ffb2 	bl	800d5e4 <xTaskCreateStatic>
 800e680:	4603      	mov	r3, r0
 800e682:	4a10      	ldr	r2, [pc, #64]	; (800e6c4 <xTimerCreateTimerTask+0x8c>)
 800e684:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e686:	4b0f      	ldr	r3, [pc, #60]	; (800e6c4 <xTimerCreateTimerTask+0x8c>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d001      	beq.n	800e692 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e68e:	2301      	movs	r3, #1
 800e690:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d10a      	bne.n	800e6ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e69c:	f383 8811 	msr	BASEPRI, r3
 800e6a0:	f3bf 8f6f 	isb	sy
 800e6a4:	f3bf 8f4f 	dsb	sy
 800e6a8:	613b      	str	r3, [r7, #16]
}
 800e6aa:	bf00      	nop
 800e6ac:	e7fe      	b.n	800e6ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e6ae:	697b      	ldr	r3, [r7, #20]
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3718      	adds	r7, #24
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	20000a28 	.word	0x20000a28
 800e6bc:	08013fa8 	.word	0x08013fa8
 800e6c0:	0800e7fd 	.word	0x0800e7fd
 800e6c4:	20000a2c 	.word	0x20000a2c

0800e6c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b08a      	sub	sp, #40	; 0x28
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	607a      	str	r2, [r7, #4]
 800e6d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d10a      	bne.n	800e6f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e4:	f383 8811 	msr	BASEPRI, r3
 800e6e8:	f3bf 8f6f 	isb	sy
 800e6ec:	f3bf 8f4f 	dsb	sy
 800e6f0:	623b      	str	r3, [r7, #32]
}
 800e6f2:	bf00      	nop
 800e6f4:	e7fe      	b.n	800e6f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e6f6:	4b1a      	ldr	r3, [pc, #104]	; (800e760 <xTimerGenericCommand+0x98>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d02a      	beq.n	800e754 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	2b05      	cmp	r3, #5
 800e70e:	dc18      	bgt.n	800e742 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e710:	f7ff fd70 	bl	800e1f4 <xTaskGetSchedulerState>
 800e714:	4603      	mov	r3, r0
 800e716:	2b02      	cmp	r3, #2
 800e718:	d109      	bne.n	800e72e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e71a:	4b11      	ldr	r3, [pc, #68]	; (800e760 <xTimerGenericCommand+0x98>)
 800e71c:	6818      	ldr	r0, [r3, #0]
 800e71e:	f107 0114 	add.w	r1, r7, #20
 800e722:	2300      	movs	r3, #0
 800e724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e726:	f7fe f945 	bl	800c9b4 <xQueueGenericSend>
 800e72a:	6278      	str	r0, [r7, #36]	; 0x24
 800e72c:	e012      	b.n	800e754 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e72e:	4b0c      	ldr	r3, [pc, #48]	; (800e760 <xTimerGenericCommand+0x98>)
 800e730:	6818      	ldr	r0, [r3, #0]
 800e732:	f107 0114 	add.w	r1, r7, #20
 800e736:	2300      	movs	r3, #0
 800e738:	2200      	movs	r2, #0
 800e73a:	f7fe f93b 	bl	800c9b4 <xQueueGenericSend>
 800e73e:	6278      	str	r0, [r7, #36]	; 0x24
 800e740:	e008      	b.n	800e754 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e742:	4b07      	ldr	r3, [pc, #28]	; (800e760 <xTimerGenericCommand+0x98>)
 800e744:	6818      	ldr	r0, [r3, #0]
 800e746:	f107 0114 	add.w	r1, r7, #20
 800e74a:	2300      	movs	r3, #0
 800e74c:	683a      	ldr	r2, [r7, #0]
 800e74e:	f7fe fa2f 	bl	800cbb0 <xQueueGenericSendFromISR>
 800e752:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e756:	4618      	mov	r0, r3
 800e758:	3728      	adds	r7, #40	; 0x28
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	20000a28 	.word	0x20000a28

0800e764 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b088      	sub	sp, #32
 800e768:	af02      	add	r7, sp, #8
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e76e:	4b22      	ldr	r3, [pc, #136]	; (800e7f8 <prvProcessExpiredTimer+0x94>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	68db      	ldr	r3, [r3, #12]
 800e776:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	3304      	adds	r3, #4
 800e77c:	4618      	mov	r0, r3
 800e77e:	f7fd ffb5 	bl	800c6ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e788:	f003 0304 	and.w	r3, r3, #4
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d022      	beq.n	800e7d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	699a      	ldr	r2, [r3, #24]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	18d1      	adds	r1, r2, r3
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	683a      	ldr	r2, [r7, #0]
 800e79c:	6978      	ldr	r0, [r7, #20]
 800e79e:	f000 f8d1 	bl	800e944 <prvInsertTimerInActiveList>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d01f      	beq.n	800e7e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	9300      	str	r3, [sp, #0]
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	2100      	movs	r1, #0
 800e7b2:	6978      	ldr	r0, [r7, #20]
 800e7b4:	f7ff ff88 	bl	800e6c8 <xTimerGenericCommand>
 800e7b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d113      	bne.n	800e7e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c4:	f383 8811 	msr	BASEPRI, r3
 800e7c8:	f3bf 8f6f 	isb	sy
 800e7cc:	f3bf 8f4f 	dsb	sy
 800e7d0:	60fb      	str	r3, [r7, #12]
}
 800e7d2:	bf00      	nop
 800e7d4:	e7fe      	b.n	800e7d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e7dc:	f023 0301 	bic.w	r3, r3, #1
 800e7e0:	b2da      	uxtb	r2, r3
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	6a1b      	ldr	r3, [r3, #32]
 800e7ec:	6978      	ldr	r0, [r7, #20]
 800e7ee:	4798      	blx	r3
}
 800e7f0:	bf00      	nop
 800e7f2:	3718      	adds	r7, #24
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}
 800e7f8:	20000a20 	.word	0x20000a20

0800e7fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e804:	f107 0308 	add.w	r3, r7, #8
 800e808:	4618      	mov	r0, r3
 800e80a:	f000 f857 	bl	800e8bc <prvGetNextExpireTime>
 800e80e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	4619      	mov	r1, r3
 800e814:	68f8      	ldr	r0, [r7, #12]
 800e816:	f000 f803 	bl	800e820 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e81a:	f000 f8d5 	bl	800e9c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e81e:	e7f1      	b.n	800e804 <prvTimerTask+0x8>

0800e820 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b084      	sub	sp, #16
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e82a:	f7ff f909 	bl	800da40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e82e:	f107 0308 	add.w	r3, r7, #8
 800e832:	4618      	mov	r0, r3
 800e834:	f000 f866 	bl	800e904 <prvSampleTimeNow>
 800e838:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d130      	bne.n	800e8a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d10a      	bne.n	800e85c <prvProcessTimerOrBlockTask+0x3c>
 800e846:	687a      	ldr	r2, [r7, #4]
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d806      	bhi.n	800e85c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e84e:	f7ff f905 	bl	800da5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e852:	68f9      	ldr	r1, [r7, #12]
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f7ff ff85 	bl	800e764 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e85a:	e024      	b.n	800e8a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d008      	beq.n	800e874 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e862:	4b13      	ldr	r3, [pc, #76]	; (800e8b0 <prvProcessTimerOrBlockTask+0x90>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d101      	bne.n	800e870 <prvProcessTimerOrBlockTask+0x50>
 800e86c:	2301      	movs	r3, #1
 800e86e:	e000      	b.n	800e872 <prvProcessTimerOrBlockTask+0x52>
 800e870:	2300      	movs	r3, #0
 800e872:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e874:	4b0f      	ldr	r3, [pc, #60]	; (800e8b4 <prvProcessTimerOrBlockTask+0x94>)
 800e876:	6818      	ldr	r0, [r3, #0]
 800e878:	687a      	ldr	r2, [r7, #4]
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	1ad3      	subs	r3, r2, r3
 800e87e:	683a      	ldr	r2, [r7, #0]
 800e880:	4619      	mov	r1, r3
 800e882:	f7fe fe7b 	bl	800d57c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e886:	f7ff f8e9 	bl	800da5c <xTaskResumeAll>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d10a      	bne.n	800e8a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e890:	4b09      	ldr	r3, [pc, #36]	; (800e8b8 <prvProcessTimerOrBlockTask+0x98>)
 800e892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e896:	601a      	str	r2, [r3, #0]
 800e898:	f3bf 8f4f 	dsb	sy
 800e89c:	f3bf 8f6f 	isb	sy
}
 800e8a0:	e001      	b.n	800e8a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e8a2:	f7ff f8db 	bl	800da5c <xTaskResumeAll>
}
 800e8a6:	bf00      	nop
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	20000a24 	.word	0x20000a24
 800e8b4:	20000a28 	.word	0x20000a28
 800e8b8:	e000ed04 	.word	0xe000ed04

0800e8bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b085      	sub	sp, #20
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e8c4:	4b0e      	ldr	r3, [pc, #56]	; (800e900 <prvGetNextExpireTime+0x44>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d101      	bne.n	800e8d2 <prvGetNextExpireTime+0x16>
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	e000      	b.n	800e8d4 <prvGetNextExpireTime+0x18>
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d105      	bne.n	800e8ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e8e0:	4b07      	ldr	r3, [pc, #28]	; (800e900 <prvGetNextExpireTime+0x44>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	68db      	ldr	r3, [r3, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	60fb      	str	r3, [r7, #12]
 800e8ea:	e001      	b.n	800e8f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3714      	adds	r7, #20
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr
 800e8fe:	bf00      	nop
 800e900:	20000a20 	.word	0x20000a20

0800e904 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e90c:	f7ff f942 	bl	800db94 <xTaskGetTickCount>
 800e910:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e912:	4b0b      	ldr	r3, [pc, #44]	; (800e940 <prvSampleTimeNow+0x3c>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	68fa      	ldr	r2, [r7, #12]
 800e918:	429a      	cmp	r2, r3
 800e91a:	d205      	bcs.n	800e928 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e91c:	f000 f91a 	bl	800eb54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2201      	movs	r2, #1
 800e924:	601a      	str	r2, [r3, #0]
 800e926:	e002      	b.n	800e92e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2200      	movs	r2, #0
 800e92c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e92e:	4a04      	ldr	r2, [pc, #16]	; (800e940 <prvSampleTimeNow+0x3c>)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e934:	68fb      	ldr	r3, [r7, #12]
}
 800e936:	4618      	mov	r0, r3
 800e938:	3710      	adds	r7, #16
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
 800e93e:	bf00      	nop
 800e940:	20000a30 	.word	0x20000a30

0800e944 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b086      	sub	sp, #24
 800e948:	af00      	add	r7, sp, #0
 800e94a:	60f8      	str	r0, [r7, #12]
 800e94c:	60b9      	str	r1, [r7, #8]
 800e94e:	607a      	str	r2, [r7, #4]
 800e950:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e952:	2300      	movs	r3, #0
 800e954:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	68ba      	ldr	r2, [r7, #8]
 800e95a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	68fa      	ldr	r2, [r7, #12]
 800e960:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e962:	68ba      	ldr	r2, [r7, #8]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	429a      	cmp	r2, r3
 800e968:	d812      	bhi.n	800e990 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	1ad2      	subs	r2, r2, r3
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	699b      	ldr	r3, [r3, #24]
 800e974:	429a      	cmp	r2, r3
 800e976:	d302      	bcc.n	800e97e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e978:	2301      	movs	r3, #1
 800e97a:	617b      	str	r3, [r7, #20]
 800e97c:	e01b      	b.n	800e9b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e97e:	4b10      	ldr	r3, [pc, #64]	; (800e9c0 <prvInsertTimerInActiveList+0x7c>)
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	3304      	adds	r3, #4
 800e986:	4619      	mov	r1, r3
 800e988:	4610      	mov	r0, r2
 800e98a:	f7fd fe76 	bl	800c67a <vListInsert>
 800e98e:	e012      	b.n	800e9b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	429a      	cmp	r2, r3
 800e996:	d206      	bcs.n	800e9a6 <prvInsertTimerInActiveList+0x62>
 800e998:	68ba      	ldr	r2, [r7, #8]
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d302      	bcc.n	800e9a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	617b      	str	r3, [r7, #20]
 800e9a4:	e007      	b.n	800e9b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e9a6:	4b07      	ldr	r3, [pc, #28]	; (800e9c4 <prvInsertTimerInActiveList+0x80>)
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	3304      	adds	r3, #4
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	4610      	mov	r0, r2
 800e9b2:	f7fd fe62 	bl	800c67a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e9b6:	697b      	ldr	r3, [r7, #20]
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3718      	adds	r7, #24
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	20000a24 	.word	0x20000a24
 800e9c4:	20000a20 	.word	0x20000a20

0800e9c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b08c      	sub	sp, #48	; 0x30
 800e9cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e9ce:	e0ae      	b.n	800eb2e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f2c0 80aa 	blt.w	800eb2c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9de:	695b      	ldr	r3, [r3, #20]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d004      	beq.n	800e9ee <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e6:	3304      	adds	r3, #4
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fd fe7f 	bl	800c6ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e9ee:	1d3b      	adds	r3, r7, #4
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7ff ff87 	bl	800e904 <prvSampleTimeNow>
 800e9f6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	2b09      	cmp	r3, #9
 800e9fc:	f200 8097 	bhi.w	800eb2e <prvProcessReceivedCommands+0x166>
 800ea00:	a201      	add	r2, pc, #4	; (adr r2, 800ea08 <prvProcessReceivedCommands+0x40>)
 800ea02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea06:	bf00      	nop
 800ea08:	0800ea31 	.word	0x0800ea31
 800ea0c:	0800ea31 	.word	0x0800ea31
 800ea10:	0800ea31 	.word	0x0800ea31
 800ea14:	0800eaa5 	.word	0x0800eaa5
 800ea18:	0800eab9 	.word	0x0800eab9
 800ea1c:	0800eb03 	.word	0x0800eb03
 800ea20:	0800ea31 	.word	0x0800ea31
 800ea24:	0800ea31 	.word	0x0800ea31
 800ea28:	0800eaa5 	.word	0x0800eaa5
 800ea2c:	0800eab9 	.word	0x0800eab9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ea36:	f043 0301 	orr.w	r3, r3, #1
 800ea3a:	b2da      	uxtb	r2, r3
 800ea3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ea42:	68fa      	ldr	r2, [r7, #12]
 800ea44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea46:	699b      	ldr	r3, [r3, #24]
 800ea48:	18d1      	adds	r1, r2, r3
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	6a3a      	ldr	r2, [r7, #32]
 800ea4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea50:	f7ff ff78 	bl	800e944 <prvInsertTimerInActiveList>
 800ea54:	4603      	mov	r3, r0
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d069      	beq.n	800eb2e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5c:	6a1b      	ldr	r3, [r3, #32]
 800ea5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ea68:	f003 0304 	and.w	r3, r3, #4
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d05e      	beq.n	800eb2e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ea70:	68fa      	ldr	r2, [r7, #12]
 800ea72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea74:	699b      	ldr	r3, [r3, #24]
 800ea76:	441a      	add	r2, r3
 800ea78:	2300      	movs	r3, #0
 800ea7a:	9300      	str	r3, [sp, #0]
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	2100      	movs	r1, #0
 800ea80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea82:	f7ff fe21 	bl	800e6c8 <xTimerGenericCommand>
 800ea86:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800ea88:	69fb      	ldr	r3, [r7, #28]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d14f      	bne.n	800eb2e <prvProcessReceivedCommands+0x166>
	__asm volatile
 800ea8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea92:	f383 8811 	msr	BASEPRI, r3
 800ea96:	f3bf 8f6f 	isb	sy
 800ea9a:	f3bf 8f4f 	dsb	sy
 800ea9e:	61bb      	str	r3, [r7, #24]
}
 800eaa0:	bf00      	nop
 800eaa2:	e7fe      	b.n	800eaa2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eaaa:	f023 0301 	bic.w	r3, r3, #1
 800eaae:	b2da      	uxtb	r2, r3
 800eab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800eab6:	e03a      	b.n	800eb2e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eabe:	f043 0301 	orr.w	r3, r3, #1
 800eac2:	b2da      	uxtb	r2, r3
 800eac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eaca:	68fa      	ldr	r2, [r7, #12]
 800eacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eace:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ead0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead2:	699b      	ldr	r3, [r3, #24]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d10a      	bne.n	800eaee <prvProcessReceivedCommands+0x126>
	__asm volatile
 800ead8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eadc:	f383 8811 	msr	BASEPRI, r3
 800eae0:	f3bf 8f6f 	isb	sy
 800eae4:	f3bf 8f4f 	dsb	sy
 800eae8:	617b      	str	r3, [r7, #20]
}
 800eaea:	bf00      	nop
 800eaec:	e7fe      	b.n	800eaec <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf0:	699a      	ldr	r2, [r3, #24]
 800eaf2:	6a3b      	ldr	r3, [r7, #32]
 800eaf4:	18d1      	adds	r1, r2, r3
 800eaf6:	6a3b      	ldr	r3, [r7, #32]
 800eaf8:	6a3a      	ldr	r2, [r7, #32]
 800eafa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eafc:	f7ff ff22 	bl	800e944 <prvInsertTimerInActiveList>
					break;
 800eb00:	e015      	b.n	800eb2e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eb08:	f003 0302 	and.w	r3, r3, #2
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d103      	bne.n	800eb18 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800eb10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb12:	f000 fbdd 	bl	800f2d0 <vPortFree>
 800eb16:	e00a      	b.n	800eb2e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eb1e:	f023 0301 	bic.w	r3, r3, #1
 800eb22:	b2da      	uxtb	r2, r3
 800eb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eb2a:	e000      	b.n	800eb2e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800eb2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eb2e:	4b08      	ldr	r3, [pc, #32]	; (800eb50 <prvProcessReceivedCommands+0x188>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f107 0108 	add.w	r1, r7, #8
 800eb36:	2200      	movs	r2, #0
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7fe f961 	bl	800ce00 <xQueueReceive>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	f47f af45 	bne.w	800e9d0 <prvProcessReceivedCommands+0x8>
	}
}
 800eb46:	bf00      	nop
 800eb48:	bf00      	nop
 800eb4a:	3728      	adds	r7, #40	; 0x28
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	20000a28 	.word	0x20000a28

0800eb54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b088      	sub	sp, #32
 800eb58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eb5a:	e048      	b.n	800ebee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eb5c:	4b2d      	ldr	r3, [pc, #180]	; (800ec14 <prvSwitchTimerLists+0xc0>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	68db      	ldr	r3, [r3, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb66:	4b2b      	ldr	r3, [pc, #172]	; (800ec14 <prvSwitchTimerLists+0xc0>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	68db      	ldr	r3, [r3, #12]
 800eb6c:	68db      	ldr	r3, [r3, #12]
 800eb6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	3304      	adds	r3, #4
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7fd fdb9 	bl	800c6ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6a1b      	ldr	r3, [r3, #32]
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eb88:	f003 0304 	and.w	r3, r3, #4
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d02e      	beq.n	800ebee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	699b      	ldr	r3, [r3, #24]
 800eb94:	693a      	ldr	r2, [r7, #16]
 800eb96:	4413      	add	r3, r2
 800eb98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eb9a:	68ba      	ldr	r2, [r7, #8]
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d90e      	bls.n	800ebc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	68ba      	ldr	r2, [r7, #8]
 800eba6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	68fa      	ldr	r2, [r7, #12]
 800ebac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ebae:	4b19      	ldr	r3, [pc, #100]	; (800ec14 <prvSwitchTimerLists+0xc0>)
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	3304      	adds	r3, #4
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	4610      	mov	r0, r2
 800ebba:	f7fd fd5e 	bl	800c67a <vListInsert>
 800ebbe:	e016      	b.n	800ebee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	9300      	str	r3, [sp, #0]
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	693a      	ldr	r2, [r7, #16]
 800ebc8:	2100      	movs	r1, #0
 800ebca:	68f8      	ldr	r0, [r7, #12]
 800ebcc:	f7ff fd7c 	bl	800e6c8 <xTimerGenericCommand>
 800ebd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d10a      	bne.n	800ebee <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ebd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebdc:	f383 8811 	msr	BASEPRI, r3
 800ebe0:	f3bf 8f6f 	isb	sy
 800ebe4:	f3bf 8f4f 	dsb	sy
 800ebe8:	603b      	str	r3, [r7, #0]
}
 800ebea:	bf00      	nop
 800ebec:	e7fe      	b.n	800ebec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ebee:	4b09      	ldr	r3, [pc, #36]	; (800ec14 <prvSwitchTimerLists+0xc0>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d1b1      	bne.n	800eb5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ebf8:	4b06      	ldr	r3, [pc, #24]	; (800ec14 <prvSwitchTimerLists+0xc0>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ebfe:	4b06      	ldr	r3, [pc, #24]	; (800ec18 <prvSwitchTimerLists+0xc4>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	4a04      	ldr	r2, [pc, #16]	; (800ec14 <prvSwitchTimerLists+0xc0>)
 800ec04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ec06:	4a04      	ldr	r2, [pc, #16]	; (800ec18 <prvSwitchTimerLists+0xc4>)
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	6013      	str	r3, [r2, #0]
}
 800ec0c:	bf00      	nop
 800ec0e:	3718      	adds	r7, #24
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}
 800ec14:	20000a20 	.word	0x20000a20
 800ec18:	20000a24 	.word	0x20000a24

0800ec1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ec22:	f000 f967 	bl	800eef4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ec26:	4b15      	ldr	r3, [pc, #84]	; (800ec7c <prvCheckForValidListAndQueue+0x60>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d120      	bne.n	800ec70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ec2e:	4814      	ldr	r0, [pc, #80]	; (800ec80 <prvCheckForValidListAndQueue+0x64>)
 800ec30:	f7fd fcd2 	bl	800c5d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ec34:	4813      	ldr	r0, [pc, #76]	; (800ec84 <prvCheckForValidListAndQueue+0x68>)
 800ec36:	f7fd fccf 	bl	800c5d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ec3a:	4b13      	ldr	r3, [pc, #76]	; (800ec88 <prvCheckForValidListAndQueue+0x6c>)
 800ec3c:	4a10      	ldr	r2, [pc, #64]	; (800ec80 <prvCheckForValidListAndQueue+0x64>)
 800ec3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ec40:	4b12      	ldr	r3, [pc, #72]	; (800ec8c <prvCheckForValidListAndQueue+0x70>)
 800ec42:	4a10      	ldr	r2, [pc, #64]	; (800ec84 <prvCheckForValidListAndQueue+0x68>)
 800ec44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ec46:	2300      	movs	r3, #0
 800ec48:	9300      	str	r3, [sp, #0]
 800ec4a:	4b11      	ldr	r3, [pc, #68]	; (800ec90 <prvCheckForValidListAndQueue+0x74>)
 800ec4c:	4a11      	ldr	r2, [pc, #68]	; (800ec94 <prvCheckForValidListAndQueue+0x78>)
 800ec4e:	210c      	movs	r1, #12
 800ec50:	200a      	movs	r0, #10
 800ec52:	f7fd fddd 	bl	800c810 <xQueueGenericCreateStatic>
 800ec56:	4603      	mov	r3, r0
 800ec58:	4a08      	ldr	r2, [pc, #32]	; (800ec7c <prvCheckForValidListAndQueue+0x60>)
 800ec5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ec5c:	4b07      	ldr	r3, [pc, #28]	; (800ec7c <prvCheckForValidListAndQueue+0x60>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d005      	beq.n	800ec70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ec64:	4b05      	ldr	r3, [pc, #20]	; (800ec7c <prvCheckForValidListAndQueue+0x60>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	490b      	ldr	r1, [pc, #44]	; (800ec98 <prvCheckForValidListAndQueue+0x7c>)
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7fe fc5c 	bl	800d528 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ec70:	f000 f970 	bl	800ef54 <vPortExitCritical>
}
 800ec74:	bf00      	nop
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	20000a28 	.word	0x20000a28
 800ec80:	200009f8 	.word	0x200009f8
 800ec84:	20000a0c 	.word	0x20000a0c
 800ec88:	20000a20 	.word	0x20000a20
 800ec8c:	20000a24 	.word	0x20000a24
 800ec90:	20000aac 	.word	0x20000aac
 800ec94:	20000a34 	.word	0x20000a34
 800ec98:	08013fb0 	.word	0x08013fb0

0800ec9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b085      	sub	sp, #20
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	3b04      	subs	r3, #4
 800ecac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ecb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	3b04      	subs	r3, #4
 800ecba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	f023 0201 	bic.w	r2, r3, #1
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	3b04      	subs	r3, #4
 800ecca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eccc:	4a0c      	ldr	r2, [pc, #48]	; (800ed00 <pxPortInitialiseStack+0x64>)
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	3b14      	subs	r3, #20
 800ecd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ecd8:	687a      	ldr	r2, [r7, #4]
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	3b04      	subs	r3, #4
 800ece2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f06f 0202 	mvn.w	r2, #2
 800ecea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	3b20      	subs	r3, #32
 800ecf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3714      	adds	r7, #20
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr
 800ed00:	0800ed05 	.word	0x0800ed05

0800ed04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ed04:	b480      	push	{r7}
 800ed06:	b085      	sub	sp, #20
 800ed08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ed0e:	4b12      	ldr	r3, [pc, #72]	; (800ed58 <prvTaskExitError+0x54>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed16:	d00a      	beq.n	800ed2e <prvTaskExitError+0x2a>
	__asm volatile
 800ed18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed1c:	f383 8811 	msr	BASEPRI, r3
 800ed20:	f3bf 8f6f 	isb	sy
 800ed24:	f3bf 8f4f 	dsb	sy
 800ed28:	60fb      	str	r3, [r7, #12]
}
 800ed2a:	bf00      	nop
 800ed2c:	e7fe      	b.n	800ed2c <prvTaskExitError+0x28>
	__asm volatile
 800ed2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed32:	f383 8811 	msr	BASEPRI, r3
 800ed36:	f3bf 8f6f 	isb	sy
 800ed3a:	f3bf 8f4f 	dsb	sy
 800ed3e:	60bb      	str	r3, [r7, #8]
}
 800ed40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ed42:	bf00      	nop
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d0fc      	beq.n	800ed44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ed4a:	bf00      	nop
 800ed4c:	bf00      	nop
 800ed4e:	3714      	adds	r7, #20
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr
 800ed58:	20000018 	.word	0x20000018
 800ed5c:	00000000 	.word	0x00000000

0800ed60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ed60:	4b07      	ldr	r3, [pc, #28]	; (800ed80 <pxCurrentTCBConst2>)
 800ed62:	6819      	ldr	r1, [r3, #0]
 800ed64:	6808      	ldr	r0, [r1, #0]
 800ed66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed6a:	f380 8809 	msr	PSP, r0
 800ed6e:	f3bf 8f6f 	isb	sy
 800ed72:	f04f 0000 	mov.w	r0, #0
 800ed76:	f380 8811 	msr	BASEPRI, r0
 800ed7a:	4770      	bx	lr
 800ed7c:	f3af 8000 	nop.w

0800ed80 <pxCurrentTCBConst2>:
 800ed80:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ed84:	bf00      	nop
 800ed86:	bf00      	nop

0800ed88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ed88:	4808      	ldr	r0, [pc, #32]	; (800edac <prvPortStartFirstTask+0x24>)
 800ed8a:	6800      	ldr	r0, [r0, #0]
 800ed8c:	6800      	ldr	r0, [r0, #0]
 800ed8e:	f380 8808 	msr	MSP, r0
 800ed92:	f04f 0000 	mov.w	r0, #0
 800ed96:	f380 8814 	msr	CONTROL, r0
 800ed9a:	b662      	cpsie	i
 800ed9c:	b661      	cpsie	f
 800ed9e:	f3bf 8f4f 	dsb	sy
 800eda2:	f3bf 8f6f 	isb	sy
 800eda6:	df00      	svc	0
 800eda8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800edaa:	bf00      	nop
 800edac:	e000ed08 	.word	0xe000ed08

0800edb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b086      	sub	sp, #24
 800edb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800edb6:	4b46      	ldr	r3, [pc, #280]	; (800eed0 <xPortStartScheduler+0x120>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	4a46      	ldr	r2, [pc, #280]	; (800eed4 <xPortStartScheduler+0x124>)
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d10a      	bne.n	800edd6 <xPortStartScheduler+0x26>
	__asm volatile
 800edc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc4:	f383 8811 	msr	BASEPRI, r3
 800edc8:	f3bf 8f6f 	isb	sy
 800edcc:	f3bf 8f4f 	dsb	sy
 800edd0:	613b      	str	r3, [r7, #16]
}
 800edd2:	bf00      	nop
 800edd4:	e7fe      	b.n	800edd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800edd6:	4b3e      	ldr	r3, [pc, #248]	; (800eed0 <xPortStartScheduler+0x120>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4a3f      	ldr	r2, [pc, #252]	; (800eed8 <xPortStartScheduler+0x128>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d10a      	bne.n	800edf6 <xPortStartScheduler+0x46>
	__asm volatile
 800ede0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede4:	f383 8811 	msr	BASEPRI, r3
 800ede8:	f3bf 8f6f 	isb	sy
 800edec:	f3bf 8f4f 	dsb	sy
 800edf0:	60fb      	str	r3, [r7, #12]
}
 800edf2:	bf00      	nop
 800edf4:	e7fe      	b.n	800edf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800edf6:	4b39      	ldr	r3, [pc, #228]	; (800eedc <xPortStartScheduler+0x12c>)
 800edf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	b2db      	uxtb	r3, r3
 800ee00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	22ff      	movs	r2, #255	; 0xff
 800ee06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ee10:	78fb      	ldrb	r3, [r7, #3]
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ee18:	b2da      	uxtb	r2, r3
 800ee1a:	4b31      	ldr	r3, [pc, #196]	; (800eee0 <xPortStartScheduler+0x130>)
 800ee1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ee1e:	4b31      	ldr	r3, [pc, #196]	; (800eee4 <xPortStartScheduler+0x134>)
 800ee20:	2207      	movs	r2, #7
 800ee22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee24:	e009      	b.n	800ee3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ee26:	4b2f      	ldr	r3, [pc, #188]	; (800eee4 <xPortStartScheduler+0x134>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	3b01      	subs	r3, #1
 800ee2c:	4a2d      	ldr	r2, [pc, #180]	; (800eee4 <xPortStartScheduler+0x134>)
 800ee2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ee30:	78fb      	ldrb	r3, [r7, #3]
 800ee32:	b2db      	uxtb	r3, r3
 800ee34:	005b      	lsls	r3, r3, #1
 800ee36:	b2db      	uxtb	r3, r3
 800ee38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee3a:	78fb      	ldrb	r3, [r7, #3]
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee42:	2b80      	cmp	r3, #128	; 0x80
 800ee44:	d0ef      	beq.n	800ee26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ee46:	4b27      	ldr	r3, [pc, #156]	; (800eee4 <xPortStartScheduler+0x134>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f1c3 0307 	rsb	r3, r3, #7
 800ee4e:	2b04      	cmp	r3, #4
 800ee50:	d00a      	beq.n	800ee68 <xPortStartScheduler+0xb8>
	__asm volatile
 800ee52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee56:	f383 8811 	msr	BASEPRI, r3
 800ee5a:	f3bf 8f6f 	isb	sy
 800ee5e:	f3bf 8f4f 	dsb	sy
 800ee62:	60bb      	str	r3, [r7, #8]
}
 800ee64:	bf00      	nop
 800ee66:	e7fe      	b.n	800ee66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ee68:	4b1e      	ldr	r3, [pc, #120]	; (800eee4 <xPortStartScheduler+0x134>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	021b      	lsls	r3, r3, #8
 800ee6e:	4a1d      	ldr	r2, [pc, #116]	; (800eee4 <xPortStartScheduler+0x134>)
 800ee70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ee72:	4b1c      	ldr	r3, [pc, #112]	; (800eee4 <xPortStartScheduler+0x134>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ee7a:	4a1a      	ldr	r2, [pc, #104]	; (800eee4 <xPortStartScheduler+0x134>)
 800ee7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	b2da      	uxtb	r2, r3
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ee86:	4b18      	ldr	r3, [pc, #96]	; (800eee8 <xPortStartScheduler+0x138>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4a17      	ldr	r2, [pc, #92]	; (800eee8 <xPortStartScheduler+0x138>)
 800ee8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ee90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ee92:	4b15      	ldr	r3, [pc, #84]	; (800eee8 <xPortStartScheduler+0x138>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	4a14      	ldr	r2, [pc, #80]	; (800eee8 <xPortStartScheduler+0x138>)
 800ee98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ee9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ee9e:	f000 f8dd 	bl	800f05c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eea2:	4b12      	ldr	r3, [pc, #72]	; (800eeec <xPortStartScheduler+0x13c>)
 800eea4:	2200      	movs	r2, #0
 800eea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eea8:	f000 f8fc 	bl	800f0a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800eeac:	4b10      	ldr	r3, [pc, #64]	; (800eef0 <xPortStartScheduler+0x140>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4a0f      	ldr	r2, [pc, #60]	; (800eef0 <xPortStartScheduler+0x140>)
 800eeb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800eeb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eeb8:	f7ff ff66 	bl	800ed88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eebc:	f7fe ff32 	bl	800dd24 <vTaskSwitchContext>
	prvTaskExitError();
 800eec0:	f7ff ff20 	bl	800ed04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eec4:	2300      	movs	r3, #0
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	3718      	adds	r7, #24
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop
 800eed0:	e000ed00 	.word	0xe000ed00
 800eed4:	410fc271 	.word	0x410fc271
 800eed8:	410fc270 	.word	0x410fc270
 800eedc:	e000e400 	.word	0xe000e400
 800eee0:	20000af4 	.word	0x20000af4
 800eee4:	20000af8 	.word	0x20000af8
 800eee8:	e000ed20 	.word	0xe000ed20
 800eeec:	20000018 	.word	0x20000018
 800eef0:	e000ef34 	.word	0xe000ef34

0800eef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800eef4:	b480      	push	{r7}
 800eef6:	b083      	sub	sp, #12
 800eef8:	af00      	add	r7, sp, #0
	__asm volatile
 800eefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eefe:	f383 8811 	msr	BASEPRI, r3
 800ef02:	f3bf 8f6f 	isb	sy
 800ef06:	f3bf 8f4f 	dsb	sy
 800ef0a:	607b      	str	r3, [r7, #4]
}
 800ef0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ef0e:	4b0f      	ldr	r3, [pc, #60]	; (800ef4c <vPortEnterCritical+0x58>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	3301      	adds	r3, #1
 800ef14:	4a0d      	ldr	r2, [pc, #52]	; (800ef4c <vPortEnterCritical+0x58>)
 800ef16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ef18:	4b0c      	ldr	r3, [pc, #48]	; (800ef4c <vPortEnterCritical+0x58>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	d10f      	bne.n	800ef40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ef20:	4b0b      	ldr	r3, [pc, #44]	; (800ef50 <vPortEnterCritical+0x5c>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d00a      	beq.n	800ef40 <vPortEnterCritical+0x4c>
	__asm volatile
 800ef2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef2e:	f383 8811 	msr	BASEPRI, r3
 800ef32:	f3bf 8f6f 	isb	sy
 800ef36:	f3bf 8f4f 	dsb	sy
 800ef3a:	603b      	str	r3, [r7, #0]
}
 800ef3c:	bf00      	nop
 800ef3e:	e7fe      	b.n	800ef3e <vPortEnterCritical+0x4a>
	}
}
 800ef40:	bf00      	nop
 800ef42:	370c      	adds	r7, #12
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr
 800ef4c:	20000018 	.word	0x20000018
 800ef50:	e000ed04 	.word	0xe000ed04

0800ef54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ef54:	b480      	push	{r7}
 800ef56:	b083      	sub	sp, #12
 800ef58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ef5a:	4b12      	ldr	r3, [pc, #72]	; (800efa4 <vPortExitCritical+0x50>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d10a      	bne.n	800ef78 <vPortExitCritical+0x24>
	__asm volatile
 800ef62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef66:	f383 8811 	msr	BASEPRI, r3
 800ef6a:	f3bf 8f6f 	isb	sy
 800ef6e:	f3bf 8f4f 	dsb	sy
 800ef72:	607b      	str	r3, [r7, #4]
}
 800ef74:	bf00      	nop
 800ef76:	e7fe      	b.n	800ef76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ef78:	4b0a      	ldr	r3, [pc, #40]	; (800efa4 <vPortExitCritical+0x50>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	3b01      	subs	r3, #1
 800ef7e:	4a09      	ldr	r2, [pc, #36]	; (800efa4 <vPortExitCritical+0x50>)
 800ef80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ef82:	4b08      	ldr	r3, [pc, #32]	; (800efa4 <vPortExitCritical+0x50>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d105      	bne.n	800ef96 <vPortExitCritical+0x42>
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	f383 8811 	msr	BASEPRI, r3
}
 800ef94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ef96:	bf00      	nop
 800ef98:	370c      	adds	r7, #12
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	20000018 	.word	0x20000018
	...

0800efb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800efb0:	f3ef 8009 	mrs	r0, PSP
 800efb4:	f3bf 8f6f 	isb	sy
 800efb8:	4b15      	ldr	r3, [pc, #84]	; (800f010 <pxCurrentTCBConst>)
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	f01e 0f10 	tst.w	lr, #16
 800efc0:	bf08      	it	eq
 800efc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800efc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efca:	6010      	str	r0, [r2, #0]
 800efcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800efd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800efd4:	f380 8811 	msr	BASEPRI, r0
 800efd8:	f3bf 8f4f 	dsb	sy
 800efdc:	f3bf 8f6f 	isb	sy
 800efe0:	f7fe fea0 	bl	800dd24 <vTaskSwitchContext>
 800efe4:	f04f 0000 	mov.w	r0, #0
 800efe8:	f380 8811 	msr	BASEPRI, r0
 800efec:	bc09      	pop	{r0, r3}
 800efee:	6819      	ldr	r1, [r3, #0]
 800eff0:	6808      	ldr	r0, [r1, #0]
 800eff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eff6:	f01e 0f10 	tst.w	lr, #16
 800effa:	bf08      	it	eq
 800effc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f000:	f380 8809 	msr	PSP, r0
 800f004:	f3bf 8f6f 	isb	sy
 800f008:	4770      	bx	lr
 800f00a:	bf00      	nop
 800f00c:	f3af 8000 	nop.w

0800f010 <pxCurrentTCBConst>:
 800f010:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f014:	bf00      	nop
 800f016:	bf00      	nop

0800f018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
	__asm volatile
 800f01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f022:	f383 8811 	msr	BASEPRI, r3
 800f026:	f3bf 8f6f 	isb	sy
 800f02a:	f3bf 8f4f 	dsb	sy
 800f02e:	607b      	str	r3, [r7, #4]
}
 800f030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f032:	f7fe fdbf 	bl	800dbb4 <xTaskIncrementTick>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d003      	beq.n	800f044 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f03c:	4b06      	ldr	r3, [pc, #24]	; (800f058 <SysTick_Handler+0x40>)
 800f03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f042:	601a      	str	r2, [r3, #0]
 800f044:	2300      	movs	r3, #0
 800f046:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	f383 8811 	msr	BASEPRI, r3
}
 800f04e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f050:	bf00      	nop
 800f052:	3708      	adds	r7, #8
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}
 800f058:	e000ed04 	.word	0xe000ed04

0800f05c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f05c:	b480      	push	{r7}
 800f05e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f060:	4b0b      	ldr	r3, [pc, #44]	; (800f090 <vPortSetupTimerInterrupt+0x34>)
 800f062:	2200      	movs	r2, #0
 800f064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f066:	4b0b      	ldr	r3, [pc, #44]	; (800f094 <vPortSetupTimerInterrupt+0x38>)
 800f068:	2200      	movs	r2, #0
 800f06a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f06c:	4b0a      	ldr	r3, [pc, #40]	; (800f098 <vPortSetupTimerInterrupt+0x3c>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	4a0a      	ldr	r2, [pc, #40]	; (800f09c <vPortSetupTimerInterrupt+0x40>)
 800f072:	fba2 2303 	umull	r2, r3, r2, r3
 800f076:	099b      	lsrs	r3, r3, #6
 800f078:	4a09      	ldr	r2, [pc, #36]	; (800f0a0 <vPortSetupTimerInterrupt+0x44>)
 800f07a:	3b01      	subs	r3, #1
 800f07c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f07e:	4b04      	ldr	r3, [pc, #16]	; (800f090 <vPortSetupTimerInterrupt+0x34>)
 800f080:	2207      	movs	r2, #7
 800f082:	601a      	str	r2, [r3, #0]
}
 800f084:	bf00      	nop
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr
 800f08e:	bf00      	nop
 800f090:	e000e010 	.word	0xe000e010
 800f094:	e000e018 	.word	0xe000e018
 800f098:	2000000c 	.word	0x2000000c
 800f09c:	10624dd3 	.word	0x10624dd3
 800f0a0:	e000e014 	.word	0xe000e014

0800f0a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f0a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f0b4 <vPortEnableVFP+0x10>
 800f0a8:	6801      	ldr	r1, [r0, #0]
 800f0aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f0ae:	6001      	str	r1, [r0, #0]
 800f0b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f0b2:	bf00      	nop
 800f0b4:	e000ed88 	.word	0xe000ed88

0800f0b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b085      	sub	sp, #20
 800f0bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f0be:	f3ef 8305 	mrs	r3, IPSR
 800f0c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	2b0f      	cmp	r3, #15
 800f0c8:	d914      	bls.n	800f0f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f0ca:	4a17      	ldr	r2, [pc, #92]	; (800f128 <vPortValidateInterruptPriority+0x70>)
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	4413      	add	r3, r2
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f0d4:	4b15      	ldr	r3, [pc, #84]	; (800f12c <vPortValidateInterruptPriority+0x74>)
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	7afa      	ldrb	r2, [r7, #11]
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d20a      	bcs.n	800f0f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e2:	f383 8811 	msr	BASEPRI, r3
 800f0e6:	f3bf 8f6f 	isb	sy
 800f0ea:	f3bf 8f4f 	dsb	sy
 800f0ee:	607b      	str	r3, [r7, #4]
}
 800f0f0:	bf00      	nop
 800f0f2:	e7fe      	b.n	800f0f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f0f4:	4b0e      	ldr	r3, [pc, #56]	; (800f130 <vPortValidateInterruptPriority+0x78>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f0fc:	4b0d      	ldr	r3, [pc, #52]	; (800f134 <vPortValidateInterruptPriority+0x7c>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	429a      	cmp	r2, r3
 800f102:	d90a      	bls.n	800f11a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f108:	f383 8811 	msr	BASEPRI, r3
 800f10c:	f3bf 8f6f 	isb	sy
 800f110:	f3bf 8f4f 	dsb	sy
 800f114:	603b      	str	r3, [r7, #0]
}
 800f116:	bf00      	nop
 800f118:	e7fe      	b.n	800f118 <vPortValidateInterruptPriority+0x60>
	}
 800f11a:	bf00      	nop
 800f11c:	3714      	adds	r7, #20
 800f11e:	46bd      	mov	sp, r7
 800f120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f124:	4770      	bx	lr
 800f126:	bf00      	nop
 800f128:	e000e3f0 	.word	0xe000e3f0
 800f12c:	20000af4 	.word	0x20000af4
 800f130:	e000ed0c 	.word	0xe000ed0c
 800f134:	20000af8 	.word	0x20000af8

0800f138 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b08a      	sub	sp, #40	; 0x28
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f140:	2300      	movs	r3, #0
 800f142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f144:	f7fe fc7c 	bl	800da40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f148:	4b5b      	ldr	r3, [pc, #364]	; (800f2b8 <pvPortMalloc+0x180>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d101      	bne.n	800f154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f150:	f000 f920 	bl	800f394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f154:	4b59      	ldr	r3, [pc, #356]	; (800f2bc <pvPortMalloc+0x184>)
 800f156:	681a      	ldr	r2, [r3, #0]
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	4013      	ands	r3, r2
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	f040 8093 	bne.w	800f288 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d01d      	beq.n	800f1a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f168:	2208      	movs	r2, #8
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	4413      	add	r3, r2
 800f16e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f003 0307 	and.w	r3, r3, #7
 800f176:	2b00      	cmp	r3, #0
 800f178:	d014      	beq.n	800f1a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f023 0307 	bic.w	r3, r3, #7
 800f180:	3308      	adds	r3, #8
 800f182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f003 0307 	and.w	r3, r3, #7
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00a      	beq.n	800f1a4 <pvPortMalloc+0x6c>
	__asm volatile
 800f18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f192:	f383 8811 	msr	BASEPRI, r3
 800f196:	f3bf 8f6f 	isb	sy
 800f19a:	f3bf 8f4f 	dsb	sy
 800f19e:	617b      	str	r3, [r7, #20]
}
 800f1a0:	bf00      	nop
 800f1a2:	e7fe      	b.n	800f1a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d06e      	beq.n	800f288 <pvPortMalloc+0x150>
 800f1aa:	4b45      	ldr	r3, [pc, #276]	; (800f2c0 <pvPortMalloc+0x188>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	687a      	ldr	r2, [r7, #4]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d869      	bhi.n	800f288 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f1b4:	4b43      	ldr	r3, [pc, #268]	; (800f2c4 <pvPortMalloc+0x18c>)
 800f1b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f1b8:	4b42      	ldr	r3, [pc, #264]	; (800f2c4 <pvPortMalloc+0x18c>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f1be:	e004      	b.n	800f1ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1cc:	685b      	ldr	r3, [r3, #4]
 800f1ce:	687a      	ldr	r2, [r7, #4]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d903      	bls.n	800f1dc <pvPortMalloc+0xa4>
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d1f1      	bne.n	800f1c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f1dc:	4b36      	ldr	r3, [pc, #216]	; (800f2b8 <pvPortMalloc+0x180>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d050      	beq.n	800f288 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f1e6:	6a3b      	ldr	r3, [r7, #32]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	2208      	movs	r2, #8
 800f1ec:	4413      	add	r3, r2
 800f1ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f2:	681a      	ldr	r2, [r3, #0]
 800f1f4:	6a3b      	ldr	r3, [r7, #32]
 800f1f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fa:	685a      	ldr	r2, [r3, #4]
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	1ad2      	subs	r2, r2, r3
 800f200:	2308      	movs	r3, #8
 800f202:	005b      	lsls	r3, r3, #1
 800f204:	429a      	cmp	r2, r3
 800f206:	d91f      	bls.n	800f248 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	4413      	add	r3, r2
 800f20e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f210:	69bb      	ldr	r3, [r7, #24]
 800f212:	f003 0307 	and.w	r3, r3, #7
 800f216:	2b00      	cmp	r3, #0
 800f218:	d00a      	beq.n	800f230 <pvPortMalloc+0xf8>
	__asm volatile
 800f21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f21e:	f383 8811 	msr	BASEPRI, r3
 800f222:	f3bf 8f6f 	isb	sy
 800f226:	f3bf 8f4f 	dsb	sy
 800f22a:	613b      	str	r3, [r7, #16]
}
 800f22c:	bf00      	nop
 800f22e:	e7fe      	b.n	800f22e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f232:	685a      	ldr	r2, [r3, #4]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	1ad2      	subs	r2, r2, r3
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f242:	69b8      	ldr	r0, [r7, #24]
 800f244:	f000 f908 	bl	800f458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f248:	4b1d      	ldr	r3, [pc, #116]	; (800f2c0 <pvPortMalloc+0x188>)
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	1ad3      	subs	r3, r2, r3
 800f252:	4a1b      	ldr	r2, [pc, #108]	; (800f2c0 <pvPortMalloc+0x188>)
 800f254:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f256:	4b1a      	ldr	r3, [pc, #104]	; (800f2c0 <pvPortMalloc+0x188>)
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	4b1b      	ldr	r3, [pc, #108]	; (800f2c8 <pvPortMalloc+0x190>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	429a      	cmp	r2, r3
 800f260:	d203      	bcs.n	800f26a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f262:	4b17      	ldr	r3, [pc, #92]	; (800f2c0 <pvPortMalloc+0x188>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	4a18      	ldr	r2, [pc, #96]	; (800f2c8 <pvPortMalloc+0x190>)
 800f268:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26c:	685a      	ldr	r2, [r3, #4]
 800f26e:	4b13      	ldr	r3, [pc, #76]	; (800f2bc <pvPortMalloc+0x184>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	431a      	orrs	r2, r3
 800f274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f276:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f27a:	2200      	movs	r2, #0
 800f27c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f27e:	4b13      	ldr	r3, [pc, #76]	; (800f2cc <pvPortMalloc+0x194>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	3301      	adds	r3, #1
 800f284:	4a11      	ldr	r2, [pc, #68]	; (800f2cc <pvPortMalloc+0x194>)
 800f286:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f288:	f7fe fbe8 	bl	800da5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f28c:	69fb      	ldr	r3, [r7, #28]
 800f28e:	f003 0307 	and.w	r3, r3, #7
 800f292:	2b00      	cmp	r3, #0
 800f294:	d00a      	beq.n	800f2ac <pvPortMalloc+0x174>
	__asm volatile
 800f296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f29a:	f383 8811 	msr	BASEPRI, r3
 800f29e:	f3bf 8f6f 	isb	sy
 800f2a2:	f3bf 8f4f 	dsb	sy
 800f2a6:	60fb      	str	r3, [r7, #12]
}
 800f2a8:	bf00      	nop
 800f2aa:	e7fe      	b.n	800f2aa <pvPortMalloc+0x172>
	return pvReturn;
 800f2ac:	69fb      	ldr	r3, [r7, #28]
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3728      	adds	r7, #40	; 0x28
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	2000af14 	.word	0x2000af14
 800f2bc:	2000af28 	.word	0x2000af28
 800f2c0:	2000af18 	.word	0x2000af18
 800f2c4:	2000af0c 	.word	0x2000af0c
 800f2c8:	2000af1c 	.word	0x2000af1c
 800f2cc:	2000af20 	.word	0x2000af20

0800f2d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b086      	sub	sp, #24
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d04d      	beq.n	800f37e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f2e2:	2308      	movs	r3, #8
 800f2e4:	425b      	negs	r3, r3
 800f2e6:	697a      	ldr	r2, [r7, #20]
 800f2e8:	4413      	add	r3, r2
 800f2ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	685a      	ldr	r2, [r3, #4]
 800f2f4:	4b24      	ldr	r3, [pc, #144]	; (800f388 <vPortFree+0xb8>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4013      	ands	r3, r2
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d10a      	bne.n	800f314 <vPortFree+0x44>
	__asm volatile
 800f2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f302:	f383 8811 	msr	BASEPRI, r3
 800f306:	f3bf 8f6f 	isb	sy
 800f30a:	f3bf 8f4f 	dsb	sy
 800f30e:	60fb      	str	r3, [r7, #12]
}
 800f310:	bf00      	nop
 800f312:	e7fe      	b.n	800f312 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d00a      	beq.n	800f332 <vPortFree+0x62>
	__asm volatile
 800f31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f320:	f383 8811 	msr	BASEPRI, r3
 800f324:	f3bf 8f6f 	isb	sy
 800f328:	f3bf 8f4f 	dsb	sy
 800f32c:	60bb      	str	r3, [r7, #8]
}
 800f32e:	bf00      	nop
 800f330:	e7fe      	b.n	800f330 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	685a      	ldr	r2, [r3, #4]
 800f336:	4b14      	ldr	r3, [pc, #80]	; (800f388 <vPortFree+0xb8>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	4013      	ands	r3, r2
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d01e      	beq.n	800f37e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f340:	693b      	ldr	r3, [r7, #16]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d11a      	bne.n	800f37e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	685a      	ldr	r2, [r3, #4]
 800f34c:	4b0e      	ldr	r3, [pc, #56]	; (800f388 <vPortFree+0xb8>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	43db      	mvns	r3, r3
 800f352:	401a      	ands	r2, r3
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f358:	f7fe fb72 	bl	800da40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	685a      	ldr	r2, [r3, #4]
 800f360:	4b0a      	ldr	r3, [pc, #40]	; (800f38c <vPortFree+0xbc>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	4413      	add	r3, r2
 800f366:	4a09      	ldr	r2, [pc, #36]	; (800f38c <vPortFree+0xbc>)
 800f368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f36a:	6938      	ldr	r0, [r7, #16]
 800f36c:	f000 f874 	bl	800f458 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f370:	4b07      	ldr	r3, [pc, #28]	; (800f390 <vPortFree+0xc0>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	3301      	adds	r3, #1
 800f376:	4a06      	ldr	r2, [pc, #24]	; (800f390 <vPortFree+0xc0>)
 800f378:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f37a:	f7fe fb6f 	bl	800da5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f37e:	bf00      	nop
 800f380:	3718      	adds	r7, #24
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop
 800f388:	2000af28 	.word	0x2000af28
 800f38c:	2000af18 	.word	0x2000af18
 800f390:	2000af24 	.word	0x2000af24

0800f394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f394:	b480      	push	{r7}
 800f396:	b085      	sub	sp, #20
 800f398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f39a:	f24a 4310 	movw	r3, #42000	; 0xa410
 800f39e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f3a0:	4b27      	ldr	r3, [pc, #156]	; (800f440 <prvHeapInit+0xac>)
 800f3a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f003 0307 	and.w	r3, r3, #7
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d00c      	beq.n	800f3c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	3307      	adds	r3, #7
 800f3b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f023 0307 	bic.w	r3, r3, #7
 800f3ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f3bc:	68ba      	ldr	r2, [r7, #8]
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	1ad3      	subs	r3, r2, r3
 800f3c2:	4a1f      	ldr	r2, [pc, #124]	; (800f440 <prvHeapInit+0xac>)
 800f3c4:	4413      	add	r3, r2
 800f3c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f3cc:	4a1d      	ldr	r2, [pc, #116]	; (800f444 <prvHeapInit+0xb0>)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f3d2:	4b1c      	ldr	r3, [pc, #112]	; (800f444 <prvHeapInit+0xb0>)
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	68ba      	ldr	r2, [r7, #8]
 800f3dc:	4413      	add	r3, r2
 800f3de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f3e0:	2208      	movs	r2, #8
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	1a9b      	subs	r3, r3, r2
 800f3e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f023 0307 	bic.w	r3, r3, #7
 800f3ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	4a15      	ldr	r2, [pc, #84]	; (800f448 <prvHeapInit+0xb4>)
 800f3f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f3f6:	4b14      	ldr	r3, [pc, #80]	; (800f448 <prvHeapInit+0xb4>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f3fe:	4b12      	ldr	r3, [pc, #72]	; (800f448 <prvHeapInit+0xb4>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	2200      	movs	r2, #0
 800f404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	68fa      	ldr	r2, [r7, #12]
 800f40e:	1ad2      	subs	r2, r2, r3
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f414:	4b0c      	ldr	r3, [pc, #48]	; (800f448 <prvHeapInit+0xb4>)
 800f416:	681a      	ldr	r2, [r3, #0]
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	685b      	ldr	r3, [r3, #4]
 800f420:	4a0a      	ldr	r2, [pc, #40]	; (800f44c <prvHeapInit+0xb8>)
 800f422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	4a09      	ldr	r2, [pc, #36]	; (800f450 <prvHeapInit+0xbc>)
 800f42a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f42c:	4b09      	ldr	r3, [pc, #36]	; (800f454 <prvHeapInit+0xc0>)
 800f42e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f432:	601a      	str	r2, [r3, #0]
}
 800f434:	bf00      	nop
 800f436:	3714      	adds	r7, #20
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr
 800f440:	20000afc 	.word	0x20000afc
 800f444:	2000af0c 	.word	0x2000af0c
 800f448:	2000af14 	.word	0x2000af14
 800f44c:	2000af1c 	.word	0x2000af1c
 800f450:	2000af18 	.word	0x2000af18
 800f454:	2000af28 	.word	0x2000af28

0800f458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f458:	b480      	push	{r7}
 800f45a:	b085      	sub	sp, #20
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f460:	4b28      	ldr	r3, [pc, #160]	; (800f504 <prvInsertBlockIntoFreeList+0xac>)
 800f462:	60fb      	str	r3, [r7, #12]
 800f464:	e002      	b.n	800f46c <prvInsertBlockIntoFreeList+0x14>
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	60fb      	str	r3, [r7, #12]
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	429a      	cmp	r2, r3
 800f474:	d8f7      	bhi.n	800f466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	68ba      	ldr	r2, [r7, #8]
 800f480:	4413      	add	r3, r2
 800f482:	687a      	ldr	r2, [r7, #4]
 800f484:	429a      	cmp	r2, r3
 800f486:	d108      	bne.n	800f49a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	685a      	ldr	r2, [r3, #4]
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	441a      	add	r2, r3
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	68ba      	ldr	r2, [r7, #8]
 800f4a4:	441a      	add	r2, r3
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d118      	bne.n	800f4e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681a      	ldr	r2, [r3, #0]
 800f4b2:	4b15      	ldr	r3, [pc, #84]	; (800f508 <prvInsertBlockIntoFreeList+0xb0>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d00d      	beq.n	800f4d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	685a      	ldr	r2, [r3, #4]
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	441a      	add	r2, r3
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	681a      	ldr	r2, [r3, #0]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	601a      	str	r2, [r3, #0]
 800f4d4:	e008      	b.n	800f4e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f4d6:	4b0c      	ldr	r3, [pc, #48]	; (800f508 <prvInsertBlockIntoFreeList+0xb0>)
 800f4d8:	681a      	ldr	r2, [r3, #0]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	601a      	str	r2, [r3, #0]
 800f4de:	e003      	b.n	800f4e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f4e8:	68fa      	ldr	r2, [r7, #12]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d002      	beq.n	800f4f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f4f6:	bf00      	nop
 800f4f8:	3714      	adds	r7, #20
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr
 800f502:	bf00      	nop
 800f504:	2000af0c 	.word	0x2000af0c
 800f508:	2000af14 	.word	0x2000af14

0800f50c <atoi>:
 800f50c:	220a      	movs	r2, #10
 800f50e:	2100      	movs	r1, #0
 800f510:	f000 bdbc 	b.w	801008c <strtol>

0800f514 <__errno>:
 800f514:	4b01      	ldr	r3, [pc, #4]	; (800f51c <__errno+0x8>)
 800f516:	6818      	ldr	r0, [r3, #0]
 800f518:	4770      	bx	lr
 800f51a:	bf00      	nop
 800f51c:	2000001c 	.word	0x2000001c

0800f520 <__libc_init_array>:
 800f520:	b570      	push	{r4, r5, r6, lr}
 800f522:	4d0d      	ldr	r5, [pc, #52]	; (800f558 <__libc_init_array+0x38>)
 800f524:	4c0d      	ldr	r4, [pc, #52]	; (800f55c <__libc_init_array+0x3c>)
 800f526:	1b64      	subs	r4, r4, r5
 800f528:	10a4      	asrs	r4, r4, #2
 800f52a:	2600      	movs	r6, #0
 800f52c:	42a6      	cmp	r6, r4
 800f52e:	d109      	bne.n	800f544 <__libc_init_array+0x24>
 800f530:	4d0b      	ldr	r5, [pc, #44]	; (800f560 <__libc_init_array+0x40>)
 800f532:	4c0c      	ldr	r4, [pc, #48]	; (800f564 <__libc_init_array+0x44>)
 800f534:	f004 fbc2 	bl	8013cbc <_init>
 800f538:	1b64      	subs	r4, r4, r5
 800f53a:	10a4      	asrs	r4, r4, #2
 800f53c:	2600      	movs	r6, #0
 800f53e:	42a6      	cmp	r6, r4
 800f540:	d105      	bne.n	800f54e <__libc_init_array+0x2e>
 800f542:	bd70      	pop	{r4, r5, r6, pc}
 800f544:	f855 3b04 	ldr.w	r3, [r5], #4
 800f548:	4798      	blx	r3
 800f54a:	3601      	adds	r6, #1
 800f54c:	e7ee      	b.n	800f52c <__libc_init_array+0xc>
 800f54e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f552:	4798      	blx	r3
 800f554:	3601      	adds	r6, #1
 800f556:	e7f2      	b.n	800f53e <__libc_init_array+0x1e>
 800f558:	08014720 	.word	0x08014720
 800f55c:	08014720 	.word	0x08014720
 800f560:	08014720 	.word	0x08014720
 800f564:	08014724 	.word	0x08014724

0800f568 <memcpy>:
 800f568:	440a      	add	r2, r1
 800f56a:	4291      	cmp	r1, r2
 800f56c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f570:	d100      	bne.n	800f574 <memcpy+0xc>
 800f572:	4770      	bx	lr
 800f574:	b510      	push	{r4, lr}
 800f576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f57a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f57e:	4291      	cmp	r1, r2
 800f580:	d1f9      	bne.n	800f576 <memcpy+0xe>
 800f582:	bd10      	pop	{r4, pc}

0800f584 <memset>:
 800f584:	4402      	add	r2, r0
 800f586:	4603      	mov	r3, r0
 800f588:	4293      	cmp	r3, r2
 800f58a:	d100      	bne.n	800f58e <memset+0xa>
 800f58c:	4770      	bx	lr
 800f58e:	f803 1b01 	strb.w	r1, [r3], #1
 800f592:	e7f9      	b.n	800f588 <memset+0x4>

0800f594 <__cvt>:
 800f594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f598:	ec55 4b10 	vmov	r4, r5, d0
 800f59c:	2d00      	cmp	r5, #0
 800f59e:	460e      	mov	r6, r1
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	462b      	mov	r3, r5
 800f5a4:	bfbb      	ittet	lt
 800f5a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f5aa:	461d      	movlt	r5, r3
 800f5ac:	2300      	movge	r3, #0
 800f5ae:	232d      	movlt	r3, #45	; 0x2d
 800f5b0:	700b      	strb	r3, [r1, #0]
 800f5b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f5b8:	4691      	mov	r9, r2
 800f5ba:	f023 0820 	bic.w	r8, r3, #32
 800f5be:	bfbc      	itt	lt
 800f5c0:	4622      	movlt	r2, r4
 800f5c2:	4614      	movlt	r4, r2
 800f5c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f5c8:	d005      	beq.n	800f5d6 <__cvt+0x42>
 800f5ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f5ce:	d100      	bne.n	800f5d2 <__cvt+0x3e>
 800f5d0:	3601      	adds	r6, #1
 800f5d2:	2102      	movs	r1, #2
 800f5d4:	e000      	b.n	800f5d8 <__cvt+0x44>
 800f5d6:	2103      	movs	r1, #3
 800f5d8:	ab03      	add	r3, sp, #12
 800f5da:	9301      	str	r3, [sp, #4]
 800f5dc:	ab02      	add	r3, sp, #8
 800f5de:	9300      	str	r3, [sp, #0]
 800f5e0:	ec45 4b10 	vmov	d0, r4, r5
 800f5e4:	4653      	mov	r3, sl
 800f5e6:	4632      	mov	r2, r6
 800f5e8:	f000 fea6 	bl	8010338 <_dtoa_r>
 800f5ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f5f0:	4607      	mov	r7, r0
 800f5f2:	d102      	bne.n	800f5fa <__cvt+0x66>
 800f5f4:	f019 0f01 	tst.w	r9, #1
 800f5f8:	d022      	beq.n	800f640 <__cvt+0xac>
 800f5fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f5fe:	eb07 0906 	add.w	r9, r7, r6
 800f602:	d110      	bne.n	800f626 <__cvt+0x92>
 800f604:	783b      	ldrb	r3, [r7, #0]
 800f606:	2b30      	cmp	r3, #48	; 0x30
 800f608:	d10a      	bne.n	800f620 <__cvt+0x8c>
 800f60a:	2200      	movs	r2, #0
 800f60c:	2300      	movs	r3, #0
 800f60e:	4620      	mov	r0, r4
 800f610:	4629      	mov	r1, r5
 800f612:	f7f1 fa61 	bl	8000ad8 <__aeabi_dcmpeq>
 800f616:	b918      	cbnz	r0, 800f620 <__cvt+0x8c>
 800f618:	f1c6 0601 	rsb	r6, r6, #1
 800f61c:	f8ca 6000 	str.w	r6, [sl]
 800f620:	f8da 3000 	ldr.w	r3, [sl]
 800f624:	4499      	add	r9, r3
 800f626:	2200      	movs	r2, #0
 800f628:	2300      	movs	r3, #0
 800f62a:	4620      	mov	r0, r4
 800f62c:	4629      	mov	r1, r5
 800f62e:	f7f1 fa53 	bl	8000ad8 <__aeabi_dcmpeq>
 800f632:	b108      	cbz	r0, 800f638 <__cvt+0xa4>
 800f634:	f8cd 900c 	str.w	r9, [sp, #12]
 800f638:	2230      	movs	r2, #48	; 0x30
 800f63a:	9b03      	ldr	r3, [sp, #12]
 800f63c:	454b      	cmp	r3, r9
 800f63e:	d307      	bcc.n	800f650 <__cvt+0xbc>
 800f640:	9b03      	ldr	r3, [sp, #12]
 800f642:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f644:	1bdb      	subs	r3, r3, r7
 800f646:	4638      	mov	r0, r7
 800f648:	6013      	str	r3, [r2, #0]
 800f64a:	b004      	add	sp, #16
 800f64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f650:	1c59      	adds	r1, r3, #1
 800f652:	9103      	str	r1, [sp, #12]
 800f654:	701a      	strb	r2, [r3, #0]
 800f656:	e7f0      	b.n	800f63a <__cvt+0xa6>

0800f658 <__exponent>:
 800f658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f65a:	4603      	mov	r3, r0
 800f65c:	2900      	cmp	r1, #0
 800f65e:	bfb8      	it	lt
 800f660:	4249      	neglt	r1, r1
 800f662:	f803 2b02 	strb.w	r2, [r3], #2
 800f666:	bfb4      	ite	lt
 800f668:	222d      	movlt	r2, #45	; 0x2d
 800f66a:	222b      	movge	r2, #43	; 0x2b
 800f66c:	2909      	cmp	r1, #9
 800f66e:	7042      	strb	r2, [r0, #1]
 800f670:	dd2a      	ble.n	800f6c8 <__exponent+0x70>
 800f672:	f10d 0407 	add.w	r4, sp, #7
 800f676:	46a4      	mov	ip, r4
 800f678:	270a      	movs	r7, #10
 800f67a:	46a6      	mov	lr, r4
 800f67c:	460a      	mov	r2, r1
 800f67e:	fb91 f6f7 	sdiv	r6, r1, r7
 800f682:	fb07 1516 	mls	r5, r7, r6, r1
 800f686:	3530      	adds	r5, #48	; 0x30
 800f688:	2a63      	cmp	r2, #99	; 0x63
 800f68a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800f68e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f692:	4631      	mov	r1, r6
 800f694:	dcf1      	bgt.n	800f67a <__exponent+0x22>
 800f696:	3130      	adds	r1, #48	; 0x30
 800f698:	f1ae 0502 	sub.w	r5, lr, #2
 800f69c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f6a0:	1c44      	adds	r4, r0, #1
 800f6a2:	4629      	mov	r1, r5
 800f6a4:	4561      	cmp	r1, ip
 800f6a6:	d30a      	bcc.n	800f6be <__exponent+0x66>
 800f6a8:	f10d 0209 	add.w	r2, sp, #9
 800f6ac:	eba2 020e 	sub.w	r2, r2, lr
 800f6b0:	4565      	cmp	r5, ip
 800f6b2:	bf88      	it	hi
 800f6b4:	2200      	movhi	r2, #0
 800f6b6:	4413      	add	r3, r2
 800f6b8:	1a18      	subs	r0, r3, r0
 800f6ba:	b003      	add	sp, #12
 800f6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f6c6:	e7ed      	b.n	800f6a4 <__exponent+0x4c>
 800f6c8:	2330      	movs	r3, #48	; 0x30
 800f6ca:	3130      	adds	r1, #48	; 0x30
 800f6cc:	7083      	strb	r3, [r0, #2]
 800f6ce:	70c1      	strb	r1, [r0, #3]
 800f6d0:	1d03      	adds	r3, r0, #4
 800f6d2:	e7f1      	b.n	800f6b8 <__exponent+0x60>

0800f6d4 <_printf_float>:
 800f6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d8:	ed2d 8b02 	vpush	{d8}
 800f6dc:	b08d      	sub	sp, #52	; 0x34
 800f6de:	460c      	mov	r4, r1
 800f6e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f6e4:	4616      	mov	r6, r2
 800f6e6:	461f      	mov	r7, r3
 800f6e8:	4605      	mov	r5, r0
 800f6ea:	f001 fdc9 	bl	8011280 <_localeconv_r>
 800f6ee:	f8d0 a000 	ldr.w	sl, [r0]
 800f6f2:	4650      	mov	r0, sl
 800f6f4:	f7f0 fd74 	bl	80001e0 <strlen>
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	930a      	str	r3, [sp, #40]	; 0x28
 800f6fc:	6823      	ldr	r3, [r4, #0]
 800f6fe:	9305      	str	r3, [sp, #20]
 800f700:	f8d8 3000 	ldr.w	r3, [r8]
 800f704:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f708:	3307      	adds	r3, #7
 800f70a:	f023 0307 	bic.w	r3, r3, #7
 800f70e:	f103 0208 	add.w	r2, r3, #8
 800f712:	f8c8 2000 	str.w	r2, [r8]
 800f716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f71e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f722:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f726:	9307      	str	r3, [sp, #28]
 800f728:	f8cd 8018 	str.w	r8, [sp, #24]
 800f72c:	ee08 0a10 	vmov	s16, r0
 800f730:	4b9f      	ldr	r3, [pc, #636]	; (800f9b0 <_printf_float+0x2dc>)
 800f732:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f73a:	f7f1 f9ff 	bl	8000b3c <__aeabi_dcmpun>
 800f73e:	bb88      	cbnz	r0, 800f7a4 <_printf_float+0xd0>
 800f740:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f744:	4b9a      	ldr	r3, [pc, #616]	; (800f9b0 <_printf_float+0x2dc>)
 800f746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f74a:	f7f1 f9d9 	bl	8000b00 <__aeabi_dcmple>
 800f74e:	bb48      	cbnz	r0, 800f7a4 <_printf_float+0xd0>
 800f750:	2200      	movs	r2, #0
 800f752:	2300      	movs	r3, #0
 800f754:	4640      	mov	r0, r8
 800f756:	4649      	mov	r1, r9
 800f758:	f7f1 f9c8 	bl	8000aec <__aeabi_dcmplt>
 800f75c:	b110      	cbz	r0, 800f764 <_printf_float+0x90>
 800f75e:	232d      	movs	r3, #45	; 0x2d
 800f760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f764:	4b93      	ldr	r3, [pc, #588]	; (800f9b4 <_printf_float+0x2e0>)
 800f766:	4894      	ldr	r0, [pc, #592]	; (800f9b8 <_printf_float+0x2e4>)
 800f768:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f76c:	bf94      	ite	ls
 800f76e:	4698      	movls	r8, r3
 800f770:	4680      	movhi	r8, r0
 800f772:	2303      	movs	r3, #3
 800f774:	6123      	str	r3, [r4, #16]
 800f776:	9b05      	ldr	r3, [sp, #20]
 800f778:	f023 0204 	bic.w	r2, r3, #4
 800f77c:	6022      	str	r2, [r4, #0]
 800f77e:	f04f 0900 	mov.w	r9, #0
 800f782:	9700      	str	r7, [sp, #0]
 800f784:	4633      	mov	r3, r6
 800f786:	aa0b      	add	r2, sp, #44	; 0x2c
 800f788:	4621      	mov	r1, r4
 800f78a:	4628      	mov	r0, r5
 800f78c:	f000 f9d8 	bl	800fb40 <_printf_common>
 800f790:	3001      	adds	r0, #1
 800f792:	f040 8090 	bne.w	800f8b6 <_printf_float+0x1e2>
 800f796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f79a:	b00d      	add	sp, #52	; 0x34
 800f79c:	ecbd 8b02 	vpop	{d8}
 800f7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a4:	4642      	mov	r2, r8
 800f7a6:	464b      	mov	r3, r9
 800f7a8:	4640      	mov	r0, r8
 800f7aa:	4649      	mov	r1, r9
 800f7ac:	f7f1 f9c6 	bl	8000b3c <__aeabi_dcmpun>
 800f7b0:	b140      	cbz	r0, 800f7c4 <_printf_float+0xf0>
 800f7b2:	464b      	mov	r3, r9
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	bfbc      	itt	lt
 800f7b8:	232d      	movlt	r3, #45	; 0x2d
 800f7ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f7be:	487f      	ldr	r0, [pc, #508]	; (800f9bc <_printf_float+0x2e8>)
 800f7c0:	4b7f      	ldr	r3, [pc, #508]	; (800f9c0 <_printf_float+0x2ec>)
 800f7c2:	e7d1      	b.n	800f768 <_printf_float+0x94>
 800f7c4:	6863      	ldr	r3, [r4, #4]
 800f7c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f7ca:	9206      	str	r2, [sp, #24]
 800f7cc:	1c5a      	adds	r2, r3, #1
 800f7ce:	d13f      	bne.n	800f850 <_printf_float+0x17c>
 800f7d0:	2306      	movs	r3, #6
 800f7d2:	6063      	str	r3, [r4, #4]
 800f7d4:	9b05      	ldr	r3, [sp, #20]
 800f7d6:	6861      	ldr	r1, [r4, #4]
 800f7d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f7dc:	2300      	movs	r3, #0
 800f7de:	9303      	str	r3, [sp, #12]
 800f7e0:	ab0a      	add	r3, sp, #40	; 0x28
 800f7e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f7e6:	ab09      	add	r3, sp, #36	; 0x24
 800f7e8:	ec49 8b10 	vmov	d0, r8, r9
 800f7ec:	9300      	str	r3, [sp, #0]
 800f7ee:	6022      	str	r2, [r4, #0]
 800f7f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f7f4:	4628      	mov	r0, r5
 800f7f6:	f7ff fecd 	bl	800f594 <__cvt>
 800f7fa:	9b06      	ldr	r3, [sp, #24]
 800f7fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f7fe:	2b47      	cmp	r3, #71	; 0x47
 800f800:	4680      	mov	r8, r0
 800f802:	d108      	bne.n	800f816 <_printf_float+0x142>
 800f804:	1cc8      	adds	r0, r1, #3
 800f806:	db02      	blt.n	800f80e <_printf_float+0x13a>
 800f808:	6863      	ldr	r3, [r4, #4]
 800f80a:	4299      	cmp	r1, r3
 800f80c:	dd41      	ble.n	800f892 <_printf_float+0x1be>
 800f80e:	f1ab 0b02 	sub.w	fp, fp, #2
 800f812:	fa5f fb8b 	uxtb.w	fp, fp
 800f816:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f81a:	d820      	bhi.n	800f85e <_printf_float+0x18a>
 800f81c:	3901      	subs	r1, #1
 800f81e:	465a      	mov	r2, fp
 800f820:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f824:	9109      	str	r1, [sp, #36]	; 0x24
 800f826:	f7ff ff17 	bl	800f658 <__exponent>
 800f82a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f82c:	1813      	adds	r3, r2, r0
 800f82e:	2a01      	cmp	r2, #1
 800f830:	4681      	mov	r9, r0
 800f832:	6123      	str	r3, [r4, #16]
 800f834:	dc02      	bgt.n	800f83c <_printf_float+0x168>
 800f836:	6822      	ldr	r2, [r4, #0]
 800f838:	07d2      	lsls	r2, r2, #31
 800f83a:	d501      	bpl.n	800f840 <_printf_float+0x16c>
 800f83c:	3301      	adds	r3, #1
 800f83e:	6123      	str	r3, [r4, #16]
 800f840:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f844:	2b00      	cmp	r3, #0
 800f846:	d09c      	beq.n	800f782 <_printf_float+0xae>
 800f848:	232d      	movs	r3, #45	; 0x2d
 800f84a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f84e:	e798      	b.n	800f782 <_printf_float+0xae>
 800f850:	9a06      	ldr	r2, [sp, #24]
 800f852:	2a47      	cmp	r2, #71	; 0x47
 800f854:	d1be      	bne.n	800f7d4 <_printf_float+0x100>
 800f856:	2b00      	cmp	r3, #0
 800f858:	d1bc      	bne.n	800f7d4 <_printf_float+0x100>
 800f85a:	2301      	movs	r3, #1
 800f85c:	e7b9      	b.n	800f7d2 <_printf_float+0xfe>
 800f85e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f862:	d118      	bne.n	800f896 <_printf_float+0x1c2>
 800f864:	2900      	cmp	r1, #0
 800f866:	6863      	ldr	r3, [r4, #4]
 800f868:	dd0b      	ble.n	800f882 <_printf_float+0x1ae>
 800f86a:	6121      	str	r1, [r4, #16]
 800f86c:	b913      	cbnz	r3, 800f874 <_printf_float+0x1a0>
 800f86e:	6822      	ldr	r2, [r4, #0]
 800f870:	07d0      	lsls	r0, r2, #31
 800f872:	d502      	bpl.n	800f87a <_printf_float+0x1a6>
 800f874:	3301      	adds	r3, #1
 800f876:	440b      	add	r3, r1
 800f878:	6123      	str	r3, [r4, #16]
 800f87a:	65a1      	str	r1, [r4, #88]	; 0x58
 800f87c:	f04f 0900 	mov.w	r9, #0
 800f880:	e7de      	b.n	800f840 <_printf_float+0x16c>
 800f882:	b913      	cbnz	r3, 800f88a <_printf_float+0x1b6>
 800f884:	6822      	ldr	r2, [r4, #0]
 800f886:	07d2      	lsls	r2, r2, #31
 800f888:	d501      	bpl.n	800f88e <_printf_float+0x1ba>
 800f88a:	3302      	adds	r3, #2
 800f88c:	e7f4      	b.n	800f878 <_printf_float+0x1a4>
 800f88e:	2301      	movs	r3, #1
 800f890:	e7f2      	b.n	800f878 <_printf_float+0x1a4>
 800f892:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f898:	4299      	cmp	r1, r3
 800f89a:	db05      	blt.n	800f8a8 <_printf_float+0x1d4>
 800f89c:	6823      	ldr	r3, [r4, #0]
 800f89e:	6121      	str	r1, [r4, #16]
 800f8a0:	07d8      	lsls	r0, r3, #31
 800f8a2:	d5ea      	bpl.n	800f87a <_printf_float+0x1a6>
 800f8a4:	1c4b      	adds	r3, r1, #1
 800f8a6:	e7e7      	b.n	800f878 <_printf_float+0x1a4>
 800f8a8:	2900      	cmp	r1, #0
 800f8aa:	bfd4      	ite	le
 800f8ac:	f1c1 0202 	rsble	r2, r1, #2
 800f8b0:	2201      	movgt	r2, #1
 800f8b2:	4413      	add	r3, r2
 800f8b4:	e7e0      	b.n	800f878 <_printf_float+0x1a4>
 800f8b6:	6823      	ldr	r3, [r4, #0]
 800f8b8:	055a      	lsls	r2, r3, #21
 800f8ba:	d407      	bmi.n	800f8cc <_printf_float+0x1f8>
 800f8bc:	6923      	ldr	r3, [r4, #16]
 800f8be:	4642      	mov	r2, r8
 800f8c0:	4631      	mov	r1, r6
 800f8c2:	4628      	mov	r0, r5
 800f8c4:	47b8      	blx	r7
 800f8c6:	3001      	adds	r0, #1
 800f8c8:	d12c      	bne.n	800f924 <_printf_float+0x250>
 800f8ca:	e764      	b.n	800f796 <_printf_float+0xc2>
 800f8cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f8d0:	f240 80e0 	bls.w	800fa94 <_printf_float+0x3c0>
 800f8d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f8d8:	2200      	movs	r2, #0
 800f8da:	2300      	movs	r3, #0
 800f8dc:	f7f1 f8fc 	bl	8000ad8 <__aeabi_dcmpeq>
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	d034      	beq.n	800f94e <_printf_float+0x27a>
 800f8e4:	4a37      	ldr	r2, [pc, #220]	; (800f9c4 <_printf_float+0x2f0>)
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	4631      	mov	r1, r6
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	47b8      	blx	r7
 800f8ee:	3001      	adds	r0, #1
 800f8f0:	f43f af51 	beq.w	800f796 <_printf_float+0xc2>
 800f8f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	db02      	blt.n	800f902 <_printf_float+0x22e>
 800f8fc:	6823      	ldr	r3, [r4, #0]
 800f8fe:	07d8      	lsls	r0, r3, #31
 800f900:	d510      	bpl.n	800f924 <_printf_float+0x250>
 800f902:	ee18 3a10 	vmov	r3, s16
 800f906:	4652      	mov	r2, sl
 800f908:	4631      	mov	r1, r6
 800f90a:	4628      	mov	r0, r5
 800f90c:	47b8      	blx	r7
 800f90e:	3001      	adds	r0, #1
 800f910:	f43f af41 	beq.w	800f796 <_printf_float+0xc2>
 800f914:	f04f 0800 	mov.w	r8, #0
 800f918:	f104 091a 	add.w	r9, r4, #26
 800f91c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f91e:	3b01      	subs	r3, #1
 800f920:	4543      	cmp	r3, r8
 800f922:	dc09      	bgt.n	800f938 <_printf_float+0x264>
 800f924:	6823      	ldr	r3, [r4, #0]
 800f926:	079b      	lsls	r3, r3, #30
 800f928:	f100 8105 	bmi.w	800fb36 <_printf_float+0x462>
 800f92c:	68e0      	ldr	r0, [r4, #12]
 800f92e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f930:	4298      	cmp	r0, r3
 800f932:	bfb8      	it	lt
 800f934:	4618      	movlt	r0, r3
 800f936:	e730      	b.n	800f79a <_printf_float+0xc6>
 800f938:	2301      	movs	r3, #1
 800f93a:	464a      	mov	r2, r9
 800f93c:	4631      	mov	r1, r6
 800f93e:	4628      	mov	r0, r5
 800f940:	47b8      	blx	r7
 800f942:	3001      	adds	r0, #1
 800f944:	f43f af27 	beq.w	800f796 <_printf_float+0xc2>
 800f948:	f108 0801 	add.w	r8, r8, #1
 800f94c:	e7e6      	b.n	800f91c <_printf_float+0x248>
 800f94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f950:	2b00      	cmp	r3, #0
 800f952:	dc39      	bgt.n	800f9c8 <_printf_float+0x2f4>
 800f954:	4a1b      	ldr	r2, [pc, #108]	; (800f9c4 <_printf_float+0x2f0>)
 800f956:	2301      	movs	r3, #1
 800f958:	4631      	mov	r1, r6
 800f95a:	4628      	mov	r0, r5
 800f95c:	47b8      	blx	r7
 800f95e:	3001      	adds	r0, #1
 800f960:	f43f af19 	beq.w	800f796 <_printf_float+0xc2>
 800f964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f968:	4313      	orrs	r3, r2
 800f96a:	d102      	bne.n	800f972 <_printf_float+0x29e>
 800f96c:	6823      	ldr	r3, [r4, #0]
 800f96e:	07d9      	lsls	r1, r3, #31
 800f970:	d5d8      	bpl.n	800f924 <_printf_float+0x250>
 800f972:	ee18 3a10 	vmov	r3, s16
 800f976:	4652      	mov	r2, sl
 800f978:	4631      	mov	r1, r6
 800f97a:	4628      	mov	r0, r5
 800f97c:	47b8      	blx	r7
 800f97e:	3001      	adds	r0, #1
 800f980:	f43f af09 	beq.w	800f796 <_printf_float+0xc2>
 800f984:	f04f 0900 	mov.w	r9, #0
 800f988:	f104 0a1a 	add.w	sl, r4, #26
 800f98c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f98e:	425b      	negs	r3, r3
 800f990:	454b      	cmp	r3, r9
 800f992:	dc01      	bgt.n	800f998 <_printf_float+0x2c4>
 800f994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f996:	e792      	b.n	800f8be <_printf_float+0x1ea>
 800f998:	2301      	movs	r3, #1
 800f99a:	4652      	mov	r2, sl
 800f99c:	4631      	mov	r1, r6
 800f99e:	4628      	mov	r0, r5
 800f9a0:	47b8      	blx	r7
 800f9a2:	3001      	adds	r0, #1
 800f9a4:	f43f aef7 	beq.w	800f796 <_printf_float+0xc2>
 800f9a8:	f109 0901 	add.w	r9, r9, #1
 800f9ac:	e7ee      	b.n	800f98c <_printf_float+0x2b8>
 800f9ae:	bf00      	nop
 800f9b0:	7fefffff 	.word	0x7fefffff
 800f9b4:	0801411c 	.word	0x0801411c
 800f9b8:	08014120 	.word	0x08014120
 800f9bc:	08014128 	.word	0x08014128
 800f9c0:	08014124 	.word	0x08014124
 800f9c4:	0801412c 	.word	0x0801412c
 800f9c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	bfa8      	it	ge
 800f9d0:	461a      	movge	r2, r3
 800f9d2:	2a00      	cmp	r2, #0
 800f9d4:	4691      	mov	r9, r2
 800f9d6:	dc37      	bgt.n	800fa48 <_printf_float+0x374>
 800f9d8:	f04f 0b00 	mov.w	fp, #0
 800f9dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f9e0:	f104 021a 	add.w	r2, r4, #26
 800f9e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f9e6:	9305      	str	r3, [sp, #20]
 800f9e8:	eba3 0309 	sub.w	r3, r3, r9
 800f9ec:	455b      	cmp	r3, fp
 800f9ee:	dc33      	bgt.n	800fa58 <_printf_float+0x384>
 800f9f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	db3b      	blt.n	800fa70 <_printf_float+0x39c>
 800f9f8:	6823      	ldr	r3, [r4, #0]
 800f9fa:	07da      	lsls	r2, r3, #31
 800f9fc:	d438      	bmi.n	800fa70 <_printf_float+0x39c>
 800f9fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa00:	9b05      	ldr	r3, [sp, #20]
 800fa02:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fa04:	1ad3      	subs	r3, r2, r3
 800fa06:	eba2 0901 	sub.w	r9, r2, r1
 800fa0a:	4599      	cmp	r9, r3
 800fa0c:	bfa8      	it	ge
 800fa0e:	4699      	movge	r9, r3
 800fa10:	f1b9 0f00 	cmp.w	r9, #0
 800fa14:	dc35      	bgt.n	800fa82 <_printf_float+0x3ae>
 800fa16:	f04f 0800 	mov.w	r8, #0
 800fa1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fa1e:	f104 0a1a 	add.w	sl, r4, #26
 800fa22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa26:	1a9b      	subs	r3, r3, r2
 800fa28:	eba3 0309 	sub.w	r3, r3, r9
 800fa2c:	4543      	cmp	r3, r8
 800fa2e:	f77f af79 	ble.w	800f924 <_printf_float+0x250>
 800fa32:	2301      	movs	r3, #1
 800fa34:	4652      	mov	r2, sl
 800fa36:	4631      	mov	r1, r6
 800fa38:	4628      	mov	r0, r5
 800fa3a:	47b8      	blx	r7
 800fa3c:	3001      	adds	r0, #1
 800fa3e:	f43f aeaa 	beq.w	800f796 <_printf_float+0xc2>
 800fa42:	f108 0801 	add.w	r8, r8, #1
 800fa46:	e7ec      	b.n	800fa22 <_printf_float+0x34e>
 800fa48:	4613      	mov	r3, r2
 800fa4a:	4631      	mov	r1, r6
 800fa4c:	4642      	mov	r2, r8
 800fa4e:	4628      	mov	r0, r5
 800fa50:	47b8      	blx	r7
 800fa52:	3001      	adds	r0, #1
 800fa54:	d1c0      	bne.n	800f9d8 <_printf_float+0x304>
 800fa56:	e69e      	b.n	800f796 <_printf_float+0xc2>
 800fa58:	2301      	movs	r3, #1
 800fa5a:	4631      	mov	r1, r6
 800fa5c:	4628      	mov	r0, r5
 800fa5e:	9205      	str	r2, [sp, #20]
 800fa60:	47b8      	blx	r7
 800fa62:	3001      	adds	r0, #1
 800fa64:	f43f ae97 	beq.w	800f796 <_printf_float+0xc2>
 800fa68:	9a05      	ldr	r2, [sp, #20]
 800fa6a:	f10b 0b01 	add.w	fp, fp, #1
 800fa6e:	e7b9      	b.n	800f9e4 <_printf_float+0x310>
 800fa70:	ee18 3a10 	vmov	r3, s16
 800fa74:	4652      	mov	r2, sl
 800fa76:	4631      	mov	r1, r6
 800fa78:	4628      	mov	r0, r5
 800fa7a:	47b8      	blx	r7
 800fa7c:	3001      	adds	r0, #1
 800fa7e:	d1be      	bne.n	800f9fe <_printf_float+0x32a>
 800fa80:	e689      	b.n	800f796 <_printf_float+0xc2>
 800fa82:	9a05      	ldr	r2, [sp, #20]
 800fa84:	464b      	mov	r3, r9
 800fa86:	4442      	add	r2, r8
 800fa88:	4631      	mov	r1, r6
 800fa8a:	4628      	mov	r0, r5
 800fa8c:	47b8      	blx	r7
 800fa8e:	3001      	adds	r0, #1
 800fa90:	d1c1      	bne.n	800fa16 <_printf_float+0x342>
 800fa92:	e680      	b.n	800f796 <_printf_float+0xc2>
 800fa94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa96:	2a01      	cmp	r2, #1
 800fa98:	dc01      	bgt.n	800fa9e <_printf_float+0x3ca>
 800fa9a:	07db      	lsls	r3, r3, #31
 800fa9c:	d538      	bpl.n	800fb10 <_printf_float+0x43c>
 800fa9e:	2301      	movs	r3, #1
 800faa0:	4642      	mov	r2, r8
 800faa2:	4631      	mov	r1, r6
 800faa4:	4628      	mov	r0, r5
 800faa6:	47b8      	blx	r7
 800faa8:	3001      	adds	r0, #1
 800faaa:	f43f ae74 	beq.w	800f796 <_printf_float+0xc2>
 800faae:	ee18 3a10 	vmov	r3, s16
 800fab2:	4652      	mov	r2, sl
 800fab4:	4631      	mov	r1, r6
 800fab6:	4628      	mov	r0, r5
 800fab8:	47b8      	blx	r7
 800faba:	3001      	adds	r0, #1
 800fabc:	f43f ae6b 	beq.w	800f796 <_printf_float+0xc2>
 800fac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fac4:	2200      	movs	r2, #0
 800fac6:	2300      	movs	r3, #0
 800fac8:	f7f1 f806 	bl	8000ad8 <__aeabi_dcmpeq>
 800facc:	b9d8      	cbnz	r0, 800fb06 <_printf_float+0x432>
 800face:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fad0:	f108 0201 	add.w	r2, r8, #1
 800fad4:	3b01      	subs	r3, #1
 800fad6:	4631      	mov	r1, r6
 800fad8:	4628      	mov	r0, r5
 800fada:	47b8      	blx	r7
 800fadc:	3001      	adds	r0, #1
 800fade:	d10e      	bne.n	800fafe <_printf_float+0x42a>
 800fae0:	e659      	b.n	800f796 <_printf_float+0xc2>
 800fae2:	2301      	movs	r3, #1
 800fae4:	4652      	mov	r2, sl
 800fae6:	4631      	mov	r1, r6
 800fae8:	4628      	mov	r0, r5
 800faea:	47b8      	blx	r7
 800faec:	3001      	adds	r0, #1
 800faee:	f43f ae52 	beq.w	800f796 <_printf_float+0xc2>
 800faf2:	f108 0801 	add.w	r8, r8, #1
 800faf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faf8:	3b01      	subs	r3, #1
 800fafa:	4543      	cmp	r3, r8
 800fafc:	dcf1      	bgt.n	800fae2 <_printf_float+0x40e>
 800fafe:	464b      	mov	r3, r9
 800fb00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fb04:	e6dc      	b.n	800f8c0 <_printf_float+0x1ec>
 800fb06:	f04f 0800 	mov.w	r8, #0
 800fb0a:	f104 0a1a 	add.w	sl, r4, #26
 800fb0e:	e7f2      	b.n	800faf6 <_printf_float+0x422>
 800fb10:	2301      	movs	r3, #1
 800fb12:	4642      	mov	r2, r8
 800fb14:	e7df      	b.n	800fad6 <_printf_float+0x402>
 800fb16:	2301      	movs	r3, #1
 800fb18:	464a      	mov	r2, r9
 800fb1a:	4631      	mov	r1, r6
 800fb1c:	4628      	mov	r0, r5
 800fb1e:	47b8      	blx	r7
 800fb20:	3001      	adds	r0, #1
 800fb22:	f43f ae38 	beq.w	800f796 <_printf_float+0xc2>
 800fb26:	f108 0801 	add.w	r8, r8, #1
 800fb2a:	68e3      	ldr	r3, [r4, #12]
 800fb2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb2e:	1a5b      	subs	r3, r3, r1
 800fb30:	4543      	cmp	r3, r8
 800fb32:	dcf0      	bgt.n	800fb16 <_printf_float+0x442>
 800fb34:	e6fa      	b.n	800f92c <_printf_float+0x258>
 800fb36:	f04f 0800 	mov.w	r8, #0
 800fb3a:	f104 0919 	add.w	r9, r4, #25
 800fb3e:	e7f4      	b.n	800fb2a <_printf_float+0x456>

0800fb40 <_printf_common>:
 800fb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb44:	4616      	mov	r6, r2
 800fb46:	4699      	mov	r9, r3
 800fb48:	688a      	ldr	r2, [r1, #8]
 800fb4a:	690b      	ldr	r3, [r1, #16]
 800fb4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb50:	4293      	cmp	r3, r2
 800fb52:	bfb8      	it	lt
 800fb54:	4613      	movlt	r3, r2
 800fb56:	6033      	str	r3, [r6, #0]
 800fb58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb5c:	4607      	mov	r7, r0
 800fb5e:	460c      	mov	r4, r1
 800fb60:	b10a      	cbz	r2, 800fb66 <_printf_common+0x26>
 800fb62:	3301      	adds	r3, #1
 800fb64:	6033      	str	r3, [r6, #0]
 800fb66:	6823      	ldr	r3, [r4, #0]
 800fb68:	0699      	lsls	r1, r3, #26
 800fb6a:	bf42      	ittt	mi
 800fb6c:	6833      	ldrmi	r3, [r6, #0]
 800fb6e:	3302      	addmi	r3, #2
 800fb70:	6033      	strmi	r3, [r6, #0]
 800fb72:	6825      	ldr	r5, [r4, #0]
 800fb74:	f015 0506 	ands.w	r5, r5, #6
 800fb78:	d106      	bne.n	800fb88 <_printf_common+0x48>
 800fb7a:	f104 0a19 	add.w	sl, r4, #25
 800fb7e:	68e3      	ldr	r3, [r4, #12]
 800fb80:	6832      	ldr	r2, [r6, #0]
 800fb82:	1a9b      	subs	r3, r3, r2
 800fb84:	42ab      	cmp	r3, r5
 800fb86:	dc26      	bgt.n	800fbd6 <_printf_common+0x96>
 800fb88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb8c:	1e13      	subs	r3, r2, #0
 800fb8e:	6822      	ldr	r2, [r4, #0]
 800fb90:	bf18      	it	ne
 800fb92:	2301      	movne	r3, #1
 800fb94:	0692      	lsls	r2, r2, #26
 800fb96:	d42b      	bmi.n	800fbf0 <_printf_common+0xb0>
 800fb98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb9c:	4649      	mov	r1, r9
 800fb9e:	4638      	mov	r0, r7
 800fba0:	47c0      	blx	r8
 800fba2:	3001      	adds	r0, #1
 800fba4:	d01e      	beq.n	800fbe4 <_printf_common+0xa4>
 800fba6:	6823      	ldr	r3, [r4, #0]
 800fba8:	68e5      	ldr	r5, [r4, #12]
 800fbaa:	6832      	ldr	r2, [r6, #0]
 800fbac:	f003 0306 	and.w	r3, r3, #6
 800fbb0:	2b04      	cmp	r3, #4
 800fbb2:	bf08      	it	eq
 800fbb4:	1aad      	subeq	r5, r5, r2
 800fbb6:	68a3      	ldr	r3, [r4, #8]
 800fbb8:	6922      	ldr	r2, [r4, #16]
 800fbba:	bf0c      	ite	eq
 800fbbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbc0:	2500      	movne	r5, #0
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	bfc4      	itt	gt
 800fbc6:	1a9b      	subgt	r3, r3, r2
 800fbc8:	18ed      	addgt	r5, r5, r3
 800fbca:	2600      	movs	r6, #0
 800fbcc:	341a      	adds	r4, #26
 800fbce:	42b5      	cmp	r5, r6
 800fbd0:	d11a      	bne.n	800fc08 <_printf_common+0xc8>
 800fbd2:	2000      	movs	r0, #0
 800fbd4:	e008      	b.n	800fbe8 <_printf_common+0xa8>
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	4652      	mov	r2, sl
 800fbda:	4649      	mov	r1, r9
 800fbdc:	4638      	mov	r0, r7
 800fbde:	47c0      	blx	r8
 800fbe0:	3001      	adds	r0, #1
 800fbe2:	d103      	bne.n	800fbec <_printf_common+0xac>
 800fbe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbec:	3501      	adds	r5, #1
 800fbee:	e7c6      	b.n	800fb7e <_printf_common+0x3e>
 800fbf0:	18e1      	adds	r1, r4, r3
 800fbf2:	1c5a      	adds	r2, r3, #1
 800fbf4:	2030      	movs	r0, #48	; 0x30
 800fbf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fbfa:	4422      	add	r2, r4
 800fbfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc04:	3302      	adds	r3, #2
 800fc06:	e7c7      	b.n	800fb98 <_printf_common+0x58>
 800fc08:	2301      	movs	r3, #1
 800fc0a:	4622      	mov	r2, r4
 800fc0c:	4649      	mov	r1, r9
 800fc0e:	4638      	mov	r0, r7
 800fc10:	47c0      	blx	r8
 800fc12:	3001      	adds	r0, #1
 800fc14:	d0e6      	beq.n	800fbe4 <_printf_common+0xa4>
 800fc16:	3601      	adds	r6, #1
 800fc18:	e7d9      	b.n	800fbce <_printf_common+0x8e>
	...

0800fc1c <_printf_i>:
 800fc1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc20:	460c      	mov	r4, r1
 800fc22:	4691      	mov	r9, r2
 800fc24:	7e27      	ldrb	r7, [r4, #24]
 800fc26:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fc28:	2f78      	cmp	r7, #120	; 0x78
 800fc2a:	4680      	mov	r8, r0
 800fc2c:	469a      	mov	sl, r3
 800fc2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fc32:	d807      	bhi.n	800fc44 <_printf_i+0x28>
 800fc34:	2f62      	cmp	r7, #98	; 0x62
 800fc36:	d80a      	bhi.n	800fc4e <_printf_i+0x32>
 800fc38:	2f00      	cmp	r7, #0
 800fc3a:	f000 80d8 	beq.w	800fdee <_printf_i+0x1d2>
 800fc3e:	2f58      	cmp	r7, #88	; 0x58
 800fc40:	f000 80a3 	beq.w	800fd8a <_printf_i+0x16e>
 800fc44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fc48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc4c:	e03a      	b.n	800fcc4 <_printf_i+0xa8>
 800fc4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc52:	2b15      	cmp	r3, #21
 800fc54:	d8f6      	bhi.n	800fc44 <_printf_i+0x28>
 800fc56:	a001      	add	r0, pc, #4	; (adr r0, 800fc5c <_printf_i+0x40>)
 800fc58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fc5c:	0800fcb5 	.word	0x0800fcb5
 800fc60:	0800fcc9 	.word	0x0800fcc9
 800fc64:	0800fc45 	.word	0x0800fc45
 800fc68:	0800fc45 	.word	0x0800fc45
 800fc6c:	0800fc45 	.word	0x0800fc45
 800fc70:	0800fc45 	.word	0x0800fc45
 800fc74:	0800fcc9 	.word	0x0800fcc9
 800fc78:	0800fc45 	.word	0x0800fc45
 800fc7c:	0800fc45 	.word	0x0800fc45
 800fc80:	0800fc45 	.word	0x0800fc45
 800fc84:	0800fc45 	.word	0x0800fc45
 800fc88:	0800fdd5 	.word	0x0800fdd5
 800fc8c:	0800fcf9 	.word	0x0800fcf9
 800fc90:	0800fdb7 	.word	0x0800fdb7
 800fc94:	0800fc45 	.word	0x0800fc45
 800fc98:	0800fc45 	.word	0x0800fc45
 800fc9c:	0800fdf7 	.word	0x0800fdf7
 800fca0:	0800fc45 	.word	0x0800fc45
 800fca4:	0800fcf9 	.word	0x0800fcf9
 800fca8:	0800fc45 	.word	0x0800fc45
 800fcac:	0800fc45 	.word	0x0800fc45
 800fcb0:	0800fdbf 	.word	0x0800fdbf
 800fcb4:	680b      	ldr	r3, [r1, #0]
 800fcb6:	1d1a      	adds	r2, r3, #4
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	600a      	str	r2, [r1, #0]
 800fcbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fcc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	e0a3      	b.n	800fe10 <_printf_i+0x1f4>
 800fcc8:	6825      	ldr	r5, [r4, #0]
 800fcca:	6808      	ldr	r0, [r1, #0]
 800fccc:	062e      	lsls	r6, r5, #24
 800fcce:	f100 0304 	add.w	r3, r0, #4
 800fcd2:	d50a      	bpl.n	800fcea <_printf_i+0xce>
 800fcd4:	6805      	ldr	r5, [r0, #0]
 800fcd6:	600b      	str	r3, [r1, #0]
 800fcd8:	2d00      	cmp	r5, #0
 800fcda:	da03      	bge.n	800fce4 <_printf_i+0xc8>
 800fcdc:	232d      	movs	r3, #45	; 0x2d
 800fcde:	426d      	negs	r5, r5
 800fce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fce4:	485e      	ldr	r0, [pc, #376]	; (800fe60 <_printf_i+0x244>)
 800fce6:	230a      	movs	r3, #10
 800fce8:	e019      	b.n	800fd1e <_printf_i+0x102>
 800fcea:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fcee:	6805      	ldr	r5, [r0, #0]
 800fcf0:	600b      	str	r3, [r1, #0]
 800fcf2:	bf18      	it	ne
 800fcf4:	b22d      	sxthne	r5, r5
 800fcf6:	e7ef      	b.n	800fcd8 <_printf_i+0xbc>
 800fcf8:	680b      	ldr	r3, [r1, #0]
 800fcfa:	6825      	ldr	r5, [r4, #0]
 800fcfc:	1d18      	adds	r0, r3, #4
 800fcfe:	6008      	str	r0, [r1, #0]
 800fd00:	0628      	lsls	r0, r5, #24
 800fd02:	d501      	bpl.n	800fd08 <_printf_i+0xec>
 800fd04:	681d      	ldr	r5, [r3, #0]
 800fd06:	e002      	b.n	800fd0e <_printf_i+0xf2>
 800fd08:	0669      	lsls	r1, r5, #25
 800fd0a:	d5fb      	bpl.n	800fd04 <_printf_i+0xe8>
 800fd0c:	881d      	ldrh	r5, [r3, #0]
 800fd0e:	4854      	ldr	r0, [pc, #336]	; (800fe60 <_printf_i+0x244>)
 800fd10:	2f6f      	cmp	r7, #111	; 0x6f
 800fd12:	bf0c      	ite	eq
 800fd14:	2308      	moveq	r3, #8
 800fd16:	230a      	movne	r3, #10
 800fd18:	2100      	movs	r1, #0
 800fd1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd1e:	6866      	ldr	r6, [r4, #4]
 800fd20:	60a6      	str	r6, [r4, #8]
 800fd22:	2e00      	cmp	r6, #0
 800fd24:	bfa2      	ittt	ge
 800fd26:	6821      	ldrge	r1, [r4, #0]
 800fd28:	f021 0104 	bicge.w	r1, r1, #4
 800fd2c:	6021      	strge	r1, [r4, #0]
 800fd2e:	b90d      	cbnz	r5, 800fd34 <_printf_i+0x118>
 800fd30:	2e00      	cmp	r6, #0
 800fd32:	d04d      	beq.n	800fdd0 <_printf_i+0x1b4>
 800fd34:	4616      	mov	r6, r2
 800fd36:	fbb5 f1f3 	udiv	r1, r5, r3
 800fd3a:	fb03 5711 	mls	r7, r3, r1, r5
 800fd3e:	5dc7      	ldrb	r7, [r0, r7]
 800fd40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fd44:	462f      	mov	r7, r5
 800fd46:	42bb      	cmp	r3, r7
 800fd48:	460d      	mov	r5, r1
 800fd4a:	d9f4      	bls.n	800fd36 <_printf_i+0x11a>
 800fd4c:	2b08      	cmp	r3, #8
 800fd4e:	d10b      	bne.n	800fd68 <_printf_i+0x14c>
 800fd50:	6823      	ldr	r3, [r4, #0]
 800fd52:	07df      	lsls	r7, r3, #31
 800fd54:	d508      	bpl.n	800fd68 <_printf_i+0x14c>
 800fd56:	6923      	ldr	r3, [r4, #16]
 800fd58:	6861      	ldr	r1, [r4, #4]
 800fd5a:	4299      	cmp	r1, r3
 800fd5c:	bfde      	ittt	le
 800fd5e:	2330      	movle	r3, #48	; 0x30
 800fd60:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fd64:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800fd68:	1b92      	subs	r2, r2, r6
 800fd6a:	6122      	str	r2, [r4, #16]
 800fd6c:	f8cd a000 	str.w	sl, [sp]
 800fd70:	464b      	mov	r3, r9
 800fd72:	aa03      	add	r2, sp, #12
 800fd74:	4621      	mov	r1, r4
 800fd76:	4640      	mov	r0, r8
 800fd78:	f7ff fee2 	bl	800fb40 <_printf_common>
 800fd7c:	3001      	adds	r0, #1
 800fd7e:	d14c      	bne.n	800fe1a <_printf_i+0x1fe>
 800fd80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd84:	b004      	add	sp, #16
 800fd86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd8a:	4835      	ldr	r0, [pc, #212]	; (800fe60 <_printf_i+0x244>)
 800fd8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fd90:	6823      	ldr	r3, [r4, #0]
 800fd92:	680e      	ldr	r6, [r1, #0]
 800fd94:	061f      	lsls	r7, r3, #24
 800fd96:	f856 5b04 	ldr.w	r5, [r6], #4
 800fd9a:	600e      	str	r6, [r1, #0]
 800fd9c:	d514      	bpl.n	800fdc8 <_printf_i+0x1ac>
 800fd9e:	07d9      	lsls	r1, r3, #31
 800fda0:	bf44      	itt	mi
 800fda2:	f043 0320 	orrmi.w	r3, r3, #32
 800fda6:	6023      	strmi	r3, [r4, #0]
 800fda8:	b91d      	cbnz	r5, 800fdb2 <_printf_i+0x196>
 800fdaa:	6823      	ldr	r3, [r4, #0]
 800fdac:	f023 0320 	bic.w	r3, r3, #32
 800fdb0:	6023      	str	r3, [r4, #0]
 800fdb2:	2310      	movs	r3, #16
 800fdb4:	e7b0      	b.n	800fd18 <_printf_i+0xfc>
 800fdb6:	6823      	ldr	r3, [r4, #0]
 800fdb8:	f043 0320 	orr.w	r3, r3, #32
 800fdbc:	6023      	str	r3, [r4, #0]
 800fdbe:	2378      	movs	r3, #120	; 0x78
 800fdc0:	4828      	ldr	r0, [pc, #160]	; (800fe64 <_printf_i+0x248>)
 800fdc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fdc6:	e7e3      	b.n	800fd90 <_printf_i+0x174>
 800fdc8:	065e      	lsls	r6, r3, #25
 800fdca:	bf48      	it	mi
 800fdcc:	b2ad      	uxthmi	r5, r5
 800fdce:	e7e6      	b.n	800fd9e <_printf_i+0x182>
 800fdd0:	4616      	mov	r6, r2
 800fdd2:	e7bb      	b.n	800fd4c <_printf_i+0x130>
 800fdd4:	680b      	ldr	r3, [r1, #0]
 800fdd6:	6826      	ldr	r6, [r4, #0]
 800fdd8:	6960      	ldr	r0, [r4, #20]
 800fdda:	1d1d      	adds	r5, r3, #4
 800fddc:	600d      	str	r5, [r1, #0]
 800fdde:	0635      	lsls	r5, r6, #24
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	d501      	bpl.n	800fde8 <_printf_i+0x1cc>
 800fde4:	6018      	str	r0, [r3, #0]
 800fde6:	e002      	b.n	800fdee <_printf_i+0x1d2>
 800fde8:	0671      	lsls	r1, r6, #25
 800fdea:	d5fb      	bpl.n	800fde4 <_printf_i+0x1c8>
 800fdec:	8018      	strh	r0, [r3, #0]
 800fdee:	2300      	movs	r3, #0
 800fdf0:	6123      	str	r3, [r4, #16]
 800fdf2:	4616      	mov	r6, r2
 800fdf4:	e7ba      	b.n	800fd6c <_printf_i+0x150>
 800fdf6:	680b      	ldr	r3, [r1, #0]
 800fdf8:	1d1a      	adds	r2, r3, #4
 800fdfa:	600a      	str	r2, [r1, #0]
 800fdfc:	681e      	ldr	r6, [r3, #0]
 800fdfe:	6862      	ldr	r2, [r4, #4]
 800fe00:	2100      	movs	r1, #0
 800fe02:	4630      	mov	r0, r6
 800fe04:	f7f0 f9f4 	bl	80001f0 <memchr>
 800fe08:	b108      	cbz	r0, 800fe0e <_printf_i+0x1f2>
 800fe0a:	1b80      	subs	r0, r0, r6
 800fe0c:	6060      	str	r0, [r4, #4]
 800fe0e:	6863      	ldr	r3, [r4, #4]
 800fe10:	6123      	str	r3, [r4, #16]
 800fe12:	2300      	movs	r3, #0
 800fe14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe18:	e7a8      	b.n	800fd6c <_printf_i+0x150>
 800fe1a:	6923      	ldr	r3, [r4, #16]
 800fe1c:	4632      	mov	r2, r6
 800fe1e:	4649      	mov	r1, r9
 800fe20:	4640      	mov	r0, r8
 800fe22:	47d0      	blx	sl
 800fe24:	3001      	adds	r0, #1
 800fe26:	d0ab      	beq.n	800fd80 <_printf_i+0x164>
 800fe28:	6823      	ldr	r3, [r4, #0]
 800fe2a:	079b      	lsls	r3, r3, #30
 800fe2c:	d413      	bmi.n	800fe56 <_printf_i+0x23a>
 800fe2e:	68e0      	ldr	r0, [r4, #12]
 800fe30:	9b03      	ldr	r3, [sp, #12]
 800fe32:	4298      	cmp	r0, r3
 800fe34:	bfb8      	it	lt
 800fe36:	4618      	movlt	r0, r3
 800fe38:	e7a4      	b.n	800fd84 <_printf_i+0x168>
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	4632      	mov	r2, r6
 800fe3e:	4649      	mov	r1, r9
 800fe40:	4640      	mov	r0, r8
 800fe42:	47d0      	blx	sl
 800fe44:	3001      	adds	r0, #1
 800fe46:	d09b      	beq.n	800fd80 <_printf_i+0x164>
 800fe48:	3501      	adds	r5, #1
 800fe4a:	68e3      	ldr	r3, [r4, #12]
 800fe4c:	9903      	ldr	r1, [sp, #12]
 800fe4e:	1a5b      	subs	r3, r3, r1
 800fe50:	42ab      	cmp	r3, r5
 800fe52:	dcf2      	bgt.n	800fe3a <_printf_i+0x21e>
 800fe54:	e7eb      	b.n	800fe2e <_printf_i+0x212>
 800fe56:	2500      	movs	r5, #0
 800fe58:	f104 0619 	add.w	r6, r4, #25
 800fe5c:	e7f5      	b.n	800fe4a <_printf_i+0x22e>
 800fe5e:	bf00      	nop
 800fe60:	0801412e 	.word	0x0801412e
 800fe64:	0801413f 	.word	0x0801413f

0800fe68 <iprintf>:
 800fe68:	b40f      	push	{r0, r1, r2, r3}
 800fe6a:	4b0a      	ldr	r3, [pc, #40]	; (800fe94 <iprintf+0x2c>)
 800fe6c:	b513      	push	{r0, r1, r4, lr}
 800fe6e:	681c      	ldr	r4, [r3, #0]
 800fe70:	b124      	cbz	r4, 800fe7c <iprintf+0x14>
 800fe72:	69a3      	ldr	r3, [r4, #24]
 800fe74:	b913      	cbnz	r3, 800fe7c <iprintf+0x14>
 800fe76:	4620      	mov	r0, r4
 800fe78:	f001 f964 	bl	8011144 <__sinit>
 800fe7c:	ab05      	add	r3, sp, #20
 800fe7e:	9a04      	ldr	r2, [sp, #16]
 800fe80:	68a1      	ldr	r1, [r4, #8]
 800fe82:	9301      	str	r3, [sp, #4]
 800fe84:	4620      	mov	r0, r4
 800fe86:	f001 fed1 	bl	8011c2c <_vfiprintf_r>
 800fe8a:	b002      	add	sp, #8
 800fe8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe90:	b004      	add	sp, #16
 800fe92:	4770      	bx	lr
 800fe94:	2000001c 	.word	0x2000001c

0800fe98 <_puts_r>:
 800fe98:	b570      	push	{r4, r5, r6, lr}
 800fe9a:	460e      	mov	r6, r1
 800fe9c:	4605      	mov	r5, r0
 800fe9e:	b118      	cbz	r0, 800fea8 <_puts_r+0x10>
 800fea0:	6983      	ldr	r3, [r0, #24]
 800fea2:	b90b      	cbnz	r3, 800fea8 <_puts_r+0x10>
 800fea4:	f001 f94e 	bl	8011144 <__sinit>
 800fea8:	69ab      	ldr	r3, [r5, #24]
 800feaa:	68ac      	ldr	r4, [r5, #8]
 800feac:	b913      	cbnz	r3, 800feb4 <_puts_r+0x1c>
 800feae:	4628      	mov	r0, r5
 800feb0:	f001 f948 	bl	8011144 <__sinit>
 800feb4:	4b2c      	ldr	r3, [pc, #176]	; (800ff68 <_puts_r+0xd0>)
 800feb6:	429c      	cmp	r4, r3
 800feb8:	d120      	bne.n	800fefc <_puts_r+0x64>
 800feba:	686c      	ldr	r4, [r5, #4]
 800febc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800febe:	07db      	lsls	r3, r3, #31
 800fec0:	d405      	bmi.n	800fece <_puts_r+0x36>
 800fec2:	89a3      	ldrh	r3, [r4, #12]
 800fec4:	0598      	lsls	r0, r3, #22
 800fec6:	d402      	bmi.n	800fece <_puts_r+0x36>
 800fec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800feca:	f001 f9de 	bl	801128a <__retarget_lock_acquire_recursive>
 800fece:	89a3      	ldrh	r3, [r4, #12]
 800fed0:	0719      	lsls	r1, r3, #28
 800fed2:	d51d      	bpl.n	800ff10 <_puts_r+0x78>
 800fed4:	6923      	ldr	r3, [r4, #16]
 800fed6:	b1db      	cbz	r3, 800ff10 <_puts_r+0x78>
 800fed8:	3e01      	subs	r6, #1
 800feda:	68a3      	ldr	r3, [r4, #8]
 800fedc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fee0:	3b01      	subs	r3, #1
 800fee2:	60a3      	str	r3, [r4, #8]
 800fee4:	bb39      	cbnz	r1, 800ff36 <_puts_r+0x9e>
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	da38      	bge.n	800ff5c <_puts_r+0xc4>
 800feea:	4622      	mov	r2, r4
 800feec:	210a      	movs	r1, #10
 800feee:	4628      	mov	r0, r5
 800fef0:	f000 f8d6 	bl	80100a0 <__swbuf_r>
 800fef4:	3001      	adds	r0, #1
 800fef6:	d011      	beq.n	800ff1c <_puts_r+0x84>
 800fef8:	250a      	movs	r5, #10
 800fefa:	e011      	b.n	800ff20 <_puts_r+0x88>
 800fefc:	4b1b      	ldr	r3, [pc, #108]	; (800ff6c <_puts_r+0xd4>)
 800fefe:	429c      	cmp	r4, r3
 800ff00:	d101      	bne.n	800ff06 <_puts_r+0x6e>
 800ff02:	68ac      	ldr	r4, [r5, #8]
 800ff04:	e7da      	b.n	800febc <_puts_r+0x24>
 800ff06:	4b1a      	ldr	r3, [pc, #104]	; (800ff70 <_puts_r+0xd8>)
 800ff08:	429c      	cmp	r4, r3
 800ff0a:	bf08      	it	eq
 800ff0c:	68ec      	ldreq	r4, [r5, #12]
 800ff0e:	e7d5      	b.n	800febc <_puts_r+0x24>
 800ff10:	4621      	mov	r1, r4
 800ff12:	4628      	mov	r0, r5
 800ff14:	f000 f916 	bl	8010144 <__swsetup_r>
 800ff18:	2800      	cmp	r0, #0
 800ff1a:	d0dd      	beq.n	800fed8 <_puts_r+0x40>
 800ff1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ff20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff22:	07da      	lsls	r2, r3, #31
 800ff24:	d405      	bmi.n	800ff32 <_puts_r+0x9a>
 800ff26:	89a3      	ldrh	r3, [r4, #12]
 800ff28:	059b      	lsls	r3, r3, #22
 800ff2a:	d402      	bmi.n	800ff32 <_puts_r+0x9a>
 800ff2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff2e:	f001 f9ad 	bl	801128c <__retarget_lock_release_recursive>
 800ff32:	4628      	mov	r0, r5
 800ff34:	bd70      	pop	{r4, r5, r6, pc}
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	da04      	bge.n	800ff44 <_puts_r+0xac>
 800ff3a:	69a2      	ldr	r2, [r4, #24]
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	dc06      	bgt.n	800ff4e <_puts_r+0xb6>
 800ff40:	290a      	cmp	r1, #10
 800ff42:	d004      	beq.n	800ff4e <_puts_r+0xb6>
 800ff44:	6823      	ldr	r3, [r4, #0]
 800ff46:	1c5a      	adds	r2, r3, #1
 800ff48:	6022      	str	r2, [r4, #0]
 800ff4a:	7019      	strb	r1, [r3, #0]
 800ff4c:	e7c5      	b.n	800feda <_puts_r+0x42>
 800ff4e:	4622      	mov	r2, r4
 800ff50:	4628      	mov	r0, r5
 800ff52:	f000 f8a5 	bl	80100a0 <__swbuf_r>
 800ff56:	3001      	adds	r0, #1
 800ff58:	d1bf      	bne.n	800feda <_puts_r+0x42>
 800ff5a:	e7df      	b.n	800ff1c <_puts_r+0x84>
 800ff5c:	6823      	ldr	r3, [r4, #0]
 800ff5e:	250a      	movs	r5, #10
 800ff60:	1c5a      	adds	r2, r3, #1
 800ff62:	6022      	str	r2, [r4, #0]
 800ff64:	701d      	strb	r5, [r3, #0]
 800ff66:	e7db      	b.n	800ff20 <_puts_r+0x88>
 800ff68:	08014308 	.word	0x08014308
 800ff6c:	08014328 	.word	0x08014328
 800ff70:	080142e8 	.word	0x080142e8

0800ff74 <puts>:
 800ff74:	4b02      	ldr	r3, [pc, #8]	; (800ff80 <puts+0xc>)
 800ff76:	4601      	mov	r1, r0
 800ff78:	6818      	ldr	r0, [r3, #0]
 800ff7a:	f7ff bf8d 	b.w	800fe98 <_puts_r>
 800ff7e:	bf00      	nop
 800ff80:	2000001c 	.word	0x2000001c

0800ff84 <_strtol_l.isra.0>:
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff8a:	d001      	beq.n	800ff90 <_strtol_l.isra.0+0xc>
 800ff8c:	2b24      	cmp	r3, #36	; 0x24
 800ff8e:	d906      	bls.n	800ff9e <_strtol_l.isra.0+0x1a>
 800ff90:	f7ff fac0 	bl	800f514 <__errno>
 800ff94:	2316      	movs	r3, #22
 800ff96:	6003      	str	r3, [r0, #0]
 800ff98:	2000      	movs	r0, #0
 800ff9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff9e:	4f3a      	ldr	r7, [pc, #232]	; (8010088 <_strtol_l.isra.0+0x104>)
 800ffa0:	468e      	mov	lr, r1
 800ffa2:	4676      	mov	r6, lr
 800ffa4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ffa8:	5de5      	ldrb	r5, [r4, r7]
 800ffaa:	f015 0508 	ands.w	r5, r5, #8
 800ffae:	d1f8      	bne.n	800ffa2 <_strtol_l.isra.0+0x1e>
 800ffb0:	2c2d      	cmp	r4, #45	; 0x2d
 800ffb2:	d134      	bne.n	801001e <_strtol_l.isra.0+0x9a>
 800ffb4:	f89e 4000 	ldrb.w	r4, [lr]
 800ffb8:	f04f 0801 	mov.w	r8, #1
 800ffbc:	f106 0e02 	add.w	lr, r6, #2
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d05c      	beq.n	801007e <_strtol_l.isra.0+0xfa>
 800ffc4:	2b10      	cmp	r3, #16
 800ffc6:	d10c      	bne.n	800ffe2 <_strtol_l.isra.0+0x5e>
 800ffc8:	2c30      	cmp	r4, #48	; 0x30
 800ffca:	d10a      	bne.n	800ffe2 <_strtol_l.isra.0+0x5e>
 800ffcc:	f89e 4000 	ldrb.w	r4, [lr]
 800ffd0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ffd4:	2c58      	cmp	r4, #88	; 0x58
 800ffd6:	d14d      	bne.n	8010074 <_strtol_l.isra.0+0xf0>
 800ffd8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ffdc:	2310      	movs	r3, #16
 800ffde:	f10e 0e02 	add.w	lr, lr, #2
 800ffe2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ffe6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800ffea:	2600      	movs	r6, #0
 800ffec:	fbbc f9f3 	udiv	r9, ip, r3
 800fff0:	4635      	mov	r5, r6
 800fff2:	fb03 ca19 	mls	sl, r3, r9, ip
 800fff6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800fffa:	2f09      	cmp	r7, #9
 800fffc:	d818      	bhi.n	8010030 <_strtol_l.isra.0+0xac>
 800fffe:	463c      	mov	r4, r7
 8010000:	42a3      	cmp	r3, r4
 8010002:	dd24      	ble.n	801004e <_strtol_l.isra.0+0xca>
 8010004:	2e00      	cmp	r6, #0
 8010006:	db1f      	blt.n	8010048 <_strtol_l.isra.0+0xc4>
 8010008:	45a9      	cmp	r9, r5
 801000a:	d31d      	bcc.n	8010048 <_strtol_l.isra.0+0xc4>
 801000c:	d101      	bne.n	8010012 <_strtol_l.isra.0+0x8e>
 801000e:	45a2      	cmp	sl, r4
 8010010:	db1a      	blt.n	8010048 <_strtol_l.isra.0+0xc4>
 8010012:	fb05 4503 	mla	r5, r5, r3, r4
 8010016:	2601      	movs	r6, #1
 8010018:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801001c:	e7eb      	b.n	800fff6 <_strtol_l.isra.0+0x72>
 801001e:	2c2b      	cmp	r4, #43	; 0x2b
 8010020:	bf08      	it	eq
 8010022:	f89e 4000 	ldrbeq.w	r4, [lr]
 8010026:	46a8      	mov	r8, r5
 8010028:	bf08      	it	eq
 801002a:	f106 0e02 	addeq.w	lr, r6, #2
 801002e:	e7c7      	b.n	800ffc0 <_strtol_l.isra.0+0x3c>
 8010030:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8010034:	2f19      	cmp	r7, #25
 8010036:	d801      	bhi.n	801003c <_strtol_l.isra.0+0xb8>
 8010038:	3c37      	subs	r4, #55	; 0x37
 801003a:	e7e1      	b.n	8010000 <_strtol_l.isra.0+0x7c>
 801003c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8010040:	2f19      	cmp	r7, #25
 8010042:	d804      	bhi.n	801004e <_strtol_l.isra.0+0xca>
 8010044:	3c57      	subs	r4, #87	; 0x57
 8010046:	e7db      	b.n	8010000 <_strtol_l.isra.0+0x7c>
 8010048:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801004c:	e7e4      	b.n	8010018 <_strtol_l.isra.0+0x94>
 801004e:	2e00      	cmp	r6, #0
 8010050:	da05      	bge.n	801005e <_strtol_l.isra.0+0xda>
 8010052:	2322      	movs	r3, #34	; 0x22
 8010054:	6003      	str	r3, [r0, #0]
 8010056:	4665      	mov	r5, ip
 8010058:	b942      	cbnz	r2, 801006c <_strtol_l.isra.0+0xe8>
 801005a:	4628      	mov	r0, r5
 801005c:	e79d      	b.n	800ff9a <_strtol_l.isra.0+0x16>
 801005e:	f1b8 0f00 	cmp.w	r8, #0
 8010062:	d000      	beq.n	8010066 <_strtol_l.isra.0+0xe2>
 8010064:	426d      	negs	r5, r5
 8010066:	2a00      	cmp	r2, #0
 8010068:	d0f7      	beq.n	801005a <_strtol_l.isra.0+0xd6>
 801006a:	b10e      	cbz	r6, 8010070 <_strtol_l.isra.0+0xec>
 801006c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8010070:	6011      	str	r1, [r2, #0]
 8010072:	e7f2      	b.n	801005a <_strtol_l.isra.0+0xd6>
 8010074:	2430      	movs	r4, #48	; 0x30
 8010076:	2b00      	cmp	r3, #0
 8010078:	d1b3      	bne.n	800ffe2 <_strtol_l.isra.0+0x5e>
 801007a:	2308      	movs	r3, #8
 801007c:	e7b1      	b.n	800ffe2 <_strtol_l.isra.0+0x5e>
 801007e:	2c30      	cmp	r4, #48	; 0x30
 8010080:	d0a4      	beq.n	800ffcc <_strtol_l.isra.0+0x48>
 8010082:	230a      	movs	r3, #10
 8010084:	e7ad      	b.n	800ffe2 <_strtol_l.isra.0+0x5e>
 8010086:	bf00      	nop
 8010088:	08014151 	.word	0x08014151

0801008c <strtol>:
 801008c:	4613      	mov	r3, r2
 801008e:	460a      	mov	r2, r1
 8010090:	4601      	mov	r1, r0
 8010092:	4802      	ldr	r0, [pc, #8]	; (801009c <strtol+0x10>)
 8010094:	6800      	ldr	r0, [r0, #0]
 8010096:	f7ff bf75 	b.w	800ff84 <_strtol_l.isra.0>
 801009a:	bf00      	nop
 801009c:	2000001c 	.word	0x2000001c

080100a0 <__swbuf_r>:
 80100a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100a2:	460e      	mov	r6, r1
 80100a4:	4614      	mov	r4, r2
 80100a6:	4605      	mov	r5, r0
 80100a8:	b118      	cbz	r0, 80100b2 <__swbuf_r+0x12>
 80100aa:	6983      	ldr	r3, [r0, #24]
 80100ac:	b90b      	cbnz	r3, 80100b2 <__swbuf_r+0x12>
 80100ae:	f001 f849 	bl	8011144 <__sinit>
 80100b2:	4b21      	ldr	r3, [pc, #132]	; (8010138 <__swbuf_r+0x98>)
 80100b4:	429c      	cmp	r4, r3
 80100b6:	d12b      	bne.n	8010110 <__swbuf_r+0x70>
 80100b8:	686c      	ldr	r4, [r5, #4]
 80100ba:	69a3      	ldr	r3, [r4, #24]
 80100bc:	60a3      	str	r3, [r4, #8]
 80100be:	89a3      	ldrh	r3, [r4, #12]
 80100c0:	071a      	lsls	r2, r3, #28
 80100c2:	d52f      	bpl.n	8010124 <__swbuf_r+0x84>
 80100c4:	6923      	ldr	r3, [r4, #16]
 80100c6:	b36b      	cbz	r3, 8010124 <__swbuf_r+0x84>
 80100c8:	6923      	ldr	r3, [r4, #16]
 80100ca:	6820      	ldr	r0, [r4, #0]
 80100cc:	1ac0      	subs	r0, r0, r3
 80100ce:	6963      	ldr	r3, [r4, #20]
 80100d0:	b2f6      	uxtb	r6, r6
 80100d2:	4283      	cmp	r3, r0
 80100d4:	4637      	mov	r7, r6
 80100d6:	dc04      	bgt.n	80100e2 <__swbuf_r+0x42>
 80100d8:	4621      	mov	r1, r4
 80100da:	4628      	mov	r0, r5
 80100dc:	f000 ff9e 	bl	801101c <_fflush_r>
 80100e0:	bb30      	cbnz	r0, 8010130 <__swbuf_r+0x90>
 80100e2:	68a3      	ldr	r3, [r4, #8]
 80100e4:	3b01      	subs	r3, #1
 80100e6:	60a3      	str	r3, [r4, #8]
 80100e8:	6823      	ldr	r3, [r4, #0]
 80100ea:	1c5a      	adds	r2, r3, #1
 80100ec:	6022      	str	r2, [r4, #0]
 80100ee:	701e      	strb	r6, [r3, #0]
 80100f0:	6963      	ldr	r3, [r4, #20]
 80100f2:	3001      	adds	r0, #1
 80100f4:	4283      	cmp	r3, r0
 80100f6:	d004      	beq.n	8010102 <__swbuf_r+0x62>
 80100f8:	89a3      	ldrh	r3, [r4, #12]
 80100fa:	07db      	lsls	r3, r3, #31
 80100fc:	d506      	bpl.n	801010c <__swbuf_r+0x6c>
 80100fe:	2e0a      	cmp	r6, #10
 8010100:	d104      	bne.n	801010c <__swbuf_r+0x6c>
 8010102:	4621      	mov	r1, r4
 8010104:	4628      	mov	r0, r5
 8010106:	f000 ff89 	bl	801101c <_fflush_r>
 801010a:	b988      	cbnz	r0, 8010130 <__swbuf_r+0x90>
 801010c:	4638      	mov	r0, r7
 801010e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010110:	4b0a      	ldr	r3, [pc, #40]	; (801013c <__swbuf_r+0x9c>)
 8010112:	429c      	cmp	r4, r3
 8010114:	d101      	bne.n	801011a <__swbuf_r+0x7a>
 8010116:	68ac      	ldr	r4, [r5, #8]
 8010118:	e7cf      	b.n	80100ba <__swbuf_r+0x1a>
 801011a:	4b09      	ldr	r3, [pc, #36]	; (8010140 <__swbuf_r+0xa0>)
 801011c:	429c      	cmp	r4, r3
 801011e:	bf08      	it	eq
 8010120:	68ec      	ldreq	r4, [r5, #12]
 8010122:	e7ca      	b.n	80100ba <__swbuf_r+0x1a>
 8010124:	4621      	mov	r1, r4
 8010126:	4628      	mov	r0, r5
 8010128:	f000 f80c 	bl	8010144 <__swsetup_r>
 801012c:	2800      	cmp	r0, #0
 801012e:	d0cb      	beq.n	80100c8 <__swbuf_r+0x28>
 8010130:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010134:	e7ea      	b.n	801010c <__swbuf_r+0x6c>
 8010136:	bf00      	nop
 8010138:	08014308 	.word	0x08014308
 801013c:	08014328 	.word	0x08014328
 8010140:	080142e8 	.word	0x080142e8

08010144 <__swsetup_r>:
 8010144:	4b32      	ldr	r3, [pc, #200]	; (8010210 <__swsetup_r+0xcc>)
 8010146:	b570      	push	{r4, r5, r6, lr}
 8010148:	681d      	ldr	r5, [r3, #0]
 801014a:	4606      	mov	r6, r0
 801014c:	460c      	mov	r4, r1
 801014e:	b125      	cbz	r5, 801015a <__swsetup_r+0x16>
 8010150:	69ab      	ldr	r3, [r5, #24]
 8010152:	b913      	cbnz	r3, 801015a <__swsetup_r+0x16>
 8010154:	4628      	mov	r0, r5
 8010156:	f000 fff5 	bl	8011144 <__sinit>
 801015a:	4b2e      	ldr	r3, [pc, #184]	; (8010214 <__swsetup_r+0xd0>)
 801015c:	429c      	cmp	r4, r3
 801015e:	d10f      	bne.n	8010180 <__swsetup_r+0x3c>
 8010160:	686c      	ldr	r4, [r5, #4]
 8010162:	89a3      	ldrh	r3, [r4, #12]
 8010164:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010168:	0719      	lsls	r1, r3, #28
 801016a:	d42c      	bmi.n	80101c6 <__swsetup_r+0x82>
 801016c:	06dd      	lsls	r5, r3, #27
 801016e:	d411      	bmi.n	8010194 <__swsetup_r+0x50>
 8010170:	2309      	movs	r3, #9
 8010172:	6033      	str	r3, [r6, #0]
 8010174:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010178:	81a3      	strh	r3, [r4, #12]
 801017a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801017e:	e03e      	b.n	80101fe <__swsetup_r+0xba>
 8010180:	4b25      	ldr	r3, [pc, #148]	; (8010218 <__swsetup_r+0xd4>)
 8010182:	429c      	cmp	r4, r3
 8010184:	d101      	bne.n	801018a <__swsetup_r+0x46>
 8010186:	68ac      	ldr	r4, [r5, #8]
 8010188:	e7eb      	b.n	8010162 <__swsetup_r+0x1e>
 801018a:	4b24      	ldr	r3, [pc, #144]	; (801021c <__swsetup_r+0xd8>)
 801018c:	429c      	cmp	r4, r3
 801018e:	bf08      	it	eq
 8010190:	68ec      	ldreq	r4, [r5, #12]
 8010192:	e7e6      	b.n	8010162 <__swsetup_r+0x1e>
 8010194:	0758      	lsls	r0, r3, #29
 8010196:	d512      	bpl.n	80101be <__swsetup_r+0x7a>
 8010198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801019a:	b141      	cbz	r1, 80101ae <__swsetup_r+0x6a>
 801019c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101a0:	4299      	cmp	r1, r3
 80101a2:	d002      	beq.n	80101aa <__swsetup_r+0x66>
 80101a4:	4630      	mov	r0, r6
 80101a6:	f001 fc6d 	bl	8011a84 <_free_r>
 80101aa:	2300      	movs	r3, #0
 80101ac:	6363      	str	r3, [r4, #52]	; 0x34
 80101ae:	89a3      	ldrh	r3, [r4, #12]
 80101b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80101b4:	81a3      	strh	r3, [r4, #12]
 80101b6:	2300      	movs	r3, #0
 80101b8:	6063      	str	r3, [r4, #4]
 80101ba:	6923      	ldr	r3, [r4, #16]
 80101bc:	6023      	str	r3, [r4, #0]
 80101be:	89a3      	ldrh	r3, [r4, #12]
 80101c0:	f043 0308 	orr.w	r3, r3, #8
 80101c4:	81a3      	strh	r3, [r4, #12]
 80101c6:	6923      	ldr	r3, [r4, #16]
 80101c8:	b94b      	cbnz	r3, 80101de <__swsetup_r+0x9a>
 80101ca:	89a3      	ldrh	r3, [r4, #12]
 80101cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80101d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101d4:	d003      	beq.n	80101de <__swsetup_r+0x9a>
 80101d6:	4621      	mov	r1, r4
 80101d8:	4630      	mov	r0, r6
 80101da:	f001 f87d 	bl	80112d8 <__smakebuf_r>
 80101de:	89a0      	ldrh	r0, [r4, #12]
 80101e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101e4:	f010 0301 	ands.w	r3, r0, #1
 80101e8:	d00a      	beq.n	8010200 <__swsetup_r+0xbc>
 80101ea:	2300      	movs	r3, #0
 80101ec:	60a3      	str	r3, [r4, #8]
 80101ee:	6963      	ldr	r3, [r4, #20]
 80101f0:	425b      	negs	r3, r3
 80101f2:	61a3      	str	r3, [r4, #24]
 80101f4:	6923      	ldr	r3, [r4, #16]
 80101f6:	b943      	cbnz	r3, 801020a <__swsetup_r+0xc6>
 80101f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80101fc:	d1ba      	bne.n	8010174 <__swsetup_r+0x30>
 80101fe:	bd70      	pop	{r4, r5, r6, pc}
 8010200:	0781      	lsls	r1, r0, #30
 8010202:	bf58      	it	pl
 8010204:	6963      	ldrpl	r3, [r4, #20]
 8010206:	60a3      	str	r3, [r4, #8]
 8010208:	e7f4      	b.n	80101f4 <__swsetup_r+0xb0>
 801020a:	2000      	movs	r0, #0
 801020c:	e7f7      	b.n	80101fe <__swsetup_r+0xba>
 801020e:	bf00      	nop
 8010210:	2000001c 	.word	0x2000001c
 8010214:	08014308 	.word	0x08014308
 8010218:	08014328 	.word	0x08014328
 801021c:	080142e8 	.word	0x080142e8

08010220 <quorem>:
 8010220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010224:	6903      	ldr	r3, [r0, #16]
 8010226:	690c      	ldr	r4, [r1, #16]
 8010228:	42a3      	cmp	r3, r4
 801022a:	4607      	mov	r7, r0
 801022c:	f2c0 8081 	blt.w	8010332 <quorem+0x112>
 8010230:	3c01      	subs	r4, #1
 8010232:	f101 0814 	add.w	r8, r1, #20
 8010236:	f100 0514 	add.w	r5, r0, #20
 801023a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801023e:	9301      	str	r3, [sp, #4]
 8010240:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010244:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010248:	3301      	adds	r3, #1
 801024a:	429a      	cmp	r2, r3
 801024c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010250:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010254:	fbb2 f6f3 	udiv	r6, r2, r3
 8010258:	d331      	bcc.n	80102be <quorem+0x9e>
 801025a:	f04f 0e00 	mov.w	lr, #0
 801025e:	4640      	mov	r0, r8
 8010260:	46ac      	mov	ip, r5
 8010262:	46f2      	mov	sl, lr
 8010264:	f850 2b04 	ldr.w	r2, [r0], #4
 8010268:	b293      	uxth	r3, r2
 801026a:	fb06 e303 	mla	r3, r6, r3, lr
 801026e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010272:	b29b      	uxth	r3, r3
 8010274:	ebaa 0303 	sub.w	r3, sl, r3
 8010278:	0c12      	lsrs	r2, r2, #16
 801027a:	f8dc a000 	ldr.w	sl, [ip]
 801027e:	fb06 e202 	mla	r2, r6, r2, lr
 8010282:	fa13 f38a 	uxtah	r3, r3, sl
 8010286:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801028a:	fa1f fa82 	uxth.w	sl, r2
 801028e:	f8dc 2000 	ldr.w	r2, [ip]
 8010292:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010296:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801029a:	b29b      	uxth	r3, r3
 801029c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102a0:	4581      	cmp	r9, r0
 80102a2:	f84c 3b04 	str.w	r3, [ip], #4
 80102a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80102aa:	d2db      	bcs.n	8010264 <quorem+0x44>
 80102ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80102b0:	b92b      	cbnz	r3, 80102be <quorem+0x9e>
 80102b2:	9b01      	ldr	r3, [sp, #4]
 80102b4:	3b04      	subs	r3, #4
 80102b6:	429d      	cmp	r5, r3
 80102b8:	461a      	mov	r2, r3
 80102ba:	d32e      	bcc.n	801031a <quorem+0xfa>
 80102bc:	613c      	str	r4, [r7, #16]
 80102be:	4638      	mov	r0, r7
 80102c0:	f001 fad0 	bl	8011864 <__mcmp>
 80102c4:	2800      	cmp	r0, #0
 80102c6:	db24      	blt.n	8010312 <quorem+0xf2>
 80102c8:	3601      	adds	r6, #1
 80102ca:	4628      	mov	r0, r5
 80102cc:	f04f 0c00 	mov.w	ip, #0
 80102d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80102d4:	f8d0 e000 	ldr.w	lr, [r0]
 80102d8:	b293      	uxth	r3, r2
 80102da:	ebac 0303 	sub.w	r3, ip, r3
 80102de:	0c12      	lsrs	r2, r2, #16
 80102e0:	fa13 f38e 	uxtah	r3, r3, lr
 80102e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80102e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102f2:	45c1      	cmp	r9, r8
 80102f4:	f840 3b04 	str.w	r3, [r0], #4
 80102f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80102fc:	d2e8      	bcs.n	80102d0 <quorem+0xb0>
 80102fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010302:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010306:	b922      	cbnz	r2, 8010312 <quorem+0xf2>
 8010308:	3b04      	subs	r3, #4
 801030a:	429d      	cmp	r5, r3
 801030c:	461a      	mov	r2, r3
 801030e:	d30a      	bcc.n	8010326 <quorem+0x106>
 8010310:	613c      	str	r4, [r7, #16]
 8010312:	4630      	mov	r0, r6
 8010314:	b003      	add	sp, #12
 8010316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801031a:	6812      	ldr	r2, [r2, #0]
 801031c:	3b04      	subs	r3, #4
 801031e:	2a00      	cmp	r2, #0
 8010320:	d1cc      	bne.n	80102bc <quorem+0x9c>
 8010322:	3c01      	subs	r4, #1
 8010324:	e7c7      	b.n	80102b6 <quorem+0x96>
 8010326:	6812      	ldr	r2, [r2, #0]
 8010328:	3b04      	subs	r3, #4
 801032a:	2a00      	cmp	r2, #0
 801032c:	d1f0      	bne.n	8010310 <quorem+0xf0>
 801032e:	3c01      	subs	r4, #1
 8010330:	e7eb      	b.n	801030a <quorem+0xea>
 8010332:	2000      	movs	r0, #0
 8010334:	e7ee      	b.n	8010314 <quorem+0xf4>
	...

08010338 <_dtoa_r>:
 8010338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801033c:	ed2d 8b02 	vpush	{d8}
 8010340:	ec57 6b10 	vmov	r6, r7, d0
 8010344:	b095      	sub	sp, #84	; 0x54
 8010346:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010348:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801034c:	9105      	str	r1, [sp, #20]
 801034e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010352:	4604      	mov	r4, r0
 8010354:	9209      	str	r2, [sp, #36]	; 0x24
 8010356:	930f      	str	r3, [sp, #60]	; 0x3c
 8010358:	b975      	cbnz	r5, 8010378 <_dtoa_r+0x40>
 801035a:	2010      	movs	r0, #16
 801035c:	f000 fffc 	bl	8011358 <malloc>
 8010360:	4602      	mov	r2, r0
 8010362:	6260      	str	r0, [r4, #36]	; 0x24
 8010364:	b920      	cbnz	r0, 8010370 <_dtoa_r+0x38>
 8010366:	4bb2      	ldr	r3, [pc, #712]	; (8010630 <_dtoa_r+0x2f8>)
 8010368:	21ea      	movs	r1, #234	; 0xea
 801036a:	48b2      	ldr	r0, [pc, #712]	; (8010634 <_dtoa_r+0x2fc>)
 801036c:	f001 fdf4 	bl	8011f58 <__assert_func>
 8010370:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010374:	6005      	str	r5, [r0, #0]
 8010376:	60c5      	str	r5, [r0, #12]
 8010378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801037a:	6819      	ldr	r1, [r3, #0]
 801037c:	b151      	cbz	r1, 8010394 <_dtoa_r+0x5c>
 801037e:	685a      	ldr	r2, [r3, #4]
 8010380:	604a      	str	r2, [r1, #4]
 8010382:	2301      	movs	r3, #1
 8010384:	4093      	lsls	r3, r2
 8010386:	608b      	str	r3, [r1, #8]
 8010388:	4620      	mov	r0, r4
 801038a:	f001 f82d 	bl	80113e8 <_Bfree>
 801038e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010390:	2200      	movs	r2, #0
 8010392:	601a      	str	r2, [r3, #0]
 8010394:	1e3b      	subs	r3, r7, #0
 8010396:	bfb9      	ittee	lt
 8010398:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801039c:	9303      	strlt	r3, [sp, #12]
 801039e:	2300      	movge	r3, #0
 80103a0:	f8c8 3000 	strge.w	r3, [r8]
 80103a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80103a8:	4ba3      	ldr	r3, [pc, #652]	; (8010638 <_dtoa_r+0x300>)
 80103aa:	bfbc      	itt	lt
 80103ac:	2201      	movlt	r2, #1
 80103ae:	f8c8 2000 	strlt.w	r2, [r8]
 80103b2:	ea33 0309 	bics.w	r3, r3, r9
 80103b6:	d11b      	bne.n	80103f0 <_dtoa_r+0xb8>
 80103b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80103ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80103be:	6013      	str	r3, [r2, #0]
 80103c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80103c4:	4333      	orrs	r3, r6
 80103c6:	f000 857a 	beq.w	8010ebe <_dtoa_r+0xb86>
 80103ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103cc:	b963      	cbnz	r3, 80103e8 <_dtoa_r+0xb0>
 80103ce:	4b9b      	ldr	r3, [pc, #620]	; (801063c <_dtoa_r+0x304>)
 80103d0:	e024      	b.n	801041c <_dtoa_r+0xe4>
 80103d2:	4b9b      	ldr	r3, [pc, #620]	; (8010640 <_dtoa_r+0x308>)
 80103d4:	9300      	str	r3, [sp, #0]
 80103d6:	3308      	adds	r3, #8
 80103d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80103da:	6013      	str	r3, [r2, #0]
 80103dc:	9800      	ldr	r0, [sp, #0]
 80103de:	b015      	add	sp, #84	; 0x54
 80103e0:	ecbd 8b02 	vpop	{d8}
 80103e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103e8:	4b94      	ldr	r3, [pc, #592]	; (801063c <_dtoa_r+0x304>)
 80103ea:	9300      	str	r3, [sp, #0]
 80103ec:	3303      	adds	r3, #3
 80103ee:	e7f3      	b.n	80103d8 <_dtoa_r+0xa0>
 80103f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80103f4:	2200      	movs	r2, #0
 80103f6:	ec51 0b17 	vmov	r0, r1, d7
 80103fa:	2300      	movs	r3, #0
 80103fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010400:	f7f0 fb6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8010404:	4680      	mov	r8, r0
 8010406:	b158      	cbz	r0, 8010420 <_dtoa_r+0xe8>
 8010408:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801040a:	2301      	movs	r3, #1
 801040c:	6013      	str	r3, [r2, #0]
 801040e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010410:	2b00      	cmp	r3, #0
 8010412:	f000 8551 	beq.w	8010eb8 <_dtoa_r+0xb80>
 8010416:	488b      	ldr	r0, [pc, #556]	; (8010644 <_dtoa_r+0x30c>)
 8010418:	6018      	str	r0, [r3, #0]
 801041a:	1e43      	subs	r3, r0, #1
 801041c:	9300      	str	r3, [sp, #0]
 801041e:	e7dd      	b.n	80103dc <_dtoa_r+0xa4>
 8010420:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010424:	aa12      	add	r2, sp, #72	; 0x48
 8010426:	a913      	add	r1, sp, #76	; 0x4c
 8010428:	4620      	mov	r0, r4
 801042a:	f001 fabf 	bl	80119ac <__d2b>
 801042e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010432:	4683      	mov	fp, r0
 8010434:	2d00      	cmp	r5, #0
 8010436:	d07c      	beq.n	8010532 <_dtoa_r+0x1fa>
 8010438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801043a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801043e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010442:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8010446:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801044a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801044e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010452:	4b7d      	ldr	r3, [pc, #500]	; (8010648 <_dtoa_r+0x310>)
 8010454:	2200      	movs	r2, #0
 8010456:	4630      	mov	r0, r6
 8010458:	4639      	mov	r1, r7
 801045a:	f7ef ff1d 	bl	8000298 <__aeabi_dsub>
 801045e:	a36e      	add	r3, pc, #440	; (adr r3, 8010618 <_dtoa_r+0x2e0>)
 8010460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010464:	f7f0 f8d0 	bl	8000608 <__aeabi_dmul>
 8010468:	a36d      	add	r3, pc, #436	; (adr r3, 8010620 <_dtoa_r+0x2e8>)
 801046a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046e:	f7ef ff15 	bl	800029c <__adddf3>
 8010472:	4606      	mov	r6, r0
 8010474:	4628      	mov	r0, r5
 8010476:	460f      	mov	r7, r1
 8010478:	f7f0 f85c 	bl	8000534 <__aeabi_i2d>
 801047c:	a36a      	add	r3, pc, #424	; (adr r3, 8010628 <_dtoa_r+0x2f0>)
 801047e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010482:	f7f0 f8c1 	bl	8000608 <__aeabi_dmul>
 8010486:	4602      	mov	r2, r0
 8010488:	460b      	mov	r3, r1
 801048a:	4630      	mov	r0, r6
 801048c:	4639      	mov	r1, r7
 801048e:	f7ef ff05 	bl	800029c <__adddf3>
 8010492:	4606      	mov	r6, r0
 8010494:	460f      	mov	r7, r1
 8010496:	f7f0 fb67 	bl	8000b68 <__aeabi_d2iz>
 801049a:	2200      	movs	r2, #0
 801049c:	4682      	mov	sl, r0
 801049e:	2300      	movs	r3, #0
 80104a0:	4630      	mov	r0, r6
 80104a2:	4639      	mov	r1, r7
 80104a4:	f7f0 fb22 	bl	8000aec <__aeabi_dcmplt>
 80104a8:	b148      	cbz	r0, 80104be <_dtoa_r+0x186>
 80104aa:	4650      	mov	r0, sl
 80104ac:	f7f0 f842 	bl	8000534 <__aeabi_i2d>
 80104b0:	4632      	mov	r2, r6
 80104b2:	463b      	mov	r3, r7
 80104b4:	f7f0 fb10 	bl	8000ad8 <__aeabi_dcmpeq>
 80104b8:	b908      	cbnz	r0, 80104be <_dtoa_r+0x186>
 80104ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80104be:	f1ba 0f16 	cmp.w	sl, #22
 80104c2:	d854      	bhi.n	801056e <_dtoa_r+0x236>
 80104c4:	4b61      	ldr	r3, [pc, #388]	; (801064c <_dtoa_r+0x314>)
 80104c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80104ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80104d2:	f7f0 fb0b 	bl	8000aec <__aeabi_dcmplt>
 80104d6:	2800      	cmp	r0, #0
 80104d8:	d04b      	beq.n	8010572 <_dtoa_r+0x23a>
 80104da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80104de:	2300      	movs	r3, #0
 80104e0:	930e      	str	r3, [sp, #56]	; 0x38
 80104e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80104e4:	1b5d      	subs	r5, r3, r5
 80104e6:	1e6b      	subs	r3, r5, #1
 80104e8:	9304      	str	r3, [sp, #16]
 80104ea:	bf43      	ittte	mi
 80104ec:	2300      	movmi	r3, #0
 80104ee:	f1c5 0801 	rsbmi	r8, r5, #1
 80104f2:	9304      	strmi	r3, [sp, #16]
 80104f4:	f04f 0800 	movpl.w	r8, #0
 80104f8:	f1ba 0f00 	cmp.w	sl, #0
 80104fc:	db3b      	blt.n	8010576 <_dtoa_r+0x23e>
 80104fe:	9b04      	ldr	r3, [sp, #16]
 8010500:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8010504:	4453      	add	r3, sl
 8010506:	9304      	str	r3, [sp, #16]
 8010508:	2300      	movs	r3, #0
 801050a:	9306      	str	r3, [sp, #24]
 801050c:	9b05      	ldr	r3, [sp, #20]
 801050e:	2b09      	cmp	r3, #9
 8010510:	d869      	bhi.n	80105e6 <_dtoa_r+0x2ae>
 8010512:	2b05      	cmp	r3, #5
 8010514:	bfc4      	itt	gt
 8010516:	3b04      	subgt	r3, #4
 8010518:	9305      	strgt	r3, [sp, #20]
 801051a:	9b05      	ldr	r3, [sp, #20]
 801051c:	f1a3 0302 	sub.w	r3, r3, #2
 8010520:	bfcc      	ite	gt
 8010522:	2500      	movgt	r5, #0
 8010524:	2501      	movle	r5, #1
 8010526:	2b03      	cmp	r3, #3
 8010528:	d869      	bhi.n	80105fe <_dtoa_r+0x2c6>
 801052a:	e8df f003 	tbb	[pc, r3]
 801052e:	4e2c      	.short	0x4e2c
 8010530:	5a4c      	.short	0x5a4c
 8010532:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8010536:	441d      	add	r5, r3
 8010538:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801053c:	2b20      	cmp	r3, #32
 801053e:	bfc1      	itttt	gt
 8010540:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010544:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010548:	fa09 f303 	lslgt.w	r3, r9, r3
 801054c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010550:	bfda      	itte	le
 8010552:	f1c3 0320 	rsble	r3, r3, #32
 8010556:	fa06 f003 	lslle.w	r0, r6, r3
 801055a:	4318      	orrgt	r0, r3
 801055c:	f7ef ffda 	bl	8000514 <__aeabi_ui2d>
 8010560:	2301      	movs	r3, #1
 8010562:	4606      	mov	r6, r0
 8010564:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010568:	3d01      	subs	r5, #1
 801056a:	9310      	str	r3, [sp, #64]	; 0x40
 801056c:	e771      	b.n	8010452 <_dtoa_r+0x11a>
 801056e:	2301      	movs	r3, #1
 8010570:	e7b6      	b.n	80104e0 <_dtoa_r+0x1a8>
 8010572:	900e      	str	r0, [sp, #56]	; 0x38
 8010574:	e7b5      	b.n	80104e2 <_dtoa_r+0x1aa>
 8010576:	f1ca 0300 	rsb	r3, sl, #0
 801057a:	9306      	str	r3, [sp, #24]
 801057c:	2300      	movs	r3, #0
 801057e:	eba8 080a 	sub.w	r8, r8, sl
 8010582:	930d      	str	r3, [sp, #52]	; 0x34
 8010584:	e7c2      	b.n	801050c <_dtoa_r+0x1d4>
 8010586:	2300      	movs	r3, #0
 8010588:	9308      	str	r3, [sp, #32]
 801058a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801058c:	2b00      	cmp	r3, #0
 801058e:	dc39      	bgt.n	8010604 <_dtoa_r+0x2cc>
 8010590:	f04f 0901 	mov.w	r9, #1
 8010594:	f8cd 9004 	str.w	r9, [sp, #4]
 8010598:	464b      	mov	r3, r9
 801059a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801059e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80105a0:	2200      	movs	r2, #0
 80105a2:	6042      	str	r2, [r0, #4]
 80105a4:	2204      	movs	r2, #4
 80105a6:	f102 0614 	add.w	r6, r2, #20
 80105aa:	429e      	cmp	r6, r3
 80105ac:	6841      	ldr	r1, [r0, #4]
 80105ae:	d92f      	bls.n	8010610 <_dtoa_r+0x2d8>
 80105b0:	4620      	mov	r0, r4
 80105b2:	f000 fed9 	bl	8011368 <_Balloc>
 80105b6:	9000      	str	r0, [sp, #0]
 80105b8:	2800      	cmp	r0, #0
 80105ba:	d14b      	bne.n	8010654 <_dtoa_r+0x31c>
 80105bc:	4b24      	ldr	r3, [pc, #144]	; (8010650 <_dtoa_r+0x318>)
 80105be:	4602      	mov	r2, r0
 80105c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80105c4:	e6d1      	b.n	801036a <_dtoa_r+0x32>
 80105c6:	2301      	movs	r3, #1
 80105c8:	e7de      	b.n	8010588 <_dtoa_r+0x250>
 80105ca:	2300      	movs	r3, #0
 80105cc:	9308      	str	r3, [sp, #32]
 80105ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105d0:	eb0a 0903 	add.w	r9, sl, r3
 80105d4:	f109 0301 	add.w	r3, r9, #1
 80105d8:	2b01      	cmp	r3, #1
 80105da:	9301      	str	r3, [sp, #4]
 80105dc:	bfb8      	it	lt
 80105de:	2301      	movlt	r3, #1
 80105e0:	e7dd      	b.n	801059e <_dtoa_r+0x266>
 80105e2:	2301      	movs	r3, #1
 80105e4:	e7f2      	b.n	80105cc <_dtoa_r+0x294>
 80105e6:	2501      	movs	r5, #1
 80105e8:	2300      	movs	r3, #0
 80105ea:	9305      	str	r3, [sp, #20]
 80105ec:	9508      	str	r5, [sp, #32]
 80105ee:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80105f2:	2200      	movs	r2, #0
 80105f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80105f8:	2312      	movs	r3, #18
 80105fa:	9209      	str	r2, [sp, #36]	; 0x24
 80105fc:	e7cf      	b.n	801059e <_dtoa_r+0x266>
 80105fe:	2301      	movs	r3, #1
 8010600:	9308      	str	r3, [sp, #32]
 8010602:	e7f4      	b.n	80105ee <_dtoa_r+0x2b6>
 8010604:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010608:	f8cd 9004 	str.w	r9, [sp, #4]
 801060c:	464b      	mov	r3, r9
 801060e:	e7c6      	b.n	801059e <_dtoa_r+0x266>
 8010610:	3101      	adds	r1, #1
 8010612:	6041      	str	r1, [r0, #4]
 8010614:	0052      	lsls	r2, r2, #1
 8010616:	e7c6      	b.n	80105a6 <_dtoa_r+0x26e>
 8010618:	636f4361 	.word	0x636f4361
 801061c:	3fd287a7 	.word	0x3fd287a7
 8010620:	8b60c8b3 	.word	0x8b60c8b3
 8010624:	3fc68a28 	.word	0x3fc68a28
 8010628:	509f79fb 	.word	0x509f79fb
 801062c:	3fd34413 	.word	0x3fd34413
 8010630:	0801425e 	.word	0x0801425e
 8010634:	08014275 	.word	0x08014275
 8010638:	7ff00000 	.word	0x7ff00000
 801063c:	0801425a 	.word	0x0801425a
 8010640:	08014251 	.word	0x08014251
 8010644:	0801412d 	.word	0x0801412d
 8010648:	3ff80000 	.word	0x3ff80000
 801064c:	080143d0 	.word	0x080143d0
 8010650:	080142d4 	.word	0x080142d4
 8010654:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010656:	9a00      	ldr	r2, [sp, #0]
 8010658:	601a      	str	r2, [r3, #0]
 801065a:	9b01      	ldr	r3, [sp, #4]
 801065c:	2b0e      	cmp	r3, #14
 801065e:	f200 80ad 	bhi.w	80107bc <_dtoa_r+0x484>
 8010662:	2d00      	cmp	r5, #0
 8010664:	f000 80aa 	beq.w	80107bc <_dtoa_r+0x484>
 8010668:	f1ba 0f00 	cmp.w	sl, #0
 801066c:	dd36      	ble.n	80106dc <_dtoa_r+0x3a4>
 801066e:	4ac3      	ldr	r2, [pc, #780]	; (801097c <_dtoa_r+0x644>)
 8010670:	f00a 030f 	and.w	r3, sl, #15
 8010674:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010678:	ed93 7b00 	vldr	d7, [r3]
 801067c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010680:	ea4f 172a 	mov.w	r7, sl, asr #4
 8010684:	eeb0 8a47 	vmov.f32	s16, s14
 8010688:	eef0 8a67 	vmov.f32	s17, s15
 801068c:	d016      	beq.n	80106bc <_dtoa_r+0x384>
 801068e:	4bbc      	ldr	r3, [pc, #752]	; (8010980 <_dtoa_r+0x648>)
 8010690:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010694:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010698:	f7f0 f8e0 	bl	800085c <__aeabi_ddiv>
 801069c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106a0:	f007 070f 	and.w	r7, r7, #15
 80106a4:	2503      	movs	r5, #3
 80106a6:	4eb6      	ldr	r6, [pc, #728]	; (8010980 <_dtoa_r+0x648>)
 80106a8:	b957      	cbnz	r7, 80106c0 <_dtoa_r+0x388>
 80106aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106ae:	ec53 2b18 	vmov	r2, r3, d8
 80106b2:	f7f0 f8d3 	bl	800085c <__aeabi_ddiv>
 80106b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106ba:	e029      	b.n	8010710 <_dtoa_r+0x3d8>
 80106bc:	2502      	movs	r5, #2
 80106be:	e7f2      	b.n	80106a6 <_dtoa_r+0x36e>
 80106c0:	07f9      	lsls	r1, r7, #31
 80106c2:	d508      	bpl.n	80106d6 <_dtoa_r+0x39e>
 80106c4:	ec51 0b18 	vmov	r0, r1, d8
 80106c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80106cc:	f7ef ff9c 	bl	8000608 <__aeabi_dmul>
 80106d0:	ec41 0b18 	vmov	d8, r0, r1
 80106d4:	3501      	adds	r5, #1
 80106d6:	107f      	asrs	r7, r7, #1
 80106d8:	3608      	adds	r6, #8
 80106da:	e7e5      	b.n	80106a8 <_dtoa_r+0x370>
 80106dc:	f000 80a6 	beq.w	801082c <_dtoa_r+0x4f4>
 80106e0:	f1ca 0600 	rsb	r6, sl, #0
 80106e4:	4ba5      	ldr	r3, [pc, #660]	; (801097c <_dtoa_r+0x644>)
 80106e6:	4fa6      	ldr	r7, [pc, #664]	; (8010980 <_dtoa_r+0x648>)
 80106e8:	f006 020f 	and.w	r2, r6, #15
 80106ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80106f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80106f8:	f7ef ff86 	bl	8000608 <__aeabi_dmul>
 80106fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010700:	1136      	asrs	r6, r6, #4
 8010702:	2300      	movs	r3, #0
 8010704:	2502      	movs	r5, #2
 8010706:	2e00      	cmp	r6, #0
 8010708:	f040 8085 	bne.w	8010816 <_dtoa_r+0x4de>
 801070c:	2b00      	cmp	r3, #0
 801070e:	d1d2      	bne.n	80106b6 <_dtoa_r+0x37e>
 8010710:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010712:	2b00      	cmp	r3, #0
 8010714:	f000 808c 	beq.w	8010830 <_dtoa_r+0x4f8>
 8010718:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801071c:	4b99      	ldr	r3, [pc, #612]	; (8010984 <_dtoa_r+0x64c>)
 801071e:	2200      	movs	r2, #0
 8010720:	4630      	mov	r0, r6
 8010722:	4639      	mov	r1, r7
 8010724:	f7f0 f9e2 	bl	8000aec <__aeabi_dcmplt>
 8010728:	2800      	cmp	r0, #0
 801072a:	f000 8081 	beq.w	8010830 <_dtoa_r+0x4f8>
 801072e:	9b01      	ldr	r3, [sp, #4]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d07d      	beq.n	8010830 <_dtoa_r+0x4f8>
 8010734:	f1b9 0f00 	cmp.w	r9, #0
 8010738:	dd3c      	ble.n	80107b4 <_dtoa_r+0x47c>
 801073a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801073e:	9307      	str	r3, [sp, #28]
 8010740:	2200      	movs	r2, #0
 8010742:	4b91      	ldr	r3, [pc, #580]	; (8010988 <_dtoa_r+0x650>)
 8010744:	4630      	mov	r0, r6
 8010746:	4639      	mov	r1, r7
 8010748:	f7ef ff5e 	bl	8000608 <__aeabi_dmul>
 801074c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010750:	3501      	adds	r5, #1
 8010752:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010756:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801075a:	4628      	mov	r0, r5
 801075c:	f7ef feea 	bl	8000534 <__aeabi_i2d>
 8010760:	4632      	mov	r2, r6
 8010762:	463b      	mov	r3, r7
 8010764:	f7ef ff50 	bl	8000608 <__aeabi_dmul>
 8010768:	4b88      	ldr	r3, [pc, #544]	; (801098c <_dtoa_r+0x654>)
 801076a:	2200      	movs	r2, #0
 801076c:	f7ef fd96 	bl	800029c <__adddf3>
 8010770:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010778:	9303      	str	r3, [sp, #12]
 801077a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801077c:	2b00      	cmp	r3, #0
 801077e:	d15c      	bne.n	801083a <_dtoa_r+0x502>
 8010780:	4b83      	ldr	r3, [pc, #524]	; (8010990 <_dtoa_r+0x658>)
 8010782:	2200      	movs	r2, #0
 8010784:	4630      	mov	r0, r6
 8010786:	4639      	mov	r1, r7
 8010788:	f7ef fd86 	bl	8000298 <__aeabi_dsub>
 801078c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010790:	4606      	mov	r6, r0
 8010792:	460f      	mov	r7, r1
 8010794:	f7f0 f9c8 	bl	8000b28 <__aeabi_dcmpgt>
 8010798:	2800      	cmp	r0, #0
 801079a:	f040 8296 	bne.w	8010cca <_dtoa_r+0x992>
 801079e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80107a2:	4630      	mov	r0, r6
 80107a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80107a8:	4639      	mov	r1, r7
 80107aa:	f7f0 f99f 	bl	8000aec <__aeabi_dcmplt>
 80107ae:	2800      	cmp	r0, #0
 80107b0:	f040 8288 	bne.w	8010cc4 <_dtoa_r+0x98c>
 80107b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80107b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80107bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80107be:	2b00      	cmp	r3, #0
 80107c0:	f2c0 8158 	blt.w	8010a74 <_dtoa_r+0x73c>
 80107c4:	f1ba 0f0e 	cmp.w	sl, #14
 80107c8:	f300 8154 	bgt.w	8010a74 <_dtoa_r+0x73c>
 80107cc:	4b6b      	ldr	r3, [pc, #428]	; (801097c <_dtoa_r+0x644>)
 80107ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80107d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80107d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107d8:	2b00      	cmp	r3, #0
 80107da:	f280 80e3 	bge.w	80109a4 <_dtoa_r+0x66c>
 80107de:	9b01      	ldr	r3, [sp, #4]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	f300 80df 	bgt.w	80109a4 <_dtoa_r+0x66c>
 80107e6:	f040 826d 	bne.w	8010cc4 <_dtoa_r+0x98c>
 80107ea:	4b69      	ldr	r3, [pc, #420]	; (8010990 <_dtoa_r+0x658>)
 80107ec:	2200      	movs	r2, #0
 80107ee:	4640      	mov	r0, r8
 80107f0:	4649      	mov	r1, r9
 80107f2:	f7ef ff09 	bl	8000608 <__aeabi_dmul>
 80107f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80107fa:	f7f0 f98b 	bl	8000b14 <__aeabi_dcmpge>
 80107fe:	9e01      	ldr	r6, [sp, #4]
 8010800:	4637      	mov	r7, r6
 8010802:	2800      	cmp	r0, #0
 8010804:	f040 8243 	bne.w	8010c8e <_dtoa_r+0x956>
 8010808:	9d00      	ldr	r5, [sp, #0]
 801080a:	2331      	movs	r3, #49	; 0x31
 801080c:	f805 3b01 	strb.w	r3, [r5], #1
 8010810:	f10a 0a01 	add.w	sl, sl, #1
 8010814:	e23f      	b.n	8010c96 <_dtoa_r+0x95e>
 8010816:	07f2      	lsls	r2, r6, #31
 8010818:	d505      	bpl.n	8010826 <_dtoa_r+0x4ee>
 801081a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801081e:	f7ef fef3 	bl	8000608 <__aeabi_dmul>
 8010822:	3501      	adds	r5, #1
 8010824:	2301      	movs	r3, #1
 8010826:	1076      	asrs	r6, r6, #1
 8010828:	3708      	adds	r7, #8
 801082a:	e76c      	b.n	8010706 <_dtoa_r+0x3ce>
 801082c:	2502      	movs	r5, #2
 801082e:	e76f      	b.n	8010710 <_dtoa_r+0x3d8>
 8010830:	9b01      	ldr	r3, [sp, #4]
 8010832:	f8cd a01c 	str.w	sl, [sp, #28]
 8010836:	930c      	str	r3, [sp, #48]	; 0x30
 8010838:	e78d      	b.n	8010756 <_dtoa_r+0x41e>
 801083a:	9900      	ldr	r1, [sp, #0]
 801083c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801083e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010840:	4b4e      	ldr	r3, [pc, #312]	; (801097c <_dtoa_r+0x644>)
 8010842:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010846:	4401      	add	r1, r0
 8010848:	9102      	str	r1, [sp, #8]
 801084a:	9908      	ldr	r1, [sp, #32]
 801084c:	eeb0 8a47 	vmov.f32	s16, s14
 8010850:	eef0 8a67 	vmov.f32	s17, s15
 8010854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010858:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801085c:	2900      	cmp	r1, #0
 801085e:	d045      	beq.n	80108ec <_dtoa_r+0x5b4>
 8010860:	494c      	ldr	r1, [pc, #304]	; (8010994 <_dtoa_r+0x65c>)
 8010862:	2000      	movs	r0, #0
 8010864:	f7ef fffa 	bl	800085c <__aeabi_ddiv>
 8010868:	ec53 2b18 	vmov	r2, r3, d8
 801086c:	f7ef fd14 	bl	8000298 <__aeabi_dsub>
 8010870:	9d00      	ldr	r5, [sp, #0]
 8010872:	ec41 0b18 	vmov	d8, r0, r1
 8010876:	4639      	mov	r1, r7
 8010878:	4630      	mov	r0, r6
 801087a:	f7f0 f975 	bl	8000b68 <__aeabi_d2iz>
 801087e:	900c      	str	r0, [sp, #48]	; 0x30
 8010880:	f7ef fe58 	bl	8000534 <__aeabi_i2d>
 8010884:	4602      	mov	r2, r0
 8010886:	460b      	mov	r3, r1
 8010888:	4630      	mov	r0, r6
 801088a:	4639      	mov	r1, r7
 801088c:	f7ef fd04 	bl	8000298 <__aeabi_dsub>
 8010890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010892:	3330      	adds	r3, #48	; 0x30
 8010894:	f805 3b01 	strb.w	r3, [r5], #1
 8010898:	ec53 2b18 	vmov	r2, r3, d8
 801089c:	4606      	mov	r6, r0
 801089e:	460f      	mov	r7, r1
 80108a0:	f7f0 f924 	bl	8000aec <__aeabi_dcmplt>
 80108a4:	2800      	cmp	r0, #0
 80108a6:	d165      	bne.n	8010974 <_dtoa_r+0x63c>
 80108a8:	4632      	mov	r2, r6
 80108aa:	463b      	mov	r3, r7
 80108ac:	4935      	ldr	r1, [pc, #212]	; (8010984 <_dtoa_r+0x64c>)
 80108ae:	2000      	movs	r0, #0
 80108b0:	f7ef fcf2 	bl	8000298 <__aeabi_dsub>
 80108b4:	ec53 2b18 	vmov	r2, r3, d8
 80108b8:	f7f0 f918 	bl	8000aec <__aeabi_dcmplt>
 80108bc:	2800      	cmp	r0, #0
 80108be:	f040 80b9 	bne.w	8010a34 <_dtoa_r+0x6fc>
 80108c2:	9b02      	ldr	r3, [sp, #8]
 80108c4:	429d      	cmp	r5, r3
 80108c6:	f43f af75 	beq.w	80107b4 <_dtoa_r+0x47c>
 80108ca:	4b2f      	ldr	r3, [pc, #188]	; (8010988 <_dtoa_r+0x650>)
 80108cc:	ec51 0b18 	vmov	r0, r1, d8
 80108d0:	2200      	movs	r2, #0
 80108d2:	f7ef fe99 	bl	8000608 <__aeabi_dmul>
 80108d6:	4b2c      	ldr	r3, [pc, #176]	; (8010988 <_dtoa_r+0x650>)
 80108d8:	ec41 0b18 	vmov	d8, r0, r1
 80108dc:	2200      	movs	r2, #0
 80108de:	4630      	mov	r0, r6
 80108e0:	4639      	mov	r1, r7
 80108e2:	f7ef fe91 	bl	8000608 <__aeabi_dmul>
 80108e6:	4606      	mov	r6, r0
 80108e8:	460f      	mov	r7, r1
 80108ea:	e7c4      	b.n	8010876 <_dtoa_r+0x53e>
 80108ec:	ec51 0b17 	vmov	r0, r1, d7
 80108f0:	f7ef fe8a 	bl	8000608 <__aeabi_dmul>
 80108f4:	9b02      	ldr	r3, [sp, #8]
 80108f6:	9d00      	ldr	r5, [sp, #0]
 80108f8:	930c      	str	r3, [sp, #48]	; 0x30
 80108fa:	ec41 0b18 	vmov	d8, r0, r1
 80108fe:	4639      	mov	r1, r7
 8010900:	4630      	mov	r0, r6
 8010902:	f7f0 f931 	bl	8000b68 <__aeabi_d2iz>
 8010906:	9011      	str	r0, [sp, #68]	; 0x44
 8010908:	f7ef fe14 	bl	8000534 <__aeabi_i2d>
 801090c:	4602      	mov	r2, r0
 801090e:	460b      	mov	r3, r1
 8010910:	4630      	mov	r0, r6
 8010912:	4639      	mov	r1, r7
 8010914:	f7ef fcc0 	bl	8000298 <__aeabi_dsub>
 8010918:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801091a:	3330      	adds	r3, #48	; 0x30
 801091c:	f805 3b01 	strb.w	r3, [r5], #1
 8010920:	9b02      	ldr	r3, [sp, #8]
 8010922:	429d      	cmp	r5, r3
 8010924:	4606      	mov	r6, r0
 8010926:	460f      	mov	r7, r1
 8010928:	f04f 0200 	mov.w	r2, #0
 801092c:	d134      	bne.n	8010998 <_dtoa_r+0x660>
 801092e:	4b19      	ldr	r3, [pc, #100]	; (8010994 <_dtoa_r+0x65c>)
 8010930:	ec51 0b18 	vmov	r0, r1, d8
 8010934:	f7ef fcb2 	bl	800029c <__adddf3>
 8010938:	4602      	mov	r2, r0
 801093a:	460b      	mov	r3, r1
 801093c:	4630      	mov	r0, r6
 801093e:	4639      	mov	r1, r7
 8010940:	f7f0 f8f2 	bl	8000b28 <__aeabi_dcmpgt>
 8010944:	2800      	cmp	r0, #0
 8010946:	d175      	bne.n	8010a34 <_dtoa_r+0x6fc>
 8010948:	ec53 2b18 	vmov	r2, r3, d8
 801094c:	4911      	ldr	r1, [pc, #68]	; (8010994 <_dtoa_r+0x65c>)
 801094e:	2000      	movs	r0, #0
 8010950:	f7ef fca2 	bl	8000298 <__aeabi_dsub>
 8010954:	4602      	mov	r2, r0
 8010956:	460b      	mov	r3, r1
 8010958:	4630      	mov	r0, r6
 801095a:	4639      	mov	r1, r7
 801095c:	f7f0 f8c6 	bl	8000aec <__aeabi_dcmplt>
 8010960:	2800      	cmp	r0, #0
 8010962:	f43f af27 	beq.w	80107b4 <_dtoa_r+0x47c>
 8010966:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010968:	1e6b      	subs	r3, r5, #1
 801096a:	930c      	str	r3, [sp, #48]	; 0x30
 801096c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010970:	2b30      	cmp	r3, #48	; 0x30
 8010972:	d0f8      	beq.n	8010966 <_dtoa_r+0x62e>
 8010974:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010978:	e04a      	b.n	8010a10 <_dtoa_r+0x6d8>
 801097a:	bf00      	nop
 801097c:	080143d0 	.word	0x080143d0
 8010980:	080143a8 	.word	0x080143a8
 8010984:	3ff00000 	.word	0x3ff00000
 8010988:	40240000 	.word	0x40240000
 801098c:	401c0000 	.word	0x401c0000
 8010990:	40140000 	.word	0x40140000
 8010994:	3fe00000 	.word	0x3fe00000
 8010998:	4baf      	ldr	r3, [pc, #700]	; (8010c58 <_dtoa_r+0x920>)
 801099a:	f7ef fe35 	bl	8000608 <__aeabi_dmul>
 801099e:	4606      	mov	r6, r0
 80109a0:	460f      	mov	r7, r1
 80109a2:	e7ac      	b.n	80108fe <_dtoa_r+0x5c6>
 80109a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80109a8:	9d00      	ldr	r5, [sp, #0]
 80109aa:	4642      	mov	r2, r8
 80109ac:	464b      	mov	r3, r9
 80109ae:	4630      	mov	r0, r6
 80109b0:	4639      	mov	r1, r7
 80109b2:	f7ef ff53 	bl	800085c <__aeabi_ddiv>
 80109b6:	f7f0 f8d7 	bl	8000b68 <__aeabi_d2iz>
 80109ba:	9002      	str	r0, [sp, #8]
 80109bc:	f7ef fdba 	bl	8000534 <__aeabi_i2d>
 80109c0:	4642      	mov	r2, r8
 80109c2:	464b      	mov	r3, r9
 80109c4:	f7ef fe20 	bl	8000608 <__aeabi_dmul>
 80109c8:	4602      	mov	r2, r0
 80109ca:	460b      	mov	r3, r1
 80109cc:	4630      	mov	r0, r6
 80109ce:	4639      	mov	r1, r7
 80109d0:	f7ef fc62 	bl	8000298 <__aeabi_dsub>
 80109d4:	9e02      	ldr	r6, [sp, #8]
 80109d6:	9f01      	ldr	r7, [sp, #4]
 80109d8:	3630      	adds	r6, #48	; 0x30
 80109da:	f805 6b01 	strb.w	r6, [r5], #1
 80109de:	9e00      	ldr	r6, [sp, #0]
 80109e0:	1bae      	subs	r6, r5, r6
 80109e2:	42b7      	cmp	r7, r6
 80109e4:	4602      	mov	r2, r0
 80109e6:	460b      	mov	r3, r1
 80109e8:	d137      	bne.n	8010a5a <_dtoa_r+0x722>
 80109ea:	f7ef fc57 	bl	800029c <__adddf3>
 80109ee:	4642      	mov	r2, r8
 80109f0:	464b      	mov	r3, r9
 80109f2:	4606      	mov	r6, r0
 80109f4:	460f      	mov	r7, r1
 80109f6:	f7f0 f897 	bl	8000b28 <__aeabi_dcmpgt>
 80109fa:	b9c8      	cbnz	r0, 8010a30 <_dtoa_r+0x6f8>
 80109fc:	4642      	mov	r2, r8
 80109fe:	464b      	mov	r3, r9
 8010a00:	4630      	mov	r0, r6
 8010a02:	4639      	mov	r1, r7
 8010a04:	f7f0 f868 	bl	8000ad8 <__aeabi_dcmpeq>
 8010a08:	b110      	cbz	r0, 8010a10 <_dtoa_r+0x6d8>
 8010a0a:	9b02      	ldr	r3, [sp, #8]
 8010a0c:	07d9      	lsls	r1, r3, #31
 8010a0e:	d40f      	bmi.n	8010a30 <_dtoa_r+0x6f8>
 8010a10:	4620      	mov	r0, r4
 8010a12:	4659      	mov	r1, fp
 8010a14:	f000 fce8 	bl	80113e8 <_Bfree>
 8010a18:	2300      	movs	r3, #0
 8010a1a:	702b      	strb	r3, [r5, #0]
 8010a1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a1e:	f10a 0001 	add.w	r0, sl, #1
 8010a22:	6018      	str	r0, [r3, #0]
 8010a24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	f43f acd8 	beq.w	80103dc <_dtoa_r+0xa4>
 8010a2c:	601d      	str	r5, [r3, #0]
 8010a2e:	e4d5      	b.n	80103dc <_dtoa_r+0xa4>
 8010a30:	f8cd a01c 	str.w	sl, [sp, #28]
 8010a34:	462b      	mov	r3, r5
 8010a36:	461d      	mov	r5, r3
 8010a38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a3c:	2a39      	cmp	r2, #57	; 0x39
 8010a3e:	d108      	bne.n	8010a52 <_dtoa_r+0x71a>
 8010a40:	9a00      	ldr	r2, [sp, #0]
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d1f7      	bne.n	8010a36 <_dtoa_r+0x6fe>
 8010a46:	9a07      	ldr	r2, [sp, #28]
 8010a48:	9900      	ldr	r1, [sp, #0]
 8010a4a:	3201      	adds	r2, #1
 8010a4c:	9207      	str	r2, [sp, #28]
 8010a4e:	2230      	movs	r2, #48	; 0x30
 8010a50:	700a      	strb	r2, [r1, #0]
 8010a52:	781a      	ldrb	r2, [r3, #0]
 8010a54:	3201      	adds	r2, #1
 8010a56:	701a      	strb	r2, [r3, #0]
 8010a58:	e78c      	b.n	8010974 <_dtoa_r+0x63c>
 8010a5a:	4b7f      	ldr	r3, [pc, #508]	; (8010c58 <_dtoa_r+0x920>)
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	f7ef fdd3 	bl	8000608 <__aeabi_dmul>
 8010a62:	2200      	movs	r2, #0
 8010a64:	2300      	movs	r3, #0
 8010a66:	4606      	mov	r6, r0
 8010a68:	460f      	mov	r7, r1
 8010a6a:	f7f0 f835 	bl	8000ad8 <__aeabi_dcmpeq>
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	d09b      	beq.n	80109aa <_dtoa_r+0x672>
 8010a72:	e7cd      	b.n	8010a10 <_dtoa_r+0x6d8>
 8010a74:	9a08      	ldr	r2, [sp, #32]
 8010a76:	2a00      	cmp	r2, #0
 8010a78:	f000 80c4 	beq.w	8010c04 <_dtoa_r+0x8cc>
 8010a7c:	9a05      	ldr	r2, [sp, #20]
 8010a7e:	2a01      	cmp	r2, #1
 8010a80:	f300 80a8 	bgt.w	8010bd4 <_dtoa_r+0x89c>
 8010a84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010a86:	2a00      	cmp	r2, #0
 8010a88:	f000 80a0 	beq.w	8010bcc <_dtoa_r+0x894>
 8010a8c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010a90:	9e06      	ldr	r6, [sp, #24]
 8010a92:	4645      	mov	r5, r8
 8010a94:	9a04      	ldr	r2, [sp, #16]
 8010a96:	2101      	movs	r1, #1
 8010a98:	441a      	add	r2, r3
 8010a9a:	4620      	mov	r0, r4
 8010a9c:	4498      	add	r8, r3
 8010a9e:	9204      	str	r2, [sp, #16]
 8010aa0:	f000 fd5e 	bl	8011560 <__i2b>
 8010aa4:	4607      	mov	r7, r0
 8010aa6:	2d00      	cmp	r5, #0
 8010aa8:	dd0b      	ble.n	8010ac2 <_dtoa_r+0x78a>
 8010aaa:	9b04      	ldr	r3, [sp, #16]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	dd08      	ble.n	8010ac2 <_dtoa_r+0x78a>
 8010ab0:	42ab      	cmp	r3, r5
 8010ab2:	9a04      	ldr	r2, [sp, #16]
 8010ab4:	bfa8      	it	ge
 8010ab6:	462b      	movge	r3, r5
 8010ab8:	eba8 0803 	sub.w	r8, r8, r3
 8010abc:	1aed      	subs	r5, r5, r3
 8010abe:	1ad3      	subs	r3, r2, r3
 8010ac0:	9304      	str	r3, [sp, #16]
 8010ac2:	9b06      	ldr	r3, [sp, #24]
 8010ac4:	b1fb      	cbz	r3, 8010b06 <_dtoa_r+0x7ce>
 8010ac6:	9b08      	ldr	r3, [sp, #32]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	f000 809f 	beq.w	8010c0c <_dtoa_r+0x8d4>
 8010ace:	2e00      	cmp	r6, #0
 8010ad0:	dd11      	ble.n	8010af6 <_dtoa_r+0x7be>
 8010ad2:	4639      	mov	r1, r7
 8010ad4:	4632      	mov	r2, r6
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f000 fdfe 	bl	80116d8 <__pow5mult>
 8010adc:	465a      	mov	r2, fp
 8010ade:	4601      	mov	r1, r0
 8010ae0:	4607      	mov	r7, r0
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	f000 fd52 	bl	801158c <__multiply>
 8010ae8:	4659      	mov	r1, fp
 8010aea:	9007      	str	r0, [sp, #28]
 8010aec:	4620      	mov	r0, r4
 8010aee:	f000 fc7b 	bl	80113e8 <_Bfree>
 8010af2:	9b07      	ldr	r3, [sp, #28]
 8010af4:	469b      	mov	fp, r3
 8010af6:	9b06      	ldr	r3, [sp, #24]
 8010af8:	1b9a      	subs	r2, r3, r6
 8010afa:	d004      	beq.n	8010b06 <_dtoa_r+0x7ce>
 8010afc:	4659      	mov	r1, fp
 8010afe:	4620      	mov	r0, r4
 8010b00:	f000 fdea 	bl	80116d8 <__pow5mult>
 8010b04:	4683      	mov	fp, r0
 8010b06:	2101      	movs	r1, #1
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f000 fd29 	bl	8011560 <__i2b>
 8010b0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	4606      	mov	r6, r0
 8010b14:	dd7c      	ble.n	8010c10 <_dtoa_r+0x8d8>
 8010b16:	461a      	mov	r2, r3
 8010b18:	4601      	mov	r1, r0
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	f000 fddc 	bl	80116d8 <__pow5mult>
 8010b20:	9b05      	ldr	r3, [sp, #20]
 8010b22:	2b01      	cmp	r3, #1
 8010b24:	4606      	mov	r6, r0
 8010b26:	dd76      	ble.n	8010c16 <_dtoa_r+0x8de>
 8010b28:	2300      	movs	r3, #0
 8010b2a:	9306      	str	r3, [sp, #24]
 8010b2c:	6933      	ldr	r3, [r6, #16]
 8010b2e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010b32:	6918      	ldr	r0, [r3, #16]
 8010b34:	f000 fcc4 	bl	80114c0 <__hi0bits>
 8010b38:	f1c0 0020 	rsb	r0, r0, #32
 8010b3c:	9b04      	ldr	r3, [sp, #16]
 8010b3e:	4418      	add	r0, r3
 8010b40:	f010 001f 	ands.w	r0, r0, #31
 8010b44:	f000 8086 	beq.w	8010c54 <_dtoa_r+0x91c>
 8010b48:	f1c0 0320 	rsb	r3, r0, #32
 8010b4c:	2b04      	cmp	r3, #4
 8010b4e:	dd7f      	ble.n	8010c50 <_dtoa_r+0x918>
 8010b50:	f1c0 001c 	rsb	r0, r0, #28
 8010b54:	9b04      	ldr	r3, [sp, #16]
 8010b56:	4403      	add	r3, r0
 8010b58:	4480      	add	r8, r0
 8010b5a:	4405      	add	r5, r0
 8010b5c:	9304      	str	r3, [sp, #16]
 8010b5e:	f1b8 0f00 	cmp.w	r8, #0
 8010b62:	dd05      	ble.n	8010b70 <_dtoa_r+0x838>
 8010b64:	4659      	mov	r1, fp
 8010b66:	4642      	mov	r2, r8
 8010b68:	4620      	mov	r0, r4
 8010b6a:	f000 fe0f 	bl	801178c <__lshift>
 8010b6e:	4683      	mov	fp, r0
 8010b70:	9b04      	ldr	r3, [sp, #16]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	dd05      	ble.n	8010b82 <_dtoa_r+0x84a>
 8010b76:	4631      	mov	r1, r6
 8010b78:	461a      	mov	r2, r3
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	f000 fe06 	bl	801178c <__lshift>
 8010b80:	4606      	mov	r6, r0
 8010b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d069      	beq.n	8010c5c <_dtoa_r+0x924>
 8010b88:	4631      	mov	r1, r6
 8010b8a:	4658      	mov	r0, fp
 8010b8c:	f000 fe6a 	bl	8011864 <__mcmp>
 8010b90:	2800      	cmp	r0, #0
 8010b92:	da63      	bge.n	8010c5c <_dtoa_r+0x924>
 8010b94:	2300      	movs	r3, #0
 8010b96:	4659      	mov	r1, fp
 8010b98:	220a      	movs	r2, #10
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	f000 fc46 	bl	801142c <__multadd>
 8010ba0:	9b08      	ldr	r3, [sp, #32]
 8010ba2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010ba6:	4683      	mov	fp, r0
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	f000 818f 	beq.w	8010ecc <_dtoa_r+0xb94>
 8010bae:	4639      	mov	r1, r7
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	220a      	movs	r2, #10
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	f000 fc39 	bl	801142c <__multadd>
 8010bba:	f1b9 0f00 	cmp.w	r9, #0
 8010bbe:	4607      	mov	r7, r0
 8010bc0:	f300 808e 	bgt.w	8010ce0 <_dtoa_r+0x9a8>
 8010bc4:	9b05      	ldr	r3, [sp, #20]
 8010bc6:	2b02      	cmp	r3, #2
 8010bc8:	dc50      	bgt.n	8010c6c <_dtoa_r+0x934>
 8010bca:	e089      	b.n	8010ce0 <_dtoa_r+0x9a8>
 8010bcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010bce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010bd2:	e75d      	b.n	8010a90 <_dtoa_r+0x758>
 8010bd4:	9b01      	ldr	r3, [sp, #4]
 8010bd6:	1e5e      	subs	r6, r3, #1
 8010bd8:	9b06      	ldr	r3, [sp, #24]
 8010bda:	42b3      	cmp	r3, r6
 8010bdc:	bfbf      	itttt	lt
 8010bde:	9b06      	ldrlt	r3, [sp, #24]
 8010be0:	9606      	strlt	r6, [sp, #24]
 8010be2:	1af2      	sublt	r2, r6, r3
 8010be4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8010be6:	bfb6      	itet	lt
 8010be8:	189b      	addlt	r3, r3, r2
 8010bea:	1b9e      	subge	r6, r3, r6
 8010bec:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010bee:	9b01      	ldr	r3, [sp, #4]
 8010bf0:	bfb8      	it	lt
 8010bf2:	2600      	movlt	r6, #0
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	bfb5      	itete	lt
 8010bf8:	eba8 0503 	sublt.w	r5, r8, r3
 8010bfc:	9b01      	ldrge	r3, [sp, #4]
 8010bfe:	2300      	movlt	r3, #0
 8010c00:	4645      	movge	r5, r8
 8010c02:	e747      	b.n	8010a94 <_dtoa_r+0x75c>
 8010c04:	9e06      	ldr	r6, [sp, #24]
 8010c06:	9f08      	ldr	r7, [sp, #32]
 8010c08:	4645      	mov	r5, r8
 8010c0a:	e74c      	b.n	8010aa6 <_dtoa_r+0x76e>
 8010c0c:	9a06      	ldr	r2, [sp, #24]
 8010c0e:	e775      	b.n	8010afc <_dtoa_r+0x7c4>
 8010c10:	9b05      	ldr	r3, [sp, #20]
 8010c12:	2b01      	cmp	r3, #1
 8010c14:	dc18      	bgt.n	8010c48 <_dtoa_r+0x910>
 8010c16:	9b02      	ldr	r3, [sp, #8]
 8010c18:	b9b3      	cbnz	r3, 8010c48 <_dtoa_r+0x910>
 8010c1a:	9b03      	ldr	r3, [sp, #12]
 8010c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c20:	b9a3      	cbnz	r3, 8010c4c <_dtoa_r+0x914>
 8010c22:	9b03      	ldr	r3, [sp, #12]
 8010c24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010c28:	0d1b      	lsrs	r3, r3, #20
 8010c2a:	051b      	lsls	r3, r3, #20
 8010c2c:	b12b      	cbz	r3, 8010c3a <_dtoa_r+0x902>
 8010c2e:	9b04      	ldr	r3, [sp, #16]
 8010c30:	3301      	adds	r3, #1
 8010c32:	9304      	str	r3, [sp, #16]
 8010c34:	f108 0801 	add.w	r8, r8, #1
 8010c38:	2301      	movs	r3, #1
 8010c3a:	9306      	str	r3, [sp, #24]
 8010c3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	f47f af74 	bne.w	8010b2c <_dtoa_r+0x7f4>
 8010c44:	2001      	movs	r0, #1
 8010c46:	e779      	b.n	8010b3c <_dtoa_r+0x804>
 8010c48:	2300      	movs	r3, #0
 8010c4a:	e7f6      	b.n	8010c3a <_dtoa_r+0x902>
 8010c4c:	9b02      	ldr	r3, [sp, #8]
 8010c4e:	e7f4      	b.n	8010c3a <_dtoa_r+0x902>
 8010c50:	d085      	beq.n	8010b5e <_dtoa_r+0x826>
 8010c52:	4618      	mov	r0, r3
 8010c54:	301c      	adds	r0, #28
 8010c56:	e77d      	b.n	8010b54 <_dtoa_r+0x81c>
 8010c58:	40240000 	.word	0x40240000
 8010c5c:	9b01      	ldr	r3, [sp, #4]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	dc38      	bgt.n	8010cd4 <_dtoa_r+0x99c>
 8010c62:	9b05      	ldr	r3, [sp, #20]
 8010c64:	2b02      	cmp	r3, #2
 8010c66:	dd35      	ble.n	8010cd4 <_dtoa_r+0x99c>
 8010c68:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010c6c:	f1b9 0f00 	cmp.w	r9, #0
 8010c70:	d10d      	bne.n	8010c8e <_dtoa_r+0x956>
 8010c72:	4631      	mov	r1, r6
 8010c74:	464b      	mov	r3, r9
 8010c76:	2205      	movs	r2, #5
 8010c78:	4620      	mov	r0, r4
 8010c7a:	f000 fbd7 	bl	801142c <__multadd>
 8010c7e:	4601      	mov	r1, r0
 8010c80:	4606      	mov	r6, r0
 8010c82:	4658      	mov	r0, fp
 8010c84:	f000 fdee 	bl	8011864 <__mcmp>
 8010c88:	2800      	cmp	r0, #0
 8010c8a:	f73f adbd 	bgt.w	8010808 <_dtoa_r+0x4d0>
 8010c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c90:	9d00      	ldr	r5, [sp, #0]
 8010c92:	ea6f 0a03 	mvn.w	sl, r3
 8010c96:	f04f 0800 	mov.w	r8, #0
 8010c9a:	4631      	mov	r1, r6
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	f000 fba3 	bl	80113e8 <_Bfree>
 8010ca2:	2f00      	cmp	r7, #0
 8010ca4:	f43f aeb4 	beq.w	8010a10 <_dtoa_r+0x6d8>
 8010ca8:	f1b8 0f00 	cmp.w	r8, #0
 8010cac:	d005      	beq.n	8010cba <_dtoa_r+0x982>
 8010cae:	45b8      	cmp	r8, r7
 8010cb0:	d003      	beq.n	8010cba <_dtoa_r+0x982>
 8010cb2:	4641      	mov	r1, r8
 8010cb4:	4620      	mov	r0, r4
 8010cb6:	f000 fb97 	bl	80113e8 <_Bfree>
 8010cba:	4639      	mov	r1, r7
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	f000 fb93 	bl	80113e8 <_Bfree>
 8010cc2:	e6a5      	b.n	8010a10 <_dtoa_r+0x6d8>
 8010cc4:	2600      	movs	r6, #0
 8010cc6:	4637      	mov	r7, r6
 8010cc8:	e7e1      	b.n	8010c8e <_dtoa_r+0x956>
 8010cca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010ccc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010cd0:	4637      	mov	r7, r6
 8010cd2:	e599      	b.n	8010808 <_dtoa_r+0x4d0>
 8010cd4:	9b08      	ldr	r3, [sp, #32]
 8010cd6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	f000 80fd 	beq.w	8010eda <_dtoa_r+0xba2>
 8010ce0:	2d00      	cmp	r5, #0
 8010ce2:	dd05      	ble.n	8010cf0 <_dtoa_r+0x9b8>
 8010ce4:	4639      	mov	r1, r7
 8010ce6:	462a      	mov	r2, r5
 8010ce8:	4620      	mov	r0, r4
 8010cea:	f000 fd4f 	bl	801178c <__lshift>
 8010cee:	4607      	mov	r7, r0
 8010cf0:	9b06      	ldr	r3, [sp, #24]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d05c      	beq.n	8010db0 <_dtoa_r+0xa78>
 8010cf6:	6879      	ldr	r1, [r7, #4]
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	f000 fb35 	bl	8011368 <_Balloc>
 8010cfe:	4605      	mov	r5, r0
 8010d00:	b928      	cbnz	r0, 8010d0e <_dtoa_r+0x9d6>
 8010d02:	4b80      	ldr	r3, [pc, #512]	; (8010f04 <_dtoa_r+0xbcc>)
 8010d04:	4602      	mov	r2, r0
 8010d06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010d0a:	f7ff bb2e 	b.w	801036a <_dtoa_r+0x32>
 8010d0e:	693a      	ldr	r2, [r7, #16]
 8010d10:	3202      	adds	r2, #2
 8010d12:	0092      	lsls	r2, r2, #2
 8010d14:	f107 010c 	add.w	r1, r7, #12
 8010d18:	300c      	adds	r0, #12
 8010d1a:	f7fe fc25 	bl	800f568 <memcpy>
 8010d1e:	2201      	movs	r2, #1
 8010d20:	4629      	mov	r1, r5
 8010d22:	4620      	mov	r0, r4
 8010d24:	f000 fd32 	bl	801178c <__lshift>
 8010d28:	9b00      	ldr	r3, [sp, #0]
 8010d2a:	3301      	adds	r3, #1
 8010d2c:	9301      	str	r3, [sp, #4]
 8010d2e:	9b00      	ldr	r3, [sp, #0]
 8010d30:	444b      	add	r3, r9
 8010d32:	9307      	str	r3, [sp, #28]
 8010d34:	9b02      	ldr	r3, [sp, #8]
 8010d36:	f003 0301 	and.w	r3, r3, #1
 8010d3a:	46b8      	mov	r8, r7
 8010d3c:	9306      	str	r3, [sp, #24]
 8010d3e:	4607      	mov	r7, r0
 8010d40:	9b01      	ldr	r3, [sp, #4]
 8010d42:	4631      	mov	r1, r6
 8010d44:	3b01      	subs	r3, #1
 8010d46:	4658      	mov	r0, fp
 8010d48:	9302      	str	r3, [sp, #8]
 8010d4a:	f7ff fa69 	bl	8010220 <quorem>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	3330      	adds	r3, #48	; 0x30
 8010d52:	9004      	str	r0, [sp, #16]
 8010d54:	4641      	mov	r1, r8
 8010d56:	4658      	mov	r0, fp
 8010d58:	9308      	str	r3, [sp, #32]
 8010d5a:	f000 fd83 	bl	8011864 <__mcmp>
 8010d5e:	463a      	mov	r2, r7
 8010d60:	4681      	mov	r9, r0
 8010d62:	4631      	mov	r1, r6
 8010d64:	4620      	mov	r0, r4
 8010d66:	f000 fd99 	bl	801189c <__mdiff>
 8010d6a:	68c2      	ldr	r2, [r0, #12]
 8010d6c:	9b08      	ldr	r3, [sp, #32]
 8010d6e:	4605      	mov	r5, r0
 8010d70:	bb02      	cbnz	r2, 8010db4 <_dtoa_r+0xa7c>
 8010d72:	4601      	mov	r1, r0
 8010d74:	4658      	mov	r0, fp
 8010d76:	f000 fd75 	bl	8011864 <__mcmp>
 8010d7a:	9b08      	ldr	r3, [sp, #32]
 8010d7c:	4602      	mov	r2, r0
 8010d7e:	4629      	mov	r1, r5
 8010d80:	4620      	mov	r0, r4
 8010d82:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8010d86:	f000 fb2f 	bl	80113e8 <_Bfree>
 8010d8a:	9b05      	ldr	r3, [sp, #20]
 8010d8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d8e:	9d01      	ldr	r5, [sp, #4]
 8010d90:	ea43 0102 	orr.w	r1, r3, r2
 8010d94:	9b06      	ldr	r3, [sp, #24]
 8010d96:	430b      	orrs	r3, r1
 8010d98:	9b08      	ldr	r3, [sp, #32]
 8010d9a:	d10d      	bne.n	8010db8 <_dtoa_r+0xa80>
 8010d9c:	2b39      	cmp	r3, #57	; 0x39
 8010d9e:	d029      	beq.n	8010df4 <_dtoa_r+0xabc>
 8010da0:	f1b9 0f00 	cmp.w	r9, #0
 8010da4:	dd01      	ble.n	8010daa <_dtoa_r+0xa72>
 8010da6:	9b04      	ldr	r3, [sp, #16]
 8010da8:	3331      	adds	r3, #49	; 0x31
 8010daa:	9a02      	ldr	r2, [sp, #8]
 8010dac:	7013      	strb	r3, [r2, #0]
 8010dae:	e774      	b.n	8010c9a <_dtoa_r+0x962>
 8010db0:	4638      	mov	r0, r7
 8010db2:	e7b9      	b.n	8010d28 <_dtoa_r+0x9f0>
 8010db4:	2201      	movs	r2, #1
 8010db6:	e7e2      	b.n	8010d7e <_dtoa_r+0xa46>
 8010db8:	f1b9 0f00 	cmp.w	r9, #0
 8010dbc:	db06      	blt.n	8010dcc <_dtoa_r+0xa94>
 8010dbe:	9905      	ldr	r1, [sp, #20]
 8010dc0:	ea41 0909 	orr.w	r9, r1, r9
 8010dc4:	9906      	ldr	r1, [sp, #24]
 8010dc6:	ea59 0101 	orrs.w	r1, r9, r1
 8010dca:	d120      	bne.n	8010e0e <_dtoa_r+0xad6>
 8010dcc:	2a00      	cmp	r2, #0
 8010dce:	ddec      	ble.n	8010daa <_dtoa_r+0xa72>
 8010dd0:	4659      	mov	r1, fp
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	9301      	str	r3, [sp, #4]
 8010dd8:	f000 fcd8 	bl	801178c <__lshift>
 8010ddc:	4631      	mov	r1, r6
 8010dde:	4683      	mov	fp, r0
 8010de0:	f000 fd40 	bl	8011864 <__mcmp>
 8010de4:	2800      	cmp	r0, #0
 8010de6:	9b01      	ldr	r3, [sp, #4]
 8010de8:	dc02      	bgt.n	8010df0 <_dtoa_r+0xab8>
 8010dea:	d1de      	bne.n	8010daa <_dtoa_r+0xa72>
 8010dec:	07da      	lsls	r2, r3, #31
 8010dee:	d5dc      	bpl.n	8010daa <_dtoa_r+0xa72>
 8010df0:	2b39      	cmp	r3, #57	; 0x39
 8010df2:	d1d8      	bne.n	8010da6 <_dtoa_r+0xa6e>
 8010df4:	9a02      	ldr	r2, [sp, #8]
 8010df6:	2339      	movs	r3, #57	; 0x39
 8010df8:	7013      	strb	r3, [r2, #0]
 8010dfa:	462b      	mov	r3, r5
 8010dfc:	461d      	mov	r5, r3
 8010dfe:	3b01      	subs	r3, #1
 8010e00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010e04:	2a39      	cmp	r2, #57	; 0x39
 8010e06:	d050      	beq.n	8010eaa <_dtoa_r+0xb72>
 8010e08:	3201      	adds	r2, #1
 8010e0a:	701a      	strb	r2, [r3, #0]
 8010e0c:	e745      	b.n	8010c9a <_dtoa_r+0x962>
 8010e0e:	2a00      	cmp	r2, #0
 8010e10:	dd03      	ble.n	8010e1a <_dtoa_r+0xae2>
 8010e12:	2b39      	cmp	r3, #57	; 0x39
 8010e14:	d0ee      	beq.n	8010df4 <_dtoa_r+0xabc>
 8010e16:	3301      	adds	r3, #1
 8010e18:	e7c7      	b.n	8010daa <_dtoa_r+0xa72>
 8010e1a:	9a01      	ldr	r2, [sp, #4]
 8010e1c:	9907      	ldr	r1, [sp, #28]
 8010e1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010e22:	428a      	cmp	r2, r1
 8010e24:	d02a      	beq.n	8010e7c <_dtoa_r+0xb44>
 8010e26:	4659      	mov	r1, fp
 8010e28:	2300      	movs	r3, #0
 8010e2a:	220a      	movs	r2, #10
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	f000 fafd 	bl	801142c <__multadd>
 8010e32:	45b8      	cmp	r8, r7
 8010e34:	4683      	mov	fp, r0
 8010e36:	f04f 0300 	mov.w	r3, #0
 8010e3a:	f04f 020a 	mov.w	r2, #10
 8010e3e:	4641      	mov	r1, r8
 8010e40:	4620      	mov	r0, r4
 8010e42:	d107      	bne.n	8010e54 <_dtoa_r+0xb1c>
 8010e44:	f000 faf2 	bl	801142c <__multadd>
 8010e48:	4680      	mov	r8, r0
 8010e4a:	4607      	mov	r7, r0
 8010e4c:	9b01      	ldr	r3, [sp, #4]
 8010e4e:	3301      	adds	r3, #1
 8010e50:	9301      	str	r3, [sp, #4]
 8010e52:	e775      	b.n	8010d40 <_dtoa_r+0xa08>
 8010e54:	f000 faea 	bl	801142c <__multadd>
 8010e58:	4639      	mov	r1, r7
 8010e5a:	4680      	mov	r8, r0
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	220a      	movs	r2, #10
 8010e60:	4620      	mov	r0, r4
 8010e62:	f000 fae3 	bl	801142c <__multadd>
 8010e66:	4607      	mov	r7, r0
 8010e68:	e7f0      	b.n	8010e4c <_dtoa_r+0xb14>
 8010e6a:	f1b9 0f00 	cmp.w	r9, #0
 8010e6e:	9a00      	ldr	r2, [sp, #0]
 8010e70:	bfcc      	ite	gt
 8010e72:	464d      	movgt	r5, r9
 8010e74:	2501      	movle	r5, #1
 8010e76:	4415      	add	r5, r2
 8010e78:	f04f 0800 	mov.w	r8, #0
 8010e7c:	4659      	mov	r1, fp
 8010e7e:	2201      	movs	r2, #1
 8010e80:	4620      	mov	r0, r4
 8010e82:	9301      	str	r3, [sp, #4]
 8010e84:	f000 fc82 	bl	801178c <__lshift>
 8010e88:	4631      	mov	r1, r6
 8010e8a:	4683      	mov	fp, r0
 8010e8c:	f000 fcea 	bl	8011864 <__mcmp>
 8010e90:	2800      	cmp	r0, #0
 8010e92:	dcb2      	bgt.n	8010dfa <_dtoa_r+0xac2>
 8010e94:	d102      	bne.n	8010e9c <_dtoa_r+0xb64>
 8010e96:	9b01      	ldr	r3, [sp, #4]
 8010e98:	07db      	lsls	r3, r3, #31
 8010e9a:	d4ae      	bmi.n	8010dfa <_dtoa_r+0xac2>
 8010e9c:	462b      	mov	r3, r5
 8010e9e:	461d      	mov	r5, r3
 8010ea0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ea4:	2a30      	cmp	r2, #48	; 0x30
 8010ea6:	d0fa      	beq.n	8010e9e <_dtoa_r+0xb66>
 8010ea8:	e6f7      	b.n	8010c9a <_dtoa_r+0x962>
 8010eaa:	9a00      	ldr	r2, [sp, #0]
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d1a5      	bne.n	8010dfc <_dtoa_r+0xac4>
 8010eb0:	f10a 0a01 	add.w	sl, sl, #1
 8010eb4:	2331      	movs	r3, #49	; 0x31
 8010eb6:	e779      	b.n	8010dac <_dtoa_r+0xa74>
 8010eb8:	4b13      	ldr	r3, [pc, #76]	; (8010f08 <_dtoa_r+0xbd0>)
 8010eba:	f7ff baaf 	b.w	801041c <_dtoa_r+0xe4>
 8010ebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f47f aa86 	bne.w	80103d2 <_dtoa_r+0x9a>
 8010ec6:	4b11      	ldr	r3, [pc, #68]	; (8010f0c <_dtoa_r+0xbd4>)
 8010ec8:	f7ff baa8 	b.w	801041c <_dtoa_r+0xe4>
 8010ecc:	f1b9 0f00 	cmp.w	r9, #0
 8010ed0:	dc03      	bgt.n	8010eda <_dtoa_r+0xba2>
 8010ed2:	9b05      	ldr	r3, [sp, #20]
 8010ed4:	2b02      	cmp	r3, #2
 8010ed6:	f73f aec9 	bgt.w	8010c6c <_dtoa_r+0x934>
 8010eda:	9d00      	ldr	r5, [sp, #0]
 8010edc:	4631      	mov	r1, r6
 8010ede:	4658      	mov	r0, fp
 8010ee0:	f7ff f99e 	bl	8010220 <quorem>
 8010ee4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010ee8:	f805 3b01 	strb.w	r3, [r5], #1
 8010eec:	9a00      	ldr	r2, [sp, #0]
 8010eee:	1aaa      	subs	r2, r5, r2
 8010ef0:	4591      	cmp	r9, r2
 8010ef2:	ddba      	ble.n	8010e6a <_dtoa_r+0xb32>
 8010ef4:	4659      	mov	r1, fp
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	220a      	movs	r2, #10
 8010efa:	4620      	mov	r0, r4
 8010efc:	f000 fa96 	bl	801142c <__multadd>
 8010f00:	4683      	mov	fp, r0
 8010f02:	e7eb      	b.n	8010edc <_dtoa_r+0xba4>
 8010f04:	080142d4 	.word	0x080142d4
 8010f08:	0801412c 	.word	0x0801412c
 8010f0c:	08014251 	.word	0x08014251

08010f10 <__sflush_r>:
 8010f10:	898a      	ldrh	r2, [r1, #12]
 8010f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f16:	4605      	mov	r5, r0
 8010f18:	0710      	lsls	r0, r2, #28
 8010f1a:	460c      	mov	r4, r1
 8010f1c:	d458      	bmi.n	8010fd0 <__sflush_r+0xc0>
 8010f1e:	684b      	ldr	r3, [r1, #4]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	dc05      	bgt.n	8010f30 <__sflush_r+0x20>
 8010f24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	dc02      	bgt.n	8010f30 <__sflush_r+0x20>
 8010f2a:	2000      	movs	r0, #0
 8010f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f32:	2e00      	cmp	r6, #0
 8010f34:	d0f9      	beq.n	8010f2a <__sflush_r+0x1a>
 8010f36:	2300      	movs	r3, #0
 8010f38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010f3c:	682f      	ldr	r7, [r5, #0]
 8010f3e:	602b      	str	r3, [r5, #0]
 8010f40:	d032      	beq.n	8010fa8 <__sflush_r+0x98>
 8010f42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010f44:	89a3      	ldrh	r3, [r4, #12]
 8010f46:	075a      	lsls	r2, r3, #29
 8010f48:	d505      	bpl.n	8010f56 <__sflush_r+0x46>
 8010f4a:	6863      	ldr	r3, [r4, #4]
 8010f4c:	1ac0      	subs	r0, r0, r3
 8010f4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010f50:	b10b      	cbz	r3, 8010f56 <__sflush_r+0x46>
 8010f52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010f54:	1ac0      	subs	r0, r0, r3
 8010f56:	2300      	movs	r3, #0
 8010f58:	4602      	mov	r2, r0
 8010f5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f5c:	6a21      	ldr	r1, [r4, #32]
 8010f5e:	4628      	mov	r0, r5
 8010f60:	47b0      	blx	r6
 8010f62:	1c43      	adds	r3, r0, #1
 8010f64:	89a3      	ldrh	r3, [r4, #12]
 8010f66:	d106      	bne.n	8010f76 <__sflush_r+0x66>
 8010f68:	6829      	ldr	r1, [r5, #0]
 8010f6a:	291d      	cmp	r1, #29
 8010f6c:	d82c      	bhi.n	8010fc8 <__sflush_r+0xb8>
 8010f6e:	4a2a      	ldr	r2, [pc, #168]	; (8011018 <__sflush_r+0x108>)
 8010f70:	40ca      	lsrs	r2, r1
 8010f72:	07d6      	lsls	r6, r2, #31
 8010f74:	d528      	bpl.n	8010fc8 <__sflush_r+0xb8>
 8010f76:	2200      	movs	r2, #0
 8010f78:	6062      	str	r2, [r4, #4]
 8010f7a:	04d9      	lsls	r1, r3, #19
 8010f7c:	6922      	ldr	r2, [r4, #16]
 8010f7e:	6022      	str	r2, [r4, #0]
 8010f80:	d504      	bpl.n	8010f8c <__sflush_r+0x7c>
 8010f82:	1c42      	adds	r2, r0, #1
 8010f84:	d101      	bne.n	8010f8a <__sflush_r+0x7a>
 8010f86:	682b      	ldr	r3, [r5, #0]
 8010f88:	b903      	cbnz	r3, 8010f8c <__sflush_r+0x7c>
 8010f8a:	6560      	str	r0, [r4, #84]	; 0x54
 8010f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f8e:	602f      	str	r7, [r5, #0]
 8010f90:	2900      	cmp	r1, #0
 8010f92:	d0ca      	beq.n	8010f2a <__sflush_r+0x1a>
 8010f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f98:	4299      	cmp	r1, r3
 8010f9a:	d002      	beq.n	8010fa2 <__sflush_r+0x92>
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	f000 fd71 	bl	8011a84 <_free_r>
 8010fa2:	2000      	movs	r0, #0
 8010fa4:	6360      	str	r0, [r4, #52]	; 0x34
 8010fa6:	e7c1      	b.n	8010f2c <__sflush_r+0x1c>
 8010fa8:	6a21      	ldr	r1, [r4, #32]
 8010faa:	2301      	movs	r3, #1
 8010fac:	4628      	mov	r0, r5
 8010fae:	47b0      	blx	r6
 8010fb0:	1c41      	adds	r1, r0, #1
 8010fb2:	d1c7      	bne.n	8010f44 <__sflush_r+0x34>
 8010fb4:	682b      	ldr	r3, [r5, #0]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d0c4      	beq.n	8010f44 <__sflush_r+0x34>
 8010fba:	2b1d      	cmp	r3, #29
 8010fbc:	d001      	beq.n	8010fc2 <__sflush_r+0xb2>
 8010fbe:	2b16      	cmp	r3, #22
 8010fc0:	d101      	bne.n	8010fc6 <__sflush_r+0xb6>
 8010fc2:	602f      	str	r7, [r5, #0]
 8010fc4:	e7b1      	b.n	8010f2a <__sflush_r+0x1a>
 8010fc6:	89a3      	ldrh	r3, [r4, #12]
 8010fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fcc:	81a3      	strh	r3, [r4, #12]
 8010fce:	e7ad      	b.n	8010f2c <__sflush_r+0x1c>
 8010fd0:	690f      	ldr	r7, [r1, #16]
 8010fd2:	2f00      	cmp	r7, #0
 8010fd4:	d0a9      	beq.n	8010f2a <__sflush_r+0x1a>
 8010fd6:	0793      	lsls	r3, r2, #30
 8010fd8:	680e      	ldr	r6, [r1, #0]
 8010fda:	bf08      	it	eq
 8010fdc:	694b      	ldreq	r3, [r1, #20]
 8010fde:	600f      	str	r7, [r1, #0]
 8010fe0:	bf18      	it	ne
 8010fe2:	2300      	movne	r3, #0
 8010fe4:	eba6 0807 	sub.w	r8, r6, r7
 8010fe8:	608b      	str	r3, [r1, #8]
 8010fea:	f1b8 0f00 	cmp.w	r8, #0
 8010fee:	dd9c      	ble.n	8010f2a <__sflush_r+0x1a>
 8010ff0:	6a21      	ldr	r1, [r4, #32]
 8010ff2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010ff4:	4643      	mov	r3, r8
 8010ff6:	463a      	mov	r2, r7
 8010ff8:	4628      	mov	r0, r5
 8010ffa:	47b0      	blx	r6
 8010ffc:	2800      	cmp	r0, #0
 8010ffe:	dc06      	bgt.n	801100e <__sflush_r+0xfe>
 8011000:	89a3      	ldrh	r3, [r4, #12]
 8011002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011006:	81a3      	strh	r3, [r4, #12]
 8011008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801100c:	e78e      	b.n	8010f2c <__sflush_r+0x1c>
 801100e:	4407      	add	r7, r0
 8011010:	eba8 0800 	sub.w	r8, r8, r0
 8011014:	e7e9      	b.n	8010fea <__sflush_r+0xda>
 8011016:	bf00      	nop
 8011018:	20400001 	.word	0x20400001

0801101c <_fflush_r>:
 801101c:	b538      	push	{r3, r4, r5, lr}
 801101e:	690b      	ldr	r3, [r1, #16]
 8011020:	4605      	mov	r5, r0
 8011022:	460c      	mov	r4, r1
 8011024:	b913      	cbnz	r3, 801102c <_fflush_r+0x10>
 8011026:	2500      	movs	r5, #0
 8011028:	4628      	mov	r0, r5
 801102a:	bd38      	pop	{r3, r4, r5, pc}
 801102c:	b118      	cbz	r0, 8011036 <_fflush_r+0x1a>
 801102e:	6983      	ldr	r3, [r0, #24]
 8011030:	b90b      	cbnz	r3, 8011036 <_fflush_r+0x1a>
 8011032:	f000 f887 	bl	8011144 <__sinit>
 8011036:	4b14      	ldr	r3, [pc, #80]	; (8011088 <_fflush_r+0x6c>)
 8011038:	429c      	cmp	r4, r3
 801103a:	d11b      	bne.n	8011074 <_fflush_r+0x58>
 801103c:	686c      	ldr	r4, [r5, #4]
 801103e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d0ef      	beq.n	8011026 <_fflush_r+0xa>
 8011046:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011048:	07d0      	lsls	r0, r2, #31
 801104a:	d404      	bmi.n	8011056 <_fflush_r+0x3a>
 801104c:	0599      	lsls	r1, r3, #22
 801104e:	d402      	bmi.n	8011056 <_fflush_r+0x3a>
 8011050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011052:	f000 f91a 	bl	801128a <__retarget_lock_acquire_recursive>
 8011056:	4628      	mov	r0, r5
 8011058:	4621      	mov	r1, r4
 801105a:	f7ff ff59 	bl	8010f10 <__sflush_r>
 801105e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011060:	07da      	lsls	r2, r3, #31
 8011062:	4605      	mov	r5, r0
 8011064:	d4e0      	bmi.n	8011028 <_fflush_r+0xc>
 8011066:	89a3      	ldrh	r3, [r4, #12]
 8011068:	059b      	lsls	r3, r3, #22
 801106a:	d4dd      	bmi.n	8011028 <_fflush_r+0xc>
 801106c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801106e:	f000 f90d 	bl	801128c <__retarget_lock_release_recursive>
 8011072:	e7d9      	b.n	8011028 <_fflush_r+0xc>
 8011074:	4b05      	ldr	r3, [pc, #20]	; (801108c <_fflush_r+0x70>)
 8011076:	429c      	cmp	r4, r3
 8011078:	d101      	bne.n	801107e <_fflush_r+0x62>
 801107a:	68ac      	ldr	r4, [r5, #8]
 801107c:	e7df      	b.n	801103e <_fflush_r+0x22>
 801107e:	4b04      	ldr	r3, [pc, #16]	; (8011090 <_fflush_r+0x74>)
 8011080:	429c      	cmp	r4, r3
 8011082:	bf08      	it	eq
 8011084:	68ec      	ldreq	r4, [r5, #12]
 8011086:	e7da      	b.n	801103e <_fflush_r+0x22>
 8011088:	08014308 	.word	0x08014308
 801108c:	08014328 	.word	0x08014328
 8011090:	080142e8 	.word	0x080142e8

08011094 <std>:
 8011094:	2300      	movs	r3, #0
 8011096:	b510      	push	{r4, lr}
 8011098:	4604      	mov	r4, r0
 801109a:	e9c0 3300 	strd	r3, r3, [r0]
 801109e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80110a2:	6083      	str	r3, [r0, #8]
 80110a4:	8181      	strh	r1, [r0, #12]
 80110a6:	6643      	str	r3, [r0, #100]	; 0x64
 80110a8:	81c2      	strh	r2, [r0, #14]
 80110aa:	6183      	str	r3, [r0, #24]
 80110ac:	4619      	mov	r1, r3
 80110ae:	2208      	movs	r2, #8
 80110b0:	305c      	adds	r0, #92	; 0x5c
 80110b2:	f7fe fa67 	bl	800f584 <memset>
 80110b6:	4b05      	ldr	r3, [pc, #20]	; (80110cc <std+0x38>)
 80110b8:	6263      	str	r3, [r4, #36]	; 0x24
 80110ba:	4b05      	ldr	r3, [pc, #20]	; (80110d0 <std+0x3c>)
 80110bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80110be:	4b05      	ldr	r3, [pc, #20]	; (80110d4 <std+0x40>)
 80110c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80110c2:	4b05      	ldr	r3, [pc, #20]	; (80110d8 <std+0x44>)
 80110c4:	6224      	str	r4, [r4, #32]
 80110c6:	6323      	str	r3, [r4, #48]	; 0x30
 80110c8:	bd10      	pop	{r4, pc}
 80110ca:	bf00      	nop
 80110cc:	08011ead 	.word	0x08011ead
 80110d0:	08011ecf 	.word	0x08011ecf
 80110d4:	08011f07 	.word	0x08011f07
 80110d8:	08011f2b 	.word	0x08011f2b

080110dc <_cleanup_r>:
 80110dc:	4901      	ldr	r1, [pc, #4]	; (80110e4 <_cleanup_r+0x8>)
 80110de:	f000 b8af 	b.w	8011240 <_fwalk_reent>
 80110e2:	bf00      	nop
 80110e4:	0801101d 	.word	0x0801101d

080110e8 <__sfmoreglue>:
 80110e8:	b570      	push	{r4, r5, r6, lr}
 80110ea:	1e4a      	subs	r2, r1, #1
 80110ec:	2568      	movs	r5, #104	; 0x68
 80110ee:	4355      	muls	r5, r2
 80110f0:	460e      	mov	r6, r1
 80110f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80110f6:	f000 fd15 	bl	8011b24 <_malloc_r>
 80110fa:	4604      	mov	r4, r0
 80110fc:	b140      	cbz	r0, 8011110 <__sfmoreglue+0x28>
 80110fe:	2100      	movs	r1, #0
 8011100:	e9c0 1600 	strd	r1, r6, [r0]
 8011104:	300c      	adds	r0, #12
 8011106:	60a0      	str	r0, [r4, #8]
 8011108:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801110c:	f7fe fa3a 	bl	800f584 <memset>
 8011110:	4620      	mov	r0, r4
 8011112:	bd70      	pop	{r4, r5, r6, pc}

08011114 <__sfp_lock_acquire>:
 8011114:	4801      	ldr	r0, [pc, #4]	; (801111c <__sfp_lock_acquire+0x8>)
 8011116:	f000 b8b8 	b.w	801128a <__retarget_lock_acquire_recursive>
 801111a:	bf00      	nop
 801111c:	2000b67c 	.word	0x2000b67c

08011120 <__sfp_lock_release>:
 8011120:	4801      	ldr	r0, [pc, #4]	; (8011128 <__sfp_lock_release+0x8>)
 8011122:	f000 b8b3 	b.w	801128c <__retarget_lock_release_recursive>
 8011126:	bf00      	nop
 8011128:	2000b67c 	.word	0x2000b67c

0801112c <__sinit_lock_acquire>:
 801112c:	4801      	ldr	r0, [pc, #4]	; (8011134 <__sinit_lock_acquire+0x8>)
 801112e:	f000 b8ac 	b.w	801128a <__retarget_lock_acquire_recursive>
 8011132:	bf00      	nop
 8011134:	2000b677 	.word	0x2000b677

08011138 <__sinit_lock_release>:
 8011138:	4801      	ldr	r0, [pc, #4]	; (8011140 <__sinit_lock_release+0x8>)
 801113a:	f000 b8a7 	b.w	801128c <__retarget_lock_release_recursive>
 801113e:	bf00      	nop
 8011140:	2000b677 	.word	0x2000b677

08011144 <__sinit>:
 8011144:	b510      	push	{r4, lr}
 8011146:	4604      	mov	r4, r0
 8011148:	f7ff fff0 	bl	801112c <__sinit_lock_acquire>
 801114c:	69a3      	ldr	r3, [r4, #24]
 801114e:	b11b      	cbz	r3, 8011158 <__sinit+0x14>
 8011150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011154:	f7ff bff0 	b.w	8011138 <__sinit_lock_release>
 8011158:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801115c:	6523      	str	r3, [r4, #80]	; 0x50
 801115e:	4b13      	ldr	r3, [pc, #76]	; (80111ac <__sinit+0x68>)
 8011160:	4a13      	ldr	r2, [pc, #76]	; (80111b0 <__sinit+0x6c>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	62a2      	str	r2, [r4, #40]	; 0x28
 8011166:	42a3      	cmp	r3, r4
 8011168:	bf04      	itt	eq
 801116a:	2301      	moveq	r3, #1
 801116c:	61a3      	streq	r3, [r4, #24]
 801116e:	4620      	mov	r0, r4
 8011170:	f000 f820 	bl	80111b4 <__sfp>
 8011174:	6060      	str	r0, [r4, #4]
 8011176:	4620      	mov	r0, r4
 8011178:	f000 f81c 	bl	80111b4 <__sfp>
 801117c:	60a0      	str	r0, [r4, #8]
 801117e:	4620      	mov	r0, r4
 8011180:	f000 f818 	bl	80111b4 <__sfp>
 8011184:	2200      	movs	r2, #0
 8011186:	60e0      	str	r0, [r4, #12]
 8011188:	2104      	movs	r1, #4
 801118a:	6860      	ldr	r0, [r4, #4]
 801118c:	f7ff ff82 	bl	8011094 <std>
 8011190:	68a0      	ldr	r0, [r4, #8]
 8011192:	2201      	movs	r2, #1
 8011194:	2109      	movs	r1, #9
 8011196:	f7ff ff7d 	bl	8011094 <std>
 801119a:	68e0      	ldr	r0, [r4, #12]
 801119c:	2202      	movs	r2, #2
 801119e:	2112      	movs	r1, #18
 80111a0:	f7ff ff78 	bl	8011094 <std>
 80111a4:	2301      	movs	r3, #1
 80111a6:	61a3      	str	r3, [r4, #24]
 80111a8:	e7d2      	b.n	8011150 <__sinit+0xc>
 80111aa:	bf00      	nop
 80111ac:	08014118 	.word	0x08014118
 80111b0:	080110dd 	.word	0x080110dd

080111b4 <__sfp>:
 80111b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111b6:	4607      	mov	r7, r0
 80111b8:	f7ff ffac 	bl	8011114 <__sfp_lock_acquire>
 80111bc:	4b1e      	ldr	r3, [pc, #120]	; (8011238 <__sfp+0x84>)
 80111be:	681e      	ldr	r6, [r3, #0]
 80111c0:	69b3      	ldr	r3, [r6, #24]
 80111c2:	b913      	cbnz	r3, 80111ca <__sfp+0x16>
 80111c4:	4630      	mov	r0, r6
 80111c6:	f7ff ffbd 	bl	8011144 <__sinit>
 80111ca:	3648      	adds	r6, #72	; 0x48
 80111cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80111d0:	3b01      	subs	r3, #1
 80111d2:	d503      	bpl.n	80111dc <__sfp+0x28>
 80111d4:	6833      	ldr	r3, [r6, #0]
 80111d6:	b30b      	cbz	r3, 801121c <__sfp+0x68>
 80111d8:	6836      	ldr	r6, [r6, #0]
 80111da:	e7f7      	b.n	80111cc <__sfp+0x18>
 80111dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80111e0:	b9d5      	cbnz	r5, 8011218 <__sfp+0x64>
 80111e2:	4b16      	ldr	r3, [pc, #88]	; (801123c <__sfp+0x88>)
 80111e4:	60e3      	str	r3, [r4, #12]
 80111e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80111ea:	6665      	str	r5, [r4, #100]	; 0x64
 80111ec:	f000 f84c 	bl	8011288 <__retarget_lock_init_recursive>
 80111f0:	f7ff ff96 	bl	8011120 <__sfp_lock_release>
 80111f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80111f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80111fc:	6025      	str	r5, [r4, #0]
 80111fe:	61a5      	str	r5, [r4, #24]
 8011200:	2208      	movs	r2, #8
 8011202:	4629      	mov	r1, r5
 8011204:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011208:	f7fe f9bc 	bl	800f584 <memset>
 801120c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011210:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011214:	4620      	mov	r0, r4
 8011216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011218:	3468      	adds	r4, #104	; 0x68
 801121a:	e7d9      	b.n	80111d0 <__sfp+0x1c>
 801121c:	2104      	movs	r1, #4
 801121e:	4638      	mov	r0, r7
 8011220:	f7ff ff62 	bl	80110e8 <__sfmoreglue>
 8011224:	4604      	mov	r4, r0
 8011226:	6030      	str	r0, [r6, #0]
 8011228:	2800      	cmp	r0, #0
 801122a:	d1d5      	bne.n	80111d8 <__sfp+0x24>
 801122c:	f7ff ff78 	bl	8011120 <__sfp_lock_release>
 8011230:	230c      	movs	r3, #12
 8011232:	603b      	str	r3, [r7, #0]
 8011234:	e7ee      	b.n	8011214 <__sfp+0x60>
 8011236:	bf00      	nop
 8011238:	08014118 	.word	0x08014118
 801123c:	ffff0001 	.word	0xffff0001

08011240 <_fwalk_reent>:
 8011240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011244:	4606      	mov	r6, r0
 8011246:	4688      	mov	r8, r1
 8011248:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801124c:	2700      	movs	r7, #0
 801124e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011252:	f1b9 0901 	subs.w	r9, r9, #1
 8011256:	d505      	bpl.n	8011264 <_fwalk_reent+0x24>
 8011258:	6824      	ldr	r4, [r4, #0]
 801125a:	2c00      	cmp	r4, #0
 801125c:	d1f7      	bne.n	801124e <_fwalk_reent+0xe>
 801125e:	4638      	mov	r0, r7
 8011260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011264:	89ab      	ldrh	r3, [r5, #12]
 8011266:	2b01      	cmp	r3, #1
 8011268:	d907      	bls.n	801127a <_fwalk_reent+0x3a>
 801126a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801126e:	3301      	adds	r3, #1
 8011270:	d003      	beq.n	801127a <_fwalk_reent+0x3a>
 8011272:	4629      	mov	r1, r5
 8011274:	4630      	mov	r0, r6
 8011276:	47c0      	blx	r8
 8011278:	4307      	orrs	r7, r0
 801127a:	3568      	adds	r5, #104	; 0x68
 801127c:	e7e9      	b.n	8011252 <_fwalk_reent+0x12>
	...

08011280 <_localeconv_r>:
 8011280:	4800      	ldr	r0, [pc, #0]	; (8011284 <_localeconv_r+0x4>)
 8011282:	4770      	bx	lr
 8011284:	20000170 	.word	0x20000170

08011288 <__retarget_lock_init_recursive>:
 8011288:	4770      	bx	lr

0801128a <__retarget_lock_acquire_recursive>:
 801128a:	4770      	bx	lr

0801128c <__retarget_lock_release_recursive>:
 801128c:	4770      	bx	lr

0801128e <__swhatbuf_r>:
 801128e:	b570      	push	{r4, r5, r6, lr}
 8011290:	460e      	mov	r6, r1
 8011292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011296:	2900      	cmp	r1, #0
 8011298:	b096      	sub	sp, #88	; 0x58
 801129a:	4614      	mov	r4, r2
 801129c:	461d      	mov	r5, r3
 801129e:	da07      	bge.n	80112b0 <__swhatbuf_r+0x22>
 80112a0:	2300      	movs	r3, #0
 80112a2:	602b      	str	r3, [r5, #0]
 80112a4:	89b3      	ldrh	r3, [r6, #12]
 80112a6:	061a      	lsls	r2, r3, #24
 80112a8:	d410      	bmi.n	80112cc <__swhatbuf_r+0x3e>
 80112aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112ae:	e00e      	b.n	80112ce <__swhatbuf_r+0x40>
 80112b0:	466a      	mov	r2, sp
 80112b2:	f000 fe91 	bl	8011fd8 <_fstat_r>
 80112b6:	2800      	cmp	r0, #0
 80112b8:	dbf2      	blt.n	80112a0 <__swhatbuf_r+0x12>
 80112ba:	9a01      	ldr	r2, [sp, #4]
 80112bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80112c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80112c4:	425a      	negs	r2, r3
 80112c6:	415a      	adcs	r2, r3
 80112c8:	602a      	str	r2, [r5, #0]
 80112ca:	e7ee      	b.n	80112aa <__swhatbuf_r+0x1c>
 80112cc:	2340      	movs	r3, #64	; 0x40
 80112ce:	2000      	movs	r0, #0
 80112d0:	6023      	str	r3, [r4, #0]
 80112d2:	b016      	add	sp, #88	; 0x58
 80112d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080112d8 <__smakebuf_r>:
 80112d8:	898b      	ldrh	r3, [r1, #12]
 80112da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80112dc:	079d      	lsls	r5, r3, #30
 80112de:	4606      	mov	r6, r0
 80112e0:	460c      	mov	r4, r1
 80112e2:	d507      	bpl.n	80112f4 <__smakebuf_r+0x1c>
 80112e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80112e8:	6023      	str	r3, [r4, #0]
 80112ea:	6123      	str	r3, [r4, #16]
 80112ec:	2301      	movs	r3, #1
 80112ee:	6163      	str	r3, [r4, #20]
 80112f0:	b002      	add	sp, #8
 80112f2:	bd70      	pop	{r4, r5, r6, pc}
 80112f4:	ab01      	add	r3, sp, #4
 80112f6:	466a      	mov	r2, sp
 80112f8:	f7ff ffc9 	bl	801128e <__swhatbuf_r>
 80112fc:	9900      	ldr	r1, [sp, #0]
 80112fe:	4605      	mov	r5, r0
 8011300:	4630      	mov	r0, r6
 8011302:	f000 fc0f 	bl	8011b24 <_malloc_r>
 8011306:	b948      	cbnz	r0, 801131c <__smakebuf_r+0x44>
 8011308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801130c:	059a      	lsls	r2, r3, #22
 801130e:	d4ef      	bmi.n	80112f0 <__smakebuf_r+0x18>
 8011310:	f023 0303 	bic.w	r3, r3, #3
 8011314:	f043 0302 	orr.w	r3, r3, #2
 8011318:	81a3      	strh	r3, [r4, #12]
 801131a:	e7e3      	b.n	80112e4 <__smakebuf_r+0xc>
 801131c:	4b0d      	ldr	r3, [pc, #52]	; (8011354 <__smakebuf_r+0x7c>)
 801131e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011320:	89a3      	ldrh	r3, [r4, #12]
 8011322:	6020      	str	r0, [r4, #0]
 8011324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011328:	81a3      	strh	r3, [r4, #12]
 801132a:	9b00      	ldr	r3, [sp, #0]
 801132c:	6163      	str	r3, [r4, #20]
 801132e:	9b01      	ldr	r3, [sp, #4]
 8011330:	6120      	str	r0, [r4, #16]
 8011332:	b15b      	cbz	r3, 801134c <__smakebuf_r+0x74>
 8011334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011338:	4630      	mov	r0, r6
 801133a:	f000 fe5f 	bl	8011ffc <_isatty_r>
 801133e:	b128      	cbz	r0, 801134c <__smakebuf_r+0x74>
 8011340:	89a3      	ldrh	r3, [r4, #12]
 8011342:	f023 0303 	bic.w	r3, r3, #3
 8011346:	f043 0301 	orr.w	r3, r3, #1
 801134a:	81a3      	strh	r3, [r4, #12]
 801134c:	89a0      	ldrh	r0, [r4, #12]
 801134e:	4305      	orrs	r5, r0
 8011350:	81a5      	strh	r5, [r4, #12]
 8011352:	e7cd      	b.n	80112f0 <__smakebuf_r+0x18>
 8011354:	080110dd 	.word	0x080110dd

08011358 <malloc>:
 8011358:	4b02      	ldr	r3, [pc, #8]	; (8011364 <malloc+0xc>)
 801135a:	4601      	mov	r1, r0
 801135c:	6818      	ldr	r0, [r3, #0]
 801135e:	f000 bbe1 	b.w	8011b24 <_malloc_r>
 8011362:	bf00      	nop
 8011364:	2000001c 	.word	0x2000001c

08011368 <_Balloc>:
 8011368:	b570      	push	{r4, r5, r6, lr}
 801136a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801136c:	4604      	mov	r4, r0
 801136e:	460d      	mov	r5, r1
 8011370:	b976      	cbnz	r6, 8011390 <_Balloc+0x28>
 8011372:	2010      	movs	r0, #16
 8011374:	f7ff fff0 	bl	8011358 <malloc>
 8011378:	4602      	mov	r2, r0
 801137a:	6260      	str	r0, [r4, #36]	; 0x24
 801137c:	b920      	cbnz	r0, 8011388 <_Balloc+0x20>
 801137e:	4b18      	ldr	r3, [pc, #96]	; (80113e0 <_Balloc+0x78>)
 8011380:	4818      	ldr	r0, [pc, #96]	; (80113e4 <_Balloc+0x7c>)
 8011382:	2166      	movs	r1, #102	; 0x66
 8011384:	f000 fde8 	bl	8011f58 <__assert_func>
 8011388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801138c:	6006      	str	r6, [r0, #0]
 801138e:	60c6      	str	r6, [r0, #12]
 8011390:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011392:	68f3      	ldr	r3, [r6, #12]
 8011394:	b183      	cbz	r3, 80113b8 <_Balloc+0x50>
 8011396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011398:	68db      	ldr	r3, [r3, #12]
 801139a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801139e:	b9b8      	cbnz	r0, 80113d0 <_Balloc+0x68>
 80113a0:	2101      	movs	r1, #1
 80113a2:	fa01 f605 	lsl.w	r6, r1, r5
 80113a6:	1d72      	adds	r2, r6, #5
 80113a8:	0092      	lsls	r2, r2, #2
 80113aa:	4620      	mov	r0, r4
 80113ac:	f000 fb5a 	bl	8011a64 <_calloc_r>
 80113b0:	b160      	cbz	r0, 80113cc <_Balloc+0x64>
 80113b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80113b6:	e00e      	b.n	80113d6 <_Balloc+0x6e>
 80113b8:	2221      	movs	r2, #33	; 0x21
 80113ba:	2104      	movs	r1, #4
 80113bc:	4620      	mov	r0, r4
 80113be:	f000 fb51 	bl	8011a64 <_calloc_r>
 80113c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113c4:	60f0      	str	r0, [r6, #12]
 80113c6:	68db      	ldr	r3, [r3, #12]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d1e4      	bne.n	8011396 <_Balloc+0x2e>
 80113cc:	2000      	movs	r0, #0
 80113ce:	bd70      	pop	{r4, r5, r6, pc}
 80113d0:	6802      	ldr	r2, [r0, #0]
 80113d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113d6:	2300      	movs	r3, #0
 80113d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80113dc:	e7f7      	b.n	80113ce <_Balloc+0x66>
 80113de:	bf00      	nop
 80113e0:	0801425e 	.word	0x0801425e
 80113e4:	08014348 	.word	0x08014348

080113e8 <_Bfree>:
 80113e8:	b570      	push	{r4, r5, r6, lr}
 80113ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80113ec:	4605      	mov	r5, r0
 80113ee:	460c      	mov	r4, r1
 80113f0:	b976      	cbnz	r6, 8011410 <_Bfree+0x28>
 80113f2:	2010      	movs	r0, #16
 80113f4:	f7ff ffb0 	bl	8011358 <malloc>
 80113f8:	4602      	mov	r2, r0
 80113fa:	6268      	str	r0, [r5, #36]	; 0x24
 80113fc:	b920      	cbnz	r0, 8011408 <_Bfree+0x20>
 80113fe:	4b09      	ldr	r3, [pc, #36]	; (8011424 <_Bfree+0x3c>)
 8011400:	4809      	ldr	r0, [pc, #36]	; (8011428 <_Bfree+0x40>)
 8011402:	218a      	movs	r1, #138	; 0x8a
 8011404:	f000 fda8 	bl	8011f58 <__assert_func>
 8011408:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801140c:	6006      	str	r6, [r0, #0]
 801140e:	60c6      	str	r6, [r0, #12]
 8011410:	b13c      	cbz	r4, 8011422 <_Bfree+0x3a>
 8011412:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011414:	6862      	ldr	r2, [r4, #4]
 8011416:	68db      	ldr	r3, [r3, #12]
 8011418:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801141c:	6021      	str	r1, [r4, #0]
 801141e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011422:	bd70      	pop	{r4, r5, r6, pc}
 8011424:	0801425e 	.word	0x0801425e
 8011428:	08014348 	.word	0x08014348

0801142c <__multadd>:
 801142c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011430:	690e      	ldr	r6, [r1, #16]
 8011432:	4607      	mov	r7, r0
 8011434:	4698      	mov	r8, r3
 8011436:	460c      	mov	r4, r1
 8011438:	f101 0014 	add.w	r0, r1, #20
 801143c:	2300      	movs	r3, #0
 801143e:	6805      	ldr	r5, [r0, #0]
 8011440:	b2a9      	uxth	r1, r5
 8011442:	fb02 8101 	mla	r1, r2, r1, r8
 8011446:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801144a:	0c2d      	lsrs	r5, r5, #16
 801144c:	fb02 c505 	mla	r5, r2, r5, ip
 8011450:	b289      	uxth	r1, r1
 8011452:	3301      	adds	r3, #1
 8011454:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011458:	429e      	cmp	r6, r3
 801145a:	f840 1b04 	str.w	r1, [r0], #4
 801145e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011462:	dcec      	bgt.n	801143e <__multadd+0x12>
 8011464:	f1b8 0f00 	cmp.w	r8, #0
 8011468:	d022      	beq.n	80114b0 <__multadd+0x84>
 801146a:	68a3      	ldr	r3, [r4, #8]
 801146c:	42b3      	cmp	r3, r6
 801146e:	dc19      	bgt.n	80114a4 <__multadd+0x78>
 8011470:	6861      	ldr	r1, [r4, #4]
 8011472:	4638      	mov	r0, r7
 8011474:	3101      	adds	r1, #1
 8011476:	f7ff ff77 	bl	8011368 <_Balloc>
 801147a:	4605      	mov	r5, r0
 801147c:	b928      	cbnz	r0, 801148a <__multadd+0x5e>
 801147e:	4602      	mov	r2, r0
 8011480:	4b0d      	ldr	r3, [pc, #52]	; (80114b8 <__multadd+0x8c>)
 8011482:	480e      	ldr	r0, [pc, #56]	; (80114bc <__multadd+0x90>)
 8011484:	21b5      	movs	r1, #181	; 0xb5
 8011486:	f000 fd67 	bl	8011f58 <__assert_func>
 801148a:	6922      	ldr	r2, [r4, #16]
 801148c:	3202      	adds	r2, #2
 801148e:	f104 010c 	add.w	r1, r4, #12
 8011492:	0092      	lsls	r2, r2, #2
 8011494:	300c      	adds	r0, #12
 8011496:	f7fe f867 	bl	800f568 <memcpy>
 801149a:	4621      	mov	r1, r4
 801149c:	4638      	mov	r0, r7
 801149e:	f7ff ffa3 	bl	80113e8 <_Bfree>
 80114a2:	462c      	mov	r4, r5
 80114a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80114a8:	3601      	adds	r6, #1
 80114aa:	f8c3 8014 	str.w	r8, [r3, #20]
 80114ae:	6126      	str	r6, [r4, #16]
 80114b0:	4620      	mov	r0, r4
 80114b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114b6:	bf00      	nop
 80114b8:	080142d4 	.word	0x080142d4
 80114bc:	08014348 	.word	0x08014348

080114c0 <__hi0bits>:
 80114c0:	0c03      	lsrs	r3, r0, #16
 80114c2:	041b      	lsls	r3, r3, #16
 80114c4:	b9d3      	cbnz	r3, 80114fc <__hi0bits+0x3c>
 80114c6:	0400      	lsls	r0, r0, #16
 80114c8:	2310      	movs	r3, #16
 80114ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80114ce:	bf04      	itt	eq
 80114d0:	0200      	lsleq	r0, r0, #8
 80114d2:	3308      	addeq	r3, #8
 80114d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80114d8:	bf04      	itt	eq
 80114da:	0100      	lsleq	r0, r0, #4
 80114dc:	3304      	addeq	r3, #4
 80114de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80114e2:	bf04      	itt	eq
 80114e4:	0080      	lsleq	r0, r0, #2
 80114e6:	3302      	addeq	r3, #2
 80114e8:	2800      	cmp	r0, #0
 80114ea:	db05      	blt.n	80114f8 <__hi0bits+0x38>
 80114ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80114f0:	f103 0301 	add.w	r3, r3, #1
 80114f4:	bf08      	it	eq
 80114f6:	2320      	moveq	r3, #32
 80114f8:	4618      	mov	r0, r3
 80114fa:	4770      	bx	lr
 80114fc:	2300      	movs	r3, #0
 80114fe:	e7e4      	b.n	80114ca <__hi0bits+0xa>

08011500 <__lo0bits>:
 8011500:	6803      	ldr	r3, [r0, #0]
 8011502:	f013 0207 	ands.w	r2, r3, #7
 8011506:	4601      	mov	r1, r0
 8011508:	d00b      	beq.n	8011522 <__lo0bits+0x22>
 801150a:	07da      	lsls	r2, r3, #31
 801150c:	d424      	bmi.n	8011558 <__lo0bits+0x58>
 801150e:	0798      	lsls	r0, r3, #30
 8011510:	bf49      	itett	mi
 8011512:	085b      	lsrmi	r3, r3, #1
 8011514:	089b      	lsrpl	r3, r3, #2
 8011516:	2001      	movmi	r0, #1
 8011518:	600b      	strmi	r3, [r1, #0]
 801151a:	bf5c      	itt	pl
 801151c:	600b      	strpl	r3, [r1, #0]
 801151e:	2002      	movpl	r0, #2
 8011520:	4770      	bx	lr
 8011522:	b298      	uxth	r0, r3
 8011524:	b9b0      	cbnz	r0, 8011554 <__lo0bits+0x54>
 8011526:	0c1b      	lsrs	r3, r3, #16
 8011528:	2010      	movs	r0, #16
 801152a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801152e:	bf04      	itt	eq
 8011530:	0a1b      	lsreq	r3, r3, #8
 8011532:	3008      	addeq	r0, #8
 8011534:	071a      	lsls	r2, r3, #28
 8011536:	bf04      	itt	eq
 8011538:	091b      	lsreq	r3, r3, #4
 801153a:	3004      	addeq	r0, #4
 801153c:	079a      	lsls	r2, r3, #30
 801153e:	bf04      	itt	eq
 8011540:	089b      	lsreq	r3, r3, #2
 8011542:	3002      	addeq	r0, #2
 8011544:	07da      	lsls	r2, r3, #31
 8011546:	d403      	bmi.n	8011550 <__lo0bits+0x50>
 8011548:	085b      	lsrs	r3, r3, #1
 801154a:	f100 0001 	add.w	r0, r0, #1
 801154e:	d005      	beq.n	801155c <__lo0bits+0x5c>
 8011550:	600b      	str	r3, [r1, #0]
 8011552:	4770      	bx	lr
 8011554:	4610      	mov	r0, r2
 8011556:	e7e8      	b.n	801152a <__lo0bits+0x2a>
 8011558:	2000      	movs	r0, #0
 801155a:	4770      	bx	lr
 801155c:	2020      	movs	r0, #32
 801155e:	4770      	bx	lr

08011560 <__i2b>:
 8011560:	b510      	push	{r4, lr}
 8011562:	460c      	mov	r4, r1
 8011564:	2101      	movs	r1, #1
 8011566:	f7ff feff 	bl	8011368 <_Balloc>
 801156a:	4602      	mov	r2, r0
 801156c:	b928      	cbnz	r0, 801157a <__i2b+0x1a>
 801156e:	4b05      	ldr	r3, [pc, #20]	; (8011584 <__i2b+0x24>)
 8011570:	4805      	ldr	r0, [pc, #20]	; (8011588 <__i2b+0x28>)
 8011572:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011576:	f000 fcef 	bl	8011f58 <__assert_func>
 801157a:	2301      	movs	r3, #1
 801157c:	6144      	str	r4, [r0, #20]
 801157e:	6103      	str	r3, [r0, #16]
 8011580:	bd10      	pop	{r4, pc}
 8011582:	bf00      	nop
 8011584:	080142d4 	.word	0x080142d4
 8011588:	08014348 	.word	0x08014348

0801158c <__multiply>:
 801158c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011590:	4614      	mov	r4, r2
 8011592:	690a      	ldr	r2, [r1, #16]
 8011594:	6923      	ldr	r3, [r4, #16]
 8011596:	429a      	cmp	r2, r3
 8011598:	bfb8      	it	lt
 801159a:	460b      	movlt	r3, r1
 801159c:	460d      	mov	r5, r1
 801159e:	bfbc      	itt	lt
 80115a0:	4625      	movlt	r5, r4
 80115a2:	461c      	movlt	r4, r3
 80115a4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80115a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80115ac:	68ab      	ldr	r3, [r5, #8]
 80115ae:	6869      	ldr	r1, [r5, #4]
 80115b0:	eb0a 0709 	add.w	r7, sl, r9
 80115b4:	42bb      	cmp	r3, r7
 80115b6:	b085      	sub	sp, #20
 80115b8:	bfb8      	it	lt
 80115ba:	3101      	addlt	r1, #1
 80115bc:	f7ff fed4 	bl	8011368 <_Balloc>
 80115c0:	b930      	cbnz	r0, 80115d0 <__multiply+0x44>
 80115c2:	4602      	mov	r2, r0
 80115c4:	4b42      	ldr	r3, [pc, #264]	; (80116d0 <__multiply+0x144>)
 80115c6:	4843      	ldr	r0, [pc, #268]	; (80116d4 <__multiply+0x148>)
 80115c8:	f240 115d 	movw	r1, #349	; 0x15d
 80115cc:	f000 fcc4 	bl	8011f58 <__assert_func>
 80115d0:	f100 0614 	add.w	r6, r0, #20
 80115d4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80115d8:	4633      	mov	r3, r6
 80115da:	2200      	movs	r2, #0
 80115dc:	4543      	cmp	r3, r8
 80115de:	d31e      	bcc.n	801161e <__multiply+0x92>
 80115e0:	f105 0c14 	add.w	ip, r5, #20
 80115e4:	f104 0314 	add.w	r3, r4, #20
 80115e8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80115ec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80115f0:	9202      	str	r2, [sp, #8]
 80115f2:	ebac 0205 	sub.w	r2, ip, r5
 80115f6:	3a15      	subs	r2, #21
 80115f8:	f022 0203 	bic.w	r2, r2, #3
 80115fc:	3204      	adds	r2, #4
 80115fe:	f105 0115 	add.w	r1, r5, #21
 8011602:	458c      	cmp	ip, r1
 8011604:	bf38      	it	cc
 8011606:	2204      	movcc	r2, #4
 8011608:	9201      	str	r2, [sp, #4]
 801160a:	9a02      	ldr	r2, [sp, #8]
 801160c:	9303      	str	r3, [sp, #12]
 801160e:	429a      	cmp	r2, r3
 8011610:	d808      	bhi.n	8011624 <__multiply+0x98>
 8011612:	2f00      	cmp	r7, #0
 8011614:	dc55      	bgt.n	80116c2 <__multiply+0x136>
 8011616:	6107      	str	r7, [r0, #16]
 8011618:	b005      	add	sp, #20
 801161a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801161e:	f843 2b04 	str.w	r2, [r3], #4
 8011622:	e7db      	b.n	80115dc <__multiply+0x50>
 8011624:	f8b3 a000 	ldrh.w	sl, [r3]
 8011628:	f1ba 0f00 	cmp.w	sl, #0
 801162c:	d020      	beq.n	8011670 <__multiply+0xe4>
 801162e:	f105 0e14 	add.w	lr, r5, #20
 8011632:	46b1      	mov	r9, r6
 8011634:	2200      	movs	r2, #0
 8011636:	f85e 4b04 	ldr.w	r4, [lr], #4
 801163a:	f8d9 b000 	ldr.w	fp, [r9]
 801163e:	b2a1      	uxth	r1, r4
 8011640:	fa1f fb8b 	uxth.w	fp, fp
 8011644:	fb0a b101 	mla	r1, sl, r1, fp
 8011648:	4411      	add	r1, r2
 801164a:	f8d9 2000 	ldr.w	r2, [r9]
 801164e:	0c24      	lsrs	r4, r4, #16
 8011650:	0c12      	lsrs	r2, r2, #16
 8011652:	fb0a 2404 	mla	r4, sl, r4, r2
 8011656:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801165a:	b289      	uxth	r1, r1
 801165c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011660:	45f4      	cmp	ip, lr
 8011662:	f849 1b04 	str.w	r1, [r9], #4
 8011666:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801166a:	d8e4      	bhi.n	8011636 <__multiply+0xaa>
 801166c:	9901      	ldr	r1, [sp, #4]
 801166e:	5072      	str	r2, [r6, r1]
 8011670:	9a03      	ldr	r2, [sp, #12]
 8011672:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011676:	3304      	adds	r3, #4
 8011678:	f1b9 0f00 	cmp.w	r9, #0
 801167c:	d01f      	beq.n	80116be <__multiply+0x132>
 801167e:	6834      	ldr	r4, [r6, #0]
 8011680:	f105 0114 	add.w	r1, r5, #20
 8011684:	46b6      	mov	lr, r6
 8011686:	f04f 0a00 	mov.w	sl, #0
 801168a:	880a      	ldrh	r2, [r1, #0]
 801168c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011690:	fb09 b202 	mla	r2, r9, r2, fp
 8011694:	4492      	add	sl, r2
 8011696:	b2a4      	uxth	r4, r4
 8011698:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801169c:	f84e 4b04 	str.w	r4, [lr], #4
 80116a0:	f851 4b04 	ldr.w	r4, [r1], #4
 80116a4:	f8be 2000 	ldrh.w	r2, [lr]
 80116a8:	0c24      	lsrs	r4, r4, #16
 80116aa:	fb09 2404 	mla	r4, r9, r4, r2
 80116ae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80116b2:	458c      	cmp	ip, r1
 80116b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80116b8:	d8e7      	bhi.n	801168a <__multiply+0xfe>
 80116ba:	9a01      	ldr	r2, [sp, #4]
 80116bc:	50b4      	str	r4, [r6, r2]
 80116be:	3604      	adds	r6, #4
 80116c0:	e7a3      	b.n	801160a <__multiply+0x7e>
 80116c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d1a5      	bne.n	8011616 <__multiply+0x8a>
 80116ca:	3f01      	subs	r7, #1
 80116cc:	e7a1      	b.n	8011612 <__multiply+0x86>
 80116ce:	bf00      	nop
 80116d0:	080142d4 	.word	0x080142d4
 80116d4:	08014348 	.word	0x08014348

080116d8 <__pow5mult>:
 80116d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116dc:	4615      	mov	r5, r2
 80116de:	f012 0203 	ands.w	r2, r2, #3
 80116e2:	4606      	mov	r6, r0
 80116e4:	460f      	mov	r7, r1
 80116e6:	d007      	beq.n	80116f8 <__pow5mult+0x20>
 80116e8:	4c25      	ldr	r4, [pc, #148]	; (8011780 <__pow5mult+0xa8>)
 80116ea:	3a01      	subs	r2, #1
 80116ec:	2300      	movs	r3, #0
 80116ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80116f2:	f7ff fe9b 	bl	801142c <__multadd>
 80116f6:	4607      	mov	r7, r0
 80116f8:	10ad      	asrs	r5, r5, #2
 80116fa:	d03d      	beq.n	8011778 <__pow5mult+0xa0>
 80116fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80116fe:	b97c      	cbnz	r4, 8011720 <__pow5mult+0x48>
 8011700:	2010      	movs	r0, #16
 8011702:	f7ff fe29 	bl	8011358 <malloc>
 8011706:	4602      	mov	r2, r0
 8011708:	6270      	str	r0, [r6, #36]	; 0x24
 801170a:	b928      	cbnz	r0, 8011718 <__pow5mult+0x40>
 801170c:	4b1d      	ldr	r3, [pc, #116]	; (8011784 <__pow5mult+0xac>)
 801170e:	481e      	ldr	r0, [pc, #120]	; (8011788 <__pow5mult+0xb0>)
 8011710:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011714:	f000 fc20 	bl	8011f58 <__assert_func>
 8011718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801171c:	6004      	str	r4, [r0, #0]
 801171e:	60c4      	str	r4, [r0, #12]
 8011720:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011728:	b94c      	cbnz	r4, 801173e <__pow5mult+0x66>
 801172a:	f240 2171 	movw	r1, #625	; 0x271
 801172e:	4630      	mov	r0, r6
 8011730:	f7ff ff16 	bl	8011560 <__i2b>
 8011734:	2300      	movs	r3, #0
 8011736:	f8c8 0008 	str.w	r0, [r8, #8]
 801173a:	4604      	mov	r4, r0
 801173c:	6003      	str	r3, [r0, #0]
 801173e:	f04f 0900 	mov.w	r9, #0
 8011742:	07eb      	lsls	r3, r5, #31
 8011744:	d50a      	bpl.n	801175c <__pow5mult+0x84>
 8011746:	4639      	mov	r1, r7
 8011748:	4622      	mov	r2, r4
 801174a:	4630      	mov	r0, r6
 801174c:	f7ff ff1e 	bl	801158c <__multiply>
 8011750:	4639      	mov	r1, r7
 8011752:	4680      	mov	r8, r0
 8011754:	4630      	mov	r0, r6
 8011756:	f7ff fe47 	bl	80113e8 <_Bfree>
 801175a:	4647      	mov	r7, r8
 801175c:	106d      	asrs	r5, r5, #1
 801175e:	d00b      	beq.n	8011778 <__pow5mult+0xa0>
 8011760:	6820      	ldr	r0, [r4, #0]
 8011762:	b938      	cbnz	r0, 8011774 <__pow5mult+0x9c>
 8011764:	4622      	mov	r2, r4
 8011766:	4621      	mov	r1, r4
 8011768:	4630      	mov	r0, r6
 801176a:	f7ff ff0f 	bl	801158c <__multiply>
 801176e:	6020      	str	r0, [r4, #0]
 8011770:	f8c0 9000 	str.w	r9, [r0]
 8011774:	4604      	mov	r4, r0
 8011776:	e7e4      	b.n	8011742 <__pow5mult+0x6a>
 8011778:	4638      	mov	r0, r7
 801177a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801177e:	bf00      	nop
 8011780:	08014498 	.word	0x08014498
 8011784:	0801425e 	.word	0x0801425e
 8011788:	08014348 	.word	0x08014348

0801178c <__lshift>:
 801178c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011790:	460c      	mov	r4, r1
 8011792:	6849      	ldr	r1, [r1, #4]
 8011794:	6923      	ldr	r3, [r4, #16]
 8011796:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801179a:	68a3      	ldr	r3, [r4, #8]
 801179c:	4607      	mov	r7, r0
 801179e:	4691      	mov	r9, r2
 80117a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80117a4:	f108 0601 	add.w	r6, r8, #1
 80117a8:	42b3      	cmp	r3, r6
 80117aa:	db0b      	blt.n	80117c4 <__lshift+0x38>
 80117ac:	4638      	mov	r0, r7
 80117ae:	f7ff fddb 	bl	8011368 <_Balloc>
 80117b2:	4605      	mov	r5, r0
 80117b4:	b948      	cbnz	r0, 80117ca <__lshift+0x3e>
 80117b6:	4602      	mov	r2, r0
 80117b8:	4b28      	ldr	r3, [pc, #160]	; (801185c <__lshift+0xd0>)
 80117ba:	4829      	ldr	r0, [pc, #164]	; (8011860 <__lshift+0xd4>)
 80117bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80117c0:	f000 fbca 	bl	8011f58 <__assert_func>
 80117c4:	3101      	adds	r1, #1
 80117c6:	005b      	lsls	r3, r3, #1
 80117c8:	e7ee      	b.n	80117a8 <__lshift+0x1c>
 80117ca:	2300      	movs	r3, #0
 80117cc:	f100 0114 	add.w	r1, r0, #20
 80117d0:	f100 0210 	add.w	r2, r0, #16
 80117d4:	4618      	mov	r0, r3
 80117d6:	4553      	cmp	r3, sl
 80117d8:	db33      	blt.n	8011842 <__lshift+0xb6>
 80117da:	6920      	ldr	r0, [r4, #16]
 80117dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80117e0:	f104 0314 	add.w	r3, r4, #20
 80117e4:	f019 091f 	ands.w	r9, r9, #31
 80117e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80117ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80117f0:	d02b      	beq.n	801184a <__lshift+0xbe>
 80117f2:	f1c9 0e20 	rsb	lr, r9, #32
 80117f6:	468a      	mov	sl, r1
 80117f8:	2200      	movs	r2, #0
 80117fa:	6818      	ldr	r0, [r3, #0]
 80117fc:	fa00 f009 	lsl.w	r0, r0, r9
 8011800:	4302      	orrs	r2, r0
 8011802:	f84a 2b04 	str.w	r2, [sl], #4
 8011806:	f853 2b04 	ldr.w	r2, [r3], #4
 801180a:	459c      	cmp	ip, r3
 801180c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011810:	d8f3      	bhi.n	80117fa <__lshift+0x6e>
 8011812:	ebac 0304 	sub.w	r3, ip, r4
 8011816:	3b15      	subs	r3, #21
 8011818:	f023 0303 	bic.w	r3, r3, #3
 801181c:	3304      	adds	r3, #4
 801181e:	f104 0015 	add.w	r0, r4, #21
 8011822:	4584      	cmp	ip, r0
 8011824:	bf38      	it	cc
 8011826:	2304      	movcc	r3, #4
 8011828:	50ca      	str	r2, [r1, r3]
 801182a:	b10a      	cbz	r2, 8011830 <__lshift+0xa4>
 801182c:	f108 0602 	add.w	r6, r8, #2
 8011830:	3e01      	subs	r6, #1
 8011832:	4638      	mov	r0, r7
 8011834:	612e      	str	r6, [r5, #16]
 8011836:	4621      	mov	r1, r4
 8011838:	f7ff fdd6 	bl	80113e8 <_Bfree>
 801183c:	4628      	mov	r0, r5
 801183e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011842:	f842 0f04 	str.w	r0, [r2, #4]!
 8011846:	3301      	adds	r3, #1
 8011848:	e7c5      	b.n	80117d6 <__lshift+0x4a>
 801184a:	3904      	subs	r1, #4
 801184c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011850:	f841 2f04 	str.w	r2, [r1, #4]!
 8011854:	459c      	cmp	ip, r3
 8011856:	d8f9      	bhi.n	801184c <__lshift+0xc0>
 8011858:	e7ea      	b.n	8011830 <__lshift+0xa4>
 801185a:	bf00      	nop
 801185c:	080142d4 	.word	0x080142d4
 8011860:	08014348 	.word	0x08014348

08011864 <__mcmp>:
 8011864:	b530      	push	{r4, r5, lr}
 8011866:	6902      	ldr	r2, [r0, #16]
 8011868:	690c      	ldr	r4, [r1, #16]
 801186a:	1b12      	subs	r2, r2, r4
 801186c:	d10e      	bne.n	801188c <__mcmp+0x28>
 801186e:	f100 0314 	add.w	r3, r0, #20
 8011872:	3114      	adds	r1, #20
 8011874:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011878:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801187c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011880:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011884:	42a5      	cmp	r5, r4
 8011886:	d003      	beq.n	8011890 <__mcmp+0x2c>
 8011888:	d305      	bcc.n	8011896 <__mcmp+0x32>
 801188a:	2201      	movs	r2, #1
 801188c:	4610      	mov	r0, r2
 801188e:	bd30      	pop	{r4, r5, pc}
 8011890:	4283      	cmp	r3, r0
 8011892:	d3f3      	bcc.n	801187c <__mcmp+0x18>
 8011894:	e7fa      	b.n	801188c <__mcmp+0x28>
 8011896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801189a:	e7f7      	b.n	801188c <__mcmp+0x28>

0801189c <__mdiff>:
 801189c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118a0:	460c      	mov	r4, r1
 80118a2:	4606      	mov	r6, r0
 80118a4:	4611      	mov	r1, r2
 80118a6:	4620      	mov	r0, r4
 80118a8:	4617      	mov	r7, r2
 80118aa:	f7ff ffdb 	bl	8011864 <__mcmp>
 80118ae:	1e05      	subs	r5, r0, #0
 80118b0:	d110      	bne.n	80118d4 <__mdiff+0x38>
 80118b2:	4629      	mov	r1, r5
 80118b4:	4630      	mov	r0, r6
 80118b6:	f7ff fd57 	bl	8011368 <_Balloc>
 80118ba:	b930      	cbnz	r0, 80118ca <__mdiff+0x2e>
 80118bc:	4b39      	ldr	r3, [pc, #228]	; (80119a4 <__mdiff+0x108>)
 80118be:	4602      	mov	r2, r0
 80118c0:	f240 2132 	movw	r1, #562	; 0x232
 80118c4:	4838      	ldr	r0, [pc, #224]	; (80119a8 <__mdiff+0x10c>)
 80118c6:	f000 fb47 	bl	8011f58 <__assert_func>
 80118ca:	2301      	movs	r3, #1
 80118cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80118d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118d4:	bfa4      	itt	ge
 80118d6:	463b      	movge	r3, r7
 80118d8:	4627      	movge	r7, r4
 80118da:	4630      	mov	r0, r6
 80118dc:	6879      	ldr	r1, [r7, #4]
 80118de:	bfa6      	itte	ge
 80118e0:	461c      	movge	r4, r3
 80118e2:	2500      	movge	r5, #0
 80118e4:	2501      	movlt	r5, #1
 80118e6:	f7ff fd3f 	bl	8011368 <_Balloc>
 80118ea:	b920      	cbnz	r0, 80118f6 <__mdiff+0x5a>
 80118ec:	4b2d      	ldr	r3, [pc, #180]	; (80119a4 <__mdiff+0x108>)
 80118ee:	4602      	mov	r2, r0
 80118f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80118f4:	e7e6      	b.n	80118c4 <__mdiff+0x28>
 80118f6:	693e      	ldr	r6, [r7, #16]
 80118f8:	60c5      	str	r5, [r0, #12]
 80118fa:	6925      	ldr	r5, [r4, #16]
 80118fc:	f107 0114 	add.w	r1, r7, #20
 8011900:	f104 0914 	add.w	r9, r4, #20
 8011904:	f100 0e14 	add.w	lr, r0, #20
 8011908:	f107 0210 	add.w	r2, r7, #16
 801190c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011910:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011914:	46f2      	mov	sl, lr
 8011916:	2700      	movs	r7, #0
 8011918:	f859 3b04 	ldr.w	r3, [r9], #4
 801191c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011920:	fa1f f883 	uxth.w	r8, r3
 8011924:	fa17 f78b 	uxtah	r7, r7, fp
 8011928:	0c1b      	lsrs	r3, r3, #16
 801192a:	eba7 0808 	sub.w	r8, r7, r8
 801192e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011932:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011936:	fa1f f888 	uxth.w	r8, r8
 801193a:	141f      	asrs	r7, r3, #16
 801193c:	454d      	cmp	r5, r9
 801193e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011942:	f84a 3b04 	str.w	r3, [sl], #4
 8011946:	d8e7      	bhi.n	8011918 <__mdiff+0x7c>
 8011948:	1b2b      	subs	r3, r5, r4
 801194a:	3b15      	subs	r3, #21
 801194c:	f023 0303 	bic.w	r3, r3, #3
 8011950:	3304      	adds	r3, #4
 8011952:	3415      	adds	r4, #21
 8011954:	42a5      	cmp	r5, r4
 8011956:	bf38      	it	cc
 8011958:	2304      	movcc	r3, #4
 801195a:	4419      	add	r1, r3
 801195c:	4473      	add	r3, lr
 801195e:	469e      	mov	lr, r3
 8011960:	460d      	mov	r5, r1
 8011962:	4565      	cmp	r5, ip
 8011964:	d30e      	bcc.n	8011984 <__mdiff+0xe8>
 8011966:	f10c 0203 	add.w	r2, ip, #3
 801196a:	1a52      	subs	r2, r2, r1
 801196c:	f022 0203 	bic.w	r2, r2, #3
 8011970:	3903      	subs	r1, #3
 8011972:	458c      	cmp	ip, r1
 8011974:	bf38      	it	cc
 8011976:	2200      	movcc	r2, #0
 8011978:	441a      	add	r2, r3
 801197a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801197e:	b17b      	cbz	r3, 80119a0 <__mdiff+0x104>
 8011980:	6106      	str	r6, [r0, #16]
 8011982:	e7a5      	b.n	80118d0 <__mdiff+0x34>
 8011984:	f855 8b04 	ldr.w	r8, [r5], #4
 8011988:	fa17 f488 	uxtah	r4, r7, r8
 801198c:	1422      	asrs	r2, r4, #16
 801198e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011992:	b2a4      	uxth	r4, r4
 8011994:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011998:	f84e 4b04 	str.w	r4, [lr], #4
 801199c:	1417      	asrs	r7, r2, #16
 801199e:	e7e0      	b.n	8011962 <__mdiff+0xc6>
 80119a0:	3e01      	subs	r6, #1
 80119a2:	e7ea      	b.n	801197a <__mdiff+0xde>
 80119a4:	080142d4 	.word	0x080142d4
 80119a8:	08014348 	.word	0x08014348

080119ac <__d2b>:
 80119ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80119b0:	4689      	mov	r9, r1
 80119b2:	2101      	movs	r1, #1
 80119b4:	ec57 6b10 	vmov	r6, r7, d0
 80119b8:	4690      	mov	r8, r2
 80119ba:	f7ff fcd5 	bl	8011368 <_Balloc>
 80119be:	4604      	mov	r4, r0
 80119c0:	b930      	cbnz	r0, 80119d0 <__d2b+0x24>
 80119c2:	4602      	mov	r2, r0
 80119c4:	4b25      	ldr	r3, [pc, #148]	; (8011a5c <__d2b+0xb0>)
 80119c6:	4826      	ldr	r0, [pc, #152]	; (8011a60 <__d2b+0xb4>)
 80119c8:	f240 310a 	movw	r1, #778	; 0x30a
 80119cc:	f000 fac4 	bl	8011f58 <__assert_func>
 80119d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80119d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80119d8:	bb35      	cbnz	r5, 8011a28 <__d2b+0x7c>
 80119da:	2e00      	cmp	r6, #0
 80119dc:	9301      	str	r3, [sp, #4]
 80119de:	d028      	beq.n	8011a32 <__d2b+0x86>
 80119e0:	4668      	mov	r0, sp
 80119e2:	9600      	str	r6, [sp, #0]
 80119e4:	f7ff fd8c 	bl	8011500 <__lo0bits>
 80119e8:	9900      	ldr	r1, [sp, #0]
 80119ea:	b300      	cbz	r0, 8011a2e <__d2b+0x82>
 80119ec:	9a01      	ldr	r2, [sp, #4]
 80119ee:	f1c0 0320 	rsb	r3, r0, #32
 80119f2:	fa02 f303 	lsl.w	r3, r2, r3
 80119f6:	430b      	orrs	r3, r1
 80119f8:	40c2      	lsrs	r2, r0
 80119fa:	6163      	str	r3, [r4, #20]
 80119fc:	9201      	str	r2, [sp, #4]
 80119fe:	9b01      	ldr	r3, [sp, #4]
 8011a00:	61a3      	str	r3, [r4, #24]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	bf14      	ite	ne
 8011a06:	2202      	movne	r2, #2
 8011a08:	2201      	moveq	r2, #1
 8011a0a:	6122      	str	r2, [r4, #16]
 8011a0c:	b1d5      	cbz	r5, 8011a44 <__d2b+0x98>
 8011a0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011a12:	4405      	add	r5, r0
 8011a14:	f8c9 5000 	str.w	r5, [r9]
 8011a18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011a1c:	f8c8 0000 	str.w	r0, [r8]
 8011a20:	4620      	mov	r0, r4
 8011a22:	b003      	add	sp, #12
 8011a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011a2c:	e7d5      	b.n	80119da <__d2b+0x2e>
 8011a2e:	6161      	str	r1, [r4, #20]
 8011a30:	e7e5      	b.n	80119fe <__d2b+0x52>
 8011a32:	a801      	add	r0, sp, #4
 8011a34:	f7ff fd64 	bl	8011500 <__lo0bits>
 8011a38:	9b01      	ldr	r3, [sp, #4]
 8011a3a:	6163      	str	r3, [r4, #20]
 8011a3c:	2201      	movs	r2, #1
 8011a3e:	6122      	str	r2, [r4, #16]
 8011a40:	3020      	adds	r0, #32
 8011a42:	e7e3      	b.n	8011a0c <__d2b+0x60>
 8011a44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011a48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011a4c:	f8c9 0000 	str.w	r0, [r9]
 8011a50:	6918      	ldr	r0, [r3, #16]
 8011a52:	f7ff fd35 	bl	80114c0 <__hi0bits>
 8011a56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011a5a:	e7df      	b.n	8011a1c <__d2b+0x70>
 8011a5c:	080142d4 	.word	0x080142d4
 8011a60:	08014348 	.word	0x08014348

08011a64 <_calloc_r>:
 8011a64:	b513      	push	{r0, r1, r4, lr}
 8011a66:	434a      	muls	r2, r1
 8011a68:	4611      	mov	r1, r2
 8011a6a:	9201      	str	r2, [sp, #4]
 8011a6c:	f000 f85a 	bl	8011b24 <_malloc_r>
 8011a70:	4604      	mov	r4, r0
 8011a72:	b118      	cbz	r0, 8011a7c <_calloc_r+0x18>
 8011a74:	9a01      	ldr	r2, [sp, #4]
 8011a76:	2100      	movs	r1, #0
 8011a78:	f7fd fd84 	bl	800f584 <memset>
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	b002      	add	sp, #8
 8011a80:	bd10      	pop	{r4, pc}
	...

08011a84 <_free_r>:
 8011a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a86:	2900      	cmp	r1, #0
 8011a88:	d048      	beq.n	8011b1c <_free_r+0x98>
 8011a8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a8e:	9001      	str	r0, [sp, #4]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	f1a1 0404 	sub.w	r4, r1, #4
 8011a96:	bfb8      	it	lt
 8011a98:	18e4      	addlt	r4, r4, r3
 8011a9a:	f000 fae3 	bl	8012064 <__malloc_lock>
 8011a9e:	4a20      	ldr	r2, [pc, #128]	; (8011b20 <_free_r+0x9c>)
 8011aa0:	9801      	ldr	r0, [sp, #4]
 8011aa2:	6813      	ldr	r3, [r2, #0]
 8011aa4:	4615      	mov	r5, r2
 8011aa6:	b933      	cbnz	r3, 8011ab6 <_free_r+0x32>
 8011aa8:	6063      	str	r3, [r4, #4]
 8011aaa:	6014      	str	r4, [r2, #0]
 8011aac:	b003      	add	sp, #12
 8011aae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ab2:	f000 badd 	b.w	8012070 <__malloc_unlock>
 8011ab6:	42a3      	cmp	r3, r4
 8011ab8:	d90b      	bls.n	8011ad2 <_free_r+0x4e>
 8011aba:	6821      	ldr	r1, [r4, #0]
 8011abc:	1862      	adds	r2, r4, r1
 8011abe:	4293      	cmp	r3, r2
 8011ac0:	bf04      	itt	eq
 8011ac2:	681a      	ldreq	r2, [r3, #0]
 8011ac4:	685b      	ldreq	r3, [r3, #4]
 8011ac6:	6063      	str	r3, [r4, #4]
 8011ac8:	bf04      	itt	eq
 8011aca:	1852      	addeq	r2, r2, r1
 8011acc:	6022      	streq	r2, [r4, #0]
 8011ace:	602c      	str	r4, [r5, #0]
 8011ad0:	e7ec      	b.n	8011aac <_free_r+0x28>
 8011ad2:	461a      	mov	r2, r3
 8011ad4:	685b      	ldr	r3, [r3, #4]
 8011ad6:	b10b      	cbz	r3, 8011adc <_free_r+0x58>
 8011ad8:	42a3      	cmp	r3, r4
 8011ada:	d9fa      	bls.n	8011ad2 <_free_r+0x4e>
 8011adc:	6811      	ldr	r1, [r2, #0]
 8011ade:	1855      	adds	r5, r2, r1
 8011ae0:	42a5      	cmp	r5, r4
 8011ae2:	d10b      	bne.n	8011afc <_free_r+0x78>
 8011ae4:	6824      	ldr	r4, [r4, #0]
 8011ae6:	4421      	add	r1, r4
 8011ae8:	1854      	adds	r4, r2, r1
 8011aea:	42a3      	cmp	r3, r4
 8011aec:	6011      	str	r1, [r2, #0]
 8011aee:	d1dd      	bne.n	8011aac <_free_r+0x28>
 8011af0:	681c      	ldr	r4, [r3, #0]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	6053      	str	r3, [r2, #4]
 8011af6:	4421      	add	r1, r4
 8011af8:	6011      	str	r1, [r2, #0]
 8011afa:	e7d7      	b.n	8011aac <_free_r+0x28>
 8011afc:	d902      	bls.n	8011b04 <_free_r+0x80>
 8011afe:	230c      	movs	r3, #12
 8011b00:	6003      	str	r3, [r0, #0]
 8011b02:	e7d3      	b.n	8011aac <_free_r+0x28>
 8011b04:	6825      	ldr	r5, [r4, #0]
 8011b06:	1961      	adds	r1, r4, r5
 8011b08:	428b      	cmp	r3, r1
 8011b0a:	bf04      	itt	eq
 8011b0c:	6819      	ldreq	r1, [r3, #0]
 8011b0e:	685b      	ldreq	r3, [r3, #4]
 8011b10:	6063      	str	r3, [r4, #4]
 8011b12:	bf04      	itt	eq
 8011b14:	1949      	addeq	r1, r1, r5
 8011b16:	6021      	streq	r1, [r4, #0]
 8011b18:	6054      	str	r4, [r2, #4]
 8011b1a:	e7c7      	b.n	8011aac <_free_r+0x28>
 8011b1c:	b003      	add	sp, #12
 8011b1e:	bd30      	pop	{r4, r5, pc}
 8011b20:	2000af2c 	.word	0x2000af2c

08011b24 <_malloc_r>:
 8011b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b26:	1ccd      	adds	r5, r1, #3
 8011b28:	f025 0503 	bic.w	r5, r5, #3
 8011b2c:	3508      	adds	r5, #8
 8011b2e:	2d0c      	cmp	r5, #12
 8011b30:	bf38      	it	cc
 8011b32:	250c      	movcc	r5, #12
 8011b34:	2d00      	cmp	r5, #0
 8011b36:	4606      	mov	r6, r0
 8011b38:	db01      	blt.n	8011b3e <_malloc_r+0x1a>
 8011b3a:	42a9      	cmp	r1, r5
 8011b3c:	d903      	bls.n	8011b46 <_malloc_r+0x22>
 8011b3e:	230c      	movs	r3, #12
 8011b40:	6033      	str	r3, [r6, #0]
 8011b42:	2000      	movs	r0, #0
 8011b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b46:	f000 fa8d 	bl	8012064 <__malloc_lock>
 8011b4a:	4921      	ldr	r1, [pc, #132]	; (8011bd0 <_malloc_r+0xac>)
 8011b4c:	680a      	ldr	r2, [r1, #0]
 8011b4e:	4614      	mov	r4, r2
 8011b50:	b99c      	cbnz	r4, 8011b7a <_malloc_r+0x56>
 8011b52:	4f20      	ldr	r7, [pc, #128]	; (8011bd4 <_malloc_r+0xb0>)
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	b923      	cbnz	r3, 8011b62 <_malloc_r+0x3e>
 8011b58:	4621      	mov	r1, r4
 8011b5a:	4630      	mov	r0, r6
 8011b5c:	f000 f996 	bl	8011e8c <_sbrk_r>
 8011b60:	6038      	str	r0, [r7, #0]
 8011b62:	4629      	mov	r1, r5
 8011b64:	4630      	mov	r0, r6
 8011b66:	f000 f991 	bl	8011e8c <_sbrk_r>
 8011b6a:	1c43      	adds	r3, r0, #1
 8011b6c:	d123      	bne.n	8011bb6 <_malloc_r+0x92>
 8011b6e:	230c      	movs	r3, #12
 8011b70:	6033      	str	r3, [r6, #0]
 8011b72:	4630      	mov	r0, r6
 8011b74:	f000 fa7c 	bl	8012070 <__malloc_unlock>
 8011b78:	e7e3      	b.n	8011b42 <_malloc_r+0x1e>
 8011b7a:	6823      	ldr	r3, [r4, #0]
 8011b7c:	1b5b      	subs	r3, r3, r5
 8011b7e:	d417      	bmi.n	8011bb0 <_malloc_r+0x8c>
 8011b80:	2b0b      	cmp	r3, #11
 8011b82:	d903      	bls.n	8011b8c <_malloc_r+0x68>
 8011b84:	6023      	str	r3, [r4, #0]
 8011b86:	441c      	add	r4, r3
 8011b88:	6025      	str	r5, [r4, #0]
 8011b8a:	e004      	b.n	8011b96 <_malloc_r+0x72>
 8011b8c:	6863      	ldr	r3, [r4, #4]
 8011b8e:	42a2      	cmp	r2, r4
 8011b90:	bf0c      	ite	eq
 8011b92:	600b      	streq	r3, [r1, #0]
 8011b94:	6053      	strne	r3, [r2, #4]
 8011b96:	4630      	mov	r0, r6
 8011b98:	f000 fa6a 	bl	8012070 <__malloc_unlock>
 8011b9c:	f104 000b 	add.w	r0, r4, #11
 8011ba0:	1d23      	adds	r3, r4, #4
 8011ba2:	f020 0007 	bic.w	r0, r0, #7
 8011ba6:	1ac2      	subs	r2, r0, r3
 8011ba8:	d0cc      	beq.n	8011b44 <_malloc_r+0x20>
 8011baa:	1a1b      	subs	r3, r3, r0
 8011bac:	50a3      	str	r3, [r4, r2]
 8011bae:	e7c9      	b.n	8011b44 <_malloc_r+0x20>
 8011bb0:	4622      	mov	r2, r4
 8011bb2:	6864      	ldr	r4, [r4, #4]
 8011bb4:	e7cc      	b.n	8011b50 <_malloc_r+0x2c>
 8011bb6:	1cc4      	adds	r4, r0, #3
 8011bb8:	f024 0403 	bic.w	r4, r4, #3
 8011bbc:	42a0      	cmp	r0, r4
 8011bbe:	d0e3      	beq.n	8011b88 <_malloc_r+0x64>
 8011bc0:	1a21      	subs	r1, r4, r0
 8011bc2:	4630      	mov	r0, r6
 8011bc4:	f000 f962 	bl	8011e8c <_sbrk_r>
 8011bc8:	3001      	adds	r0, #1
 8011bca:	d1dd      	bne.n	8011b88 <_malloc_r+0x64>
 8011bcc:	e7cf      	b.n	8011b6e <_malloc_r+0x4a>
 8011bce:	bf00      	nop
 8011bd0:	2000af2c 	.word	0x2000af2c
 8011bd4:	2000af30 	.word	0x2000af30

08011bd8 <__sfputc_r>:
 8011bd8:	6893      	ldr	r3, [r2, #8]
 8011bda:	3b01      	subs	r3, #1
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	b410      	push	{r4}
 8011be0:	6093      	str	r3, [r2, #8]
 8011be2:	da08      	bge.n	8011bf6 <__sfputc_r+0x1e>
 8011be4:	6994      	ldr	r4, [r2, #24]
 8011be6:	42a3      	cmp	r3, r4
 8011be8:	db01      	blt.n	8011bee <__sfputc_r+0x16>
 8011bea:	290a      	cmp	r1, #10
 8011bec:	d103      	bne.n	8011bf6 <__sfputc_r+0x1e>
 8011bee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bf2:	f7fe ba55 	b.w	80100a0 <__swbuf_r>
 8011bf6:	6813      	ldr	r3, [r2, #0]
 8011bf8:	1c58      	adds	r0, r3, #1
 8011bfa:	6010      	str	r0, [r2, #0]
 8011bfc:	7019      	strb	r1, [r3, #0]
 8011bfe:	4608      	mov	r0, r1
 8011c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c04:	4770      	bx	lr

08011c06 <__sfputs_r>:
 8011c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c08:	4606      	mov	r6, r0
 8011c0a:	460f      	mov	r7, r1
 8011c0c:	4614      	mov	r4, r2
 8011c0e:	18d5      	adds	r5, r2, r3
 8011c10:	42ac      	cmp	r4, r5
 8011c12:	d101      	bne.n	8011c18 <__sfputs_r+0x12>
 8011c14:	2000      	movs	r0, #0
 8011c16:	e007      	b.n	8011c28 <__sfputs_r+0x22>
 8011c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c1c:	463a      	mov	r2, r7
 8011c1e:	4630      	mov	r0, r6
 8011c20:	f7ff ffda 	bl	8011bd8 <__sfputc_r>
 8011c24:	1c43      	adds	r3, r0, #1
 8011c26:	d1f3      	bne.n	8011c10 <__sfputs_r+0xa>
 8011c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011c2c <_vfiprintf_r>:
 8011c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c30:	460d      	mov	r5, r1
 8011c32:	b09d      	sub	sp, #116	; 0x74
 8011c34:	4614      	mov	r4, r2
 8011c36:	4698      	mov	r8, r3
 8011c38:	4606      	mov	r6, r0
 8011c3a:	b118      	cbz	r0, 8011c44 <_vfiprintf_r+0x18>
 8011c3c:	6983      	ldr	r3, [r0, #24]
 8011c3e:	b90b      	cbnz	r3, 8011c44 <_vfiprintf_r+0x18>
 8011c40:	f7ff fa80 	bl	8011144 <__sinit>
 8011c44:	4b89      	ldr	r3, [pc, #548]	; (8011e6c <_vfiprintf_r+0x240>)
 8011c46:	429d      	cmp	r5, r3
 8011c48:	d11b      	bne.n	8011c82 <_vfiprintf_r+0x56>
 8011c4a:	6875      	ldr	r5, [r6, #4]
 8011c4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c4e:	07d9      	lsls	r1, r3, #31
 8011c50:	d405      	bmi.n	8011c5e <_vfiprintf_r+0x32>
 8011c52:	89ab      	ldrh	r3, [r5, #12]
 8011c54:	059a      	lsls	r2, r3, #22
 8011c56:	d402      	bmi.n	8011c5e <_vfiprintf_r+0x32>
 8011c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c5a:	f7ff fb16 	bl	801128a <__retarget_lock_acquire_recursive>
 8011c5e:	89ab      	ldrh	r3, [r5, #12]
 8011c60:	071b      	lsls	r3, r3, #28
 8011c62:	d501      	bpl.n	8011c68 <_vfiprintf_r+0x3c>
 8011c64:	692b      	ldr	r3, [r5, #16]
 8011c66:	b9eb      	cbnz	r3, 8011ca4 <_vfiprintf_r+0x78>
 8011c68:	4629      	mov	r1, r5
 8011c6a:	4630      	mov	r0, r6
 8011c6c:	f7fe fa6a 	bl	8010144 <__swsetup_r>
 8011c70:	b1c0      	cbz	r0, 8011ca4 <_vfiprintf_r+0x78>
 8011c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c74:	07dc      	lsls	r4, r3, #31
 8011c76:	d50e      	bpl.n	8011c96 <_vfiprintf_r+0x6a>
 8011c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c7c:	b01d      	add	sp, #116	; 0x74
 8011c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c82:	4b7b      	ldr	r3, [pc, #492]	; (8011e70 <_vfiprintf_r+0x244>)
 8011c84:	429d      	cmp	r5, r3
 8011c86:	d101      	bne.n	8011c8c <_vfiprintf_r+0x60>
 8011c88:	68b5      	ldr	r5, [r6, #8]
 8011c8a:	e7df      	b.n	8011c4c <_vfiprintf_r+0x20>
 8011c8c:	4b79      	ldr	r3, [pc, #484]	; (8011e74 <_vfiprintf_r+0x248>)
 8011c8e:	429d      	cmp	r5, r3
 8011c90:	bf08      	it	eq
 8011c92:	68f5      	ldreq	r5, [r6, #12]
 8011c94:	e7da      	b.n	8011c4c <_vfiprintf_r+0x20>
 8011c96:	89ab      	ldrh	r3, [r5, #12]
 8011c98:	0598      	lsls	r0, r3, #22
 8011c9a:	d4ed      	bmi.n	8011c78 <_vfiprintf_r+0x4c>
 8011c9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c9e:	f7ff faf5 	bl	801128c <__retarget_lock_release_recursive>
 8011ca2:	e7e9      	b.n	8011c78 <_vfiprintf_r+0x4c>
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ca8:	2320      	movs	r3, #32
 8011caa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011cae:	f8cd 800c 	str.w	r8, [sp, #12]
 8011cb2:	2330      	movs	r3, #48	; 0x30
 8011cb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011e78 <_vfiprintf_r+0x24c>
 8011cb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011cbc:	f04f 0901 	mov.w	r9, #1
 8011cc0:	4623      	mov	r3, r4
 8011cc2:	469a      	mov	sl, r3
 8011cc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011cc8:	b10a      	cbz	r2, 8011cce <_vfiprintf_r+0xa2>
 8011cca:	2a25      	cmp	r2, #37	; 0x25
 8011ccc:	d1f9      	bne.n	8011cc2 <_vfiprintf_r+0x96>
 8011cce:	ebba 0b04 	subs.w	fp, sl, r4
 8011cd2:	d00b      	beq.n	8011cec <_vfiprintf_r+0xc0>
 8011cd4:	465b      	mov	r3, fp
 8011cd6:	4622      	mov	r2, r4
 8011cd8:	4629      	mov	r1, r5
 8011cda:	4630      	mov	r0, r6
 8011cdc:	f7ff ff93 	bl	8011c06 <__sfputs_r>
 8011ce0:	3001      	adds	r0, #1
 8011ce2:	f000 80aa 	beq.w	8011e3a <_vfiprintf_r+0x20e>
 8011ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ce8:	445a      	add	r2, fp
 8011cea:	9209      	str	r2, [sp, #36]	; 0x24
 8011cec:	f89a 3000 	ldrb.w	r3, [sl]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	f000 80a2 	beq.w	8011e3a <_vfiprintf_r+0x20e>
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011cfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d00:	f10a 0a01 	add.w	sl, sl, #1
 8011d04:	9304      	str	r3, [sp, #16]
 8011d06:	9307      	str	r3, [sp, #28]
 8011d08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d0c:	931a      	str	r3, [sp, #104]	; 0x68
 8011d0e:	4654      	mov	r4, sl
 8011d10:	2205      	movs	r2, #5
 8011d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d16:	4858      	ldr	r0, [pc, #352]	; (8011e78 <_vfiprintf_r+0x24c>)
 8011d18:	f7ee fa6a 	bl	80001f0 <memchr>
 8011d1c:	9a04      	ldr	r2, [sp, #16]
 8011d1e:	b9d8      	cbnz	r0, 8011d58 <_vfiprintf_r+0x12c>
 8011d20:	06d1      	lsls	r1, r2, #27
 8011d22:	bf44      	itt	mi
 8011d24:	2320      	movmi	r3, #32
 8011d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d2a:	0713      	lsls	r3, r2, #28
 8011d2c:	bf44      	itt	mi
 8011d2e:	232b      	movmi	r3, #43	; 0x2b
 8011d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d34:	f89a 3000 	ldrb.w	r3, [sl]
 8011d38:	2b2a      	cmp	r3, #42	; 0x2a
 8011d3a:	d015      	beq.n	8011d68 <_vfiprintf_r+0x13c>
 8011d3c:	9a07      	ldr	r2, [sp, #28]
 8011d3e:	4654      	mov	r4, sl
 8011d40:	2000      	movs	r0, #0
 8011d42:	f04f 0c0a 	mov.w	ip, #10
 8011d46:	4621      	mov	r1, r4
 8011d48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d4c:	3b30      	subs	r3, #48	; 0x30
 8011d4e:	2b09      	cmp	r3, #9
 8011d50:	d94e      	bls.n	8011df0 <_vfiprintf_r+0x1c4>
 8011d52:	b1b0      	cbz	r0, 8011d82 <_vfiprintf_r+0x156>
 8011d54:	9207      	str	r2, [sp, #28]
 8011d56:	e014      	b.n	8011d82 <_vfiprintf_r+0x156>
 8011d58:	eba0 0308 	sub.w	r3, r0, r8
 8011d5c:	fa09 f303 	lsl.w	r3, r9, r3
 8011d60:	4313      	orrs	r3, r2
 8011d62:	9304      	str	r3, [sp, #16]
 8011d64:	46a2      	mov	sl, r4
 8011d66:	e7d2      	b.n	8011d0e <_vfiprintf_r+0xe2>
 8011d68:	9b03      	ldr	r3, [sp, #12]
 8011d6a:	1d19      	adds	r1, r3, #4
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	9103      	str	r1, [sp, #12]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	bfbb      	ittet	lt
 8011d74:	425b      	neglt	r3, r3
 8011d76:	f042 0202 	orrlt.w	r2, r2, #2
 8011d7a:	9307      	strge	r3, [sp, #28]
 8011d7c:	9307      	strlt	r3, [sp, #28]
 8011d7e:	bfb8      	it	lt
 8011d80:	9204      	strlt	r2, [sp, #16]
 8011d82:	7823      	ldrb	r3, [r4, #0]
 8011d84:	2b2e      	cmp	r3, #46	; 0x2e
 8011d86:	d10c      	bne.n	8011da2 <_vfiprintf_r+0x176>
 8011d88:	7863      	ldrb	r3, [r4, #1]
 8011d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8011d8c:	d135      	bne.n	8011dfa <_vfiprintf_r+0x1ce>
 8011d8e:	9b03      	ldr	r3, [sp, #12]
 8011d90:	1d1a      	adds	r2, r3, #4
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	9203      	str	r2, [sp, #12]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	bfb8      	it	lt
 8011d9a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011d9e:	3402      	adds	r4, #2
 8011da0:	9305      	str	r3, [sp, #20]
 8011da2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011e88 <_vfiprintf_r+0x25c>
 8011da6:	7821      	ldrb	r1, [r4, #0]
 8011da8:	2203      	movs	r2, #3
 8011daa:	4650      	mov	r0, sl
 8011dac:	f7ee fa20 	bl	80001f0 <memchr>
 8011db0:	b140      	cbz	r0, 8011dc4 <_vfiprintf_r+0x198>
 8011db2:	2340      	movs	r3, #64	; 0x40
 8011db4:	eba0 000a 	sub.w	r0, r0, sl
 8011db8:	fa03 f000 	lsl.w	r0, r3, r0
 8011dbc:	9b04      	ldr	r3, [sp, #16]
 8011dbe:	4303      	orrs	r3, r0
 8011dc0:	3401      	adds	r4, #1
 8011dc2:	9304      	str	r3, [sp, #16]
 8011dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dc8:	482c      	ldr	r0, [pc, #176]	; (8011e7c <_vfiprintf_r+0x250>)
 8011dca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011dce:	2206      	movs	r2, #6
 8011dd0:	f7ee fa0e 	bl	80001f0 <memchr>
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	d03f      	beq.n	8011e58 <_vfiprintf_r+0x22c>
 8011dd8:	4b29      	ldr	r3, [pc, #164]	; (8011e80 <_vfiprintf_r+0x254>)
 8011dda:	bb1b      	cbnz	r3, 8011e24 <_vfiprintf_r+0x1f8>
 8011ddc:	9b03      	ldr	r3, [sp, #12]
 8011dde:	3307      	adds	r3, #7
 8011de0:	f023 0307 	bic.w	r3, r3, #7
 8011de4:	3308      	adds	r3, #8
 8011de6:	9303      	str	r3, [sp, #12]
 8011de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dea:	443b      	add	r3, r7
 8011dec:	9309      	str	r3, [sp, #36]	; 0x24
 8011dee:	e767      	b.n	8011cc0 <_vfiprintf_r+0x94>
 8011df0:	fb0c 3202 	mla	r2, ip, r2, r3
 8011df4:	460c      	mov	r4, r1
 8011df6:	2001      	movs	r0, #1
 8011df8:	e7a5      	b.n	8011d46 <_vfiprintf_r+0x11a>
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	3401      	adds	r4, #1
 8011dfe:	9305      	str	r3, [sp, #20]
 8011e00:	4619      	mov	r1, r3
 8011e02:	f04f 0c0a 	mov.w	ip, #10
 8011e06:	4620      	mov	r0, r4
 8011e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e0c:	3a30      	subs	r2, #48	; 0x30
 8011e0e:	2a09      	cmp	r2, #9
 8011e10:	d903      	bls.n	8011e1a <_vfiprintf_r+0x1ee>
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d0c5      	beq.n	8011da2 <_vfiprintf_r+0x176>
 8011e16:	9105      	str	r1, [sp, #20]
 8011e18:	e7c3      	b.n	8011da2 <_vfiprintf_r+0x176>
 8011e1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e1e:	4604      	mov	r4, r0
 8011e20:	2301      	movs	r3, #1
 8011e22:	e7f0      	b.n	8011e06 <_vfiprintf_r+0x1da>
 8011e24:	ab03      	add	r3, sp, #12
 8011e26:	9300      	str	r3, [sp, #0]
 8011e28:	462a      	mov	r2, r5
 8011e2a:	4b16      	ldr	r3, [pc, #88]	; (8011e84 <_vfiprintf_r+0x258>)
 8011e2c:	a904      	add	r1, sp, #16
 8011e2e:	4630      	mov	r0, r6
 8011e30:	f7fd fc50 	bl	800f6d4 <_printf_float>
 8011e34:	4607      	mov	r7, r0
 8011e36:	1c78      	adds	r0, r7, #1
 8011e38:	d1d6      	bne.n	8011de8 <_vfiprintf_r+0x1bc>
 8011e3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e3c:	07d9      	lsls	r1, r3, #31
 8011e3e:	d405      	bmi.n	8011e4c <_vfiprintf_r+0x220>
 8011e40:	89ab      	ldrh	r3, [r5, #12]
 8011e42:	059a      	lsls	r2, r3, #22
 8011e44:	d402      	bmi.n	8011e4c <_vfiprintf_r+0x220>
 8011e46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e48:	f7ff fa20 	bl	801128c <__retarget_lock_release_recursive>
 8011e4c:	89ab      	ldrh	r3, [r5, #12]
 8011e4e:	065b      	lsls	r3, r3, #25
 8011e50:	f53f af12 	bmi.w	8011c78 <_vfiprintf_r+0x4c>
 8011e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e56:	e711      	b.n	8011c7c <_vfiprintf_r+0x50>
 8011e58:	ab03      	add	r3, sp, #12
 8011e5a:	9300      	str	r3, [sp, #0]
 8011e5c:	462a      	mov	r2, r5
 8011e5e:	4b09      	ldr	r3, [pc, #36]	; (8011e84 <_vfiprintf_r+0x258>)
 8011e60:	a904      	add	r1, sp, #16
 8011e62:	4630      	mov	r0, r6
 8011e64:	f7fd feda 	bl	800fc1c <_printf_i>
 8011e68:	e7e4      	b.n	8011e34 <_vfiprintf_r+0x208>
 8011e6a:	bf00      	nop
 8011e6c:	08014308 	.word	0x08014308
 8011e70:	08014328 	.word	0x08014328
 8011e74:	080142e8 	.word	0x080142e8
 8011e78:	080144a4 	.word	0x080144a4
 8011e7c:	080144ae 	.word	0x080144ae
 8011e80:	0800f6d5 	.word	0x0800f6d5
 8011e84:	08011c07 	.word	0x08011c07
 8011e88:	080144aa 	.word	0x080144aa

08011e8c <_sbrk_r>:
 8011e8c:	b538      	push	{r3, r4, r5, lr}
 8011e8e:	4d06      	ldr	r5, [pc, #24]	; (8011ea8 <_sbrk_r+0x1c>)
 8011e90:	2300      	movs	r3, #0
 8011e92:	4604      	mov	r4, r0
 8011e94:	4608      	mov	r0, r1
 8011e96:	602b      	str	r3, [r5, #0]
 8011e98:	f7f2 fa5a 	bl	8004350 <_sbrk>
 8011e9c:	1c43      	adds	r3, r0, #1
 8011e9e:	d102      	bne.n	8011ea6 <_sbrk_r+0x1a>
 8011ea0:	682b      	ldr	r3, [r5, #0]
 8011ea2:	b103      	cbz	r3, 8011ea6 <_sbrk_r+0x1a>
 8011ea4:	6023      	str	r3, [r4, #0]
 8011ea6:	bd38      	pop	{r3, r4, r5, pc}
 8011ea8:	2000b680 	.word	0x2000b680

08011eac <__sread>:
 8011eac:	b510      	push	{r4, lr}
 8011eae:	460c      	mov	r4, r1
 8011eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eb4:	f000 f8e2 	bl	801207c <_read_r>
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	bfab      	itete	ge
 8011ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8011ec0:	181b      	addge	r3, r3, r0
 8011ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011ec6:	bfac      	ite	ge
 8011ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8011eca:	81a3      	strhlt	r3, [r4, #12]
 8011ecc:	bd10      	pop	{r4, pc}

08011ece <__swrite>:
 8011ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed2:	461f      	mov	r7, r3
 8011ed4:	898b      	ldrh	r3, [r1, #12]
 8011ed6:	05db      	lsls	r3, r3, #23
 8011ed8:	4605      	mov	r5, r0
 8011eda:	460c      	mov	r4, r1
 8011edc:	4616      	mov	r6, r2
 8011ede:	d505      	bpl.n	8011eec <__swrite+0x1e>
 8011ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ee4:	2302      	movs	r3, #2
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	f000 f898 	bl	801201c <_lseek_r>
 8011eec:	89a3      	ldrh	r3, [r4, #12]
 8011eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011ef6:	81a3      	strh	r3, [r4, #12]
 8011ef8:	4632      	mov	r2, r6
 8011efa:	463b      	mov	r3, r7
 8011efc:	4628      	mov	r0, r5
 8011efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f02:	f000 b817 	b.w	8011f34 <_write_r>

08011f06 <__sseek>:
 8011f06:	b510      	push	{r4, lr}
 8011f08:	460c      	mov	r4, r1
 8011f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f0e:	f000 f885 	bl	801201c <_lseek_r>
 8011f12:	1c43      	adds	r3, r0, #1
 8011f14:	89a3      	ldrh	r3, [r4, #12]
 8011f16:	bf15      	itete	ne
 8011f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8011f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011f22:	81a3      	strheq	r3, [r4, #12]
 8011f24:	bf18      	it	ne
 8011f26:	81a3      	strhne	r3, [r4, #12]
 8011f28:	bd10      	pop	{r4, pc}

08011f2a <__sclose>:
 8011f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f2e:	f000 b831 	b.w	8011f94 <_close_r>
	...

08011f34 <_write_r>:
 8011f34:	b538      	push	{r3, r4, r5, lr}
 8011f36:	4d07      	ldr	r5, [pc, #28]	; (8011f54 <_write_r+0x20>)
 8011f38:	4604      	mov	r4, r0
 8011f3a:	4608      	mov	r0, r1
 8011f3c:	4611      	mov	r1, r2
 8011f3e:	2200      	movs	r2, #0
 8011f40:	602a      	str	r2, [r5, #0]
 8011f42:	461a      	mov	r2, r3
 8011f44:	f7f1 fe48 	bl	8003bd8 <_write>
 8011f48:	1c43      	adds	r3, r0, #1
 8011f4a:	d102      	bne.n	8011f52 <_write_r+0x1e>
 8011f4c:	682b      	ldr	r3, [r5, #0]
 8011f4e:	b103      	cbz	r3, 8011f52 <_write_r+0x1e>
 8011f50:	6023      	str	r3, [r4, #0]
 8011f52:	bd38      	pop	{r3, r4, r5, pc}
 8011f54:	2000b680 	.word	0x2000b680

08011f58 <__assert_func>:
 8011f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f5a:	4614      	mov	r4, r2
 8011f5c:	461a      	mov	r2, r3
 8011f5e:	4b09      	ldr	r3, [pc, #36]	; (8011f84 <__assert_func+0x2c>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	4605      	mov	r5, r0
 8011f64:	68d8      	ldr	r0, [r3, #12]
 8011f66:	b14c      	cbz	r4, 8011f7c <__assert_func+0x24>
 8011f68:	4b07      	ldr	r3, [pc, #28]	; (8011f88 <__assert_func+0x30>)
 8011f6a:	9100      	str	r1, [sp, #0]
 8011f6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011f70:	4906      	ldr	r1, [pc, #24]	; (8011f8c <__assert_func+0x34>)
 8011f72:	462b      	mov	r3, r5
 8011f74:	f000 f81e 	bl	8011fb4 <fiprintf>
 8011f78:	f000 f89f 	bl	80120ba <abort>
 8011f7c:	4b04      	ldr	r3, [pc, #16]	; (8011f90 <__assert_func+0x38>)
 8011f7e:	461c      	mov	r4, r3
 8011f80:	e7f3      	b.n	8011f6a <__assert_func+0x12>
 8011f82:	bf00      	nop
 8011f84:	2000001c 	.word	0x2000001c
 8011f88:	080144b5 	.word	0x080144b5
 8011f8c:	080144c2 	.word	0x080144c2
 8011f90:	080144f0 	.word	0x080144f0

08011f94 <_close_r>:
 8011f94:	b538      	push	{r3, r4, r5, lr}
 8011f96:	4d06      	ldr	r5, [pc, #24]	; (8011fb0 <_close_r+0x1c>)
 8011f98:	2300      	movs	r3, #0
 8011f9a:	4604      	mov	r4, r0
 8011f9c:	4608      	mov	r0, r1
 8011f9e:	602b      	str	r3, [r5, #0]
 8011fa0:	f7f2 f9a1 	bl	80042e6 <_close>
 8011fa4:	1c43      	adds	r3, r0, #1
 8011fa6:	d102      	bne.n	8011fae <_close_r+0x1a>
 8011fa8:	682b      	ldr	r3, [r5, #0]
 8011faa:	b103      	cbz	r3, 8011fae <_close_r+0x1a>
 8011fac:	6023      	str	r3, [r4, #0]
 8011fae:	bd38      	pop	{r3, r4, r5, pc}
 8011fb0:	2000b680 	.word	0x2000b680

08011fb4 <fiprintf>:
 8011fb4:	b40e      	push	{r1, r2, r3}
 8011fb6:	b503      	push	{r0, r1, lr}
 8011fb8:	4601      	mov	r1, r0
 8011fba:	ab03      	add	r3, sp, #12
 8011fbc:	4805      	ldr	r0, [pc, #20]	; (8011fd4 <fiprintf+0x20>)
 8011fbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fc2:	6800      	ldr	r0, [r0, #0]
 8011fc4:	9301      	str	r3, [sp, #4]
 8011fc6:	f7ff fe31 	bl	8011c2c <_vfiprintf_r>
 8011fca:	b002      	add	sp, #8
 8011fcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011fd0:	b003      	add	sp, #12
 8011fd2:	4770      	bx	lr
 8011fd4:	2000001c 	.word	0x2000001c

08011fd8 <_fstat_r>:
 8011fd8:	b538      	push	{r3, r4, r5, lr}
 8011fda:	4d07      	ldr	r5, [pc, #28]	; (8011ff8 <_fstat_r+0x20>)
 8011fdc:	2300      	movs	r3, #0
 8011fde:	4604      	mov	r4, r0
 8011fe0:	4608      	mov	r0, r1
 8011fe2:	4611      	mov	r1, r2
 8011fe4:	602b      	str	r3, [r5, #0]
 8011fe6:	f7f2 f98a 	bl	80042fe <_fstat>
 8011fea:	1c43      	adds	r3, r0, #1
 8011fec:	d102      	bne.n	8011ff4 <_fstat_r+0x1c>
 8011fee:	682b      	ldr	r3, [r5, #0]
 8011ff0:	b103      	cbz	r3, 8011ff4 <_fstat_r+0x1c>
 8011ff2:	6023      	str	r3, [r4, #0]
 8011ff4:	bd38      	pop	{r3, r4, r5, pc}
 8011ff6:	bf00      	nop
 8011ff8:	2000b680 	.word	0x2000b680

08011ffc <_isatty_r>:
 8011ffc:	b538      	push	{r3, r4, r5, lr}
 8011ffe:	4d06      	ldr	r5, [pc, #24]	; (8012018 <_isatty_r+0x1c>)
 8012000:	2300      	movs	r3, #0
 8012002:	4604      	mov	r4, r0
 8012004:	4608      	mov	r0, r1
 8012006:	602b      	str	r3, [r5, #0]
 8012008:	f7f2 f989 	bl	800431e <_isatty>
 801200c:	1c43      	adds	r3, r0, #1
 801200e:	d102      	bne.n	8012016 <_isatty_r+0x1a>
 8012010:	682b      	ldr	r3, [r5, #0]
 8012012:	b103      	cbz	r3, 8012016 <_isatty_r+0x1a>
 8012014:	6023      	str	r3, [r4, #0]
 8012016:	bd38      	pop	{r3, r4, r5, pc}
 8012018:	2000b680 	.word	0x2000b680

0801201c <_lseek_r>:
 801201c:	b538      	push	{r3, r4, r5, lr}
 801201e:	4d07      	ldr	r5, [pc, #28]	; (801203c <_lseek_r+0x20>)
 8012020:	4604      	mov	r4, r0
 8012022:	4608      	mov	r0, r1
 8012024:	4611      	mov	r1, r2
 8012026:	2200      	movs	r2, #0
 8012028:	602a      	str	r2, [r5, #0]
 801202a:	461a      	mov	r2, r3
 801202c:	f7f2 f982 	bl	8004334 <_lseek>
 8012030:	1c43      	adds	r3, r0, #1
 8012032:	d102      	bne.n	801203a <_lseek_r+0x1e>
 8012034:	682b      	ldr	r3, [r5, #0]
 8012036:	b103      	cbz	r3, 801203a <_lseek_r+0x1e>
 8012038:	6023      	str	r3, [r4, #0]
 801203a:	bd38      	pop	{r3, r4, r5, pc}
 801203c:	2000b680 	.word	0x2000b680

08012040 <__ascii_mbtowc>:
 8012040:	b082      	sub	sp, #8
 8012042:	b901      	cbnz	r1, 8012046 <__ascii_mbtowc+0x6>
 8012044:	a901      	add	r1, sp, #4
 8012046:	b142      	cbz	r2, 801205a <__ascii_mbtowc+0x1a>
 8012048:	b14b      	cbz	r3, 801205e <__ascii_mbtowc+0x1e>
 801204a:	7813      	ldrb	r3, [r2, #0]
 801204c:	600b      	str	r3, [r1, #0]
 801204e:	7812      	ldrb	r2, [r2, #0]
 8012050:	1e10      	subs	r0, r2, #0
 8012052:	bf18      	it	ne
 8012054:	2001      	movne	r0, #1
 8012056:	b002      	add	sp, #8
 8012058:	4770      	bx	lr
 801205a:	4610      	mov	r0, r2
 801205c:	e7fb      	b.n	8012056 <__ascii_mbtowc+0x16>
 801205e:	f06f 0001 	mvn.w	r0, #1
 8012062:	e7f8      	b.n	8012056 <__ascii_mbtowc+0x16>

08012064 <__malloc_lock>:
 8012064:	4801      	ldr	r0, [pc, #4]	; (801206c <__malloc_lock+0x8>)
 8012066:	f7ff b910 	b.w	801128a <__retarget_lock_acquire_recursive>
 801206a:	bf00      	nop
 801206c:	2000b678 	.word	0x2000b678

08012070 <__malloc_unlock>:
 8012070:	4801      	ldr	r0, [pc, #4]	; (8012078 <__malloc_unlock+0x8>)
 8012072:	f7ff b90b 	b.w	801128c <__retarget_lock_release_recursive>
 8012076:	bf00      	nop
 8012078:	2000b678 	.word	0x2000b678

0801207c <_read_r>:
 801207c:	b538      	push	{r3, r4, r5, lr}
 801207e:	4d07      	ldr	r5, [pc, #28]	; (801209c <_read_r+0x20>)
 8012080:	4604      	mov	r4, r0
 8012082:	4608      	mov	r0, r1
 8012084:	4611      	mov	r1, r2
 8012086:	2200      	movs	r2, #0
 8012088:	602a      	str	r2, [r5, #0]
 801208a:	461a      	mov	r2, r3
 801208c:	f7f2 f90e 	bl	80042ac <_read>
 8012090:	1c43      	adds	r3, r0, #1
 8012092:	d102      	bne.n	801209a <_read_r+0x1e>
 8012094:	682b      	ldr	r3, [r5, #0]
 8012096:	b103      	cbz	r3, 801209a <_read_r+0x1e>
 8012098:	6023      	str	r3, [r4, #0]
 801209a:	bd38      	pop	{r3, r4, r5, pc}
 801209c:	2000b680 	.word	0x2000b680

080120a0 <__ascii_wctomb>:
 80120a0:	b149      	cbz	r1, 80120b6 <__ascii_wctomb+0x16>
 80120a2:	2aff      	cmp	r2, #255	; 0xff
 80120a4:	bf85      	ittet	hi
 80120a6:	238a      	movhi	r3, #138	; 0x8a
 80120a8:	6003      	strhi	r3, [r0, #0]
 80120aa:	700a      	strbls	r2, [r1, #0]
 80120ac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80120b0:	bf98      	it	ls
 80120b2:	2001      	movls	r0, #1
 80120b4:	4770      	bx	lr
 80120b6:	4608      	mov	r0, r1
 80120b8:	4770      	bx	lr

080120ba <abort>:
 80120ba:	b508      	push	{r3, lr}
 80120bc:	2006      	movs	r0, #6
 80120be:	f000 f82b 	bl	8012118 <raise>
 80120c2:	2001      	movs	r0, #1
 80120c4:	f7f2 f8e8 	bl	8004298 <_exit>

080120c8 <_raise_r>:
 80120c8:	291f      	cmp	r1, #31
 80120ca:	b538      	push	{r3, r4, r5, lr}
 80120cc:	4604      	mov	r4, r0
 80120ce:	460d      	mov	r5, r1
 80120d0:	d904      	bls.n	80120dc <_raise_r+0x14>
 80120d2:	2316      	movs	r3, #22
 80120d4:	6003      	str	r3, [r0, #0]
 80120d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80120da:	bd38      	pop	{r3, r4, r5, pc}
 80120dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80120de:	b112      	cbz	r2, 80120e6 <_raise_r+0x1e>
 80120e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80120e4:	b94b      	cbnz	r3, 80120fa <_raise_r+0x32>
 80120e6:	4620      	mov	r0, r4
 80120e8:	f000 f830 	bl	801214c <_getpid_r>
 80120ec:	462a      	mov	r2, r5
 80120ee:	4601      	mov	r1, r0
 80120f0:	4620      	mov	r0, r4
 80120f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80120f6:	f000 b817 	b.w	8012128 <_kill_r>
 80120fa:	2b01      	cmp	r3, #1
 80120fc:	d00a      	beq.n	8012114 <_raise_r+0x4c>
 80120fe:	1c59      	adds	r1, r3, #1
 8012100:	d103      	bne.n	801210a <_raise_r+0x42>
 8012102:	2316      	movs	r3, #22
 8012104:	6003      	str	r3, [r0, #0]
 8012106:	2001      	movs	r0, #1
 8012108:	e7e7      	b.n	80120da <_raise_r+0x12>
 801210a:	2400      	movs	r4, #0
 801210c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012110:	4628      	mov	r0, r5
 8012112:	4798      	blx	r3
 8012114:	2000      	movs	r0, #0
 8012116:	e7e0      	b.n	80120da <_raise_r+0x12>

08012118 <raise>:
 8012118:	4b02      	ldr	r3, [pc, #8]	; (8012124 <raise+0xc>)
 801211a:	4601      	mov	r1, r0
 801211c:	6818      	ldr	r0, [r3, #0]
 801211e:	f7ff bfd3 	b.w	80120c8 <_raise_r>
 8012122:	bf00      	nop
 8012124:	2000001c 	.word	0x2000001c

08012128 <_kill_r>:
 8012128:	b538      	push	{r3, r4, r5, lr}
 801212a:	4d07      	ldr	r5, [pc, #28]	; (8012148 <_kill_r+0x20>)
 801212c:	2300      	movs	r3, #0
 801212e:	4604      	mov	r4, r0
 8012130:	4608      	mov	r0, r1
 8012132:	4611      	mov	r1, r2
 8012134:	602b      	str	r3, [r5, #0]
 8012136:	f7f2 f89f 	bl	8004278 <_kill>
 801213a:	1c43      	adds	r3, r0, #1
 801213c:	d102      	bne.n	8012144 <_kill_r+0x1c>
 801213e:	682b      	ldr	r3, [r5, #0]
 8012140:	b103      	cbz	r3, 8012144 <_kill_r+0x1c>
 8012142:	6023      	str	r3, [r4, #0]
 8012144:	bd38      	pop	{r3, r4, r5, pc}
 8012146:	bf00      	nop
 8012148:	2000b680 	.word	0x2000b680

0801214c <_getpid_r>:
 801214c:	f7f2 b88c 	b.w	8004268 <_getpid>

08012150 <atan>:
 8012150:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012154:	ec55 4b10 	vmov	r4, r5, d0
 8012158:	4bc3      	ldr	r3, [pc, #780]	; (8012468 <atan+0x318>)
 801215a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801215e:	429e      	cmp	r6, r3
 8012160:	46ab      	mov	fp, r5
 8012162:	dd18      	ble.n	8012196 <atan+0x46>
 8012164:	4bc1      	ldr	r3, [pc, #772]	; (801246c <atan+0x31c>)
 8012166:	429e      	cmp	r6, r3
 8012168:	dc01      	bgt.n	801216e <atan+0x1e>
 801216a:	d109      	bne.n	8012180 <atan+0x30>
 801216c:	b144      	cbz	r4, 8012180 <atan+0x30>
 801216e:	4622      	mov	r2, r4
 8012170:	462b      	mov	r3, r5
 8012172:	4620      	mov	r0, r4
 8012174:	4629      	mov	r1, r5
 8012176:	f7ee f891 	bl	800029c <__adddf3>
 801217a:	4604      	mov	r4, r0
 801217c:	460d      	mov	r5, r1
 801217e:	e006      	b.n	801218e <atan+0x3e>
 8012180:	f1bb 0f00 	cmp.w	fp, #0
 8012184:	f300 8131 	bgt.w	80123ea <atan+0x29a>
 8012188:	a59b      	add	r5, pc, #620	; (adr r5, 80123f8 <atan+0x2a8>)
 801218a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801218e:	ec45 4b10 	vmov	d0, r4, r5
 8012192:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012196:	4bb6      	ldr	r3, [pc, #728]	; (8012470 <atan+0x320>)
 8012198:	429e      	cmp	r6, r3
 801219a:	dc14      	bgt.n	80121c6 <atan+0x76>
 801219c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80121a0:	429e      	cmp	r6, r3
 80121a2:	dc0d      	bgt.n	80121c0 <atan+0x70>
 80121a4:	a396      	add	r3, pc, #600	; (adr r3, 8012400 <atan+0x2b0>)
 80121a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121aa:	ee10 0a10 	vmov	r0, s0
 80121ae:	4629      	mov	r1, r5
 80121b0:	f7ee f874 	bl	800029c <__adddf3>
 80121b4:	4baf      	ldr	r3, [pc, #700]	; (8012474 <atan+0x324>)
 80121b6:	2200      	movs	r2, #0
 80121b8:	f7ee fcb6 	bl	8000b28 <__aeabi_dcmpgt>
 80121bc:	2800      	cmp	r0, #0
 80121be:	d1e6      	bne.n	801218e <atan+0x3e>
 80121c0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80121c4:	e02b      	b.n	801221e <atan+0xce>
 80121c6:	f000 f9b3 	bl	8012530 <fabs>
 80121ca:	4bab      	ldr	r3, [pc, #684]	; (8012478 <atan+0x328>)
 80121cc:	429e      	cmp	r6, r3
 80121ce:	ec55 4b10 	vmov	r4, r5, d0
 80121d2:	f300 80bf 	bgt.w	8012354 <atan+0x204>
 80121d6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80121da:	429e      	cmp	r6, r3
 80121dc:	f300 80a0 	bgt.w	8012320 <atan+0x1d0>
 80121e0:	ee10 2a10 	vmov	r2, s0
 80121e4:	ee10 0a10 	vmov	r0, s0
 80121e8:	462b      	mov	r3, r5
 80121ea:	4629      	mov	r1, r5
 80121ec:	f7ee f856 	bl	800029c <__adddf3>
 80121f0:	4ba0      	ldr	r3, [pc, #640]	; (8012474 <atan+0x324>)
 80121f2:	2200      	movs	r2, #0
 80121f4:	f7ee f850 	bl	8000298 <__aeabi_dsub>
 80121f8:	2200      	movs	r2, #0
 80121fa:	4606      	mov	r6, r0
 80121fc:	460f      	mov	r7, r1
 80121fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012202:	4620      	mov	r0, r4
 8012204:	4629      	mov	r1, r5
 8012206:	f7ee f849 	bl	800029c <__adddf3>
 801220a:	4602      	mov	r2, r0
 801220c:	460b      	mov	r3, r1
 801220e:	4630      	mov	r0, r6
 8012210:	4639      	mov	r1, r7
 8012212:	f7ee fb23 	bl	800085c <__aeabi_ddiv>
 8012216:	f04f 0a00 	mov.w	sl, #0
 801221a:	4604      	mov	r4, r0
 801221c:	460d      	mov	r5, r1
 801221e:	4622      	mov	r2, r4
 8012220:	462b      	mov	r3, r5
 8012222:	4620      	mov	r0, r4
 8012224:	4629      	mov	r1, r5
 8012226:	f7ee f9ef 	bl	8000608 <__aeabi_dmul>
 801222a:	4602      	mov	r2, r0
 801222c:	460b      	mov	r3, r1
 801222e:	4680      	mov	r8, r0
 8012230:	4689      	mov	r9, r1
 8012232:	f7ee f9e9 	bl	8000608 <__aeabi_dmul>
 8012236:	a374      	add	r3, pc, #464	; (adr r3, 8012408 <atan+0x2b8>)
 8012238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801223c:	4606      	mov	r6, r0
 801223e:	460f      	mov	r7, r1
 8012240:	f7ee f9e2 	bl	8000608 <__aeabi_dmul>
 8012244:	a372      	add	r3, pc, #456	; (adr r3, 8012410 <atan+0x2c0>)
 8012246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801224a:	f7ee f827 	bl	800029c <__adddf3>
 801224e:	4632      	mov	r2, r6
 8012250:	463b      	mov	r3, r7
 8012252:	f7ee f9d9 	bl	8000608 <__aeabi_dmul>
 8012256:	a370      	add	r3, pc, #448	; (adr r3, 8012418 <atan+0x2c8>)
 8012258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801225c:	f7ee f81e 	bl	800029c <__adddf3>
 8012260:	4632      	mov	r2, r6
 8012262:	463b      	mov	r3, r7
 8012264:	f7ee f9d0 	bl	8000608 <__aeabi_dmul>
 8012268:	a36d      	add	r3, pc, #436	; (adr r3, 8012420 <atan+0x2d0>)
 801226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226e:	f7ee f815 	bl	800029c <__adddf3>
 8012272:	4632      	mov	r2, r6
 8012274:	463b      	mov	r3, r7
 8012276:	f7ee f9c7 	bl	8000608 <__aeabi_dmul>
 801227a:	a36b      	add	r3, pc, #428	; (adr r3, 8012428 <atan+0x2d8>)
 801227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012280:	f7ee f80c 	bl	800029c <__adddf3>
 8012284:	4632      	mov	r2, r6
 8012286:	463b      	mov	r3, r7
 8012288:	f7ee f9be 	bl	8000608 <__aeabi_dmul>
 801228c:	a368      	add	r3, pc, #416	; (adr r3, 8012430 <atan+0x2e0>)
 801228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012292:	f7ee f803 	bl	800029c <__adddf3>
 8012296:	4642      	mov	r2, r8
 8012298:	464b      	mov	r3, r9
 801229a:	f7ee f9b5 	bl	8000608 <__aeabi_dmul>
 801229e:	a366      	add	r3, pc, #408	; (adr r3, 8012438 <atan+0x2e8>)
 80122a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a4:	4680      	mov	r8, r0
 80122a6:	4689      	mov	r9, r1
 80122a8:	4630      	mov	r0, r6
 80122aa:	4639      	mov	r1, r7
 80122ac:	f7ee f9ac 	bl	8000608 <__aeabi_dmul>
 80122b0:	a363      	add	r3, pc, #396	; (adr r3, 8012440 <atan+0x2f0>)
 80122b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b6:	f7ed ffef 	bl	8000298 <__aeabi_dsub>
 80122ba:	4632      	mov	r2, r6
 80122bc:	463b      	mov	r3, r7
 80122be:	f7ee f9a3 	bl	8000608 <__aeabi_dmul>
 80122c2:	a361      	add	r3, pc, #388	; (adr r3, 8012448 <atan+0x2f8>)
 80122c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c8:	f7ed ffe6 	bl	8000298 <__aeabi_dsub>
 80122cc:	4632      	mov	r2, r6
 80122ce:	463b      	mov	r3, r7
 80122d0:	f7ee f99a 	bl	8000608 <__aeabi_dmul>
 80122d4:	a35e      	add	r3, pc, #376	; (adr r3, 8012450 <atan+0x300>)
 80122d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122da:	f7ed ffdd 	bl	8000298 <__aeabi_dsub>
 80122de:	4632      	mov	r2, r6
 80122e0:	463b      	mov	r3, r7
 80122e2:	f7ee f991 	bl	8000608 <__aeabi_dmul>
 80122e6:	a35c      	add	r3, pc, #368	; (adr r3, 8012458 <atan+0x308>)
 80122e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ec:	f7ed ffd4 	bl	8000298 <__aeabi_dsub>
 80122f0:	4632      	mov	r2, r6
 80122f2:	463b      	mov	r3, r7
 80122f4:	f7ee f988 	bl	8000608 <__aeabi_dmul>
 80122f8:	4602      	mov	r2, r0
 80122fa:	460b      	mov	r3, r1
 80122fc:	4640      	mov	r0, r8
 80122fe:	4649      	mov	r1, r9
 8012300:	f7ed ffcc 	bl	800029c <__adddf3>
 8012304:	4622      	mov	r2, r4
 8012306:	462b      	mov	r3, r5
 8012308:	f7ee f97e 	bl	8000608 <__aeabi_dmul>
 801230c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8012310:	4602      	mov	r2, r0
 8012312:	460b      	mov	r3, r1
 8012314:	d14b      	bne.n	80123ae <atan+0x25e>
 8012316:	4620      	mov	r0, r4
 8012318:	4629      	mov	r1, r5
 801231a:	f7ed ffbd 	bl	8000298 <__aeabi_dsub>
 801231e:	e72c      	b.n	801217a <atan+0x2a>
 8012320:	ee10 0a10 	vmov	r0, s0
 8012324:	4b53      	ldr	r3, [pc, #332]	; (8012474 <atan+0x324>)
 8012326:	2200      	movs	r2, #0
 8012328:	4629      	mov	r1, r5
 801232a:	f7ed ffb5 	bl	8000298 <__aeabi_dsub>
 801232e:	4b51      	ldr	r3, [pc, #324]	; (8012474 <atan+0x324>)
 8012330:	4606      	mov	r6, r0
 8012332:	460f      	mov	r7, r1
 8012334:	2200      	movs	r2, #0
 8012336:	4620      	mov	r0, r4
 8012338:	4629      	mov	r1, r5
 801233a:	f7ed ffaf 	bl	800029c <__adddf3>
 801233e:	4602      	mov	r2, r0
 8012340:	460b      	mov	r3, r1
 8012342:	4630      	mov	r0, r6
 8012344:	4639      	mov	r1, r7
 8012346:	f7ee fa89 	bl	800085c <__aeabi_ddiv>
 801234a:	f04f 0a01 	mov.w	sl, #1
 801234e:	4604      	mov	r4, r0
 8012350:	460d      	mov	r5, r1
 8012352:	e764      	b.n	801221e <atan+0xce>
 8012354:	4b49      	ldr	r3, [pc, #292]	; (801247c <atan+0x32c>)
 8012356:	429e      	cmp	r6, r3
 8012358:	da1d      	bge.n	8012396 <atan+0x246>
 801235a:	ee10 0a10 	vmov	r0, s0
 801235e:	4b48      	ldr	r3, [pc, #288]	; (8012480 <atan+0x330>)
 8012360:	2200      	movs	r2, #0
 8012362:	4629      	mov	r1, r5
 8012364:	f7ed ff98 	bl	8000298 <__aeabi_dsub>
 8012368:	4b45      	ldr	r3, [pc, #276]	; (8012480 <atan+0x330>)
 801236a:	4606      	mov	r6, r0
 801236c:	460f      	mov	r7, r1
 801236e:	2200      	movs	r2, #0
 8012370:	4620      	mov	r0, r4
 8012372:	4629      	mov	r1, r5
 8012374:	f7ee f948 	bl	8000608 <__aeabi_dmul>
 8012378:	4b3e      	ldr	r3, [pc, #248]	; (8012474 <atan+0x324>)
 801237a:	2200      	movs	r2, #0
 801237c:	f7ed ff8e 	bl	800029c <__adddf3>
 8012380:	4602      	mov	r2, r0
 8012382:	460b      	mov	r3, r1
 8012384:	4630      	mov	r0, r6
 8012386:	4639      	mov	r1, r7
 8012388:	f7ee fa68 	bl	800085c <__aeabi_ddiv>
 801238c:	f04f 0a02 	mov.w	sl, #2
 8012390:	4604      	mov	r4, r0
 8012392:	460d      	mov	r5, r1
 8012394:	e743      	b.n	801221e <atan+0xce>
 8012396:	462b      	mov	r3, r5
 8012398:	ee10 2a10 	vmov	r2, s0
 801239c:	4939      	ldr	r1, [pc, #228]	; (8012484 <atan+0x334>)
 801239e:	2000      	movs	r0, #0
 80123a0:	f7ee fa5c 	bl	800085c <__aeabi_ddiv>
 80123a4:	f04f 0a03 	mov.w	sl, #3
 80123a8:	4604      	mov	r4, r0
 80123aa:	460d      	mov	r5, r1
 80123ac:	e737      	b.n	801221e <atan+0xce>
 80123ae:	4b36      	ldr	r3, [pc, #216]	; (8012488 <atan+0x338>)
 80123b0:	4e36      	ldr	r6, [pc, #216]	; (801248c <atan+0x33c>)
 80123b2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80123b6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80123ba:	e9da 2300 	ldrd	r2, r3, [sl]
 80123be:	f7ed ff6b 	bl	8000298 <__aeabi_dsub>
 80123c2:	4622      	mov	r2, r4
 80123c4:	462b      	mov	r3, r5
 80123c6:	f7ed ff67 	bl	8000298 <__aeabi_dsub>
 80123ca:	4602      	mov	r2, r0
 80123cc:	460b      	mov	r3, r1
 80123ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 80123d2:	f7ed ff61 	bl	8000298 <__aeabi_dsub>
 80123d6:	f1bb 0f00 	cmp.w	fp, #0
 80123da:	4604      	mov	r4, r0
 80123dc:	460d      	mov	r5, r1
 80123de:	f6bf aed6 	bge.w	801218e <atan+0x3e>
 80123e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123e6:	461d      	mov	r5, r3
 80123e8:	e6d1      	b.n	801218e <atan+0x3e>
 80123ea:	a51d      	add	r5, pc, #116	; (adr r5, 8012460 <atan+0x310>)
 80123ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80123f0:	e6cd      	b.n	801218e <atan+0x3e>
 80123f2:	bf00      	nop
 80123f4:	f3af 8000 	nop.w
 80123f8:	54442d18 	.word	0x54442d18
 80123fc:	bff921fb 	.word	0xbff921fb
 8012400:	8800759c 	.word	0x8800759c
 8012404:	7e37e43c 	.word	0x7e37e43c
 8012408:	e322da11 	.word	0xe322da11
 801240c:	3f90ad3a 	.word	0x3f90ad3a
 8012410:	24760deb 	.word	0x24760deb
 8012414:	3fa97b4b 	.word	0x3fa97b4b
 8012418:	a0d03d51 	.word	0xa0d03d51
 801241c:	3fb10d66 	.word	0x3fb10d66
 8012420:	c54c206e 	.word	0xc54c206e
 8012424:	3fb745cd 	.word	0x3fb745cd
 8012428:	920083ff 	.word	0x920083ff
 801242c:	3fc24924 	.word	0x3fc24924
 8012430:	5555550d 	.word	0x5555550d
 8012434:	3fd55555 	.word	0x3fd55555
 8012438:	2c6a6c2f 	.word	0x2c6a6c2f
 801243c:	bfa2b444 	.word	0xbfa2b444
 8012440:	52defd9a 	.word	0x52defd9a
 8012444:	3fadde2d 	.word	0x3fadde2d
 8012448:	af749a6d 	.word	0xaf749a6d
 801244c:	3fb3b0f2 	.word	0x3fb3b0f2
 8012450:	fe231671 	.word	0xfe231671
 8012454:	3fbc71c6 	.word	0x3fbc71c6
 8012458:	9998ebc4 	.word	0x9998ebc4
 801245c:	3fc99999 	.word	0x3fc99999
 8012460:	54442d18 	.word	0x54442d18
 8012464:	3ff921fb 	.word	0x3ff921fb
 8012468:	440fffff 	.word	0x440fffff
 801246c:	7ff00000 	.word	0x7ff00000
 8012470:	3fdbffff 	.word	0x3fdbffff
 8012474:	3ff00000 	.word	0x3ff00000
 8012478:	3ff2ffff 	.word	0x3ff2ffff
 801247c:	40038000 	.word	0x40038000
 8012480:	3ff80000 	.word	0x3ff80000
 8012484:	bff00000 	.word	0xbff00000
 8012488:	08014520 	.word	0x08014520
 801248c:	08014500 	.word	0x08014500

08012490 <cos>:
 8012490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012492:	ec53 2b10 	vmov	r2, r3, d0
 8012496:	4824      	ldr	r0, [pc, #144]	; (8012528 <cos+0x98>)
 8012498:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801249c:	4281      	cmp	r1, r0
 801249e:	dc06      	bgt.n	80124ae <cos+0x1e>
 80124a0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8012520 <cos+0x90>
 80124a4:	f000 fe34 	bl	8013110 <__kernel_cos>
 80124a8:	ec51 0b10 	vmov	r0, r1, d0
 80124ac:	e007      	b.n	80124be <cos+0x2e>
 80124ae:	481f      	ldr	r0, [pc, #124]	; (801252c <cos+0x9c>)
 80124b0:	4281      	cmp	r1, r0
 80124b2:	dd09      	ble.n	80124c8 <cos+0x38>
 80124b4:	ee10 0a10 	vmov	r0, s0
 80124b8:	4619      	mov	r1, r3
 80124ba:	f7ed feed 	bl	8000298 <__aeabi_dsub>
 80124be:	ec41 0b10 	vmov	d0, r0, r1
 80124c2:	b005      	add	sp, #20
 80124c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80124c8:	4668      	mov	r0, sp
 80124ca:	f000 fb61 	bl	8012b90 <__ieee754_rem_pio2>
 80124ce:	f000 0003 	and.w	r0, r0, #3
 80124d2:	2801      	cmp	r0, #1
 80124d4:	d007      	beq.n	80124e6 <cos+0x56>
 80124d6:	2802      	cmp	r0, #2
 80124d8:	d012      	beq.n	8012500 <cos+0x70>
 80124da:	b9c0      	cbnz	r0, 801250e <cos+0x7e>
 80124dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80124e0:	ed9d 0b00 	vldr	d0, [sp]
 80124e4:	e7de      	b.n	80124a4 <cos+0x14>
 80124e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80124ea:	ed9d 0b00 	vldr	d0, [sp]
 80124ee:	f001 fa17 	bl	8013920 <__kernel_sin>
 80124f2:	ec53 2b10 	vmov	r2, r3, d0
 80124f6:	ee10 0a10 	vmov	r0, s0
 80124fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80124fe:	e7de      	b.n	80124be <cos+0x2e>
 8012500:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012504:	ed9d 0b00 	vldr	d0, [sp]
 8012508:	f000 fe02 	bl	8013110 <__kernel_cos>
 801250c:	e7f1      	b.n	80124f2 <cos+0x62>
 801250e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012512:	ed9d 0b00 	vldr	d0, [sp]
 8012516:	2001      	movs	r0, #1
 8012518:	f001 fa02 	bl	8013920 <__kernel_sin>
 801251c:	e7c4      	b.n	80124a8 <cos+0x18>
 801251e:	bf00      	nop
	...
 8012528:	3fe921fb 	.word	0x3fe921fb
 801252c:	7fefffff 	.word	0x7fefffff

08012530 <fabs>:
 8012530:	ec51 0b10 	vmov	r0, r1, d0
 8012534:	ee10 2a10 	vmov	r2, s0
 8012538:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801253c:	ec43 2b10 	vmov	d0, r2, r3
 8012540:	4770      	bx	lr
 8012542:	0000      	movs	r0, r0
 8012544:	0000      	movs	r0, r0
	...

08012548 <sin>:
 8012548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801254a:	ec53 2b10 	vmov	r2, r3, d0
 801254e:	4826      	ldr	r0, [pc, #152]	; (80125e8 <sin+0xa0>)
 8012550:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012554:	4281      	cmp	r1, r0
 8012556:	dc07      	bgt.n	8012568 <sin+0x20>
 8012558:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80125e0 <sin+0x98>
 801255c:	2000      	movs	r0, #0
 801255e:	f001 f9df 	bl	8013920 <__kernel_sin>
 8012562:	ec51 0b10 	vmov	r0, r1, d0
 8012566:	e007      	b.n	8012578 <sin+0x30>
 8012568:	4820      	ldr	r0, [pc, #128]	; (80125ec <sin+0xa4>)
 801256a:	4281      	cmp	r1, r0
 801256c:	dd09      	ble.n	8012582 <sin+0x3a>
 801256e:	ee10 0a10 	vmov	r0, s0
 8012572:	4619      	mov	r1, r3
 8012574:	f7ed fe90 	bl	8000298 <__aeabi_dsub>
 8012578:	ec41 0b10 	vmov	d0, r0, r1
 801257c:	b005      	add	sp, #20
 801257e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012582:	4668      	mov	r0, sp
 8012584:	f000 fb04 	bl	8012b90 <__ieee754_rem_pio2>
 8012588:	f000 0003 	and.w	r0, r0, #3
 801258c:	2801      	cmp	r0, #1
 801258e:	d008      	beq.n	80125a2 <sin+0x5a>
 8012590:	2802      	cmp	r0, #2
 8012592:	d00d      	beq.n	80125b0 <sin+0x68>
 8012594:	b9d0      	cbnz	r0, 80125cc <sin+0x84>
 8012596:	ed9d 1b02 	vldr	d1, [sp, #8]
 801259a:	ed9d 0b00 	vldr	d0, [sp]
 801259e:	2001      	movs	r0, #1
 80125a0:	e7dd      	b.n	801255e <sin+0x16>
 80125a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80125a6:	ed9d 0b00 	vldr	d0, [sp]
 80125aa:	f000 fdb1 	bl	8013110 <__kernel_cos>
 80125ae:	e7d8      	b.n	8012562 <sin+0x1a>
 80125b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80125b4:	ed9d 0b00 	vldr	d0, [sp]
 80125b8:	2001      	movs	r0, #1
 80125ba:	f001 f9b1 	bl	8013920 <__kernel_sin>
 80125be:	ec53 2b10 	vmov	r2, r3, d0
 80125c2:	ee10 0a10 	vmov	r0, s0
 80125c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80125ca:	e7d5      	b.n	8012578 <sin+0x30>
 80125cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80125d0:	ed9d 0b00 	vldr	d0, [sp]
 80125d4:	f000 fd9c 	bl	8013110 <__kernel_cos>
 80125d8:	e7f1      	b.n	80125be <sin+0x76>
 80125da:	bf00      	nop
 80125dc:	f3af 8000 	nop.w
	...
 80125e8:	3fe921fb 	.word	0x3fe921fb
 80125ec:	7fefffff 	.word	0x7fefffff

080125f0 <acos>:
 80125f0:	b538      	push	{r3, r4, r5, lr}
 80125f2:	ed2d 8b02 	vpush	{d8}
 80125f6:	ec55 4b10 	vmov	r4, r5, d0
 80125fa:	f000 f869 	bl	80126d0 <__ieee754_acos>
 80125fe:	4b16      	ldr	r3, [pc, #88]	; (8012658 <acos+0x68>)
 8012600:	eeb0 8a40 	vmov.f32	s16, s0
 8012604:	eef0 8a60 	vmov.f32	s17, s1
 8012608:	f993 3000 	ldrsb.w	r3, [r3]
 801260c:	3301      	adds	r3, #1
 801260e:	d01c      	beq.n	801264a <acos+0x5a>
 8012610:	4622      	mov	r2, r4
 8012612:	462b      	mov	r3, r5
 8012614:	4620      	mov	r0, r4
 8012616:	4629      	mov	r1, r5
 8012618:	f7ee fa90 	bl	8000b3c <__aeabi_dcmpun>
 801261c:	b9a8      	cbnz	r0, 801264a <acos+0x5a>
 801261e:	ec45 4b10 	vmov	d0, r4, r5
 8012622:	f7ff ff85 	bl	8012530 <fabs>
 8012626:	4b0d      	ldr	r3, [pc, #52]	; (801265c <acos+0x6c>)
 8012628:	ec51 0b10 	vmov	r0, r1, d0
 801262c:	2200      	movs	r2, #0
 801262e:	f7ee fa7b 	bl	8000b28 <__aeabi_dcmpgt>
 8012632:	b150      	cbz	r0, 801264a <acos+0x5a>
 8012634:	f7fc ff6e 	bl	800f514 <__errno>
 8012638:	ecbd 8b02 	vpop	{d8}
 801263c:	2321      	movs	r3, #33	; 0x21
 801263e:	6003      	str	r3, [r0, #0]
 8012640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012644:	4806      	ldr	r0, [pc, #24]	; (8012660 <acos+0x70>)
 8012646:	f001 baab 	b.w	8013ba0 <nan>
 801264a:	eeb0 0a48 	vmov.f32	s0, s16
 801264e:	eef0 0a68 	vmov.f32	s1, s17
 8012652:	ecbd 8b02 	vpop	{d8}
 8012656:	bd38      	pop	{r3, r4, r5, pc}
 8012658:	200001ec 	.word	0x200001ec
 801265c:	3ff00000 	.word	0x3ff00000
 8012660:	080144f0 	.word	0x080144f0

08012664 <sqrt>:
 8012664:	b538      	push	{r3, r4, r5, lr}
 8012666:	ed2d 8b02 	vpush	{d8}
 801266a:	ec55 4b10 	vmov	r4, r5, d0
 801266e:	f000 fc99 	bl	8012fa4 <__ieee754_sqrt>
 8012672:	4b15      	ldr	r3, [pc, #84]	; (80126c8 <sqrt+0x64>)
 8012674:	eeb0 8a40 	vmov.f32	s16, s0
 8012678:	eef0 8a60 	vmov.f32	s17, s1
 801267c:	f993 3000 	ldrsb.w	r3, [r3]
 8012680:	3301      	adds	r3, #1
 8012682:	d019      	beq.n	80126b8 <sqrt+0x54>
 8012684:	4622      	mov	r2, r4
 8012686:	462b      	mov	r3, r5
 8012688:	4620      	mov	r0, r4
 801268a:	4629      	mov	r1, r5
 801268c:	f7ee fa56 	bl	8000b3c <__aeabi_dcmpun>
 8012690:	b990      	cbnz	r0, 80126b8 <sqrt+0x54>
 8012692:	2200      	movs	r2, #0
 8012694:	2300      	movs	r3, #0
 8012696:	4620      	mov	r0, r4
 8012698:	4629      	mov	r1, r5
 801269a:	f7ee fa27 	bl	8000aec <__aeabi_dcmplt>
 801269e:	b158      	cbz	r0, 80126b8 <sqrt+0x54>
 80126a0:	f7fc ff38 	bl	800f514 <__errno>
 80126a4:	2321      	movs	r3, #33	; 0x21
 80126a6:	6003      	str	r3, [r0, #0]
 80126a8:	2200      	movs	r2, #0
 80126aa:	2300      	movs	r3, #0
 80126ac:	4610      	mov	r0, r2
 80126ae:	4619      	mov	r1, r3
 80126b0:	f7ee f8d4 	bl	800085c <__aeabi_ddiv>
 80126b4:	ec41 0b18 	vmov	d8, r0, r1
 80126b8:	eeb0 0a48 	vmov.f32	s0, s16
 80126bc:	eef0 0a68 	vmov.f32	s1, s17
 80126c0:	ecbd 8b02 	vpop	{d8}
 80126c4:	bd38      	pop	{r3, r4, r5, pc}
 80126c6:	bf00      	nop
 80126c8:	200001ec 	.word	0x200001ec
 80126cc:	00000000 	.word	0x00000000

080126d0 <__ieee754_acos>:
 80126d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d4:	ec55 4b10 	vmov	r4, r5, d0
 80126d8:	49b7      	ldr	r1, [pc, #732]	; (80129b8 <__ieee754_acos+0x2e8>)
 80126da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80126de:	428b      	cmp	r3, r1
 80126e0:	dd1b      	ble.n	801271a <__ieee754_acos+0x4a>
 80126e2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80126e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80126ea:	4323      	orrs	r3, r4
 80126ec:	d106      	bne.n	80126fc <__ieee754_acos+0x2c>
 80126ee:	2d00      	cmp	r5, #0
 80126f0:	f300 8211 	bgt.w	8012b16 <__ieee754_acos+0x446>
 80126f4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8012950 <__ieee754_acos+0x280>
 80126f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126fc:	ee10 2a10 	vmov	r2, s0
 8012700:	462b      	mov	r3, r5
 8012702:	ee10 0a10 	vmov	r0, s0
 8012706:	4629      	mov	r1, r5
 8012708:	f7ed fdc6 	bl	8000298 <__aeabi_dsub>
 801270c:	4602      	mov	r2, r0
 801270e:	460b      	mov	r3, r1
 8012710:	f7ee f8a4 	bl	800085c <__aeabi_ddiv>
 8012714:	ec41 0b10 	vmov	d0, r0, r1
 8012718:	e7ee      	b.n	80126f8 <__ieee754_acos+0x28>
 801271a:	49a8      	ldr	r1, [pc, #672]	; (80129bc <__ieee754_acos+0x2ec>)
 801271c:	428b      	cmp	r3, r1
 801271e:	f300 8087 	bgt.w	8012830 <__ieee754_acos+0x160>
 8012722:	4aa7      	ldr	r2, [pc, #668]	; (80129c0 <__ieee754_acos+0x2f0>)
 8012724:	4293      	cmp	r3, r2
 8012726:	f340 81f9 	ble.w	8012b1c <__ieee754_acos+0x44c>
 801272a:	ee10 2a10 	vmov	r2, s0
 801272e:	ee10 0a10 	vmov	r0, s0
 8012732:	462b      	mov	r3, r5
 8012734:	4629      	mov	r1, r5
 8012736:	f7ed ff67 	bl	8000608 <__aeabi_dmul>
 801273a:	a387      	add	r3, pc, #540	; (adr r3, 8012958 <__ieee754_acos+0x288>)
 801273c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012740:	4606      	mov	r6, r0
 8012742:	460f      	mov	r7, r1
 8012744:	f7ed ff60 	bl	8000608 <__aeabi_dmul>
 8012748:	a385      	add	r3, pc, #532	; (adr r3, 8012960 <__ieee754_acos+0x290>)
 801274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801274e:	f7ed fda5 	bl	800029c <__adddf3>
 8012752:	4632      	mov	r2, r6
 8012754:	463b      	mov	r3, r7
 8012756:	f7ed ff57 	bl	8000608 <__aeabi_dmul>
 801275a:	a383      	add	r3, pc, #524	; (adr r3, 8012968 <__ieee754_acos+0x298>)
 801275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012760:	f7ed fd9a 	bl	8000298 <__aeabi_dsub>
 8012764:	4632      	mov	r2, r6
 8012766:	463b      	mov	r3, r7
 8012768:	f7ed ff4e 	bl	8000608 <__aeabi_dmul>
 801276c:	a380      	add	r3, pc, #512	; (adr r3, 8012970 <__ieee754_acos+0x2a0>)
 801276e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012772:	f7ed fd93 	bl	800029c <__adddf3>
 8012776:	4632      	mov	r2, r6
 8012778:	463b      	mov	r3, r7
 801277a:	f7ed ff45 	bl	8000608 <__aeabi_dmul>
 801277e:	a37e      	add	r3, pc, #504	; (adr r3, 8012978 <__ieee754_acos+0x2a8>)
 8012780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012784:	f7ed fd88 	bl	8000298 <__aeabi_dsub>
 8012788:	4632      	mov	r2, r6
 801278a:	463b      	mov	r3, r7
 801278c:	f7ed ff3c 	bl	8000608 <__aeabi_dmul>
 8012790:	a37b      	add	r3, pc, #492	; (adr r3, 8012980 <__ieee754_acos+0x2b0>)
 8012792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012796:	f7ed fd81 	bl	800029c <__adddf3>
 801279a:	4632      	mov	r2, r6
 801279c:	463b      	mov	r3, r7
 801279e:	f7ed ff33 	bl	8000608 <__aeabi_dmul>
 80127a2:	a379      	add	r3, pc, #484	; (adr r3, 8012988 <__ieee754_acos+0x2b8>)
 80127a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a8:	4680      	mov	r8, r0
 80127aa:	4689      	mov	r9, r1
 80127ac:	4630      	mov	r0, r6
 80127ae:	4639      	mov	r1, r7
 80127b0:	f7ed ff2a 	bl	8000608 <__aeabi_dmul>
 80127b4:	a376      	add	r3, pc, #472	; (adr r3, 8012990 <__ieee754_acos+0x2c0>)
 80127b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ba:	f7ed fd6d 	bl	8000298 <__aeabi_dsub>
 80127be:	4632      	mov	r2, r6
 80127c0:	463b      	mov	r3, r7
 80127c2:	f7ed ff21 	bl	8000608 <__aeabi_dmul>
 80127c6:	a374      	add	r3, pc, #464	; (adr r3, 8012998 <__ieee754_acos+0x2c8>)
 80127c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127cc:	f7ed fd66 	bl	800029c <__adddf3>
 80127d0:	4632      	mov	r2, r6
 80127d2:	463b      	mov	r3, r7
 80127d4:	f7ed ff18 	bl	8000608 <__aeabi_dmul>
 80127d8:	a371      	add	r3, pc, #452	; (adr r3, 80129a0 <__ieee754_acos+0x2d0>)
 80127da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127de:	f7ed fd5b 	bl	8000298 <__aeabi_dsub>
 80127e2:	4632      	mov	r2, r6
 80127e4:	463b      	mov	r3, r7
 80127e6:	f7ed ff0f 	bl	8000608 <__aeabi_dmul>
 80127ea:	4b76      	ldr	r3, [pc, #472]	; (80129c4 <__ieee754_acos+0x2f4>)
 80127ec:	2200      	movs	r2, #0
 80127ee:	f7ed fd55 	bl	800029c <__adddf3>
 80127f2:	4602      	mov	r2, r0
 80127f4:	460b      	mov	r3, r1
 80127f6:	4640      	mov	r0, r8
 80127f8:	4649      	mov	r1, r9
 80127fa:	f7ee f82f 	bl	800085c <__aeabi_ddiv>
 80127fe:	4622      	mov	r2, r4
 8012800:	462b      	mov	r3, r5
 8012802:	f7ed ff01 	bl	8000608 <__aeabi_dmul>
 8012806:	4602      	mov	r2, r0
 8012808:	460b      	mov	r3, r1
 801280a:	a167      	add	r1, pc, #412	; (adr r1, 80129a8 <__ieee754_acos+0x2d8>)
 801280c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012810:	f7ed fd42 	bl	8000298 <__aeabi_dsub>
 8012814:	4602      	mov	r2, r0
 8012816:	460b      	mov	r3, r1
 8012818:	4620      	mov	r0, r4
 801281a:	4629      	mov	r1, r5
 801281c:	f7ed fd3c 	bl	8000298 <__aeabi_dsub>
 8012820:	4602      	mov	r2, r0
 8012822:	460b      	mov	r3, r1
 8012824:	a162      	add	r1, pc, #392	; (adr r1, 80129b0 <__ieee754_acos+0x2e0>)
 8012826:	e9d1 0100 	ldrd	r0, r1, [r1]
 801282a:	f7ed fd35 	bl	8000298 <__aeabi_dsub>
 801282e:	e771      	b.n	8012714 <__ieee754_acos+0x44>
 8012830:	2d00      	cmp	r5, #0
 8012832:	f280 80cb 	bge.w	80129cc <__ieee754_acos+0x2fc>
 8012836:	ee10 0a10 	vmov	r0, s0
 801283a:	4b62      	ldr	r3, [pc, #392]	; (80129c4 <__ieee754_acos+0x2f4>)
 801283c:	2200      	movs	r2, #0
 801283e:	4629      	mov	r1, r5
 8012840:	f7ed fd2c 	bl	800029c <__adddf3>
 8012844:	4b60      	ldr	r3, [pc, #384]	; (80129c8 <__ieee754_acos+0x2f8>)
 8012846:	2200      	movs	r2, #0
 8012848:	f7ed fede 	bl	8000608 <__aeabi_dmul>
 801284c:	a342      	add	r3, pc, #264	; (adr r3, 8012958 <__ieee754_acos+0x288>)
 801284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012852:	4604      	mov	r4, r0
 8012854:	460d      	mov	r5, r1
 8012856:	f7ed fed7 	bl	8000608 <__aeabi_dmul>
 801285a:	a341      	add	r3, pc, #260	; (adr r3, 8012960 <__ieee754_acos+0x290>)
 801285c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012860:	f7ed fd1c 	bl	800029c <__adddf3>
 8012864:	4622      	mov	r2, r4
 8012866:	462b      	mov	r3, r5
 8012868:	f7ed fece 	bl	8000608 <__aeabi_dmul>
 801286c:	a33e      	add	r3, pc, #248	; (adr r3, 8012968 <__ieee754_acos+0x298>)
 801286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012872:	f7ed fd11 	bl	8000298 <__aeabi_dsub>
 8012876:	4622      	mov	r2, r4
 8012878:	462b      	mov	r3, r5
 801287a:	f7ed fec5 	bl	8000608 <__aeabi_dmul>
 801287e:	a33c      	add	r3, pc, #240	; (adr r3, 8012970 <__ieee754_acos+0x2a0>)
 8012880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012884:	f7ed fd0a 	bl	800029c <__adddf3>
 8012888:	4622      	mov	r2, r4
 801288a:	462b      	mov	r3, r5
 801288c:	f7ed febc 	bl	8000608 <__aeabi_dmul>
 8012890:	a339      	add	r3, pc, #228	; (adr r3, 8012978 <__ieee754_acos+0x2a8>)
 8012892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012896:	f7ed fcff 	bl	8000298 <__aeabi_dsub>
 801289a:	4622      	mov	r2, r4
 801289c:	462b      	mov	r3, r5
 801289e:	f7ed feb3 	bl	8000608 <__aeabi_dmul>
 80128a2:	a337      	add	r3, pc, #220	; (adr r3, 8012980 <__ieee754_acos+0x2b0>)
 80128a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a8:	f7ed fcf8 	bl	800029c <__adddf3>
 80128ac:	4622      	mov	r2, r4
 80128ae:	462b      	mov	r3, r5
 80128b0:	f7ed feaa 	bl	8000608 <__aeabi_dmul>
 80128b4:	ec45 4b10 	vmov	d0, r4, r5
 80128b8:	4680      	mov	r8, r0
 80128ba:	4689      	mov	r9, r1
 80128bc:	f000 fb72 	bl	8012fa4 <__ieee754_sqrt>
 80128c0:	a331      	add	r3, pc, #196	; (adr r3, 8012988 <__ieee754_acos+0x2b8>)
 80128c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c6:	4620      	mov	r0, r4
 80128c8:	4629      	mov	r1, r5
 80128ca:	ec57 6b10 	vmov	r6, r7, d0
 80128ce:	f7ed fe9b 	bl	8000608 <__aeabi_dmul>
 80128d2:	a32f      	add	r3, pc, #188	; (adr r3, 8012990 <__ieee754_acos+0x2c0>)
 80128d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d8:	f7ed fcde 	bl	8000298 <__aeabi_dsub>
 80128dc:	4622      	mov	r2, r4
 80128de:	462b      	mov	r3, r5
 80128e0:	f7ed fe92 	bl	8000608 <__aeabi_dmul>
 80128e4:	a32c      	add	r3, pc, #176	; (adr r3, 8012998 <__ieee754_acos+0x2c8>)
 80128e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ea:	f7ed fcd7 	bl	800029c <__adddf3>
 80128ee:	4622      	mov	r2, r4
 80128f0:	462b      	mov	r3, r5
 80128f2:	f7ed fe89 	bl	8000608 <__aeabi_dmul>
 80128f6:	a32a      	add	r3, pc, #168	; (adr r3, 80129a0 <__ieee754_acos+0x2d0>)
 80128f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128fc:	f7ed fccc 	bl	8000298 <__aeabi_dsub>
 8012900:	4622      	mov	r2, r4
 8012902:	462b      	mov	r3, r5
 8012904:	f7ed fe80 	bl	8000608 <__aeabi_dmul>
 8012908:	4b2e      	ldr	r3, [pc, #184]	; (80129c4 <__ieee754_acos+0x2f4>)
 801290a:	2200      	movs	r2, #0
 801290c:	f7ed fcc6 	bl	800029c <__adddf3>
 8012910:	4602      	mov	r2, r0
 8012912:	460b      	mov	r3, r1
 8012914:	4640      	mov	r0, r8
 8012916:	4649      	mov	r1, r9
 8012918:	f7ed ffa0 	bl	800085c <__aeabi_ddiv>
 801291c:	4632      	mov	r2, r6
 801291e:	463b      	mov	r3, r7
 8012920:	f7ed fe72 	bl	8000608 <__aeabi_dmul>
 8012924:	a320      	add	r3, pc, #128	; (adr r3, 80129a8 <__ieee754_acos+0x2d8>)
 8012926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801292a:	f7ed fcb5 	bl	8000298 <__aeabi_dsub>
 801292e:	4632      	mov	r2, r6
 8012930:	463b      	mov	r3, r7
 8012932:	f7ed fcb3 	bl	800029c <__adddf3>
 8012936:	4602      	mov	r2, r0
 8012938:	460b      	mov	r3, r1
 801293a:	f7ed fcaf 	bl	800029c <__adddf3>
 801293e:	4602      	mov	r2, r0
 8012940:	460b      	mov	r3, r1
 8012942:	a103      	add	r1, pc, #12	; (adr r1, 8012950 <__ieee754_acos+0x280>)
 8012944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012948:	e76f      	b.n	801282a <__ieee754_acos+0x15a>
 801294a:	bf00      	nop
 801294c:	f3af 8000 	nop.w
 8012950:	54442d18 	.word	0x54442d18
 8012954:	400921fb 	.word	0x400921fb
 8012958:	0dfdf709 	.word	0x0dfdf709
 801295c:	3f023de1 	.word	0x3f023de1
 8012960:	7501b288 	.word	0x7501b288
 8012964:	3f49efe0 	.word	0x3f49efe0
 8012968:	b5688f3b 	.word	0xb5688f3b
 801296c:	3fa48228 	.word	0x3fa48228
 8012970:	0e884455 	.word	0x0e884455
 8012974:	3fc9c155 	.word	0x3fc9c155
 8012978:	03eb6f7d 	.word	0x03eb6f7d
 801297c:	3fd4d612 	.word	0x3fd4d612
 8012980:	55555555 	.word	0x55555555
 8012984:	3fc55555 	.word	0x3fc55555
 8012988:	b12e9282 	.word	0xb12e9282
 801298c:	3fb3b8c5 	.word	0x3fb3b8c5
 8012990:	1b8d0159 	.word	0x1b8d0159
 8012994:	3fe6066c 	.word	0x3fe6066c
 8012998:	9c598ac8 	.word	0x9c598ac8
 801299c:	40002ae5 	.word	0x40002ae5
 80129a0:	1c8a2d4b 	.word	0x1c8a2d4b
 80129a4:	40033a27 	.word	0x40033a27
 80129a8:	33145c07 	.word	0x33145c07
 80129ac:	3c91a626 	.word	0x3c91a626
 80129b0:	54442d18 	.word	0x54442d18
 80129b4:	3ff921fb 	.word	0x3ff921fb
 80129b8:	3fefffff 	.word	0x3fefffff
 80129bc:	3fdfffff 	.word	0x3fdfffff
 80129c0:	3c600000 	.word	0x3c600000
 80129c4:	3ff00000 	.word	0x3ff00000
 80129c8:	3fe00000 	.word	0x3fe00000
 80129cc:	ee10 2a10 	vmov	r2, s0
 80129d0:	462b      	mov	r3, r5
 80129d2:	496d      	ldr	r1, [pc, #436]	; (8012b88 <__ieee754_acos+0x4b8>)
 80129d4:	2000      	movs	r0, #0
 80129d6:	f7ed fc5f 	bl	8000298 <__aeabi_dsub>
 80129da:	4b6c      	ldr	r3, [pc, #432]	; (8012b8c <__ieee754_acos+0x4bc>)
 80129dc:	2200      	movs	r2, #0
 80129de:	f7ed fe13 	bl	8000608 <__aeabi_dmul>
 80129e2:	4604      	mov	r4, r0
 80129e4:	460d      	mov	r5, r1
 80129e6:	ec45 4b10 	vmov	d0, r4, r5
 80129ea:	f000 fadb 	bl	8012fa4 <__ieee754_sqrt>
 80129ee:	a34e      	add	r3, pc, #312	; (adr r3, 8012b28 <__ieee754_acos+0x458>)
 80129f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129f4:	4620      	mov	r0, r4
 80129f6:	4629      	mov	r1, r5
 80129f8:	ec59 8b10 	vmov	r8, r9, d0
 80129fc:	f7ed fe04 	bl	8000608 <__aeabi_dmul>
 8012a00:	a34b      	add	r3, pc, #300	; (adr r3, 8012b30 <__ieee754_acos+0x460>)
 8012a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a06:	f7ed fc49 	bl	800029c <__adddf3>
 8012a0a:	4622      	mov	r2, r4
 8012a0c:	462b      	mov	r3, r5
 8012a0e:	f7ed fdfb 	bl	8000608 <__aeabi_dmul>
 8012a12:	a349      	add	r3, pc, #292	; (adr r3, 8012b38 <__ieee754_acos+0x468>)
 8012a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a18:	f7ed fc3e 	bl	8000298 <__aeabi_dsub>
 8012a1c:	4622      	mov	r2, r4
 8012a1e:	462b      	mov	r3, r5
 8012a20:	f7ed fdf2 	bl	8000608 <__aeabi_dmul>
 8012a24:	a346      	add	r3, pc, #280	; (adr r3, 8012b40 <__ieee754_acos+0x470>)
 8012a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a2a:	f7ed fc37 	bl	800029c <__adddf3>
 8012a2e:	4622      	mov	r2, r4
 8012a30:	462b      	mov	r3, r5
 8012a32:	f7ed fde9 	bl	8000608 <__aeabi_dmul>
 8012a36:	a344      	add	r3, pc, #272	; (adr r3, 8012b48 <__ieee754_acos+0x478>)
 8012a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a3c:	f7ed fc2c 	bl	8000298 <__aeabi_dsub>
 8012a40:	4622      	mov	r2, r4
 8012a42:	462b      	mov	r3, r5
 8012a44:	f7ed fde0 	bl	8000608 <__aeabi_dmul>
 8012a48:	a341      	add	r3, pc, #260	; (adr r3, 8012b50 <__ieee754_acos+0x480>)
 8012a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4e:	f7ed fc25 	bl	800029c <__adddf3>
 8012a52:	4622      	mov	r2, r4
 8012a54:	462b      	mov	r3, r5
 8012a56:	f7ed fdd7 	bl	8000608 <__aeabi_dmul>
 8012a5a:	a33f      	add	r3, pc, #252	; (adr r3, 8012b58 <__ieee754_acos+0x488>)
 8012a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a60:	4682      	mov	sl, r0
 8012a62:	468b      	mov	fp, r1
 8012a64:	4620      	mov	r0, r4
 8012a66:	4629      	mov	r1, r5
 8012a68:	f7ed fdce 	bl	8000608 <__aeabi_dmul>
 8012a6c:	a33c      	add	r3, pc, #240	; (adr r3, 8012b60 <__ieee754_acos+0x490>)
 8012a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a72:	f7ed fc11 	bl	8000298 <__aeabi_dsub>
 8012a76:	4622      	mov	r2, r4
 8012a78:	462b      	mov	r3, r5
 8012a7a:	f7ed fdc5 	bl	8000608 <__aeabi_dmul>
 8012a7e:	a33a      	add	r3, pc, #232	; (adr r3, 8012b68 <__ieee754_acos+0x498>)
 8012a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a84:	f7ed fc0a 	bl	800029c <__adddf3>
 8012a88:	4622      	mov	r2, r4
 8012a8a:	462b      	mov	r3, r5
 8012a8c:	f7ed fdbc 	bl	8000608 <__aeabi_dmul>
 8012a90:	a337      	add	r3, pc, #220	; (adr r3, 8012b70 <__ieee754_acos+0x4a0>)
 8012a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a96:	f7ed fbff 	bl	8000298 <__aeabi_dsub>
 8012a9a:	4622      	mov	r2, r4
 8012a9c:	462b      	mov	r3, r5
 8012a9e:	f7ed fdb3 	bl	8000608 <__aeabi_dmul>
 8012aa2:	4b39      	ldr	r3, [pc, #228]	; (8012b88 <__ieee754_acos+0x4b8>)
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	f7ed fbf9 	bl	800029c <__adddf3>
 8012aaa:	4602      	mov	r2, r0
 8012aac:	460b      	mov	r3, r1
 8012aae:	4650      	mov	r0, sl
 8012ab0:	4659      	mov	r1, fp
 8012ab2:	f7ed fed3 	bl	800085c <__aeabi_ddiv>
 8012ab6:	4642      	mov	r2, r8
 8012ab8:	464b      	mov	r3, r9
 8012aba:	f7ed fda5 	bl	8000608 <__aeabi_dmul>
 8012abe:	2600      	movs	r6, #0
 8012ac0:	4682      	mov	sl, r0
 8012ac2:	468b      	mov	fp, r1
 8012ac4:	4632      	mov	r2, r6
 8012ac6:	464b      	mov	r3, r9
 8012ac8:	4630      	mov	r0, r6
 8012aca:	4649      	mov	r1, r9
 8012acc:	f7ed fd9c 	bl	8000608 <__aeabi_dmul>
 8012ad0:	4602      	mov	r2, r0
 8012ad2:	460b      	mov	r3, r1
 8012ad4:	4620      	mov	r0, r4
 8012ad6:	4629      	mov	r1, r5
 8012ad8:	f7ed fbde 	bl	8000298 <__aeabi_dsub>
 8012adc:	4632      	mov	r2, r6
 8012ade:	4604      	mov	r4, r0
 8012ae0:	460d      	mov	r5, r1
 8012ae2:	464b      	mov	r3, r9
 8012ae4:	4640      	mov	r0, r8
 8012ae6:	4649      	mov	r1, r9
 8012ae8:	f7ed fbd8 	bl	800029c <__adddf3>
 8012aec:	4602      	mov	r2, r0
 8012aee:	460b      	mov	r3, r1
 8012af0:	4620      	mov	r0, r4
 8012af2:	4629      	mov	r1, r5
 8012af4:	f7ed feb2 	bl	800085c <__aeabi_ddiv>
 8012af8:	4602      	mov	r2, r0
 8012afa:	460b      	mov	r3, r1
 8012afc:	4650      	mov	r0, sl
 8012afe:	4659      	mov	r1, fp
 8012b00:	f7ed fbcc 	bl	800029c <__adddf3>
 8012b04:	4632      	mov	r2, r6
 8012b06:	464b      	mov	r3, r9
 8012b08:	f7ed fbc8 	bl	800029c <__adddf3>
 8012b0c:	4602      	mov	r2, r0
 8012b0e:	460b      	mov	r3, r1
 8012b10:	f7ed fbc4 	bl	800029c <__adddf3>
 8012b14:	e5fe      	b.n	8012714 <__ieee754_acos+0x44>
 8012b16:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8012b78 <__ieee754_acos+0x4a8>
 8012b1a:	e5ed      	b.n	80126f8 <__ieee754_acos+0x28>
 8012b1c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8012b80 <__ieee754_acos+0x4b0>
 8012b20:	e5ea      	b.n	80126f8 <__ieee754_acos+0x28>
 8012b22:	bf00      	nop
 8012b24:	f3af 8000 	nop.w
 8012b28:	0dfdf709 	.word	0x0dfdf709
 8012b2c:	3f023de1 	.word	0x3f023de1
 8012b30:	7501b288 	.word	0x7501b288
 8012b34:	3f49efe0 	.word	0x3f49efe0
 8012b38:	b5688f3b 	.word	0xb5688f3b
 8012b3c:	3fa48228 	.word	0x3fa48228
 8012b40:	0e884455 	.word	0x0e884455
 8012b44:	3fc9c155 	.word	0x3fc9c155
 8012b48:	03eb6f7d 	.word	0x03eb6f7d
 8012b4c:	3fd4d612 	.word	0x3fd4d612
 8012b50:	55555555 	.word	0x55555555
 8012b54:	3fc55555 	.word	0x3fc55555
 8012b58:	b12e9282 	.word	0xb12e9282
 8012b5c:	3fb3b8c5 	.word	0x3fb3b8c5
 8012b60:	1b8d0159 	.word	0x1b8d0159
 8012b64:	3fe6066c 	.word	0x3fe6066c
 8012b68:	9c598ac8 	.word	0x9c598ac8
 8012b6c:	40002ae5 	.word	0x40002ae5
 8012b70:	1c8a2d4b 	.word	0x1c8a2d4b
 8012b74:	40033a27 	.word	0x40033a27
	...
 8012b80:	54442d18 	.word	0x54442d18
 8012b84:	3ff921fb 	.word	0x3ff921fb
 8012b88:	3ff00000 	.word	0x3ff00000
 8012b8c:	3fe00000 	.word	0x3fe00000

08012b90 <__ieee754_rem_pio2>:
 8012b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b94:	ed2d 8b02 	vpush	{d8}
 8012b98:	ec55 4b10 	vmov	r4, r5, d0
 8012b9c:	4bca      	ldr	r3, [pc, #808]	; (8012ec8 <__ieee754_rem_pio2+0x338>)
 8012b9e:	b08b      	sub	sp, #44	; 0x2c
 8012ba0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012ba4:	4598      	cmp	r8, r3
 8012ba6:	4682      	mov	sl, r0
 8012ba8:	9502      	str	r5, [sp, #8]
 8012baa:	dc08      	bgt.n	8012bbe <__ieee754_rem_pio2+0x2e>
 8012bac:	2200      	movs	r2, #0
 8012bae:	2300      	movs	r3, #0
 8012bb0:	ed80 0b00 	vstr	d0, [r0]
 8012bb4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012bb8:	f04f 0b00 	mov.w	fp, #0
 8012bbc:	e028      	b.n	8012c10 <__ieee754_rem_pio2+0x80>
 8012bbe:	4bc3      	ldr	r3, [pc, #780]	; (8012ecc <__ieee754_rem_pio2+0x33c>)
 8012bc0:	4598      	cmp	r8, r3
 8012bc2:	dc78      	bgt.n	8012cb6 <__ieee754_rem_pio2+0x126>
 8012bc4:	9b02      	ldr	r3, [sp, #8]
 8012bc6:	4ec2      	ldr	r6, [pc, #776]	; (8012ed0 <__ieee754_rem_pio2+0x340>)
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	ee10 0a10 	vmov	r0, s0
 8012bce:	a3b0      	add	r3, pc, #704	; (adr r3, 8012e90 <__ieee754_rem_pio2+0x300>)
 8012bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bd4:	4629      	mov	r1, r5
 8012bd6:	dd39      	ble.n	8012c4c <__ieee754_rem_pio2+0xbc>
 8012bd8:	f7ed fb5e 	bl	8000298 <__aeabi_dsub>
 8012bdc:	45b0      	cmp	r8, r6
 8012bde:	4604      	mov	r4, r0
 8012be0:	460d      	mov	r5, r1
 8012be2:	d01b      	beq.n	8012c1c <__ieee754_rem_pio2+0x8c>
 8012be4:	a3ac      	add	r3, pc, #688	; (adr r3, 8012e98 <__ieee754_rem_pio2+0x308>)
 8012be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bea:	f7ed fb55 	bl	8000298 <__aeabi_dsub>
 8012bee:	4602      	mov	r2, r0
 8012bf0:	460b      	mov	r3, r1
 8012bf2:	e9ca 2300 	strd	r2, r3, [sl]
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	4629      	mov	r1, r5
 8012bfa:	f7ed fb4d 	bl	8000298 <__aeabi_dsub>
 8012bfe:	a3a6      	add	r3, pc, #664	; (adr r3, 8012e98 <__ieee754_rem_pio2+0x308>)
 8012c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c04:	f7ed fb48 	bl	8000298 <__aeabi_dsub>
 8012c08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012c0c:	f04f 0b01 	mov.w	fp, #1
 8012c10:	4658      	mov	r0, fp
 8012c12:	b00b      	add	sp, #44	; 0x2c
 8012c14:	ecbd 8b02 	vpop	{d8}
 8012c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c1c:	a3a0      	add	r3, pc, #640	; (adr r3, 8012ea0 <__ieee754_rem_pio2+0x310>)
 8012c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c22:	f7ed fb39 	bl	8000298 <__aeabi_dsub>
 8012c26:	a3a0      	add	r3, pc, #640	; (adr r3, 8012ea8 <__ieee754_rem_pio2+0x318>)
 8012c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c2c:	4604      	mov	r4, r0
 8012c2e:	460d      	mov	r5, r1
 8012c30:	f7ed fb32 	bl	8000298 <__aeabi_dsub>
 8012c34:	4602      	mov	r2, r0
 8012c36:	460b      	mov	r3, r1
 8012c38:	e9ca 2300 	strd	r2, r3, [sl]
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	4629      	mov	r1, r5
 8012c40:	f7ed fb2a 	bl	8000298 <__aeabi_dsub>
 8012c44:	a398      	add	r3, pc, #608	; (adr r3, 8012ea8 <__ieee754_rem_pio2+0x318>)
 8012c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c4a:	e7db      	b.n	8012c04 <__ieee754_rem_pio2+0x74>
 8012c4c:	f7ed fb26 	bl	800029c <__adddf3>
 8012c50:	45b0      	cmp	r8, r6
 8012c52:	4604      	mov	r4, r0
 8012c54:	460d      	mov	r5, r1
 8012c56:	d016      	beq.n	8012c86 <__ieee754_rem_pio2+0xf6>
 8012c58:	a38f      	add	r3, pc, #572	; (adr r3, 8012e98 <__ieee754_rem_pio2+0x308>)
 8012c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c5e:	f7ed fb1d 	bl	800029c <__adddf3>
 8012c62:	4602      	mov	r2, r0
 8012c64:	460b      	mov	r3, r1
 8012c66:	e9ca 2300 	strd	r2, r3, [sl]
 8012c6a:	4620      	mov	r0, r4
 8012c6c:	4629      	mov	r1, r5
 8012c6e:	f7ed fb13 	bl	8000298 <__aeabi_dsub>
 8012c72:	a389      	add	r3, pc, #548	; (adr r3, 8012e98 <__ieee754_rem_pio2+0x308>)
 8012c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c78:	f7ed fb10 	bl	800029c <__adddf3>
 8012c7c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8012c80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012c84:	e7c4      	b.n	8012c10 <__ieee754_rem_pio2+0x80>
 8012c86:	a386      	add	r3, pc, #536	; (adr r3, 8012ea0 <__ieee754_rem_pio2+0x310>)
 8012c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8c:	f7ed fb06 	bl	800029c <__adddf3>
 8012c90:	a385      	add	r3, pc, #532	; (adr r3, 8012ea8 <__ieee754_rem_pio2+0x318>)
 8012c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c96:	4604      	mov	r4, r0
 8012c98:	460d      	mov	r5, r1
 8012c9a:	f7ed faff 	bl	800029c <__adddf3>
 8012c9e:	4602      	mov	r2, r0
 8012ca0:	460b      	mov	r3, r1
 8012ca2:	e9ca 2300 	strd	r2, r3, [sl]
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	4629      	mov	r1, r5
 8012caa:	f7ed faf5 	bl	8000298 <__aeabi_dsub>
 8012cae:	a37e      	add	r3, pc, #504	; (adr r3, 8012ea8 <__ieee754_rem_pio2+0x318>)
 8012cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb4:	e7e0      	b.n	8012c78 <__ieee754_rem_pio2+0xe8>
 8012cb6:	4b87      	ldr	r3, [pc, #540]	; (8012ed4 <__ieee754_rem_pio2+0x344>)
 8012cb8:	4598      	cmp	r8, r3
 8012cba:	f300 80d9 	bgt.w	8012e70 <__ieee754_rem_pio2+0x2e0>
 8012cbe:	f7ff fc37 	bl	8012530 <fabs>
 8012cc2:	ec55 4b10 	vmov	r4, r5, d0
 8012cc6:	ee10 0a10 	vmov	r0, s0
 8012cca:	a379      	add	r3, pc, #484	; (adr r3, 8012eb0 <__ieee754_rem_pio2+0x320>)
 8012ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd0:	4629      	mov	r1, r5
 8012cd2:	f7ed fc99 	bl	8000608 <__aeabi_dmul>
 8012cd6:	4b80      	ldr	r3, [pc, #512]	; (8012ed8 <__ieee754_rem_pio2+0x348>)
 8012cd8:	2200      	movs	r2, #0
 8012cda:	f7ed fadf 	bl	800029c <__adddf3>
 8012cde:	f7ed ff43 	bl	8000b68 <__aeabi_d2iz>
 8012ce2:	4683      	mov	fp, r0
 8012ce4:	f7ed fc26 	bl	8000534 <__aeabi_i2d>
 8012ce8:	4602      	mov	r2, r0
 8012cea:	460b      	mov	r3, r1
 8012cec:	ec43 2b18 	vmov	d8, r2, r3
 8012cf0:	a367      	add	r3, pc, #412	; (adr r3, 8012e90 <__ieee754_rem_pio2+0x300>)
 8012cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cf6:	f7ed fc87 	bl	8000608 <__aeabi_dmul>
 8012cfa:	4602      	mov	r2, r0
 8012cfc:	460b      	mov	r3, r1
 8012cfe:	4620      	mov	r0, r4
 8012d00:	4629      	mov	r1, r5
 8012d02:	f7ed fac9 	bl	8000298 <__aeabi_dsub>
 8012d06:	a364      	add	r3, pc, #400	; (adr r3, 8012e98 <__ieee754_rem_pio2+0x308>)
 8012d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d0c:	4606      	mov	r6, r0
 8012d0e:	460f      	mov	r7, r1
 8012d10:	ec51 0b18 	vmov	r0, r1, d8
 8012d14:	f7ed fc78 	bl	8000608 <__aeabi_dmul>
 8012d18:	f1bb 0f1f 	cmp.w	fp, #31
 8012d1c:	4604      	mov	r4, r0
 8012d1e:	460d      	mov	r5, r1
 8012d20:	dc0d      	bgt.n	8012d3e <__ieee754_rem_pio2+0x1ae>
 8012d22:	4b6e      	ldr	r3, [pc, #440]	; (8012edc <__ieee754_rem_pio2+0x34c>)
 8012d24:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8012d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d2c:	4543      	cmp	r3, r8
 8012d2e:	d006      	beq.n	8012d3e <__ieee754_rem_pio2+0x1ae>
 8012d30:	4622      	mov	r2, r4
 8012d32:	462b      	mov	r3, r5
 8012d34:	4630      	mov	r0, r6
 8012d36:	4639      	mov	r1, r7
 8012d38:	f7ed faae 	bl	8000298 <__aeabi_dsub>
 8012d3c:	e00f      	b.n	8012d5e <__ieee754_rem_pio2+0x1ce>
 8012d3e:	462b      	mov	r3, r5
 8012d40:	4622      	mov	r2, r4
 8012d42:	4630      	mov	r0, r6
 8012d44:	4639      	mov	r1, r7
 8012d46:	f7ed faa7 	bl	8000298 <__aeabi_dsub>
 8012d4a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012d4e:	9303      	str	r3, [sp, #12]
 8012d50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012d54:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012d58:	f1b8 0f10 	cmp.w	r8, #16
 8012d5c:	dc02      	bgt.n	8012d64 <__ieee754_rem_pio2+0x1d4>
 8012d5e:	e9ca 0100 	strd	r0, r1, [sl]
 8012d62:	e039      	b.n	8012dd8 <__ieee754_rem_pio2+0x248>
 8012d64:	a34e      	add	r3, pc, #312	; (adr r3, 8012ea0 <__ieee754_rem_pio2+0x310>)
 8012d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d6a:	ec51 0b18 	vmov	r0, r1, d8
 8012d6e:	f7ed fc4b 	bl	8000608 <__aeabi_dmul>
 8012d72:	4604      	mov	r4, r0
 8012d74:	460d      	mov	r5, r1
 8012d76:	4602      	mov	r2, r0
 8012d78:	460b      	mov	r3, r1
 8012d7a:	4630      	mov	r0, r6
 8012d7c:	4639      	mov	r1, r7
 8012d7e:	f7ed fa8b 	bl	8000298 <__aeabi_dsub>
 8012d82:	4602      	mov	r2, r0
 8012d84:	460b      	mov	r3, r1
 8012d86:	4680      	mov	r8, r0
 8012d88:	4689      	mov	r9, r1
 8012d8a:	4630      	mov	r0, r6
 8012d8c:	4639      	mov	r1, r7
 8012d8e:	f7ed fa83 	bl	8000298 <__aeabi_dsub>
 8012d92:	4622      	mov	r2, r4
 8012d94:	462b      	mov	r3, r5
 8012d96:	f7ed fa7f 	bl	8000298 <__aeabi_dsub>
 8012d9a:	a343      	add	r3, pc, #268	; (adr r3, 8012ea8 <__ieee754_rem_pio2+0x318>)
 8012d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da0:	4604      	mov	r4, r0
 8012da2:	460d      	mov	r5, r1
 8012da4:	ec51 0b18 	vmov	r0, r1, d8
 8012da8:	f7ed fc2e 	bl	8000608 <__aeabi_dmul>
 8012dac:	4622      	mov	r2, r4
 8012dae:	462b      	mov	r3, r5
 8012db0:	f7ed fa72 	bl	8000298 <__aeabi_dsub>
 8012db4:	4602      	mov	r2, r0
 8012db6:	460b      	mov	r3, r1
 8012db8:	4604      	mov	r4, r0
 8012dba:	460d      	mov	r5, r1
 8012dbc:	4640      	mov	r0, r8
 8012dbe:	4649      	mov	r1, r9
 8012dc0:	f7ed fa6a 	bl	8000298 <__aeabi_dsub>
 8012dc4:	9a03      	ldr	r2, [sp, #12]
 8012dc6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012dca:	1ad3      	subs	r3, r2, r3
 8012dcc:	2b31      	cmp	r3, #49	; 0x31
 8012dce:	dc24      	bgt.n	8012e1a <__ieee754_rem_pio2+0x28a>
 8012dd0:	e9ca 0100 	strd	r0, r1, [sl]
 8012dd4:	4646      	mov	r6, r8
 8012dd6:	464f      	mov	r7, r9
 8012dd8:	e9da 8900 	ldrd	r8, r9, [sl]
 8012ddc:	4630      	mov	r0, r6
 8012dde:	4642      	mov	r2, r8
 8012de0:	464b      	mov	r3, r9
 8012de2:	4639      	mov	r1, r7
 8012de4:	f7ed fa58 	bl	8000298 <__aeabi_dsub>
 8012de8:	462b      	mov	r3, r5
 8012dea:	4622      	mov	r2, r4
 8012dec:	f7ed fa54 	bl	8000298 <__aeabi_dsub>
 8012df0:	9b02      	ldr	r3, [sp, #8]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012df8:	f6bf af0a 	bge.w	8012c10 <__ieee754_rem_pio2+0x80>
 8012dfc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012e00:	f8ca 3004 	str.w	r3, [sl, #4]
 8012e04:	f8ca 8000 	str.w	r8, [sl]
 8012e08:	f8ca 0008 	str.w	r0, [sl, #8]
 8012e0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e10:	f8ca 300c 	str.w	r3, [sl, #12]
 8012e14:	f1cb 0b00 	rsb	fp, fp, #0
 8012e18:	e6fa      	b.n	8012c10 <__ieee754_rem_pio2+0x80>
 8012e1a:	a327      	add	r3, pc, #156	; (adr r3, 8012eb8 <__ieee754_rem_pio2+0x328>)
 8012e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e20:	ec51 0b18 	vmov	r0, r1, d8
 8012e24:	f7ed fbf0 	bl	8000608 <__aeabi_dmul>
 8012e28:	4604      	mov	r4, r0
 8012e2a:	460d      	mov	r5, r1
 8012e2c:	4602      	mov	r2, r0
 8012e2e:	460b      	mov	r3, r1
 8012e30:	4640      	mov	r0, r8
 8012e32:	4649      	mov	r1, r9
 8012e34:	f7ed fa30 	bl	8000298 <__aeabi_dsub>
 8012e38:	4602      	mov	r2, r0
 8012e3a:	460b      	mov	r3, r1
 8012e3c:	4606      	mov	r6, r0
 8012e3e:	460f      	mov	r7, r1
 8012e40:	4640      	mov	r0, r8
 8012e42:	4649      	mov	r1, r9
 8012e44:	f7ed fa28 	bl	8000298 <__aeabi_dsub>
 8012e48:	4622      	mov	r2, r4
 8012e4a:	462b      	mov	r3, r5
 8012e4c:	f7ed fa24 	bl	8000298 <__aeabi_dsub>
 8012e50:	a31b      	add	r3, pc, #108	; (adr r3, 8012ec0 <__ieee754_rem_pio2+0x330>)
 8012e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e56:	4604      	mov	r4, r0
 8012e58:	460d      	mov	r5, r1
 8012e5a:	ec51 0b18 	vmov	r0, r1, d8
 8012e5e:	f7ed fbd3 	bl	8000608 <__aeabi_dmul>
 8012e62:	4622      	mov	r2, r4
 8012e64:	462b      	mov	r3, r5
 8012e66:	f7ed fa17 	bl	8000298 <__aeabi_dsub>
 8012e6a:	4604      	mov	r4, r0
 8012e6c:	460d      	mov	r5, r1
 8012e6e:	e75f      	b.n	8012d30 <__ieee754_rem_pio2+0x1a0>
 8012e70:	4b1b      	ldr	r3, [pc, #108]	; (8012ee0 <__ieee754_rem_pio2+0x350>)
 8012e72:	4598      	cmp	r8, r3
 8012e74:	dd36      	ble.n	8012ee4 <__ieee754_rem_pio2+0x354>
 8012e76:	ee10 2a10 	vmov	r2, s0
 8012e7a:	462b      	mov	r3, r5
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	4629      	mov	r1, r5
 8012e80:	f7ed fa0a 	bl	8000298 <__aeabi_dsub>
 8012e84:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012e88:	e9ca 0100 	strd	r0, r1, [sl]
 8012e8c:	e694      	b.n	8012bb8 <__ieee754_rem_pio2+0x28>
 8012e8e:	bf00      	nop
 8012e90:	54400000 	.word	0x54400000
 8012e94:	3ff921fb 	.word	0x3ff921fb
 8012e98:	1a626331 	.word	0x1a626331
 8012e9c:	3dd0b461 	.word	0x3dd0b461
 8012ea0:	1a600000 	.word	0x1a600000
 8012ea4:	3dd0b461 	.word	0x3dd0b461
 8012ea8:	2e037073 	.word	0x2e037073
 8012eac:	3ba3198a 	.word	0x3ba3198a
 8012eb0:	6dc9c883 	.word	0x6dc9c883
 8012eb4:	3fe45f30 	.word	0x3fe45f30
 8012eb8:	2e000000 	.word	0x2e000000
 8012ebc:	3ba3198a 	.word	0x3ba3198a
 8012ec0:	252049c1 	.word	0x252049c1
 8012ec4:	397b839a 	.word	0x397b839a
 8012ec8:	3fe921fb 	.word	0x3fe921fb
 8012ecc:	4002d97b 	.word	0x4002d97b
 8012ed0:	3ff921fb 	.word	0x3ff921fb
 8012ed4:	413921fb 	.word	0x413921fb
 8012ed8:	3fe00000 	.word	0x3fe00000
 8012edc:	08014540 	.word	0x08014540
 8012ee0:	7fefffff 	.word	0x7fefffff
 8012ee4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012ee8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8012eec:	ee10 0a10 	vmov	r0, s0
 8012ef0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8012ef4:	ee10 6a10 	vmov	r6, s0
 8012ef8:	460f      	mov	r7, r1
 8012efa:	f7ed fe35 	bl	8000b68 <__aeabi_d2iz>
 8012efe:	f7ed fb19 	bl	8000534 <__aeabi_i2d>
 8012f02:	4602      	mov	r2, r0
 8012f04:	460b      	mov	r3, r1
 8012f06:	4630      	mov	r0, r6
 8012f08:	4639      	mov	r1, r7
 8012f0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012f0e:	f7ed f9c3 	bl	8000298 <__aeabi_dsub>
 8012f12:	4b22      	ldr	r3, [pc, #136]	; (8012f9c <__ieee754_rem_pio2+0x40c>)
 8012f14:	2200      	movs	r2, #0
 8012f16:	f7ed fb77 	bl	8000608 <__aeabi_dmul>
 8012f1a:	460f      	mov	r7, r1
 8012f1c:	4606      	mov	r6, r0
 8012f1e:	f7ed fe23 	bl	8000b68 <__aeabi_d2iz>
 8012f22:	f7ed fb07 	bl	8000534 <__aeabi_i2d>
 8012f26:	4602      	mov	r2, r0
 8012f28:	460b      	mov	r3, r1
 8012f2a:	4630      	mov	r0, r6
 8012f2c:	4639      	mov	r1, r7
 8012f2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012f32:	f7ed f9b1 	bl	8000298 <__aeabi_dsub>
 8012f36:	4b19      	ldr	r3, [pc, #100]	; (8012f9c <__ieee754_rem_pio2+0x40c>)
 8012f38:	2200      	movs	r2, #0
 8012f3a:	f7ed fb65 	bl	8000608 <__aeabi_dmul>
 8012f3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012f42:	ad04      	add	r5, sp, #16
 8012f44:	f04f 0803 	mov.w	r8, #3
 8012f48:	46a9      	mov	r9, r5
 8012f4a:	2600      	movs	r6, #0
 8012f4c:	2700      	movs	r7, #0
 8012f4e:	4632      	mov	r2, r6
 8012f50:	463b      	mov	r3, r7
 8012f52:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8012f56:	46c3      	mov	fp, r8
 8012f58:	3d08      	subs	r5, #8
 8012f5a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8012f5e:	f7ed fdbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8012f62:	2800      	cmp	r0, #0
 8012f64:	d1f3      	bne.n	8012f4e <__ieee754_rem_pio2+0x3be>
 8012f66:	4b0e      	ldr	r3, [pc, #56]	; (8012fa0 <__ieee754_rem_pio2+0x410>)
 8012f68:	9301      	str	r3, [sp, #4]
 8012f6a:	2302      	movs	r3, #2
 8012f6c:	9300      	str	r3, [sp, #0]
 8012f6e:	4622      	mov	r2, r4
 8012f70:	465b      	mov	r3, fp
 8012f72:	4651      	mov	r1, sl
 8012f74:	4648      	mov	r0, r9
 8012f76:	f000 f993 	bl	80132a0 <__kernel_rem_pio2>
 8012f7a:	9b02      	ldr	r3, [sp, #8]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	4683      	mov	fp, r0
 8012f80:	f6bf ae46 	bge.w	8012c10 <__ieee754_rem_pio2+0x80>
 8012f84:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012f88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012f8c:	f8ca 3004 	str.w	r3, [sl, #4]
 8012f90:	f8da 300c 	ldr.w	r3, [sl, #12]
 8012f94:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012f98:	e73a      	b.n	8012e10 <__ieee754_rem_pio2+0x280>
 8012f9a:	bf00      	nop
 8012f9c:	41700000 	.word	0x41700000
 8012fa0:	080145c0 	.word	0x080145c0

08012fa4 <__ieee754_sqrt>:
 8012fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fa8:	ec55 4b10 	vmov	r4, r5, d0
 8012fac:	4e56      	ldr	r6, [pc, #344]	; (8013108 <__ieee754_sqrt+0x164>)
 8012fae:	43ae      	bics	r6, r5
 8012fb0:	ee10 0a10 	vmov	r0, s0
 8012fb4:	ee10 3a10 	vmov	r3, s0
 8012fb8:	4629      	mov	r1, r5
 8012fba:	462a      	mov	r2, r5
 8012fbc:	d110      	bne.n	8012fe0 <__ieee754_sqrt+0x3c>
 8012fbe:	ee10 2a10 	vmov	r2, s0
 8012fc2:	462b      	mov	r3, r5
 8012fc4:	f7ed fb20 	bl	8000608 <__aeabi_dmul>
 8012fc8:	4602      	mov	r2, r0
 8012fca:	460b      	mov	r3, r1
 8012fcc:	4620      	mov	r0, r4
 8012fce:	4629      	mov	r1, r5
 8012fd0:	f7ed f964 	bl	800029c <__adddf3>
 8012fd4:	4604      	mov	r4, r0
 8012fd6:	460d      	mov	r5, r1
 8012fd8:	ec45 4b10 	vmov	d0, r4, r5
 8012fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fe0:	2d00      	cmp	r5, #0
 8012fe2:	dc10      	bgt.n	8013006 <__ieee754_sqrt+0x62>
 8012fe4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012fe8:	4330      	orrs	r0, r6
 8012fea:	d0f5      	beq.n	8012fd8 <__ieee754_sqrt+0x34>
 8012fec:	b15d      	cbz	r5, 8013006 <__ieee754_sqrt+0x62>
 8012fee:	ee10 2a10 	vmov	r2, s0
 8012ff2:	462b      	mov	r3, r5
 8012ff4:	ee10 0a10 	vmov	r0, s0
 8012ff8:	f7ed f94e 	bl	8000298 <__aeabi_dsub>
 8012ffc:	4602      	mov	r2, r0
 8012ffe:	460b      	mov	r3, r1
 8013000:	f7ed fc2c 	bl	800085c <__aeabi_ddiv>
 8013004:	e7e6      	b.n	8012fd4 <__ieee754_sqrt+0x30>
 8013006:	1509      	asrs	r1, r1, #20
 8013008:	d076      	beq.n	80130f8 <__ieee754_sqrt+0x154>
 801300a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801300e:	07ce      	lsls	r6, r1, #31
 8013010:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8013014:	bf5e      	ittt	pl
 8013016:	0fda      	lsrpl	r2, r3, #31
 8013018:	005b      	lslpl	r3, r3, #1
 801301a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801301e:	0fda      	lsrs	r2, r3, #31
 8013020:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8013024:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8013028:	2000      	movs	r0, #0
 801302a:	106d      	asrs	r5, r5, #1
 801302c:	005b      	lsls	r3, r3, #1
 801302e:	f04f 0e16 	mov.w	lr, #22
 8013032:	4684      	mov	ip, r0
 8013034:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013038:	eb0c 0401 	add.w	r4, ip, r1
 801303c:	4294      	cmp	r4, r2
 801303e:	bfde      	ittt	le
 8013040:	1b12      	suble	r2, r2, r4
 8013042:	eb04 0c01 	addle.w	ip, r4, r1
 8013046:	1840      	addle	r0, r0, r1
 8013048:	0052      	lsls	r2, r2, #1
 801304a:	f1be 0e01 	subs.w	lr, lr, #1
 801304e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8013052:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013056:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801305a:	d1ed      	bne.n	8013038 <__ieee754_sqrt+0x94>
 801305c:	4671      	mov	r1, lr
 801305e:	2720      	movs	r7, #32
 8013060:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8013064:	4562      	cmp	r2, ip
 8013066:	eb04 060e 	add.w	r6, r4, lr
 801306a:	dc02      	bgt.n	8013072 <__ieee754_sqrt+0xce>
 801306c:	d113      	bne.n	8013096 <__ieee754_sqrt+0xf2>
 801306e:	429e      	cmp	r6, r3
 8013070:	d811      	bhi.n	8013096 <__ieee754_sqrt+0xf2>
 8013072:	2e00      	cmp	r6, #0
 8013074:	eb06 0e04 	add.w	lr, r6, r4
 8013078:	da43      	bge.n	8013102 <__ieee754_sqrt+0x15e>
 801307a:	f1be 0f00 	cmp.w	lr, #0
 801307e:	db40      	blt.n	8013102 <__ieee754_sqrt+0x15e>
 8013080:	f10c 0801 	add.w	r8, ip, #1
 8013084:	eba2 020c 	sub.w	r2, r2, ip
 8013088:	429e      	cmp	r6, r3
 801308a:	bf88      	it	hi
 801308c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8013090:	1b9b      	subs	r3, r3, r6
 8013092:	4421      	add	r1, r4
 8013094:	46c4      	mov	ip, r8
 8013096:	0052      	lsls	r2, r2, #1
 8013098:	3f01      	subs	r7, #1
 801309a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801309e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80130a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80130a6:	d1dd      	bne.n	8013064 <__ieee754_sqrt+0xc0>
 80130a8:	4313      	orrs	r3, r2
 80130aa:	d006      	beq.n	80130ba <__ieee754_sqrt+0x116>
 80130ac:	1c4c      	adds	r4, r1, #1
 80130ae:	bf13      	iteet	ne
 80130b0:	3101      	addne	r1, #1
 80130b2:	3001      	addeq	r0, #1
 80130b4:	4639      	moveq	r1, r7
 80130b6:	f021 0101 	bicne.w	r1, r1, #1
 80130ba:	1043      	asrs	r3, r0, #1
 80130bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80130c0:	0849      	lsrs	r1, r1, #1
 80130c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80130c6:	07c2      	lsls	r2, r0, #31
 80130c8:	bf48      	it	mi
 80130ca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80130ce:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80130d2:	460c      	mov	r4, r1
 80130d4:	463d      	mov	r5, r7
 80130d6:	e77f      	b.n	8012fd8 <__ieee754_sqrt+0x34>
 80130d8:	0ada      	lsrs	r2, r3, #11
 80130da:	3815      	subs	r0, #21
 80130dc:	055b      	lsls	r3, r3, #21
 80130de:	2a00      	cmp	r2, #0
 80130e0:	d0fa      	beq.n	80130d8 <__ieee754_sqrt+0x134>
 80130e2:	02d7      	lsls	r7, r2, #11
 80130e4:	d50a      	bpl.n	80130fc <__ieee754_sqrt+0x158>
 80130e6:	f1c1 0420 	rsb	r4, r1, #32
 80130ea:	fa23 f404 	lsr.w	r4, r3, r4
 80130ee:	1e4d      	subs	r5, r1, #1
 80130f0:	408b      	lsls	r3, r1
 80130f2:	4322      	orrs	r2, r4
 80130f4:	1b41      	subs	r1, r0, r5
 80130f6:	e788      	b.n	801300a <__ieee754_sqrt+0x66>
 80130f8:	4608      	mov	r0, r1
 80130fa:	e7f0      	b.n	80130de <__ieee754_sqrt+0x13a>
 80130fc:	0052      	lsls	r2, r2, #1
 80130fe:	3101      	adds	r1, #1
 8013100:	e7ef      	b.n	80130e2 <__ieee754_sqrt+0x13e>
 8013102:	46e0      	mov	r8, ip
 8013104:	e7be      	b.n	8013084 <__ieee754_sqrt+0xe0>
 8013106:	bf00      	nop
 8013108:	7ff00000 	.word	0x7ff00000
 801310c:	00000000 	.word	0x00000000

08013110 <__kernel_cos>:
 8013110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013114:	ec57 6b10 	vmov	r6, r7, d0
 8013118:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801311c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8013120:	ed8d 1b00 	vstr	d1, [sp]
 8013124:	da07      	bge.n	8013136 <__kernel_cos+0x26>
 8013126:	ee10 0a10 	vmov	r0, s0
 801312a:	4639      	mov	r1, r7
 801312c:	f7ed fd1c 	bl	8000b68 <__aeabi_d2iz>
 8013130:	2800      	cmp	r0, #0
 8013132:	f000 8088 	beq.w	8013246 <__kernel_cos+0x136>
 8013136:	4632      	mov	r2, r6
 8013138:	463b      	mov	r3, r7
 801313a:	4630      	mov	r0, r6
 801313c:	4639      	mov	r1, r7
 801313e:	f7ed fa63 	bl	8000608 <__aeabi_dmul>
 8013142:	4b51      	ldr	r3, [pc, #324]	; (8013288 <__kernel_cos+0x178>)
 8013144:	2200      	movs	r2, #0
 8013146:	4604      	mov	r4, r0
 8013148:	460d      	mov	r5, r1
 801314a:	f7ed fa5d 	bl	8000608 <__aeabi_dmul>
 801314e:	a340      	add	r3, pc, #256	; (adr r3, 8013250 <__kernel_cos+0x140>)
 8013150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013154:	4682      	mov	sl, r0
 8013156:	468b      	mov	fp, r1
 8013158:	4620      	mov	r0, r4
 801315a:	4629      	mov	r1, r5
 801315c:	f7ed fa54 	bl	8000608 <__aeabi_dmul>
 8013160:	a33d      	add	r3, pc, #244	; (adr r3, 8013258 <__kernel_cos+0x148>)
 8013162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013166:	f7ed f899 	bl	800029c <__adddf3>
 801316a:	4622      	mov	r2, r4
 801316c:	462b      	mov	r3, r5
 801316e:	f7ed fa4b 	bl	8000608 <__aeabi_dmul>
 8013172:	a33b      	add	r3, pc, #236	; (adr r3, 8013260 <__kernel_cos+0x150>)
 8013174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013178:	f7ed f88e 	bl	8000298 <__aeabi_dsub>
 801317c:	4622      	mov	r2, r4
 801317e:	462b      	mov	r3, r5
 8013180:	f7ed fa42 	bl	8000608 <__aeabi_dmul>
 8013184:	a338      	add	r3, pc, #224	; (adr r3, 8013268 <__kernel_cos+0x158>)
 8013186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801318a:	f7ed f887 	bl	800029c <__adddf3>
 801318e:	4622      	mov	r2, r4
 8013190:	462b      	mov	r3, r5
 8013192:	f7ed fa39 	bl	8000608 <__aeabi_dmul>
 8013196:	a336      	add	r3, pc, #216	; (adr r3, 8013270 <__kernel_cos+0x160>)
 8013198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801319c:	f7ed f87c 	bl	8000298 <__aeabi_dsub>
 80131a0:	4622      	mov	r2, r4
 80131a2:	462b      	mov	r3, r5
 80131a4:	f7ed fa30 	bl	8000608 <__aeabi_dmul>
 80131a8:	a333      	add	r3, pc, #204	; (adr r3, 8013278 <__kernel_cos+0x168>)
 80131aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ae:	f7ed f875 	bl	800029c <__adddf3>
 80131b2:	4622      	mov	r2, r4
 80131b4:	462b      	mov	r3, r5
 80131b6:	f7ed fa27 	bl	8000608 <__aeabi_dmul>
 80131ba:	4622      	mov	r2, r4
 80131bc:	462b      	mov	r3, r5
 80131be:	f7ed fa23 	bl	8000608 <__aeabi_dmul>
 80131c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131c6:	4604      	mov	r4, r0
 80131c8:	460d      	mov	r5, r1
 80131ca:	4630      	mov	r0, r6
 80131cc:	4639      	mov	r1, r7
 80131ce:	f7ed fa1b 	bl	8000608 <__aeabi_dmul>
 80131d2:	460b      	mov	r3, r1
 80131d4:	4602      	mov	r2, r0
 80131d6:	4629      	mov	r1, r5
 80131d8:	4620      	mov	r0, r4
 80131da:	f7ed f85d 	bl	8000298 <__aeabi_dsub>
 80131de:	4b2b      	ldr	r3, [pc, #172]	; (801328c <__kernel_cos+0x17c>)
 80131e0:	4598      	cmp	r8, r3
 80131e2:	4606      	mov	r6, r0
 80131e4:	460f      	mov	r7, r1
 80131e6:	dc10      	bgt.n	801320a <__kernel_cos+0xfa>
 80131e8:	4602      	mov	r2, r0
 80131ea:	460b      	mov	r3, r1
 80131ec:	4650      	mov	r0, sl
 80131ee:	4659      	mov	r1, fp
 80131f0:	f7ed f852 	bl	8000298 <__aeabi_dsub>
 80131f4:	460b      	mov	r3, r1
 80131f6:	4926      	ldr	r1, [pc, #152]	; (8013290 <__kernel_cos+0x180>)
 80131f8:	4602      	mov	r2, r0
 80131fa:	2000      	movs	r0, #0
 80131fc:	f7ed f84c 	bl	8000298 <__aeabi_dsub>
 8013200:	ec41 0b10 	vmov	d0, r0, r1
 8013204:	b003      	add	sp, #12
 8013206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801320a:	4b22      	ldr	r3, [pc, #136]	; (8013294 <__kernel_cos+0x184>)
 801320c:	4920      	ldr	r1, [pc, #128]	; (8013290 <__kernel_cos+0x180>)
 801320e:	4598      	cmp	r8, r3
 8013210:	bfcc      	ite	gt
 8013212:	4d21      	ldrgt	r5, [pc, #132]	; (8013298 <__kernel_cos+0x188>)
 8013214:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8013218:	2400      	movs	r4, #0
 801321a:	4622      	mov	r2, r4
 801321c:	462b      	mov	r3, r5
 801321e:	2000      	movs	r0, #0
 8013220:	f7ed f83a 	bl	8000298 <__aeabi_dsub>
 8013224:	4622      	mov	r2, r4
 8013226:	4680      	mov	r8, r0
 8013228:	4689      	mov	r9, r1
 801322a:	462b      	mov	r3, r5
 801322c:	4650      	mov	r0, sl
 801322e:	4659      	mov	r1, fp
 8013230:	f7ed f832 	bl	8000298 <__aeabi_dsub>
 8013234:	4632      	mov	r2, r6
 8013236:	463b      	mov	r3, r7
 8013238:	f7ed f82e 	bl	8000298 <__aeabi_dsub>
 801323c:	4602      	mov	r2, r0
 801323e:	460b      	mov	r3, r1
 8013240:	4640      	mov	r0, r8
 8013242:	4649      	mov	r1, r9
 8013244:	e7da      	b.n	80131fc <__kernel_cos+0xec>
 8013246:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8013280 <__kernel_cos+0x170>
 801324a:	e7db      	b.n	8013204 <__kernel_cos+0xf4>
 801324c:	f3af 8000 	nop.w
 8013250:	be8838d4 	.word	0xbe8838d4
 8013254:	bda8fae9 	.word	0xbda8fae9
 8013258:	bdb4b1c4 	.word	0xbdb4b1c4
 801325c:	3e21ee9e 	.word	0x3e21ee9e
 8013260:	809c52ad 	.word	0x809c52ad
 8013264:	3e927e4f 	.word	0x3e927e4f
 8013268:	19cb1590 	.word	0x19cb1590
 801326c:	3efa01a0 	.word	0x3efa01a0
 8013270:	16c15177 	.word	0x16c15177
 8013274:	3f56c16c 	.word	0x3f56c16c
 8013278:	5555554c 	.word	0x5555554c
 801327c:	3fa55555 	.word	0x3fa55555
 8013280:	00000000 	.word	0x00000000
 8013284:	3ff00000 	.word	0x3ff00000
 8013288:	3fe00000 	.word	0x3fe00000
 801328c:	3fd33332 	.word	0x3fd33332
 8013290:	3ff00000 	.word	0x3ff00000
 8013294:	3fe90000 	.word	0x3fe90000
 8013298:	3fd20000 	.word	0x3fd20000
 801329c:	00000000 	.word	0x00000000

080132a0 <__kernel_rem_pio2>:
 80132a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132a4:	ed2d 8b02 	vpush	{d8}
 80132a8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80132ac:	f112 0f14 	cmn.w	r2, #20
 80132b0:	9308      	str	r3, [sp, #32]
 80132b2:	9101      	str	r1, [sp, #4]
 80132b4:	4bc6      	ldr	r3, [pc, #792]	; (80135d0 <__kernel_rem_pio2+0x330>)
 80132b6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80132b8:	9009      	str	r0, [sp, #36]	; 0x24
 80132ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80132be:	9304      	str	r3, [sp, #16]
 80132c0:	9b08      	ldr	r3, [sp, #32]
 80132c2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80132c6:	bfa8      	it	ge
 80132c8:	1ed4      	subge	r4, r2, #3
 80132ca:	9306      	str	r3, [sp, #24]
 80132cc:	bfb2      	itee	lt
 80132ce:	2400      	movlt	r4, #0
 80132d0:	2318      	movge	r3, #24
 80132d2:	fb94 f4f3 	sdivge	r4, r4, r3
 80132d6:	f06f 0317 	mvn.w	r3, #23
 80132da:	fb04 3303 	mla	r3, r4, r3, r3
 80132de:	eb03 0a02 	add.w	sl, r3, r2
 80132e2:	9b04      	ldr	r3, [sp, #16]
 80132e4:	9a06      	ldr	r2, [sp, #24]
 80132e6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80135c0 <__kernel_rem_pio2+0x320>
 80132ea:	eb03 0802 	add.w	r8, r3, r2
 80132ee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80132f0:	1aa7      	subs	r7, r4, r2
 80132f2:	ae20      	add	r6, sp, #128	; 0x80
 80132f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80132f8:	2500      	movs	r5, #0
 80132fa:	4545      	cmp	r5, r8
 80132fc:	dd18      	ble.n	8013330 <__kernel_rem_pio2+0x90>
 80132fe:	9b08      	ldr	r3, [sp, #32]
 8013300:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8013304:	aa20      	add	r2, sp, #128	; 0x80
 8013306:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80135c0 <__kernel_rem_pio2+0x320>
 801330a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801330e:	f1c3 0301 	rsb	r3, r3, #1
 8013312:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8013316:	9307      	str	r3, [sp, #28]
 8013318:	9b07      	ldr	r3, [sp, #28]
 801331a:	9a04      	ldr	r2, [sp, #16]
 801331c:	4443      	add	r3, r8
 801331e:	429a      	cmp	r2, r3
 8013320:	db2f      	blt.n	8013382 <__kernel_rem_pio2+0xe2>
 8013322:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013326:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801332a:	462f      	mov	r7, r5
 801332c:	2600      	movs	r6, #0
 801332e:	e01b      	b.n	8013368 <__kernel_rem_pio2+0xc8>
 8013330:	42ef      	cmn	r7, r5
 8013332:	d407      	bmi.n	8013344 <__kernel_rem_pio2+0xa4>
 8013334:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013338:	f7ed f8fc 	bl	8000534 <__aeabi_i2d>
 801333c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013340:	3501      	adds	r5, #1
 8013342:	e7da      	b.n	80132fa <__kernel_rem_pio2+0x5a>
 8013344:	ec51 0b18 	vmov	r0, r1, d8
 8013348:	e7f8      	b.n	801333c <__kernel_rem_pio2+0x9c>
 801334a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801334e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013352:	f7ed f959 	bl	8000608 <__aeabi_dmul>
 8013356:	4602      	mov	r2, r0
 8013358:	460b      	mov	r3, r1
 801335a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801335e:	f7ec ff9d 	bl	800029c <__adddf3>
 8013362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013366:	3601      	adds	r6, #1
 8013368:	9b06      	ldr	r3, [sp, #24]
 801336a:	429e      	cmp	r6, r3
 801336c:	f1a7 0708 	sub.w	r7, r7, #8
 8013370:	ddeb      	ble.n	801334a <__kernel_rem_pio2+0xaa>
 8013372:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013376:	3508      	adds	r5, #8
 8013378:	ecab 7b02 	vstmia	fp!, {d7}
 801337c:	f108 0801 	add.w	r8, r8, #1
 8013380:	e7ca      	b.n	8013318 <__kernel_rem_pio2+0x78>
 8013382:	9b04      	ldr	r3, [sp, #16]
 8013384:	aa0c      	add	r2, sp, #48	; 0x30
 8013386:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801338a:	930b      	str	r3, [sp, #44]	; 0x2c
 801338c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801338e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013392:	9c04      	ldr	r4, [sp, #16]
 8013394:	930a      	str	r3, [sp, #40]	; 0x28
 8013396:	ab98      	add	r3, sp, #608	; 0x260
 8013398:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801339c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80133a0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80133a4:	f8cd b008 	str.w	fp, [sp, #8]
 80133a8:	4625      	mov	r5, r4
 80133aa:	2d00      	cmp	r5, #0
 80133ac:	dc78      	bgt.n	80134a0 <__kernel_rem_pio2+0x200>
 80133ae:	ec47 6b10 	vmov	d0, r6, r7
 80133b2:	4650      	mov	r0, sl
 80133b4:	f000 fbfc 	bl	8013bb0 <scalbn>
 80133b8:	ec57 6b10 	vmov	r6, r7, d0
 80133bc:	2200      	movs	r2, #0
 80133be:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80133c2:	ee10 0a10 	vmov	r0, s0
 80133c6:	4639      	mov	r1, r7
 80133c8:	f7ed f91e 	bl	8000608 <__aeabi_dmul>
 80133cc:	ec41 0b10 	vmov	d0, r0, r1
 80133d0:	f000 fb66 	bl	8013aa0 <floor>
 80133d4:	4b7f      	ldr	r3, [pc, #508]	; (80135d4 <__kernel_rem_pio2+0x334>)
 80133d6:	ec51 0b10 	vmov	r0, r1, d0
 80133da:	2200      	movs	r2, #0
 80133dc:	f7ed f914 	bl	8000608 <__aeabi_dmul>
 80133e0:	4602      	mov	r2, r0
 80133e2:	460b      	mov	r3, r1
 80133e4:	4630      	mov	r0, r6
 80133e6:	4639      	mov	r1, r7
 80133e8:	f7ec ff56 	bl	8000298 <__aeabi_dsub>
 80133ec:	460f      	mov	r7, r1
 80133ee:	4606      	mov	r6, r0
 80133f0:	f7ed fbba 	bl	8000b68 <__aeabi_d2iz>
 80133f4:	9007      	str	r0, [sp, #28]
 80133f6:	f7ed f89d 	bl	8000534 <__aeabi_i2d>
 80133fa:	4602      	mov	r2, r0
 80133fc:	460b      	mov	r3, r1
 80133fe:	4630      	mov	r0, r6
 8013400:	4639      	mov	r1, r7
 8013402:	f7ec ff49 	bl	8000298 <__aeabi_dsub>
 8013406:	f1ba 0f00 	cmp.w	sl, #0
 801340a:	4606      	mov	r6, r0
 801340c:	460f      	mov	r7, r1
 801340e:	dd70      	ble.n	80134f2 <__kernel_rem_pio2+0x252>
 8013410:	1e62      	subs	r2, r4, #1
 8013412:	ab0c      	add	r3, sp, #48	; 0x30
 8013414:	9d07      	ldr	r5, [sp, #28]
 8013416:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801341a:	f1ca 0118 	rsb	r1, sl, #24
 801341e:	fa40 f301 	asr.w	r3, r0, r1
 8013422:	441d      	add	r5, r3
 8013424:	408b      	lsls	r3, r1
 8013426:	1ac0      	subs	r0, r0, r3
 8013428:	ab0c      	add	r3, sp, #48	; 0x30
 801342a:	9507      	str	r5, [sp, #28]
 801342c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013430:	f1ca 0317 	rsb	r3, sl, #23
 8013434:	fa40 f303 	asr.w	r3, r0, r3
 8013438:	9302      	str	r3, [sp, #8]
 801343a:	9b02      	ldr	r3, [sp, #8]
 801343c:	2b00      	cmp	r3, #0
 801343e:	dd66      	ble.n	801350e <__kernel_rem_pio2+0x26e>
 8013440:	9b07      	ldr	r3, [sp, #28]
 8013442:	2200      	movs	r2, #0
 8013444:	3301      	adds	r3, #1
 8013446:	9307      	str	r3, [sp, #28]
 8013448:	4615      	mov	r5, r2
 801344a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801344e:	4294      	cmp	r4, r2
 8013450:	f300 8099 	bgt.w	8013586 <__kernel_rem_pio2+0x2e6>
 8013454:	f1ba 0f00 	cmp.w	sl, #0
 8013458:	dd07      	ble.n	801346a <__kernel_rem_pio2+0x1ca>
 801345a:	f1ba 0f01 	cmp.w	sl, #1
 801345e:	f000 80a5 	beq.w	80135ac <__kernel_rem_pio2+0x30c>
 8013462:	f1ba 0f02 	cmp.w	sl, #2
 8013466:	f000 80c1 	beq.w	80135ec <__kernel_rem_pio2+0x34c>
 801346a:	9b02      	ldr	r3, [sp, #8]
 801346c:	2b02      	cmp	r3, #2
 801346e:	d14e      	bne.n	801350e <__kernel_rem_pio2+0x26e>
 8013470:	4632      	mov	r2, r6
 8013472:	463b      	mov	r3, r7
 8013474:	4958      	ldr	r1, [pc, #352]	; (80135d8 <__kernel_rem_pio2+0x338>)
 8013476:	2000      	movs	r0, #0
 8013478:	f7ec ff0e 	bl	8000298 <__aeabi_dsub>
 801347c:	4606      	mov	r6, r0
 801347e:	460f      	mov	r7, r1
 8013480:	2d00      	cmp	r5, #0
 8013482:	d044      	beq.n	801350e <__kernel_rem_pio2+0x26e>
 8013484:	4650      	mov	r0, sl
 8013486:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80135c8 <__kernel_rem_pio2+0x328>
 801348a:	f000 fb91 	bl	8013bb0 <scalbn>
 801348e:	4630      	mov	r0, r6
 8013490:	4639      	mov	r1, r7
 8013492:	ec53 2b10 	vmov	r2, r3, d0
 8013496:	f7ec feff 	bl	8000298 <__aeabi_dsub>
 801349a:	4606      	mov	r6, r0
 801349c:	460f      	mov	r7, r1
 801349e:	e036      	b.n	801350e <__kernel_rem_pio2+0x26e>
 80134a0:	4b4e      	ldr	r3, [pc, #312]	; (80135dc <__kernel_rem_pio2+0x33c>)
 80134a2:	2200      	movs	r2, #0
 80134a4:	4630      	mov	r0, r6
 80134a6:	4639      	mov	r1, r7
 80134a8:	f7ed f8ae 	bl	8000608 <__aeabi_dmul>
 80134ac:	f7ed fb5c 	bl	8000b68 <__aeabi_d2iz>
 80134b0:	f7ed f840 	bl	8000534 <__aeabi_i2d>
 80134b4:	4b4a      	ldr	r3, [pc, #296]	; (80135e0 <__kernel_rem_pio2+0x340>)
 80134b6:	2200      	movs	r2, #0
 80134b8:	4680      	mov	r8, r0
 80134ba:	4689      	mov	r9, r1
 80134bc:	f7ed f8a4 	bl	8000608 <__aeabi_dmul>
 80134c0:	4602      	mov	r2, r0
 80134c2:	460b      	mov	r3, r1
 80134c4:	4630      	mov	r0, r6
 80134c6:	4639      	mov	r1, r7
 80134c8:	f7ec fee6 	bl	8000298 <__aeabi_dsub>
 80134cc:	f7ed fb4c 	bl	8000b68 <__aeabi_d2iz>
 80134d0:	9b02      	ldr	r3, [sp, #8]
 80134d2:	f843 0b04 	str.w	r0, [r3], #4
 80134d6:	3d01      	subs	r5, #1
 80134d8:	9302      	str	r3, [sp, #8]
 80134da:	ab70      	add	r3, sp, #448	; 0x1c0
 80134dc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80134e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134e4:	4640      	mov	r0, r8
 80134e6:	4649      	mov	r1, r9
 80134e8:	f7ec fed8 	bl	800029c <__adddf3>
 80134ec:	4606      	mov	r6, r0
 80134ee:	460f      	mov	r7, r1
 80134f0:	e75b      	b.n	80133aa <__kernel_rem_pio2+0x10a>
 80134f2:	d105      	bne.n	8013500 <__kernel_rem_pio2+0x260>
 80134f4:	1e63      	subs	r3, r4, #1
 80134f6:	aa0c      	add	r2, sp, #48	; 0x30
 80134f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80134fc:	15c3      	asrs	r3, r0, #23
 80134fe:	e79b      	b.n	8013438 <__kernel_rem_pio2+0x198>
 8013500:	4b38      	ldr	r3, [pc, #224]	; (80135e4 <__kernel_rem_pio2+0x344>)
 8013502:	2200      	movs	r2, #0
 8013504:	f7ed fb06 	bl	8000b14 <__aeabi_dcmpge>
 8013508:	2800      	cmp	r0, #0
 801350a:	d139      	bne.n	8013580 <__kernel_rem_pio2+0x2e0>
 801350c:	9002      	str	r0, [sp, #8]
 801350e:	2200      	movs	r2, #0
 8013510:	2300      	movs	r3, #0
 8013512:	4630      	mov	r0, r6
 8013514:	4639      	mov	r1, r7
 8013516:	f7ed fadf 	bl	8000ad8 <__aeabi_dcmpeq>
 801351a:	2800      	cmp	r0, #0
 801351c:	f000 80b4 	beq.w	8013688 <__kernel_rem_pio2+0x3e8>
 8013520:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8013524:	465b      	mov	r3, fp
 8013526:	2200      	movs	r2, #0
 8013528:	9904      	ldr	r1, [sp, #16]
 801352a:	428b      	cmp	r3, r1
 801352c:	da65      	bge.n	80135fa <__kernel_rem_pio2+0x35a>
 801352e:	2a00      	cmp	r2, #0
 8013530:	d07b      	beq.n	801362a <__kernel_rem_pio2+0x38a>
 8013532:	ab0c      	add	r3, sp, #48	; 0x30
 8013534:	f1aa 0a18 	sub.w	sl, sl, #24
 8013538:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801353c:	2b00      	cmp	r3, #0
 801353e:	f000 80a0 	beq.w	8013682 <__kernel_rem_pio2+0x3e2>
 8013542:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80135c8 <__kernel_rem_pio2+0x328>
 8013546:	4650      	mov	r0, sl
 8013548:	f000 fb32 	bl	8013bb0 <scalbn>
 801354c:	4f23      	ldr	r7, [pc, #140]	; (80135dc <__kernel_rem_pio2+0x33c>)
 801354e:	ec55 4b10 	vmov	r4, r5, d0
 8013552:	46d8      	mov	r8, fp
 8013554:	2600      	movs	r6, #0
 8013556:	f1b8 0f00 	cmp.w	r8, #0
 801355a:	f280 80cf 	bge.w	80136fc <__kernel_rem_pio2+0x45c>
 801355e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80135c0 <__kernel_rem_pio2+0x320>
 8013562:	465f      	mov	r7, fp
 8013564:	f04f 0800 	mov.w	r8, #0
 8013568:	2f00      	cmp	r7, #0
 801356a:	f2c0 80fd 	blt.w	8013768 <__kernel_rem_pio2+0x4c8>
 801356e:	ab70      	add	r3, sp, #448	; 0x1c0
 8013570:	f8df a074 	ldr.w	sl, [pc, #116]	; 80135e8 <__kernel_rem_pio2+0x348>
 8013574:	ec55 4b18 	vmov	r4, r5, d8
 8013578:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801357c:	2600      	movs	r6, #0
 801357e:	e0e5      	b.n	801374c <__kernel_rem_pio2+0x4ac>
 8013580:	2302      	movs	r3, #2
 8013582:	9302      	str	r3, [sp, #8]
 8013584:	e75c      	b.n	8013440 <__kernel_rem_pio2+0x1a0>
 8013586:	f8db 3000 	ldr.w	r3, [fp]
 801358a:	b955      	cbnz	r5, 80135a2 <__kernel_rem_pio2+0x302>
 801358c:	b123      	cbz	r3, 8013598 <__kernel_rem_pio2+0x2f8>
 801358e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013592:	f8cb 3000 	str.w	r3, [fp]
 8013596:	2301      	movs	r3, #1
 8013598:	3201      	adds	r2, #1
 801359a:	f10b 0b04 	add.w	fp, fp, #4
 801359e:	461d      	mov	r5, r3
 80135a0:	e755      	b.n	801344e <__kernel_rem_pio2+0x1ae>
 80135a2:	1acb      	subs	r3, r1, r3
 80135a4:	f8cb 3000 	str.w	r3, [fp]
 80135a8:	462b      	mov	r3, r5
 80135aa:	e7f5      	b.n	8013598 <__kernel_rem_pio2+0x2f8>
 80135ac:	1e62      	subs	r2, r4, #1
 80135ae:	ab0c      	add	r3, sp, #48	; 0x30
 80135b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80135b8:	a90c      	add	r1, sp, #48	; 0x30
 80135ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80135be:	e754      	b.n	801346a <__kernel_rem_pio2+0x1ca>
	...
 80135cc:	3ff00000 	.word	0x3ff00000
 80135d0:	08014708 	.word	0x08014708
 80135d4:	40200000 	.word	0x40200000
 80135d8:	3ff00000 	.word	0x3ff00000
 80135dc:	3e700000 	.word	0x3e700000
 80135e0:	41700000 	.word	0x41700000
 80135e4:	3fe00000 	.word	0x3fe00000
 80135e8:	080146c8 	.word	0x080146c8
 80135ec:	1e62      	subs	r2, r4, #1
 80135ee:	ab0c      	add	r3, sp, #48	; 0x30
 80135f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80135f8:	e7de      	b.n	80135b8 <__kernel_rem_pio2+0x318>
 80135fa:	a90c      	add	r1, sp, #48	; 0x30
 80135fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013600:	3b01      	subs	r3, #1
 8013602:	430a      	orrs	r2, r1
 8013604:	e790      	b.n	8013528 <__kernel_rem_pio2+0x288>
 8013606:	3301      	adds	r3, #1
 8013608:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801360c:	2900      	cmp	r1, #0
 801360e:	d0fa      	beq.n	8013606 <__kernel_rem_pio2+0x366>
 8013610:	9a08      	ldr	r2, [sp, #32]
 8013612:	18e3      	adds	r3, r4, r3
 8013614:	18a6      	adds	r6, r4, r2
 8013616:	aa20      	add	r2, sp, #128	; 0x80
 8013618:	1c65      	adds	r5, r4, #1
 801361a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801361e:	9302      	str	r3, [sp, #8]
 8013620:	9b02      	ldr	r3, [sp, #8]
 8013622:	42ab      	cmp	r3, r5
 8013624:	da04      	bge.n	8013630 <__kernel_rem_pio2+0x390>
 8013626:	461c      	mov	r4, r3
 8013628:	e6b5      	b.n	8013396 <__kernel_rem_pio2+0xf6>
 801362a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801362c:	2301      	movs	r3, #1
 801362e:	e7eb      	b.n	8013608 <__kernel_rem_pio2+0x368>
 8013630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013632:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013636:	f7ec ff7d 	bl	8000534 <__aeabi_i2d>
 801363a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801363e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013640:	46b3      	mov	fp, r6
 8013642:	461c      	mov	r4, r3
 8013644:	2700      	movs	r7, #0
 8013646:	f04f 0800 	mov.w	r8, #0
 801364a:	f04f 0900 	mov.w	r9, #0
 801364e:	9b06      	ldr	r3, [sp, #24]
 8013650:	429f      	cmp	r7, r3
 8013652:	dd06      	ble.n	8013662 <__kernel_rem_pio2+0x3c2>
 8013654:	ab70      	add	r3, sp, #448	; 0x1c0
 8013656:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801365a:	e9c3 8900 	strd	r8, r9, [r3]
 801365e:	3501      	adds	r5, #1
 8013660:	e7de      	b.n	8013620 <__kernel_rem_pio2+0x380>
 8013662:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013666:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801366a:	f7ec ffcd 	bl	8000608 <__aeabi_dmul>
 801366e:	4602      	mov	r2, r0
 8013670:	460b      	mov	r3, r1
 8013672:	4640      	mov	r0, r8
 8013674:	4649      	mov	r1, r9
 8013676:	f7ec fe11 	bl	800029c <__adddf3>
 801367a:	3701      	adds	r7, #1
 801367c:	4680      	mov	r8, r0
 801367e:	4689      	mov	r9, r1
 8013680:	e7e5      	b.n	801364e <__kernel_rem_pio2+0x3ae>
 8013682:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013686:	e754      	b.n	8013532 <__kernel_rem_pio2+0x292>
 8013688:	ec47 6b10 	vmov	d0, r6, r7
 801368c:	f1ca 0000 	rsb	r0, sl, #0
 8013690:	f000 fa8e 	bl	8013bb0 <scalbn>
 8013694:	ec57 6b10 	vmov	r6, r7, d0
 8013698:	4b9f      	ldr	r3, [pc, #636]	; (8013918 <__kernel_rem_pio2+0x678>)
 801369a:	ee10 0a10 	vmov	r0, s0
 801369e:	2200      	movs	r2, #0
 80136a0:	4639      	mov	r1, r7
 80136a2:	f7ed fa37 	bl	8000b14 <__aeabi_dcmpge>
 80136a6:	b300      	cbz	r0, 80136ea <__kernel_rem_pio2+0x44a>
 80136a8:	4b9c      	ldr	r3, [pc, #624]	; (801391c <__kernel_rem_pio2+0x67c>)
 80136aa:	2200      	movs	r2, #0
 80136ac:	4630      	mov	r0, r6
 80136ae:	4639      	mov	r1, r7
 80136b0:	f7ec ffaa 	bl	8000608 <__aeabi_dmul>
 80136b4:	f7ed fa58 	bl	8000b68 <__aeabi_d2iz>
 80136b8:	4605      	mov	r5, r0
 80136ba:	f7ec ff3b 	bl	8000534 <__aeabi_i2d>
 80136be:	4b96      	ldr	r3, [pc, #600]	; (8013918 <__kernel_rem_pio2+0x678>)
 80136c0:	2200      	movs	r2, #0
 80136c2:	f7ec ffa1 	bl	8000608 <__aeabi_dmul>
 80136c6:	460b      	mov	r3, r1
 80136c8:	4602      	mov	r2, r0
 80136ca:	4639      	mov	r1, r7
 80136cc:	4630      	mov	r0, r6
 80136ce:	f7ec fde3 	bl	8000298 <__aeabi_dsub>
 80136d2:	f7ed fa49 	bl	8000b68 <__aeabi_d2iz>
 80136d6:	f104 0b01 	add.w	fp, r4, #1
 80136da:	ab0c      	add	r3, sp, #48	; 0x30
 80136dc:	f10a 0a18 	add.w	sl, sl, #24
 80136e0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80136e4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80136e8:	e72b      	b.n	8013542 <__kernel_rem_pio2+0x2a2>
 80136ea:	4630      	mov	r0, r6
 80136ec:	4639      	mov	r1, r7
 80136ee:	f7ed fa3b 	bl	8000b68 <__aeabi_d2iz>
 80136f2:	ab0c      	add	r3, sp, #48	; 0x30
 80136f4:	46a3      	mov	fp, r4
 80136f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80136fa:	e722      	b.n	8013542 <__kernel_rem_pio2+0x2a2>
 80136fc:	ab70      	add	r3, sp, #448	; 0x1c0
 80136fe:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8013702:	ab0c      	add	r3, sp, #48	; 0x30
 8013704:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013708:	f7ec ff14 	bl	8000534 <__aeabi_i2d>
 801370c:	4622      	mov	r2, r4
 801370e:	462b      	mov	r3, r5
 8013710:	f7ec ff7a 	bl	8000608 <__aeabi_dmul>
 8013714:	4632      	mov	r2, r6
 8013716:	e9c9 0100 	strd	r0, r1, [r9]
 801371a:	463b      	mov	r3, r7
 801371c:	4620      	mov	r0, r4
 801371e:	4629      	mov	r1, r5
 8013720:	f7ec ff72 	bl	8000608 <__aeabi_dmul>
 8013724:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8013728:	4604      	mov	r4, r0
 801372a:	460d      	mov	r5, r1
 801372c:	e713      	b.n	8013556 <__kernel_rem_pio2+0x2b6>
 801372e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8013732:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8013736:	f7ec ff67 	bl	8000608 <__aeabi_dmul>
 801373a:	4602      	mov	r2, r0
 801373c:	460b      	mov	r3, r1
 801373e:	4620      	mov	r0, r4
 8013740:	4629      	mov	r1, r5
 8013742:	f7ec fdab 	bl	800029c <__adddf3>
 8013746:	3601      	adds	r6, #1
 8013748:	4604      	mov	r4, r0
 801374a:	460d      	mov	r5, r1
 801374c:	9b04      	ldr	r3, [sp, #16]
 801374e:	429e      	cmp	r6, r3
 8013750:	dc01      	bgt.n	8013756 <__kernel_rem_pio2+0x4b6>
 8013752:	45b0      	cmp	r8, r6
 8013754:	daeb      	bge.n	801372e <__kernel_rem_pio2+0x48e>
 8013756:	ab48      	add	r3, sp, #288	; 0x120
 8013758:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801375c:	e9c3 4500 	strd	r4, r5, [r3]
 8013760:	3f01      	subs	r7, #1
 8013762:	f108 0801 	add.w	r8, r8, #1
 8013766:	e6ff      	b.n	8013568 <__kernel_rem_pio2+0x2c8>
 8013768:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801376a:	2b02      	cmp	r3, #2
 801376c:	dc0b      	bgt.n	8013786 <__kernel_rem_pio2+0x4e6>
 801376e:	2b00      	cmp	r3, #0
 8013770:	dc6e      	bgt.n	8013850 <__kernel_rem_pio2+0x5b0>
 8013772:	d045      	beq.n	8013800 <__kernel_rem_pio2+0x560>
 8013774:	9b07      	ldr	r3, [sp, #28]
 8013776:	f003 0007 	and.w	r0, r3, #7
 801377a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801377e:	ecbd 8b02 	vpop	{d8}
 8013782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013786:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013788:	2b03      	cmp	r3, #3
 801378a:	d1f3      	bne.n	8013774 <__kernel_rem_pio2+0x4d4>
 801378c:	ab48      	add	r3, sp, #288	; 0x120
 801378e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8013792:	46d0      	mov	r8, sl
 8013794:	46d9      	mov	r9, fp
 8013796:	f1b9 0f00 	cmp.w	r9, #0
 801379a:	f1a8 0808 	sub.w	r8, r8, #8
 801379e:	dc64      	bgt.n	801386a <__kernel_rem_pio2+0x5ca>
 80137a0:	465c      	mov	r4, fp
 80137a2:	2c01      	cmp	r4, #1
 80137a4:	f1aa 0a08 	sub.w	sl, sl, #8
 80137a8:	dc7e      	bgt.n	80138a8 <__kernel_rem_pio2+0x608>
 80137aa:	2000      	movs	r0, #0
 80137ac:	2100      	movs	r1, #0
 80137ae:	f1bb 0f01 	cmp.w	fp, #1
 80137b2:	f300 8097 	bgt.w	80138e4 <__kernel_rem_pio2+0x644>
 80137b6:	9b02      	ldr	r3, [sp, #8]
 80137b8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80137bc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	f040 8099 	bne.w	80138f8 <__kernel_rem_pio2+0x658>
 80137c6:	9b01      	ldr	r3, [sp, #4]
 80137c8:	e9c3 5600 	strd	r5, r6, [r3]
 80137cc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80137d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80137d4:	e7ce      	b.n	8013774 <__kernel_rem_pio2+0x4d4>
 80137d6:	ab48      	add	r3, sp, #288	; 0x120
 80137d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80137dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137e0:	f7ec fd5c 	bl	800029c <__adddf3>
 80137e4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80137e8:	f1bb 0f00 	cmp.w	fp, #0
 80137ec:	daf3      	bge.n	80137d6 <__kernel_rem_pio2+0x536>
 80137ee:	9b02      	ldr	r3, [sp, #8]
 80137f0:	b113      	cbz	r3, 80137f8 <__kernel_rem_pio2+0x558>
 80137f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80137f6:	4619      	mov	r1, r3
 80137f8:	9b01      	ldr	r3, [sp, #4]
 80137fa:	e9c3 0100 	strd	r0, r1, [r3]
 80137fe:	e7b9      	b.n	8013774 <__kernel_rem_pio2+0x4d4>
 8013800:	2000      	movs	r0, #0
 8013802:	2100      	movs	r1, #0
 8013804:	e7f0      	b.n	80137e8 <__kernel_rem_pio2+0x548>
 8013806:	ab48      	add	r3, sp, #288	; 0x120
 8013808:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013810:	f7ec fd44 	bl	800029c <__adddf3>
 8013814:	3c01      	subs	r4, #1
 8013816:	2c00      	cmp	r4, #0
 8013818:	daf5      	bge.n	8013806 <__kernel_rem_pio2+0x566>
 801381a:	9b02      	ldr	r3, [sp, #8]
 801381c:	b1e3      	cbz	r3, 8013858 <__kernel_rem_pio2+0x5b8>
 801381e:	4602      	mov	r2, r0
 8013820:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013824:	9c01      	ldr	r4, [sp, #4]
 8013826:	e9c4 2300 	strd	r2, r3, [r4]
 801382a:	4602      	mov	r2, r0
 801382c:	460b      	mov	r3, r1
 801382e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8013832:	f7ec fd31 	bl	8000298 <__aeabi_dsub>
 8013836:	ad4a      	add	r5, sp, #296	; 0x128
 8013838:	2401      	movs	r4, #1
 801383a:	45a3      	cmp	fp, r4
 801383c:	da0f      	bge.n	801385e <__kernel_rem_pio2+0x5be>
 801383e:	9b02      	ldr	r3, [sp, #8]
 8013840:	b113      	cbz	r3, 8013848 <__kernel_rem_pio2+0x5a8>
 8013842:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013846:	4619      	mov	r1, r3
 8013848:	9b01      	ldr	r3, [sp, #4]
 801384a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801384e:	e791      	b.n	8013774 <__kernel_rem_pio2+0x4d4>
 8013850:	465c      	mov	r4, fp
 8013852:	2000      	movs	r0, #0
 8013854:	2100      	movs	r1, #0
 8013856:	e7de      	b.n	8013816 <__kernel_rem_pio2+0x576>
 8013858:	4602      	mov	r2, r0
 801385a:	460b      	mov	r3, r1
 801385c:	e7e2      	b.n	8013824 <__kernel_rem_pio2+0x584>
 801385e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8013862:	f7ec fd1b 	bl	800029c <__adddf3>
 8013866:	3401      	adds	r4, #1
 8013868:	e7e7      	b.n	801383a <__kernel_rem_pio2+0x59a>
 801386a:	e9d8 4500 	ldrd	r4, r5, [r8]
 801386e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8013872:	4620      	mov	r0, r4
 8013874:	4632      	mov	r2, r6
 8013876:	463b      	mov	r3, r7
 8013878:	4629      	mov	r1, r5
 801387a:	f7ec fd0f 	bl	800029c <__adddf3>
 801387e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013882:	4602      	mov	r2, r0
 8013884:	460b      	mov	r3, r1
 8013886:	4620      	mov	r0, r4
 8013888:	4629      	mov	r1, r5
 801388a:	f7ec fd05 	bl	8000298 <__aeabi_dsub>
 801388e:	4632      	mov	r2, r6
 8013890:	463b      	mov	r3, r7
 8013892:	f7ec fd03 	bl	800029c <__adddf3>
 8013896:	ed9d 7b04 	vldr	d7, [sp, #16]
 801389a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801389e:	ed88 7b00 	vstr	d7, [r8]
 80138a2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80138a6:	e776      	b.n	8013796 <__kernel_rem_pio2+0x4f6>
 80138a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80138ac:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80138b0:	4640      	mov	r0, r8
 80138b2:	4632      	mov	r2, r6
 80138b4:	463b      	mov	r3, r7
 80138b6:	4649      	mov	r1, r9
 80138b8:	f7ec fcf0 	bl	800029c <__adddf3>
 80138bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80138c0:	4602      	mov	r2, r0
 80138c2:	460b      	mov	r3, r1
 80138c4:	4640      	mov	r0, r8
 80138c6:	4649      	mov	r1, r9
 80138c8:	f7ec fce6 	bl	8000298 <__aeabi_dsub>
 80138cc:	4632      	mov	r2, r6
 80138ce:	463b      	mov	r3, r7
 80138d0:	f7ec fce4 	bl	800029c <__adddf3>
 80138d4:	ed9d 7b04 	vldr	d7, [sp, #16]
 80138d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80138dc:	ed8a 7b00 	vstr	d7, [sl]
 80138e0:	3c01      	subs	r4, #1
 80138e2:	e75e      	b.n	80137a2 <__kernel_rem_pio2+0x502>
 80138e4:	ab48      	add	r3, sp, #288	; 0x120
 80138e6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80138ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138ee:	f7ec fcd5 	bl	800029c <__adddf3>
 80138f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80138f6:	e75a      	b.n	80137ae <__kernel_rem_pio2+0x50e>
 80138f8:	9b01      	ldr	r3, [sp, #4]
 80138fa:	9a01      	ldr	r2, [sp, #4]
 80138fc:	601d      	str	r5, [r3, #0]
 80138fe:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8013902:	605c      	str	r4, [r3, #4]
 8013904:	609f      	str	r7, [r3, #8]
 8013906:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801390a:	60d3      	str	r3, [r2, #12]
 801390c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013910:	6110      	str	r0, [r2, #16]
 8013912:	6153      	str	r3, [r2, #20]
 8013914:	e72e      	b.n	8013774 <__kernel_rem_pio2+0x4d4>
 8013916:	bf00      	nop
 8013918:	41700000 	.word	0x41700000
 801391c:	3e700000 	.word	0x3e700000

08013920 <__kernel_sin>:
 8013920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013924:	ed2d 8b04 	vpush	{d8-d9}
 8013928:	eeb0 8a41 	vmov.f32	s16, s2
 801392c:	eef0 8a61 	vmov.f32	s17, s3
 8013930:	ec55 4b10 	vmov	r4, r5, d0
 8013934:	b083      	sub	sp, #12
 8013936:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801393a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801393e:	9001      	str	r0, [sp, #4]
 8013940:	da06      	bge.n	8013950 <__kernel_sin+0x30>
 8013942:	ee10 0a10 	vmov	r0, s0
 8013946:	4629      	mov	r1, r5
 8013948:	f7ed f90e 	bl	8000b68 <__aeabi_d2iz>
 801394c:	2800      	cmp	r0, #0
 801394e:	d051      	beq.n	80139f4 <__kernel_sin+0xd4>
 8013950:	4622      	mov	r2, r4
 8013952:	462b      	mov	r3, r5
 8013954:	4620      	mov	r0, r4
 8013956:	4629      	mov	r1, r5
 8013958:	f7ec fe56 	bl	8000608 <__aeabi_dmul>
 801395c:	4682      	mov	sl, r0
 801395e:	468b      	mov	fp, r1
 8013960:	4602      	mov	r2, r0
 8013962:	460b      	mov	r3, r1
 8013964:	4620      	mov	r0, r4
 8013966:	4629      	mov	r1, r5
 8013968:	f7ec fe4e 	bl	8000608 <__aeabi_dmul>
 801396c:	a341      	add	r3, pc, #260	; (adr r3, 8013a74 <__kernel_sin+0x154>)
 801396e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013972:	4680      	mov	r8, r0
 8013974:	4689      	mov	r9, r1
 8013976:	4650      	mov	r0, sl
 8013978:	4659      	mov	r1, fp
 801397a:	f7ec fe45 	bl	8000608 <__aeabi_dmul>
 801397e:	a33f      	add	r3, pc, #252	; (adr r3, 8013a7c <__kernel_sin+0x15c>)
 8013980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013984:	f7ec fc88 	bl	8000298 <__aeabi_dsub>
 8013988:	4652      	mov	r2, sl
 801398a:	465b      	mov	r3, fp
 801398c:	f7ec fe3c 	bl	8000608 <__aeabi_dmul>
 8013990:	a33c      	add	r3, pc, #240	; (adr r3, 8013a84 <__kernel_sin+0x164>)
 8013992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013996:	f7ec fc81 	bl	800029c <__adddf3>
 801399a:	4652      	mov	r2, sl
 801399c:	465b      	mov	r3, fp
 801399e:	f7ec fe33 	bl	8000608 <__aeabi_dmul>
 80139a2:	a33a      	add	r3, pc, #232	; (adr r3, 8013a8c <__kernel_sin+0x16c>)
 80139a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a8:	f7ec fc76 	bl	8000298 <__aeabi_dsub>
 80139ac:	4652      	mov	r2, sl
 80139ae:	465b      	mov	r3, fp
 80139b0:	f7ec fe2a 	bl	8000608 <__aeabi_dmul>
 80139b4:	a337      	add	r3, pc, #220	; (adr r3, 8013a94 <__kernel_sin+0x174>)
 80139b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ba:	f7ec fc6f 	bl	800029c <__adddf3>
 80139be:	9b01      	ldr	r3, [sp, #4]
 80139c0:	4606      	mov	r6, r0
 80139c2:	460f      	mov	r7, r1
 80139c4:	b9eb      	cbnz	r3, 8013a02 <__kernel_sin+0xe2>
 80139c6:	4602      	mov	r2, r0
 80139c8:	460b      	mov	r3, r1
 80139ca:	4650      	mov	r0, sl
 80139cc:	4659      	mov	r1, fp
 80139ce:	f7ec fe1b 	bl	8000608 <__aeabi_dmul>
 80139d2:	a325      	add	r3, pc, #148	; (adr r3, 8013a68 <__kernel_sin+0x148>)
 80139d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d8:	f7ec fc5e 	bl	8000298 <__aeabi_dsub>
 80139dc:	4642      	mov	r2, r8
 80139de:	464b      	mov	r3, r9
 80139e0:	f7ec fe12 	bl	8000608 <__aeabi_dmul>
 80139e4:	4602      	mov	r2, r0
 80139e6:	460b      	mov	r3, r1
 80139e8:	4620      	mov	r0, r4
 80139ea:	4629      	mov	r1, r5
 80139ec:	f7ec fc56 	bl	800029c <__adddf3>
 80139f0:	4604      	mov	r4, r0
 80139f2:	460d      	mov	r5, r1
 80139f4:	ec45 4b10 	vmov	d0, r4, r5
 80139f8:	b003      	add	sp, #12
 80139fa:	ecbd 8b04 	vpop	{d8-d9}
 80139fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a02:	4b1b      	ldr	r3, [pc, #108]	; (8013a70 <__kernel_sin+0x150>)
 8013a04:	ec51 0b18 	vmov	r0, r1, d8
 8013a08:	2200      	movs	r2, #0
 8013a0a:	f7ec fdfd 	bl	8000608 <__aeabi_dmul>
 8013a0e:	4632      	mov	r2, r6
 8013a10:	ec41 0b19 	vmov	d9, r0, r1
 8013a14:	463b      	mov	r3, r7
 8013a16:	4640      	mov	r0, r8
 8013a18:	4649      	mov	r1, r9
 8013a1a:	f7ec fdf5 	bl	8000608 <__aeabi_dmul>
 8013a1e:	4602      	mov	r2, r0
 8013a20:	460b      	mov	r3, r1
 8013a22:	ec51 0b19 	vmov	r0, r1, d9
 8013a26:	f7ec fc37 	bl	8000298 <__aeabi_dsub>
 8013a2a:	4652      	mov	r2, sl
 8013a2c:	465b      	mov	r3, fp
 8013a2e:	f7ec fdeb 	bl	8000608 <__aeabi_dmul>
 8013a32:	ec53 2b18 	vmov	r2, r3, d8
 8013a36:	f7ec fc2f 	bl	8000298 <__aeabi_dsub>
 8013a3a:	a30b      	add	r3, pc, #44	; (adr r3, 8013a68 <__kernel_sin+0x148>)
 8013a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a40:	4606      	mov	r6, r0
 8013a42:	460f      	mov	r7, r1
 8013a44:	4640      	mov	r0, r8
 8013a46:	4649      	mov	r1, r9
 8013a48:	f7ec fdde 	bl	8000608 <__aeabi_dmul>
 8013a4c:	4602      	mov	r2, r0
 8013a4e:	460b      	mov	r3, r1
 8013a50:	4630      	mov	r0, r6
 8013a52:	4639      	mov	r1, r7
 8013a54:	f7ec fc22 	bl	800029c <__adddf3>
 8013a58:	4602      	mov	r2, r0
 8013a5a:	460b      	mov	r3, r1
 8013a5c:	4620      	mov	r0, r4
 8013a5e:	4629      	mov	r1, r5
 8013a60:	f7ec fc1a 	bl	8000298 <__aeabi_dsub>
 8013a64:	e7c4      	b.n	80139f0 <__kernel_sin+0xd0>
 8013a66:	bf00      	nop
 8013a68:	55555549 	.word	0x55555549
 8013a6c:	3fc55555 	.word	0x3fc55555
 8013a70:	3fe00000 	.word	0x3fe00000
 8013a74:	5acfd57c 	.word	0x5acfd57c
 8013a78:	3de5d93a 	.word	0x3de5d93a
 8013a7c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013a80:	3e5ae5e6 	.word	0x3e5ae5e6
 8013a84:	57b1fe7d 	.word	0x57b1fe7d
 8013a88:	3ec71de3 	.word	0x3ec71de3
 8013a8c:	19c161d5 	.word	0x19c161d5
 8013a90:	3f2a01a0 	.word	0x3f2a01a0
 8013a94:	1110f8a6 	.word	0x1110f8a6
 8013a98:	3f811111 	.word	0x3f811111
 8013a9c:	00000000 	.word	0x00000000

08013aa0 <floor>:
 8013aa0:	ec51 0b10 	vmov	r0, r1, d0
 8013aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013aac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013ab0:	2e13      	cmp	r6, #19
 8013ab2:	ee10 5a10 	vmov	r5, s0
 8013ab6:	ee10 8a10 	vmov	r8, s0
 8013aba:	460c      	mov	r4, r1
 8013abc:	dc32      	bgt.n	8013b24 <floor+0x84>
 8013abe:	2e00      	cmp	r6, #0
 8013ac0:	da14      	bge.n	8013aec <floor+0x4c>
 8013ac2:	a333      	add	r3, pc, #204	; (adr r3, 8013b90 <floor+0xf0>)
 8013ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ac8:	f7ec fbe8 	bl	800029c <__adddf3>
 8013acc:	2200      	movs	r2, #0
 8013ace:	2300      	movs	r3, #0
 8013ad0:	f7ed f82a 	bl	8000b28 <__aeabi_dcmpgt>
 8013ad4:	b138      	cbz	r0, 8013ae6 <floor+0x46>
 8013ad6:	2c00      	cmp	r4, #0
 8013ad8:	da57      	bge.n	8013b8a <floor+0xea>
 8013ada:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013ade:	431d      	orrs	r5, r3
 8013ae0:	d001      	beq.n	8013ae6 <floor+0x46>
 8013ae2:	4c2d      	ldr	r4, [pc, #180]	; (8013b98 <floor+0xf8>)
 8013ae4:	2500      	movs	r5, #0
 8013ae6:	4621      	mov	r1, r4
 8013ae8:	4628      	mov	r0, r5
 8013aea:	e025      	b.n	8013b38 <floor+0x98>
 8013aec:	4f2b      	ldr	r7, [pc, #172]	; (8013b9c <floor+0xfc>)
 8013aee:	4137      	asrs	r7, r6
 8013af0:	ea01 0307 	and.w	r3, r1, r7
 8013af4:	4303      	orrs	r3, r0
 8013af6:	d01f      	beq.n	8013b38 <floor+0x98>
 8013af8:	a325      	add	r3, pc, #148	; (adr r3, 8013b90 <floor+0xf0>)
 8013afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013afe:	f7ec fbcd 	bl	800029c <__adddf3>
 8013b02:	2200      	movs	r2, #0
 8013b04:	2300      	movs	r3, #0
 8013b06:	f7ed f80f 	bl	8000b28 <__aeabi_dcmpgt>
 8013b0a:	2800      	cmp	r0, #0
 8013b0c:	d0eb      	beq.n	8013ae6 <floor+0x46>
 8013b0e:	2c00      	cmp	r4, #0
 8013b10:	bfbe      	ittt	lt
 8013b12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013b16:	fa43 f606 	asrlt.w	r6, r3, r6
 8013b1a:	19a4      	addlt	r4, r4, r6
 8013b1c:	ea24 0407 	bic.w	r4, r4, r7
 8013b20:	2500      	movs	r5, #0
 8013b22:	e7e0      	b.n	8013ae6 <floor+0x46>
 8013b24:	2e33      	cmp	r6, #51	; 0x33
 8013b26:	dd0b      	ble.n	8013b40 <floor+0xa0>
 8013b28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013b2c:	d104      	bne.n	8013b38 <floor+0x98>
 8013b2e:	ee10 2a10 	vmov	r2, s0
 8013b32:	460b      	mov	r3, r1
 8013b34:	f7ec fbb2 	bl	800029c <__adddf3>
 8013b38:	ec41 0b10 	vmov	d0, r0, r1
 8013b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b40:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b48:	fa23 f707 	lsr.w	r7, r3, r7
 8013b4c:	4207      	tst	r7, r0
 8013b4e:	d0f3      	beq.n	8013b38 <floor+0x98>
 8013b50:	a30f      	add	r3, pc, #60	; (adr r3, 8013b90 <floor+0xf0>)
 8013b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b56:	f7ec fba1 	bl	800029c <__adddf3>
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	f7ec ffe3 	bl	8000b28 <__aeabi_dcmpgt>
 8013b62:	2800      	cmp	r0, #0
 8013b64:	d0bf      	beq.n	8013ae6 <floor+0x46>
 8013b66:	2c00      	cmp	r4, #0
 8013b68:	da02      	bge.n	8013b70 <floor+0xd0>
 8013b6a:	2e14      	cmp	r6, #20
 8013b6c:	d103      	bne.n	8013b76 <floor+0xd6>
 8013b6e:	3401      	adds	r4, #1
 8013b70:	ea25 0507 	bic.w	r5, r5, r7
 8013b74:	e7b7      	b.n	8013ae6 <floor+0x46>
 8013b76:	2301      	movs	r3, #1
 8013b78:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013b7c:	fa03 f606 	lsl.w	r6, r3, r6
 8013b80:	4435      	add	r5, r6
 8013b82:	4545      	cmp	r5, r8
 8013b84:	bf38      	it	cc
 8013b86:	18e4      	addcc	r4, r4, r3
 8013b88:	e7f2      	b.n	8013b70 <floor+0xd0>
 8013b8a:	2500      	movs	r5, #0
 8013b8c:	462c      	mov	r4, r5
 8013b8e:	e7aa      	b.n	8013ae6 <floor+0x46>
 8013b90:	8800759c 	.word	0x8800759c
 8013b94:	7e37e43c 	.word	0x7e37e43c
 8013b98:	bff00000 	.word	0xbff00000
 8013b9c:	000fffff 	.word	0x000fffff

08013ba0 <nan>:
 8013ba0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013ba8 <nan+0x8>
 8013ba4:	4770      	bx	lr
 8013ba6:	bf00      	nop
 8013ba8:	00000000 	.word	0x00000000
 8013bac:	7ff80000 	.word	0x7ff80000

08013bb0 <scalbn>:
 8013bb0:	b570      	push	{r4, r5, r6, lr}
 8013bb2:	ec55 4b10 	vmov	r4, r5, d0
 8013bb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013bba:	4606      	mov	r6, r0
 8013bbc:	462b      	mov	r3, r5
 8013bbe:	b99a      	cbnz	r2, 8013be8 <scalbn+0x38>
 8013bc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013bc4:	4323      	orrs	r3, r4
 8013bc6:	d036      	beq.n	8013c36 <scalbn+0x86>
 8013bc8:	4b39      	ldr	r3, [pc, #228]	; (8013cb0 <scalbn+0x100>)
 8013bca:	4629      	mov	r1, r5
 8013bcc:	ee10 0a10 	vmov	r0, s0
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	f7ec fd19 	bl	8000608 <__aeabi_dmul>
 8013bd6:	4b37      	ldr	r3, [pc, #220]	; (8013cb4 <scalbn+0x104>)
 8013bd8:	429e      	cmp	r6, r3
 8013bda:	4604      	mov	r4, r0
 8013bdc:	460d      	mov	r5, r1
 8013bde:	da10      	bge.n	8013c02 <scalbn+0x52>
 8013be0:	a32b      	add	r3, pc, #172	; (adr r3, 8013c90 <scalbn+0xe0>)
 8013be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be6:	e03a      	b.n	8013c5e <scalbn+0xae>
 8013be8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013bec:	428a      	cmp	r2, r1
 8013bee:	d10c      	bne.n	8013c0a <scalbn+0x5a>
 8013bf0:	ee10 2a10 	vmov	r2, s0
 8013bf4:	4620      	mov	r0, r4
 8013bf6:	4629      	mov	r1, r5
 8013bf8:	f7ec fb50 	bl	800029c <__adddf3>
 8013bfc:	4604      	mov	r4, r0
 8013bfe:	460d      	mov	r5, r1
 8013c00:	e019      	b.n	8013c36 <scalbn+0x86>
 8013c02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013c06:	460b      	mov	r3, r1
 8013c08:	3a36      	subs	r2, #54	; 0x36
 8013c0a:	4432      	add	r2, r6
 8013c0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013c10:	428a      	cmp	r2, r1
 8013c12:	dd08      	ble.n	8013c26 <scalbn+0x76>
 8013c14:	2d00      	cmp	r5, #0
 8013c16:	a120      	add	r1, pc, #128	; (adr r1, 8013c98 <scalbn+0xe8>)
 8013c18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c1c:	da1c      	bge.n	8013c58 <scalbn+0xa8>
 8013c1e:	a120      	add	r1, pc, #128	; (adr r1, 8013ca0 <scalbn+0xf0>)
 8013c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c24:	e018      	b.n	8013c58 <scalbn+0xa8>
 8013c26:	2a00      	cmp	r2, #0
 8013c28:	dd08      	ble.n	8013c3c <scalbn+0x8c>
 8013c2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013c2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013c32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013c36:	ec45 4b10 	vmov	d0, r4, r5
 8013c3a:	bd70      	pop	{r4, r5, r6, pc}
 8013c3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013c40:	da19      	bge.n	8013c76 <scalbn+0xc6>
 8013c42:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013c46:	429e      	cmp	r6, r3
 8013c48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013c4c:	dd0a      	ble.n	8013c64 <scalbn+0xb4>
 8013c4e:	a112      	add	r1, pc, #72	; (adr r1, 8013c98 <scalbn+0xe8>)
 8013c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d1e2      	bne.n	8013c1e <scalbn+0x6e>
 8013c58:	a30f      	add	r3, pc, #60	; (adr r3, 8013c98 <scalbn+0xe8>)
 8013c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c5e:	f7ec fcd3 	bl	8000608 <__aeabi_dmul>
 8013c62:	e7cb      	b.n	8013bfc <scalbn+0x4c>
 8013c64:	a10a      	add	r1, pc, #40	; (adr r1, 8013c90 <scalbn+0xe0>)
 8013c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d0b8      	beq.n	8013be0 <scalbn+0x30>
 8013c6e:	a10e      	add	r1, pc, #56	; (adr r1, 8013ca8 <scalbn+0xf8>)
 8013c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c74:	e7b4      	b.n	8013be0 <scalbn+0x30>
 8013c76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013c7a:	3236      	adds	r2, #54	; 0x36
 8013c7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013c80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013c84:	4620      	mov	r0, r4
 8013c86:	4b0c      	ldr	r3, [pc, #48]	; (8013cb8 <scalbn+0x108>)
 8013c88:	2200      	movs	r2, #0
 8013c8a:	e7e8      	b.n	8013c5e <scalbn+0xae>
 8013c8c:	f3af 8000 	nop.w
 8013c90:	c2f8f359 	.word	0xc2f8f359
 8013c94:	01a56e1f 	.word	0x01a56e1f
 8013c98:	8800759c 	.word	0x8800759c
 8013c9c:	7e37e43c 	.word	0x7e37e43c
 8013ca0:	8800759c 	.word	0x8800759c
 8013ca4:	fe37e43c 	.word	0xfe37e43c
 8013ca8:	c2f8f359 	.word	0xc2f8f359
 8013cac:	81a56e1f 	.word	0x81a56e1f
 8013cb0:	43500000 	.word	0x43500000
 8013cb4:	ffff3cb0 	.word	0xffff3cb0
 8013cb8:	3c900000 	.word	0x3c900000

08013cbc <_init>:
 8013cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cbe:	bf00      	nop
 8013cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cc2:	bc08      	pop	{r3}
 8013cc4:	469e      	mov	lr, r3
 8013cc6:	4770      	bx	lr

08013cc8 <_fini>:
 8013cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cca:	bf00      	nop
 8013ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cce:	bc08      	pop	{r3}
 8013cd0:	469e      	mov	lr, r3
 8013cd2:	4770      	bx	lr
